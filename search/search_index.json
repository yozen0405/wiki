{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7e3d\u89bd","text":""},{"location":"#_1","title":"\u4ecb\u7d39","text":"<p>\u4e3b\u65e8\u662f\u5e0c\u671b\u80fd\u6574\u7406\u51fa\u6f14\u7b97\u6cd5\u7af6\u8cfd\u80fd\u51fa\u51fa\u4f86\u7684\u6240\u6709\u6280\u5de7\uff0c\u4e0d\u6703\u904e\u591a\u63d0\u53ca\u6f14\u7b97\u6cd5\u7684\u6559\u5b78\uff0c\u4e3b\u8981\u8457\u91cd\u5728\u984c\u76ee\u7684\u601d\u8def\u8207\u4e00\u4e9b\u6280\u5de7\u7684\u6574\u7406\uff0c\u5e0c\u671b\u4f7f\u7528\u8005\u4e00\u76ee\u4e86\u7136</p>"},{"location":"#_2","title":"\u76ee\u9304","text":"<ul> <li> <p>\u8caa\u5fc3</p> <ul> <li>\u5340\u9593\u554f\u984c</li> <li>\u6392\u7a0b\u554f\u984c</li> <li>\u8cc7\u7d50\u8caa\u5fc3</li> </ul> </li> <li> <p>\u8cc7\u6599\u7d50\u69cb</p> <ul> <li>bitset </li> <li>Treap</li> <li>\u6301\u4e45\u5316</li> <li>Memory pool</li> </ul> </li> <li> <p>\u6a39\u8ad6</p> <ul> <li>\u63db\u6839 dp</li> <li>\u6a39 dp</li> <li>\u500d\u589e\u6cd5\u8207 LCA</li> <li>\u5176\u4ed6\u985e\u578b</li> </ul> </li> <li> <p>\u5716\u8ad6</p> <ul> <li>Disjoint Set</li> <li>\u6700\u77ed\u8def</li> <li>MST</li> <li>\u6c34\u6bcd\u5716</li> <li>\u9023\u901a\u5143\u4ef6\u5716\u8ad6</li> <li>\u7db2\u8def\u6d41</li> </ul> </li> <li> <p>\u6578\u5b78</p> <ul> <li>\u7d44\u5408</li> <li>\u8a08\u7b97\u5e7e\u4f55</li> <li>\u4e2d\u570b\u5269\u9918\u5b9a\u7406</li> </ul> </li> <li> <p>\u96e2\u7dda\u6f14\u7b97\u6cd5</p> <ul> <li>\u6574\u9ad4\u4e8c\u5206</li> <li>CDQ \u5206\u6cbb</li> <li>\u83ab\u968a</li> </ul> </li> <li> <p>\u52d5\u614b\u898f\u5283</p> <ul> <li>LIS</li> <li>\u80cc\u5305\u554f\u984c</li> </ul> </li> <li> <p>\u5b57\u4e32</p> <ul> <li>hash</li> </ul> </li> </ul>"},{"location":"basic/sorting_algorithms/","title":"Sorting","text":""},{"location":"basic/sorting_algorithms/#stable-sort","title":"Stable Sort","text":"<p>\u7a69\u5b9a\u6392\u5e8f\u6cd5\uff08stable sorting\uff09\uff0c\u5982\u679c\u6578\u503c\u76f8\u540c\uff0c\u6392\u5e8f\u5f8c\u300c\u76f8\u5c0d\u4f4d\u7f6e\u8207\u6392\u5e8f\u524d\u76f8\u540c\u300d\uff0c\u7a31\u7a69\u5b9a\u6392\u5e8f\u3002</p>"},{"location":"basic/sorting_algorithms/#bubble-sort","title":"Bubble Sort","text":"<p>\u6c23\u6ce1\u6392\u5e8f\u7684\u539f\u7406\u662f\uff0c\u6bcf\u56de\u5408\u7576\u524d\u6700\u5927\u7684\u5143\u7d20\u90fd\u6703\u900f\u904e\u4e0d\u65b7\u5730\u8207\u5176\u53f3\u624b\u908a\u7684\u5143\u7d20\u4ea4\u63db\u300c\u6d6e\u5230\u300d\u5b83\u6700\u7d42\u7684\u6240\u5728\u4f4d\u7f6e\uff0c\u5f9e\u800c\u5728\u9032\u884c n \u2212 1 \u56de\u5408\u5f8c\u78ba\u5b9a\u6240\u6709\u5143\u7d20\u90fd\u5df2\u7d93\u5230 \u9054\u6b63\u78ba\u7684\u4f4d\u7f6e\u3002</p> Bubble sort<pre><code>void bubble_sort() {\n    for(int i = 1; i &lt; n; i++) {\n        for(int j = 0; j &lt; n - 1; j++) {\n            if(a[j] &gt; a[j + 1]) {\n                swap(a[j], a[j+1]);\n            }\n        }\n    }\n}\n</code></pre> <p>\u6642\u9593\u8907\u96dc\u5ea6 : \\(O(n^2)\\)</p>"},{"location":"basic/sorting_algorithms/#_1","title":"\u76f8\u95dc\u4f8b\u984c","text":"CS Academy - Sorting Steps / USACO Open 2018 Out of Sort S <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u554f bubble sort \u6703\u5faa\u74b0\u5e7e\u6b21\uff08\u8a73\u898b\u539f\u984c\uff09</p> <p>\\(n\\le 10^5, 1 &lt; a_i &lt; 10^9\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u4f8b\u5982\u7bc4\u4f8b <code>1 3 4 2</code>\uff0c\u6211\u5011\u662f\u70ba\u4e86\u8981\u5c07 2 swap \u56de\u539f\u672c\u7684\u4f4d\u7f6e\u624d\u9700\u8981\u82b1\u90a3\u9ebc\u4e45\u7684\u6642\u9593</p> <p>\u82e5\u6bcf\u500b\u4eba\u5de6\u908a\u7684\u6578\u5b57\u90fd\u6bd4\u4ed6\u5c0f\u7684\u8a71\uff0c\u5c31\u5b8c\u6210\u6392\u5e8f\u4e86\uff0c\u4e0d\u7136\u5c31\u9700\u8981\u5c07\u5de6\u908a\u6bd4\u4ed6\u5927\u7684\u6578\u5b57\u79fb\u5230\u53f3\u908a\u53bb</p> <p>\u6bcf\u500b\u56de\u5408\u6703\u628a\u4e00\u500b\uff08\u82e5\u5b58\u5728\uff09\u81ea\u5df1\u5de6\u908a\u6bd4\u81ea\u5df1\u5927\u7684\u6578\u5b57\u79fb\u52d5\u5230\u81ea\u5df1\u53f3\u908a\uff0c\u7576\u6bcf\u500b\u4eba\u90fd\u628a\u6bd4\u81ea\u5df1\u5927\u7684\u6578\u5b57\u79fb\u52d5\u5230\u81ea\u5df1\u53f3\u908a\uff0c\u5c31\u5b8c\u6210\u6392\u5e8f\u4e86</p> USACO 2018 OPEN Out of Sorts G <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u554f\u96d9\u5411 bubble sort \u6703\u5faa\u74b0\u5e7e\u6b21\uff08\u8a73\u898b\u539f\u984c\uff09</p> \u601d\u8def <p>\u89c0\u5bdf\u7bc4\u4f8b\u6e2c\u8cc7 : </p> <pre><code>1 8 5 3 2\n1 5 3 2 8\n1 2 5 3 8\n</code></pre> <p>\u53ef\u4ee5\u767c\u73fe\u5176\u5be6\u5c31\u662f swap(2, 8) \u800c\u5df2\uff0c\u6709\u4e86\u9019\u500b\u89c0\u5bdf\u5f8c\uff0c\u6211\u5011\u8003\u616e\u81f3\u5c11\u8981\u63db\u5e7e\u6b21\uff0c\u5c0d\u65bc\u4e00\u500b\u300c\u5206\u754c\u7dda\u300d\uff0c\u6211\u5011\u9700\u8981\u5c07\u4e0d\u8a72\u5728\u5de6\u908a\u7684\u6578\u5b57 swap \u5230\u53f3\u908a\u53bb\uff0c\u9019\u500b\u6578\u91cf\u4e5f\u76f8\u7576\u65bc\u4e0d\u8a72\u5728\u53f3\u908a\u7684\u6578\u5b57\u6578\u91cf\uff0c\u56e0\u70ba\u5c0d\u65bc\u4e00\u689d\u5206\u754c\u7dda\u6bcf\u6b21\u81f3\u591a\u53ea\u80fd\u6709\u4e00\u7d44\u4ea4\u63db\uff0c\u6240\u4ee5\u4ee4 \\(m_i=\\) \u5206\u754c\u7dda \\((i, i+1)\\) \uff0c\u4e0d\u8a72\u5728\u5de6\u908a\u7684\u6578\u5b57\u6578\u91cf\uff0c\u53ef\u4ee5\u767c\u73fe\u6211\u5011\u300c\u81f3\u5c11\u8981\u63db\u300d \\(m_i\\) \u6b21\uff0c\u5c0d\u65bc\u6bcf\u500b\u5206\u754c\u7dda\u7684 lower bound\uff0c\u4e5f\u5c31\u662f \\(m_i\\)\uff0cmax \u8d77\u4f86\u5c31\u6703\u662f\u6211\u5011\u9700\u8981\u5faa\u74b0\u7684\u6b21\u6578\u3002\u8b49\u660e\u7684\u90e8\u5206\uff0c\u8dd1\u4e86 \\(\\max(m_i)\\) \u8f2a\u5f8c\u82e5\u9084\u672a sorted\uff0c\u4ee3\u8868\u5b58\u5728\u9006\u5e8f\u5c0d\uff0c\u4f46\u5be6\u969b\u4e0a\u6bcf\u689d\u5206\u754c\u7dda\u5de6\u53f3\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u5e8f\u5217\u5df2 sorted\u3002</p> <p>\u5be6\u4f5c\u4e0a\u4e0d\u8a72\u51fa\u73fe\u5728\u5de6\u908a\u7684\u6578\u5b57\u5c31\u662f\u96e2\u6563\u5316\u5f8c\uff0c\u5728 \\(i\\) \u5de6\u908a\u6bd4 \\(i\\) \u5927\u7684\u6578\u5b57\u6578\u91cf\uff0c\u53ef\u4ee5\u7528 BIT \u7dad\u8b77\u3002</p>"},{"location":"basic/sorting_algorithms/#selection-sort","title":"Selection sort","text":"<p>\u9078\u64c7\u6392\u5e8f\u6cd5\u7684\u539f\u7406\u662f\u628a\u8981\u6392\u5e8f\u7684\u5e8f\u5217\u5206\u6210\u5169\u5806\uff0c\u4e00\u5806\u662f\u7531\u539f\u5e8f\u5217\u6700\u5c0f\u7684\u524d k \u500b\u5143\u7d20\u6240\u7d44\u6210\u4e26\u4e14\u5df2\u7d93\u7167\u5927\u5c0f\u6392\u5217\uff0c\u53e6\u4e00\u5806\u5247\u662f\u539f\u5e8f\u5217\u4e2d\u5269\u9918\u7684 n \u2212 k \u500b\u5c1a\u672a\u6392\u5e8f\u7684\u5143\u7d20\u3002\u7b97\u6cd5\u6bcf\u56de\u5408\u90fd\u6703\u5f9e\u672a\u6392\u5e8f\u5806\u4e2d\u9078\u51fa\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u5f8c\u5c07\u5176\u79fb\u52d5\u5230\u5df2\u6392\u5e8f\u5806\u4e2d\u7684\u6700\u5f8c\u9762\uff0c\u985e\u4f3c\u6839\u64da\u5927\u5c0f\u4e00\u500b\u4e00\u500b\u53eb\u865f\u6392\u968a\uff0cn \u2212 1 \u56de\u5408\u5f8c\u4fbf\u628a\u539f\u5e8f\u5217\u7d66\u6392\u5217\u597d\u4e86\u3002</p> Selection sort<pre><code>void selection_sort() {\n    for (int i = 0; i &lt; n - 1; i++) {\n        int min_idx = i;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (a[j] &lt; a[min_idx]) min_idx = j;\n        }\n        swap(a[i], a[min_idx]);\n    }\n}\n</code></pre> <p>\u6642\u9593\u8907\u96dc\u5ea6 : \\(O(n^2)\\)</p>"},{"location":"basic/sorting_algorithms/#insertion-sort","title":"Insertion sort","text":"<p>\u8a72\u7b97\u6cd5\u4e00\u6a23\u628a\u539f\u5e8f\u5217\u5340\u5206\u6210\u5df2\u6392\u5e8f\u548c\u672a\u6392\u5e8f\u7684\u5169\u5806\uff0c\u63a5\u8457\u628a\u672a\u6392\u5e8f\u7684\u5143\u7d20\u4e00\u500b\u4e00\u500b\u63d2\u5165\u5230\u5df2\u6392\u5e8f\u5806\u4e2d\u6b63\u78ba\u7684\u4f4d\u7f6e\u3002</p> Insertion sort<pre><code>void insertion_sort() {\n    for (int i = 1; i &lt; n; i++) {\n        int j, tmp = a[i];\n        for (j = i - 1; j &gt;= 0 &amp;&amp; a[j] &gt; tmp; j--) {\n            a[j + 1] = a[j];\n        }\n        a[j + 1] = tmp;\n    }\n}\n</code></pre> <p>\u6642\u9593\u8907\u96dc\u5ea6 : \\(O(n^2)\\)</p>"},{"location":"basic/sorting_algorithms/#merge-sort","title":"Merge Sort","text":"<p>\u5408\u4f75\u6392\u5e8f\u6cd5\u7684\u539f\u7406\u662f\u628a\u8981\u6392\u5e8f\u7684\u5e8f\u5217\u5206\u6210\u524d\u5f8c\u5169\u7b49\u4efd\uff0c\u5206\u5225\u905e\u8ff4\u8655\u7406\u6210\u5169\u500b\u6392\u5e8f\u597d\u7684\u5e8f\u5217\u5f8c\uff0c\u518d\u5c07\u9019\u5169\u500b\u5e8f\u5217\u5408\u4f75\u6210\u4e00\u6574\u500b\u6392\u5e8f\u597d\u7684\u5e8f\u5217\u3002\u6b64\u6f14\u7b97\u6cd5\u9700\u8981\u984d\u5916 O(n) \u7684\u7a7a\u9593</p> <p>\u6642\u9593\u8907\u96dc\u5ea6 : \\(O(n \\log n)\\)</p>"},{"location":"basic/sorting_algorithms/#quick-sort","title":"Quick sort","text":"<p>\u5408\u4f75\u6392\u5e8f\u6cd5\u7684\u539f\u7406\u662f\u9078\u64c7\u5e8f\u5217\u4e2d\u4e00\u500b\u5143\u7d20\u505a\u70ba\u57fa\u6e96 (pivot)\uff0c\u63a5\u8457\u5c07\u5c0f\u65bc\u57fa\u6e96\u7684\u5143\u7d20\u653e\u5230\u5e8f\u5217\u5de6\u908a\uff0c\u5927\u65bc\u57fa\u6e96\u7684\u5143\u7d20\u653e\u5230\u5e8f\u5217\u53f3\u908a\uff0c\u63a5\u8457\u905e\u8ff4\u8655\u7406\u5de6\u53f3\u5169\u500b\u65b0\u7684\u5e8f\u5217\u3002\u5feb\u901f\u6392\u5e8f\u6cd5\u5e73\u5747\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n \\log n)\\)\uff0c\u4f46\u5728\u57fa\u6e96\u9078\u5f97\u4e0d\u597d\uff0c\u5c0e\u81f4\u5de6\u53f3\u5169\u5e8f\u5217\u5927\u5c0f\u5dee\u5f88\u591a\u7684\u60c5\u6cc1\u4e0b\uff0c\u53ef\u80fd\u9054\u5230 \\(O(n^2)\\) \u7684\u8907\u96dc\u5ea6\u3002\u4e00\u822c\u70ba\u4e86\u907f\u514d\u9019\u7a2e\u60c5\u6cc1\uff0c\u57fa\u6e96\u7684\u9078\u64c7\u6703\u662f\u96a8\u6a5f\u7684\u3002\u5feb\u901f\u6392\u5e8f\u6cd5\u7684\u512a\u9ede\u662f\u4e0d\u9700\u8981\u984d\u5916\u8a18\u61b6\u9ad4\u3002</p> <p>\u671f\u671b : \\(O(n \\log n)\\)\uff0c\u6700\u5dee : \\(O(n^2)\\)</p>"},{"location":"basic/sorting_algorithms/#counting-sort","title":"Counting sort","text":""},{"location":"basic/sorting_algorithms/#radix-sort","title":"Radix sort","text":"<p>Radix sort \u9069\u7528\u65bc\u6574\u6578\uff0c\u7531\u500b\u4f4d\u6578\u958b\u59cb\uff0c\u5c0d\u7b2c \\(i\\) \u4f4d\u6578\u90fd\u505a\u4e00\u8f2a\u6392\u5e8f\u3002\u6bcf\u4e00\u8f2a\u6392\u5e8f\u53ea\u770b\u7b2c \\(i\\) \u4f4d\u6578\u7684\u5927\u5c0f\uff0c\u4ee5 10 \u9032\u4f4d\u6574\u6578\u4f86\u8aaa\uff0c\u7b2c \\(i\\) \u4f4d\u6578\u53ea\u6709 10 \u7a2e\u53ef\u80fd\uff0c\u65bc\u662f\u5c31\u4f7f\u7528 10 \u500b\u6876\u5b50\uff0c\u4e26\u5c07\u5e8f\u5217\u4e2d\u7684\u6578\u5b57\u4f9d\u7167\u7b2c \\(i\\) \u4f4d\u6578\u4e1f\u9032\u76f8\u5c0d\u61c9\u7684\u6876\u5b50\uff0c\u518d\u7531 \\(0\\) \u865f\u6876\u5b50\u958b\u59cb\uff0c\u5c07\u6bcf\u500b\u6876\u5b50\u4e2d\u7684\u6578\u5b57\u4f9d\u7167\u653e\u5165\u7684\u9806\u5e8f\u62ff\u51fa\uff0creplace \u539f\u672c\u7684\u5e8f\u5217\u3002\u7531\u4f4e\u4f4d\u6578\u4e00\u76f4\u505a\u5230\u6700\u9ad8\u4f4d\u6578\uff0c\u505a\u5b8c\u5f8c\u5c31\u5b8c\u6210\u6392\u5e8f\u4e86\u3002\u6700\u591a\u6703\u9032\u884c \\(\\log_{10} C\\) \u8f2a\u6392\u5e8f\uff0c\u6bcf\u8f2a\u6392\u5e8f\u70ba \\(O(n)\\)\uff0c\u56e0\u6b64\u7e3d\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n \\log_{10} C)\\)\u3002\u4e00\u822c\u6211\u5011\u6703\u5c07 \\(\\log_{10} C\\) \u8996\u70ba\u5e38\u6578\uff0c\u5982\u6392\u5e8f int \u6642\u8a72\u6578\u70ba \\(10\\)\uff0c\u56e0\u6b64 Radix sort \u53ef\u4ee5\u8996\u70ba\u4e00\u500b\u7dda\u6027\u7684\u6392\u5e8f\u65b9\u6cd5\u3002</p> <p>Radix sort \u76f8\u8f03\u65bc Counting sort \u53ef\u4ee5\u8655\u7406\u7bc4\u570d\u8f03\u5927\u7684\u6578\u64da\u3002</p> radix sort<pre><code>void radix_sort() {\n    vector&lt;int&gt; bucket[10];\n    int radix = 1;\n    for (int i = 0; i &lt; 10; i++) {\n        for (int i = 0; i &lt; 10; i++) {\n            bucket[i].clear();\n        }\n        for (int i = 0; i &lt; n; i++) {\n            int digit = (a[i] / radix) % 10;\n            bucket[digit].push_back(a[i]);\n        }\n        int pos = 0;\n        for (int i = 0; i &lt; 10; i++) {\n            for (auto num : bucket) {\n                a[pos++] = num;\n            }\n        }\n        radix *= 10;\n    }\n}\n</code></pre>"},{"location":"basic/brute_force/meet_in_middle/","title":"\u6298\u534a\u679a\u8209","text":"<p>\u679a\u8209\u6240\u6709\u96c6\u5408\u7684\u6642\u9593\u8907\u96dc\u5ea6\u592a\u5927\uff0c\u628a\u5143\u7d20\u62c6\u6210\u4e8c\u4efd\u5206\u5225\u679a\u8209\u518d\u5408\u4f75\uff0c\u80fd\u5920\u964d\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\uff0c\u9019\u7a2e\u6280\u5de7\u7a31\u70ba\u300c\u6298\u534a\u679a\u8209\u300d (Meet in the Middle)\u3002</p> CSES - Meet in the Middle <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u554f\u6709\u5e7e\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u53d6\u4e00\u4e9b\u6578\u5b57\u52a0\u8d77\u4f86\u70ba \\(x\\)</p> <p>\\(n\\le 40, 1\\le x, a_i \\le 10^9\\)</p> <p>\u4f7f\u7528\u6298\u534a\u679a\u8209\uff0c\u679a\u8209\u7b2c\u4e00\u500b\u96c6\u5408\u5167\u7684\u5143\u7d20\uff0c\u7528\u4e8c\u5206\u641c\u5f97\u5230\u7b2c\u4e8c\u500b\u96c6\u5408\u5167\u5408\u6cd5\u7684\u5143\u7d20\u7684\u5340\u9593</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nint n, target;\n\nvector&lt;int&gt; gen(vector&lt;int&gt;&amp; a) {\n    vector&lt;int&gt; A;\n    A.push_back(0);\n    int n = a.size();\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = A.size() - 1; j &gt;= 0; j--) {\n            A.push_back(A[j] + a[i]);\n        }\n    }\n    sort(A.begin(), A.end());\n    return A;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; target;\n    vector&lt;int&gt; a;\n    vector&lt;int&gt; b;\n    int x;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; x;\n        if (i &lt; n / 2) {\n            a.push_back(x);\n        } else {\n            b.push_back(x);\n        }\n    }\n\n    vector&lt;int&gt; A = gen(a);\n    vector&lt;int&gt; B = gen(b);\n    int ans = 0;\n    for (int i = 0; i &lt; A.size(); i++) {\n        ans += upper_bound(B.begin(), B.end(), target - A[i]) - lower_bound(B.begin(), B.end(), target - A[i]);\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> 2023 YTP \u6c7a\u8cfd p8. \u4fdd\u8b77\u8cbb (Protection_Fees) <p>\u7d66 \\(n\\) \u500b\u9ede\uff0c\\(m\\) \u689d\u908a\uff0c\u6bcf\u500b\u9ede\u6709\u6b0a\u91cd \\(c_i\\)\uff0c\u6c42\u5e36\u6b0a\u6700\u5927\u7368\u7acb\u96c6\u662f\u591a\u5c11</p> <p>\\(n\\le 44,m\\le 10^5\\)</p> \u601d\u8def <p>\u5206\u6210 A \u8ddf B \u5169\u7d44\uff0c\u770b\u5169\u7d44\u7684\u6bcf\u500b mask \u662f\u5426\u662f\u5408\u6cd5\u7684\uff0csumA[mask] \u4ee3\u8868 A \u9019\u500b mask \u7684\u7e3d\u548c\uff0cdpB[mask] \u4ee3\u8868 sub &amp; mask = sub\uff0c\u4e14 sub \u5408\u6cd5\u4e0b\u6700\u5927\u7684 sumB[sub]\uff0cokA[mask] \u4ee3\u8868 : \u5c0d\u65bc\u6240\u6709\u8207 mask A \u88e1\u9762\u6709\u9078\u7684\u9ede\u90fd\u4e0d\u885d\u7a81\u6240\u806f\u96c6\u7684 mask B\uff0c\u6700\u5f8c\u7b97 sumA[mask] + dpB[okA[mask]] \u7684\u6700\u5927\u503c\u5c31\u597d\u4e86</p> <p>okA[mask] \u9019\u500b mask B \u4e0d\u4e00\u5b9a\u8981\u662f\u5408\u6cd5\u7684\uff0c\u4ed6\u53ea\u9700\u8981\u7b26\u5408\u300c\u6bcf\u500b\u6709\u9078\u7684\u5143\u7d20\u300d\u8ddf\u5728 mask A \u88e1\u9762\u6240\u6709\u5143\u7d20\u90fd\u6c92\u6709\u885d\u7a81\u5373\u53ef\uff0cmask B \u5167\u9b25\u4e5f\u6c92\u5dee\uff0c\u53cd\u6b63 dpB[mask] \u5c31\u6703\u5c07\u9019\u4e9b\u5167\u9b25\u7684\u6392\u9664\u6389</p>"},{"location":"basic/brute_force/state/","title":"\u72c0\u614b\u641c\u7d22","text":""},{"location":"basic/brute_force/state/#bfs","title":"\u96d9\u5411 BFS \u4ecb\u7d39","text":"<p>\u5728\u4e00\u822c\u7684 BFS \u5be6\u4f5c\u4e2d\uff0c\u7a7a\u9593\u7684\u74f6\u9838\u4e3b\u8981\u53d6\u6c7a\u65bc\u641c\u5c0b\u7a7a\u9593\u4e2d\u7684\u6700\u5927\u5bec\u5ea6\u3002 \u90a3\u9ebc\u6709\u6c92\u6709\u8fa6\u6cd5\u8b93\u6211\u5011\u4e0d\u4f7f\u7528\u9019\u9ebc\u5bec\u7684\u641c\u5c0b\u7a7a\u9593\uff0c\u540c\u6642\u53c8\u80fd\u78ba\u4fdd\u641c\u5c0b\u5230\u76ee\u6a19\u7d50\u679c\u5462\uff1f \u300c\u96d9\u5411 BFS\u300d \u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff1a \u540c\u6642\u5f9e\u5169\u500b\u65b9\u5411\u958b\u59cb\u641c\u7d22\uff0c\u4e00\u65e6\u641c\u7d22\u5230\u76f8\u540c\u7684\u503c\uff0c\u610f\u5473\u8457\u627e\u5230\u4e86\u4e00\u689d\u806f\u901a\u8d77\u9ede\u548c\u7d42\u9ede\u7684\u6700\u77ed\u8def\u5f91\u3002 \u5c0d\u65bc\u300c\u6709\u89e3\u300d\u3001\u300c\u6709\u4e00\u5b9a\u6578\u64da\u7bc4\u570d\u300d\u540c\u6642\u300c\u5c64\u7d1a\u7bc0\u9ede\u6578\u91cf\u4ee5\u500d\u6578\u6216\u6307\u6578\u7d1a\u6210\u9577\u300d\u7684\u60c5\u6cc1\uff0c\u300c\u96d9\u5411BFS\u300d\u7684\u641c\u5c0b\u7a7a\u9593\u901a\u5e38\u53ea\u6709\u300c\u4e00\u822c BFS\u300d\u7684\u7a7a\u9593\u6d88\u8017\u7684\u5e7e\u767e\u5206\u4e4b\u4e00\uff0c\u751a\u81f3\u5e7e\u5343\u5206\u4e4b\u4e00\u3002</p> <p></p> <p>\u300c\u96d9\u5411 BFS\u300d\u7684\u57fa\u672c\u5be6\u4f5c\u60f3\u6cd5\u5982\u4e0b\uff1a </p> <ol> <li>\u5275\u5efa\u201c\u5169\u500b\u968a\u5217\u201d\u5206\u5225\u7528\u65bc\u5169\u500b\u65b9\u5411\u7684\u641c\u5c0b\uff1b</li> <li>\u5efa\u7acb\u201c\u5169\u500b\u54c8\u5e0c\u8868\u201d\u7528\u65bc\u201c\u89e3\u6c7a\u76f8\u540c\u7bc0\u9ede\u91cd\u8907\u641c\u5c0b\u201d\u548c\u201c\u8a18\u9304\u8f49\u63db\u6b21\u6578\u201d\uff1b</li> <li>\u70ba\u4e86\u76e1\u53ef\u80fd\u8b93\u5169\u500b\u641c\u5c0b\u65b9\u5411\u201c\u5e73\u5747\u201d\uff0c\u6bcf\u6b21\u5f9e\u4f47\u5217\u4e2d\u53d6\u503c\u9032\u884c\u64f4\u5c55\u6642\uff0c\u5148\u5224\u65b7\u54ea\u500b\u4f47\u5217\u5bb9\u91cf\u8f03\u5c11\uff1b</li> <li>\u5982\u679c\u5728\u641c\u5c0b\u904e\u7a0b\u4e2d\u300c\u641c\u5c0b\u5230\u5c0d\u65b9\u641c\u5c0b\u904e\u7684\u7bc0\u9ede\u300d\uff0c\u8868\u793a\u627e\u5230\u4e86\u6700\u77ed\u8def\u5f91\u3002</li> </ol> <p>\u300c\u96d9\u5411 BFS\u300d\u57fa\u672c\u60f3\u6cd5\u5c0d\u61c9\u7684\u507d\u4ee3\u78bc\u5927\u81f4\u5982\u4e0b\uff1a</p> pseudocode<pre><code>// q1\u3001q2 \u5206\u5225\u70ba\u5f9e s, t \u505a\u70ba\u8d77\u9ede\u7684 queue\n// mp1\u3001mp2 \u5206\u5225\u70ba\u5f9e s, t \u505a\u70ba\u8d77\u9ede\u7d00\u9304\u6700\u77ed\u8ddd\u96e2\u7528\u7684\n\n// \u53ea\u6709\u5169\u500b queue \u90fd\u4e0d\u662f\u7a7a\u7684\uff0c\u624d\u80fd\u7e7c\u7e8c\u505a\n// \u5982\u679c\u5176\u4e2d\u4e00\u500b queue \u7a7a\u4e86\uff0c\u8868\u793a\u5f9e\u67d0\u500b\u65b9\u5411\u641c\u5230\u5e95\u90fd\u641c\u4e0d\u5230\u8a72\u65b9\u5411\u7684\u76ee\u6a19\u7bc0\u9ede\nwhile (q1.size() &amp;&amp; q2.size()) {\n    if (q1.size() &lt; q2.size()) {\n        update(q1, m1, m2);\n    } else {\n        update(q2, m2, m1);\n    }\n}\n\n// update \u70ba\u5c07\u76ee\u524d queue \u4e2d\u5305\u542b\u7684\u5143\u7d20\u53d6\u51fa\uff0c\u9032\u884c\u4e00\u5c64\u7684 bfs\nvoid update(queue d, map cur, map other) {}\n</code></pre>"},{"location":"basic/brute_force/state/#_1","title":"\u6642\u9593\u8907\u96dc\u5ea6","text":"<ul> <li> <p>\u666e\u901a BFS : (degree-1)^t</p> </li> <li> <p>\u96d9\u5411 BFS : (degree-1)^(t/2) + \u5408\u4f75</p> </li> </ul>"},{"location":"basic/brute_force/state/#_2","title":"\u4f8b\u984c","text":"Leetcode 752. Open the Lock <p>\u6709\u4e00\u500b\u6efe\u8f2a\u5f0f\u56db\u4f4d\u5bc6\u78bc\u5708\uff0c\u521d\u59cb\u7684\u5bc6\u78bc\u70ba 0000\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8f49\u5176\u4e2d\u4e00\u4f4d\u4e00\u683c\u3002\u7d66\u5b9a\u4e00\u4e9b\u4e0d\u5408\u6cd5\u7684\u5bc6\u78bc\uff0c\u548c\u76ee\u6a19\u5bc6\u78bc\uff0c\u554f\u6700\u5c11\u8f49\u5e7e\u6b21\u53ef\u9054\u5230\u76ee\u6a19\u5bc6\u78bc\uff0c\u4e14\u9014\u4e2d\u4e0d\u51fa\u73fe\u4e0d\u5408\u6cd5\u5bc6\u78bc</p> <p>\u4e0d\u5408\u6cd5\u5bc6\u78bc\u6578\u91cf \\(\\le 500\\)</p> code <pre><code>class Solution {\n   public:\n    string s, t;\n    unordered_set&lt;string&gt; st;\n    int openLock(vector&lt;string&gt;&amp; deadends, string target) {\n        s = \"0000\";\n        t = target;\n        if (s == t) return 0;\n        for (const auto&amp; d : deadends) st.insert(d);\n        if (st.count(s)) return -1;\n        int ans = bfs();\n        return ans;\n    }\n    int bfs() {\n        queue&lt;string&gt; d1, d2;\n        unordered_map&lt;string, int&gt; m1, m2;\n        d1.push(s);\n        m1[s] = 0;\n        d2.push(t);\n        m2[t] = 0;\n        while (d1.size() and d2.size()) {\n            int t = -1;\n            if (d1.size() &lt;= d2.size()) {\n                t = update(d1, m1, m2);\n            } else {\n                t = update(d2, m2, m1);\n            }\n            if (t != -1) return t;\n        }\n        return -1;\n    }\n    int update(queue&lt;string&gt;&amp; q, unordered_map&lt;string, int&gt;&amp; cur, unordered_map&lt;string, int&gt;&amp; other) {\n        int m = q.size();\n        while (m-- &gt; 0) {\n            string t = q.front();\n            q.pop();\n            int step = cur[t];\n            for (int i = 0; i &lt; 4; i++) {\n                for (int j = -1; j &lt;= 1; j++) {\n                    if (j == 0) continue;\n                    int origin = t[i] - '0';\n                    int next = (origin + j) % 10;\n                    if (next == -1) next = 9;\n                    string copy = t;\n                    copy[i] = '0' + next;\n                    if (st.count(copy) or cur.count(copy)) continue;\n                    if (other.count(copy))\n                        return step + 1 + other[copy];\n                    else {\n                        q.push(copy);\n                        cur[copy] = step + 1;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n};\n</code></pre> \u516b\u4f4d\u6578\u78bc\u985e\u4f3c\u984c CSES - Swap Game <p>\u7d66\u4e00\u500b 3 * 3 \u7684 grid\uff0c\u88e1\u9762\u7684\u6578\u81ea\u6070\u70ba 1, 2, ..., 9\uff0c\u554f\u6bcf\u6b21 swap \u76f8\u9130\u7684\u5169\u9805\u6700\u5c11\u5e7e\u6b21\u53ef\u8b8a\u6210\u4e0b\u9762\u7684 grid</p> <pre><code>1 2 3\n4 5 6\n7 8 9\n</code></pre> \u601d\u8def <p>\u6700\u591a\u4e5f\u624d 9! \u7a2e\u72c0\u614b\uff0c\u53ef\u4ee5\u66b4\u529b bfs\uff0c\u81f3\u65bc\u8981\u600e\u9ebc\u5c07\u4e00\u500b grid \u58d3\u6210 int \u5462\uff0c\u53ef\u4ee5\u5957\u7528 hash \u7684\u65b9\u6cd5:</p> \\[ S=\\sum_{i=0}^{8}a_i\\times 9^{i} \\] <p>\u5176\u4e2d a[i] = 0...8\u3002\u82e5\u8981\u8a62\u554f\u7b2c i \u9805\u7684\u6578\u5b57\uff0c\u53ef\u4ee5\u76f4\u63a5\u56de\u50b3 (S / 9^i) % 9</p> code(\u666e\u901a BFS) <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nint h[11];\nbitset&lt;387420489&gt; vis;\n\nint swap(int i, int j, int state) {\n    int a = (state / h[i]) % 9;\n    int b = (state / h[j]) % 9;\n    state += (b - a) * h[i];\n    state += (a - b) * h[j];\n    return state;\n}\n\nint solve(int s, int t) {\n    queue&lt;pair&lt;int, int&gt;&gt; q;\n    q.push({s, 0});  \n    vis[s] = 1;\n    while (q.size()) {\n        auto [state, step] = q.front();\n        q.pop();\n        if (state == t) return step;\n\n        for (int i = 0; i &lt; 9; i++) {\n            if (i % 3 != 2) {\n                int nxt = swap(i, i + 1, state);\n                if (!vis[nxt]) {\n                    q.push({nxt, step + 1});\n                    vis[nxt] = 1;\n                }\n            }\n            if (i &lt; 6) {\n                int nxt = swap(i, i + 3, state);\n                if (!vis[nxt]) {\n                    q.push({nxt, step + 1});\n                    vis[nxt] = 1;\n                }\n            }\n        }\n    }\n}\n\nsigned main() {\n    h[0] = 1;\n    for (int i = 1; i &lt;= 9; i++) {\n        h[i] = h[i - 1] * 9;\n    }\n    int s = 0, t = 0;\n    for (int i = 0; i &lt; 9; i++) {\n        t += i * h[i];\n    }\n    for (int i = 0; i &lt; 9; i++) {\n        int x;\n        cin &gt;&gt; x;\n        x--;\n        s += x * h[i];\n    }\n    if (s == t) {\n        cout &lt;&lt; 0 &lt;&lt; '\\n';\n    } else {\n        cout &lt;&lt; solve(s, t) &lt;&lt; '\\n';\n    }\n}\n</code></pre> code(\u96d9\u5411 BFS) <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nint h[11];\n\nint swap(int i, int j, int state) {\n    int a = (state / h[i]) % 9;\n    int b = (state / h[j]) % 9;\n    state += (b - a) * h[i];\n    state += (a - b) * h[j];\n    return state;\n}\n\nint bfs(queue&lt;int&gt; &amp;q, unordered_map&lt;int, int&gt; &amp;mp1, unordered_map&lt;int, int&gt; &amp;mp2) {\n    int m = q.size();\n    while (m--) {\n        int state = q.front();\n        q.pop();\n\n        function&lt;int(int)&gt; update = [&amp;](int nxt) {\n            if (mp1.count(nxt)) {\n                return -1LL;\n            }\n            if (mp2.count(nxt)) {\n                return mp1[state] + 1 + mp2[nxt];\n            }\n            mp1[nxt] = mp1[state] + 1;\n            q.push(nxt);\n            return -1LL;\n        };\n\n        for (int i = 0; i &lt; 9; i++) {\n            if (i % 3 != 2) {\n                int nxt = swap(i, i + 1, state);\n                int ret = update(nxt);\n                if (ret != -1) {\n                    return ret;\n                }\n            }\n            if (i &lt; 6) {\n                int nxt = swap(i, i + 3, state);\n                int ret = update(nxt);\n                if (ret != -1) {\n                    return ret;\n                }\n            }\n        }\n    }\n    return -1;\n}\n\nint solve(int s, int t) {\n    queue&lt;int&gt; q1, q2;\n    unordered_map&lt;int, int&gt; mp1, mp2;\n    q1.push(s);\n    mp1[s] = 0;\n    q2.push(t);\n    mp2[t] = 0;\n    while (q1.size() &amp;&amp; q2.size()) {\n        int t = -1;\n        if (q1.size() &gt; q2.size()) {\n            t = bfs(q1, mp1, mp2);\n        } else {\n            t = bfs(q2, mp2, mp1);\n        }\n        if (t != -1) return t;\n    }\n    return -1;\n}\n\nsigned main() {\n    h[0] = 1;\n    for (int i = 1; i &lt;= 9; i++) {\n        h[i] = h[i - 1] * 9;\n    }\n    int s = 0, t = 0;\n    for (int i = 0; i &lt; 9; i++) {\n        t += i * h[i];\n    }\n    for (int i = 0; i &lt; 9; i++) {\n        int x;\n        cin &gt;&gt; x;\n        x--;\n        s += x * h[i];\n    }\n    if (s == t) {\n        cout &lt;&lt; 0 &lt;&lt; '\\n';\n    } else {\n        cout &lt;&lt; solve(s, t) &lt;&lt; '\\n';\n    }\n}\n</code></pre> 2023 \u5168\u570b\u8cfd pE. \u8ff7\u5bae\u9470\u5319\u5708 (Maze) <p>\u6709\u4e00\u500b n * m \u7684\u4e8c\u7dad\u8ff7\u5bae\uff0c\u7d66\u5b9a\u82e5\u5e72\u9846\u5f48\u73e0\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u554f\u81f3\u5c11\u9700\u8981\u5c07\u8ff7\u5bae\u6574\u500b\u5411\u5de6\u6216\u5411\u53f3\u65cb\u8f49\u5e7e\u6b21\u624d\u80fd\u8b93\u6bcf\u9846\u5f48\u73e0\u90fd\u6389\u51fa\u8ff7\u5bae</p> <p>\\(n, m\\le 15,\\) \u5f48\u73e0\u6578\u91cf\u4ecb\u65bc 1 ~ 3 \u9846</p> \u601d\u8def <p>\u56e0\u70ba\u8ff7\u5bae\u5927\u5c0f 15 * 15\uff0c\u6240\u4ee5\u6700\u591a \\((15\\times 15 + 1)^3 \\simeq 10^7\\) \u7a2e\u4e0d\u540c\u72c0\u614b\u3002\u6211\u5011\u53ef\u4ee5\u5229\u7528\u72c0\u614b\u641c\u7d22\uff0c\u4e5f\u5c31\u662f\u50cf\u516b\u4f4d\u6578\u78bc\u554f\u984c\uff0c\u5efa\u5716\u5f8c BFS \u6c42\u6700\u77ed\u8def\u5f91\u3002</p> <p>\u81f3\u65bc\u5982\u4f55\u5feb\u901f\u5224\u65b7\u5de6\u8f49\u53f3\u8f49\u5f8c\u92fc\u73e0\u6703\u79fb\u52d5\u5230\u54ea\u6211\u5011\u53ef\u4ee5\u7528\u9810\u8655\u7406\u7684\u65b9\u5f0f\u5f97\u5230\u3002\u8a18\u5f97\u5728\u72c0\u614b\u7d00\u9304\u6642\u4e5f\u8981\u8655\u7406\u53ea\u5269\u4e0b\u4e00\u9846\u6216\u5169\u9846\u7403\u7684\u72c0\u6cc1\uff0c\u5c6c\u65bc\u8f03\u70ba\u9ebb\u7169\u7684\u5be6\u4f5c\u984c\u3002</p> CF 1070 A. Find a Number <p>\u7d66\u5b9a\u5169\u500b\u6578 \\(d,s\\)\uff0c\u627e\u51fa\u6700\u5c0f\u6578 \\(n\\) \u4f7f \\(d\\mid n\\) \u4e14 \\(n\\) \u7684\u5404\u4f4d\u6578\u548c\u70ba \\(s\\)\uff0c\u82e5\u7121\u89e3\u8f38\u51fa -1</p> <p>\\(d\\le 500, s\\le 5000\\)</p> \u601d\u8def <p>\u6700\u66b4\u529b\u7684\u601d\u8def\u80af\u5b9a\u5c31\u662f\u679a\u8209 d \u7684\u6240\u6709\u500d\u6578\uff0c\u4f46\u6211\u5011\u767c\u73fe\u53c8\u6709\u7121\u89e3\u7684\u60c5\u6cc1\uff0c\u7b54\u6848\u53c8\u53ef\u80fd\u5f88\u9577\uff0c\u6240\u4ee5\u6211\u5011\u8a66\u8a66\u770b\u300c\u641c\u7d22\u300d\u3002\u56e0\u70ba\u9019\u500b\u984c\u8981\u6c42\u6700\u5c0f\u6578 n \uff0c\u6240\u4ee5\u4e0d\u80fd\u7528 dfs\uff0c\u61c9\u8a72\u7528 bfs + \u8a18\u61b6\u5316\u641c\u7d22\uff0c\u9019\u6a23\u662f\u53ef\u4ee5\u4fdd\u8b49\u6700\u5c0f\u7684\u3002\u72c0\u614b\u81ea\u7136\u5c31\u662f\u984c\u76ee\u7d66\u5b9a\u7684\u5169\u500b\uff1an \u6a21 d \u4e0b\u7684\u9918\u6578 rem\uff0c\u9084\u6709\u5404\u4f4d\u6578\u548c sum\uff0c\u4f46\u6700\u5f8c\u6211\u5011\u8981 backtracking \u8f38\u51fa\u7b54\u6848\uff0c\u6240\u4ee5\u9084\u8981\u8a18\u9304\u6bcf\u500b\u72c0\u614b\u5148\u524d\u662f\u5f9e\u54ea\u88e1\u8f49\u79fb\u904e\u4f86\u7684\u3002\u5f9e\u9ad8\u4f4d\u586b\u5230\u4f4e\u4f4d\uff0c\u679a\u8209\u6bcf\u500b\u6578\u5b57\u8981\u586b\u4ec0\u9ebc\uff0c\u8f49\u79fb\u7684\u8a71\u5c31\u662f\uff1a</p> <p>     (rem, sum) \u2192 ((10 * rem + i) % d, sum + i) </p> <p>\u6ce8\u610f\u5230\u5982\u679c\u4e00\u500b\u72c0\u614b\u88ab\u8f49\u79fb\u5230\u7b2c\u4e8c\u6b21\u4e0d\u7528\u7406\u4ed6\uff0c\u56e0\u70ba\u4e00\u5b9a\u662f\u66f4\u52a3\u7684\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; pii;\n\nconst int N = 5e2 + 5;\nconst int M = 5e3 + 5;\nint d, s;\npii pre[N][M];  // pre[i][j]\u8868\u793a\u72c0\u614b{i, j}\u662f\u7531\u54ea\u500b\u72c0\u614b\u64f4\u5c55\u4f86\u7684\nqueue&lt;pii&gt; que;\n\nvoid bfs() {\n    que.push({0, 0});\n    while (que.size()) {\n        int rem = que.front().first, sum = que.front().second;\n        que.pop();\n        for (int i = 0; i &lt;= 9; i++) {\n            int rem1 = (rem * 10 + i) % d, sum1 = sum + i;\n            if (sum1 &lt;= s &amp;&amp; pre[rem1][sum1] == (pii){-1, -1}) {  // \u53ea\u8981\u7b2c\u4e00\u6b21\u64f4\u5c55\n                pre[rem1][sum1] = {rem, sum};\n                que.push({rem1, sum1});\n            }\n        }\n    }\n}\n\nvoid print(int rem, int sum) {  // backtracking\n    if (rem || sum) {\n        print(pre[rem][sum].first, pre[rem][sum].second);\n        printf(\"%d\", sum - pre[rem][sum].second);\n    }\n}\n\nint main() {\n    scanf(\"%d%d\", &amp;d, &amp;s);\n    for (int i = 0; i &lt; d; i++) {\n        for (int j = 0; j &lt;= s; j++) {\n            pre[i][j] = {-1, -1};  // \u521d\u59cb\u5316\n        }\n    }\n    bfs();\n    if (pre[0][s] == (pii){-1, -1}) {  // \u5982\u679cBFS\u7d50\u675f\u5f8c\uff0c\u7b54\u6848\u6c92\u6709\u64f4\u5c55\u5230\uff0c\u5247\u7121\u89e3\n        printf(\"-1\");\n    } else {\n        print(0, s);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"basic/brute_force/state/#_3","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>https://leetcode.cn/problems/open-the-lock/solutions/843986/gong-shui-san-xie-yi-ti-shuang-jie-shuan-wyr9/</li> </ul>"},{"location":"basic/brute_force/time_complexity/","title":"Time complexity","text":""},{"location":"basic/brute_force/time_complexity/#_1","title":"\u7b26\u865f\u5b9a\u7fa9","text":"<ul> <li> <p>Big O Notation \\(O(n)\\)</p> <ul> <li>\u4e0a\u754c</li> </ul> </li> <li> <p>Big Omega Notation \\(\\Omega (n)\\)</p> <ul> <li>\u4e0b\u754c</li> </ul> </li> <li> <p>Big Theta Notation \\(\\Theta (n)\\)</p> <ul> <li>\u7cbe\u78ba</li> </ul> </li> </ul>"},{"location":"basic/brute_force/time_complexity/#master-theorem","title":"Master theorem","text":"\\[ T(n) = aT(\\frac{n}{b}) + f(n) \\] <p>let \\(\\displaystyle c = \\frac{\\log a}{\\log b}  = \\log_b a\\)</p> <p>case 1: \\(f(n) = O(n^{c-\\epsilon}) \\Rightarrow T(n) = \\Theta(n^c)\\)</p> <ul> <li>\\(\\displaystyle T(n) = 2 T(\\frac{n}{2}) + O(n^{0.5}) = O(n), c = 1\\)</li> <li>\\(\\displaystyle T(n) = 3 T(\\frac{n}{2}) + O(n) = O(n^c), c = \\log_2 3\\)</li> </ul> <p>case 2: \\(f(n) = O(n^c \\log^k n)\\) &amp;&amp; \\(k\\ge 0 \\Rightarrow T(n) = \\Theta(n^c \\log^{k+1} n)\\)</p> <ul> <li>\\(\\displaystyle T(n) = 2 T(\\frac{n}{2}) + O(n) = O(n \\log n)\\)</li> <li>\\(\\displaystyle T(n) = T(\\frac{n}{2}) + O(1) = O(\\log n)\\)</li> </ul> <p>case 3: \\(n^{c+\\epsilon} = O(f(n)) \\Rightarrow T(n) = \\Theta( f(n) )\\)</p> <ul> <li>\\(\\displaystyle T(n) = 2 T(\\frac{n}{2}) + O(n^2) = O(n^2)\\)</li> </ul>"},{"location":"basic/brute_force/time_complexity/#recursive-function","title":"recursive function","text":"\\[ \\displaystyle T(n) = 2T(\\frac{n}{2}) + O(n) = O(n \\log n) \\] <ul> <li>merge sort<ul> <li>common divide and conquer algorithms</li> </ul> </li> </ul> \\[ \\displaystyle T(n) = T(\\frac{n}{2}) + O(1) = O(\\log n) \\] <ul> <li>binary search</li> </ul> \\[ \\displaystyle T(n) = T(\\frac{n}{2}) + O(n) = O(n) \\] <ul> <li>STL nth_element</li> </ul> \\[ \\displaystyle T(n) = 2T(\\frac{n}{2}) + O(n\\log n) = O(n \\log^2 n) \\] <ul> <li> <p>some BBST</p> </li> <li> <p>suffix array using std::sort</p> </li> </ul> \\[ \\displaystyle T(n) = 2T(\\frac{n}{2}) + O(\\frac{n}{\\log n}) = O(n \\log\\log n) \\] <ul> <li>harmonic series (Riemann zeta function when s = 1)<ul> <li>\\(\\displaystyle \\frac{1}{1} + \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{4} + \\ldots + \\frac{1}{n} = O(\\log n)\\)</li> </ul> </li> </ul> \\[ \\displaystyle T(n) = 2T(\\frac{n}{2}) + O(\\frac{n}{\\log^2 n}) = O(n) \\] <ul> <li>Basel problem (Riemann zeta function when s = 2)<ul> <li>\\(\\displaystyle (\\frac{1}{1})^2 + (\\frac{1}{2})^2 + \\ldots + (\\frac{1}{n})^2+\\ldots = \\frac{\\pi^2}{6} = O(1)\\)</li> </ul> </li> </ul>"},{"location":"basic/greedy/ds/","title":"\u8cc7\u7d50\u8caa\u5fc3","text":""},{"location":"basic/greedy/ds/#_1","title":"\u53cd\u6094\u8caa\u5fc3","text":"<p>\u901a\u5e38\u662f\u5229\u7528\u67d0\u500b\u689d\u4ef6\u9054\u5230\u4e00\u5b9a\u7684\u503c\u6642\uff0c\u6211\u5011\u518d\u9032\u53bb\u8caa\u5fc3\uff0c\u4f8b\u5982\u6392\u7a0b\u7684\u6642\u9593\u7e3d\u548c\u5df2\u7d93\u5927\u65bc\u6211\u5011\u9650\u5236\u7684\u6642\u9593\uff0c\u6216\u662f\u7576\u5148\u524d\u6240\u505a\u7684\u6c7a\u7b56\u6bd4\u76ee\u524d\u7684\u6c7a\u7b56\u66f4\u52a3\uff0c\u6211\u5011\u5c31\u6703\u5c07\u9032\u884c\u53cd\u6094\u3002</p> \u8caa\u5fc3\u8207\u52d5\u614b\u898f\u5283\u7684\u4f7f\u7528\u6642\u6a5f <p>\u8caa\u5fc3\u8207\u52d5\u614b\u898f\u5283\u76f8\u540c\u9ede\u662f\u8981\u6c42\u539f\u554f\u984c\u5fc5\u9808\u6709\u6700\u512a\u5b50\u7d50\u69cb\u3002\u800c\u4e0d\u540c\u9ede\u5728\u65bc\u8caa\u5fc3\u6cd5\u7684\u8a08\u7b97\u65b9\u5f0f\u70ba Top down\uff0c\u4e26\u4e0d\u7b49\u5f85\u5b50\u554f\u984c\u6c42\u89e3\u5b8c\u7562\u5f8c\u518d\u9078\u64c7\u4f7f\u7528\u54ea\u4e00\u500b\uff0c\u800c\u662f\u901a\u904e\u4e00\u7a2e\u7b56\u7565\u76f4\u63a5\u9078\u64c7\u4e00\u500b\u5b50\u554f\u984c\u53bb\u6c42\u89e3\uff0c\u6c92\u88ab\u9078\u64c7\u7684\u5b50\u554f\u984c\u76f4\u63a5\u62cb\u68c4\u3002\u9019\u7a2e\u6240\u8b02\u300c\u6700\u512a\u9078\u64c7\u300d\u7684\u6b63\u78ba\u6027\u9700\u8981\u7528\u6b78\u7d0d\u6cd5\u8b49\u660e\u3002\u800c\u52d5\u614b\u898f\u5283\u4e0d\u7ba1\u662f\u63a1\u7528\u81ea top down \u6216 bottom up \u7684\u8a08\u7b97\u65b9\u5f0f\uff0c\u90fd\u662f\u5f9e\u908a\u754c\u958b\u59cb\u5411\u4e0a\u5f97\u5230\u76ee\u6a19\u554f\u984c\u7684\u89e3\uff08\u5373\u8003\u616e\u6240\u6709\u5b50\u554f\u984c\uff09\u3002</p> <p>\u81f3\u65bc\u600e\u6a23\u5224\u65b7\u662f\u8caa\u5fc3\u9084\u662f dp? \u5c31\u770b\u80fd\u5426\u5224\u65b7\u8caa\u5fc3\u662f\u5426\u6703\u58de\u6389\uff0c\u5982\u679c\u80fd\u8b49\u660e\u8caa\u5fc3\u4e0d\u53ef\u884c\uff0c\u53ef\u80fd\u5c31\u662f dp \u6c42\u89e3\u4e86\u3002</p> <p>\u901a\u5e38\u5728 n \u6bd4\u8f03\u5927\u7684\u984c\u76ee\u6642\uff0cdp \u80fd\u505a\u7684\u8f49\u79fb\u5f0f\u6703\u82b1\u7684\u6642\u9593\u6bd4\u8f03\u9ad8\uff0c\u9019\u6642\u5c31\u53ef\u4ee5\u8003\u616e\u8caa\u5fc3\uff0c\u4e00\u822c\u8caa\u5fc3\u90fd\u80fd\u5728 O(n) \u6216 O(n log n) \u7684\u6642\u9593\u6c42\u89e3\uff0c\u800c dp \u5247\u662f\u8981\u770b\u72c0\u614b\u8207\u8f49\u79fb\u7684\u6642\u9593\u3002</p>"},{"location":"basic/greedy/ds/#_2","title":"\u53cd\u6094\u81ea\u52d5\u6a5f","text":"<p>\u5373\u8a2d\u8a08\u4e00\u7a2e\u53cd\u6094\u7b56\u7565\uff0c\u4f7f\u5f97\u96a8\u4fbf\u4e00\u7a2e\u8caa\u5fc3\u7b56\u7565\u90fd\u53ef\u4ee5\u5f97\u5230\u6b63\u89e3\u3002\u57fa\u672c\u7684\u8a2d\u8a08\u601d\u8def\u662f\uff1a\u6bcf\u6b21\u9078\u64c7\u76f4\u89c0\u4e0a\u6700\u63a5\u8fd1\u5168\u5c40\u6700\u512a\u89e3\u7684\u8caa\u5fc3\u7b56\u7565\uff0c\u82e5\u767c\u73fe\u6700\u512a\u89e3\u4e0d\u5c0d\uff0c\u5c31\u60f3\u8fa6\u6cd5\u81ea\u52d5\u652f\u6301\u53cd\u6094\u7b56\u7565\u3002 \uff08\u9019\u5c31\u662f\u81ea\u52d5\u6a5f\u7684\u610f\u601d\uff09</p> <p>\u5177\u9ad4\u984c\u76ee\u5177\u9ad4\u5206\u6790\u3002\u4e00\u822c\u9700\u8981\u53cd\u6094\u81ea\u52d5\u6a5f\u7684\u984c\u90fd\u662f\u901a\u904e\u5dee\u503c\u5de7\u5999\u9054\u5230\u53cd\u6094\u7684\u76ee\u7684\u3002</p> CF865D Buy Low Sell High <p>\u5df2\u77e5\u63a5\u4e0b\u4f86 \\(n\\) \u5929\u7684\u80a1\u7968\u50f9\u683c\uff0c\u6bcf\u5929\u4f60\u53ef\u4ee5\u505a\u5176\u4e2d\u4e00\u4ef6\u4e8b</p> <ol> <li> <p>\u8cb7\u9032\u4e00\u80a1\u80a1\u7968</p> </li> <li> <p>\u8ce3\u51fa\u4e00\u80a1\u80a1\u7968</p> </li> <li> <p>\u4ec0\u9ebc\u4e5f\u4e0d\u505a</p> </li> </ol> <p>\\(n\\) \u5929\u4e4b\u5f8c\u4f60\u624b\u4e0a\u4e0d\u80fd\u6709\u591a\u9918\u7684\u80a1\u7968\uff0c\u6c42\u5229\u6f64\u6700\u5927\u591a\u5c11</p> <p>\\(2\\le n\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u5c07\u6bcf\u5929\u7684\u50f9\u683c\u8996\u70ba\u4e00\u500b\u500b\"\u9078\u9805\"\uff0c \u58d3\u5165\u5c0f\u6839\u5806\u4e2d\uff0c\u70ba\u4e86\u78ba\u4fdd\u8cb7\u5165\u64cd\u4f5c\u5728\u8ce3\u51fa\u64cd\u4f5c\u4e4b\u524d\uff0c\u6211\u5011\u5f9e\u524d\u5f80\u5f8c\u6383\u63cf p\uff0c\u5c0d\u65bc\u73fe\u5728\u7684\u50f9\u683c p[i]\uff0c\u5982\u679c\u5806\u9802\u5143\u7d20 p[j] \u6eff\u8db3 p[j] &lt; p[i]\uff0c\u90a3\u9ebc\uff0c\u6211\u5011\u53d6\u51fa\u5806\u9802\uff0c\u5728\u7b2c j \u5929\u8cb7\u5165\u80a1\u7968\uff0c\u5728\u7b2c i \u5929\u8ce3\u51fa\u80a1\u7968\uff0c\u6b64\u6642\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u7372\u5f97 p[i] - p[j] \u7684\u6536\u76ca\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u4e4b\u5f8c\u6709 p[k] \u6eff\u8db3 p[k] &gt; p[i]\uff0c\u90a3\u9ebc\uff0c\u6211\u5011\u76ee\u524d\u6240\u505a\u7684\u6c7a\u7b56\u53ef\u80fd\u4e0d\u662f\u6700\u512a\u7684\uff0c\u5982\u4f55\u53cd\u6094\uff1f</p> <p>\u65bc\u662f\uff0c\u7576\u6211\u5011\u9032\u884c\u4e0a\u8ff0\u64cd\u4f5c\u6642\uff0c\u6211\u5011\u5c07 p[i] \u4e5f\u58d3\u5165\u5806\u4e2d\uff0c\u589e\u52a0\u4e00\u500b p[i] \u7684\u9078\u9805\uff0c\u5f48\u51fa\u6642\uff0c\u6211\u5011\u76f8\u7576\u65bc\u5c07 p[j]  \u6309\u7167 p[i] \u7684\u50f9\u683c\u53c8\u8cb7\u4e86\u56de\u4f86</p> <p>\u9019\u500b\u8ddf\u671f\u6b0a\u7684\u6982\u5ff5\u76f8\u95dc</p> code <pre><code>void solve() {\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;\n    cin &gt;&gt; n;\n\n    for (int i = 1; i &lt;= n; ++i) {\n        cin &gt;&gt; x;\n\n        pq.push(x);\n        if (pq.size() &amp;&amp; pq.top() &lt; x) {\n            ans += x - pq.top(); \n            pq.pop();\n            pq.push(x);\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> \u6d1b\u8c37 P1792 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u79cd\u6811 <p>\u7d66\u5b9a\u9577\u5ea6\u70ba \\(n\\) \u7684\u74b0\u5f62\u9663\u5217\uff0c\u7b2c \\(i\\) \u500b\u4f4d\u7f6e\u6709\u6b0a\u503c \\(a_i\\)\uff0c\u6c42\u76f8\u9130\u7684\u4e0d\u80fd\u540c\u6642\u9078\u7684\u60c5\u6cc1\u4e0b\u9078 \\(m\\) \u500b\u4f4d\u7f6e\u7684\u6b0a\u503c\u7e3d\u548c\u6700\u5927\u80fd\u591a\u5c11</p> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u8003\u616e\u9019\u500b\u554f\u984c\u7684\u7c21\u5316\u7248\u672c\uff1a\u6211\u5011\u53bb\u6389\u300c\u4e0d\u80fd\u9078\u76f8\u9130\u7684\u571f\u5730\u300d\u7684\u689d\u4ef6\uff0c\u90a3\u9ebc\u554f\u984c\u5c31\u8b8a\u6210\u4e86\u4e00\u500b\u975e\u5e38\u986f\u800c\u6613\u898b\u7684\u8caa\u5fc3\uff1a\u6392\u5e8f\uff0c\u9078\u6700\u5927\u7684 \\(m\\) \u500b</p> <p>\u53ea\u662f\u6211\u5011\u5fc5\u9808\u8981\u80fd\u652f\u63f4\u53cd\u6094\u52d5\u4f5c\uff0c\u6211\u5011\u9078\u5b9a \\(a[i]\\) \u4e4b\u5f8c\uff0c\u6709\u4ec0\u9ebc\u60c5\u6cc1\u662f\u8ddf\u9019\u500b\u60c5\u6cc1\u4e92\u76f8\u5c0d\u7acb\u7684\u55ce ? \u7b54\u6848\u5c31\u662f \\(a[i - 1] + a[i + 1]\\)\uff0c\u56e0\u70ba\u7576\u524d\u65e2\u7136\u9078\u4e86 \\(a[i]\\) \u4ee3\u8868\u4ed6\u662f\u7576\u524d\u6700\u5927\u7684\uff0c\u90a3\u5982\u679c\u53ea\u9078\u64c7 \\(a[i-1]\\) \u6216\u53ea\u9078\u64c7 \\(a[i+1]\\) \u986f\u7136\u76f4\u63a5\u9078 \\(a[i]\\) \u9084\u6703\u66f4\u597d</p> <p>\u6240\u4ee5\u6211\u5011\u8caa\u5fc3\u7684\u7b56\u7565\u5c31\u662f\u652f\u63f4\u9078\u4e86 \\(a[i]\\) \u4e4b\u5f8c\uff0c\u5c07 \\(a[i-1]\\) \u548c \\(a[i+1]\\) \u5f9e\u74b0\u4e0a\u522a\u6389\uff0c\u5c07 \\(a[i]\\) \u6539\u6210 \\((a[i-1] + a[i+1]) - a[i]\\)</p> code <pre><code>priority_queue&lt;pii&gt; pq;\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    if (m * 2 &gt; n) {\n        cout &lt;&lt; \"Error\\n\";\n        exit(0);\n    }\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n; i++) {\n        next[i] = i + 1;\n        pre[i] = i - 1;\n        pq.push(make_pair(a[i], i));\n    }\n    pre[1] = n;\n    next[n] = 1;\n}\n\nvoid del(int x) {\n    next[pre[x]] = next[x];\n    pre[next[x]] = pre[x];\n    deleted[x] = true;\n}\n\nvoid greed() {\n    while (deleted[pq.top().id]) pq.pop();\n    int x = pq.top().id;\n    pq.pop();\n    ans += a[x];\n    a[x] = a[pre[x]] + a[next[x]] - a[x];\n    del(pre[x]);\n    del(next[x]);\n    pq.push(make_pair(a[x], x));\n}\n\nvoid work() {\n    for (int i = 1; i &lt;= m; i++) greed();\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> USACO 2012 FEB Cow Coupons <p>\u6709 \\(n\\) \u982d\u725b\uff0c\u76ee\u524d\u6709 \\(m\\) \u5143\uff0c\u9084\u6709 \\(k\\) \u5f35\u512a\u60e0\u5238\u3002\u7b2c \\(i\\) \u982d\u725b\u7684\u50f9\u683c\u70ba \\(p_i\\)\uff0c\u5982\u679c\u4f7f\u7528\u512a\u60e0\u5238\u5247\u70ba \\(c_i\\)\u3002\u554f\u6700\u591a\u80fd\u8cb7\u5230\u591a\u5c11\u982d\u725b</p> <p>\\(k\\le n\\le 5\\times 10^4, c_i\\le p_i\\le 10^9, 1\\le m\\le 10^{14}\\)</p> \u601d\u8def <p>\u4e00\u500b\u76f4\u89ba\u7684\u60f3\u6cd5\u5c31\u662f\u7dad\u8b77\u6700\u5c0f\u5806\uff0c\u5c07\u6bcf\u500b\u7269\u54c1\u7684 p[i], c[i] \u90fd\u52a0\u5165\u88e1\u9762\uff0c\u6bcf\u6b21 pop \u6700\u5c0f\u7684\u51fa\u4f86\uff0c\u82e5\u6c92\u53d6\u904e\u5c31\u76f4\u63a5\u53d6\u3002\u4f46\u9019\u6a23\u82e5\u512a\u60e0\u5238\u90fd\u88ab\u7528\u5b8c\u4e86\uff0c\u5f8c\u9762\u7684 i \u5c31\u53ea\u80fd\u4ee5 p[i] \u4f86\u53d6\uff0c\u4f46\u8aaa\u4e0d\u5b9a\u5c07\u4e00\u500b\u512a\u60e0\u5238\u79fb\u904e\u4f86\u7528\u5728 i \u4e0a\u7e3d\u82b1\u8cbb\u6bd4\u7528 p[i] \u8cb7\u4f86\u7684\u66f4\u4fbf\u5b9c\uff0c\u6240\u4ee5\u6211\u5011\u9700\u8981\u4e00\u500b\u53cd\u6094\u7684\u64cd\u4f5c\uff0c\u7dad\u8b77\u7684\u662f (p[j] - c[j])\uff0c\u82e5\u5c0d\u65bc i \u4f86\u8aaa c[i] + (p[j] - c[j]) &lt; p[i]\uff0c\u4ee3\u8868\u53ef\u5c07\u512a\u60e0\u5238\u79fb\u904e\u4f86\u7528\u5728 i \u4e0a\u3002</p> <p>\u5be6\u4f5c\u4e0a\u4f86\u8aaa\uff0c\u6211\u5011\u53ef\u4ee5\u958b\u4e09\u500b min heap\uff0c\u4e00\u500b\u5b58\u6bcf\u4e00\u982d\u725b\u7684\u539f\u50f9 P\uff0c\u4e00\u500b\u5b58\u6bcf\u4e00\u982d\u5976\u725b\u4f7f\u7528\u512a\u60e0\u5377\u5f8c\u7684\u50f9\u683c C\uff0c\u4e00\u500b\u5b58\u653e\u539f\u50f9\u548c\u4f7f\u7528\u512a\u60e0\u5377\u5f8c\u7684\u50f9\u683c\u7684\u5dee delta\u3002\u4e00\u958b\u59cb\u5148\u628a\u6240\u6709\u7684 c[i] \u653e\u5165 C\uff0cp[i] \u653e\u5165 P\uff0c\u7136\u5f8c\u5728\u5b58\u653e\u5dee\u503c\u7684\u968a\u5217\u4e2d\u653e\u5165 k \u500b 0\uff0c\u8868\u793a\u76ee\u524d\u6709 k \u5f35\u512a\u60e0\u5377\u53ef\u4ee5\u4f7f\u7528\uff0c\u5373\u4e0d\u7528\u88dc\u5dee\u50f9\u3002</p> <p>\u63a5\u8457\u4fbf\u662f\u8abf\u6574\u512a\u60e0\u5377\u7684\u4f7f\u7528\u3002\u5728\u5269\u4e0b\u7684\u9322\u9084\u6c92\u7528\u5b8c\u7684\u60c5\u6cc1\u4e0b\uff0c\u6211\u5011\u6bcf\u4e00\u6b21\u53d6\u51fa\u5b58\u653e C \u548c P \u7684 top\uff0c\u6839\u64da\u8caa\u5fc3\uff0c\u5982\u679c P.top() &lt; C.top() + delta.top()\uff0c\u5c31\u7528\u539f\u50f9 p[i] \u8cb7\u5165\uff0c\u5426\u5247\uff0c\u6211\u5011\u5c31\u4f7f\u7528\u512a\u60e0\u5377\uff0c\u9032\u884c\u53cd\u6094\u8caa\u5fc3\u3002\u6700\u5f8c\uff0c\u6211\u5011\u628a\u9019\u982d\u4e73\u725b\u6253\u4e0a\u6a19\u8a18\uff0c\u9632\u6b62\u4e4b\u5f8c\u518d\u88ab\u53d6\u51fa\u3002</p> <p>\u8a3b : \u6709\u4e9b\u535a\u5ba2\u53ea\u6709\u7dad\u8b77\u672a\u8cfc\u8cb7\u7684\u725b\u7684 \\(p_i\\) \u7684 min heap\uff0c\u9019\u662f\u932f\u8aa4\u7684\uff0c\u8981\u540c\u6642\u7dad\u8b77 \\(c_i\\) \u548c \\(p_i\\) \u624d\u6709\u6700\u512a\u89e3\uff0c\u56e0\u70ba\u300c\u5c0d\u65bc\u5269\u4e0b\u7684\u7121\u975e\u5169\u7a2e\u9078\u64c7\uff0c\\(p\\) \u8cb7\uff0c\\(c\\) \u8cb7\u300d\u5169\u7a2e\u90fd\u8981\u540c\u6642\u8003\u616e</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int MAXN = 50010;\n\nint n, k, m;\nint p[MAXN], c[MAXN];\nbool buy[MAXN];  // buy[i] \u8868\u793a\u7b2c i \u500b\u7269\u54c1\u662f\u5426\u88ab\u8cb7\u904e\nint ans = 0;\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; P, C;\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; delta;\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; m;\n    for (int i = 1; i &lt;= n; ++i) {\n        cin &gt;&gt; p[i] &gt;&gt; c[i];\n        P.push(make_pair(p[i], i));\n        C.push(make_pair(c[i], i));\n    }\n    for (int i = 1; i &lt;= k; ++i) {\n        delta.push(0);\n    }\n    while (!P.empty()) {\n        auto [pval, pid] = P.top();\n        auto [cval, cid] = C.top();\n        if (buy[pid]) {  // \u5982\u679c\u88ab\u8cb7\u904e\u4e86\uff0c\u5c31\u8df3\u904e\n            P.pop();\n            continue;\n        }\n        if (buy[cid]) {\n            C.pop();\n            continue;\n        }\n        if (delta.top() + cval &gt; pval) {  // \u7528\u539f\u50f9\u8cb7 i \u6bd4\u8f03\u5212\u7b97\n            m -= pval;\n            P.pop();\n            buy[pid] = true;\n        } else {  // \u5426\u5247\u7684\u8a71\uff0c\u5c31\u662f\u7528\u512a\u60e0\u5238\u8cb7 i \u6bd4\u8f03\u5212\u7b97\n            m -= cval + delta.top();\n            delta.pop();\n            C.pop();\n            buy[cid] = true;\n            delta.push(p[cid] - c[cid]);\n        }\n        if (m &gt;= 0) {\n            ans++;\n        } else {\n            break;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"basic/greedy/ds/#_3","title":"\u53cd\u6094\u5806","text":"<p>\u5373\u901a\u904e\u5806\uff08\u5927\u6839\u5806\u3001\u5c0f\u6839\u5806\uff09\u4f86\u7dad\u8b77\u7576\u524d\u8caa\u5fc3\u7b56\u7565\u7684\u6700\u512a\u89e3\uff0c\u82e5\u767c\u73fe\u6700\u512a\u89e3\u4e0d\u5c0d\uff0c\u5c31\u9000\u56de\u4e0a\u4e00\u6b65\uff0c\u66f4\u65b0\u6700\u512a\u89e3\u3002</p> <p>\u7531\u65bc\u5806\u7684\u6027\u8cea\uff0c\u4f7f\u5f97\u5806\u7684\u9996\u6578\u64da\u4e00\u5b9a\u662f\u6700\u512a\u7684\uff0c\u9019\u5c31\u53ef\u4ee5\u5be6\u73fe\u5feb\u901f\u66f4\u65b0\u6700\u512a\u89e3\u3002</p> \u5340\u9593\u8abf\u5ea6\u554f\u984c - \u6700\u5927\u7e3d\u6b0a\u91cd [USACO09OPEN] Work Scheduling G <p>\u6709 \\(n\\) \u9805\u5de5\u4f5c\uff0c\u6bcf\u9805\u5de5\u4f5c\u6709\u4e00\u500b\u622a\u6b62\u6642\u9593 \\(t_i\\)\uff0c\u5b8c\u6210\u6bcf\u9805\u5de5\u4f5c\u53ef\u4ee5\u5f97\u5230\u5229\u6f64 \\(w_i\\)\uff0c\u6c42\u6700\u5927\u53ef\u4ee5\u5f97\u5230\u591a\u5c11\u5229\u6f64\u3002</p> code <pre><code>void solve() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i].time &gt;&gt; a[i].w;\n    sort(a + 1, a + 1 + n);\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (a[i].time &lt;= pq.size()) {\n            if (a[i].w &gt; pq.top()) {\n                ans += a[i].w - pq.top();\n                pq.pop();\n                pq.push(a[i].w);\n            }\n        } else {\n            ans += a[i].w;\n            pq.push(a[i].w);\n        }\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> <p>full code : http://codepad.org/pMPsRor9</p> \u6d1b\u8c37 P4053 [JSOI2007] \u5efa\u7b51\u62a2\u4fee <p>\u53c3\u898b\u6b64\u8655</p> CF 1271D Portals <p>\u4f60\u9700\u8981\u4f9d\u7167 \\(1,2,...,n\\) \u7684\u9806\u5e8f\u4f9d\u6b21\u5f81\u670d\u57ce\u5821\u3002\u4f60\u4e00\u958b\u59cb\u6709 \\(k\\) \u500b\u58eb\u5175\uff0c\u7b2c \\(i\\) \u500b\u57ce\u5821\u6709 \\(a_i\\) \u4ee3\u8868\u5f81\u670d\u5b83\u6240\u9700\u7684\u6700\u5c11\u58eb\u5175\u6578\u91cf\uff0c\u5f81\u670d\u57ce\u5821\u5f8c\u53ef\u4ee5\u7372\u5f97 \\(b_i\\) \u500b\u58eb\u5175\uff0c\u57ce\u5821\u6709\u4e00\u500b\u6b0a\u91cd \\(c_i\\)</p> <p>\u5982\u679c\u4f60\u5728\u57ce\u5821\u4e2d\u7559\u4e0b\u81f3\u5c11\u4e00\u540d\u58eb\u5175\u9032\u884c\u9632\u5b88\uff0c\u8a72\u57ce\u5821\u5c31\u6703\u88ab\u8996\u70ba\u9632\u5b88\u6210\u529f\u3002\u5f81\u670d\u57ce\u5821\u5f8c\u53ef\u4ee5\u7559\u4e0b\u58eb\u5175\u9032\u884c\u9632\u5b88\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57ce\u5821\u4e4b\u9593\u7684\u50b3\u9001\u9580\uff0c\u50b3\u9001\u4e00\u500b\u58eb\u5175\u904e\u53bb\u3002\u5982\u679c\u4f60\u6c92\u6709\u8db3\u5920\u7684\u58eb\u5175\u4f86\u5f81\u670d\u4e0b\u4e00\u500b\u57ce\u5821\uff0c\u5247\u904a\u6232\u5931\u6557</p> <p>\u4f60\u7684\u76ee\u6a19\u662f\u5728\u5f81\u670d\u6240\u6709\u57ce\u5821\u7684\u524d\u63d0\u4e0b\u6700\u5927\u5316\u6240\u6709\u9632\u5b88\u6210\u529f\u57ce\u5821\u7684\u6b0a\u91cd\u4e4b\u548c</p> \u601d\u8def <p>\u4e00\u8def\u6383\u904e\u53bb\uff0c\u6bcf\u6b21\u90fd\u5047\u5b9a\u7559\u5b88\u6240\u6709\u53ef\u7559\u5b88\u7684\u9ede\uff0c\u767c\u73fe\u7576\u524d\u7684\u58eb\u5175\u4e0d\u5920\u5247\u5f9e\u5df2\u7559\u5b88\u7684\u9ede\u4e2d\u9078\u53d6\u6b0a\u91cd\u6700\u5c0f\u7684\u653e\u68c4\u7559\u5b88 \u5c0d\u65bc\u6bcf\u500b \\(u_i \\rightarrow v\\) \u6211\u5011\u53ea\u7559\u7de8\u865f\u6700\u5927\u7684 \\(\\max(u_i) \\rightarrow v\\) \u9019\u689d\u908a\uff0c\u56e0\u70ba\u8d8a\u5f8c\u9762\u4f60\u7684\u8ecd\u968a\u6703\u8d8a\u5927\uff0c\u4e5f\u8d8a\u5bb9\u6613\u6210\u529f\u7559\u5b88</p> <p>\u57fa\u65bc\u4ee5\u4e0a\u7684\u7b56\u7565\uff0c\u9810\u8655\u7406\u51fa\u6bcf\u500b\u9ede\u53ef\u7559\u5b88\u7684\u96c6\u5408\uff0c\u904d\u6b77\u5230\u8a72\u9ede\u76f4\u63a5\u5c07\u53ef\u7559\u5b88\u7684\u5168\u90e8 push \u5230\u5df2\u7559\u5b88\u96c6\u5408\u4e2d\uff0c\u518d\u904d\u6b77\u4e0b\u4e00\u500b\u9ede\u3002\u5728\u904d\u6b77\u9ede\u904e\u7a0b\u4e2d\u767c\u73fe\u58eb\u5175\u4e0d\u5920\uff0cpop \u5df2\u7559\u5b88\u96c6\u5408\uff0c\u5982\u679c pop \u7a7a\u4e86\u9084\u4e0d\u5920\uff0c\u8aaa\u660e\u904a\u6232\u5931\u6557\u3002</p> <p>\u8a73\u7d30\u898b\u4ee3\u78bc</p> code <pre><code>void init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];\n        last[i] = i;\n    }\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        last[v] = max(last[v], u);\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        add_edge(last[i], i);\n        // edge (last[i] -&gt; i)\n    }\n}\nvoid solve() {\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        while (k &lt; a[i] &amp;&amp; !pq.empty()) k++, pq.pop();\n        if (k &lt; a[i]) {\n            cout &lt;&lt; \"-1\\n\";\n            return;\n        }\n        k += b[i];\n        for (auto v : G[u]) {\n            pq.push(c[v]);\n            k--;\n        }\n    }\n    while (k &lt; 0 &amp;&amp; !pq.empty()) pq.pop();\n    if (k &lt; 0) {\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    while (!pq.empty()) ans += pq.top(), pq.pop();\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"basic/greedy/ds/#_4","title":"\u984c\u76ee","text":"2023 \u6210\u5927\u521d\u8cfd pC. \u5927\u5bcc\u7fc1 <p>\u7d66 \\(a_1\\sim a_n\\)\uff0c\\(a_i\\) \u8868\u793a\u7b2c \\(i\\) \u5929\u7684\u6536\u5165\uff0c\u7d66 \\(b_1\\sim b_n\\)\uff0c\\(b_i\\) \u8868\u793a\u7b2c \\(i\\) \u5929\u7684\u82b1\u8cbb\u4e0a\u9650\uff0c\u53e6\u5916\u6bcf\u5929\u82b1\u5b8c\u9322\u5f8c\u9918\u984d\u4e0d\u80fd\u662f\u8ca0\u6578\u3002\u7d66\u6307\u5b9a\u7684 \\(k\\) \u5929\uff0c\u9019 \\(k\\) \u5929\u7d50\u675f\u7684\u6642\u5019\uff0c\u8eab\u4e0a\u5269\u4e0b\u7684\u9322\u8981\u525b\u597d\u662f 0 \u5143\u3002\u76ee\u6a19\u662f\u6709\u82b1\u9322\u7684\u5929\u6578\u8981\u6108\u5c11\u6108\u597d\u3002</p> <p>\\(1\\le k\\le n\\le 10^6, 1\\le a_i, b_i\\le 10^9\\)</p> \u601d\u8def <ul> <li> <p>\\(a_n\\) \u7684\u6536\u5165\uff0c\u53ea\u80fd\u5728 \\(b_n\\) \u82b1\u6389</p> </li> <li> <p>\\(a_{n-1}\\) \u7684\u6536\u5165\uff0c\u53ea\u80fd\u662f \\(b_{n-1}\\) or \\(b_n\\) \u82b1\u6389</p> </li> <li> <p>\\(a_{n-2}\\) \u7684\u6536\u5165\uff0c\u53ea\u80fd\u662f \\(b_{n-2}\\) or \\(b_{n-1}\\) or \\(b_n\\) \u82b1\u6389</p> </li> <li> <p>\u89c0\u5bdf\u6700\u5f8c\u4e00\u5929\uff0c\u5982\u679c \\(a_n &gt; 0\\)\uff0c\u90a3 \\(b_n\\) \u5c31\u4e00\u5b9a\u8981\u4f7f\u7528</p> </li> <li> <p>\\(b_{n}\\) \u4e00\u5b9a\u8981\u4f7f\u7528\u7684\u524d\u63d0\u4e0b\uff0c\\(b_{n}-a_{n}\\) \u662f\u591a\u4f86\u9084\u80fd\u82b1\u8cbb\u7684\uff0c\u9019\u500b\u6642\u5019\u6703\u512a\u5148\u82b1 \\(a_{n-1}\\) \u7684\u6536\u5165</p> </li> <li> <p>\u5982\u679c\u9084\u6709\u5269\uff0c\u518d\u62ff\u53bb\u82b1 \\(a_{n-2}, a_{n-3}, a_{n-4},..\\) \u7684\u6536\u5165</p> </li> <li> <p>\u5f9e\u5f8c\u5f80\u524d\u7dad\u8b77\u5927\u7684 \\(b_i\\)</p> </li> </ul> code <pre><code>int solve(vector&lt;int&gt; a, vector&lt;int&gt; b) {\n    int n = a.size();\n    priority_queue&lt;int&gt; pq;\n    int rest = 0;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        pq.push(b[i]);\n        rest += a[i];\n        while (pq.size() &amp;&amp; rest &gt; 0) {\n            int x = pq.top();\n            pq.pop();\n            rest -= x;\n        }\n        if (rest &gt; 0) return -1;\n    }\n    return n - (int)pq.size();\n}\n</code></pre> rahlin's code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\nusing namespace std;\n\nconst int INF = 2e18, MAXN = 1e6 + 5, M = 1e9 + 7;\nint n, k, a[MAXN], b[MAXN], t[MAXN], ans = 0;\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; b[i];\n    for (int i = 0; i &lt; k; i++) cin &gt;&gt; t[i];\n    sort(t, t + k);\n\n    int lb = -1;\n    for (int i = 0; i &lt; k; i++) {\n        priority_queue&lt;int&gt; pq;\n        int rb = t[i] - 1, l = t[i] - 1;\n        pq.push(b[rb]);\n        while (l &gt; lb &amp;&amp; pq.size()) {\n            int f = pq.top();\n            pq.pop();\n            ans++;\n            while (l &gt; lb &amp;&amp; f &gt;= 0) {\n                if (f &gt;= a[l]) {\n                    f -= a[l];\n                    a[l] = 0;\n                    l--;\n                    if (l &gt; lb) pq.push(b[l]);\n                } else {\n                    a[l] -= f;\n                    f = 0;\n                    break;\n                }\n            }\n        }\n        if (l != lb) {\n            cout &lt;&lt; -1 &lt;&lt; \"\\n\";\n            exit(0);\n        }\n        lb = rb;\n    }\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n\n/*\n5 2\n1 2 3 4 5\n1 1 1 1 1\n2\n4\n\n5 3\n5 4 3 2 1\n4 8 7 6 3\n1\n3\n5\n*/\n</code></pre> TCIRC d053: Q-4-8. \u5148\u5230\u5148\u670d\u52d9 (*) <p>\u6709 \\(n\\) \u500b\u4eba\u8981\u4f9d\u6b21\u5206\u914d\u5230 \\(m\\) \u500b\u6ac3\u53f0\u88ab\u670d\u52d9\uff0c\u7b2c \\(i\\) \u500b\u4eba\u5360\u7528 \\(t_i\\) \u7684\u6642\u9593\u3002\u6c42\u6700\u77ed\u6642\u9593\u5b8c\u6210\u6240\u6709\u4eba\u7684\u670d\u52d9</p> <p>\\(n,m\\le 2\\times 10^5,t_i\\le 10^4\\)</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nsigned main() {\n    long long int N, M, t, ot, ans;\n    priority_queue&lt;long long int, vector&lt;long long int&gt;, greater&lt;long long int&gt;&gt; pq;\n    cin &gt;&gt; N &gt;&gt; M;\n    for(int i = 0; i &lt; M; i++) pq.push(0);\n    for(int i = 0; i &lt; N; i++){\n        cin &gt;&gt; t;\n        ot = pq.top();\n        pq.pop();\n        pq.push(ot + t);\n        // \u52a0\u5165\u76ee\u524d\u6700\u7a7a\u7684\u6ac3\u53f0\n    }\n    while(pq.size()){\n        ans = pq.top();\n        pq.pop();\n    }\n    // \u53d6\u6700\u5927\u7684\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre> \u6d1b\u8c37 P3419 [POI2005]SAM-Toy Cars <p>\u6709 \\(n\\) \u500b\u4e0d\u540c\u7684\u73a9\u5177\uff0c\u800c\u5730\u4e0a\u53ea\u80fd\u653e\u6700\u591a \\(k\\) \u500b\u73a9\u5177\u3002\u5982\u679c\u73a9\u5177\u4e0d\u5728\u5730\u4e0a\uff0c\u5247\u8981\u5f9e\u67b6\u5b50\u4e0a\u62ff\uff0c\u5982\u679c\u6b64\u6642\u5730\u677f\u4e0a\u7684\u73a9\u5177\u5df2\u7d93\u9054\u5230\u4e86 \\(k\\) \u500b\uff0c\u5247\u9084\u8981\u62ff\u4e00\u500b\u73a9\u5177\u653e\u56de\u67b6\u5b50\u3002\u4f9d\u6b21\u60f3\u62ff\u7de8\u865f\u70ba \\(a_1,\\ldots,a_m\\) \u7684\u73a9\u5177\uff0c\u6c42\u4e00\u7a2e\u5b89\u6392\u65b9\u5f0f\u4f7f\u5f9e\u67b6\u5b50\u4e0a\u62ff\u73a9\u5177\u7684\u6b21\u6578\u6700\u5c11\u3002</p> <p>\\(1\\le k, n, m\\le 10^5, 1\\le a_i \\le n\\)</p> \u601d\u8def <p>\u8caa\u5fc3\u7684\u7528 pq \u53bb\u7dad\u8b77\u4e0b\u6b21\u51fa\u73fe\u7684 index\uff0c\u8d8a\u5f8c\u9762\u624d\u51fa\u73fe\u7684 toy \u53ef\u4ee5\u5148\u653e\u4e0a\u53bb</p> <p>\u6ce8\u610f\u5230\u5be6\u4f5c\u7684\u90e8\u5206\u82e5\u7576\u524d\u7684 toy \u5df2\u7d93\u5728\u5730\u677f\u4e0a\u4e86\u90a3\u4ed6\u6c38\u9060\u4e5f\u51fa\u4e0d\u53bb pq (\u56e0\u70ba\u6bcf\u4e00\u8f2a\u90fd\u6703\u6709\u4e00\u500b\u6771\u897f\u88ab push \u9032\u4f86\uff0c\u800c\u8a72\u6771\u897f\u4e00\u5b9a\u6bd4\u8f03\u5927)</p> <p>\u53c3\u8003\u535a\u5ba2\u7684\u5c0f\u6280\u5de7\uff0c\u6211\u5011\u76f4\u63a5\u5c07 <code>k++</code> \u5373\u53ef\u89e3\u6c7a</p> code <pre><code>void solve () {\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; p;\n    for (int i = 1; i &lt;= p; ++i)\n        cin &gt;&gt; req[i];\n    for (int i = p; i; --i) {\n        nxt[i] = ((pos[req[i]]) ? pos[req[i]] : (p + 1));\n        pos[req[i]] = i;\n    }\n\n    priority_queue&lt;pii&gt; pq;\n\n    for (int i = 1; i &lt;= p; i++) {\n        if (!inq[req[i]]) {\n            if (pq.size() == k) {\n                inq[pq.top().id] = false;\n                pq.pop();\n            }\n            pq.push(pii (nxt[i], req[i]));\n            inq[req[i]] = true;\n            ans++;\n        } else {\n            k++;\n            pq.push(pii (nxt[i], req[i]));\n        }\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> 2021 TOI pB. \u6383\u5730\u6a5f\u5668\u4eba 30% <p>\\(n\\) \u9593\u6559\u5ba4\uff0c\u4e00\u958b\u59cb\u4f60\u5728\u7b2c\u4e00\u9593\uff0c\u7d66\u4f60 \\(T\\) \u5206\u9418\u7684\u6253\u6383\u6642\u9593\u6bcf\u9593\u6559\u5ba4\u7b2c\u4e00\u5206\u9418\u53ef\u4ee5\u5438\u5230 \\(s_i\\) \u7684\u7070\u5875\uff0c\u6bcf\u5206\u9418\u905e\u6e1b \\(d_i\\) \u500b\u7070\u5875\uff0c\u5f9e\u7b2c \\(i\\) \u9593\u6559\u5ba4\u79fb\u52d5\u5230\u7b2c \\(i+1\\) \u9593\u6559\u5ba4\u82b1 \\(t_i\\) \u7684\u6642\u9593\uff0c\u554f\u9019 \\(T\\) \u5206\u9418\u6700\u591a\u53ef\u4ee5\u6383\u5230\u591a\u5c11\u7070\u5875</p> <p>\\(n\\le 1000, m\\le 1000,0\\le t_i, d_i \\le 10^9, 1\\le s_i \\le 10^9\\)</p> \u601d\u8def 1 (from APCSC) <p>\u53cd\u6094\u6cd5\uff0c\u6642\u9593\u5982\u679c\u5920\u5c31\u90fd\u6383\uff0c\u518d\u9760\u53cd\u6094\u5806\u628a\u4e4b\u524d\u7684\u6c7a\u7b56\u53cd\u6094\u6389</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#define MAXN 100000\nusing namespace std;\n\nint s[MAXN], d[MAXN], t[MAXN];\n\nint main() {\n    long long T, n;\n\n    cin &gt;&gt; n &gt;&gt; T;\n\n    for (int i = 1; i &lt; n; i++) cin &gt;&gt; t[i];\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; s[i];\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; d[i];\n\n\n    long long ans = 0, cur = 0;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; pq;\n    for (int i = 0; i &lt; n; i++) {\n        T -= t[i];\n        while (T &lt; 0 &amp;&amp; !pq.empty()) {\n            cur -= pq.top();\n            pq.pop();\n            T++;\n        }\n        while (t &gt; 0 &amp;&amp; s[i] &gt; 0) {\n            cur += s[i];\n            pq.push(s[i]);\n            s[i] -= d[i];\n            T--;\n        }\n        while (!pq.empty() &amp;&amp; s[i] &gt; pq.top()) {\n            cur += s[i] - pq.top();\n            pq.pop();\n            pq.push(s[i]);\n            s[i] -= d[i];\n        }\n        ans = max(ans, cur);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u601d\u8def 2 (from twpca) <p>\u5c07\u6bcf\u4e00\u5206\u9418\u8caa\u5fc3\u5730\u5206\u7d66\u76ee\u524d\u8490\u96c6\u5f97\u5230\u7070\u5875\u91cf\u6700\u5927\u7684\u6559\u5ba4\u5c31\u597d</p> code <pre><code>// \u6263\u6389\u79fb\u52d5\u6642\u9593\u5f8c\uff0c\u6709 k \u5206\u9418\u6253\u6383\u524d e \u500b\u6559\u5ba4\u6700\u5927\u8490\u96c6\u7070\u5875\u91cf\nlong long collect_dust(int e, int k) {\n    priority_queue&lt;pair&lt;int, int&gt;&gt; pq;  // \u7dad\u8b77 (\u76ee\u524d\u8490\u96c6\u5f97\u5230\u7684\u7070\u5875\u91cf, \u6559\u5ba4id)\n    long long result = 0;\n\n    for (int i = 1; i &lt;= e; i++) {\n        pq.emplace(s[i], i);\n    }\n    for (int t = 1; t &lt;= k; t++) {\n        if (pq.empty()) break;  // \u6240\u6709 &gt;= 0 \u7684\u7070\u5875\u90fd\u88ab\u6383\u5b8c\u4e86\n\n        auto [dust, classroom] = pq.top();\n        pq.pop();\n\n        result += dust;\n        if (dust - d[classroom] &gt; 0) {  // \u4e0b\u4e00\u6b21\u6383\u9664\u7684\u7070\u5875\u91cf &gt; 0 \u7684\u8a71\n            pq.emplace(dust - d[classroom], classroom);\n        }\n    }\n    return result;\n}\n</code></pre> Zerojudge c835. \u80cc\u5305\u554f\u984c <p>\u7d66\u4f60 \\(n\\) \u500b\u7269\u54c1\uff0c\u80cc\u5305\u91cd\u91cf\u9650\u5236\u70ba \\(2^W\\)\uff0c\u6bcf\u500b\u7269\u54c1\u7684\u91cd\u91cf\u662f \\(2^{w_i}\\)\uff0c\u50f9\u503c\u662f \\(v_i\\)\uff0c\u6c42\u80fd\u653e\u5230\u80cc\u5305\u5167\u7684\u6700\u5927\u50f9\u503c\u548c</p> <p>\\(n\\le 10^6, W, w_i\\le 20, v_i\\le 10^9\\)</p> \u601d\u8def <ul> <li>\u60f3\u6cd5 \\(2^{n-1}+2^{n-1} \\le 2^n\\)</li> <li>\u628a\u5927\u7684\u5006\u5006\u5408\u4f75</li> </ul> code <pre><code>void solve() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; ++i) {\n        int w, v;\n        cin &gt;&gt; w &gt;&gt; v;\n        if (w &lt;= m) {\n            pq[w].push(v);\n        }\n    }\n    for (int i = 0; i &lt; m; ++i) {\n        while(!pq[i].empty()) {\n            if(pq[i].size() == 1) {\n                pq[i + 1].push(pq[i].top());\n                break;\n            }\n            ll a = pq[i].top();\n            pq[i].pop();\n            ll b = pq[i].top();\n            pq[i].pop();\n            pq[i + 1].push(a + b);\n        }\n    }\n    cout &lt;&lt; pq[m].top() &lt;&lt; \"\\n\";\n}\n</code></pre> CF 3 D. Least Cost Bracket Sequence <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\)\uff0c\u7531 <code>(</code>\uff0c<code>)</code> \u4ee5\u53ca <code>?</code> \u69cb\u6210\u7684\u5b57\u4e32\uff0c\u5c07\u7b2c \\(i\\) \u500b '?' \u8b8a\u5de6\u62ec\u865f\u82b1\u8cbb \\(a_i\\) \uff0c\u8b8a\u6210\u53f3\u62ec\u865f\u82b1\u8cbb \\(b_i\\)\u3002\u5c07\u5b57\u4e32\u4e2d\u7684 <code>?</code> \u90fd\u66ff\u63db\u6389\uff0c\u554f\u4f7f\u5b57\u4e32\u662f\u5408\u6cd5\u62ec\u865f\u7684\u6700\u5c11\u82b1\u8cbb</p> <p>\\(n\\le 5\\times 10^4,1\\le a_i, b_i\\le 10^6\\)</p> \u601d\u8def <p>\u9ed8\u8a8d\u6240\u6709\u554f\u865f\u70ba\u53f3\u62ec\u865f\uff0c\u7576\u524d\u7684\u5de6\u62ec\u865f\u6578\u5c0f\u65bc\u53f3\u62ec\u865f\u6642\uff0c\u5247\u5f9e\u4e4b\u524d\u627e\u5230\u4ee3\u50f9\u6700\u5c0f\u7684\u554f\u865f\u8b8a\u6210\u7684\u53f3\u62ec\u865f\u4ee3\u66ff\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define F first\n#define S second\n#define int long long\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nsigned main() {\n    string s;\n    cin &gt;&gt; s;\n    int n = s.size();\n\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq; \n    int l = 0, ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (s[i] == '(') {\n            l++;\n            continue;\n        } else {\n            if (s[i] == '?') {\n                int a, b;\n                cin &gt;&gt; a &gt;&gt; b;\n                pq.push({a - b, i});\n                s[i] = ')';\n                ans += b;\n            }\n            if (--l &lt; 0) {\n                if (pq.empty()) {\n                    cout &lt;&lt; \"-1\" &lt;&lt; '\\n';\n                    exit(0);\n                }\n                ans += pq.top().F;\n                s[pq.top().S] = '(';\n                l += 2;\n                pq.pop();\n            }\n        }\n    }\n    if (l) {\n        cout &lt;&lt; \"-1\" &lt;&lt; '\\n';\n        exit(0);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n' &lt;&lt; s &lt;&lt; '\\n';\n} \n</code></pre> TOI 2021 \u4e8c\u6a21 pC. \u914d\u5c0d\u554f\u984c\uff08Pairing\uff09 <p>\u7d66\u5b9a\u4e00\u500b\u5e8f\u5217 \\(a_1, a_2, ..., a_n\\)\uff0c\u4e00\u500b\u9ede\u53ea\u80fd\u88ab\u5339\u914d\u6700\u591a\u4e00\u6b21\uff0c\u7576\u5169\u500b\u9ede \\(i\\) \u8207 \\(j\\) \u914d\u5c0d\u6642\uff0c\u5c31\u6703\u7372\u5f97 \\(a_i + a_{i+1} + \\cdots + a_j\\) \u7684\u5206\u6578\u3002\u4efb\u4f55\u914d\u5c0d\u90fd\u4e0d\u80fd\u51fa\u73fe\u90e8\u4efd\u76f8\u4ea4\u7684\u60c5\u5f62\u3002\u5339\u914d\u7d50\u675f\u5f8c\uff0c\u6240\u6709\u6c92\u6709\u88ab\u5339\u914d\u5230\u7684\u9ede \\(i\\) \uff0c\u5982\u679c \\(a_i &gt; 0\\)\uff0c\u53ef\u4ee5\u7372\u5f97 \\(a_i\\) \u5206\u3002\u554f\u5206\u6578\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(1 \\leq n \\leq 10^5, -10^9 \\leq a_i \\leq 10^9\\)</p> \u601d\u8def <p>\u3010\u5340\u9593 dp : O(n^3)\u3011</p> <p>dp(l, r) : l ~ r \u7684\u6700\u591a cost</p> <ul> <li> <p>dp(l+1, r) + a[l]</p> </li> <li> <p>dp(l, r-1) + a[r]</p> </li> <li> <p>\u5207\u5169\u534a dp(l, k) + dp(k+1, r)</p> </li> <li> <p>l \u548c r \u914d\u5c0d dp(l+1, r-1) + (a[l]+...+a[r])</p> </li> </ul> <p>\u3010\u524d\u7db4 dp : O(n^2)\u3011</p> <p>dp(i, k) : 1~i \u7684 (#\u5de6\u62ec\u865f - #\u53f3\u62ec\u865f) = k</p> <p>ans = dp(n, 0)</p> <p>\u8f49\u79fb</p> <ul> <li> <p>i \u662f \"(\" : dp(i-1, k-1) - pre[i-1]</p> </li> <li> <p>i \u662f \")\" : dp(i-1, k+1) + pre[i]</p> </li> <li> <p>i \u662f \"X\" : dp(i-1, k) + pre[i] - pre[i-1]</p> </li> </ul> <p>\u3010Greedy \u89c0\u5bdf\u6027\u8cea, \u5f8c\u6094\u6cd5: O(n log n)\u3011</p> <p>\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u7528\u4e00\u500b max heap \u4f86\u7dad\u8b77\u62ec\u865f\u53bb\u914d\u5c0d\uff0c\u6211\u5011\u6bcf\u6b21\u5c07\u7576\u524d\u5411\u7576\u4f5c\u53f3\u62ec\u865f\uff0c\u770b\u8207 heap \u7684\u9802\u7aef\u7684\u548c\u662f\u5426\u80fd\u7522\u751f\u6b63\u7684\u8ca2\u737b\uff0c\u53ef\u4ee5\u7684\u8a71\u6211\u5011\u5c31\u5c07\u53f3\u62ec\u865f\u7684\u8ca2\u737b\u52a0\u4e0a\u4e00\u500b\u8ca0\u865f\uff0c\u4e26\u52a0\u5165 heap \u4e2d\uff0c\u4ee3\u8868\u8457\u4e4b\u5f8c\u53ef\u4ee5\u5c07\u7576\u524d\u7684\u53f3\u62ec\u865f\u6d88\u9664\u3002\u5426\u5247\u6211\u5011\u5c31\u5c07\u7576\u524d\u9805\u4f5c\u70ba\u5de6\u62ec\u865f\u7684\u8ca2\u737b\u52a0\u5165 heap \u4e2d\u3002\u90a3\u9ebc\u8981\u5982\u4f55\u8655\u7406\u300c\u4e0d\u9078\u300d\u7684\u8ca2\u737b\u5462? \u6211\u5011\u5176\u5be6\u53ef\u4ee5\u5148\u628a\u7b54\u6848\u52a0\u4e0a sum(a[i])\uff0c\u518d\u5c07\u6709\u9078\u7684\u8ca2\u737b\u4e2d\u52a0\u5165 -a[i]\uff0c\u9019\u6a23\u5c31\u53ea\u8981\u8655\u7406\u6709\u9078\u7684\u90e8\u4efd\u4e86\u3002\u6211\u5011\u9084\u8981\u6ce8\u610f\u4e00\u9ede\u5c31\u662f\u7576\u67d0\u4e00\u9805\u505a\u4e86\u53f3\u62ec\u865f\u5f8c\uff0c\u53c8\u88ab\u66f4\u5f8c\u9762\u7684\u53f3\u62ec\u865f\u53d6\u4ee3\uff0c\u6211\u5011\u9084\u662f\u53ef\u4ee5\u7528\u5de6\u62ec\u865f\u7684\u65b9\u5f0f\u53bb\u9078\u4ed6\uff0c\u56e0\u70ba\u7576\u6642\u4ed6\u53ea\u662f\u56e0\u70ba\u505a\u53f3\u62ec\u865f\u7522\u751f\u8ca2\u737b\u624d\u53bb\u9078\u7684\uff0c\u4e0d\u4ee3\u8868\u4ed6\u4e0d\u80fd\u4f5c\u5de6\u62ec\u865f\u3002\u4e0d\u7528\u6015\u505a\u53f3\u62ec\u865f\u7684\u8ca2\u737b\u9084\u6c92 pop \u51fa\u4f86\uff0c\u5de6\u62ec\u865f\u7684\u8ca2\u737b\u5c31\u5df2\u7d93\u5148\u51fa\u4f86\uff0c\u56e0\u70ba\u540c\u6642\u5728\u67d0\u4e00\u9805\u53c8\u505a\u5de6\u62ec\u865f\uff0c\u53c8\u505a\u53f3\u62ec\u865f\uff0c\u8ca2\u737b\u4e00\u5b9a\u662f\u8ca0\u7684</p> <p>\u9019\u908a\u63d0\u4f9b\u4e00\u7d44\u7bc4\u4f8b</p> <pre><code>        i         1   2   3  4  5  6  7  8\n        a[i]:     3  -1  -5  3  8  4 -3  4\n        pre[i]:   3   2  -3  0  8 12  9 13\n</code></pre> <p>\u53c3\u8003\u81ea : TOI 2021 Solutions - p3 pairing</p> code <pre><code>#pragma GCC optimize(\"Ofast\")\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nconst int maxn = 100025;\ntemplate &lt;typename T&gt; using max_heap = priority_queue&lt;T, vector&lt;T&gt;, less&lt;T&gt;&gt;;\nint a[maxn];\nlong long pre[maxn];\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n; i++) pre[i] = pre[i-1] + a[i];\n\n    max_heap&lt;long long&gt; pq;\n    long long ans = 0;\n    for (int i = 1; i &lt;= n; i++) ans += max(a[i], 0);\n    for (int i = 1; i &lt;= n; i++) {\n        long long lbraceValue = -pre[i-1] - max(a[i], 0);\n        long long rbraceValue = pre[i] - max(a[i], 0);\n        if (!pq.empty() &amp;&amp; rbraceValue + pq.top() &gt; 0) {\n            ans += rbraceValue + pq.top(), pq.pop();\n            pq.push(lbraceValue);\n            pq.push(-rbraceValue);\n        } else {\n            pq.push(lbraceValue);\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> CF 1821 E. Rearrange Brackets <p>\u5c0d\u65bc\u4e00\u500b\u5408\u6cd5\u7684\u62ec\u865f\u5e8f\u5217\uff0c\u5b9a\u7fa9\u5b83\u7684\u300ccost\u300d\u70ba\u9032\u884c\u82e5\u5e72\u6b21\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u5c07\u5b83\u6e05\u7a7a\u7684\u6700\u5c0f\u7e3d\u4ee3\u50f9: \u9078\u53d6\u5169\u500b\u76f8\u9130\u7684\u5de6\u53f3\u62ec\u865f\u522a\u9664\uff0c\u4e26\u5c07\u4ee3\u50f9\u52a0\u4e0a\u539f\u53f3\u62ec\u865f\u53f3\u908a\u7684\u62ec\u865f\u6578\u91cf\u3002</p> <p>\u4f60\u53ef\u4ee5\u9032\u884c\u4e0d\u8d85\u904e k \u6b21\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u5c07\u7d66\u5b9a\u7684\u5339\u914d\u62ec\u865f\u5e8f\u5217 s \u8b8a\u70ba\u53e6\u4e00\u500b\u5339\u914d\u62ec\u865f\u5e8f\u5217: \u9078\u53d6\u4e00\u500b\u62ec\u865f\uff0c\u5c07\u5b83\u79fb\u52d5\u5230\u5e8f\u5217\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\u6c42\u6700\u7d42\u62ec\u865f\u5b57\u4e32\u7684\u300ccost\u300d\u7684\u6700\u5c0f\u503c</p> <p>\\(|s| \\le 2\\times 10^5, 0\\le k\\le 5\\)</p> \u601d\u8def <p>\u7576\u6ce8\u610f\u5230\u6700\u512a\u6c7a\u7b56\u6642\uff0c\u662f\u5f9e\u53f3\u908a\u958b\u59cb\u9032\u884c\u62ec\u865f\u5339\u914d\uff0c\u800c\u6bcf\u5c0d\u62ec\u865f\u7684\u8ca2\u737b\u662f\u62ec\u865f\u5167\u7684\u62ec\u865f\u6578\u91cf / 2</p> <p> </p> <p>\u800c k \u6b21\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u8996\u70ba\u5c07 k \u500b\u8ca2\u737b\u6700\u5927\u7684\u62ec\u865f\u7684\u8ca2\u737b\u7d66\u79fb\u9664\uff0c\u56e0\u70ba\u9019\u4e9b\u62ec\u865f\u8ca2\u737b\u6703\u6700\u5927\u5c31\u4ee3\u8868\u6211\u5011\u4e00\u5b9a\u80fd\u628a\u5b83\u7167\u8ca2\u737b\u5927\u5230\u5c0f\u770b\uff0c\u5c0d\u65bc\u6bcf\u7d44\u79fb\u52d5\u5230\u4e0d\u6703\u5f71\u97ff\u5225\u4eba\u7684\u4f4d\u7f6e\uff08\u4e0d\u6703\u5c0d\u5225\u4eba\u9020\u6210\u8ca2\u737b\uff09\uff0c\u6240\u4ee5\u5c31\u7528 prioirty queue \u7dad\u8b77\u6bcf\u7d44\u7684\u8ca2\u737b\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nvoid solve() {\n    int k;\n    cin &gt;&gt; k;\n    string s;\n    cin &gt;&gt; s;\n\n    int n = s.size();\n    priority_queue&lt;int&gt; pq;\n    vector&lt;int&gt; stk;\n    int cost = 0;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        if (s[i] == '(') {\n            cost += stk.back() - i - 1;\n            pq.push(stk.back() - i - 1);\n            stk.pop_back();\n        } else {\n            stk.push_back(i);\n        }\n    }\n    while (pq.size()) {\n        if (k == 0) break;\n        k--;\n        cost -= pq.top();\n        pq.pop();\n    }\n    cout &lt;&lt; cost / 2 &lt;&lt; '\\n';\n}\n\nsigned main() {\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n} \n</code></pre> 2020 \u5168\u570b\u8cfd D. \u6c34\u679c\u5305\u88dd <p>\u6709 \\(n\\) \u500b\u6c34\u679c\uff0c\u7b2c \\(i\\) \u500b\u7684\u91cd\u91cf\u662f \\(w_i\\)\uff0c\u7136\u5f8c\u6a5f\u5668\u6703\u6309\u7167 \\(p_1, \\ldots ,p_n\\) \u7684\u9806\u5e8f\u5c07\u6c34\u679c\u88dd\u888b\u3002\u6709 \\(m\\) \u500b\u888b\u5b50\uff0c\u6a5f\u5668\u5728\u88dd\u67d0\u500b\u6c34\u679c\u6642\uff0c\u6703\u628a\u5b83\u653e\u5230\u7e3d\u91cd\u6700\u5c0f\u7684\u90a3\u500b\u888b\u5b50\u88e1\uff0c\u5982\u679c\u6709\u7b49\u91cd\u7684\u6703\u653e\u5230\u7de8\u865f\u6700\u5c0f\u7684\u90a3\u500b\u88e1\u9762\u3002</p> <p>\u5df2\u77e5\u5168\u90e8\u88dd\u5b8c\u5f8c\uff0c\u7b2c \\(i\\) \u500b\u888b\u5b50\u88e1\u7684\u6c34\u679c\u6709\u54ea\u4e9b\uff0c\u6c42 \\(p_1, \\ldots ,p_n\\)\uff0c\u6216\u8005\u8aaa\u7121\u89e3\u3002</p> <p>\\(n\\le 2\\times 10^5, 1\\le w_i\\le 10^9\\)</p> \u601d\u8def <p>\u7b2c\u4e00\u500b\u9078\u7684\u4e00\u5b9a\u662f\u5f9e\u6700\u8f15\u7684\u4e14\u7de8\u865f\u6700\u5c0f\u7684\uff0c\u4e5f\u5c31\u662f\u5f9e\u7b2c\u4e00\u500b\u888b\u5b50\u88e1\u9762\u7684\u9078\u3002\u800c\u8981\u8b93\u7b2c\u4e00\u500b\u888b\u5b50\u7684\u5176\u4ed6\u6c34\u679c\u4e4b\u5f8c\u6709\u8fa6\u6cd5\u88ab\u9078\u5230\uff0c\u5148\u628a\u6700\u5c0f\u7684\u9078\u51fa\u4f86\u6700\u5408\u9069\uff0c\u628a\u5b83\u79fb\u9664\u6389\u5f8c\uff0c\u518d\u4f86\u5c31\u662f\u5b50\u554f\u984c\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528 priority queue \u7dad\u8b77\u6bcf\u500b\u888b\u5b50\u7684 (\u5269\u9918\u91cd\u91cf, \u7de8\u865f)\uff0c\u5c0d\u65bc\u6bcf\u500b\u888b\u5b50\u4e5f\u7528 priority queue \u7dad\u8b77\u5269\u4e0b\u7684\u7269\u54c1\u7684\u91cd\u91cf\uff0c\u8d8a\u5c0f\u7684\u8d8a\u5148\u88ab pop \u51fa\u4f86\uff0c\u5982\u679c\u6c92\u6771\u897f\u53ef pop \u5c31\u4ee3\u8868\u7121\u89e3</p> <p>\u66f4\u8a73\u7d30\u53ef\u53c3\u8003 : twpca editorial twpca code</p> CF 1821 D. Black Cells <p>\u6709\u4e00\u500b\u6578\u7dda\uff0c\u7d66 n \u500b\u4e0d\u76f8\u4ea4\u7684 interval\uff0c\u4ee3\u8868\u53ea\u80fd\u5728\u9019\u4e9b interval \u5167\u7684\u9ede\u5857\u8272\uff0c\u76ee\u6a19\u662f\u5c07 k \u500b\u9ede\u5857\u8272\u3002\u6bcf\u6b21\u53ef\u505a\u4ee5\u4e0b\u64cd\u4f5c:</p> <ul> <li> <p>\u5f80\u53f3\u79fb\u4e00\u683c</p> </li> <li> <p>\u5c07 shift \u6309\u4f4f\uff08\u5728\u4e00\u500b\u9ede\u4e0a\u82e5 shift \u88ab\u6309\u4f4f\u5373\u5857\u8272\uff09</p> </li> <li> <p>\u5c07 shift \u9b06\u958b</p> </li> </ul> <p>\u554f\u6700\u5c11\u5e7e\u6b21\u64cd\u4f5c\u53ef\u81f3\u5c11\u5c07 k \u500b\u9ede\u5857\u8272</p> <p>\\(n\\le 2\\times 10^5, 1\\le k\\le 10^9, 1\\le l_i, r_i\\le 10^9\\)</p> \u601d\u8def <p>\u8003\u616e\u89c0\u5bdf\u6027\u8cea\u53ef\u77e5\u7b54\u6848\u53ea\u548c\u53f3\u7aef\u9ede\u5927\u5c0f\u4ee5\u53ca\u6240\u9078\u7684\u5340\u9593\u6578\u91cf\u6709\u95dc\u3002\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5beb\u51fa\u8a08\u7b97\u5f0f:</p> <p>ans = \u8986\u84cb\u7684\u5340\u9593\u6578\u91cf * 2 + end</p> <p>\u5176\u4e2d end = \u6700\u5f8c\u5857\u8272\u7684\u9ede\uff0c\u4f8b\u5982\u8aaa interval \u6709 [1, 1], [3, 5] \u800c k = 3\uff0c\u90a3\u6211\u5011\u53ea\u9700\u8981\u5857 [1, 1], [3, 4] \u5c31\u597d\uff0cend = 4\u3002\u4f46\u6211\u5011\u4e0d\u78ba\u5b9a\u8981\u8986\u84cb\u54ea\u4e9b\u5340\u9593\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u53cd\u6094\u8caa\u5fc3\uff0c\u679a\u8209\u7576 end \u7684 interval\uff0c\u5c07 interval \u7528\u9577\u5ea6\u52a0\u5165\u81f3 min heap \u5167\uff0c\u82e5\u7576\u524d heap \u5167\u7684\u88ab interval \u8986\u84cb\u5230\u7684\u9ede\u6578\u91cf &gt;= k \u5247 pop \u6700\u5c0f\u9577\u5ea6\u7684 interval\uff0c\u4e26\u9806\u4fbf\u8a08\u7b97\u7576\u524d\u7684\u7b54\u6848\uff0c\u8ddf\u771f\u6b63\u7684\u7b54\u6848\u53d6 min</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int N = 2e5 + 5;\nint l[N], r[N], n, k;\n\nvoid solve() {\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; l[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; r[i];\n    }\n    int num = 0, sum = 0, ans = INT_MAX;\n    for (int i = 1; i &lt;= n; i++) {\n        q.push(r[i] - l[i] + 1);\n        num++;\n        sum += r[i] - l[i] + 1;\n        while (q.size() &amp;&amp; sum &gt;= k) {\n            ans = min(ans, r[i] - (sum - k) + num * 2);\n            sum -= q.top();\n            q.pop();\n            num--;\n        }\n    }\n    if (ans == INT_MAX) {\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    } else {\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    }\n}\n\nsigned main() {\n    int t; \n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> CSES Room Allocation <p>\u6709 \\(n\\) \u4eba\uff0c\u7d66\u6bcf\u500b\u4eba\u7684\u5165\u4f4f\u6642\u9593\u8207\u96e2\u958b\u6642\u9593 \\([l_i, r_i]\\)\uff0c\u554f\u81f3\u5c11\u8981\u5e7e\u9593\u623f\u9593\u624d\u5920\uff0c\u4e26\u8f38\u51fa\u6bcf\u500b\u4eba\u7684\u623f\u9593\u7de8\u865f</p> <p>\\(n\\le 2\\times 10^5, 1\\le l_i \\le r_i\\le 10^9\\)</p> \u601d\u8def <p>\u7528 min heap \u7dad\u8b77\u6bcf\u500b\u4eba\u7684 \\(r_i\\)\uff0c\u6709\u4eba\u8981\u4f4f\u9032\u4f86\u6642\u5c31\u4f4f\u9032\u7576\u524d \\(r_i\\) \u6700\u5c0f\u7684\u623f\u9593\uff0c\u82e5\u90a3\u500b\u4eba\u9084\u6c92\u96e2\u958b\u5c31\u518d\u958b\u4e00\u9593\u65b0\u7684\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nstruct Interval {\n    int l, r, id;\n\n    bool operator&lt;(const Interval &amp;rhs) const {\n        return l &lt; rhs.l;\n    }\n};\n\nconst int INF = 9e18;\nconst int MAXN = 2e5 + 5;\nint n, k, ans[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n;\n    vector&lt;Interval&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i].l &gt;&gt; a[i].r;\n        a[i].id = i;\n    }\n    sort(a.begin(), a.end());\n\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n    pq.push({a[0].r, 1});\n    ans[a[0].id] = 1;\n    int cnt = 1;\n    for (int i = 1; i &lt; n; i++) {\n        auto [t, room] = pq.top();\n        if (t &lt; a[i].l) {\n            pq.pop();\n            pq.push({a[i].r, room});\n            ans[a[i].id] = room;\n        } else {\n            pq.push({a[i].r, ++cnt});\n            ans[a[i].id] = cnt;\n        }\n    }\n    cout &lt;&lt; cnt &lt;&lt; '\\n';\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; \" \";\n    }\n}\n</code></pre> POI 2012 HUR-Warehouse Store <p>\u6709 \\(n\\) \u5929\uff0c\u7b2c \\(i\\) \u5929\u5148\u9032\u8ca8 \\(a_i\\) \u500b\uff0c\u7136\u5f8c\u6703\u6709\u8981\u8ce3\u51fa \\(b_i\\) \u500b\u7684\u8a02\u55ae\uff0c\u554f\u6700\u591a\u53ef\u4ee5\u63a5\u591a\u5c11\u500b\u8a02\u55ae</p> <p>\\(n\\le 2.5 \\times 10^5, 0\\le a_i, b_i\\le 10^9\\)</p> \u601d\u8def <p>\u5beb\u591a\u9019\u7a2e\u984c\u76ee\u5927\u6982\u5c31\u6703\u77e5\u9053\u4ed6\u7684\u5957\u8def\uff0c\u5f9e\u7b2c\u4e00\u5929\u958b\u59cb\uff0c\u5982\u679c\u80fd\u8ce3\u51fa\u53bb\u6211\u5011\u5c31\u8ce3\uff0c\u5047\u8a2d\u6211\u5011\u8981\u8ce3 \\(b_i\\)\uff0c\u4e0d\u80fd\u8ce3\u7684\u6642\u5019\u6211\u5011\u53ef\u4ee5\u5f9e\u4e4b\u524d\u8ce3\u51fa\u53bb\u7684\u90a3\u4e9b\u8a02\u55ae\u6311 \\(b\\) \u503c\u6700\u5927\u7684\uff0c\u5047\u8a2d\u662f \\(b_j\\)\uff0c\u770b\u5982\u679c\u653e\u68c4\u90a3\u500b\u6539\u8cb7\u6211\u5011\u76ee\u524d\u7684\u8a02\u55ae\u662f\u5426\u66f4\u512a\uff0c\u4e5f\u5c31\u662f\u770b \\(b_j\\) \u662f\u5426 \\(&gt; b_i\\)\uff0c\u662f\u7684\u8a71\u5c31\u653e\u68c4 \\(b_j\\)\uff0c\u8f49\u8cb7 \\(b_i\\)\u3002\u9019\u500b\u53ef\u4ee5\u7528 max heap \u4f86\u7dad\u8b77\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nint n, ans;\nint a[300010], b[300010];\nbool vis[300010];\npriority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt; &gt; &gt; q;  // \u7ef4\u62a4\u4e00\u4e2a\u5927\u6839\u5806\n\nsigned main() {\n    scanf(\"%lld\", &amp;n);\n    int rest = 0;\n    for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;a[i]);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;b[i]);\n    for (int i = 1; i &lt;= n; i++) {\n        rest += a[i];\n        if (b[i] &lt;= rest) {\n            ans++;\n            q.push(make_pair(b[i], i));\n            rest -= b[i]; \n            vis[i] = 1;\n        } else if (!q.empty() &amp;&amp; b[i] &lt; q.top().first) {\n            int j = q.top().second;\n            q.pop(); \n            rest += b[j];\n            rest -= b[i];\n            vis[j] = 0, vis[i] = 1; \n            q.push(make_pair(b[i], i));\n        }\n    }\n    printf(\"%lld\\n\", ans);\n    for (int i = 1; i &lt;= n; i++)\n        if (vis[i]) printf(\"%d \", i);\n    return 0;\n}\n</code></pre> USACO 2016 OPEN Landscaping P <p>\u6709 \\(n\\) \u500b\u82b1\u58c7\uff0c\u7b2c \\(i\\) \u500b\u82b1\u58c7\u76ee\u524d\u6709 \\(a_i\\) \u55ae\u4f4d\u7684\u6ce5\u571f\uff0c\u9700\u8981 \\(b_i\\) \u55ae\u4f4d\u7684\u6ce5\u571f\u3002\u53ef\u4ee5\u505a\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u554f\u6700\u5c0f\u82b1\u8cbb\u662f\u591a\u5c11\uff1a</p> <ul> <li> <p>\u5c07\u6307\u5b9a\u7684\u82b1\u58c7\u7684\u6ce5\u571f\u52a0\u4e00\u55ae\u4f4d\uff0c\u82b1\u8cbb \\(x\\) </p> </li> <li> <p>\u5c07\u6307\u5b9a\u7684\u82b1\u58c7\u7684\u6ce5\u571f\u79fb\u8d70\u4e00\u55ae\u4f4d\uff0c\u82b1\u8cbb \\(y\\) </p> </li> <li> <p>\u5f9e\u7b2c \\(i\\) \u500b\u82b1\u58c7\u904b\u4e00\u55ae\u4f4d\u7684\u6ce5\u571f\u5230\u7b2c \\(j\\) \u500b\u82b1\u58c7\uff0c\u82b1\u8cbb \\(z|i-j|\\)</p> </li> </ul> <p>\\(n\\le 10^5, 0\\le a_i, b_i\\le 10, 0\\le x,y\\le 10^8, 0\\le z\\le 1000\\)</p> \u601d\u8def <p>\u7531\u65bc\u589e\u52a0\u3001\u522a\u9664\u548c\u79fb\u52d5\u6ce5\u571f\u7684\u64cd\u4f5c\u90fd\u662f\u57fa\u65bc\u55ae\u500b\u55ae\u4f4d\u7684\u6ce5\u571f\u9032\u884c\u7684\uff0c\u800c\u4e14\u6ce5\u571f\u7bc4\u570d \\(1 \\leq a_i, b_i \\leq 10\\) \u975e\u5e38\u5c0f\uff0c\u6211\u5011\u7c21\u5316\u554f\u984c\uff0c\u55ae\u7368\u8003\u616e\u6bcf\u4e00\u500b\u6ce5\u571f\u55ae\u4f4d\uff1a</p> <p>\u5c0d\u65bc\u6bcf\u55ae\u4f4d\u6ce5\u571f\u5728\u7b2c \\(i\\) \u500b\u4f4d\u7f6e\u4e0a\uff0c\u8a2d\u8655\u7406\u8a72\u55ae\u4f4d\u6ce5\u571f\u7684\u82b1\u8cbb\u70ba \\(v_i\\) \u8cbb\u7528\uff0c\u7b54\u6848\u5c31\u662f \\(\\sum v_i\\)\u3002\u5c0d\u65bc\u7b2c \\(i\\) \u500b\u82b1\u58c7\uff0c\u5982\u679c\u5b83\u73fe\u5728\u7f3a\u571f\uff08\\(a_i &lt; b_i\\)\uff09\uff0c\u5247\u53ef\u4ee5\u76f4\u63a5\u8cfc\u9032\u4e00\u500b\u55ae\u4f4d\u7684\u6ce5\u571f\uff0c\u82b1\u8cbb\u70ba \\(x\\)\uff0c\u6216\u662f\u82e5\u7b2c \\(j &lt; i\\) \u500b\u82b1\u58c7\u591a\u4e86\u571f\uff0c\u53ef\u4ee5\u5f9e\u5b83\u90a3\u88e1\u62ff\u4e00\u4efd\u904e\u4f86\uff0c\u82b1\u8cbb\u70ba \\(v_i=z|i - j| - v_j\\)\uff0c\u5176\u4e2d \\(v_j\\) \u662f\u82b1\u58c7 \\(j\\) \u90a3\u4efd\u571f\u7684\u82b1\u8cbb\uff0c\u9700\u8981\u6e1b\u6389\u907f\u514d\u7b97\u591a\uff08\u53cd\u6094\uff09\uff1b\u6700\u7d42\u82b1\u8cbb\u70ba \\(v_i=\\min\\{ x, z\\left| i - j \\right| - v_j \\}\\)\uff1b</p> <p>\u540c\u7406\uff0c\u82e5\u7b2c \\(i\\) \u500b\u82b1\u58c7\u73fe\u5728\u591a\u571f\uff08\\(a_i &gt; b_i\\)\uff09\uff0c\u5247\u53ef\u4ee5\u76f4\u63a5\u522a\u9664\u4e00\u500b\u55ae\u4f4d\u7684\u6ce5\u571f\uff0c\u82b1\u8cbb\u70ba \\(y\\)\uff0c\u6216\u662f\u82e5\u7b2c \\(j &lt; i\\) \u500b\u82b1\u58c7\u7f3a\u4e86\u571f\uff0c\u53ef\u4ee5\u79fb\u4e00\u4efd\u7d66\u5b83\uff0c\u82b1\u8cbb\u70ba \\(v_i=z \\left| i - j \\right| - v_j\\)\uff1b\u6700\u7d42\u82b1\u8cbb\u70ba \\(v_i=\\min\\{ y, z\\left| i - j \\right| - v_j\\}\\)\u3002</p> <p>\u6211\u5011\u8003\u616e\u5316\u7c21\u79fb\u571f\u82b1\u8cbb\uff1a</p> \\[\\begin{align*} v_i &amp; = z \\left| i - j \\right| - v_j \\space (i &gt; j) \\\\ &amp; = zi - zj - v_j \\\\ &amp; = zi + (-zj - v_j) \\end{align*}\\] <p>\u6ce8\u610f\u5230 \\((-zj - v_j)\\) \u662f\u53ea\u95dc\u65bc\u4e4b\u524d\u4f4d\u7f6e\u6ce5\u571f\u7684\u4fe1\u606f\uff0c\u4e14 \\((-zj - v_j)\\) \u8d8a\u5c0f\uff0c\u7e3d\u82b1\u8cbb\u8d8a\u5c0f\uff1b\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7d66\u591a\u7684\u6ce5\u571f\u548c\u5c11\u7684\u6ce5\u571f\u5206\u5225\u958b\u4e00\u500b\u5927\u6839\u5806\u8a18\u9304\u9019\u500b\u4fe1\u606f\uff0c\u6bcf\u6b21\u904d\u6b77\u5230\u65b0\u6ce5\u571f\u6642\u6bd4\u8f03\u662f\u76f4\u63a5\u8cfc\u9032\u3001\u522a\u9664\u9084\u662f\u548c\u4e4b\u524d\u7684\u6ce5\u571f\u79fb\u52d5\u4fbf\u5b9c\uff0c\u672c\u8cea\u4e0a\u5c31\u662f\u53cd\u6094\u8caa\u5fc3\uff0c\u6642\u9593\u8907\u96dc\u5ea6 \\(O(n \\log n)\\)\u3002\u5177\u9ad4 heap \u5167\u8981\u63d2\u5165\u4ec0\u9ebc\uff0c\u5047\u8a2d\u73fe\u5728\u5df2\u7d93\u8655\u7406\u5b8c \\(i\\)\uff0c\u6211\u5011\u5c31\u628a \\((-iz-v_i)\\) \u5b58\u9032\u5806\u88e1\uff0c\u4f9b\u5f8c\u9762\u7684\u7b54\u6848\u66f4\u65b0\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int N = 1e5 + 5;\nint v[N], a[N], b[N];\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq1, pq2;\n\nsigned main() {\n    int n, x, y, z;\n    cin &gt;&gt; n &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i] &gt;&gt; b[i];\n        for (int j = 1; j &lt;= a[i] - b[i]; j++) {\n            v[i] = y;\n            if (!pq1.empty()) {\n                v[i] = min(v[i], i * z + pq1.top());\n                pq1.pop();\n            }\n            pq2.push(-v[i] - i * z);\n            ans += v[i];\n        }\n        for (int j = 1; j &lt;= b[i] - a[i]; j++) {\n            v[i] = x;\n            if (!pq2.empty()) {\n                v[i] = min(v[i], i * z + pq2.top());\n                pq2.pop();\n            }\n            pq1.push(-v[i] - i * z);\n            ans += v[i];\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u8001\u9f20\u8fdb\u6d1e 2022 \u5168\u570b\u8cfd pB. . \u81ea\u884c\u8eca\u6b78\u4f4d (bicycle) / UOJ #455. \u3010UER #8\u3011\u96ea\u707e\u4e0e\u5916\u5356 <p>\u6709 \\(n\\) \u96bb\u8001\u9f20\uff0c\u5ea7\u6a19\u5206\u5225\u70ba \\(x_i\\)\uff0c\u6709 \\(m\\) \u500b\u6d1e\uff0c\u6709\u5ea7\u6a19 \\(y_i\\)\uff0c\u4ee3\u50f9 \\(w_i\\)\uff0c\u5bb9\u91cf \\(c_i\\)\u3002\u8001\u9f20 \\(i\\) \u9032\u6d1e \\(j\\) \u7684\u4ee3\u50f9\u70ba \\(|x_i-y_i|+w_i\\)\u3002\u6bcf\u96bb\u8001\u9f20\u5fc5\u9808\u9032\u6d1e\u3002</p> <p>\\(2\\le n,m\\le 10^5, 0\\le x_i,y_i,c_i,w_i\\le 10^9\\)</p> \u601d\u8def <ul> <li> <p>\u7d50\u8ad6\u4e00\uff1a\u914d\u5c0d\u4e0d\u6703\u4ea4\u53c9\u3002</p> </li> <li> <p>\u7d50\u8ad6\u4e8c\uff1a\u5c0d\u65bc\u4e00\u7d44\u5339\u914d\uff0c\u8001\u9f20\u548c\u6d1e\u4e0d\u6703\u540c\u6642\u53cd\u6094\u3002 (\u7531\u5de6\u5f80\u53f3\u9032\u884c\u5339\u914d\uff0c\u540c\u6642\u53cd\u6094\u6703\u7522\u751f\u4ea4\u53c9)</p> </li> </ul> <p> </p> <p>\u3010\u52a0\u5165\u8001\u9f20\uff0c\u5ea7\u6a19 x\u3011</p> <p>\u5728Q1\u4e2d\u53d6\u51fa\u4ee3\u50f9\u6700\u5c11\u7684\uff0c\u8a2d\u4ee3\u50f9\u70ba \\(v\\)\uff0c\u7b54\u6848\u70ba \\(w=x+v\\)\uff08\u9019\u88e1\u7684 \\(v\\) \u986f\u7136\u662f\u8ca0\u6578\uff09</p> <p>\u8001\u9f20\u53cd\u6094\uff0c\u914d\u5c0d\u66f4\u5f8c\u9762\u7684\u6d1e\uff1a\u5728Q0\u4e2d\u52a0\u5165 \\(-w+v\\)\u3002</p> <p>\u4f46\u662f\u6b64\u6642\u6d1e\u4e0d\u80fd\u53cd\u6094\u56e0\u70ba\u4e0d\u7136\u7684\u8a71\u7576\u524d\u9019\u500b\u8001\u9f20\u5c31\u7121\u6cd5\u5339\u914d\u4e86\u3002</p> <p>\u3010\u52a0\u5165\u6d1e\uff0c\u5ea7\u6a19 x\uff0c\u4ee3\u50f9 cost\uff0c\u5bb9\u91cf c\u3011</p> <p>\u5728\u5bb9\u91cf\u88ab\u8017\u76e1\u6216\u8001\u9f20\u7684\u4ee3\u50f9\u4e0d\u662f\u8ca0\u6578\u6642\uff08\u9019\u6a23\u7684\u8a71\u5fc5\u7136\u662f\u4e0d\u512a\uff09\uff0c\u91cd\u8907\u5f9e Q0 \u4e2d\u53d6\u51fa\u4ee3\u50f9\u6700\u5c11\u7684\u8001\u9f20\uff0c\u8a2d\u9019\u500b\u4ee3\u50f9\u70ba \\(v\\)\u3002 \u7b54\u6848\u52a0\u4e0a \\(w=v+x+cost\\)\u3002</p> <ul> <li> <p>\u8001\u9f20\u53cd\u6094\uff0c\u914d\u5c0d\u66f4\u5f8c\u9762\u7684\u6d1e: \u5728 Q0 \u4e2d\u52a0\u5165 \\(-w+v\\) \u7684\u8001\u9f20</p> </li> <li> <p>\u6d1e\u53cd\u6094\uff0c\u914d\u5c0d\u5f8c\u7684\u8001\u9f20: \u5728Q1 \u4e2d\u52a0\u5165 \\(-w-x+v\\) \u7684\u6d1e</p> </li> </ul> <p>\u53ef\u4ee5\u6d1e\u53cd\u6094? \u9019\u662f\u56e0\u70ba\u5982\u679c\u9019\u500b\u6642\u5019\u6d1e\u53cd\u6094\u4e86\u62cb\u68c4\u4e86\u9019\u500b\u8001\u9f20\u76f8\u7576\u65bc\u8001\u9f20\u4fdd\u6301\u4e86\u539f\u4f86\u7684\u5339\u914d\uff0c\u4f9d\u820a\u80fd\u8b93\u6bcf\u500b\u8001\u9f20\u90fd\u9032\u6d1e</p> <p>\u5be6\u969b\u4e0a\u5169\u7a2e\u64cd\u4f5c\u5728\u5f8c\u9762\u4e0d\u53ef\u80fd\u90fd\u767c\u751f\uff0c\u5426\u5247\u5339\u914d\u76f8\u4ea4\u3002\u6ce8\u610f\u5230 Q0 \u8001\u9f20\u9032\u5806\u7684\u8907\u96dc\u5ea6\u6c92\u6709\u4fdd\u969c\uff0c\u6211\u5011\u767c\u73fe\u8001\u9f20\u53cd\u6094\u7684\u4ee3\u50f9\u90fd\u662f \\(-w+v=-x-cost\\)\u3002\u4e5f\u5c31\u662f\u8aaa\u6bcf\u6b21\u4e00\u500b\u6d1e\u90fd\u5339\u914d\u4e86\u82e5\u5e72\u4e0d\u540c\u7684\u8001\u9f20\u5f8c\uff0c\u5f80\u8001\u9f20\u5806\u88e1\u9762\u4e1f\u7684\u6771\u897f\u90fd\u662f\u7b49\u6b0a\u7684\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u4e1f\u4e00\u6b21\u5c31\u884c\u4e86 </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define N 100005\n#define ll long long\n#define INF 2000000000\nint n, m;\nll X[N];\nll Y[N], W[N], C[N];\nll ans;\n\nstruct info {\n    ll v, cnt;\n};  \n\nbool operator&lt;(info a, info b) {\n    return b.v &lt; a.v;\n}\n\npriority_queue&lt;info&gt; q0, q1;  \nvoid ins0(ll x) {\n    info t = q1.top();  \n    q1.pop();\n    ans += x + t.v;\n    if (--t.cnt)  \n        q1.push(t);\n    q0.push((info){-(x + t.v) - x, 1});\n}\n\nvoid ins1(ll x, ll cost, ll c) {\n    ll s = 0;\n    while (c &amp;&amp; !q0.empty()) {\n        info t = q0.top();\n        if (cost + x + t.v &gt;= 0) \n            break;\n        q0.pop();\n        ll mn = min(t.cnt, c);\n        ans += (cost + x + t.v) * mn;\n        q1.push((info){-(cost + x + t.v) - x + cost, mn});\n        s += mn;\n        t.cnt -= mn;\n        c -= mn;\n        if (t.cnt)\n            q0.push(t);\n    }\n    if (c) q1.push((info){-x + cost, c});  \n    if (s) q0.push((info){-cost - x, s}); \n}\n\nint main() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; ++i) scanf(\"%lld\", &amp;X[i]);\n    ll sum = 0;\n    for (int i = 1; i &lt;= m; ++i) scanf(\"%lld%lld%lld\", &amp;Y[i], &amp;W[i], &amp;C[i]), sum += C[i];\n    if (sum &lt; n) {\n        printf(\"-1\\n\");\n        return 0;\n    }\n    q1.push((info){INF, INF});\n    int i = 1, j = 1;\n    while (i &lt;= n || j &lt;= m)  // \u4fdd\u8bc1\u8001\u9f20\u548c\u7a9d\u7684\u76f8\u5bf9\u4f4d\u7f6e\n        if (i &lt;= n &amp;&amp; (j &gt; m || X[i] &lt; Y[j]))\n            ins0(X[i]), i++;\n        else\n            ins1(Y[j], W[j], C[j]), j++;\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n</code></pre> reference <ul> <li> <p>https://blog.csdn.net/df4516/article/details/102160636</p> </li> <li> <p>https://liuyixiang.com/post/55112.html</p> </li> <li> <p>https://blog.csdn.net/Dream_Lolita/article/details/85554471</p> </li> <li> <p>https://www.cnblogs.com/jz-597/p/14326929.html</p> </li> <li> <p>https://www.cnblogs.com/zychh/p/16907855.html</p> </li> </ul>"},{"location":"basic/greedy/interval/","title":"\u5340\u9593\u554f\u984c","text":""},{"location":"basic/greedy/interval/#_1","title":"\u6280\u5de7","text":""},{"location":"basic/greedy/interval/#_2","title":"\u6383\u63cf\u7dda\u89d2\u5ea6\u601d\u8003","text":"\u6700\u5927\u4ea4\u96c6\u6578\u91cf <p>\u7d66 \\(n\\) \u500b interval\uff0c\u5169\u5169\u9593\u82e5\u6709 overlap \u5247\u5efa\u908a\uff0c\u554f max clique<sup>1</sup> \u5927\u5c0f</p> hint <p>\u627e\u6700\u5927 interval \u4ea4\u96c6\u7684\u6578\u91cf\uff0c\u4e5f\u5c31\u662f band width</p> \u601d\u8def <ul> <li>\u60f3\u6210\u6383\u63cf\u7dda\u5f9e\u5de6\u6383\u5230\u53f3<ul> <li>\u9047\u5230 \\(l_i\\) \u5c31 +1</li> <li>\u9047\u5230 \\(r_i\\) \u5c31 -1</li> </ul> </li> </ul> <p> </p>"},{"location":"basic/greedy/interval/#overlap","title":"\u522a\u9664 overlap","text":"\u522a\u9664 overlap <p>Q1: \u7d66 n \u500b interval\uff0c\u82e5 A \u2286 B<sup>2</sup> \u5247\u522a\u6389 B</p> <p>Q2: \u7d66 n \u500b interval\uff0c\u82e5 A \u2286 B \u5247\u522a\u6389 A</p> Q1 \u601d\u8def <ul> <li> <p>\u6309\u7167 \\(r_i\\) \u6392\u5e8f</p> </li> <li> <p>\u6bcf\u6b21\u8ddf\u5408\u6cd5\u7684\u6700\u5f8c\u4e00\u500b (back) \u6bd4\u8f03\uff0c\u82e5 \\(l_j \\le l_i, i&lt;j\\) \u5247 \\(j\\) \u4e0d\u5408\u6cd5</p> </li> </ul> <p> </p> code <pre><code>vector&lt;pii&gt; solve () {\n    int n = a.size ();\n    auto cmp = [&amp;] (pii f, pii s) {\n        if (f.r == s.r) return f.l &gt; s.l;\n        return f.r &lt; s.r;\n    };\n    sort (ALL (a), cmp);\n    vector&lt;pii&gt; b;\n\n    b.pb (a[0]);\n    for (int i = 1; i &lt; n; i++) {\n        if (b.back ().l &lt; a[i].l) b.pb (a[i]); \n    }\n\n    return b;\n}\n</code></pre> Q2 \u601d\u8def <ul> <li> <p>\u540c\u7406\uff0c\u6309\u7167 \\(r_i\\) \u6392\u5e8f</p> </li> <li> <p>\u5f9e\u5f8c\u5f80\u524d\u6383\uff0c\u6bcf\u6b21\u8ddf\u5408\u6cd5\u7684\u6700\u524d\u9762\u90a3\u500b (front) \u6bd4\u8f03\uff0c\u82e5 \\(l_j \\le l_i, i&lt;j\\) \u5247 \\(i\\) \u4e0d\u5408\u6cd5</p> </li> </ul> <p> </p> code <pre><code>vector&lt;pii&gt; solve () {\n    int n = a.size ();\n    auto cmp = [&amp;] (pii f, pii s) {\n        if (f.r == s.r) return f.l &lt; s.l;\n        return f.r &lt; s.r;\n    };\n    sort (ALL (a), cmp);\n    vector&lt;pii&gt; b;\n\n    b.pb (a[n - 1]);\n    for (int i = n - 2; i &gt;= 0; i--) {\n        if (b.back ().l &gt; a[i].l) b.pb (a[i]); \n    }\n    reverse (ALL (b));\n\n    return b;\n}\n</code></pre>"},{"location":"basic/greedy/interval/#_3","title":"\u4f8b\u984c","text":""},{"location":"basic/greedy/interval/#_4","title":"\u5340\u9593\u9078\u9ede","text":"\u5340\u9593\u9078\u9ede <p>\u7d66 \\(n\\) \u500b \\([l_i,r_i]\\) \u554f\u81f3\u5c11\u9078\u5e7e\u500b point \u4f7f\u5f97\u6bcf\u500b \\([l_i, r_i]\\) \u90fd\u6709\u88ab\u8986\u84cb\u5230</p> <p>\\(n \\le 2\u00d710^5, l &lt; r \\le 10^9\\)</p> \u601d\u8def1 <ul> <li> <p>\u6211\u5011\u89c0\u5bdf\u5230\u7b2c\u4e00\u500b\u8981\u9078\u7684 point \u4e00\u5b9a\u8981\u81f3\u5c11\u5728\u4e00\u500b \\(r_i\\) \u4e4b\u524d</p> <ul> <li>\u90a3\u6700\u524d\u9762\u7684 \\(r_i\\) \u80af\u5b9a\u662f\u6700\u5c0f\u7684 \\(r_i\\)</li> <li>\u90a3\u5728\u9019\u500b \\([l_i, r_i]\\) \u4e0a\uff0c\u6211\u61c9\u8a72\u8981\u9078\u54ea\u500b point \u5462?</li> <li>\u5927\u5bb6\u7684\u53f3\u754c\u90fd\u5728\u6211\u7684\u53f3\u908a\uff0c\u5982\u679c\u6211\u8ddf\u67d0\u500b\u5340\u6bb5\u6c92\u6709 overlap \u90a3\u600e\u9ebc\u9078\u90fd\u4e0d\u53ef\u80fd\u8986\u84cb\u5230\uff0c\u82e5\u6709 overlap \u7684\u8a71\u9078 \\(r_i\\) \u6700\u80fd benefit\uff0c\u6240\u4ee5\u9078\u6700\u53f3\u908a (\\(r_i\\)) \u6700\u597d</li> </ul> </li> <li> <p>\u63a5\u8457\u6211\u5011\u628a overlap \u7684 interval \u522a\u6389 </p> </li> <li> <p>\u63a5\u4e0b\u4f86\u6211\u5011\u4e00\u6a23\u8981\u9078\u81f3\u5c11\u5728\u4e00\u500b \\(r_i\\) \u4e4b\u524d\u7684 point</p> <ul> <li>\u5047\u8a2d\u6211\u5011\u7b2c\u4e00\u6b21\u9078\u4e86\u7b2c \\(i\\) \u500b\u5340\u6bb5\u7684 \\(r_i\\) \u518d\u4f86\u518d\u9078\u7b2c \\(j\\) \u500b\u5340\u6bb5\u7684 \\(r_j\\)</li> <li>\u90a3 \\(j\\) \u9019\u500b\u5340\u6bb5<ul> <li>\u4e00\u5b9a\u6c92\u6709\u8ddf\u5148\u524d\u7684 \\(r_i\\) overlap</li> <li>\u662f\u76ee\u524d\u53f3\u754c\u6700\u5c0f\u7684</li> <li>\u4e5f\u5c31\u662f\u6309\u7167\u53f3\u754c\u6392\u5e8f\uff0c\u7b2c\u4e00\u500b\u6c92\u6709 \\([l_i, r_i]\\) overlap \u7684</li> </ul> </li> </ul> </li> <li> <p>\u518d\u4f86\u5c31\u662f\u5b50\u554f\u984c</p> </li> </ul> \u601d\u8def2 <ul> <li> <p>\u5148\u522a\u9664\u4e00\u5b9a\u4e0d\u91cd\u8981\u7684</p> </li> <li> <p>\u518d\u4f86 sort \u5de6\u754c\u6216\u53f3\u754c\u90fd\u53ef\u4ee5</p> </li> <li> <p>\u518d\u4f86\u984c\u76ee\u5c31\u6eff\u8db3 \\(l_i&lt;l_{i+1},r_i&lt;r_{i+1}\\)</p> </li> <li> <p>\u518d\u4f86\u5c31\u8ddf\u601d\u8def1\u4e00\u6a23 greedy \u7684\u6311\u5c31\u597d</p> </li> </ul> code <pre><code>int solve() {\n    sort(ALL(a), [](node x, node y) { return x.r &lt; y.r; });\n    int last = 0, ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (a[i].l &gt; last) {  // \u6c92\u6709 overlap\n            ans++, last = a[i].r;\n        }\n    }\n\n    return ans;\n}\n</code></pre> \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd 2019 pC <p>\u898b\u6b64\u8655</p> TIOJ 1408. \u6211\u5f88\u5fd9 <p>\u7d66 \\(n\\) \u500b interval\uff0c\u6709 weight \\(w_i\\)\uff0c\u554f\u81f3\u5c11\u9078\u5e7e\u500b point \u4f7f\u5f97\u6bcf\u500b interval \u4e2d\u81f3\u5c11\u6709 \\(k\\) \u500b\u9ede\u88ab\u9078\u5230</p> <p>\\(n \\le 10^5, 0\\le l,r,w\\le 10^5\\)</p> \u601d\u8def <p>\u5148\u5c07 interval \u7528 \\(r_i\\) \u5c0f\u5230\u5927 sort\uff0c\u7dda\u6bb5\u6a39 0/1 \u7dad\u8b77\u6709\u9078\u7684\u9ede\uff0c\u9019\u6a23\u6211\u5011\u5f9e\u524d\u5f80\u5f8c\u770b\u6642\uff0c\u82e5\u9019\u500b interval \u4e2d\u9593\u6709\u9078\u7684\u9ede\u9084\u6c92\u6709 \\(k\\) \u500b\u7684\u8a71\u5c31\u4e8c\u5206\u641c\u7576\u524d\u7684 interval \u7684\u6700\u77ed\u7684 suffix \u6eff\u8db3\u662f 0 \u7684\u500b\u6578 &gt;= k - interval \u5167\u662f 1 \u7684\u500b\u6578\uff0c\u7136\u5f8c\u5c07\u9019\u500b suffix \u4e0a\u7684\u6578\u5b57\u901a\u901a\u6539\u6210 1\uff0c\u7136\u5f8c\u4e00\u76f4\u505a\u4e0b\u53bb\u5c31\u53ef\u4ee5\u4e86\uff0c\u8907\u96dc\u5ea6 \\(O(n \\log^2 n)\\)\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int INF = 2e18;\nconst int MAXN = 1e5 + 5;\n\nstruct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r;\n    int chg, sum;\n\n    Node() {\n\n    }\n    Node(int l, int r) : l(l), r(r) {\n        chg = INF;\n        sum = 0;\n    }\n    void pull() {\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n    void push() {\n        if (chg != INF) {\n            lc-&gt;chg = chg;\n            lc-&gt;sum = (lc-&gt;r - lc-&gt;l + 1) * chg;\n            rc-&gt;chg = chg;\n            rc-&gt;sum = (rc-&gt;r - rc-&gt;l + 1) * chg;\n            chg = INF;\n        }\n    }\n};\n\nNode pool[50000000 / sizeof(Node)];\nint pool_cnt = 0;\n\nNode* build(int l, int r) {\n    Node* root = new (&amp;pool[pool_cnt++]) Node(l, r);\n    if (l == r) {\n        return root;\n    }\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    return root;\n}\n\nvoid update(Node* root, int ml, int mr, int val) {\n    if (mr &lt; root-&gt;l || root-&gt;r &lt; ml) {\n        return;\n    }\n    if (ml &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= mr) {\n        root-&gt;chg = val;\n        root-&gt;sum = (root-&gt;r - root-&gt;l + 1) * val;\n        return;\n    }\n    root-&gt;push();\n    update(root-&gt;lc, ml, mr, val);\n    update(root-&gt;rc, ml, mr, val);\n    root-&gt;pull();\n}\n\nint query(Node* root, int ql, int qr) {\n    if (qr &lt; root-&gt;l || root-&gt;r &lt; ql) {\n        return 0;\n    }\n    if (ql &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qr) {\n        return root-&gt;sum;\n    }\n    root-&gt;push();\n    return query(root-&gt;lc, ql, qr) + query(root-&gt;rc, ql, qr);\n}\n\nstruct Intervals {\n    int l, r, k;\n    bool operator&lt;(const Intervals &amp;rhs) const {\n        return r &lt; rhs.r;\n    }\n};\n\nint n;\n\nvoid solve() {\n    vector&lt;Intervals&gt; v;\n    for (int i = 0; i &lt; n; i++) {\n        int l, r, k;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n        r--;\n        v.push_back({l, r, k});\n    }\n    sort(v.begin(), v.end());\n    Node* root = build(0, MAXN - 1);\n    for (int i = 0; i &lt; n; i++) {\n        int ret = query(root, v[i].l, v[i].r);\n        if (ret &gt;= v[i].k) {\n            continue;\n        } \n        int l = v[i].l, r = v[i].r;\n        while (l != r) {\n            int mid = (l + r) / 2;\n            int cnt = (v[i].r - mid + 1) - query(root, mid, v[i].r);\n            if (cnt &gt; v[i].k - ret) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        update(root, l, v[i].r, 1);\n    }\n    cout &lt;&lt; query(root, 0, MAXN - 1) &lt;&lt; '\\n';\n}\n\nsigned main() {\n    while (cin &gt;&gt; n) {\n        if (n == 0) break;\n        pool_cnt = 0;\n        solve();\n    }\n}  \n</code></pre>"},{"location":"basic/greedy/interval/#_5","title":"\u5340\u9593\u8986\u84cb","text":"\u5340\u9593\u8986\u84cb <p>\u7d66 \\(n\\) \u500b \\([l_i,r_i]\\) \u554f\u81f3\u5c11\u9078\u5e7e\u500b \\([l_i, r_i]\\) \u4f7f\u5f97\u6bcf\u500b point \u90fd\u6709\u88ab\u8986\u84cb\u5230\uff0c\u82e5\u4e0d\u884c\u8f38\u51fa \\(-1\\)</p> <p>\\(n \\le 2\u00d710^5, l &lt; r \\le 10^9\\)</p> \u601d\u8def <ul> <li> <p>\u5148\u522a\u6389\u4e0d\u91cd\u8981\u7684</p> </li> <li> <p>\u7b2c\u4e00\u500b\u4e00\u5b9a\u8981\u6311</p> </li> <li> <p>\u518d\u4f86\u7e7c\u7e8c\u5f9e\u5de6\u5f80\u53f3\u770b\u8ddf\u7b2c\u4e00\u500b\u6709\u4ea4\u96c6\u7684\uff0c\u9078\u53f3\u754c\u6700\u5927\u7684</p> </li> <li> <p>\u76f4\u5230\u8dd1\u5230\u5de6\u754c\u8ddf\u7b2c\u4e00\u500b\u6c92\u4ea4\u96c6\uff0c\u628a\u9078\u5230\u53f3\u754c\u6700\u5927\u7684\u7576\u6210\u7b2c\u4e00\u500b\uff0c\u5b50\u554f\u984c</p> </li> <li> <p>IMPOSSIBLE \u7684\u8a71\u5c31\u662f\u8ddf\u7b2c\u4e00\u500b\u6c92\u4ea4\u96c6\u4e14\u8ddf\u76ee\u524d\u53f3\u754c\u6700\u5927\u7684\u4e5f\u6c92\u4ea4\u96c6</p> </li> </ul> <p> </p> <p>\u6216\u662f\u5148\u8003\u616e\u7b2c\u4e00\u500b\u8981\u6311\u4ec0\u9ebc\uff0c\u6211\u5011\u4e00\u5b9a\u662f\u6311\u9078 \\(l_i\\) \u6700\u5c0f\uff0c\u82e5\u9084\u662f\u6709\u5f88\u591a\u5247\u6311\u9078 \\(r_i\\) \u6700\u5927\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u524d\u9762\u522a\u9664 overlap \u6539\u6210\u7528\u9019\u7a2e\u65b9\u6cd5 sort\u3002 </p> code <pre><code>void solve() {\n    vector&lt;pii&gt; a = del();  // \u522a\u9664\u4e0d\u91cd\u8981\u7684\n    int n = a.size();\n    int ans = 1, fg = 0, R = a[0].r, newR = a[0].r;\n\n    auto overlap = [&amp;](int r, pii it) {\n        if (it.l &gt; r + 1) return false;\n        return true;\n    };\n\n    for (int i = 1; i &lt; n; i++) {\n        if (overlap(R, a[i]) == 0) {\n            if (overlap(newR, a[i]) == 0) {\n                cout &lt;&lt; \"-1\\n\", exit(0);\n            }\n            R = newR;\n            fg = 0;\n        }\n        if (fg == 0 &amp;&amp; a[i].r &gt; R) {\n            ans++;\n            fg = 1;\n        }\n        newR = max(a[i].r, newR);\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> <p>full code : http://codepad.org/BnyJUIwV</p>"},{"location":"basic/greedy/interval/#_6","title":"\u5340\u9593\u5206\u7d44","text":"\u5340\u9593\u5206\u7d44 <p>\u7d66\u5b9a \\(n\\) \u500b interval\uff0c\u5206\u7d44\u4f7f\u5f97\u6bcf\u7d44\u5167\u90e8\u5169\u5169\u4e4b\u9593\u6c92\u6709\u4ea4\u96c6\uff0c\u4e26\u4f7f\u5f97\u7d44\u6578\u76e1\u53ef\u80fd\u5c0f\u3002</p> <p>\\(n\\le 2\\times 10^5, l_i&lt;r_i\\le 10^9\\)</p> \u5be6\u969b\u61c9\u7528 <p>\u516c\u53f8\u4eca\u5929\u6709 20 \u5834\u6703\u8b70\uff0c\u554f\u6700\u5c11\u7528\u5e7e\u500b\u6703\u8b70\u5ba4\u53ef\u4ee5\u5b89\u6392\u4e0b</p> \u601d\u8def1 <ol> <li> <p>\u5c07\u6240\u6709\u5340\u9593\u6309\u7167\u5de6\u7aef\u9ede\u5f9e\u5c0f\u5230\u5927\u6392\u5e8f</p> </li> <li> <p>\u5f9e\u524d\u5f80\u5f8c\u8655\u7406\u6bcf\u500b\u5340\u9593\uff0c\u5224\u65b7\u80fd\u5426\u5c07\u5176\u653e\u5230\u67d0\u500b\u73fe\u6709\u7684\u7d44\u4e2d\uff08\u5c0f\u9802\u5806\u7dad\u8b77\u53f3\u7aef\u9ede\uff08\u6700\u65e9\u7d50\u675f\u7684\u5340\u9593\uff09\uff09</p> </li> </ol> \u601d\u8def2 <p>\u5c0d\u65bc\u6709\u91cd\u758a\u7684\u90e8\u5206\uff0c\u6211\u5011\u80af\u5b9a\u8981\u5c07\u4ed6\u5011\u5206\u6210\u4e0d\u540c\u7684\u7d44\uff0c\u56e0\u6b64\u6211\u5011\u53ea\u8981\u627e\u6700\u5927\u7684\u91cd\u758a\u5340\u9593\u6578\u5373\u53ef</p>"},{"location":"basic/greedy/interval/#_7","title":"\u5340\u9593\u6700\u5927\u7368\u7acb\u96c6","text":"max independent set on interval graph / activity selection problem <p>\u7d66 \\(n\\) \u500b intervals\uff0c\u9078\u4e00\u4e9b intervals\uff0c\u5169\u5169\u4e0d overlap\uff0c\u6c42\u6700\u5927\u5316\u9078\u7684\u6578\u91cf</p> \u601d\u8def <ul> <li> <p>\u522a\u9664\u4e0d\u91cd\u8981\u7684</p> </li> <li> <p>\u7b2c\u4e00\u500b\u4e00\u5b9a\u8981\u9078\uff0c\u56e0\u70ba\u4ed6\u7684\u53f3\u754c\u662f\u6240\u6709\u53f3\u754c\u88e1\u9762\u6700\u5c0f\u7684</p> </li> <li> <p>\u522a\u9664\u8ddf\u7b2c\u4e00\u500b overlap \u7684</p> </li> <li> <p>\u518d\u6311\u522a\u5b8c\u5f8c\u7684\u7b2c\u4e00\u500b (\u5b50\u554f\u984c)</p> </li> </ul> <p>\u53ef\u8b49\u660e\u6309\u7167 \\(r_i\\) \u5c0f\u5230\u5927\u6392\u5e8f\uff0cgreedy \u7684\u53d6\u662f\u597d\u7684\u3002\u56e0\u70ba\u5c0d\u65bc\u5f8c\u9762\u4f86\u8aaa\u8981\u76e1\u91cf\u6311\u6700\u4e0d\u6703 overlap \u7684\uff0c\u4e5f\u5c31\u662f\u53f3\u754c\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u6211\u5011\u5c07 \\(r_i\\) \u6700\u5c0f\u7684\u53d6\u6389\u4e4b\u5f8c\uff0c\u522a\u9664\u8207\u4ed6 overlap \u7684 intervals\uff0c\u4e5f\u5c31\u8ddf\u6211\u5011 greedy \u5728\u505a\u7684\u4e8b\u60c5\u4e00\u6a23\u4e86</p> <pre><code>sort(ALL(a), [](node x, node y) { return x.r &lt; y.r;  });\nint last = 0, ans = 0;\nfor (int i = 0; i &lt; n; i++) {\n    if (a[i].l &gt; last) {\n        ans++;\n        last = a[i].r;\n    }\n}\n</code></pre> code <pre><code>void solve() {\n    vector&lt;pii&gt; a = del();  // \u522a\u9664\u4e0d\u91cd\u8981\u7684\n    int n = a.size();\n\n    auto overlap = [&amp;](int r, pii it) {\n        if (it.l &lt; r) return true;\n        return false;\n    };\n\n    int R = a[0].r, ans = 1;\n    for (int i = 1; i &lt; n; i++) {\n        if (overlap(R, a[i]) == 0) {\n            ans++;\n            R = a[i].r;\n        }\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> <p>full code : http://codepad.org/Gcm2Azt6</p> \u5ef6\u4f38 (\u52a0\u4e0a\u6b0a\u91cd) : job scheduling problem CF 1841 D. Pairs of Segments <p>\u7d66 n \u500b interval\uff0c\u554f\u6700\u5c11\u522a\u6389\u5e7e\u500b interval \u53ef\u4ee5\u6eff\u8db3</p> <ul> <li> <p>\u6709\u8fa6\u6cd5\u5169\u5169 pair</p> </li> <li> <p>\u4e00\u500b pair \u4e2d\u7684\u5169\u500b interval \u5fc5\u9808 overlap</p> </li> <li> <p>\u4efb\u610f\u4e0d\u540c pair \u4e2d\u7684 interval \u4e0d\u80fd overlap</p> </li> </ul> <p>\\(n\\le 2000\\)</p> \u601d\u8def <p>\u76f4\u63a5\u5c07 interval \u7528 n^2 \u5169\u5169 union\uff0c\u5c31\u8b8a\u6210\u300c\u6700\u5927\u4e0d\u76f8\u4ea4\u533a\u95f4\u6570\u91cf\u300d\u7684\u984c\u76ee\u4e86 </p> <p>\u53e6\u89e3 : dp\uff08\u898b CF comment\uff09</p>"},{"location":"basic/greedy/interval/#_8","title":"\u6700\u5c0f\u522a\u9664","text":"\u4f8b\u984c <p>\u522a\u9664\u6700\u5c11\u500b interval\uff0c\u4f7f\u5f97 max band width \u8b8a\u5c0f</p> \u601d\u8def <ul> <li> <p>\u6211\u5011\u628a\u5b58\u5728 max band width \u7684\u5340\u6bb5\u7d66\u627e\u51fa\u4f86\uff0c\u6211\u53eb\u4ed6 target</p> </li> <li> <p>\u5c07\u8ddf\u9019\u4e9b target \u6c92 overlap \u7684 interval \u7d66\u522a\u6389</p> </li> <li> <p>\u5269\u4e0b sort \\(l_i\\)</p> </li> <li> <p>target \u6703\u6709\u4e00\u500b\u6307\u91dd j \u4ee3\u8868\u76ee\u524d\u5728 target[j]</p> </li> <li> <p>interval \u6703\u6709\u4e00\u500b\u6307\u91dd i \u4ee3\u8868\u76ee\u524d\u5728 interval[i]</p> </li> <li> <p>\u7b2c\u4e00\u6bb5\u8981\u9078\u7684 interval \u9808\u6eff\u8db3</p> <ul> <li>\u6709\u5305\u542b target[1] </li> <li>\u53f3\u754c\u8d8a\u5927\u8d8a\u597d</li> </ul> </li> <li> <p>\u6211\u5011\u627e\u5230\u9019\u500b interval \u5f8c\uff0c\u770b\u4ed6\u7684 \\(r_i\\) \u53ef\u4ee5\u5ef6\u4f38\u5230\u7b2c\u5e7e\u500b target</p> </li> <li> <p>\u5728\u9019\u5e7e\u500b target \u4e2d\uff0c\u6211\u5011\u90fd\u53ef\u4ee5\u53bb\u627e\u6709\u8ddf\u9019\u4e9b target overlap \u7684 interval\uff0c\u5b58\u4ed6\u5011\u4e4b\u4e2d\u7684\u6700\u5927\u53f3\u754c</p> </li> <li> <p>\u7b49\u5230 target[j] \u5df2\u7d93\u7121\u6cd5\u8ddf\u7b2c\u4e00\u500b\u9078\u7684 interval overlap \u5f8c\uff0c\u6211\u5011\u5c31\u628a\u7576\u524d\u627e\u5230\u7684\u6700\u5927\u53f3\u754c\u7576\u6210\u7b2c\u4e00\u500b\u9078\u7684\uff0c\u8b8a\u6210\u5b50\u554f\u984c (\u6709\u9ede\u985e\u4f3c\u4fdd\u6bcd\u554f\u984c\u7684\u7dad\u8b77\u65b9\u5f0f)</p> </li> </ul> <p> </p> <ol> <li> <p>max clique \u6700\u5927\u5b8c\u5168\u5b50\u5716\u00a0\u21a9</p> </li> <li> <p>\\(A \\subseteq B\\)\uff0c\\(A\\) \u662f \\(B\\) \u7684\u5b50\u96c6\u00a0\u21a9</p> </li> </ol>"},{"location":"basic/greedy/max_subarray/","title":"maximum subarray","text":"\u82e5\u4e0d\u80fd\u9078\u5230\u7a7a\u7684\u5b50\u5e8f\u5217 ? <p>\u6709\u4e9b\u984c\u76ee\u53ef\u4ee5\u76f4\u63a5\u5728\u8f49\u79fb\u5f0f\u7dad\u8b77\uff0c\u4f46\u4ee4\u4e00\u500b general \u7684\u4f5c\u6cd5\u662f: \u4e00\u6a23\u5728\u904e\u7a0b\u4e2d\u5c07\u7b54\u6848\u8ddf 0 \u53d6 max\uff0c\u7576\u7b54\u6848\u70ba 0 \u6642\uff0c\u76f4\u63a5\u56de\u50b3\u9663\u5217\u4e2d\u6700\u5927\u7684\u5143\u7d20\uff08\u56e0\u70ba\u6b64\u6642\u9663\u5217\u4e00\u5b9a\u5168\u662f\u8ca0\u7684\uff09</p>"},{"location":"basic/greedy/max_subarray/#_1","title":"\u74b0\u72c0\u6700\u5927\u9023\u7e8c\u5b50\u5e8f\u5217","text":"LeetCode 918. Maximum Sum Circular Subarray <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u74b0\u5f62\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u554f\u6700\u5927\u9023\u7e8c\u5b50\u9663\u5217\uff0c\u4e0d\u80fd\u5230\u9078\u7a7a\u7684</p> <p>\\(n\\le 3\\times 10^4, -3\\times 10^4\\le a_i\\le 3\\times 10^4\\)</p> <p>\u6211\u5011\u5206\u6210\u5169\u7a2e case \u8a0e\u8ad6:</p> <ol> <li>Maximum Subarray \u4e0d\u662f\u74b0\u72c0\u7684</li> <li>Maximum Subarray \u662f\u74b0\u72c0\u7684</li> </ol> <p>Case 1. \u5c31\u662f\u6211\u5011\u4e00\u822c\u9663\u5217\u4e0a\u7684\u554f\u984c\uff0c\u90a3 Case 2. \u7684\u8a71\uff0c\u6211\u5011\u5176\u5be6\u5c31\u662f sum(a[i]) - min subarray sum\uff0c\u6211\u5011\u5c07\u5169\u7a2e\u53d6 max \u5373\u53ef\uff0c\u4e5f\u5c31\u662f ans = max{max_subarray, total_sum - min_subarray}</p> <p></p> \u7c21\u6613\u8b49\u660e \\[\\begin{align} \\max(\\texttt{pre} + \\texttt{suf}) &amp;= \\max(\\texttt{total sum} - \\texttt{subarray}) \\\\ &amp;= \\texttt{total sum} + \\max(-\\texttt{subarray})  \\\\ &amp;= \\texttt{total sum} - \\min(\\texttt{subarray}) \\end{align}\\]"},{"location":"basic/greedy/max_subarray/#_2","title":"\u7df4\u7fd2\u984c","text":"\u5168\u570b\u8cfd\u6a21\u64ec\u8cfd 2022 pB. \u66f4\u52a0 Trivial \u7684\u984c\u76ee (Quadrivial) <p>\u7d66 n \u500b\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u554f\u9019\u4e9b\u9663\u5217\u4ee5\u4efb\u610f\u9806\u5e8f\u7d44\u5408\u8d77\u4f86 Maximum Subarray Sum \u6700\u5927\u662f\u591a\u5c11</p> <p>\\(n\\le 10^5, \\sum |a_i| \\le 10^6, |a_{i, j}| \\le 10^9\\)</p> \u601d\u8def <p>\u5148\u60f3 O(n^2) \u600e\u9ebc\u505a\uff0c\u6211\u5011\u53ef\u4ee5\u9810\u8655\u7406\u6bcf\u500b\u9663\u5217\u7684\u524d\u7db4\u6700\u5927\u503c pre[i]\uff0c\u5f8c\u7db4\u6700\u5927\u503c suf[i]\uff0c\u7136\u5f8c\u679a\u8209\u5de6\u53f3\uff0c\u4f46\u9019\u6642\uff0c\u6211\u5011\u8981\u600e\u9ebc\u8a08\u7b97\u4e2d\u9593\u7684\u8ca2\u737b ? \u6211\u5011\u4ee4 sum[i] = max(\u9663\u5217 i \u7684\u7e3d\u548c, 0)\uff0c\u7576\u5de6\u70ba l, \u53f3\u70ba r \u6642\uff0c\u7b54\u6848\u5c31\u662f </p> <p> suf[l] + (\u5168\u90e8\u7684\u7e3d\u548c - sum[l] - sum[r]) + pre[r] </p> <p>\u90a3\u6211\u5011\u8981\u600e\u9ebc\u505a\u5f97\u66f4\u5feb\u5462 ? \u6211\u5011\u8003\u616e\u53ea\u679a\u8209\u7576\u5de6\u53f3\u7684\u5176\u4e2d\u4e00\u500b\uff0c\u53e6\u4e00\u500b\u770b\u80fd\u4e0d\u80fd\u5feb\u901f\u7684\u627e\u51fa\u4f86\u3002\u53ef\u4ee5\u767c\u73fe\uff0c\u82e5\u6211\u5011\u679a\u8209 l\uff0c\u90a3\u9ebc\u6211\u5011\u5c31\u53ea\u8981\u627e\u5230 (pre[r] - sum[r]) \u6700\u5927\u7684\u5373\u53ef\uff08\u5c07\u4e0a\u9762\u7684\u8a66\u5b50\u6574\u7406\u4e00\u4e0b\u53ef\u63a8\u5f97\uff09\u3002\u6240\u4ee5\u6211\u5011\u5c07\u6240\u6709\u9663\u5217\u7684 (pre[i] - sum[i]) sort \u597d\u5f8c\uff0c\u5c0d\u4e00\u500b l \u53ea\u8981\u53bb\u770b\u6700\u5927\u8207\u6b21\u5927\uff08\u56e0\u70ba\u6700\u5927\u7684\u53ef\u80fd\u5c31\u662f l\uff09\u7684 (pre[i] - sum[i]) \u5373\u53ef</p> <p>\u6700\u5f8c\u8981\u8a18\u5f97\u8ddf\u55ae\u7d14\u627e\u4e00\u500b\u9663\u5217\u7684\u6700\u5927\u9023\u7e8c\u548c\u53d6 max</p> zerojudge i402. 4. \u5167\u7a4d <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u9663\u5217 a\uff0c\u8207\u9577\u5ea6\u70ba m \u7684\u9663\u5217 b\uff0c\u53ef\u4ee5\u81ea\u7531\u6c7a\u5b9a a, b \u662f\u5426 reverse\uff0c\u76ee\u6a19\u662f\u5728 a, b \u5206\u5225\u627e\u4e00\u500b\u9577\u5ea6\u4e00\u6a23\u7684 subarray\uff0c\u4f7f\u5167\u7a4d\u6700\u5927\u5316</p> <p>\\(n, m\\le 1000\\)</p> \u601d\u8def <p>\u6cd5 1: Maximum Subarray Sum </p> <p>\u679a\u8209 a \u958b\u982d\u7684\u9805\uff0c\u5047\u8a2d\u662f t\uff0c\u8207 b \u7684\u7b2c\u4e00\u9805\u4f5c\u914d\u5c0d\uff0c\u4f9d\u5e8f\u5c07\u5169\u500b\u9663\u5217\u7684\u5c0d\u61c9\u9805\u76f8\u52a0\uff0c\u8b8a\u6210 c[i] = a[i + t] * b[i] \u505a Maximum Subarray Sum</p> <p>\u6cd5 2: dp</p> <p>\u4ee4 dp(i, j) = \u76ee\u524d\u914d\u5c0d\u7684\u6700\u5f8c\u4e00\u9805\u662f\u7b2c\u4e00\u500b\u9663\u5217\u7b2c i \u9805\uff0c\u914d\u7b2c\u4e8c\u500b\u9663\u5217\u7b2c j \u9805\u7684\u6700\u5927\u503c\uff0c\u8f49\u79fb\u5f0f\u5c31\u662f dp(i, j) = max{0, dp(i - 1, j - 1)} + a[i] * b[j]</p>"},{"location":"basic/greedy/problem/","title":"\u96dc\u984c\u6574\u7406","text":""},{"location":"basic/greedy/problem/#_1","title":"\u91d1\u9322\u554f\u984c","text":"\u63db\u96f6\u9322\uff08\u4e92\u76f8\u6574\u9664\uff09 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u905e\u589e\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4ee3\u8868\u6bcf\u7a2e\u786c\u5e63\u7684\u9762\u984d\uff0c\u6bcf\u7a2e\u786c\u5e63\u7684\u6578\u91cf\u90fd\u6709\u7121\u9650\u500b\uff0c\u554f\u6700\u5c11\u9078\u5e7e\u500b\u786c\u5e63\u6070\u80fd\u6e4a\u51fa \\(k\\) \u5143</p> <p>\\(n\\le 10^6,a_{i+1}\\) % \\(a_i=0\\)</p> \u601d\u8def <p>\u4f8b\u5982\u8aaa k = 1384\uff0ca \u662f\u65b0\u53f0\u5e63\uff0c\u90a3\u6211\u5011\u5c31\u53ef\u4ee5\u9644 1 \u500b 1000\u30013 \u500b 100\u30011 \u500b 50\u30013 \u500b 10\u30014 \u500b 1\uff0c\u4f46\u70ba\u4ec0\u9ebc\u9019\u6a23\u4e00\u5b9a\u662f\u597d\u7684 ?</p> <p>\u3010\u5f15\u7406 1\u3011: \u5728\u9762\u984d\u4e92\u76f8\u6574\u9664\u7684\u60c5\u6cc1\u4e0b\uff0c\u82e5\u5b58\u5728\u9762\u984d x \u7684\u8ca8\u5e63\uff0c\u4e14\u9762\u984d\u5728 x \u4e4b\u4e0b\u7684\u7e3d\u548c\u8d85\u904e x\uff0c\u5247\u5fc5\u5b9a\u80fd\u5920\u900f\u904e\u63db\u9322\u4f7f\u5f97\u9762\u984d\u5728 x \u4ee5\u4e0b\u7684\u8ca8\u5e63\u7e3d\u548c\u4e0d\u5230 x \u4e14\u4f7f\u8ca8\u5e63\u6578\u91cf\u66f4\u5c11</p> <p>\u8b49\u660e: \u898b\u6b64\u8655</p> <p>\u3010\u5f15\u7406 2\u3011: \u5728\u9762\u984d\u4e92\u76f8\u6574\u9664\u7684\u60c5\u6cc1\u4e0b\uff0c\u76e1\u91cf\u4f7f\u7528\u9762\u984d\u8f03\u5927\u7684\u8ca8\u5e63\uff0c\u53ef\u8b93\u4f7f\u7528\u7684\u8ca8\u5e63\u6578\u91cf\u6700\u5c11</p> <p>\u8b49\u660e: \u7531 \u3010\u5f15\u7406 1\u3011 \u5f97\u77e5\uff0c\u82e5\u6700\u4f73\u89e3\u672a\u4f7f\u7528\u76e1\u91cf\u5927\u9762\u984d\u7684\u8ca8\u5e63\uff08\u4e5f\u5c31\u662f\uff0c\u5b58\u5728\u4e00\u500b\u9762\u984d x\uff0c\u4f7f\u5f97\u9762\u984d\u5728 x \u4ee5\u4e0b\uff08\u4e0d\u542b x\uff09\u7684\u8ca8\u5e63\u7e3d\u548c\u8d85\u904e x\uff09\uff0c\u5247\u5fc5\u5b9a\u53ef\u4ee5\u900f\u904e\u63db\u524d\uff0c\u4f7f\u5176\u6210\u70ba\u66f4\u597d\u7684\u4e00\u7d44\u89e3\uff0c\u8207\u6700\u4f73\u89e3\u7684\u524d\u63d0\u77db\u76fe</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define ALL(x) x.begin(),x.end()\nusing namespace std;\n\nconst int MAXN = 1e6 + 5;\nint n, k, a[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    int ans = 0;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        ans += k / a[i];\n        k %= a[i];\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u63db\u96f6\u9322\uff08\u4e0d\u4e92\u76f8\u6574\u9664\uff09CSES - Coin Combinations II <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u905e\u589e\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4ee3\u8868\u6bcf\u7a2e\u786c\u5e63\u7684\u9762\u984d\uff0c\u6bcf\u7a2e\u786c\u5e63\u7684\u6578\u91cf\u90fd\u6709\u7121\u9650\u500b\uff0c\u554f\u6700\u5c11\u9078\u5e7e\u500b\u786c\u5e63\u6070\u80fd\u6e4a\u51fa \\(k\\) \u5143</p> <p>\\(n\\le 100, 1\\le k, a_i\\le 10^6\\)</p> \u601d\u8def <p>dp(i) = \u662f\u5426\u80fd\u6e4a\u51fa i\uff0c\u53bb\u57f7\u884c\u985e\u4f3c\u80cc\u5305\u554f\u984c\u5c31\u53ef\u4ee5\u4e86\uff0c\u8907\u96dc\u5ea6 O(nk)</p> TIOJ 1579.\u4f86\u81ea\u672a\u4f86\u7684\u65b0\u53f0\u5e63 <p>\u7d66\u9577\u5ea6\u70ba \\(n\\)\uff0c\u2faf\u984d\u5206\u5225\u70ba \\(1,5,10,50,100,500,1000,\\ldots\\) \u7684\u9322\u5e63\uff0c\u7b2c \\(i\\) \u500b\u9322\u5e63\u7684\u6578\u91cf\u70ba \\(c_i\\)\uff0c\u80fd\u6e4a\u51fa\u7684\u91d1\u984d\u5171\u6709\u591a\u5c11\u7a2e</p> <p>\\(1\\le n\\le 19\\)</p> \u601d\u8def <p>\u82e5\u5c0f\u7684\u8db3\u4ee5\u8868\u9054\u5927\u7684\uff0c\u5c31\u5c07\u5927\u7684\u90fd\u63db\u6210\u5c0f\u7684\u3002\u4f8b\u5982 1 \u5143\u6709 5 \u500b\uff0c5 \u5143\u6709 2 \u500b\uff0c\u90a3\u9ebc\u56e0\u70ba 1 * 5 &gt; 5\uff0c\u6240\u4ee5\u53ef\u5c07 5 \u90fd\u63db\u6210 1 \u5143\uff0c\u8b8a\u6210 1 \u5143\u6709 15 \u500b\uff0c\u82e5 1 \u5143\u53ea\u6709 3 \u500b\uff0c\u90a3\u9ebc\u6e4a\u4e0d\u51fa\u4f86 4\uff0c\u4e5f\u5c31\u4e0d\u80fd\u63db\u4e86\uff0c\u5169\u8005\u8b8a\u6210\u7368\u7acb\u7684\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u5c31\u4f9d\u5e8f\u770b\u5927\u7684\u80fd\u4e0d\u80fd\u63db\u6210\u7576\u524d\u6700\u5c0f\u7684\u5373\u53ef\uff0c\u6700\u5f8c\u7684\u7b54\u6848\u70ba \\((c_1 + 1)\\cdot (c_2 + 1) \\ldots (c_k+1) - 1\\)</p> <p>\u53c3\u8003\u81ea : PTT</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint a[maxn], cnt[maxn];\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n\n    a[0] = 1;\n    for (int i = 1; i &lt; n; i++) {\n        if (i &amp; 1) {\n            a[i] = a[i - 1] * 5;\n        } else {\n            a[i] = a[i - 1] * 2;\n        }\n    }\n\n    int cur = 0;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; cnt[i];\n        if (i == 0) {\n            continue;\n        }\n        if (a[cur] * cnt[cur] &gt;= a[i]) {\n            cnt[cur] += (a[i] / a[cur]) * cnt[i];\n            cnt[i] = 0;\n        } else {\n            cur = i;\n        }\n    }\n    int ans = 1;\n    for (int i = 0; i &lt; n; i++) {\n        if (cnt[i]) {\n            ans = (ans * ((cnt[i] + 1) % M)) % M;\n        }\n    }\n    cout &lt;&lt; (ans - 1 + M) % M &lt;&lt; '\\n';\n}  \n</code></pre> CSES - Missing Coin Sum <p>\u7d66 \\(n\\) \u500b\u9322\u5e63\uff0c\u9762\u984d\u662f \\(a_1, \\ldots ,a_n\\)\uff0c\u554f\u6700\u5c0f\u6e4a\u4e0d\u51fa\u4f86\u7684\u9762\u984d\u662f\u591a\u5c11</p> <p>\\(n\\le 2\\times 10^5, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u82e5\u5c0f\u7684\u8db3\u63db\u5927\uff0c\u5247\u5927\u5fc5\u5b9a\u8981\u63db\u5c0f\uff0c\u8ddf\u4e0a\u4e00\u984c\u4e00\u6a23\uff0c\u91cd\u8907\u76f4\u5230\u5c0f\u4e0d\u8db3\u4ee5\u63db\u5927\u70ba\u6b62</p> <p>\u9019\u908a\u8981\u6ce8\u610f\uff0c\u8ddf\u4e0a\u4e00\u984c\u4e0d\u540c\u7684\u662f\uff0c\u82e5\u5c0f\u7684\u91d1\u984d\u8ddf\u5927\u7684\u53ea\u5dee\u4e00\uff0c\u4e5f\u662f\u53ef\u4ee5\u5c07\u5927\u63db\u5c0f\u7684\uff0c\u4f8b\u5982\u8aaa 1 \u5143\u6709 4 \u500b\uff0c5 \u5143\u6709 1 \u500b\uff0c\u9019\u6a23\u5176\u5be6 [0, 9] \u90fd\u6e4a\u5f97\u51fa\u4f86\uff0c\u6240\u4ee5\u4e5f\u662f\u53ef\u4ee5\u628a\u9019\u500b 5 \u5143\u63db\u6210 5 \u500b 1 \u5143</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 9e18;\nconst int MAXN = 2e5 + 5;\nint n, m;\nint a[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    sort(a + 1, a + n + 1);\n    int mx = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (a[i] &gt; mx + 1) {\n            cout &lt;&lt; mx + 1 &lt;&lt; \"\\n\";\n            exit(0);\n        }\n        mx = max(mx, mx + a[i]);\n    }\n    cout &lt;&lt; mx + 1 &lt;&lt; \"\\n\";\n}\n</code></pre> CSES - Missing Coin Sum Queries <p>\u7d66 \\(n\\) \u500b\u9322\u5e63\uff0c\u9762\u984d\u662f \\(a_1, \\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f:</p> <ul> <li>\\(\\text{query}(l,r):\\) \u554f\u53ea\u80fd\u4f7f\u7528 \\(a_l, \\ldots ,a_r\\)\uff0c\u6700\u5c0f\u6e4a\u4e0d\u51fa\u4f86\u7684\u9762\u984d\u662f\u591a\u5c11</li> </ul> <p>\\(n,q\\le 2\\times 10^5, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u5047\u5982\u8aaa\u6211\u76ee\u524d\u80fd\u6e4a\u51fa [1, x] \u7684\u9019\u4e9b\u6578\u5b57\uff0c\u4ee3\u8868\u6211\u5011\u8db3\u4ee5\u8868\u9054\u9762\u984d\u70ba x + 1 \u7684\u786c\u5e63\uff0c\u53ef\u5c07 x + 1 \u7684\u786c\u5e63\u91d1\u984d\u90fd\u52a0\u904e\u4f86\uff0c\u5047\u5982\u8aaa\u662f c\uff0c\u5247\u80fd\u6e4a\u51fa\u7684\u6578\u5b57\u7bc4\u570d\u5c31\u8b8a\u6210\u4e86 [1, c]\uff0c\u82e5\u6b64\u6642 x = c\uff0c\u4ee3\u8868\u5df2\u7d93\u7522\u751f\u4e00\u500b gap \u4e86\uff0c\u6c92\u8fa6\u6cd5\u518d\u63db\uff0c\u7b54\u6848\u5373\u70ba x + 1\u3002\u8209\u4f8b\u4f86\u8aaa\u6211\u73fe\u5728\u80fd\u6e4a\u51fa [1, 4]\uff0c\u53ef\u8868\u9054 4 + 1 = 5 \u5143\uff0c\u4f46 5 \u5143\u6c92\u6709\uff0c\u6240\u4ee5\u6700\u5c0f\u6e4a\u51fa\u4f86\u7684\u5c31\u662f 5 \u5143\u3002</p> <p>\u66f4\u5177\u9ad4\u4e00\u9ede\u7684\u4f8b\u5b50\uff0c\u5047\u5982\u8aaa a = [1, 1, 3, 3, 5, 8, 25, 30, 40]\uff0c\u7576\u524d &lt;= 1 \u7684\u786c\u5e63\u52a0\u8d77\u4f86\u662f 2\uff0c\u6240\u4ee5\u6211\u8db3\u4ee5\u8868\u9054 2 + 1 = 3\uff0c\u800c &lt;= 3 \u7684\u786c\u5e63\u52a0\u8d77\u4f86\u662f 8\uff0c\u4ee3\u8868\u6211\u5011\u8db3\u4ee5\u8868\u9054 8 + 1 = 9\uff0c\u800c &lt;= 9 \u7684\u786c\u5e63\u52a0\u8d77\u4f86\u662f 21\uff0c\u4ee3\u8868\u6211\u5011\u8db3\u4ee5\u8868\u9054 21 + 1 = 22\uff0c\u800c &lt;= 22 \u7684\u786c\u5e63\u52a0\u8d77\u4f86\u662f 21\uff0c\u6c92\u8fa6\u6cd5\u518d\u63db\u4e86</p> <p>\u6240\u4ee5\u6211\u5011\u9700\u8981\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u4f86\u5feb\u901f query(L, R, v): \u8a62\u554f\u5728 L, R \u6578\u5b57\u4ecb\u65bc 1, v \u7684\u7e3d\u548c\uff0c\u9019\u53ef\u4ee5\u5c07 point(i, a[i]) \u6253\u5728\u4e8c\u7dad\u5e73\u9762\u4e0a\uff0c\u554f\u984c\u5c31\u8b8a\u6210\u8a62\u554f\u4e00\u500b\u77e9\u5f62\u5340\u57df\u3002\u9019\u53ef\u4ee5\u7528\u6301\u4e45\u5316\u7dda\u6bb5\u6a39\u7d00\u9304 n \u500b\u7248\u672c\uff0c\u5728 seg[R] - seg[L - 1] \u4e0a\u8a62\u554f\u5c31\u597d\u4e86</p> <p>\u56e0\u70ba\u63db\u9322\u6bcf\u6b21\u7684\u91d1\u984d\u5e7e\u4e4e\u662f\u500d\u589e\u7684\uff08\u4e0d\u662f\u6bcf\u4e00\u9805\u90fd\u500d\u589e\uff0c\u662f\u9694\u5169\u9805\u500d\u589e\uff09\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u70ba O(n * log C * log n)</p> CF 1303 D. Fill The Bag <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(m\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_m\\)\uff0c\\(a_i\\) \u90fd\u662f 2 \u7684\u51aa\u6b21\u3002\u6bcf\u6b21\u64cd\u4f5c\u53ef\u5c07\u4e00\u500b \\(a_i\\) \u62c6\u5169\u534a\uff0c\u554f\u6700\u5c11\u5e7e\u6b21\u64cd\u4f5c\u624d\u80fd\u6311\u4e00\u4e9b \\(a\\) \u88e1\u9762\u7684\u5143\u7d20\u4f86\u7d44\u6210 \\(n\\)</p> <p>\\(m\\le 10^5, 1\\le n\\le 10^{18}, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u4ee5\u4e8c\u9032\u5236\u7684\u89d2\u5ea6\u4f86\u8003\u616e\u6b64\u984c\uff0c\u5c07 \\(m\\) \u4ee5\u4e8c\u9032\u5236\u8868\u793a\uff0c\u6211\u5011\u7684\u76ee\u6a19\u5c31\u662f\u8981\u8b93 \\(m\\) \u7684\u4e8c\u9032\u5236\u88e1\u7684\u6bcf\u4e00\u500b 1 \u90fd\u6709\u88ab\u8ca2\u737b\uff0c\u6709\u5169\u500b\u89c0\u5bdf:</p> <ul> <li> <p>\u53ef\u5c07\u9ad8\u4f4d\u5206\u89e3\u6210\u4f4e\u4f4d\uff08\u5728 \\(a_i\\)\uff09</p> </li> <li> <p>\u9ad8\u4f4d\u80fd\u7531\u4f4e\u4f4d\u7d44\u6210</p> </li> </ul> <p>\u5f9e\u5927\u5230\u5c0f\u8003\u616e\u7684\u8a71\uff0c\u82e5\u9ad8\u4f4d\u4e0d\u5920\u501f\uff0c\u90a3\u6211\u5c31\u5fc5\u9808\u5f9e\u4f4e\u4f4d\u501f\uff0c\u9019\u6a23\u53c8\u8981\u8655\u7406\u5de6\u908a\u53c8\u8981\u8655\u7406\u53f3\u908a\u5f88\u9ebb\u7169\u3002\u4e0d\u5982\u6211\u5011\u5f9e\u5c0f\u5230\u5927\u8003\u616e\uff0c\u82e5\u4f4e\u4f4d\u4e0d\u5920\u7528\u5247\u9700\u8981\u8ddf\u6700\u8fd1\u7684\u9ad8\u4f4d\u501f\uff0c\u5c07\u9ad8\u4f4d\u5206\u89e3\u6210\u4f4e\u4f4d\u4f7f\u7528\uff0c\u5728\u904e\u7a0b\u4e2d\u5c07\u4f4e\u4f4d\u63db\u6210\u9ad8\u4f4d\uff0c\u9019\u6a23\u5be6\u4f5c\u8d77\u4f86\u5c31\u5f88\u9806\u4e86</p> <p>\u4e5f\u53ef\u4ee5\u5c07\u4f4e\u4f4d\u76ee\u524d\u7684\u91d1\u984d\u7e3d\u548c\u8a18\u9304\u8d77\u4f86\uff0c\u4ee4\u4ed6\u70ba sum\uff0c\u82e5\u767c\u73fe sum \u5927\u65bc\u7576\u524d\u4f4d\u5143 2^i\uff0c\u5247\u53ef\u5c07 sum -= 2^i\u3002\u82e5\u89ba\u5f97\u6709\u9ede\u56f0\u60d1\uff0c\u9019\u662f\u61c9\u7528\u5230\u63db\u9322\u554f\u984c\u7684\u5f15\u7406\uff0c\u53ef\u898b\u6b64\u8655\u67e5\u770b\u8b49\u660e\u3002</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nint t, m, cnt[65];\nlong long n, a, total, ans;\nmap &lt;int, int&gt; mp;\n\nint main() {\n    cin &gt;&gt; t;\n    for (int i = 0; i &lt; 60; i++) {\n        mp[(1LL &lt;&lt; i)] = i;\n    }\n    while (t--) {\n        cin &gt;&gt; n &gt;&gt; m;\n        total = 0;\n        memset(cnt, 0, sizeof(cnt));\n        for (int i = 0; i &lt; m; i++) {\n            cin &gt;&gt; a;\n            total += a;\n            cnt[mp[a]]++;\n        }\n        if (total &lt; n){\n            cout &lt;&lt; -1 &lt;&lt; \"\\n\";\n            continue;\n        }\n        ans = 0;\n        for (int i = 0; i &lt; 61; i++) {\n            if (n &amp; (1LL&lt;&lt;i)) {\n                for (int j = i; j &lt;= 60; j++) {\n                    if (cnt[j]) {\n                        ans += j-i;\n                        cnt[j]--;\n                        for (int k = j-1; k &gt;= i; k--) {\n                            cnt[k]++;\n                        }\n                        break;\n                    }\n                }\n            }\n            cnt[i+1] += cnt[i]/2;\n        }\n        cout &lt;&lt; ans &lt;&lt; \"\\n\";\n    }\n}\n</code></pre>"},{"location":"basic/greedy/problem/#_2","title":"\u4ea4\u63db\u6cd5","text":"APCS \u7269\u54c1\u5806\u758a <p>\u7d66 \\(n\\) \u500b\u7269\u54c1\uff0c\u7b2c \\(i\\) \u500b\u7269\u54c1\u6709\u6b0a\u91cd \\(w_i\\) \u8207\u983b\u7387 \\(f_i\\)\u3002\u4f60\u8981\u628a n \u500b\u7269\u54c1\u5806\u6210\u4e00\u758a\uff0c\u5c0d\u65bc\u6bcf\u500b\u7269\u54c1\u6240\u9700\u8981\u82b1\u7684\u80fd\u91cf\u662f \\(f_i\\times\\) \u5728\u9019\u500b\u7bb1\u5b50\u4e0a\u65b9\u7684\u7bb1\u5b50\u91cd\u91cf\u7e3d\u548c\u3002\u8a08\u7b97\u5728\u6700\u597d\u7684\u758a\u6cd5\u7684\u60c5\u6cc1\u4e0b\uff0c\u6700\u5c11\u9700\u8981\u82b1\u591a\u5c11\u80fd\u91cf</p> <p>\\(n\\le 10^5, 1\\le w_i, f_i \\le 1000\\)</p> \u601d\u8def <p>\u5982\u4f55\u5224\u65b7\u6700\u5e95\u4e0b\u7684\u5169\u500b\u662f\u5426\u9700\u8981\u4ea4\u63db\uff1f \u5c0d\u65bc\u5169\u500b\u7269\u54c1 i, j\uff0c\u5047\u8a2d (w[i], f[i]) \u653e\u5728\u6700\u5e95\u4e0b\u662f\u6700\u597d\u60c5\u6cc1\uff0cw[i] * f[j] \u548c w[j] * f[i] \u5fc5\u7136\u6709\u5176\u4e00\u6703\u88ab\u8a08\u7b97\u7b54\u6848\u4e2d\uff0cgreedy \u9078\u64c7\u5c0f\u7684\u53ef\u5f97\u5230\u6700\u4f73\u89e3\u3002\u4ee3\u8868 </p> <p>w[j] * f[i] &lt; w[i] * f[j]</p> <p>\u21d2 w[j] / f[j] &lt; w[i] / f[i]</p> <p>\u82e5 w[j] / f[j] &lt; w[i] / f[i]\uff0c\u5247 i \u653e\u5728\u5e95\u4e0b\u6bd4\u8f03\u597d</p> CF 559 B. Equivalent Strings <p>\u7d66\u5169\u500b\u9577\u5ea6\u76f8\u540c\u7684\u5b57\u4e32 a, b\uff0c\u5169\u500b\u6b21\u4e32\u300c\u76f8\u7b49\u300d\u82e5\u4e14\u552f\u82e5\u7b26\u5408\u4ee5\u4e0b\u689d\u4ef6\u4e4b\u4e00</p> <ul> <li> <p>a \u8207 b \u76f8\u540c</p> </li> <li> <p>\u5c07 a, b \u5404\u81ea\u5206\u6210\u5169\u534a\uff0c\u5169\u534a\u5c0d\u61c9\u300c\u76f8\u7b49\u300d</p> </li> </ul> <p>\\(|a|=|b|\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u5c0d\u65bc\u5169\u500b\u5b57\u4e32 a, b \u5206\u5225\u9032\u884c reorder\uff0c\u5229\u7528\u5206\u6cbb\uff0c\u6bcf\u6b21\u90fd Greedy \u7684\u4f7f\u5b57\u5178\u5e8f\u6bd4\u8f03\u5c0f\u7684\u90a3\u4e00\u534a\u5728\u524d\u9762\uff0c\u6700\u5f8c\u770b a, b reorder \u51fa\u4f86\u6709\u6c92\u6709\u9577\u7684\u4e00\u6a23</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nstring s1, s2;\n\nstring dc(string s) {\n    if (s.size() &amp; 1) return s;\n    string a = dc(s.substr(0, s.size() / 2));\n    string b = dc(s.substr(s.size() / 2));\n    return a &lt; b ? a + b : b + a;\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; s1 &gt;&gt; s2;\n    string ra = dc(s1);\n    string rb = dc(s2);\n    if (ra == rb) {\n         cout &lt;&lt; \"YES\\n\";\n    } else {\n        cout &lt;&lt; \"NO\\n\";\n    }\n}\n</code></pre>"},{"location":"basic/greedy/problem/#_3","title":"\u970d\u592b\u66fc\u7de8\u78bc","text":"\u554f\u984c <p>\u6709\u597d\u5e7e\u7a2e\u5b57\u5143\uff0c\u7d66\u5b9a\u6bcf\u7a2e\u5b57\u5143\u7684\u51fa\u73fe\u983b\u7387 freq[i]\uff0c\u7d66\u6bcf\u500b\u5b57\u5143\u5b9a\u7fa9\u4e00\u500b prefix code \\(s_i\\)\uff0c\u8b93 WPL \\(=\\sum |s_i| \\times freq_i\\) \u6700\u5c0f\u5316\u3002\u5176\u4e2d prefix code \u7684\u5b9a\u7fa9\u662f\u6bcf\u7a2e\u5b57\u5143\u7528\u4e00\u500b 0/1 \u5b57\u4e32\u4f86\u8868\u9054\uff0c\u4e14\u4e92\u76f8\u4e0d\u662f prefix</p> <p>\u4f5c\u6cd5: \u6bcf\u6b21\u5408\u4f75\u5169\u500b\u983b\u7387\u6700\u5c0f\u7684\u5b57\u5143\uff0c\u60f3\u6210\u662f\u4e00\u9846 binary tree\uff0c\u5176\u4e2d\u8449\u7bc0\u9ede\u5c31\u662f\u6211\u5011\u7684\u5b57\u5143\uff0c\u9019\u6b63\u597d\u7b26\u5408\u4e86\u300c\u4e92\u76f8\u4e0d\u662f prefix\u300d\u7684\u689d\u4ef6\uff08\u4e0d\u80fd\u662f\u7956\u5148\u95dc\u4fc2\uff09</p> <p>\u4f8b\u5982\u8aaa\u6709 4 \u500b\u9ede\uff08\u5b57\u5143\uff09a\u3001b\u3001c\u3001d\uff0c\u4ed6\u5011\u7684 freq \u5206\u5225\u70ba 7\u30015\u30012\u30014\u3002\u5247\u6211\u5011\u7684\u69cb\u6a39\u904e\u7a0b\u5982\u4e0b: </p> <p></p> <p>\u82e5\u9700\u8981\u69cb\u9020\u7684\u8a71\uff0c\u5f9e root \u958b\u59cb\uff0c\u5f80\u5de6\u5206\u914d 0 \u7684\u7de8\u78bc\uff0c\u5f80\u53f3\u5206\u914d 1 \u7684\u7de8\u78bc\uff0c\u6bcf\u500b leaf \u7684\u7de8\u78bc\u5c31\u662f\u5f9e root \u5230\u81ea\u5df1\u7684\u7de8\u78bc\u4e32\u8d77\u4f86\u3002</p> k \u53c9\u54c8\u592b\u66fc\u6a39 \u6d1b\u8c37 P2168  [NOI2015]\u8377\u9a6c\u53f2\u8bd7 <p>\u6709 \\(n\\) \u7a2e\u5b57\u5143\uff0c\u7b2c \\(i\\) \u7a2e\u51fa\u73fe\u6b21\u6578\u70ba \\(w_i\\)\u3002\u8981\u7528 \\(k\\) \u9032\u5236\u7684\u5b57\u4e32 \\(s_i\\) \u4f86\u4ee3\u66ff\u7b2c \\(i\\) \u7a2e\u5b57\u5143\uff0c\u4f7f\u5f97:</p> <ul> <li>\u5c0d\u65bc\u4efb\u610f\u7684 \\(1 \\le i, j \\le n\\)\uff0c\\(i\\neq j\\)\uff0c\\(s_i\\) \u90fd\u4e0d\u662f \\(s_j\\) \u7684\u524d\u7db4</li> </ul> <p>\u554f\u91cd\u65b0\u7de8\u78bc\u5f8c\u7684\u5b57\u4e32\u6700\u77ed\u9577\u5ea6\uff0c\u8207\u6700\u9577\u7684 \\(s_i\\) \u6700\u77ed\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(n \\le 10^5, k \\le 9\\)</p> \u601d\u8def <p>\u7576 \\(k=2\\) \u6642\uff0c\u5c31\u662f Huffman Code \u88f8\u984c\u3002\\(k&gt;2\\) \u7684 case\uff0c\u82e5\u76f4\u63a5 Greedy \u7684\u5408\u4f75\uff0c\u5728\u6700\u5f8c\u4e00\u6b21\u7684\u5faa\u74b0\u6642\uff0cHeap \u7684\u5927\u5c0f\u5728 \\(2\\ldots k-1\\)\uff08\u4e0d\u8db3\u4ee5\u53d6\u51fa \\(k\\) \u500b\uff09\uff0c\u90a3\u9ebc\u6574\u500b Huffman Tree \u7684 root \u7684\u7bc0\u9ede\u500b\u6578\u5c31\u6703\u5c0f\u65bc \\(k\\)\uff0c\u6b64\u6642\u82e5\u5c07\u4e00\u4e9b\u6df1\u5ea6\u6700\u5927\u7684 leaf \u62d4\u6389\uff0c\u63a5\u5230 root \u7684\u4e0b\u65b9\uff0c\u6703\u4f7f\u7b54\u6848\u8b8a\u5c0f\uff08\u82e5\u4e0d\u53d6\u6df1\u5ea6\u6700\u5927\u7684\uff0c\u5247\u5c07\u6df1\u5ea6\u6700\u5927\u7684\u62d4\u8d77\u4f86\u63a5\u5230\u7a7a\u51fa\u4f86\u7684\u4f4d\u7f6e\u66f4\u512a\uff09\u3002\u6240\u4ee5\u6700\u5f8c\u7684 Huffman Tree \u5c31\u9577\u6210: \u6240\u6709\u9ede\u7684\u5c0f\u5b69\u90fd\u662f\u6eff\u7684\uff0c\u9664\u4e86\u6700\u6df1\u7684\u4e00\u500b internal node \u6703\u7a7a\u51fa\u4e00\u4e9b\u4f4d\u7f6e\u3002\u5177\u9ad4\u505a\u6cd5\u6709\u5169\u7a2e</p> <ol> <li>\u6211\u5011\u53ef\u4ee5\u5148\u5c07 \\(2+(n-2)\\% (k-1)\\) \u500b\u7bc0\u9ede\u5408\u4f75\uff08\u5373\u5f62\u6210\u6700\u6df1\u7684 internal node\uff09\uff0c\u5269\u4e0b\u7684\u6bcf\u6b21\u5408\u4f75 \\(k\\) \u500b\u7bc0\u9ede\u5373\u53ef</li> <li>\u6211\u5011\u88dc\u4e00\u4e9b\u984d\u5916 \\(w_i=0\\) \u7684\u9ede\uff0c\u9019\u6a23\u9019\u4e9b\u9ede\u5c31\u6703\u586b\u6eff\u7a7a\u51fa\u7684\u4f4d\u7f6e\uff0c\u800c\u4e14\u53c8\u4e0d\u5f71\u97ff\u7b54\u6848\u3002\u56e0\u70ba\u6bcf\u6b21\u6703\u5408\u4f75 k \u500b\u9ede\uff0c\u5f62\u6210\u4e00\u500b\u9ede\uff0c\u6240\u4ee5\u76f8\u7576\u65bc\u4e00\u6b21\u5c11 k - 1 \u500b\u9ede\uff0c\u7d93\u904e\u591a\u6b21\u7684\u5408\u4f75\u5f8c\u6211\u5011\u5e0c\u671b\u5269\u4e0b\u4e00\u500b\u9ede\uff08\u4f8b\u5982 n = 5, k = 5\uff0c\u4e00\u6b21\u5408\u4f75\u5f8c\u5c11\u4e86 5 \u500b\u9ede\uff0c\u4f46\u591a\u4e86 1 \u500b\u9ede\uff0c\u6240\u4ee5\u662f ok \u7684\uff09\uff0c\u6240\u4ee5\u5f97\u5230 n % (k - 1) = 1 \u6642\u53ef\u4ee5\u5b8c\u6574\u7684\u5408\u4f75\uff0c\u6211\u5011\u4e5f\u5c31\u662f\u8981\u88dc\u9ede\u76f4\u5230 n % (k - 1) = 1\u3002</li> </ol> <p>\u90a3\u9ebc\u7b2c\u4e8c\u500b\u7b54\u6848\u5176\u5be6\u5c31\u76f4\u63a5\u770b\u6a39\u7684\u9ad8\u5ea6\u5373\u53ef\u3002\u5982\u679c\u6709\u4e00\u500b\u9ede\u53ef\u4ee5\u79fb\u52d5\u5230\u6bd4\u8f03\u5c0f\u7684\u6df1\u5ea6\uff08\u4e5f\u5c31\u662f\u8b93\u6a39\u7684\u9ad8\u5ea6\u8b8a\u5c0f\uff09\uff0c\u90a3\u9ebc\u5b57\u4e32\u9577\u5ea6\u7e3d\u548c\u4e5f\u6703\u8ddf\u8457\u8b8a\u5c0f\uff0c\u8ddf\u6700\u4f73\u89e3\u689d\u4ef6\u77db\u76fe\u3002</p> code <pre><code>// Code by KSkun, 2018/7\n#include &lt;cstdio&gt;\n#include &lt;cctype&gt;\n#include &lt;cstring&gt;\n\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\ntypedef long long LL;\n\ninline char fgc() {\n    static char buf[100000], *p1 = buf, *p2 = buf;\n    return p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2)\n        ? EOF : *p1++;\n}\n\ninline LL readint() {\n    register LL res = 0, neg = 1; register char c = fgc();\n    for(; !isdigit(c); c = fgc()) if(c == '-') neg = -1;\n    for(; isdigit(c); c = fgc()) res = (res &lt;&lt; 1) + (res &lt;&lt; 3) + c - '0';\n    return res * neg;\n}\n\nconst int MAXN = 100005;\n\nint n, k;\n\ntypedef std::pair&lt;LL, LL&gt; PII64;\nstd::priority_queue&lt;PII64, std::vector&lt;PII64&gt;, std::greater&lt;PII64&gt; &gt; pq;\n\nint main() {\n    n = readint(); k = readint();\n    for(int i = 1; i &lt;= n; i++) {\n        LL w = readint();\n        pq.push(PII64(w, 0));\n    }\n    while(k &gt; 2 &amp;&amp; n % (k - 1) != 1) {\n        pq.push(PII64(0, 0)); n++;\n    }\n    LL ans1 = 0, ans2 = 0;\n    while(pq.size() &gt; 1) {\n        PII64 res(0, 0);\n        for(int i = 1; i &lt;= k; i++) {\n            res.first += pq.top().first;\n            res.second = std::max(res.second, pq.top().second + 1);\n            pq.pop();\n        }\n        ans1 += res.first;\n        ans2 = std::max(ans2, res.second);\n        pq.push(res);\n    }\n    printf(\"%lld\\n%lld\", ans1, ans2);\n    return 0;\n}\n</code></pre> CF 1882 C. Card Game <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5 :</p> <ul> <li> <p>\u79fb\u9664\u4e00\u500b\u5947\u6578\u9805\uff0c\u5f97\u5206\u52a0\u4e0a \\(a_i\\)</p> </li> <li> <p>\u79fb\u9664\u4e00\u500b\u5076\u6578\u9805</p> </li> </ul> <p>\u6bcf\u6b21\u64cd\u4f5c\u5b8c\u5f8c\u9663\u5217\u90fd\u6703 reindexed\u3002\u53ef\u4ee5\u505a\u4efb\u610f\u6b21\u64cd\u4f5c\uff0c\u554f\u6700\u5927\u5f97\u5206</p> <p>\\(n\\le 2\\times 10^5, -10^9 \\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u4ee4 a \u70ba\u8981\u53d6\u7684 odd \u9805\uff0cb \u70ba\u8981\u53d6\u7684 even \u9805\u3002\u4f8b\u5982\u9663\u5217\u662f a..b.bab...b..a..b\uff0c\u6211\u5011\u53ef\u4ee5\u5148\u53d6\u6700\u5f8c\u7684 a\uff0c\u9019\u6a23\u5f8c\u9762\u7684 b \u5c31\u6703\u8b8a odd\uff0c\u518d\u7531\u5f8c\u5f80\u524d\u53d6\uff0c\u7136\u5f8c\u91cd\u8907\u9019\u500b\u6b65\u9a5f\uff0c\u5c31\u53ef\u4ee5\u53d6\u5b8c\u3002\u4f46\u53ef\u80fd\u6703\u6709\u4e00\u500b case \u4f8b\u5982 .b.b.bab...b\uff0c\u9019\u6a23\u6700\u524d\u9762\u7684\u4e09\u500b b \u7121\u8ad6\u5982\u4f55\u90fd\u662f\u6c92\u8fa6\u6cd5\u53d6\u7684\uff0c\u5fc5\u9808\u6368\u68c4\uff0c\u6211\u5011\u5fc5\u9808\u5728\u524d\u9762\u518d\u53d6\u4e00\u500b\u624d\u80fd\u8b93\u9019\u4e09\u500b b \u53d6\u5230\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u5f97\u5230\u4e86\u4e00\u500b greedy \u7684\u7d50\u8ad6\uff0c\u5c07 \\(i\\)-th \u79fb\u9664\uff0c\u6211\u5011\u53ef\u4ee5\u5f97\u5230 \\(\\sum\\limits_{j&gt;i} \\max (0, a_j)\\)\uff0c\u82e5 i \u70ba odd \u53ef\u4ee5\u518d\u52a0\u4e0a a[i]\u3002\u6240\u4ee5\u679a\u8209\u7b2c\u4e00\u500b\u9078\u7684\uff0c\u7136\u5f8c\u5c07 ans \u8207\u4ed6\u7684\u7b54\u6848\u53d6 max</p> code <pre><code>cin &gt;&gt; n;\nfor (int i = 1; i &lt;= n; i++) {\n    cin &gt;&gt; a[i];\n}\nlong long s = 0;\nfor (int i = n; i &gt;= 1; i--) {\n    if (i &amp; 1) {\n        ans = max(ans, s + a[i]);\n    } else {\n        ans = max(ans, s);\n    }\n    s += max(a[i], 0);\n}\nprintf(\"%lld\\n\", ans);\n</code></pre> CSES - Programmers and Artists <p>\u7d66\u4f60 \\(n\\) \u500b pair\\((x_i,y_i)\\)\uff0c\u8981\u4f60\u9078\u9019\u4e9b pair \u88e1\u9762\u7684 \\(a\\) \u500b \\(x\\) \u8ddf \\(b\\) \u500b \\(y\\)\uff0c\u4e14\u540c\u4e00\u500b pair \u4e2d\u7684 \\(x\\) \u548c \\(y\\) \u4e0d\u80fd\u540c\u6642\u6311\uff0c\u554f\u7e3d\u548c\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5148\u8003\u616e \\(a+b=n\\) \u7684\u60c5\u6cc1\uff0c\u9019\u7b49\u540c\u65bc\u5047\u8a2d\u6211\u5011\u628a\u6240\u6709\u7684 \\(x\\) \u90fd\u9078\uff0c\u6211\u5011\u518d\u9078\u524d \\(b\\) \u5927\u7684 \\((y-x)\\)\u3002\u4e5f\u5c31\u662f\u8aaa\u6211\u5011\u62cb\u68c4\u6389\u4e86 \\(b\\) \u500b \\(x\\) \u4f46\u5f97\u5230\u4e86 \\(b\\) \u500b \\(y\\) \u800c\u4e14\u8cfa\u6700\u591a\u3002</p> <p>\u56de\u6b78\u554f\u984c\uff0c\u6211\u5011\u628a\u9019\u4e9b pair \u7528 \\(x\\) \u5927\u5230\u5c0f\u62ff\u53bb sort\uff0c\u5728\u6700\u4f73\u89e3\u7684\u60c5\u6cc1\u6642\uff0c\u4e00\u5b9a\u6703\u5b58\u4e00\u689d\u5206\u754c\u7dda\uff0c\u4f7f\u5de6\u908a\u6bcf\u4e00\u9805\u90fd\u9078 x \u6216 y\uff0c\u7136\u5f8c\u53f3\u908a\u53ea\u9078 y\u3002\u5de6\u908a\u7684\u90e8\u5206\u5c31\u662f\u6211\u5011\u4e0a\u9762\u63d0\u5230\u7684\u554f\u984c\uff0c\u679a\u8209 pre[i] \u4ee3\u8868\u524d \\(i\\) \u500b\u9078 \\(a\\) \u500b \\(x\\) \u5269\u4e0b\u9078 \\(y\\)\u3002suf[i] \u5247\u4ee3\u8868 pre[i - 1] \u9078\u5b8c\u5f8c\u518d\u7e7c\u7e8c\u9078 \\(y_i\\sim y_n\\) \u7684 \\(y\\)\uff0c\u76f4\u5230 \\(y\\) \u6709 \\(b\\) \u500b\u3002</p> <p> </p> <p>ref: my github</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define x first\n#define y second\n\nusing namespace std;\n\nconst int MAXN = 3e5 + 5;\nint n;\nint a, b;\nint pre[MAXN], suf[MAXN];\n\nstruct Node {\n    int x, y;\n    bool operator&lt;(const Node &amp;rhs) const {\n        return x &gt; rhs.x;\n    }\n};\n\nvoid build_pre(vector&lt;Node&gt; &amp;v) {\n    priority_queue&lt;int&gt; pq;\n    int sum = 0;\n    for (int i = 1; i &lt;= a; i++) {\n        pq.push(v[i].y - v[i].x);\n        sum += v[i].x;\n        pre[i] = sum;\n    }\n    for (int i = a + 1; i &lt;= a + b; i++) {\n        pq.push(v[i].y - v[i].x);\n        sum += pq.top();\n        pq.pop();\n        sum += v[i].x;\n        pre[i] = sum;\n    }\n}\nvoid build_suf(vector&lt;Node&gt; &amp;v) {\n    priority_queue&lt;int&gt; pq;\n    int sum = 0;\n    for (int i = n; i &gt; a + b; i--) {\n        pq.push(v[i].y);\n    }\n    for (int i = a + b; i &gt;= a + 1; i--) {\n        pq.push(v[i].y);\n        sum += pq.top();\n        pq.pop();\n        suf[i] = sum;\n    }\n}\nsigned main() {\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; n;\n    vector&lt;Node&gt; v(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; v[i].x &gt;&gt; v[i].y;\n    }\n    sort(v.begin() + 1, v.end());\n    build_pre(v);\n    build_suf(v);\n    int ans = 0;\n    for (int i = a; i &lt;= a + b; i++) {\n        ans = max(ans, pre[i] + suf[i + 1]);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> JOI Final 2022 \u9078\u8209 <p>\u6709 \\(n\\) \u500b\u5dde\uff0c\u82e5\u5728\u7b2c \\(i\\) \u500b\u5dde\u6f14\u8b1b \\(a_i\\) \u5c0f\u6642\u53ef\u7372\u5f97\u4e00\u5f35\u9078\u7968\uff0c\u82e5\u6f14\u8b1b \\(b_i\\) \u5c0f\u6642\u53ef\u7372\u5f97\u4e00\u4f4d\u5354\u4f5c\u8005\u3002\u591a\u4e00\u500b\u5354\u4f5c\u8005\u5c31\u53ef\u8b93\u6642\u9593\u52a0\u901f\u5169\u500d\uff0c\u554f\u8981\u7372\u5f97 \\(k\\) \u5f35\u9078\u7968\u7684\u6700\u5c0f\u8017\u6642</p> <p>\\(k\\le n\\le 500, 1\\le a_i\\le 1000, a_i\\le b_i\\le 1000\\) \u6216 \\(b_i=-1\\)</p> \u601d\u8def <p>\u5bb9\u6613\u60f3\u5230\u4e00\u500b\u932f\u8aa4\u7684\u8caa\u5fc3: </p> <ul> <li> <p>\u6309\u7167 \\(b_i\\) \u5c0f\u5230\u5927\u6392\u5e8f</p> </li> <li> <p>\u679a\u8209\u5206\u754c\u7dda</p> <ul> <li> <p>\u524d\u9762\u90fd\u9078 \\(b_i\\)</p> </li> <li> <p>\u5f8c\u9762\u9078\u6700\u5c0f\u7684\u5e7e\u500b \\(a_i\\)</p> </li> </ul> </li> </ul> <p>\u4f46\u6703\u767c\u73fe\uff0c\u53ef\u80fd\u4e00\u4e9b\u9078\u4e2d\u7684 \\(b_i\\) \u5c0d\u61c9\u7684 \\(a_i\\) \u5f88\u5c0f\uff0c\u9019\u6642\uff0c\u6211\u5011\u6311\u9078\u9019\u4e9b \\(a_i\\)\uff0c\u53ef\u80fd\u6703\u66f4\u597d\u3002\u8209\u4f8b\u4f86\u8aaa:</p> <pre><code>a   b\n------\n1   99\n99  100\n100 101\n</code></pre> <p>\u9019\u6642\u82e5\u6211\u5011\u4ee5 b, b, a \u7684\u65b9\u5f0f\u6311\uff0c\u8017\u6642 \\(99+100/2+100/4=174\\) \u5c0f\u6642\uff0c\u4f46\u82e5\u6211\u5011\u4ee5 a, b, a \u7684\u65b9\u5f0f\u6311\u8017\u6642 \\(1/2+100/2+100=150.5\\)\uff0c\u66f4\u512a\u3002</p> <p>\u6240\u4ee5\u5c31\u8b8a\u6210: </p> <ul> <li> <p>\u6309 \\(b_i\\) \u5c0f\u5230\u5927\u6392\u5e8f</p> </li> <li> <p>\u679a\u8209\u5206\u754c\u7dda: </p> <ul> <li> <p>\u5206\u754c\u7dda\u524d\uff0c\u5c0d\u65bc\u6bcf\u4e00\u500b\u8981\u99ac\u9078 \\(a_i\\)\uff0c\u8981\u99ac\u9078 \\(b_i\\) \u2192 dp</p> </li> <li> <p>\u5c0d\u65bc\u5f8c\u9762\uff0c\u9078 \\(a_i\\) \u6700\u5c0f\u7684 \\(k-i\\) \u500b \u2192 \u9810\u8655\u7406</p> </li> </ul> </li> </ul>"},{"location":"basic/greedy/problem/#_4","title":"\u5747\u5206\u7d19\u724c","text":"\u6d1b\u8c37 P1031 [NOIP2002 \u63d0\u9ad8\u7ec4] \u5747\u5206\u7eb8\u724c <p>\u7d66 n \u5806\u77f3\u982d\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5f9e\u4e00\u5806\u62ff\u53d6\u82e5\u5e72\u500b\u653e\u5230\u76f8\u9130\u7684\u4e00\u5074\uff0c\u554f\u6700\u5c11\u6b21\u6578\u4f7f\u6bcf\u5806\u500b\u6578\u7686\u76f8\u7b49</p> <p>\\(n\\le 100, 1\\le a_i\\le 10^4, \\sum a_i\\) \u70ba \\(n\\) \u7684\u500d\u6578</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u5148\u5f97\u5230\u4e00\u500b difference \u5e8f\u5217 c[i] = avg - a[i]</p> <p>\u5f9e i = 0...(n - 1)\uff0c\u82e5 c[i] != 0\uff0c\u5247\u5c07 c[i + 1] += c[i]\uff0c\u64cd\u4f5c\u6b21\u6578 +1</p> CSES - Food Division <p>\u6709 \\(n\\) \u500b\u4eba\u570d\u6210\u4e00\u5708\uff0c\u7b2c \\(i\\) \u500b\u4eba\u76ee\u524d\u7684\u5206\u6578\u70ba \\(a_i\\)\uff0c\u671f\u671b\u5206\u6578\u70ba \\(b_i\\)\u3002\u6bcf\u6b21\u64cd\u4f5c\u80fd\u8b93\u4e00\u500b\u4eba\u5206\u4e00\u55ae\u4f4d\u7684\u5206\u6578\u7d66\u76f8\u9130\u7684\u4eba\uff0c\u554f\u6700\u5c11\u5e7e\u6b21\u64cd\u4f5c\uff0c\u4f7f\u6bcf\u500b\u4eba\u90fd\u7b54\u5230\u81ea\u5df1\u7684\u671f\u671b\u5206\u6578\u3002</p> <p>\\(n\\le 2\\times 10^5, 0\\le a_i,b_i\\le 10^6\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u5148\u5f97\u5230\u4e00\u500b difference \u5e8f\u5217 \\(c\\)\uff0c\u4f7f \\(c_i=a_i-b_i\\)\uff0c\u9019\u6a23\u554f\u984c\u5c31\u8b8a\u6210: \u7d66\u4e00\u500b\u9663\u5217\uff0c\u6bcf\u6b21\u53ef\u79fb\u52d5\u4e00\u55ae\u4f4d\u7684\u5206\u6578\uff0c\u6700\u5c11\u5e7e\u6b21\u4f7f\u6eff\u9805\u90fd\u8b8a \\(0\\)\u3002</p> <p>\u5148\u9650\u5236\u984c\u76ee\u7d66\u7684\u662f\u9663\u5217\uff0c\u5f9e\u7b2c\u4e00\u9805\u958b\u59cb\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u8ddf\u53f3\u908a\u501f\u7684\u65b9\u5f0f\uff0c\u4f86\u8b93\u6bcf\u4e00\u9805\u90fd\u8b8a\u6210 0\u3002</p> <pre><code>ex1:\n[5 -3 -1 4 -3 -2]\n[0 2 -1 4 -3 -2] +5\n[0 0 1 4 -3 -2] +2\n[0 0 0 5 -3 -2] +1\n[0 0 0 0 2 -2] +5\n[0 0 0 0 0 0] +2\ncost = 5+2+1+5+2\n\nex2:\n[-7 2 -1 2 4]\n[0 -5 -1 2 4] 7\n[0 0 -6 2 4] 5\n[0 0 0 -4 4] 6\n[0 0 0 0 0] 4\ncost = 7+5+6+4\n</code></pre> <p>\u9019\u5176\u5be6\u5c31\u662f\u5728\u505a\u4e00\u500b\u524d\u7db4\u548c\uff0c\u800c cost \u5c31\u662f \\(\\sum \\limits_{i=1}^n |pre_i|\\)\uff0c\u56de\u5230\u74b0\u7684\u554f\u984c\uff0c\u6211\u5011\u767c\u73fe\u4e00\u5b9a\u5b58\u5728\u4e00\u500b\u908a\uff0c\u65b7\u6389\u5f8c\u9084\u662f\u80fd\u9054\u5230\u6700\u4f73\u89e3\uff08\u898b\u4e0b\u65b9\uff09\u3002\u6240\u4ee5\u73fe\u5728\u5c31\u662f\u8981\u66b4\u529b\u679a\u8209\u8981\u5207\u5728\u54ea\uff0c\u6703\u6709 n \u500b\u53ef\u80fd\u7684\u4e00\u7dad\u554f\u984c\uff0c\u56e0\u70ba\u662f\u74b0\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5148\u5217\u51fa\u4e00\u500b\u9577\u5ea6\u70ba 2n \u7684\u9663\u5217\uff0c\u90a3\u9ebc\u5c0d\u65bc\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5340\u9593 [l, r]\uff0c\u7b54\u6848\u5c31\u662f \\(\\sum |pre_i-pre_{l-1}|\\)\uff0c\u9019\u500b\u53ef\u4ee5\u7528\u7dda\u6bb5\u6a39\u4f86\u7dad\u8b77\u3002</p> <pre><code>a   [-7   2  -1   2  4  -7   2  -1   2  4]\npre  -7  -5  -6  -4  0  -7  -5  -6  -4  0 \n</code></pre> <p>\u5176\u5be6\u89c0\u5bdf\u53ef\u767c\u73fe\uff0c\u9577\u5ea6\u70ba n \u7684\u5340\u9593\u6240\u5f62\u6210\u7684 \\(pre_i\\) \u7684\u96c6\u5408\u90fd\u662f\u4e00\u6a23\u7684\uff0c\u800c\u4e14 \\(pre_{l-1}\\) \u4e5f\u662f\u9019\u500b\u96c6\u5408\u7684\u5176\u4e2d\u4e00\u500b\u6578\u5b57\uff0c\u6240\u4ee5\u6839\u64da\u6578\u5b78\uff0c\u9078\u96c6\u5408\u5167\u7684\u4e2d\u4f4d\u6578\u5c31\u6703\u662f\u6700\u597d\u7684\u3002</p> <p>\u6211\u5011\u60f3\u8b49\u660e: \u6bcf\u500b node \u51fa\u53bb &amp; \u9032\u4f86\u7684\u91cf\u4e0d\u8b8a\u7684\u524d\u63d0\u4e0b\uff0c\u628a\u4e00\u689d edge \u7684\u6d41\u91cf\u8b8a\u6210 0</p> <p>\u5c0d\u65bc\u4e00\u689d\u908a\u5148\u5c07\u6d41\u91cf -1\uff0c\u90a3\u4f9d\u5e8f:</p> <ul> <li> <p>\u82e5\u5c0d\u65bc\u4e00\u500b\u9ede\u5169\u908a\u6d41\u5411\u90fd\u662f\u76f8\u540c\u7684\uff0c\u5247\u5169\u908a\u90fd\u4e00\u8d77 +1 or -1\uff0c\u4f7f\u5f97\u6d41\u51fa\u53bb\u7684\u7e3d\u91cf\uff08\u5dee\u503c\uff09\u4e0d\u8b8a</p> </li> <li> <p>\u82e5\u5c0d\u65bc\u4e00\u500b\u9ede\u5169\u908a\u7684\u6d41\u5411\u662f\u76f8\u53cd\u7684\uff0c\u5247\u4e00\u908a +1\uff0c\u4e00\u908a\u5c31\u8981 -1\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u4f7f\u5f97\u6d41\u51fa\u53bb\u7684\u7e3d\u91cf\uff08\u7e3d\u548c\uff09\u4e0d\u8b8a</p> </li> </ul> <p> </p> JOI Final 2019 \u786c\u5e01\u6536\u85cf <p>\u6709\u4e00\u500b\u4e8c\u7dad\u5ea7\u6a19\u5e73\u9762\uff0c\u6709 \\(2n\\) \u500b\u786c\u5e63\uff0c\u7b2c \\(i\\) \u500b\u5728 \\((x_i, y_i)\\)\u3002\u8981\u5c07\u6240\u6709\u7684\u786c\u5e63\u653e\u5230 \\(1 \\le x \\le n, 1\\le y\\le 2\\) \u7684\u5340\u57df\u4e2d\uff0c\u6bcf\u683c\u6070\u597d\u653e\u4e00\u500b\uff0c\u53ef\u5c07\u786c\u5e63\u7528\u66fc\u54c8\u9813\u8ddd\u96e2\u79fb\u52d5\uff0c\u554f\u6700\u5c11\u79fb\u52d5\u6b21\u6578</p> <p>\\(n\\le 10^5, -10^9\\le x_i, y_i\\le 10^9\\)</p> \u601d\u8def <p>\u6bcf\u500b\u9ede\u90fd\u76f4\u63a5\u8d70\u5230\u6700\u8fd1\u7684\u7bc4\u570d\u5167\u7684\u9ede\u4e0a\uff0c\u4ee5\u7bc4\u4f8b\u6e2c\u8cc7\u4f86\u8aaa\u5c31\u662f\u50cf\u4e0b\u5716</p> <p> </p> <p>\u554f\u984c\u5c31\u8b8a\u6210\u8981\u5c07\u7bc4\u570d\u5167\u7684\u9ede\u5e73\u5747\u5206\u914d\uff0c\u6211\u5011\u5148\u8003\u616e\u4e00\u7dad\u7684\u4f5c\u6cd5\uff0c\u4e5f\u5c31\u662f\u5f9e\u5de6\u5230\u53f3\u770b\u76ee\u524d\u5269\u4e0b\u591a\u5c11\uff0c\u5047\u8a2d\u662f x\uff0c\u90a3\u5c31\u5c07 x \u55ae\u4f4d\u90fd\u79fb\u5230\u53f3\u908a\u90a3\u683c\uff0c\u79fb\u52d5\u6b21\u6578 += |x|\uff0c\u56de\u5230\u539f\u672c\u7684\u554f\u984c\uff0c\u6211\u5011\u5c31\u53ea\u8981\u591a\u8003\u616e\u4e0a\u3001\u4e0b\u7684\u79fb\u52d5\u5373\u53ef\u3002\u5177\u9ad4\u4f86\u8aaa\u5c31\u662f\u5f9e\u679a\u8209 i = 1...n\uff0c\u5c0d\u65bc\u7b2c i \u5217\u7684\u5169\u500b\u683c\u5b50 (i, 1) \u548c (i, 2)\uff0c\u5148\u5167\u90e8\u628a\u7f3a\u5c11/\u591a\u9918\u7684\u786c\u5e63\u6d88\u5316\u6389\uff0c\u7136\u5f8c\u7559\u4e0b\u6700\u5c11\u7684\u90a3\u5e7e\u500b\u786c\u5e63\u5f80\u4e0b\u4e00\u500b\u5217\u7684\u5c0d\u61c9\u683c\u5b50\u7d2f\u52a0\uff0c\u540c\u6642\u5c07\u7b54\u6848\u7d2f\u52a0\u5176\u4e2d\u7684\u6b65\u6578\u5373\u53ef\uff0c\u8a73\u898b\u4ee3\u78bc\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 1e5 + 10;\nint cnt[MAXN][3], n;\n\nsigned main() {\n    cin &gt;&gt; n;\n    int ans = 0;\n    for (int i = 1; i &lt;= 2 * n; i++) {\n        int x, y, xpos, ypos;\n        cin &gt;&gt; x &gt;&gt; y;\n        if (x &lt; 1) {\n            xpos = 1;\n        } else if (x &gt; n) {\n            xpos = n;\n        } else {\n            xpos = x;\n        }\n        if (y &lt; 1) {\n            ypos = 1;\n        } else if (y &gt; 2) {\n            ypos = 2;\n        } else {\n            ypos = y;\n        }\n        cnt[xpos][ypos]++;\n        ans += abs(xpos - x) + abs(ypos - y);\n    }\n    int up = 0, down = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        up += cnt[i][1] - 1;\n        down += cnt[i][2] - 1;\n        // \u4e0a, \u4e0b\u8abf\u6574\n        if (up &gt; 0 &amp;&amp; down &lt; 0) {\n            int moved = min(-down, up);\n            up -= moved;\n            down += moved;\n            ans += moved;\n        } else if (up &lt; 0 &amp;&amp; down &gt; 0) {\n            int moved = min(down, -up);\n            up += moved;\n            down -= moved;\n            ans += moved;\n        }\n        // \u5de6\u53f3\u8abf\u6574\n        ans += abs(up) + abs(down);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> USACO 2016 FEB Circular Barn G <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u74b0\uff0c\u7b2c \\(i\\) \u500b\u4f4d\u7f6e\u6709 \\(a_i\\) \u982d\u725b\uff0c\u74b0\u4e0a\u7e3d\u5171\u6709 \\(n\\) \u982d\u725b\u3002\u4e00\u982d\u725b\u82e5\u958b\u59cb\u8207\u7d50\u675f\u7d93\u904e\u4e86 \\(d\\) \u683c\uff0c\u5247\u82b1\u8cbb \\(d^2\\)\u3002\u554f\u6bcf\u500b\u4f4d\u7f6e\u6070\u6709 1 \u982d\u725b\u7684\u6700\u5c0f\u82b1\u8cbb\u662f\u591a\u5c11\u3002</p> <p>\\(3\\le n\\le 10^5\\)</p> \u601d\u8def <p>\u9996\u5148\u6211\u5011\u50cf\u4e0a\u9762\u7684\u984c\u76ee\u4e00\u6a23\uff0c\u5c0d\u65bc\u6bcf\u4e00\u683c\u6c42\u51fa\u6211\u5011\u771f\u6b63\u9700\u8981\u591a\u5c11\uff0c\u4e5f\u5c31\u662f a[i] -= 1\uff0c\u518d\u4f86\u6211\u5011\u61c9\u8a72\u53bb\u60f3\u5982\u4f55\u627e\u4e00\u500b\u597d\u7684\u8d77\u9ede\uff0c\u78ba\u4fdd\u9019\u500b\u8d77\u9ede\u958b\u59cb\u5f80\u5f8c\u80fd\u5920\u586b\u6eff\u6240\u6709\u7a7a\u4f4d\uff08\u7cbe\u78ba\u4e00\u9ede\u4f86\u8aaa\u5c31\u662f\u4ee5\u9019\u500b\u597d\u7684\u8d77\u9ede\u9806\u6642\u91dd\u7e5e\u4e00\u5708\uff0c\u4efb\u610f\u6642\u523b\u524d\u7db4\u548c\u90fd\u5fc5\u9808 &gt;= 0\uff09\uff0c\u56e0\u70ba\u6211\u5011\u767c\u73fe\u5982\u679c\u6211\u5011\u6700\u6015\u7684\u5c31\u662f\u628a\u725b\u79fb\u8457\u79fb\u8457\u5c31\u4e0d\u5920\u4e86\u3002\u9019\u5176\u5be6\u6709\u9ede\u985e\u4f3c\u5168\u570b\u8cfd 2021 pC\u975e\u8ca0\u74b0\u7684\u6027\u8cea\uff0c\u5c31\u662f\u6211\u5011\u8981\u6311\u4e00\u500b\u6700\u5927\u7684 suffix\u3002</p> <p> </p> <p>\u6240\u4ee5\u6211\u5011\u73fe\u5728\u8a72\u60f3\u5982\u4f55\u79fb\u52d5\u725b\u7fa4\u6bd4\u8f03\u597d\uff0c\u6211\u5011\u767c\u73fe\u6709\u4e00\u500b\u6027\u8cea\uff1a\u5982\u679c\u6709 \\(1\\) \u982d\u5976\u725b\u5728 \\(a\\) \u9ede\uff0c\\(1\\) \u982d\u5976\u725b\u5728 \\(b\\) \u9ede\uff0c\u9084\u6709\u4e00\u500b\u6c92\u6709\u5976\u725b\u7684 \\(c\\) \u9ede\uff0c\u4e14 \\(c &gt; b &gt; a\\)\uff0c\u8981\u60f3\u6709\u4e00\u982d\u5976\u725b\u5728 \\(b\\) \u9ede\uff0c\u4e00\u982d\u5976\u725b\u5728 \\(c\\) \u9ede\uff0c\u65b9\u6848 \\(a\\to b, b\\to c\\) \u6bd4\u65b9\u6848 \\(a\\to c\\) \u597d\u3002\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u8981\u8b93\u8d8a\u65e9\u958b\u59cb\u79fb\u52d5\u7684\u5976\u725b\u8d8a\u5feb\u5c31\u5b9a\u4f4d\uff0c\u7136\u5f8c\u8b93\u5728\u7576\u524d\u4f4d\u7f6e\u4e0a\u65b0\u7684\u5976\u725b\u958b\u59cb\u79fb\u52d5\u3002\u6211\u5011\u5b9a\u7fa9\u76ee\u524d\u958b\u59cb\u79fb\u52d5\uff0c\u4f46\u9084\u6c92\u5c31\u5b9a\u4f4d\u7684\u5976\u725b\u53eb\u505a\u300c\u727d\u8457\u8d70\u300d\u3002\u53ef\u4ee5\u7528\u968a\u5217\uff08queue\uff09\u5132\u5b58\u6240\u6709\u727d\u8457\u8d70\u7684\u5976\u725b\u7684 index\uff0c\u5230\u4e86\u4e00\u500b\u4f4d\u7f6e\u6642\uff0c\u82e5\u9019\u500b\u4f4d\u7f6e a[i] = -1\uff0c\u5247\u6311\u968a\u5217\u4e2d\u6700\u65e9\u88ab\u727d\u8457\u8d70\u7684\u7559\u5728\u8a72\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f q.front()\uff0c\u5176\u4ed6\u7684\u7e7c\u7e8c\u727d\u8457\u8d70\uff0c\u5f80\u5f8c\u770b\uff1b\u5426\u5247\u6211\u5011\u6709\u4e00\u500b\u540d\u984d\u53ef\u4ee5\u8b93\u4e00\u982d\u5976\u725b\u5c31\u5b9a\u4f4d\uff08\u56e0\u70ba\u4e00\u500b\u4f4d\u7f6e\u6700\u591a\u53ea\u80fd\u7559\u4e0b\u4e00\u500b\uff09\uff0c\u5176\u4ed6\u7684\u7e7c\u7e8c\u5f80\u5f8c\u9077\uff0c\u6b64\u6642\u6211\u5011\u4e00\u5b9a\u6703\u6311\u968a\u5217\u4e2d\u6700\u65e9\u88ab\u727d\u8457\u8d70\u7684\uff0c\u4e5f\u5c31\u662f q.front()\uff0c\u4f86\u8ddf\u5728\u7576\u524d\u4f4d\u7f6e\u4e0a\u7684\u5176\u4e2d\u4e00\u982d\u5976\u725b\u9032\u884c\u300c\u4ea4\u63db\u300d\u3002\u800c\u5269\u4e0b\u7684\u5976\u725b\u5c31 push \u5230 queue \u88e1\u9762\uff0c\u5c07\u4ed6\u5011\u958b\u59cb\u727d\u8457\u8d70\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long \nusing namespace std;\n\nint n, cnt[212345], suf[114514];\n\nint cost(int d) {\n    return d * d;\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; cnt[i];\n        cnt[i] -= 1;\n    }\n    for (int i = n - 1; i &gt;= 0; i--) { \n        suf[i] = suf[i + 1] + cnt[i];\n    }\n    int max_suf = 0, start_idx = 0;\n    for (int i = 0; i &lt; n; i++)  {\n        if (suf[i] &gt; max_suf) {\n            start_idx = i;\n            max_suf = suf[i];\n        }\n    }\n    for (int i = n; i &lt; n * 2; i++) {\n        cnt[i] = cnt[i - n]; \n    }\n    int ans = 0;\n    queue&lt;int&gt; q;                                        \n    for (int i = start_idx; i &lt; start_idx + n; i++) {\n        if (cnt[i] &gt;= 0) {\n            // \u4ea4\u63db\n            if (q.size()) {  \n                ans += cost(i - q.front());\n                q.pop();  \n                q.push(i);\n            }\n            // \u5269\u4e0b\u7684\u727d\u8457\u8d70\n            for (int j = 1; j &lt;= cnt[i]; j++) {\n                q.push(i);\n            }\n            cnt[i] = 0;\n        } else {\n            ans += cost(i - q.front()); \n            q.pop();\n            cnt[i] = 0;\n        }\n    }   \n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"basic/greedy/problem/#_5","title":"\u5176\u4ed6\u984c\u76ee","text":"2023 TOI 1\u6a21 pB. \u6700\u4f73\u5287\u7167 (stills) <p>\u5728\u4e00\u7dad\u6578\u7dda\u4e0a\u6709 \\(n\\) \u500b interval \\([l_i, r_i]\\)\uff0c\u8981\u6c42\u9078\u64c7\u6700\u5c11\u7684 point\uff0c\u4f7f\u5f97\u6bcf\u500b interval \u90fd\u81f3\u5c11\u5305\u542b\u4e00\u500b point\uff0c\u4e14\u6240\u9078\u9ede\u7684 cost \u7e3d\u548c\u6700\u5c0f\u3002</p> <p>\u5176\u4e2d\u9ede\u7684 cost \u8a08\u7b97\u65b9\u5f0f\u70ba\uff1a</p> \\[\\text{cost}(t) = \u6709\u5305\u542b \\texttt{ point } t \\text{ } \u7684 \\text{ } \\texttt{interval} \\text{ } \u7684\\text{ } |(r_i - t) - (t - l_i)| \\text{ }\u7684\u7e3d\u548c\\] \u984c\u89e3 <p>\u6b65\u9a5f\u4e00\uff0c\u96e2\u6563\u5316:</p> <p>\u5229\u7528\u7dda\u6bb5\u7684\u958b\u982d \\(l_i\\) \u548c\u7d50\u5c3e \\(r_i\\) \u53ef\u4ee5\u628a\u6578\u7dda\u5207\u51fa \\(2n-1\\) \u500b blocks\u3002</p> <p>\u9019\u6a23\u4e00\u4f86\uff0c\u6bcf\u500b interval \u53ef\u4ee5\u7576\u6210\u662f\u67d0\u500b block \u7684\u5de6\u754c\u958b\u59cb\u5230\u67d0\u500b block \u7684\u53f3\u754c\u7d50\u675f\u3002</p> <p>\u6bcf\u500b block \u53ea\u6703\u6709\u4e00\u500b\u6700\u597d\u7684 \\(t\\)\uff0c\u5148\u8a08\u7b97\u51fa\u4e00\u500b\u9663\u5217 \\(w[0], ..., w[2n-2]\\) \u8868\u793a\u6bcf\u500b block \u88e1\u9762\u6700\u597d\u7684\u4f4d\u7f6e\u7684 cost</p> <p>\u6b65\u9a5f\u4e8c\uff0c\u8a08\u7b97 \\(w[i]\\)\uff1a</p> <p>\u6bcf\u500b block \u7684 \\(w[i]\\) \u8a08\u7b97\u65b9\u5f0f \\(|(r_i - t) - (t - l_i) |\\) \u4e5f\u53ef\u4ee5\u5beb\u6210 \\(2|(l_i+r_i)/2 - t|\\) \u4e5f\u5c31\u662f \\(t\\) \u5230 \\([l_i, r_i]\\) \u4e2d\u9593\u9ede\u7684\u8ddd\u96e2\u7684\u5169\u500d\u3002</p> <p>\u4e5f\u5c31\u662f\u8aaa\uff0c\u4e00\u500b block \u88e1\u9762\u4f4d\u7f6e \\(t\\) \u7684 cost \u5c31\u662f \\(t\\) \u5230\u6240\u6709\u6709\u5305\u542b\u9019\u500b block \u7684\u5340\u9593\u7684\u4e2d\u9593\u9ede\u7684\u8ddd\u96e2\u7e3d\u548c\u7684\u5169\u500d\u3002</p> <p>\u4ee4 \\(m_i = (l_i+r_i)/2\\)\uff0c</p> \\[|m_1-t| + |m_2-t| + \\cdots |m_k-t|\\] <p>\u9019\u500b\u51fd\u6578\u7684\u6700\u5c0f\u503c\u767c\u751f\u65bc \\(t\\) \u7b49\u65bc \\(m_i\\) \u7684\u4e2d\u4f4d\u6578</p> <p>\u4e0d\u904e \\(t\\) \u9700\u8981\u88ab\u9650\u5236\u5728 block \u7684\u7bc4\u570d\u5167\uff0c\u6240\u4ee5\u9700\u8981\u5206\u5e7e\u500b case \u8a0e\u8ad6</p> <ul> <li> <p>\\(m_i\\) \u7684\u4e2d\u4f4d\u6578\u5728\u5728 block \u5167\uff0c\u76f4\u63a5\u8b93 \\(t = m_i\\) \u7684\u4e2d\u4f4d\u6578</p> </li> <li> <p>\\(m_i\\) \u7684\u4e2d\u4f4d\u6578\u5728\u5728 block \u5de6\u908a\uff0c\u76f4\u63a5\u8b93 \\(t =\\) block \u5de6\u754c</p> </li> <li> <p>\\(m_i\\) \u7684\u4e2d\u4f4d\u6578\u5728\u5728 block \u53f3\u908a\uff0c\u76f4\u63a5\u8b93 \\(t =\\) block \u53f3\u754c</p> </li> </ul> <p>\u6383\u63cf\u7dda\u7684\u904e\u7a0b\u9700\u8981\u5c0d\u6bcf\u500b block \u7dad\u8b77\u76ee\u524d\u6709\u54ea\u4e9b \\(m_i\\) \u53ef\u4ee5\u7528\uff0c\u4e26\u4e14\u7dad\u8b77\u9019\u4e9b \\(m_i\\) \u7684\u4e2d\u4f4d\u6578\u3002\u6c7a\u5b9a\u597d \\(t\\) \u4e4b\u5f8c\uff0c\u9700\u8981\u900f\u904e\u4e00\u4e9b\u8cc7\u6599\u7d50\u69cb\u5728 \\(O(\\log n)\\) \u6642\u9593\u8a08\u7b97\u51fa \\(|m_1-t| + |m_2-t| + ... |m_k-t|\\)\uff0c\u9019\u500b\u90e8\u5206\u53ef\u4ee5\u4f7f\u7528\u7dda\u6bb5\u6a39\u9054\u6210\u3002</p> <p>\u6b65\u9a5f\u4e09\uff0c dp \u7b97\u7b54\u6848\uff1a</p> <p>\\(dp(i)\\) \u8868\u793a\u6700\u5f8c\u4e00\u500b\u9ede\u9078\u5728 block \\(i\\) \uff0c\u4e14\u5de6\u754c\u5728 block \\(i\\) \u4ee5\u524d\u7684\u6240\u6709 interval \u90fd\u6709\u5305\u542b\u5230\u81f3\u5c11\u4e00\u500b\u9ede\u7684\u6700\u597d\u7b54\u6848\u3002</p> <p>\\(dp(i) = \\max dp(j) + w[i]\\), \\(j\\) \u53ef\u4ee5\u9078\u7684\u689d\u4ef6\u662f\u6c92\u6709 interval \u958b\u982d\u7d50\u5c3e\u90fd\u5728 block (\\(j+1\\)) ~ block (\\(i - 1\\))</p> <p>\u9019\u4e9b\u7684\u53ef\u4ee5\u7528\u4f86\u8f49\u79fb\u7684 \\(j\\) \u6703\u662f\u9023\u7e8c\u7684\u4e00\u6bb5\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5957\u7528\u8cc7\u6599\u7d50\u69cb\u5feb\u901f\u8a08\u7b97\u51fa \\(dp(i)\\)\uff0c\u8a08\u7b97 dp \u7684\u7e3d\u6642\u9593\u662f \\(O(n) \\times\\) \u67e5\u8a62\u6642\u9593\u3002\u8cc7\u6599\u7d50\u69cb\u7684\u90e8\u5206\u53ef\u4ee5\u7528\u55ae\u8abf\u968a\u5217 \\(O(1)\\) \u67e5\u8a62\uff0c\u6216\u662f\u7528\u7dda\u6bb5\u6a39 \\(O(\\log n)\\) \u67e5\u8a62</p> <p>ref : https://hackmd.io/@algoseacow/rJw_DISe3</p> Parallel Scheduling Problem TIOJ 1072. \u8ab0\u5148\u665a\u9910 <p>\u6709 \\(n\\) \u500b\u4eba\u8981\u5403\u98ef\uff0c\u7b2c \\(i\\) \u500b\u4eba\u60f3\u5403\u7684\u98df\u7269\u9700\u8981 \\(C_i\\) \u6642\u9593\u624d\u80fd\u716e\u597d\uff0c\u800c\u4ed6\u5403\u6389\u98df\u7269\u6240\u82b1\u7684\u6642\u9593\u70ba \\(E_i\\) \uff0c\u4e14\u5eda\u5e2b\u540c\u4e00\u6642\u9593\u53ea\u80fd\u716e\u4e00\u500b\u98df\u7269\uff0c\u6700\u5c0f\u5316\u6240\u6709\u4eba\u90fd\u5403\u5b8c\u98ef\u7684\u6642\u9593\u3002</p> <p>\\(n\\le 10^4, 1\\le C_i, E_i\\le 1000\\)</p> \u601d\u8def <p>\u4e0d\u7ba1\u54ea\u9053\u98df\u7269\u5148\u716e\uff0c\u7e3d\u5171\u9700\u8981\u716e\u7684\u6642\u9593\u90fd\u4e00\u6a23\u3002\u60f3\u8981\u7e2e\u77ed\u7e3d\u5de5\u6642\uff0c\u6700\u597d\u5148\u716e\u5403\u98ef\u6642\u9593\u8f03\u9577\u7684\u98df\u7269\u3002  \u85cd\u8272\u4ee3\u8868\u716e\u7684\u6642\u9593\uff0c\u6a58\u8272\u4ee3\u8868\u5403\u7684\u6642\u9593 </p> \u8b49\u660e <p>\u5047\u8a2d\u7531\u6f14\u7b97\u6cd5\u5f97\u5230\u7684\u5403\u98ef\u7684\u9806\u5e8f\u70ba \\(a_1, a_2,\\ldots, a_n\\) \uff0c\u5247\u6b64\u5e8f\u5217\u4e00\u5b9a\u6eff\u8db3\u7279\u6027 \\(E_{a_i} \\ge E_{a_{i+1}}\\) \u3002\u5047\u8a2d\u6709\u53e6\u5916\u4e00\u7d44\u5403\u98ef\u9806\u5e8f\u70ba \\(b_1, b_2, \u00b7 \u00b7 \u00b7 , b_n\\)\uff0c\u4e14\u4e0d\u6eff\u8db3\u8a72\u7279\u6027\uff0c\u5247\u4e00\u5b9a\u5b58\u5728\u5169\u500b\u76f8\u9130\u7684\u4eba \\(b_i , b_i+1\\) \u6eff\u8db3 \\(E_{b_i} &lt; E_{b_{i+1}}\\) \u3002\u5982\u679c\u5c07\u9019\u5169\u500b\u4eba\u7684\u5403\u98ef\u9806\u5e8f\u5c0d\u8abf\uff0c \u5247\u8003\u616e\u7b2c \\(j\\) \u500b\u4eba\u5403\u98ef\u7d50\u675f\u7684\u6642\u9593 (\u5c0d\u8abf\u524d\u70ba \\(t_1(j)\\) \uff0c\u5c0d\u8abf\u5f8c\u70ba \\(t_2(j)\\) )\uff0c\u53ef\u4ee5\u4ee5\u4e0b\u56db\u7a2e\u4eba\u7684\u60c5\u6cc1\uff1a </p> <ol> <li>\\(j &lt; i\\)\uff1a     \u5c0d\u8abf\u524d\uff0c\u7d50\u675f\u7684\u6642\u9593\u70ba \\(t_1(j) = \\sum \\limits_{k=1}^j C_{b_k} + E_{b_j}\\)\uff1b    \u5c0d\u8abf\u5f8c\uff0c\u7d50\u675f\u7684\u6642\u9593\u70ba \\(t_2(j) = \\sum \\limits_{k=1}^j C_{b_k} + E_{b_j}\\)\u3002  </li> <li> <p>\\(j = i\\)\uff1a     \u5c0d\u8abf\u524d\uff0c\u7d50\u675f\u7684\u6642\u9593\u70ba \\(t_1(j) = t_1(i)= \\sum \\limits_{k=1}^{i-1} C_{b_k} + C_{b_i}+E_{b_i}\\)     \u5c0d\u8abf\u5f8c\uff0c\u7d50\u675f\u7684\u6642\u9593\u70ba \\(t_2(j) = t_2(i)= \\sum \\limits_{k=1}^{i-1} C_{b_k} + C_{b_{i+1}}+C_{b_i}+E_{b_i}\\) \u3002</p> </li> <li> <p>\\(j = i + 1\\)\uff1a     \u5c0d\u8abf\u524d\uff0c\u7d50\u675f\u7684\u6642\u9593\u70ba \\(t_1(j) = t_1(i+1)= \\sum \\limits_{k=1}^{i-1} C_{b_k} + C_{b_i}+C_{b_{i+1}}+E_{b_{i+1}}\\) \uff1b     \u5c0d\u8abf\u5f8c\uff0c\u7d50\u675f\u7684\u6642\u9593\u70ba \\(t_2(j) = t_2(i+1)= \\sum \\limits_{k=1}^{i-1} C_{b_k} + C_{b_{i+1}}+E_{b_{i+1}}\\)\u3002 </p> </li> <li> <p>\\(j &gt; i + 1\\)\uff1a     \u5c0d\u8abf\u524d\uff0c\u7d50\u675f\u7684\u6642\u9593\u70ba \\(t_1(j) = \\sum \\limits_{k=1}^j C_{b_k} + E_{b_j}\\)\uff1b     \u5c0d\u8abf\u5f8c\uff0c\u7d50\u675f\u7684\u6642\u9593\u70ba \\(t_2(j) = \\sum \\limits_{k=1}^j C_{b_k} + E_{b_j}\\)\u3002  </p> </li> </ol> <p>\u6211\u5011\u8981\u6bd4\u8f03\u7684\u662f \\(\\max\\{t_1(j)\\}\\) \u548c \\(\\max\\{t_2(j)\\}\\) \\((1 \\le j \\le n)\\) \uff0c\u53ef\u4ee5\u767c\u73fe\u6703\u8b93 \\(t_1(j)\\) \u548c \\(t_2(j)\\) \u4e0d\u540c\u503c\u7684\u53ea\u6709 \\(j = i\\) \u548c \\(j = i + 1\\) \uff0c\u800c\u4e14 </p> \\[\\begin{cases}t_1(i + 1) \\ge t_2(i) \\\\ t_1(i + 1) \\ge t_2(i + 1)\\end{cases}\\] <p>\u6240\u4ee5 \\(\\max\\{t_1(j)\\} \\ge \\max\\{t_2(j)\\}\\)\uff0c\u4e5f\u5c31\u662f\u5c0d\u8abf\u4e4b\u5f8c\uff0c\u6700\u5f8c\u5403\u5b8c\u7684\u6642\u9593\u4e00\u5b9a\u4e0d\u6703\u6bd4\u5c0d\u8abf\u524d\u5dee\u3002 \u6700\u5f8c\uff0c\u7d93\u904e\u4e0d\u65b7\u7684\u5169\u5169\u5c0d\u8abf\uff0c\u4e00\u5b9a\u53ef\u4ee5\u5c07\u5e8f\u5217 \\(b\\) \u8b8a\u6210\u5e8f\u5217 \\(a\\) \u3002\u6700\u5f8c\u5403\u5b8c\u7684\u6642\u9593\u5fc5\u70ba\u975e\u56b4\u683c\u905e\u6e1b\uff0c\u5f97\u8b49\u5e8f\u5217 \\(a\\) \u662f\u9019\u500b\u554f\u984c\u7684\u6700\u512a\u89e3\u3002</p> <p>ref : https://www.csie.ntu.edu.tw/~sprout/algo2021/homework/hand05.pdf</p> POI 2013 Taxis <p>\u6709\u4e00\u689d\u4e00\u7dad\u6578\u7dda\uff0c\u4e00\u958b\u59cb\u5728 \\(0\\)\uff0c\\(d\\) \u70ba\u8a08\u7a0b\u8eca\u7e3d\u90e8\u7684\u4f4d\u7f6e\uff0c\u6709 \\(n\\) \u53f0\u8a08\u7a0b\u8eca\uff0c\u7b2c \\(i\\) \u53f0\u8def\u7a0b\u4e0a\u9650\u70ba \\(a_i\\)\uff0c\u554f\u6700\u5c11\u53eb\u5e7e\u53f0\u8a08\u7a0b\u8eca\u53ef\u4ee5\u5230\u9054\u4f4d\u7f6e \\(m\\)</p> <p>\\(1\\le d\\le m\\le 10^{18},n\\le 5\\times 10^5, 1\\le a_i\\le 10^{18}\\)</p> \u601d\u8def <p>\u9996\u5148\u6211\u5011\u4e00\u770b\u984c\u76ee\uff0c\u4e0d\u96e3\u767c\u73fe\uff0c\u5728\u904e\u7e3d\u90e8\u4e4b\u524d\uff0c\u4f7f\u7528\u8ddd\u96e2\u8d8a\u5c0f\u7684\u8eca\u8d8a\u6d6a\u8cbb\uff0c\u56e0\u6b64\u6211\u5011\u5c07 \\(a_i\\) \u5f9e\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u5f8c\u5f9e\u524d\u5f80\u5f8c\u4f7f\u7528\u8eca\u5373\u53ef\u3002</p> <p>\u4f46\u662f\u4ed4\u7d30\u4e00\u60f3\uff0c\u5982\u679c\u6211\u5011\u628a\u5927\u8eca\u90fd\u7528\u4e86\uff0c\u6700\u5f8c\u5269\u4e0b\u7684\u5c0f\u8eca\u662f\u6c92\u6709\u8fa6\u6cd5\u5e36\u6211\u5011\u56de\u5bb6\u7684\u3002\u6240\u4ee5\u6211\u5011\u5f97\u7559\u4e00\u8f1b\u53ef\u4ee5\u5f9e\u7e3d\u90e8\u76f4\u63a5\u56de\u5bb6\u7684\u8eca\uff08\u4e14\u8def\u7a0b\u4e0a\u9650\u76e1\u91cf\u5c0f\uff09\uff0c\u7136\u5f8c\u4f7f\u7528\u525b\u525b\u7684\u8caa\u5fc3\u7b56\u7565\u5c31\u53ef\u4ee5\u4e86\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 5e5 + 5;\nint a[MAXN];\n\nbool cmp(int a, int b) {\n    return a &gt; b;\n}\n\nsigned main() {\n    int m, d, n;\n    cin &gt;&gt; m &gt;&gt; d &gt;&gt; n;\n    for (int i = 1; i &lt;= n; ++i) {\n        cin &gt;&gt; a[i];\n    }\n    sort(a + 1, a + 1 + n, cmp);\n    int last = 0;\n    for (int i = n; i &gt;= 1; i--) {\n        if (a[i] &gt;= m - d) {\n            last = i;\n            break;\n        }\n    }\n    if (last == 0) {\n        cout &lt;&lt; \"0\\n\";\n        exit(0);\n    }\n    int now = 0, ans = 0;\n    for (int i = 1; i &lt;= n; ++i) {\n        if (i == last) continue;\n        if (now &gt;= d || m - now + d - now &lt;= a[last]) {\n            // \u5230\u9054\u7e3d\u90e8\u6216\u6b64\u8ddd\u96e2\u5c0f\u65bc\u7559\u4e0b\u7684\u8eca\u5c31\u8df3\u51fa\u5faa\u74b0\n            break;\n        } else if (a[i] &lt;= d - now) {\n            cout &lt;&lt; \"0\\n\";\n            exit(0);\n        }\n        ans++;\n        now += a[i] - (d - now);\n        // \u89e3\u91cb\u6b64\u8ddd\u96e2: \u8eca\u5148\u8981\u884c\u99db d - now \u5230\u9054\u4eba\u7684\u4f4d\u7f6e\n        if (now &gt;= m) {\n            cout &lt;&lt; ans &lt;&lt; '\\n';\n            exit(0);\n        }\n    }\n    if (m - now + d - now &gt; a[last]) {\n        cout &lt;&lt; \"0\\n\";\n    } else {\n        cout &lt;&lt; ans + 1 &lt;&lt; '\\n';\n    }\n    return 0;\n}\n</code></pre> USACO 2013 FEB Taxi G <p>\u6709 n \u500b\u4eba\u8981\u642d\u8eca\uff0c\u7b2c i \u500b\u4eba\u8981\u5f9e s[i] \u642d\u5230 t[i]\u3002\u6709\u4e00\u53f0\u51fa\u79df\u8eca\u5f9e 0 \u8981\u958b\u5230 m\uff0c\u5230\u9014\u4e2d\u9808\u628a n \u500b\u4eba\u90fd\u8f09\u5b8c\uff0c\u4e14\u4e00\u6b21\u53ea\u80fd\u8f09\u4e00\u500b\u4eba\uff0c\u554f\u6700\u5c0f\u8def\u7a0b</p> <p>\\(n\\le 10^5, m\\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u5c07\u9019\u500b\u8def\u7a0b\u5206\u6210\u300c\u6709\u8f09\u4eba\u7684\u8def\u7a0b\u300d\u8207\u300c\u7a7a\u8f09\u7684\u8def\u7a0b\u300d\u3002\u6709\u8f09\u4eba\u7684\u8def\u7a0b\u81ea\u7136\u5c31\u662f \\(\\sum |s_i - t_i|\\) \u800c\u7a7a\u8f09\u7684\u8def\u7a0b\u5c31\u662f\u7576\u8f09\u5b8c\u4e00\u500b\u4eba\u5f8c\uff0c\u6211\u5011\u8981\u524d\u5f80\u4e0b\u4e00\u500b\u8f09\u4eba\u7684\u5730\u65b9\u6240\u4ee5\u5fc5\u7136\u662f\u4e00\u500b t[i] \u5230\u4e00\u500b s[j]\u3002\u800c\u6211\u5011\u4f7f\u9019\u5169\u500b\u6578\u7d44\u4f9d\u5e8f\u5404\u81ea\u6392\u5e8f\u597d\u5f8c\u914d\u5c0d\u5c31\u6703\u5f97\u5230\u6700\u5c0f\u7684\u7d50\u679c\u3002\u53e6\u5916\uff0c0 \u8ddf m \u4e5f\u53ef\u4ee5\u8996\u70ba\u4e00\u500b\u7d42\u9ede\u8207\u8d77\u9ede\uff0c\u9019\u6a23\u8a08\u7b97\u7d50\u679c\u6bd4\u8f03\u65b9\u4fbf\u3002</p> <p>\u90a3\u70ba\u4ec0\u9ebc\u6392\u5e8f\u76f8\u6e1b\u5c31\u6700\u5c0f\u5462\uff1f\u56e0\u70ba\u4efb\u610f\u4ea4\u63db\u540c\u6578\u7d44 (s[i], t[j]) \u5fc5\u6703\u4f7f\u7d50\u679c\u589e\u5927 </p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int maxn = 1e5 + 5;\nint n, m;\nint ans, s[maxn], t[maxn];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; s[i] &gt;&gt; t[i];\n        ans += abs(s[i] - t[i]);\n    }\n    s[0] = m;\n    t[0] = 0;\n    sort(s, s + n + 1);\n    sort(t, t + n + 1);\n    for (int i = 0; i &lt;= n; i++)\n        ans += abs(s[i] - t[i]);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre> POI 2015 LAS <p>\\(n\\) \u500b\u4eba\u570d\u6210\u4e00\u5708\uff0c\u6bcf\u500b\u4eba\u7684\u5de6\u908a\u548c\u53f3\u908a\u90fd\u6709\u4e00\u500b\u98df\u7269\uff0c\u7b2c \\(i\\) \u5206\u71b1\u91cf \\(a_i\\)\uff0c\u6bcf\u500b\u4eba\u53ef\u4ee5\u5403\u6389\u4ed6\u5de6\u908a\u6216\u8005\u53f3\u908a\u7684\u98df\u7269\uff0c\u5047\u5982\u6709 \\(2\\) \u500b\u4eba\u540c\u6642\u9078\u64c7\u4e86\u4e00\u500b\u98df\u7269\uff0c\u5247\u5e73\u5206\u71b1\u91cf\u3002\u73fe\u5728\u9700\u8981\u6bcf\u4e00\u500b\u4eba\u5403\u5230\u7684\u71b1\u91cf\u662f\u4f4d\u65bc\u81ea\u5df1\u5de6\u908a\u98df\u7269\u7684\u71b1\u91cf\u548c\u53f3\u908a\u98df\u7269\u7684\u71b1\u91cf\u7684\u6700\u5927\u503c\uff0c\u4f60\u9700\u8981\u7d66\u51fa\u6bcf\u500b\u4eba\u5403\u98df\u7269\u7684\u65b9\u6848\u3002\u82e5\u7121\u89e3\uff0c\u5247\u8f38\u51fa NIE\u3002</p> <p>\\(2\\le n\\le 10^6, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u70ba\u4e86\u65b9\u4fbf\u89e3\u91cb\uff0c\u6211\u628a\u98df\u7269\u7576\u6210\u9ede\uff0c\u4eba\u7576\u6210\u908a\u4f86\u770b\uff0c\u6211\u5011\u89c0\u5bdf\u5230\u82e5\u51fa\u73fe\u76f8\u9130\u7684\u5169\u500b\u9ede \\((x,y)\\) \u6eff\u8db3 \\(2a_x &lt; a_y\\) \u6216\\(a_x &gt; 2a_y\\)\uff0c\u8868\u793a \\((x,y)\\) \u9019\u500b\u4eba\u6240\u8981\u6307\u7684\u65b9\u5411\u662f\u5df2\u7d93\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u4e00\u5b9a\u6703\u9078\u64c7 \\(a\\) \u503c\u8f03\u5927\u7684\u90a3\u4e00\u500b\uff0c\u56e0\u70ba\u5c31\u7b97\u6709\u4eba\u8ddf\u4ed6\u6436\u98df\u7269\u4ed6\u4e5f\u80fd\u5403\u5230\u71b1\u91cf\u8f03\u9ad8\u7684\u90a3\u500b\u3002</p> <p>\u6211\u5011\u53ef\u4ee5\u628a\u9019\u4e9b\u5df2\u7d93\u56fa\u5b9a\u7684\u908a\u7d66\u62d4\u6389\uff0c\u7136\u5f8c\u628a\u9019\u4e9b\u4eba\u6240\u9078\u64c7\u7684\u98df\u7269\u71b1\u91cf\u53bb\u6389\u4e00\u534a\u3002\u4e4b\u5f8c\uff0c\u5728\u9019\u4e9b\u4ee5\u56fa\u5b9a\u7684\u4eba\u76f8\u9130\u7684\u4eba\u4e2d\uff0c\u53ef\u80fd\u53c8\u6703\u51fa\u73fe\u65b0\u7684\u6eff\u8db3\u689d\u4ef6\u7684\u4eba\u3002\u6545\u800c\u6211\u5011\u63a1\u7528\u4e00\u500b\u5ee3\u641c\u7684\u601d\u60f3\uff0c\u628a\u65b0\u7684\u4eba\u4e5f\u7d66\u52a0\u5165\u4e00\u500b\u968a\u5217\u9032\u884c\u62d3\u5c55\u3002</p> <p>\u4e00\u76f4\u9032\u884c\u4e0a\u8ff0\u6b65\u9a5f\u76f4\u5230\u8a72\u56fa\u5b9a\u7684\u908a\u90fd\u56fa\u5b9a\uff0c\u5269\u4e0b\u7684\u4eba\u90fd\u6c92\u6709\u4eba\u6eff\u8db3\u689d\u4ef6\u6642\uff0c\u5c31\u4ee3\u8868\u6b64\u6642\u6bcf\u689d\u908a\u7576\u9078\u4e86\u4e00\u5074\u7684\u98df\u7269\u5f8c\uff0c\u90a3\u4e00\u5074\u7684\u98df\u7269\u5c31\u8b8a\u721b\u4e86\uff08\u56e0\u70ba\u4e0d\u7b26\u5408\u5927\u65bc\u5169\u500d\u7684\u90a3\u500b\u689d\u4ef6\uff0c\u6240\u4ee5\u4e00\u65e6\u9078\u4e86\uff0c\u50f9\u683c\u780d\u534a\u4e86\uff0c\u53e6\u4e00\u5074\u4e00\u5b9a\u66f4\u512a\uff09\u3002\u6240\u4ee5\u6211\u5011\u5c0d\u65bc\u6c92\u6709\u6307\u5b9a\u98df\u7269\u7684\u6240\u6709\u4eba\u8caa\u5fc3\u5730\u9078\u64c7\u4ed6\u76f8\u9130\u5169\u500b\u98df\u7269\u4e2d\u71b1\u91cf\u8f03\u9ad8\u7684\u90a3\u500b\u5373\u53ef\uff0c\u5177\u9ad4\u4f86\u8aaa\uff0c\u56e0\u70ba\u82e5 \\(x\\) \u9078\u4e86\u98df\u7269 \\(x+1\\)\uff0c\u90a3\u9ebc \\(x+1\\) \u5c31\u4e00\u5b9a\u4e0d\u6703\u9078\u98df\u7269 \\(x+1\\)\uff0c\u56e0\u70ba \\(\\frac{a_{x+1}}{2} \\leq a_{x+2}\\)\u3002\u6545\u5169\u500b\u6c92\u6709\u6307\u5b9a\u98df\u7269\u7684\u4eba\u4e0d\u53ef\u80fd\u9078\u5230\u540c\u4e00\u98df\u7269\uff0c\u6240\u4ee5\u6bcf\u500b\u4eba\u7684\u6c7a\u7b56\u4e92\u4e0d\u5e72\u64fe\uff0c\u8caa\u5fc3\u6b63\u78ba\u6027\u5f97\u4ee5\u4fdd\u8b49\u3002</p> <p>\u70ba\u4e86\u9632\u6b62\u51fa\u73fe\u6d6e\u9ede\u6578\uff0c\u5728\u7a0b\u5f0f\u78bc\u4e2d\u628a\u6bcf\u500b \\(a_i\\) \u90fd\u4e58\u4e0a\u4e86 2\u3002\u9019\u6a23\u662f\u4e0d\u5f71\u97ff\u7b54\u6848\u7684\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e6 + 10;\nint n, a[N], b[N], ans[N];\nqueue&lt;pair&lt;int, int&gt;&gt; q; // edge(x, y)\n\nint pre(int i) {\n    return (i - 1 + n) % n;\n}\nint nxt(int i) {\n    return (i + 1) % n;\n}\nvoid psh(int i) {\n    if (!~ans[i] &amp;&amp; b[i] &gt;= b[nxt(i)] * 2ll) {\n        q.emplace(i, i);\n        b[ans[i] = i] -= a[i];\n    }\n    if (!~ans[i] &amp;&amp; b[nxt(i)] &gt;= b[i] * 2ll) {\n        q.emplace(i, nxt(i));\n        b[ans[i] = nxt(i)] -= a[nxt(i)];\n    }\n}\nint main() {\n    cin &gt;&gt; n;\n    fill(ans, ans + n, -1);\n    for (int i = 0; i &lt;= n - 1; i++) {\n        cin &gt;&gt; a[i];\n        b[i] = a[i] * 2;\n    }\n    for (int i = 0; i &lt;= n - 1; i++) {\n        psh(i);\n    }\n    while (!q.empty()) {\n        auto u = q.front();\n        q.pop();\n        psh(pre(u.second));\n        psh(u.second);\n    }\n    for (int i = 0; i &lt;= n - 1; i++) {\n        if (~ans[i]) {\n            cout &lt;&lt; ans[i] + 1 &lt;&lt; ' ';\n        } else {\n            if (b[i] &gt; b[nxt(i)]) {\n                cout &lt;&lt; i + 1 &lt;&lt; ' ';\n                b[i] -= a[i];\n            } else {\n                cout &lt;&lt; nxt(i) + 1 &lt;&lt; ' ';\n                b[nxt(i)] -= a[nxt(i)];\n            } \n        }\n    }\n    return 0;\n}\n</code></pre> CF 1856 B. Good Arrays <p>\u7d66\u5b9a\u9577\u5ea6\u70ba \\(n\\) \u7684\u6b63\u6574\u6578\u6578\u5217 \\(a\\)\uff0c\u554f\u80fd\u5426\u69cb\u9020\u51fa\u53e6\u4e00\u500b\u6b63\u6574\u6578\u6578\u5217 \\(b\\)\uff0c\u6eff\u8db3\uff1a</p> <ul> <li> <p>\u5c0d\u65bc \\(1 \\leq i \\leq n\\)\uff0c\\(a_i \\neq b_i\\)\u3002</p> </li> <li> <p>\\(\\sum_{i=1}^{n} a_i = \\sum_{i=1}^{n} b_i\\)\u3002</p> </li> </ul> <p>\\(n\\le 10^5, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u7576 \\(a_i=1\\) \u6642\uff0c\\(b_i\\) \u4e00\u5b9a\u53ea\u80fd\u662f 2 \u6216\u8005\u662f\u66f4\u5927\u7684\u6578\u5b57\uff0c\u4ee3\u8868\u6211\u5011\u6703\u591a\u7b97\uff0c\u800c\u9019\u500b\u53ea\u80fd\u7528 \\(a_i\\neq 1\\) \u7684\u9805\u4f86\u6263\uff0c\u5177\u9ad4\u4f86\u8aaa\uff0c\u4e00\u500b\u975e 1 \u7684 \\(a_i\\) \u6700\u591a\u53ea\u80fd\u586b\u88dc \\(a_i-1\\)\uff08\u56e0\u70ba\u6263\u5230 \\(a_i=1\\) \u5c31\u4e0d\u80fd\u518d\u6263\u4e86\uff09\uff0c\u6240\u4ee5\u6700\u5f8c\u6211\u5011\u5c31\u53ea\u8981\u5224\u65b7 \\(a_i-1\\) \u7684\u7e3d\u548c\u662f\u5426\u8db3\u5920\u8b93 \\(a_i=1\\) \u7684\u6578\u91cf\u6263\u5373\u53ef\u3002</p> <p>\u5340\u9593\u7248\u672c: https://codeforces.com/contest/1923/problem/C</p> code <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nlong long n, i, t, a, sum;\n\nint main() {\n    cin &gt;&gt; t;\n    while (t--) {\n        cin &gt;&gt; n;\n        sum = 0;\n        for (i = 1; i &lt;= n; i++) {\n            cin &gt;&gt; a;\n            if (a == 1) {\n                sum--;\n            } else {\n                sum += (a - 1);\n            }\n        }\n        if (sum &gt;= 0 &amp;&amp; n != 1)\n            cout &lt;&lt; \"YES\\n\";\n        else\n            cout &lt;&lt; \"NO\\n\";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"basic/greedy/problem/#_6","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://slides.com/fhvirus/1/fullscreen#/3/7</p> </li> <li> <p>\u66f4\u591a\u554f\u984c\u53ef\u770b \u6d1b\u8c37 Blog \u96c6\u8bad\u7b2c\u4e09\u5929--\u8d2a\u5fc3\u9009\u8bb2</p> </li> </ul>"},{"location":"basic/greedy/scheduling/","title":"\u6392\u7a0b\u554f\u984c","text":""},{"location":"basic/greedy/scheduling/#job-sheduling","title":"job sheduling","text":""},{"location":"basic/greedy/scheduling/#k-job-scheduling","title":"k job scheduling","text":"CSES - Movie Festival II <p>\u7d66\u4f60 \\(n\\) \u500b\u5de5\u4f5c \\(l_i,r_i\\) \u6bcf\u500b\u5de5\u4f5c\u7684 \\(w_i\\) \u90fd\u662f \\(1\\)\uff0c\u4e00\u6b21\u53ef\u4ee5\u4f5c \\(k\\) \u500b\u5de5\u4f5c\uff0c\u6c42\u6700\u591a\u53ef\u4ee5\u9818\u591a\u5c11\u9322</p> <p>\\(k\\le n\\le 2\\times 10^5,l_i&lt;r_i\\le 10^9\\)</p> \u601d\u8def <ul> <li> <p>\u5982\u679c\u540c\u6642\u9593\u6709\u597d\u5e7e\u500b\u5de5\u4f5c\u91cd\u758a\u4e26\u4e14 \\(&gt;k\\)</p> </li> <li> <p>\u8caa\u5fc3\u60f3\u6cd5\uff0c\u6211\u5011\u628a \\(r\\) \u6700\u53f3\u908a\u7684\u522a\u6389</p> </li> <li> <p>\u5f9e\u5de6\u6383\u5230\u53f3\u56e0\u70ba\u6211\u5011\u5728\u9019\u4e4b\u524d\u90fd\u8655\u7406\u597d\u4e86(\u91cd\u758a\u4e0d\u8d85\u904e \\(k\\) ) \u6240\u4ee5\u4f60\u5de6\u908a\u4e0d\u7ba1\u600e\u9ebc\u5ef6\u4f38\u6211\u90fd\u6c92\u5dee, \u73fe\u5728\u53f3\u908a\u7684\u9084\u6c92\u8655\u7406\u6240\u4ee5\u6211\u5011\u8981\u770b\u7684\u662f \\(r\\)</p> </li> <li> <p>\u5982\u679c\u6709\u591a\u500b\u6700\u5927\u7684 \\(r\\) \u4e00\u6a23\u90a3\u4f60\u522a\u54ea\u4e00\u500b\u5176\u5be6\u90fd\u6c92\u5dee(\u5de6\u908a\u90fd\u8655\u7406\u597d\u4e86)</p> </li> </ul> code <pre><code>int n;\nmultiset&lt;pii&gt; ms;\n\nvoid init () {\n    cin &gt;&gt; n;\n    for (int i = 1, l, r; i &lt;= n; i++) {\n        cin &gt;&gt; l &gt;&gt; r;\n        ms.insert({l, r});\n    }\n}\n\nint solve (int k) {\n    // \u4e00\u6b21\u505a k \u500b\u5de5\u4f5c\u6b50\u5e03\u6b50\u8667\n    multiset&lt;pii&gt; rev;\n    int W = n;\n    for (auto pos = ms.begin(); pos != ms.end(); pos++) {\n        int l = pos-&gt;first, r = pos-&gt;second;\n        //\u4ee5\u6211\u76ee\u524d\u7684 L \u4f86\u770b\u91cd\u758a\u7684\u5de6\u5c46\n        // \u522a\u9664\u904e\u671f\u7684\u908a\u754c\n        while (rev.size() &amp;&amp; rev.begin()-&gt;first &lt; l) {\n            rev.erase(rev.begin());\n        }\n        rev.insert({r, l});\n        // \u4fdd\u8b49\u5927\u65bc k \u7684\u5927\u5c0f\u53ea\u6703\u525b\u597d\u662f k + 1\n        // \u56e0\u70ba\u4e00\u5230 k + 1 \u5c31\u6703\u88ab\u522a\u6389\u4e00\u500b\n        if (rev.size() &gt; k) {\n            rev.erase(--rev.end());\n            // rev.end() \u5c31\u662f r \u6700\u5927\u7684, \u5fc5\u9808\u522a\u6389\n            W--;\n        }\n    }\n    return W;\n}\n</code></pre> TIOJ 1337. \u9695\u77f3 <p>\u7d66 \\(n\\) \u500b interval \\(l_i,r_i\\)\uff0c\u554f\u5728\u53ef\u4ee5\u79fb\u9664 \\(k\\) \u500b interval \u7684\u60c5\u6cc1\u6700\u5c0f\u5316\u6700\u5927\u7684 bandwidth</p> <p>\\(k\\le n\\le 10^5\\)</p> \u601d\u8def <p>\u4e8c\u5206\u641c\u7b54\u6848 t\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u7684 bandwidth\uff0c\u53bb check(t) \u8aaa\u53ef\u4e0d\u53ef\u4ee5\u518d\u522a\u6389 k \u500b interval \u7684\u60c5\u6cc1\u4e0b\u4f7f\u6700\u5927 bandwidth \u4e0d\u8d85\u904e t</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nint n, m;\nmultiset&lt;pii&gt; ms;\n\nvoid init () {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1, l, r; i &lt;= n; i++) {\n        cin &gt;&gt; l &gt;&gt; r;\n        ms.insert({l, r});\n    }\n}\n\nint check (int k) {\n    // \u4e00\u6b21\u505a k \u500b\u5de5\u4f5c\u6b50\u5e03\u6b50\u8667\n    // \u4f46\u522a\u6389\u7684\u5de5\u4f5c\u4e0d\u80fd\u8d85\u904e m \u500b\n    // \u6771\u5340\u90a3\u984c\u8981\u522a\u591a\u5c11\u90fdok\n    multiset&lt;pii&gt; rev;\n    int cnt = m;\n    for (auto pos = ms.begin(); pos != ms.end(); pos++) {\n        int l = pos-&gt;first, r = pos-&gt;second;\n        //\u4ee5\u6211\u7684\u89d2\u5ea6\u4f86\u770b\u91cd\u758a\u5728\u5de6\u5c46\n        // \u522a\u9664\u904e\u671f\u7684\u908a\u754c\n        while (rev.size() &amp;&amp; rev.begin()-&gt;first &lt;= l) {\n            rev.erase(rev.begin());\n        }\n        rev.insert({r, l});\n        if (rev.size() &gt; k) {\n            if (cnt == 0) return false;\n            rev.erase(--rev.end());\n            cnt--;\n        }\n    }\n    return true;\n}\n\nvoid solve () {\n    int l = 0, r = n - m;\n    while (l &lt; r) {\n        int mid = l + r &gt;&gt; 1;\n        if (check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    cout &lt;&lt; r;\n}\n\nsigned main () {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    init();\n    solve();\n}\n</code></pre>"},{"location":"basic/greedy/scheduling/#job-scheduling-problem","title":"job scheduling problem","text":"\u5ef6\u4f38 job scheduling problem <p>\u7d66 n \u500b intervals\uff0c\u6709 weight\uff0c\u627e\u4e00\u4e9b intervals\uff0c\u5169\u5169\u4e0d overlap\uff0c\u6700\u5927\u5316 weight \u7e3d\u548c</p> \u601d\u8def1 <ul> <li>sort \\(r_i\\) \u5c0f\u5230\u5927</li> <li>\\(dp(i)\\) \u70ba\u5f9e \\(0\\) ~ \\(i\\) \u6709\u6311 \\(i\\) \u7684\u7b54\u6848</li> </ul> \\[dp(i)=w(i)+\\max \\limits_{r_j \\text{ }&lt; \\text{ }l_i} \\{dp(j)\\}\\] <ul> <li> <p>\\(r_j &lt; l_i\\) \u4e00\u5b9a\u662f\u4e00\u6bb5 prefix</p> </li> <li> <p>\u8907\u96dc\u5ea6 \\(O(n\\log n)\\)</p> </li> </ul> \u601d\u8def2 <ul> <li> <p>\\(dp[i]=\\) \u5f9e\u7b2c \\(0\\) \u9805 ~ \u7b2c \\(i\\) \u9805\u4e0d\u4e00\u5b9a\u8981\u6311\u7b2c \\(i\\) \u9805\u7684\u7b54\u6848</p> </li> <li> <p>\\(dp[i]=\\max\\{dp[i-1],dp[j]+w[i]\\}\\)</p> </li> <li> <p>\u4e8c\u5206\u641c\u67e5\u627e \\(j\\)</p> </li> </ul> POJ 3680 - Intervals <p>\u7d66 \\(n\\) \u500b interval\uff0c\u6709 weight \\(w_i\\)\uff0c\u9078\u4e00\u4e9b interval \u4f7f\u6bcf\u500b point \u81f3\u591a\u88ab \\(k\\) \u500b interval \u8986\u84cb\uff0c\u554f\u6700\u591a\u53ef\u4ee5\u9818\u591a\u5c11\u9322</p> <p>\\(n,k\\le 200, 1\\le a_i &lt; b_i \\le 10^5, 1\\le w_i \\le 10^5\\)</p>"},{"location":"basic/greedy/scheduling/#machine-scheduling","title":"machine scheduling","text":""},{"location":"basic/greedy/scheduling/#_1","title":"\u6700\u591a\u80fd\u5b8c\u6210\u5e7e\u500b\u5de5\u4f5c","text":"\u6d1b\u8c37 P4053 [JSOI2007] \u5efa\u7b51\u62a2\u4fee <p>\u6709 \\(n\\) \u500b\u5de5\u4f5c\uff0c\u6bcf\u500b\u5de5\u4f5c\u6709\u9700\u8981\u57f7\u884c\u7684\u6642\u9593 \\(t_i\\) \u8207\u622a\u6b62\u6642\u9593 \\(d_i\\)\uff0c\u5de5\u4f5c\u82e5\u5728\u622a\u6b62\u6642\u9593\u524d\u5b8c\u6210\u5c31\u53ef\u4ee5\u7372\u5f97\u5831\u916c \\(1\\)\uff0c\u5426\u5247\u5831\u916c\u662f \\(0\\)\u3002\u4f60\u53ef\u4ee5\u81ea\u7531\u5b89\u6392\u5de5\u4f5c\u7684\u9806\u5e8f\uff0c\u76ee\u6a19\u662f\u6700\u5927\u5316\u5831\u916c\u7e3d\u548c</p> <p>\\(1 \\le n \\le 2\\times10^5, 1 \\le a \\le b \\le10^9\\)</p> \u601d\u8def <ul> <li> <p>\u5148\u60f3\u5982\u4f55\u5224\u65b7 \\(n\\) \u500b\u5de5\u4f5c\u662f\u5426\u90fd\u53ef\u4ee5\u505a\u5b8c?</p> </li> <li> <p>\u5c07\u5de5\u4f5c\u5148\u6309\u7167\u622a\u6b62\u6642\u9593\u6392\u5e8f</p> </li> </ul> <p>Proof : </p> <p>\u82e5\u6709\u5169\u500b\u5de5\u4f5c \\(A, B\\)\uff0c\\(A\\) \u7684 deadline \u5728 \\(B\\) \u4e4b\u524d\uff0c\u90a3\u9ebc \\(t[A] + t[B]\\) \u4e00\u5b9a\u90fd\u4e00\u6a23\uff0c\u4e0d\u7ba1\u662f \\(A\\rightarrow B\\) \u548c \\(B\\rightarrow A\\)\uff0c\u5c0d\u65bc \\(B\\) \u7684 deadline \u7684\u5f71\u97ff\u90fd\u662f\u4e00\u6a23\u7684\uff0c\u6240\u4ee5\u6700\u91cd\u8981\u7684\u662f \\(A\\) \u7684 deadline\uff0c\u90a3\u6211\u5011\u5148\u5c07 \\(A\\) \u5148\u505a\u8d8a\u6709\u6a5f\u6703\u5728 \\(A\\) \u7684 deadline \u524d\u5b8c\u6210\uff0c\u6545 deadline \u5c0f\u7684\u653e\u8d8a\u524d\u9762</p> <ul> <li> <p>\u82e5\u524d \\(i\\) \u500b\u5de5\u4f5c\u53ef\u4ee5\u9078 \\(k\\) \u500b\u5728\u622a\u6b62\u6642\u9593\u524d\u5b8c\u6210</p> </li> <li> <p>case 1 : \u524d \\(i+1\\) \u500b\u5de5\u4f5c\u53ef\u4ee5\u9078 \\(k+1\\) \u500b\u5728\u622a\u6b62\u6642\u9593\u5167\u5b8c\u6210\uff0c\u6700\u5c0f\u5b8c\u6210\u6642\u9593 (\\(\\sum t[i]\\)) \u662f \\(S\\)</p> <ul> <li>\u76f4\u63a5\u5c07\u7b2c \\(i+1\\) \u500b\u5de5\u4f5c\u9078\u8d77\u4f86</li> <li>\\(S + t[i + 1] \\le d[i+1]\\)</li> </ul> </li> <li> <p>case 2 : \u524d \\(i+1\\) \u500b\u5de5\u4f5c\u53ea\u80fd\u9078 \\(k\\) \u500b\u5728\u622a\u6b62\u6642\u9593\u5167\u5b8c\u6210</p> </li> <li>\\(S'=\\min (S,\\) \u628a\u539f\u672c\u7684 \\(k\\) \u500b\u522a\u6389\u5176\u4e2d\u4e00\u500b, \u7136\u5f8c\u52a0\u5165 \\(t[i+1])\\)</li> <li>\u7dad\u8b77\u76ee\u524d\u5df2\u9078\u64c7\u7684\u5de5\u4f5c\uff0c\u652f\u63f4\u522a\u9664 \\(t[i]\\) \u6700\u5927\u7684 \\(\\Rightarrow\\) \u53cd\u6094\u6cd5</li> </ul> code <pre><code>const int N = 10;\nstruct Job {int time, due;} job[N];\npriority_queue&lt;int&gt; pq;\n\nbool cmp(Job&amp; a, Job&amp; b)\n{\n    return a.due &lt; b.due;\n}\n\nvoid solve () {\n    sort(job, job + N, cmp);\n\n    int t = 0;\n    for (int i = 0; i &lt; N; i++) {\n        pq.push(job[i].time);\n        t += job[i].time;\n        if (t &gt; job[i].due) t -= pq.top(), pq.pop();\n    }\n\n    cout &lt;&lt; pq.size() &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"basic/greedy/scheduling/#_2","title":"\u6700\u5c0f\u5316\u622a\u6b62\u6642\u9593","text":"\u6700\u5c0f\u5316\u622a\u6b62\u6642\u9593\u4e4b\u548c <p>\u7d66\u5b9a \\(n\\) \u500b\u5de5\u4f5c\uff0c\u7b2c \\(i\\) \u500b\u5de5\u4f5c\u6709\u9700\u8981\u505a\u7684\u6642\u9593 \\(t[i]\\)\uff0c\u6700\u5c0f\u5316\u6bcf\u500b\u5de5\u4f5c\u5b8c\u6210\u7684\u6642\u9593\u4e4b\u548c</p> \u601d\u8def <p>\u5176\u5be6\u53ea\u8981 \\(\\texttt{sort}(t[i])\\) \u5c31\u597d\u4e86\uff0c\u8d8a\u65e9\u505a\u7684\u6703\u88ab\u7d2f\u8a08\u6700\u591a\u6b21</p> \u6700\u5c0f\u5316\u622a\u6b62\u6642\u9593\u4e4b\u6b0a\u91cd\u548c <p>\u7d66\u5b9a \\(n\\) \u500b\u5de5\u4f5c\uff0c\u7b2c \\(i\\) \u500b\u5de5\u4f5c\u6709\u9700\u8981\u505a\u7684\u6642\u9593 \\(t[i]\\) \u548c\u6b0a\u91cd \\(w[i]\\)\u3002\u4ee4 \\(C[i]\\) \u70ba\u7b2c \\(i\\) \u500b\u5de5\u4f5c\u5b8c\u6210\u7684\u6642\u9593\uff0c\u6700\u5c0f\u5316 \\(\\sum C[i]\\times w[i]\\)</p> \u601d\u8def <p>\\(\\texttt{sort}(t[i]/w[i])\\) \u5c31\u597d\u4e86</p> <p>proof :</p> <p>assume that the order \\(i\\rightarrow j\\) is optimal than \\(j\\rightarrow i\\) \\(t[i] \\times w[i] + (t[i] + t[j]) \\times w[j] &lt; t[j] \\times w[j] + (t[j] + t[i]) \\times w[i]\\) \\(\\Rightarrow t[i] \\times w[j] &lt; t[j] \\times w[i]\\) \\(\\Rightarrow t[i] / w[i] &lt; t[j] / w[j]\\)</p>"},{"location":"basic/greedy/images/CF%201303%20D%20%E7%9B%B8%E9%97%9C%E6%A6%82%E5%BF%B5/","title":"CF 1303 D \u76f8\u95dc\u6982\u5ff5","text":""},{"location":"basic/greedy/images/CF%201303%20D%20%E7%9B%B8%E9%97%9C%E6%A6%82%E5%BF%B5/#_1","title":"\u984c\u76ee","text":"<p>\u7d66 \\(n,k\\)\uff0c\u6709 \\(n\\) \u500b\u7269\u54c1\uff0c\u6bcf\u500b\u7269\u54c1\u7684\u91cd\u91cf\u70ba \\(2^{a_1},2^{a_2},\\ldots , 2^{a_n}\\)\uff0c\u5176\u4e2d\u5c0d\u65bc \\(1\\le i\\le n\\)\uff0c\\(a_i&lt;k\\)\u3002\u4ee4 \\(2^{a_1}+2^{a_2}+\\ldots +2^{a_n}&gt;2^{k}\\)\uff0c\u8a66\u8b49\u300c\u4e00\u5b9a\u53ef\u4ee5\u9078\u4e00\u4e9b\u7269\u54c1\uff0c\u6eff\u8db3\u7269\u54c1\u91cd\u91cf\u548c\u6070\u70ba \\(2^k\\)\u300d</p>"},{"location":"basic/greedy/images/CF%201303%20D%20%E7%9B%B8%E9%97%9C%E6%A6%82%E5%BF%B5/#_2","title":"\u53cd\u8b49\u6cd5","text":"<p>\u6211\u5011\u5047\u8a2d\u300c\u4e00\u5b9a\u7121\u6cd5\u9078\u4e00\u4e9b\u7269\u54c1\uff0c\u6eff\u8db3\u7269\u54c1\u91cd\u91cf\u548c\u6070\u70ba \\(2^k\\)\u300d</p> <p>\u9019\u4ee3\u8868</p> <ul> <li>\u6700\u591a\u53ea\u80fd\u7d44\u6210 \\(1\\) \u500b \\(2^{k-1}\\)</li> <li>\u6700\u591a\u53ea\u80fd\u7d44\u6210 \\(1\\) \u500b \\(2^{k-2}\\)</li> <li>...</li> <li>\u6700\u591a\u53ea\u80fd\u7d44\u6210 \\(1\\) \u500b \\(2^{0}\\)</li> </ul> <p>\u4ee3\u8868\u91cd\u91cf\u548c\u6700\u5927\u53ea\u80fd \\(2^0+\\ldots +2^{k-1}=2^k-1\\)\uff0c\u986f\u7136\u5c0f\u65bc \\(2^k\\)\uff0c\u8207\u984c\u610f\u77db\u76fe\uff0c\u4ee3\u8868\u5047\u8a2d\u662f\u932f\u8aa4\u7684\uff0c\u4e00\u5b9a\u53ef\u4ee5\u9078\u4e00\u4e9b\u7269\u54c1\uff0c\u6eff\u8db3\u7269\u54c1\u91cd\u91cf\u548c\u6070\u70ba \\(2^k\\)</p>"},{"location":"basic/greedy/images/%E6%8F%9B%E9%9B%B6%E9%8C%A2%20%E5%BC%95%E7%90%86%20%E8%AD%89%E6%98%8E/","title":"\u63db\u96f6\u9322 \u5f15\u7406 \u8b49\u660e","text":""},{"location":"basic/greedy/images/%E6%8F%9B%E9%9B%B6%E9%8C%A2%20%E5%BC%95%E7%90%86%20%E8%AD%89%E6%98%8E/#_2","title":"\u5f15\u7406","text":"<p>\u5728\u9762\u984d\u4e92\u76f8\u6574\u9664\u7684\u60c5\u6cc1\u4e0b\uff0c\u82e5\u5b58\u5728\u9762\u984d x \u7684\u8ca8\u5e63\uff0c\u4e14\u9762\u984d\u5728 x \u4e4b\u4e0b\u7684\u7e3d\u548c\u8d85\u904e x\uff0c\u5247\u5fc5\u5b9a\u80fd\u5920\u900f\u904e\u63db\u9322\u4f7f\u5f97\u9762\u984d\u5728 x \u4ee5\u4e0b\u7684\u8ca8\u5e63\u7e3d\u548c\u4e0d\u5230 x \u4e14\u4f7f\u8ca8\u5e63\u6578\u91cf\u66f4\u5c11</p>"},{"location":"basic/greedy/images/%E6%8F%9B%E9%9B%B6%E9%8C%A2%20%E5%BC%95%E7%90%86%20%E8%AD%89%E6%98%8E/#_3","title":"\u611f\u6027\u7406\u89e3","text":"<p>\u56e0\u70ba\u662f\u300c\u56e0\u6578\u95dc\u4fc2\u300d\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u9322\u4e00\u5b9a\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u6e4a\u51fa\u4f86\uff08500 = 10 \u500b 50\uff0c\u4e5f\u80fd\u7528 2 * 100 + 5 * 50 + 4 * 10 + 2 * 5 \u4e4b\u985e\u7684\uff09\uff0c\u4f8b\u5982\u8aaa 500\uff0c\u800c\u4e0b\u9762\u52a0\u8d77\u4f86\u6bd4 500 \u5927\uff0c\u4e0b\u9762\u53ef\u80fd\u662f\u5148\u88dc 3 * 100\uff0c\u9019\u6a23\u9084\u5dee 2 * 100\uff0c\u53ea\u4e0d\u904e\u56e0\u70ba\u4e0b\u9762\u52a0\u8d77\u4f86\u6bd4 500 \u5927\uff0c\u6240\u4ee5 100 \u4e0b\u9762\u80af\u5b9a\u8d85\u904e 2 * 100\uff0c\u9019\u6a23\u4e00\u76f4\u6301\u7e8c\u4e0b\u53bb\u5982\u679c\u9084\u662f\u6e4a\u4e0d\u51fa\u4f86\u6703\u767c\u73fe 5 \u4e0b\u9762\uff08\u4e5f\u5c31\u662f 1 \u5143\u7684\u7e3d\u5408\uff09\u80af\u5b9a\u8d85\u904e k * 5\uff0c\u4e5f\u5c31\u662f\u81f3\u5c11\u8d85\u904e 1 * 5\uff0c\u9019\u6a23\u4e00\u5b9a\u53ef\u4ee5\u63db\uff0c\u6240\u4ee5\u5f97\u5230 x \u4e4b\u4e0b\u7684\u7e3d\u548c\u4e00\u5b9a\u6bd4 x \u5c11 </p>"},{"location":"basic/greedy/images/%E6%8F%9B%E9%9B%B6%E9%8C%A2%20%E5%BC%95%E7%90%86%20%E8%AD%89%E6%98%8E/#_4","title":"\u8a73\u7d30\u8b49\u660e","text":"<p>\u3010claim\u3011: \u82e5\u4ee5\u5f9e\u5c0f\u63db\u5230\u5927\uff0c\u5247\u7b2c k \u5c0f\u7684\u9762\u984d &gt; \u524d k - 1 \u5c0f\u7684\u8ca8\u5e63\u7e3d\u548c</p> <p>\u53cd\u8b49\u6cd5\uff0c\u5047\u8a2d\u7b2c k \u5c0f\u7684\u9762\u984d &lt; \u524d k - 1 \u5c0f\u7684\u8ca8\u5e63\u7e3d\u548c\u3002\u4f46\u56e0\u70ba</p> <p>\u7b2c k \u5c0f\u7684\u9762\u984d = \u7b2c k - 1 \u5c0f\u7684\u8ca8\u5e63\u548c + \u8981\u88dc\u4e0a\u7684\u7b2c k - 1 \u5c0f\u7684\u8ca8\u5e63\u5dee\u984d\uff08\u60f3\u5f9e\u524d k - 2 \u5c0f\u88dc\u4e0a\u4f86\u7684\uff09 &lt; \u524d k - 1 \u7684\u8ca8\u5e63\u7e3d\u548c</p> <p>\u6240\u4ee5\u8981\u88dc\u4e0a\u7684\u7b2c k - 1 \u5c0f\u7684\u8ca8\u5e63\u5dee\u984d &lt; \u524d k - 1 \u5c0f\u7684\u8ca8\u5e63\u7e3d\u548c - \u7b2c k - 1 \u5c0f\u7684\u8ca8\u5e63\u548c = \u524d k - 2 \u5c0f\u7684\u8ca8\u5e63\u548c</p> <p>\u53c8\u8981\u88dc\u4e0a\u7684\u7b2c k - 1 \u5c0f\u7684\u8ca8\u5e63\u5dee\u984d = \u7b2c k - 2 \u5c0f\u7684\u8ca8\u5e63\u548c + \u8981\u88dc\u4e0a\u7684\u7b2c k - 2 \u5c0f\u7684\u8ca8\u5e63\u5dee\u984d &lt; \u524d k - 2 \u5c0f\u7684\u8ca8\u5e63\u548c</p> <p>\u21d2 \u8981\u88dc\u4e0a\u7684\u7b2c k - 2 \u5c0f\u7684\u8ca8\u5e63\u5dee\u984d &lt; \u524d k - 2 \u5c0f\u7684\u8ca8\u5e63\u7e3d\u548c - \u7b2c k - 2 \u5c0f\u7684\u8ca8\u5e63\u548c = \u5269\u4e0b\u7684\u524d k - 3 \u5c0f\u7684\u8ca8\u5e63\u7e3d\u548c</p> <p>\u540c\u7406\uff0c\u5f80\u4e0b\u63a8\uff0c\u53ef\u5f97\u8981\u88dc\u4e0a\u7684\u7b2c 2 \u5c0f\u7684\u8ca8\u5e63\u5dee\u984d &lt; \u7b2c 1 \u5c0f\u7684\u8ca8\u5e63\u548c \u21d2  \u7b2c 2 \u5c0f\u7684\u8ca8\u5e63\u9762\u984d &lt; \u7b2c 1 \u5c0f\u7684\u8ca8\u5e63\u548c\uff08\u5dee\u984d\u53ef\u80fd\u8981\u88dc\u597d\u5e7e\u500b\u7b2c 2 \u5c0f\u7684\u8ca8\u5e63\uff0c\u9762\u984d\u7684\u8a71\u5c31\u662f\u53ea\u6709\u4e00\u500b\uff09\uff0c\u4ee3\u8868\u9084\u6c92\u6709\u63db\u5b8c\uff0c\u6545\u7522\u751f\u77db\u76fe\uff0c\u56e0\u6b64\u5f9e\u5c0f\u63db\u5230\u5927\u5f8c\uff0c\u53ea\u6703\u767c\u751f\u7b2c k \u5c0f\u7684\u9762\u984d &gt; \u524d k - 1 \u5c0f\u7684\u8ca8\u5e63\u7e3d\u548c</p>"},{"location":"basic/greedy/images/%E6%8F%9B%E9%9B%B6%E9%8C%A2%20%E5%BC%95%E7%90%86%20%E8%AD%89%E6%98%8E/#_5","title":"\u53c3\u8003\u8cc7\u6599","text":""},{"location":"class/class1/","title":"Class1","text":"<p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u9663\u5217 \\(a[0], a[1], \\dots, a[n-1]\\)\uff0c\u6bcf\u683c\u6709\u4e00\u500b\u6b63\u6574\u6578</p> <p>\u5224\u65b7\u6700\u5c11\u8981\u628a \\(a\\) \u9663\u5217\u5207\u6210\u5e7e\u6bb5\uff0c\u6eff\u8db3\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u76f8\u5dee\u4e0d\u8d85\u904e 1</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u9663\u5217 \\(a[0],a[1],\u2026,a[n\u22121]\\)\uff0c\u6bcf\u683c\u6709\u4e00\u500b\u6b63\u6574\u6578 \u53e6\u5916\u9084\u6703\u8f38\u5165\u4e00\u500b\u6574\u6578 \\(D\\)</p> <p>\u5224\u65b7\u6700\u5c11\u8981\u628a \\(a\\) \u9663\u5217\u5207\u6210\u5e7e\u6bb5\uff0c\u6eff\u8db3\u6bcf\u4e00\u6bb5\u7684\u7e3d\u548c\u90fd\u4ecb\u65bc \\([D,2D]\\) \u4e4b\u9593\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n^2)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b \\(n\\times m\\) \u5927\u5c0f\u7684\u4e8c\u7dad\u5ea6\u9663\u5217 \\(A\\)\uff0c\u5de6\u4e0a\u89d2\u70ba \\(A[0][0]\\)\uff0c\u53f3\u4e0b\u89d2\u70ba \\(A[n\u22121][m\u22121]\\)\uff0cA \u9663\u5217\u6bcf\u683c\u6709\u4e00\u500b\u6578\u5b57 0 \u6216 1\u3002</p> <p>\u627e\u51fa\u4e00\u500b\u6700\u5927\u7684\u6b63\u65b9\u5f62\u5340\u57df\uff0c\u6eff\u8db3\u56db\u5468\u5168\u90e8\u90fd\u662f 1\uff0c\u800c\u5167\u90e8\u662f 0 \u6216 1 \u90fd\u53ef\u4ee5\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n^2m)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>(Hint: \u5c0d\u65bc\u6bcf\u4e00\u500b\u5ea7\u6a19, \u7dad\u8b77\u4ee5\u4ed6\u70ba\u8d77\u9ede\u5411\u4e0a\u548c\u5411\u5de6\u6700\u591a\u6709\u5e7e\u500b\u9023\u7e8c\u7684 1)</p> <p>\u8f38\u5165\u4e00\u500b \\(n\\times m\\) \u5927\u5c0f\u7684\u4e8c\u7dad\u5ea6\u9663\u5217 \\(A\\)\uff0c\u5de6\u4e0a\u89d2\u70ba \\(A[0][0]\\)\uff0c\u53f3\u4e0b\u89d2\u70ba \\(A[n\u22121][m\u22121]\\)\uff0c\\(A\\) \u9663\u5217\u6bcf\u683c\u6709\u4e00\u500b\u6b63\u6574\u6578 \\(A[i][j]\\)\uff0c\u4e14 \\(1\\le A[i][j]\\le n\\)\u3002</p> <p>\u4f60\u53ef\u4ee5\u9078\u4e00\u500b\u4f4d\u7f6e\u7576\u8d77\u9ede\uff0c\u6bcf\u6b65\u53ef\u4ee5\u5f80\u4e0a\u4e0b\u5de6\u53f3\u5176\u4e2d\u4e00\u500b\u65b9\u5411\u884c\u8d70\uff0c\u4f46\u53ea\u80fd\u8d70\u5230\u6578\u5b57\u66f4\u5927\u7684\u683c\u5b50\u3002 \u8acb\u8a08\u7b97\u6700\u9577\u53ef\u4ee5\u627e\u5230\u7684\u8def\u5f91\u9577\u5ea6\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(nm\\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>(Hint: \u6709\u5411\u7121\u74b0\u5716)</p> <p>\u8f38\u5165\u4e00\u500b \\(n\\times m\\) \u5927\u5c0f\u7684\u4e8c\u7dad\u5ea6\u9663\u5217 \\(A\\)\uff0c\u5de6\u4e0a\u89d2\u70ba \\(A[0][0]\\)\uff0c\u53f3\u4e0b\u89d2\u70ba \\(A[n\u22121][m\u22121]\\)\uff0c\\(A\\) \u9663\u5217\u6bcf\u683c\u6709\u4e00\u500b\u6578\u5b57 \\(0\\) \u6216 \\(1\\)\u3002</p> <p>\u4f60\u53ef\u4ee5\u4efb\u610f\u6539\u8b8a\u5217 (row)\u7684\u9806\u5e8f\uff0c\u4f8b\u5982: \u5217\u9806\u5e8f \\([0,1,2,3,4]\\) \u6539\u6210\u5217\u9806\u5e8f \\([4,3,1,2,0]\\)</p> <p>\u8acb\u627e\u51fa\u8abf\u63db\u9806\u5e8f\u5f8c\u53ef\u4ee5\u627e\u5230\u7684\u6700\u5927\u5b50\u6b63\u65b9\u5f62\u5927\u5c0f(\u5168\u90e8\u90fd\u662f 1 \u7684\u6b63\u65b9\u5f62\u5340\u57df)</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(nm \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>(Hint: \u5c0d\u65bc\u6bcf\u4e00\u500b\u76f4\u884c (column)\uff0c\u82e5\u6709\u8d85\u904e \\(k\\) \u500b\u4ee5\u8a72 column \u70ba\u7d50\u5c3e\u4e14\u9577\u5ea6\u8d85\u904e \\(k\\) \u7684 \u6a6b\u5217 (row)\uff0c\u5247\u627e\u5230\u4e00\u500b \\(k\\times k\\) \u7684\u6b63\u65b9\u5f62)</p> <p>\u8f38\u5165\u4e00\u500b \\(n\\times m\\) \u5927\u5c0f\u7684\u4e8c\u7dad\u5ea6\u9663\u5217 \\(A\\)\uff0c\u5de6\u4e0a\u89d2\u70ba \\(A[0][0]\\)\uff0c\u53f3\u4e0b\u89d2\u70ba \\(A[n\u22121][m\u22121]\\)\uff0c\\(A\\) \u9663\u5217\u6bcf\u683c\u6709\u4e00\u500b\u6578\u5b57 \\(0\\) \u6216 \\(1\\)\u3002</p> <p>\u4f60\u53ef\u4ee5\u4efb\u610f\u6539\u8b8a\u5217(row)\u7684\u9806\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u4efb\u610f\u6539\u8b8a\u884c(column)\u7684\u9806\u5e8f\u3002</p> <p>\u8acb\u627e\u51fa\u8abf\u63db\u9806\u5e8f\u5f8c\u53ef\u4ee5\u627e\u5230\u7684\u6700\u5927\u5b50\u6b63\u65b9\u5f62\u5927\u5c0f(\u5168\u90e8\u90fd\u662f \\(1\\) \u7684\u6b63\u65b9\u5f62\u5340\u57df)</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(2^n\\times m \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>(Hint: \u7b49\u50f9\u7684\u984c\u610f: \u627e\u5230\u5404\u4e00\u500b row \u548c column \u7684\u5b50\u96c6\u5408\u4e14\u5927\u5c0f\u76f8\u7b49\uff0c\u4ea4\u53c9\u7684\u5ea7\u6a19\u5747\u70ba \\(1\\))</p> <p>\u8f38\u5165\u4e00\u500b\u7121\u5411\u5716\uff0c\u5305\u542b \\(n\\) \u500b\u7bc0\u9ede\u548c \\(m\\) \u689d\u908a\u3002</p> <p>\u8a08\u7b97\u6700\u591a\u53ef\u4ee5\u9078\u5e7e\u500b\u9ede\u51fa\u4f86\uff0c\u6eff\u8db3\u6bcf\u4e00\u689d\u908a\u7684\u5169\u7aef\u81f3\u591a\u53ea\u6709\u4e00\u500b\u9ede\u88ab\u9078\u5230\u3002\u9019\u6a23\u7684\u96c6\u5408\u4e5f\u53eb\u505a\u6700\u5927\u7368\u7acb\u96c6\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n\u00d72^n+m)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b\u7121\u5411\u5716\uff0c\u5305\u542b \\(n\\) \u500b\u7bc0\u9ede\u548c \\(m\\) \u689d\u908a\uff0c\u6bcf\u500b\u9ede \\(v\\) \u6709\u4e00\u500b\u6b0a\u91cd \\(w(v)\\) \u627e\u4e00\u500b\u6bcf\u500b\u9ede\u6070\u597d\u7d93\u904e\u4e00\u6b21\u7684\u8def\u5f91\uff0c\u82e5\u7bc0\u9ede \\(v\\) \u5728\u7b2c \\(i\\) \u6b65\u8d70\u5230\uff0c\u9700\u8981 \\(w(v)\\times i\\) \u55ae\u4f4d\u7684\u8cbb\u7528\uff0c\u76ee\u6a19\u662f\u627e\u51fa\u8cbb\u7528\u7e3d\u548c\u6700\u5c0f\u7684\u8def\u5f91\u3002</p> <p>\u82e5\u4e0d\u5b58\u5728\u7b54\u6848\u5247\u8f38\u51fa \\(\u22121\\)</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n^2\u00d72^n+m)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>(Hint: \u65c5\u884c\u90f5\u905e\u54e1\u554f\u984c(TSP)\u3001\u6f22\u7c73\u9813\u5708\u554f\u984c \u4e4b\u8b8a\u5f62)</p> <p>\u8f38\u5165\u4e00\u500b\u7121\u5411\u5716\uff0c\u5305\u542b \\(n\\) \u500b\u7bc0\u9ede\u548c \\(m\\) \u689d\u908a\u3002</p> <p>\u5224\u65b7\u662f\u5426\u53ef\u4ee5\u7528 \\(4\\) \u7a2e\u984f\u8272\u5e6b\u6bcf\u500b\u9ede\u8457\u8272\uff0c\u6eff\u8db3\u6bcf\u689d\u908a\u7684\u5169\u7aef\u90fd\u662f\u4e0d\u540c\u984f\u8272\u7684\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a $O(n<sup>2\u00d72</sup> n +m)    $ \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>(Hint: \u5148\u5c07\u984f\u8272 \\(1, 2\\) \u7576\u6210\u540c\u8272, \u984f\u8272 \\(3, 4\\) \u7576\u6210\u540c\u8272\u505a\u4e8c\u5206\u5716\u5206\u914d\uff0c\u518d\u5c07\u984f\u8272 \\(1, 2\\) \u548c \u984f\u8272 \\(3, 4\\) \u5206\u5225\u505a\u4e8c\u5206\u5716\u5206\u914d)</p> <p>\u8f38\u5165\u4e00\u500b\u6b63\u6574\u6578 \\(x\\)\uff0c\u8a08\u7b97\u6709\u5e7e\u500b\u6578 \\(a\\) \u6eff\u8db3</p> <ol> <li>\\(0\\le a\\le x\\)</li> <li>\\(a\\) \u662f \\(7\\) \u7684\u500d\u6578</li> <li>\\(a\\) \u7684\u76f8\u9130\u5169\u4f4d\u6578\u90fd\u4e0d\u76f8\u540c\uff0c\u4f8b\u5982 \\([2,10,131,234,258]\\) \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u800c \\([113,22,4223]\\) \u90fd\u662f\u4e0d\u5408\u6cd5\u7684\u3002</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(\\log^3x)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>(Hint: \u6578\u4f4ddp)</p> <ul> <li>https://codeforces.com/contest/1572/problem/A</li> <li>https://cses.fi/problemset/task/1080</li> <li>https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/</li> <li>https://leetcode.com/problems/largest-sum-of-averages/</li> <li>https://cses.fi/problemset/task/1147</li> <li>https://atcoder.jp/contests/dp/tasks/dp_o?lang=en</li> <li>https://atcoder.jp/contests/abc154/tasks/abc154_e</li> </ul>"},{"location":"class/class10/","title":"Class10","text":"<p>\u5b9a\u7fa9\u4e00\u500b\u905e\u8ff4\u5f0f <code>F</code></p> <ol> <li>\u7576 0 \\le n &lt; 3, F(n) = 1</li> <li>\u7576 n \\ge 3, F(n) = 3 * F(n - 1) - F(n - 2)</li> </ol> <p>\u7d66\u5b9a n \u548c\u4e00\u500b\u8cea\u6578 P\uff0c\u8f38\u51fa F(n) \\mod P</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(\\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>Hint: \u77e9\u9663\u5feb\u901f\u51aa</p> <p>\u5b9a\u7fa9\u4e00\u500b\u905e\u8ff4\u5f0f <code>F</code></p> <ol> <li>\u7576 0 \\le n &lt; 2, F(n) = n</li> <li>\u7576 n \\ge 2, F(n) = F(n - 1) + F(n - 2) + n^2 + 2n + 1</li> </ol> <p>\u7d66\u5b9a n \u548c\u4e00\u500b\u8cea\u6578 P\uff0c\u8f38\u51fa F(n) \\mod P</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(\\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>Hint: \u77e9\u9663\u5feb\u901f\u51aa</p> <p>\u4e0b\u9762\u662f\u4e00\u500b dp \u8f49\u79fb\u95dc\u4fc2\uff0c\u4ed6\u5217\u51fa\u4e86\u4e0b\u5217\u72c0\u614b\u8f49\u79fb\u5f0f\u3002\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u9663\u5217 a</p> \\[ dp[i] = \\max_{0\\leq j &lt; i } \\left\\{ a[i] + \\max_{l(j)\\leq k \\leq r(i) } dp[k] \\right\\} \\] <p>\u76ee\u524d\u7684\u72c0\u614b\u6578\u91cf\u70ba O(n), \u5982\u679c\u66b4\u529b\u7684\u8f49\u79fb\u6703\u9700\u8981 O(n^2) \u7684\u6642\u9593, \u56e0\u6b64\u7e3d\u8907\u96dc\u5ea6\u70ba O(n^3)</p> <ol> <li>\u5047\u8a2d l(j) \u548c r(j) \u6c92\u6709\u4efb\u4f55\u6027\u8cea, \u8acb\u8aaa\u660e\u8f49\u79fb\u5982\u4f55\u505a\u5230\u81f3\u5c11 O(\\lg n) \u4f7f\u5f97\u7e3d\u8907\u96dc\u5ea6\u70ba O(n\\lg n)</li> <li>\u5047\u8a2d l(j) \u548c r(j) \u7686\u96a8\u8457 j \u905e\u589e, \u8acb\u8aaa\u660e\u8f49\u79fb\u5982\u4f55\u505a\u5230\u5747\u6524 O(1) \u4f7f\u5f97\u7e3d\u8907\u96dc\u5ea6\u70ba O(n)</li> </ol> <p>\u55ae\u8abf\u968a\u5217\u8ab2\u5802\u4e2d\u63d0\u5230\u7684 dp \u8f49\u79fb\u901a\u5f0f\u70ba \\(dp[i] = \\mathop{max}\\limits_{l(i) \\le j &lt; i}{A[j]}\\) \u4e26\u5f37\u8abf <code>l</code> \u51fd\u6578\u8981\u662f\u975e\u905e\u6e1b\u51fd\u6578\uff0c\u70ba\u4f55\u9700\u8981\u6b64\u689d\u4ef6\u8981\u6c42\uff0c\u672a\u6eff\u8db3\u6703\u7522\u751f\u751a\u9ebc\u932f\u8aa4\uff1f</p> <p>\u5df2\u77e5 arr \u70ba\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u5e8f\u5217 (1\u2264arr[i]\u226410^9)\uff0c\u8003\u616e\u4ee5\u4e0b\u51fd\u6578\u3002 <pre><code>int func_slow(const vector&lt;int&gt; &amp;arr) {\n    int n = arr.size();\n    int ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        int maxV = 0, cur = 0;\n        for (int j = i; j &lt; n; j++) {\n            if (arr[j] &gt;= maxV) {\n                cur++;\n                maxV = arr[j];\n            }\n        }\n        ans = max(ans, cur);\n    }\n    return ans;\n}\n</code></pre> 1. \u5206\u6790\u4e0a\u8ff0\u7a0b\u5f0f\u78bc\u7684\u8907\u96dc\u5ea6\u3002 2. \u8acb\u7d66\u51fa\u4e00\u500b\u6539\u826f\u904e\u5f8c\u7684\u6f14\u7b97\u6cd5\u53ef\u4ee5\u5728 O(n) \u6642\u9593\u5167\u5b8c\u6210 (Hint: \u5c0b\u627e\u5176\u55ae\u8abf\u6027\u8cea)</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u5e8f\u5217 A[1], A[2], \\dots, A[n]\uff0c\u548c\u6574\u6578 k</p> <p>\u6c42\u51fa\u6709\u591a\u5c11\u500b\u9577\u5ea6 n \u7684\u6b63\u6574\u6578\u5e8f\u5217 V[1], V[2], \\dots, V[n] \u6eff\u8db3</p> <ol> <li>V[i] \\leq A[i]</li> <li>\\mathop{\\sum_{i=1}^{v.size}} V_i \\leq k</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(nk) \u7684\u6f14\u7b97\u6cd5\u6c42\u51fa\u5408\u6cd5\u7684\u5e8f\u5217\u6578\u91cf</p> <p>Hint: \u524d\u7db4\u548c\u512a\u5316</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u5e8f\u5217 A[1],A[2],\u2026,A[n]\uff0c\u627e\u51fa\u6700\u9577\u5b50\u5e8f\u5217 S \u6eff\u8db3\u6bcf\u9805\u7686\u70ba\u524d\u4e00\u9805 +1 \u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(nlogn) \u7684\u6f14\u7b97\u6cd5 Hint: map\u512a\u5316</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u5e8f\u5217 A[1], A[2], \\dots, A[n]\uff0c\u6c42\u51fa\u6709\u591a\u5c11\u7d44 <code>pair</code> (i, j) \u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6</p> <ol> <li>1 \\le i &lt; j \\le n</li> <li>A[i] &lt; A[j]</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\log n) \u7684\u6f14\u7b97\u6cd5\u6c42\u51fa\u5408\u6cd5\u7684 <code>pair</code> \u6578\u91cf Hint: \u8cc7\u6599\u7d50\u69cb\u512a\u5316</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u5e8f\u5217 A[1], A[2], \\dots, A[n]\uff0c\u6c42\u51fa\u6709\u591a\u5c11\u7d44 <code>tuple</code> (i, j, k) \u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6</p> <ol> <li>1 \\le i &lt; j &lt; k \\le n</li> <li>A[i] &lt; A[j] &lt; A[i] * 2</li> <li>A[j] &lt; A[k] &lt; A[j] * 2</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\log n) \u7684\u6f14\u7b97\u6cd5\u6c42\u51fa\u5408\u6cd5\u7684 <code>tuple</code> \u6578\u91cf Hint: \u8cc7\u6599\u7d50\u69cb\u512a\u5316</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u5e8f\u5217 A[1],A[2],\u2026,A[n]\uff0c\u548c\u4e00\u500b\u6b63\u6574\u6578 k</p> <p>\u8acb\u627e\u51fa\u4e00\u500b\u7e3d\u548c\u6700\u5927\u7684\u5b50\u5e8f\u5217\uff0c\u6eff\u8db3 A\u5e8f\u5217\u4e2d\u6bcf\u9023\u7e8c k \u9805\u4e2d\u81f3\u5c11\u8981\u6709\u4e00\u500b\u6c92\u6709\u9078</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>Hint: \u524d\u7db4\u548c\u512a\u5316\u3001\u55ae\u8abf\u968a\u5217\u512a\u5316</p> <ul> <li>https://codeforces.com/contest/222/problem/E</li> <li>https://atcoder.jp/contests/dp/tasks/dp_m</li> <li>https://leetcode.com/problems/odd-even-jump/</li> <li>https://codeforces.com/problemset/problem/1313/c2</li> <li>https://codeforces.com/problemset/problem/474/E</li> <li>https://codeforces.com/problemset/problem/1077/F2</li> <li>https://codeforces.com/problemset/problem/1000/F</li> <li></li> </ul>"},{"location":"class/class11/","title":"Class11","text":"<p>\u8ab2\u5802\u4e0a\u63d0\u5230\u7684\u7528 LIS \u512a\u5316 LCS \u7684\u65b9\u6cd5\uff0c\u82e5\u5169\u5b57\u4e32\u5167\u6709\u91cd\u8907\u5b57\u5143\u8981\u5982\u4f55\u66f4\u6539\u7b97\u6cd5\u4e26\u8a66\u8457\u5206\u6790\u5176\u8907\u96dc\u5ea6\u3002 \u5617\u8a66\u4ee5 \u5b57\u4e32 1 : \u201ceacbdbae\u201d\uff0c\u5b57\u4e32 2 : \u201cdebaabca\u201d\u70ba\u4f8b\u5b50\u8aaa\u660e\u5982\u4f55\u8f49\u6210 LIS\u3002</p> <p>\u5206\u6cbb\u6cd5\u4f8b\u984c1 <code>NCTUOJ 670. Maximum Rectangle</code> \u4e2d\uff0c\u984c\u76ee\u6709\u5047\u8a2d\u7d05\u8272\u9ede\u548c\u85cd\u8272\u9ede\u6703\u88ab\u4e00\u689d\u76f4\u7dda\u5206\u958b\uff0c\u82e5\u984c\u76ee\u6539\u70ba\u4e0d\u9650\u5236\u7d05\u8272\u548c\u85cd\u8272\u9ede\u7684\u4f4d\u7f6e\uff0c\u8981\u5982\u4f55\u4fee\u6539\u6f14\u7b97\u6cd5\uff1f\u4e26\u8aaa\u660e\u5176\u4f5c\u6cd5\u548c\u8907\u96dc\u5ea6\u3002</p> <p>\u8a66\u8457\u8b49\u660e\u8ab2\u5802\u8b1b\u7fa9\u5206\u6cbb\u6cd5\u4f8b\u984c <code>codeforces 868 F. Yet Another Minimization Problem</code> \u70ba\u4f55\u53ef\u4ee5\u7528\u5206\u6cbb\u6cd5\u512a\u5316\uff0c\u4e26\u5206\u6790\u4ed6\u7684\u6c7a\u7b56\u9ede\u55ae\u8abf\u6027\u8cea\u3002</p> <p>\u5728\u659c\u7387\u512a\u5316\u7684\u554f\u984c\u4e2d\uff0c\u6211\u5011\u8a0e\u8ad6\u5230\u4e86\u4ed6\u7684 dp \u8f49\u79fb\u901a\u5f0f dp[i] = \\mathop{max}\\limits_{0 \\le j &lt; i}{a(j) * f(i) + b(j)}\u3002 \u8003\u616e\u4e00\u500b\u7279\u5225\u7684\u60c5\u6cc1 - b(j) = 0 - a(j) = dp[j] - f(i) = i</p> <p>\u8f49\u79fb\u5f0f\u8b8a\u70ba dp[i] = \\mathop{max}\\limits_{0 \\le j &lt; i}(dp[j] * i)\uff0c\u8acb\u554f\u662f\u5426\u6709\u4ec0\u9ebc\u7279\u6b8a\u6027\u8cea\u53ef\u4ee5\u512a\u5316\uff1f\u8acb\u63d0\u51fa\u63a8\u5c0e\u904e\u7a0b\u4e26\u5206\u6790\u5176\u8907\u96dc\u5ea6\u3002</p> <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba 2^n \u7684\u9663\u5217 F[0], F[1], ..., F[2^n - 1]\uff0c\u8981\u5728 O(n \\times 2^n) \u7684\u6642\u9593\u5167\u6c42\u51fa\u4e00\u500b\u9577\u5ea6\u70ba 2^n \u7684\u9663\u5217 G\uff0c\u5176\u4e2d G[i] = \\mathop{max}\\limits_{s \\subseteq i} F[s]\u3002</p> <p>\u8a66\u554f input mask \u70ba \\(10101_{(2)}\\) \u6642\uff0c\u7a0b\u5f0f\u4f9d\u5e8f\u6703\u8f38\u51fa\u54ea\u4e9b submask\uff0c\u4e26\u6839\u64da\u8f38\u51fa\u7d50\u679c\u8aaa\u660e\u4ee5\u4e0b\u7a0b\u5f0f\u70ba\u4f55\u53ef\u4ee5\u8f38\u51fa\u6240\u6709\u7d66\u5b9a mask \u7684\u6240\u6709 submask</p> <pre><code>void print_all_submask(int mask) {\n    for (int S = mask; ; S = (S - 1) &amp; mask) {\n        cout &lt;&lt; S &lt;&lt; '\\n';\n        if (S == 0)\n            break;\n    }\n}\n</code></pre> <p>\u7d66\u5b9a\u4e00\u500b array \u5305\u542b \\(n\\) \u500b\u6578\uff0c\u6bcf\u500b\u6578\u81f3\u591a\u70ba \\(2^k\\)\uff0c\u8a08\u7b97\u6709\u5e7e\u500b <code>pair</code> (i, j) \u6eff\u8db3 \\(a_i\\) | \\(a_j\\) = 0\uff0c\u8a2d\u8a08\u4e00\u6f14\u7b97\u6cd5\u5728 \\(O(3^k)\\) \u7b97\u51fa\u7b54\u6848\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6 O(n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u554f\u984c</p> <p>hint: \u659c\u7387\u512a\u5316</p> <p>\u6709 \\(n\\) \u500b\u4eba\u548c\uff0c\\(m\\) \u500b\u7269\u54c1\uff0c\u6bcf\u4eba\u81f3\u591a\u559c\u6b61 \\(p\\) \u500b\u7269\u54c1\uff0c\u9078\u4e00\u500b\u7269\u54c1\u7684\u96c6\u5408\uff0c\u4f7f\u5f97\u96c6\u5408\u7269\u54c1\u6578\u91cf\u6700\u5927\u4e14\u81f3\u5c11 \\(\u230a\\frac{n}{2}\u230b\\) \u4eba\u540c\u6642\u559c\u6b61\u96c6\u5408\u4e2d\u6240\u6709\u7269\u54c1\u3002</p> <p>\u8a2d\u8a08\u4e00\u96a8\u6a5f\u6f14\u7b97\u6cd5\u5728 \\(\\texttt{iteration}\\times O(3^p)\\) \u7b97\u51fa\u7b54\u6848\u3002</p> <ul> <li>https://codeforces.com/problemset/problem/486/E</li> <li>https://codeforces.com/problemset/problem/1442/D</li> <li>https://codeforces.com/problemset/problem/1425/B</li> <li>https://codeforces.com/problemset/problem/868/F</li> <li>https://codeforces.com/problemset/problem/1083/E</li> <li>https://codeforces.com/problemset/problem/1208/F</li> <li>https://atcoder.jp/contests/dp/tasks/dp_u</li> </ul>"},{"location":"class/class12/","title":"Class12","text":"<p>KMP \u4e2d\u5931\u6557\u9663\u5217\u7684\u610f\u7fa9\u70ba\u4f55\uff0c\u4e26\u8acb\u5beb\u51fa\u4e0b\u5217\u5b57\u4e32\u7684 KMP \u5931\u6557\u9663\u5217</p> <ol> <li>\"abcaac\"</li> <li>\"ababcaacabcaab\"</li> </ol> <p>Z \u9663\u5217\u7684\u610f\u7fa9\u70ba\u4f55\uff0c\u8acb\u5beb\u51fa\u4e0b\u5217\u5b57\u4e32\u7684 Z-function \u9663\u5217</p> <ol> <li>\"ababaa\"</li> <li>\"abaabaabaac\"</li> </ol> <p>\u7d66\u4e00\u500b\u5b57\u4e32\uff0c\u554f\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684substring\uff0c\u76ee\u524d\u4f5c\u6cd5\u70ba\u4f7f\u7528\u4e00\u8cea\u6578 p \u548c\u4e58\u6578 x\uff0c\u5229\u7528rolling hash\u7b97\u51fa\u6240\u6709substring \u7684 hash\u503c</p> <p>\u7136\u800c stringhash \u82e5\u672a\u59a5\u5584\u4f7f\u7528\uff0c\u6703\u56e0\u70ba hash collision \u9020\u6210\u7b54\u6848\u932f\u8aa4\uff0c\u8acb\u63d0\u51fa\u5169\u7a2e\u53ef\u4ee5\u6709\u6548\u6e1b\u5c11 hash collision \u7684\u8a2d\u8a08\u65b9\u5f0f\u3002</p> <p>\u7d66\u591a\u500b\u5b57\u4e32\uff0c\u7d71\u8a08\u6bcf\u500b\u5b57\u4e32\u7684\u51fa\u73fe\u6b21\u6578\uff0c\u4f7f\u7528\u5b57\u5178\u6a39\u548c map \u90fd\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\uff0c\u8a66\u5206\u6790\u4f7f\u7528\u5b57\u5178\u6a39\u7684\u8a71\u54ea\u4e9b\u90e8\u5206\u6703\u6bd4 map \u597d\u3002</p> <p>\u627e\u5c0b\u6700\u9577\u5728\u5b57\u4e32\u4e2d\u51fa\u73fe\u81f3\u5c11\u5169\u6b21\u7684 substring\uff0c\u8a2d\u8a08\u4e00\u4f5c\u6cd5\u4f7f\u7528\u4e00\u7a2e\u8ab2\u5802\u4e2d\u6559\u7684\u5b57\u4e32\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u984c\uff0c\u8907\u96dc\u5ea6\u81f3\u591a\u70ba \\(O(n \\log n)\\)\u3002</p> <p>Hint : stringhash</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5b57\u4e32 S, \u8acb\u4f7f\u7528\u81f3\u591a O(n) \u7684\u6642\u9593\u8907\u96dc\u5ea6\u9810\u8655\u7406, \u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c</p> <ol> <li>\u5728 O(1) \u7684\u6642\u9593\u56de\u7b54\u5b50\u5b57\u4e32 S[l...r] \u662f\u4e0d\u662f\u56de\u6587</li> </ol> <p>Hint: stringhash</p> <p>\u7d66\u5b9a\u5169\u74b0\u72c0\u5b57\u4e32 A,B\uff0c\u5224\u65b7\u5169\u5b57\u4e32\u662f\u5426\u76f8\u7b49\uff0c\u5982 ACBBB,BBACB \u70ba\u76f8\u7b49 \u4f46 ABBA,ABAB \u4e0d\u76f8\u7b49\uff0c\u8a2d\u8a08\u4e00\u4f5c\u6cd5\u4f7f\u7528\u4e00\u7a2e\u8ab2\u5802\u4e2d\u6559\u7684\u5b57\u4e32\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u984c\uff0c\u8907\u96dc\u5ea6\u81f3\u591a\u70ba O(n)\u3002 Hint: stringhash, Z-algorithm</p> <p>\u7d66\u5b9a\u5169\u74b0\u72c0\u5b57\u4e32 A,B\uff0cACBBB,BBACB \u70ba\u76f8\u7b49 \u4f46 ABBA,ABAB \u4e0d\u76f8\u7b49\uff0c\u82e5\u984c\u76ee\u8981\u6c42\u6709\u5e7e\u500b\uff0c\u5224\u65b7\u5169\u5b57\u4e32\u662f\u5426\u5b58\u5728\u67d0\u7a2e rotate \u4f7f\u5f97\u4ed6\u5011\u81f3\u591a\u53ea\u6709\u4e00\u500b\u5b57\u5143\u4e0d\u540c\uff0c\u8a2d\u8a08\u4e00\u4f5c\u6cd5\u4f7f\u7528\u8ab2\u5802\u4e2d\u6559\u7684\u5b57\u4e32\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u984c\uff0c\u8907\u96dc\u5ea6\u81f3\u591a\u70ba O(n)\u3002 Hint: Z-algorithm</p> <p>\u7d66\u5b9a\u4e00 array\uff0c\u627e\u5230\u4e00\u6bb5\u9023\u7e8c\u5340\u9593\u4f7f\u5f97\u5340\u9593\u5167\u7684\u503c xor \u8d77\u4f86\u6700\u5927\uff0c\u8a2d\u8a08\u4e00\u4f5c\u6cd5\u4f7f\u7528\u8ab2\u5802\u4e2d\u6559\u7684\u5b57\u4e32\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u984c\uff0c\u8907\u96dc\u5ea6\u81f3\u591a\u70ba O(n)\u3002 Hint: Trie</p> <p>\u7d66\u5b9a\u4e09\u500b\u5b57\u4e32\uff0c\u627e\u5230\u6700\u77ed\u7684\u5b57\u4e32\u540c\u6642\u5305\u542b\u4e09\u500b\u5b57\u4e32\u505a\u70ba substring\u3002 hint: KMP</p> <ul> <li>https://cses.fi/problemset/task/2420</li> <li>https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/</li> <li>https://cses.fi/problemset/task/2107</li> <li>https://tioj.ck.tp.edu.tw/problems/1306</li> <li>https://codeforces.com/contest/432/problem/D</li> <li>https://codeforces.com/problemset/problem/1163/D</li> <li>https://codingcompetitions.withgoogle.com/codejam/round/0000000000051635/0000000000104e05</li> <li>https://codeforces.com/contest/955/problem/D</li> </ul>"},{"location":"class/class2/","title":"Class2","text":"<p>\u8f38\u5165\u4e00\u68f5\u6a39\uff0c\u6839\u7bc0\u9ede\u7de8\u865f\u70ba 1\uff0c\u6a39\u4e0a\u6bcf\u9ede\u6709\u9ede\u6b0a\uff0c\u9ede\u6b0a\u7684\u503c\u53ea\u6703\u662f [1,5] \u5167\u7684\u6574\u6578</p> <p>\u8a08\u7b97\u6bcf\u500b\u9ede\u70ba\u6839\u7684\u5b50\u6a39\u6709\u5e7e\u7a2e\u4e0d\u540c\u9ede\u6b0a</p> <p>\u8acb\u7d66\u51fa\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u68f5\u6a39\uff0c\u6839\u7bc0\u9ede\u7de8\u865f\u70ba 1\uff0c\u63a5\u4e0b\u4f86\u6709 m \u500b\u64cd\u4f5c\uff0c\u64cd\u4f5c\u70ba\u5169\u500b\u6574\u6578 x y \u4ee3\u8868\u5c07\u4ee5 x \u70ba\u6839\u7684\u5b50\u6a39\u7684\u503c\u90fd\u52a0 y\uff0c\u6700\u5f8c\u8f38\u51fa\u6bcf\u500b\u9ede\u7684\u6b0a\u503c</p> <p>\u8acb\u7d66\u51fa\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u554f\u984c</p> <p>\u8a66\u8aaa\u660e\u9023\u901a\u5716\u7d93\u904e BCC \u7e2e\u9ede\uff0c\u70ba\u4f55\u4e00\u5b9a\u6703\u5f62\u6210\u4e00\u68f5 Tree\u3002</p> <p>\u8a66\u8aaa\u660e\u6709\u5411\u5716\u7d93\u904e SCC \u7e2e\u9ede\uff0c\u70ba\u4f55\u4e00\u5b9a\u6703\u5f62\u6210\u4e00\u500b DAG(\u6709\u5411\u7121\u74b0\u5716)\u3002</p> <p>\u8acb\u5c0d\u4e0b\u5716\u57f7\u884c Tarjan \u6f14\u7b97\u6cd5\uff0c\u8a08\u7b97\u51fa\u6bcf\u500b\u9ede\u7684 low \u548c dfn</p> <p></p> <p>(\u6f14\u7b97\u6cd5\u57f7\u884c\u904e\u7a0b\u512a\u5148\u8d70\u6578\u5b57\u5c0f\u7684 neighbor)</p> <p>\u5448\u4e0a\u984c\uff0c\u5229\u7528\u4e0a\u984c\u7684 low \u548c dfn \u8cc7\u8a0a\u627e\u51fa\u6240\u6709\u6a4b\u548c\u5272\u9ede\uff0c\u4e26\u8aaa\u660e\u5224\u65b7\u4f9d\u64da</p> <p>\u7d66\u4e00\u5f35\u6709\u5411\u5716 G\uff0c\u5305\u542b n \u500b\u7bc0\u9ede\u548c m \u689d\u908a\uff0c\u4e00\u500b walk \u8868\u793a\u53ef\u5728\u5716\u4e0a\u884c\u8d70\uff0c\u53ef\u80fd\u91cd\u8907\u7d93\u904e\u540c\u4e00\u500b\u9ede\u6216\u908a\u3002</p> <p>\u8f38\u51fa\u4e00\u500b walk \u80fd\u7d93\u904e\u6700\u591a\u4e0d\u540c\u7684\u9ede\u7684\u6578\u91cf\uff0c\u8acb\u7d66\u51fa\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n+m) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u554f\u984c</p> <p>\u6709 n \u500b\u8b8a\u6578 v_1, v_2, \\dots, v_n\uff0c\u6bcf\u500b\u8b8a\u6578\u53ef\u4ee5\u6307\u5b9a\u6210 { 1, 2} \u5176\u4e2d\u4e00\u500b\u3002 \u6709 2 \u7a2e\u985e\u578b\u7684\u9650\u5236\uff0c\u6bcf\u7a2e\u9650\u5236\u7d66\u5169 index x, y 1. v_x \\neq v_y 2. v_x + v_y &gt; 2 \u8acb\u5c0d\u6b64\u984c\u5b8c\u6574\u5217\u51fa\u6240\u6709 2-SAT \u5f0f\u5b50 1. \u521d\u59cb\u689d\u4ef6 2. \u6bcf\u7a2e\u9650\u5236\u9808\u589e\u52a0\u7684\u5f0f\u5b50</p> <p>\u8acb\u6558\u8ff0 2-SAT \u6f14\u7b97\u6cd5\u4e2d\uff0c\u5f9e SCC \u7e2e\u9ede\u5b8c\u7d50\u679c\u5230\u69cb\u9020\u51fa\u4e00\u7d44\u7b54\u6848\u7684\u8a73\u7d30\u6d41\u7a0b\u3002</p> <p>\u4e26\u8aaa\u660e\u70ba\u7167\u6b64\u6d41\u7a0b\u627e\u5230\u7684\u7b54\u6848\u4e00\u5b9a\u70ba\u5408\u6cd5\u89e3 1. \u70ba\u4f55 x \u548c not x \u6703\u6070\u597d\u6311\u5230\u4e00\u500b 2. \u70ba\u4f55\u4e0d\u6703\u6311\u5230\u6709\u885d\u7a81\u7684\u7b54\u6848</p> <ul> <li>https://codeforces.com/problemset/problem/862/B</li> <li>https://tioj.ck.tp.edu.tw/problems/1687</li> <li>https://tioj.ck.tp.edu.tw/problems/1137</li> <li>https://tioj.ck.tp.edu.tw/problems/1879</li> <li>https://cses.fi/problemset/task/1683</li> <li>https://cses.fi/problemset/task/1136</li> <li>https://codeforces.com/contest/1143/problem/E</li> <li>https://tioj.ck.tp.edu.tw/problems/1683</li> <li>https://tioj.ck.tp.edu.tw/problems/2196</li> </ul>"},{"location":"class/class3/","title":"Class3","text":"<p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1],a[2],\u2026,a[n] \u53e6\u5916\u6709 q \u6b21\u8a62\u554f\uff0c\u6bcf\u6b21\u8a62\u554f\u70ba\u5305\u542b tuple L,R,K \u56de\u7b54\u9663\u5217  a[L],a[L+1],\u2026,a[R] \u5340\u9593\u4e2d\u6709\u5e7e\u500b\u6578\u4e0d\u5927\u65bc K \u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(nlogn+qlogn) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u5c0d\u6bcf\u500b query \u6309\u7167 K \u6392\u5e8f, \u96e2\u7dda\u4f5c\u6cd5</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1], a[2], \\dots, a[n] \u53e6\u5916\u6709 q \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e \\1. \\text{update}(i, v): \u628a a[i] \u6539\u6210 v(v&gt;0) \\2. \\text{query}(S): \u627e\u5230\u6700\u5c0f\u7684 x \u6eff\u8db3 a[1] + a[2] + \\dots + a[x] &gt; S\uff0c\u82e5\u4e0d\u5b58\u5728\u5247\u56de\u50b3 -1</p> <p>(2%) \u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\log n + q \\log n\\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c (1%) \u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n + q \\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u4e8c\u5206\u641c, \u7dda\u6bb5\u6a39\u4e0a\u4e8c\u5206\u641c</p> <p>\u8ab2\u5802\u6240\u63d0\u5230\u7684 CSES - Josephus Problem II\uff0c\u672c\u4f86\u7684\u984c\u76ee\u662f\u6bcf\u8f2a\u56fa\u5b9a\u6578 k \u500b\u3002 \u82e5\u662f\u6bcf\u8f2a\u7d66\u5b9a\u4e0d\u540c\u7684 k \u6578\u503c\uff0c\u8acb\u8a2d\u8a08\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u984c\uff0c\u4e26\u5206\u6790\u6f14\u7b97\u6cd5\u7684\u8907\u96dc\u5ea6\u3002</p> <p>\u8f38\u5165\u4e00\u500b n\\times m \u5927\u5c0f\u7684\u4e8c\u7dad\u9663\u5217\uff0c\u6bcf\u683c\u6709\u4e00\u500b\u6b63\u6574\u6578\uff0c\u5de6\u4e0a\u89d2\u662f A[1][1]\uff0c\u53f3\u4e0b\u89d2\u662f A[n][m]\u3002 \u53e6\u5916\u6709 q \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e \\1. \\text{row_add}(i, l, r, x): \u5c07 A[i][l], A[i][l+1], \\dots, A[i][r] \u5168\u90e8\u90fd\u52a0\u4e0a x \\2. \\text{column_add}(i, l, r, x): \u5c07 A[l][i], A[l+1][i], \\dots, A[r][i] \u5168\u90e8\u90fd\u52a0\u4e0a x</p> <p>\u8acb\u8f38\u51fa\u4fee\u6539\u904e\u5f8c\u7684 A \u9663\u5217</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n\\times m + q) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u5340\u9593\u52a0\u503c\u5229\u7528\u5dee\u5206\u6280\u5de7\u8b8a\u6210\u55ae\u9ede\u52a0\u503c</p> <p>\u8f38\u5165\u4e00\u500b n\\times m \u5927\u5c0f\u7684\u4e8c\u7dad\u9663\u5217\uff0c\u6bcf\u683c\u6709\u4e00\u500b\u6b63\u6574\u6578\uff0c\u5de6\u4e0a\u89d2\u662f A[1][1]\uff0c\u53f3\u4e0b\u89d2\u662f A[n][m]\u3002 \u53e6\u5916\u4f9d\u5e8f\u6709 q \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e \\1. \\text{query}(i, j): \u8f38\u51fa A[i][j] \\2. \\text{row_add}(i, l, r, x): \u5c07 A[i][l], A[i][l+1], \\dots, A[i][r] \u5168\u90e8\u90fd\u52a0\u4e0a x \\3. \\text{column_add}(i, l, r, x): \u5c07 A[l][i], A[l+1][i], \\dots, A[r][i] \u5168\u90e8\u90fd\u52a0\u4e0a x</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(nm \\log (n+m) + q\\log(n+m)) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c hint: BIT, \u7b2c\u56db\u984c\u5728\u7dda\u7248\u672c</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1], a[2], \\dots, a[n] \u53e6\u5916\u6709 q \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e \\1. \\text{update}(i, v): \u628a a[i] \u6539\u6210 v \\2. \\text{query}(l, r): \u5728 a[l], a[l+1], \\dots, a[r] \u5167\u9032\u884c\u67e5\u8a62\uff0c\u8a08\u7b97 a[l] - a[l+1] + a[l+2] - a[l+3] + a[l+4] - a[l+5] \\dots + (-1)^{r-l}a[r]</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\log n + q \\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c hint: \\text{query}(l, r) = (a[l] + a[l + 2] + ...) - (a[l + 1] + a[l + 3] + ...)</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1], a[2], \\dots, a[n] \u53e6\u5916\u6709 q \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e \\1. \\text{update}(i, v): \u628a a[i] \u6539\u6210 v \\2. \\text{query}(l, r): \u5728 a[l], a[l+1], \\dots, a[r] \u5167\u9032\u884c\u67e5\u8a62\uff0c\u627e\u5230\u7b2c\u4e8c\u5927\u7684\u7684\u6578\u5b57\uff0c\u82e5\u4e0d\u5b58\u5728\u5247\u56de\u50b3 -1</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\log n + q \\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1], a[2], \\dots, a[n] \u53e6\u5916\u6709 q \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e \\1. \\text{update}(i, v): \u628a a[i] \u6539\u6210 v \\2. \\text{query}(l, r): \u5728 a[l], a[l+1], \\dots, a[r] \u5167\u9032\u884c\u67e5\u8a62\uff0c\u627e\u5230\u6700\u5927\u503c\u51fa\u73fe\u7684\u4f4d\u7f6e\uff0c\u82e5\u6709\u591a\u500b\u4f4d\u7f6e\u90fd\u662f\u6700\u5927\u503c\uff0c\u56de\u50b3\u7b2c\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\log n + q \\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1], a[2], \\dots, a[n] \u53e6\u5916\u6709 q \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e \\1. \\text{update}(i, v): \u628a a[i] \u6539\u6210 v \\2. \\text{query}(l, r): \u5728 a[l], a[l+1], \\dots, a[r] \u5167\u9032\u884c\u67e5\u8a62\uff0c\u8a08\u7b97\u9019\u500b\u7bc4\u570d\u7684\u6700\u5927\u503c\u7e3d\u5171\u51fa\u73fe\u5e7e\u6b21</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\log n + q \\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1], a[2], \\dots, a[n] \u53e6\u5916\u6709 q \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e \\1. \\text{query}(l, r): \u5224\u65b7 a[l], a[l+1], \\dots, a[r] \u6709\u6c92\u6709\u91cd\u8907\u6578\u5b57 \\2. \\text{update}(i, v): \u628a a[i] \u6539\u6210 v</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\log n + q \\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u7dad\u8b77\u6bcf\u500b index \u5728\u9663\u5217\u4e2d\u53f3\u908a\u6700\u8fd1\u4e14\u6578\u5b57\u76f8\u540c\u7684 index</p> <ul> <li>https://cses.fi/problemset/task/1650</li> <li>https://zerojudge.tw/ShowProblem?problemid=d794</li> <li>https://tioj.ck.tp.edu.tw/problems/1080</li> <li>https://zerojudge.tw/ShowProblem?problemid=g277</li> <li>https://cses.fi/problemset/task/2163</li> <li>https://cses.fi/problemset/task/1651</li> <li>https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ff43/0000000000337b4d</li> </ul>"},{"location":"class/class4/","title":"Class4","text":"<p>\u4f9d\u5e8f\u8f38\u5165 \\(n\\) \u500b\u6574\u6578 \\(a_1,a_2,\\ldots,a_n\\)\uff0c\u6bcf\u8f38\u5165\u4e00\u500b\u6574\u6578\u5c31\u8981\u8f38\u51fa\u76ee\u524d\u5df2\u7d93\u8f38\u5165\u7684\u6578\u5b57\u7684\u4e2d\u4f4d\u6578\u3002 \u4f8b\u5982\u8f38\u5165\u70ba \\([1,7,4,2,5,9]\\)\uff0c\u8f38\u51fa\u4f9d\u5e8f\u61c9\u70ba \\([1,4,4,3,4,4.5]\\)\u3002</p> <p>\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u554f\u984c\u3002</p> <p>hint: rank-tree</p> <p>\u4f9d\u5e8f\u8f38\u5165 \\(n\\) \u500b\u6574\u6578 \\(a_1,a_2,\\ldots,a_n\\)\uff0c\u6bcf\u8f38\u5165\u4e00\u500b\u6574\u6578\u5c31\u8981\u8f38\u51fa\u76ee\u524d\u5de6\u908a\u6709\u5e7e\u500b\u6578\u5b57\u6bd4\u81ea\u5df1\u5c0f \u4f8b\u5982\u8f38\u5165\u70ba \\([1,7,4,2,5,9]\\)\uff0c\u8f38\u51fa\u4f9d\u5e8f\u61c9\u70ba \\([0,1,1,1,3,5]\\)\u3002</p> <p>\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u554f\u984c\u3002</p> <p>hint: rank-tree</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u6b63\u6574\u6578\u9663\u5217 \\(a[0],a[1],\\ldots ,a[n\u22121]\\) \u53e6\u5916\u6709 \\(q\\) \u500b\u67e5\u8a62\uff0c\u6bcf\u500b\u67e5\u8a62 \\(\\text{query}(l,r)\\) \u8981\u5728 \\(a[l],\\ldots ,a[r]\\) \u9078\u4e00\u4e9b\u6578\u5b57\uff0c\u9078\u51fa\u7684\u6578\u5b57\u4e0d\u80fd\u662f\u76f8\u9130\u7684\uff08\u9078\u4e86\\(a[5]\\)\uff0c\u5c31\u4e0d\u80fd\u9078 \\(a[6]\\)\uff09\uff0c\u76ee\u6a19\u662f\u8b93\u7e3d\u548c\u9047\u5927\u6108\u597d</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n \\log n+q\\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: <pre><code>Node{\n  int ans;`\n  int sum[2][2];  \n  // sum[u][v] \n  // u:\u8868\u793a\u6700\u5de6\u908a\u7684\u7684\u6709\u6c92\u6709\u9078\n  // v:\u8868\u793a\u6700\u53f3\u908a\u7684\u7684\u6709\u6c92\u6709\u9078\n};\n</code></pre></p> <p>\u7dda\u6bb5\u6a39\u7684\u5340\u9593\u4fee\u6539\u901a\u5e38\u9808\u7528\u5230 lazy tag\uff0c\u5176\u4e2d\u5c11\u6578\u4e00\u7a2e\u4f8b\u5916\u70ba\u5340\u9593\u52a0\u503c\u55ae\u9ede\u67e5\u8a62\uff0c\u8acb\u554f\u8a72\u5982\u4f55\u4e0d\u4f7f\u7528 lasy tag \u5b8c\u6210\u6b64\u64cd\u4f5c?</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u6b63\u6574\u6578\u9663\u5217 \\(a[0], a[1], \\dots, a[n-1]\\) \u53e6\u5916\u6709 \\(q\\) \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e</p> <ol> <li>\\(\\text{div}(l, r):\\)  \u5c07 \\(a[l], \\dots, a[r]\\) \u6bcf\u4e00\u9805\u90fd\u9664\u4ee5\u4e8c\u7121\u689d\u4ef6\u6368\u53bb</li> <li>\\(\\text{query}(l, r):\\) \u8a08\u7b97 \\(a[l], \\dots, a[r]\\) \u7684\u7e3d\u548c</li> </ol> <p>\u5df2\u77e5 \\(a[i] \\leq m\\)</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n \\log m)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u6bcf\u500b\u6578\u5b57\u53ea\u8981\u88ab\u9664 \\((1+\\log m)\\) \u6b21\uff0c\u5c31\u6703\u8b8a\u6210 \\(0\\)</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u6b63\u6574\u6578\u9663\u5217 \\(a[0], a[1], \\dots, a[n-1]\\) \u53e6\u5916\u6709 \\(q\\) \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e</p> <ol> <li>\\(\\text{update}(x, v) :\\) \u5c07 \\(a[x]\\) \u6539\u6210 \\(v\\)</li> <li>\\(\\text{query}(l, r):\\) \u8a08\u7b97 \\(1\\times a[l] + 2\\times a[l+1] + 3 \\times a[l+2] + \\dots + (r-l+1) \\times a[r]\\)</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n \\log n + q \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u7d66\u4e00\u500b\u6b63\u6574\u6578 \\(w\\) \u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u6b63\u6574\u6578\u9663\u5217 \\(a[0], a[1], \\dots, a[n-1]\\) \u53e6\u5916\u6709 \\(q\\) \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e</p> <ol> <li>\\(\\text{update}(x, v) :\\) \u5c07 \\(a[x]\\) \u6539\u6210 \\(v\\)</li> <li>\\(\\text{query}(l, r):\\) \u8a08\u7b97 \\(w^1 \\times a[l] + w^2 \\times a[l+1] + w^3 \\times a[l+2] + \\dots + w^{r-l+1} \\times a[r]\\)</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n \\log n + q \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>note:  \u672c\u984c\u7684\u67e5\u8a62\u529f\u80fd\u53ef\u4ee5\u61c9\u7528\u5728 rolling hash \u6f14\u7b97\u6cd5\uff0c\u7528\u4f86\u505a\u5230\u52d5\u614b\u5224\u65b7\u5b57\u4e32\u662f\u5426\u76f8\u7b49\uff0c\u6216\u662f\u52d5\u614b\u5224\u65b7\u5340\u9593\u662f\u5426\u70ba\u56de\u6587</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u6b63\u6574\u6578\u9663\u5217 \\(a[0], a[1], \\dots, a[n-1]\\) \u53e6\u5916\u6709 \\(q\\) \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e</p> <ol> <li>\\(\\text{update}(l, r, v) :\\) \u5c07 \\(a[l] \\dots a[r]\\) \u90fd\u52a0\u4e0a \\(v\\)</li> <li>\\(\\text{query}:\\)</li> </ol> <p>\u627e\u4e09\u500b\u6578\u5b57 \\(i, j, k\\)\uff0c\u6eff\u8db3 \\(0\\leq i \\leq j \\leq k \\leq n-1\\)   \u76ee\u6a19\u8b93 \\(a[i] - 2\\times a[j] + a[k]\\) \u6700\u5927\u5316</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n \\log n + q \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u6b63\u6574\u6578\u9663\u5217 \\(a[0], a[1], \\dots, a[n-1]\\) \u53e6\u5916\u6709 \\(q\\) \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e</p> <ol> <li> <p>\\(\\text{update}(l, r, v) :\\) \u5c07 \\(a[l] \\dots a[r]\\) \u90fd\u52a0\u4e0a \\(v\\)</p> <p>\u6642\u9593\u8907\u96dc\u5ea6 \\(O(\\log n)\\)</p> </li> <li> <p>\\(\\text{query}:\\)</p> <p>\u627e\u5169\u500b\u6578\u5b57 \\(i, j\\)\uff0c\u6eff\u8db3 \\(0\\leq i \\leq j \\leq n-1\\)\uff0c\u76ee\u6a19\u8b93 \\(-1 \\times a[i] + a[j]\\) \u6700\u5927\u5316</p> <p>\u6642\u9593\u8907\u96dc\u5ea6 \\(O(\\log n)\\)</p> </li> </ol> <p>\u5047\u8a2d\u4f60\u5df2\u7d93\u5b8c\u6210\u4e86\u4e0a\u9762\u529f\u80fd\u7684\u8cc7\u6599\u7d50\u69cb \u5982\u4f55\u5229\u7528\u4e0a\u9762\u7684\u8cc7\u6599\u7d50\u69cb\u5b8c\u6210\u4e0b\u9762\u7684\u554f\u984c?</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u6b63\u6574\u6578\u9663\u5217 \\(a[0], a[1], \\dots, a[n-1]\\) \u53e6\u5916\u6709 \\(q\\) \u500b\u52d5\u4f5c\uff0c\u6bcf\u6b21\u7684\u52d5\u4f5c\u53ef\u80fd\u662f\u4ee5\u4e0b\u5176\u4e2d\u4e00\u7a2e</p> <ol> <li>\\(\\text{update}(x, v) :\\) \u5c07 \\(a[x]\\) \u52a0\u4e0a \\(v\\)</li> <li>\\(\\text{query}(l, r):\\) \u67e5\u8a62 \\(a[l] \\dots a[r]\\) \u7684\u6700\u5927\u9023\u7e8c\u548c </li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n \\log n + q \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u6b63\u6574\u6578\u9663\u5217 \\(a[0], a[1], \\dots, a[n-1]\\) \u53e6\u5916\u6709 \\(q\\) \u500b\u67e5\u8a62\uff0c\u6bcf\u500b\u67e5\u8a62 \\(\\text{query}(l, r, k)\\) \u8981\u8f38\u51fa \\(a[l], \\dots, a[r]\\) \u6709\u5e7e\u500b\u6578\u5b57\u5c0f\u65bc \\(k\\)\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n \\log n + q \\log q)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u96e2\u7dda\u8655\u7406\uff0c\u628a\u67e5\u8a62\u6309\u7167 \\(k\\) \u5c0f\u5230\u5927\u8655\u7406</p> <ul> <li>https://codeforces.com/edu/course/2/lesson/4/2/practice/contest/273278/problem/B</li> <li>https://codeforces.com/edu/course/2/lesson/4/2/practice/contest/273278/problem/A</li> <li>https://codeforces.com/edu/course/2/lesson/5/2/practice/contest/279653/problem/A</li> <li>https://codeforces.com/edu/course/2/lesson/5/2/practice/contest/279653/problem/F</li> <li>https://codeforces.com/contest/597/problem/C</li> <li>https://cses.fi/problemset/task/2416</li> <li>https://tioj.ck.tp.edu.tw/problems/1208</li> <li>https://tioj.ck.tp.edu.tw/problems/1224</li> </ul>"},{"location":"class/class5/","title":"Class5","text":"<p>\u6709\u4e00\u500b\u51fd\u6578 F \u7684\u5b9a\u7fa9\u5982\u4e0b</p> <ol> <li>F(0) = 1</li> <li>F(1) = 1</li> <li>F(n) = 2 \\times F(n - 1) - F(n - 2) + 1 \uff08\u7576 n \\geq 2\uff09</li> </ol> <p>\u7d66\u5b9a n \u548c\u4e00\u500b\u8cea\u6578 p\uff0c\u8acb\u8f38\u51fa F(n) \\mod P \u7684\u7d50\u679c</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(\\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u7d66 q \u500b\u7bc4\u570d\u5728 [1, M] \u6b63\u6574\u6578\uff0c\u9700\u8f38\u51fa\u9019 q \u500b\u6578\u5b57\u8cea\u56e0\u6578\u5206\u89e3\u7684\u7d50\u679c \u4f8b\uff1a720 \u8981\u8f38\u51fa 720=2^4 \\times 3^2 \\times 5</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c\uff0c\u9700\u8981\u6eff\u8db3</p> <ol> <li>\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(M \\log M + q \\log M)</li> <li>\u7a7a\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(M)</li> </ol> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u500b\u7bc4\u570d\u5728 [1,M] \u6b63\u6574\u6578\u9663\u5217 a[0],a[1],\u2026,a[n\u22121] \u8acb\u5f9e a \u9663\u5217\u4e2d\u9078\u51fa 2 \u500b\u6578\u5b57\uff0c\u4f7f\u9078\u51fa\u7684\u6578\u5b57\u7684\u6700\u5c0f\u516c\u500d\u6578 (LCM) \u6700\u5927\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n+MlogM) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u500b\u7bc4\u570d\u5728 [1,M] \u6b63\u6574\u6578\u9663\u5217 a[0],a[1],\u2026,a[n\u22121] \u8acb\u5f9e a \u9663\u5217\u4e2d\u79fb\u9664\u6700\u5c11\u6578\u5b57\uff0c\u4f7f\u5f97\u5269\u9918\u6240\u6709\u6578\u5b57\u7684 GCD \u6bd4\u539f\u9663\u5217\u5927\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(M+nlogM+MlogM) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u7d66\u4e00\u500b\u6b63\u6574\u6578 M</p> <p>\u8acb\u8a08\u7b97\u6709\u5e7e\u500b\u5408\u6cd5\u7684 (x,y) \u6578\u5c0d\u6eff\u8db3</p> <ol> <li>1\u2264x\u2264M</li> <li>1\u2264y\u2264M</li> <li>x \u548c y \u4e92\u8cea\uff0c\u4e5f\u5c31\u662f gcd(x,y)=1</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(MlogM) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u200b   \u7d66\u5b9a\u4e00\u6b63\u6574\u6578 N\uff0c\u6c42\u51fa gcd(N, 1) + gcd(N, 2) + ... + gcd(N, N - 1) + gcd(N, N)\u3002</p> <p>\u5728 mod \u904b\u7b97\u4e0b\uff0c\u9664\u6cd5\u53ef\u4ee5\u7528\u6a21\u9006\u539f\uff08\u4e58\u6cd5\u53cd\u5143\u7d20\uff09\u4f86\u8655\u7406\uff0c\u8acb\u69cb\u9020\u51fa\u4e00\u500b\u4f8b\u5b50</p> <p>\u4e5f\u5c31\u662f\u8aaa\uff0c\u8acb\u627e\u5230\u4e09\u500b\u6b63\u6574\u6578 x, y, p\uff0c\u7b26\u5408\u4e0b\u5217\u689d\u4ef6</p> <ol> <li>x, y, p \\geq 200</li> <li>p \u662f\u8cea\u6578</li> <li>x\\mod y = 0</li> <li>(x\\mod p) \\mod (y \\mod p) \\neq 0</li> </ol> <p>\u4e26\u627e\u51fa y \u7684\u6a21\u9006\u5143</p> <p>\u7d66\u4e00\u500b\u6b63\u6574\u6578 M\uff0c\u8acb\u8a08\u7b97 [1,M] \u5167\u6240\u6709\u6578\u5b57\u7684\u56e0\u6578\u500b\u6578\u7e3d\u548c\uff0c\u4e5f\u5c31\u662f\u8981\u8a08\u7b97 d(1)+d(2)+\u22ef+d(M)\uff0c\u5176\u4e2d d(x) \u8868\u793a x \u6709\u5e7e\u500b\u56e0\u6578\u3002</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(\\sqrt M) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6 n \u9663\u5217 a[0], a[1], \\dots, a[n-1]\uff0c\u521d\u59cb\u6bcf\u6578\u7686\u70ba 0\uff0c\u63a5\u4e0b\u4f86\u6709\u4e00\u7cfb\u5217\u5169\u7a2e\u64cd\u4f5c\u3002</p> <ol> <li>\u7d66 (x, y) \u5c07 a[x] \u52a0 y</li> <li>\u7d66 (x, y) \u8f38\u51fa\u6240\u6709 i mod x = y \u7684 a[i] \u503c\u52a0\u7e3d</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(q \\sqrt{n}) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u7d66\u4e00\u500b\u7121\u5411\u5716\uff0c\u5305\u542b n \u500b\u7bc0\u9ede\u548c m \u689d\u908a\uff0c\u6bcf\u500b\u7bc0\u9ede\u4e0a\u6709\u4e00\u500b\u6578\u5b57\uff0c\u4e00\u958b\u59cb\u6bcf\u4e00\u500b\u7bc0\u9ede\u4e0a\u7684\u6578\u5b57\u90fd\u662f 0</p> <p>\u63a5\u4e0b\u6709\u6709 q \u500b\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u662f\u4e0b\u9762\u5176\u4e2d\u4e00\u7a2e</p> <ol> <li>\\text{query}(x)\uff1a \u8f38\u51fa\u7de8\u865f x \u7684\u7bc0\u9ede\u4e0a\u9762\u7684\u6578\u5b57</li> <li>\\text{add}(x)\uff1a\u628a\u7de8\u865f x \u7684\u7bc0\u9ede\u4ee5\u53ca\u5b83\u7684\u6240\u6709\u9130\u5c45\u4e0a\u9762\u7684\u6578\u5b57\u90fd\u52a0\u4e0a 1</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(q \\sqrt{m}) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <ul> <li>https://tioj.ck.tp.edu.tw/problems/1234</li> <li>https://codeforces.com/problemset/problem/1541/B</li> <li>https://atcoder.jp/contests/abc215/tasks/abc215_d</li> <li>https://zerojudge.tw/ShowProblem?problemid=d193</li> <li>https://codeforces.com/problemset/problem/1295/D</li> <li>https://codeforces.com/problemset/problem/1117/D</li> <li>https://cses.fi/problemset/task/1081</li> <li>https://cses.fi/problemset/task/2417</li> <li>https://codeforces.com/contest/1580/problem/C</li> </ul>"},{"location":"class/class6/","title":"Class6","text":"<p><pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    if (0.1 + 0.2 == 0.3) {\n        cout &lt;&lt; \"YES\\n\";\n    } else {\n        cout &lt;&lt; \"NO\\n\";\n    }\n}\n</code></pre> \u554f\u4ee5\u4e0a\u7a0b\u5f0f\u78bc\u7684\u8f38\u51fa\u70ba\u4f55, \u4e26\u8aaa\u660e\u5176\u7406\u7531 \u8acb\u4fee\u6b63\u4e0a\u8ff0\u7a0b\u5f0f\u78bc, \u4f7f\u4ed6\u8f38\u51fa\u9810\u671f\u7684\u7d50\u679c</p> <p>\u7d66\u4e09\u500b\u4e8c\u7dad\u5750\u6a19, \u6bcf\u500b\u6578\u5b57\u90fd\u53ea\u5230\u5c0f\u6578\u9ede\u7b2c\u4e8c\u4f4d, \u4f8b\u5982 <code>34.64 16.54</code> <code>15.33 31.38</code> <code>63.17 53.37</code> \u8f38\u51fa\u4e09\u500b\u5ea7\u6a19\u6240\u5f62\u6210\u7684\u4e09\u89d2\u5f62\u9762\u7a4d\u3002 \u5982\u4f55\u5728\u4e0d\u4f7f\u7528 <code>double</code> \u6216 <code>float</code> \u7b49\u5c0f\u6578\u8cc7\u6599\u578b\u614b\u4e0b, \u8f38\u51fa\u4e09\u500b\u5ea7\u6a19\u6240\u5f62\u6210\u7684\u4e09\u89d2\u5f62\u9762\u7a4d\u3002</p> <p>hint: \u8f38\u5165\u7684\u6578\u5b57\u90fd\u53ea\u5230\u5c0f\u6578\u9ede\u7b2c\u4e8c\u4f4d, \u8a08\u7b97\u4e09\u89d2\u5f62\u9762\u7a4d\u904b\u7528\u5230\u7684\u5c0f\u6578\u4e5f\u53ea\u6709\u9664 2</p> <p>\u5e73\u9762\u4e0a\u6309\u7167\u9006\u6642\u9418\u9806\u5e8f\u7d66\u5b9a\u4e00\u500b\u7c21\u55ae\u591a\u908a\u5f62\u7684 n \u500b\u9802\u9ede\u5ea7\u6a19\uff0cp[1],p[2],\u2026,p[n]</p> <p>\u8acb\u5224\u65b7\u9019\u500b\u7c21\u55ae\u591a\u908a\u5f62\u662f\u5426\u662f\u51f8\u591a\u908a\u578b</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n^2\\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u5e73\u9762\u4e0a\u7d66\u5b9a\u4e00\u500b\u51f8\u591a\u908a\u5f62\u7684 n \u500b\u9802\u9ede\u5ea7\u6a19\uff0cp[1],p[2],\u2026,p[n] \u4f46\u662f\u9019\u4e9b\u9ede\u7684\u9806\u5e8f\u76ee\u524d\u7684\u4e82\u7684 (\u4e0d\u662f\u6309\u7167\u9006\u6642\u91dd\u9806\u5e8f\u6392\u5217)</p> <p>\u8acb\u5c07\u9019\u4e9b\u9ede\u6309\u7167\u9006\u6642\u91dd\u9806\u5e8f\u6392\u5217\u5f8c\u8f38\u51fa\uff0cy \u503c\u6700\u5927\u7684\u9ede\u7576\u7b2c\u4e00\u500b \uff08\u82e5\u6709\u591a\u500b y \u6700\u5927\u7684\u9078 x \u6700\u5c0f\u7684\uff09</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(nlogn) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u7d66\u5e73\u9762\u4e0a n \u500b\u9ede\u5ea7\u6a19</p> <p>\u8acb\u8a08\u7b97\u6700\u591a\u6709\u5e7e\u500b\u9ede\u5728\u540c\u4e00\u689d\u76f4\u7dda\u4e0a</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(n^2\\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u591a\u500b\u9ede\u8981\u5728\u540c\u4e00\u76f4\u7dda\u4e0a, \u5373\u9019\u4e9b\u9ede\u4efb\u9078\u5169\u689d\u7dda\u7d44\u6210\u7684\u76f4\u7dda\u659c\u7387\u5747\u4e00\u6a23</p> <p>\u7d66\u5e73\u9762\u4e0a n \u500b\u9ede p_1, p_2, \\dots, p_n\uff0c \u8acb\u8a08\u7b97\u6709\u5e7e\u7d44 (i, j, k) \u6eff\u8db3</p> <ol> <li>1 \\leq i &lt; j &lt; k \\leq n</li> <li>p_i, p_j, p_k \u5f62\u6210\u4e00\u500b\u9762\u7a4d\u4e0d\u70ba 0 \u7684\u4e09\u89d2\u5f62</li> </ol> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n^2 \\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u679a\u8209\u4e09\u89d2\u5f62\u7684\u5176\u4e2d\u4e00\u689d\u908a, \u5982\u679c\u5feb\u901f\u7684\u6c42\u51fa\u53ef\u4ee5\u548c\u9019\u689d\u908a\u5f62\u6210\u9762\u7a4d\u4e0d\u70ba 0 \u7684\u4e09\u89d2\u5f62\u500b\u6578, \u6ce8\u610f\u540c\u500b\u4e09\u89d2\u5f62\u53ef\u80fd\u6703\u88ab\u91cd\u8907\u679a\u8209</p> <p>\u7d66\u5e73\u9762\u4e0a n \u500b\u7d05\u9ede\u548c n \u500b\u85cd\u9ede, \u554f\u5b58\u4e0d\u5b58\u5728\u4e00\u689d\u76f4\u7dda, \u53ef\u4ee5\u5c07\u7d05\u85cd\u9ede\u5206\u6210\u5169\u534a\u5e73\u9762\u3002\u8acb\u7d66\u51fa\u4e00\u500b O(nlogn) \u7684\u6f14\u7b97\u6cd5</p> <p>\u7d66\u5e73\u9762\u4e0a n \u500b\u4e8c\u7dad\u9ede p_i = (x_i, y_i), \u8a2d\u8a08\u4e00\u500b O(n) \u7684\u6f14\u7b97\u6cd5\u627e\u5230\u4e00\u500b\u9ede (x, y), \u6eff\u8db3 \\sum{(|x_i - x| + |y_i - y|)} \u6700\u5c0f</p> <p>\u7d66\u4e00\u500b n \u500b\u9ede\u7684\u7c21\u55ae\u591a\u908a\u5f62, \u8a2d\u8a08\u4e00\u500b O(n) \u7684\u6f14\u7b97\u6cd5\u6c42\u51fa\u6709\u5e7e\u500b\u6574\u6578\u9ede\u5728\u5167\u90e8(\u5728\u908a\u7dda\u4e0a\u4e0d\u7b97)</p> <p>hint: \u76ae\u514b\u5b9a\u7406</p> <p>\u7d66\u4e09\u7684\u4e8c\u7dad\u9ede, \u6c42\u4e00\u500b\u534a\u5f91\u6700\u5c0f\u7684\u5713\u4f7f\u5f97\u4e09\u500b\u9ede\u90fd\u5728\u5713\u5167(\u5305\u542b\u5713\u7dda\u4e0a), \u8acb\u8a2d\u8a08\u4e00\u500b O(1) \u7684\u6f14\u7b97\u6cd5</p> <ul> <li>https://leetcode.com/problems/check-if-it-is-a-straight-line/</li> <li>https://cses.fi/problemset/task/2191</li> <li>https://cses.fi/problemset/task/2190</li> <li>https://cses.fi/problemset/task/2192</li> <li>https://open.kattis.com/problems/robotprotection</li> <li>https://vjudge.net/problem/Aizu-CGL_2_D</li> <li>https://cses.fi/problemset/task/2195</li> </ul>"},{"location":"class/class7/","title":"Class7","text":"<p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1],a[2],\u2026,a[n],  \u5c0d\u65bc\u9663\u5217\u4e2d\u7684\u6bcf\u4e00\u500b\u6578\u503c, \u627e\u4e00\u500b\u4ed6\u53f3\u908a\u6578\u503c\u6bd4\u4ed6\u5c0f\u4e26\u6700\u8fd1\u7684\u6578\u5b57\u4f4d\u7f6e, \u8acb\u4f7f\u7528\u55ae\u8abf stack \u89e3\u6c7a\u6b64\u554f\u984c\uff0c\u8acb\u8aaa\u660e\u8981\u4f7f\u7528\u905e\u589e or \u905e\u6e1b\u7684 stack \u4e26\u5217\u51fa\u5c0d\u4ee5\u4e0b\u6e2c\u8cc7\u8655\u7406\u81f3\u6bcf\u4e00\u9805\u6642 stack \u7684\u5167\u5bb9\u7269\uff0c\u4e26\u5217\u51fa\u7b54\u6848\u3002 <code>array = {3, 2, 1, 2, 6, 5, 2, 3, 2, 7, 2, 10}</code></p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1],a[2],\u2026,a[n], \u6c42\u51fa\u6bcf\u500b\u9023\u7e8c k \u9805\u5b50\u9663\u5217\u7684\u6700\u5c0f\u503c, \u8acb\u4f7f\u7528\u55ae\u8abf\u968a\u5217\u89e3\u6c7a\u6b64\u554f\u984c\uff0c\u8acb\u8aaa\u660e\u8981\u4f7f\u7528\u905e\u589e or \u905e\u6e1b\u7684 queue \u4e26\u5217\u51fa\u5c0d\u4ee5\u4e0b\u6e2c\u8cc7\u8655\u7406\u81f3\u6bcf\u4e00\u9805\u6642 queue \u7684\u5167\u5bb9\u7269\uff0c\u4e26\u5217\u51fa\u7b54\u6848\u3002 \u4f8b\u5982 <code>array = {1, 2, 1, 2, 6, 8, 2, 5, 4, 7, 8, 10}, k = 5</code></p> <p>\u4e00\u958b\u59cb\u6709 n \u500b\u6771\u897f\uff0c\u5229\u7528\u555f\u767c\u5f0f\u5408\u4f75\u6f14\u7b97\u6cd5\u57f7\u884c n\u22121 \u6b21\u96c6\u5408\u5408\u4f75\u6703\u5c07\u6240\u4ee5\u6771\u897f\u5408\u4f75\u5230\u4e00\u500b\u96c6\u5408\u3002 \u5206\u6790 Best Case \u548c Worst Case \u7684\u8f38\u5165\u6240\u9700\u8981\u7684\u642c\u904b\u6b21\u6578\uff0c\u4e26\u6982\u8ff0\u9019\u5169\u7a2e\u60c5\u6cc1\u7684\u5408\u4f75\u6d41\u7a0b\uff1f</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u5e8f\u5217 a[1], a[2], \\dots, a[n]\uff0c \u6709 q \u7b46\u8a62\u554f, \u6bcf\u6b21\u8a62\u554f\u9663\u5217 [a, b] \u9019\u500b\u5340\u9593\u4e2d\u51fa\u73fe\u6700\u591a\u6b21\u7684\u6578\u5b57\u7684\u51fa\u73fe\u6b21\u6578</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n \\sqrt n + Q \\sqrt n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u83ab\u968a</p> <p>\u5047\u8a2d N=16, \u8acb\u8a2d\u8a08\u51fa\u4e00\u7cfb\u5217 L,R \u5340\u9593\u8a62\u554f\uff0c\u4f7f\u5f97\u5176\u70ba\u83ab\u968a\u7684 worst case, \u5373\u5169\u7b46\u8a62\u554f\u4e4b\u9593 pointer \u79fb\u52d5\u6b21\u6578\u7686\u70ba O(\\sqrt n) \u898f\u6a21</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u5e8f\u5217 a[1], a[2], \\dots, a[n]\uff0c \u6709 q \u7b46\u8a62\u554f, \u6bcf\u6b21\u8a62\u554f\u9663\u5217 [a, b] \u9019\u500b\u5340\u9593\u4e2d\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684\u6578\u5b57</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n\\log n + q\\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u96e2\u7dda\uff0c\u5c07\u8a62\u554f\u6392\u5e8f\uff0c\u7dda\u6bb5\u6a39</p> <p>\u8acb\u7528\u55ae\u8abf stack \u89e3\u6c7a\u4e0d\u542b\u4fee\u6539\u7684\u5340\u9593\u6700\u5927\u503c\u554f\u984c\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(nlogn)\u3002</p> <p>hint: \u96e2\u7dda\uff0c\u5c07\u8a62\u554f\u6392\u5e8f\uff0c\u4e8c\u5206\u641c</p> <p>\u8acb\u4f7f\u7528\u5169\u500b stack \u4f86\u6a21\u64ec\u4e00\u500b queue, \u4e26\u4e14\u6a21\u64ec\u51fa\u4f86\u7684 queue \u7684 push \u548c pop \u64cd\u4f5c\u90fd\u8981\u6642\u9593\u8907\u96dc\u5ea6\u5747\u6524 O(1)</p> <p>\u7d66\u5b9a\u4e00 1~n \u7684 permutation\uff0c\u591a\u6b21\u8a62\u554f\u7d66\u5de6\u53f3\u5340\u9593\uff0c\u554f\u9019\u5340\u9593\u6709\u5e7e\u5c0d\u6578\u6eff\u8db3 x mod y = 0\u3002 \u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n\\log^2 n + q\\log n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c hint: \u96e2\u7dda\uff0c\u5c07\u8a62\u554f\u6392\u5e8f\uff0c\u7dda\u6bb5\u6a39</p> <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6b63\u6574\u6578\u9663\u5217 a[1], a[2], \\dots, a[n]\u3002 \u627e\u5230\u5169\u500b index i, j \u6eff\u8db3 i\\leq j \u76ee\u6a19\u662f\u8b93 (j-i+1) \\times \\min(a[i], a[j]) \u6700\u5927\u5316</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>hint: \u55ae\u8abf stack\uff0c\u82e5\u9023\u7e8c\u4e09\u500b\u6578\u5b57 x, y, z \u6eff\u8db3 y \u662f\u4e09\u500b\u6578\u5b57\u4e2d\u6700\u5c0f\u7684\uff0c\u67d0\u4e9b\u5143\u7d20\u6703\u662f\u78ba\u5b9a\u7528\u4e0d\u5230\u7684\u3002</p> <ul> <li>https://atcoder.jp/contests/abc247/tasks/abc247_d</li> <li>https://leetcode.com/problems/largest-rectangle-in-histogram/</li> <li>https://zerojudge.tw/ShowProblem?problemid=c528</li> <li>https://atcoder.jp/contests/abc183/tasks/abc183_f</li> <li>https://codeforces.com/contest/1637/problem/E</li> <li>https://codeforces.com/problemset/problem/600/E</li> <li> <p>https://codeforces.com/contest/915/problem/E</p> </li> <li> <p>https://tioj.ck.tp.edu.tw/contests/81/problems/2161</p> </li> </ul>"},{"location":"class/class8/","title":"Class8","text":"<p>n \u7bb1 m \u7403\uff0c\u7bb1\u7570\u7269\u540c\uff0c\u6bcf\u7bb1\u81f3\u5c11\u5305\u542b\u4e00\u500b\u7403\uff0c\u7b97\u51fa\u5206\u914d\u7684\u65b9\u6cd5\u6578\uff0c\u8acb\u5217\u51fa\u7b54\u6848\u7d44\u5408\u5f0f\u5b50\u3002 Hint: stars and bars</p> <p>\u8ab2\u5802\u4e0a\u4ecb\u7d39\u4e86\u93c8\u8457\u8272\u554f\u984c\uff0c\u984c\u76ee\u662f\u5c07 n \u500b\u9ede\u7684\u93c8\u5857\u4e0a m \u7a2e\u984f\u8272\uff0c\u76f8\u9130\u4e0d\u53ef\u540c\u8272\uff0c\u6c42\u51fa\u65b9\u6cd5\u6578\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e0a\u8ff0\u554f\u984c\u7684\u4e00\u500b\u8b8a\u5316\u7248\u672c \u5c07 n \u500b\u9ede\u93c8\u5857\u4e0a m \u7a2e\u984f\u8272\uff0c\u76f8\u540c\u984f\u8272\u7684\u5169\u500b\u9ede\u81f3\u5c11\u8981\u9593\u9694 3 \u500b\u7bc0\u9ede\uff0c\u6c42\u51fa\u65b9\u6cd5\u6578</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(logn) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u6709 n \u500b\u77f3\u982d\uff0c\u8f38\u51fa\u6709\u5e7e\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u628a\u77f3\u982d\u5206\u6210\u5947\u6578\u5806\uff0c\u4e14\u6bcf\u5806\u7684\u500b\u6578\u90fd\u4e0d\u540c\uff0c\u5c07\u7b54\u6848 mod1000000007 \u8f38\u51fa</p> <p>\u4f8b\u5b50\uff1a<code>n = 9</code> <code>9 = 1 + 2 + 5</code> <code>9 = 1 + 3 + 4</code> <code>9 = 2 + 3 + 4</code> <code>9 = 9</code> \u7e3d\u5171 <code>4</code> \u7a2e\u65b9\u6cd5</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n^3) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u6982\u8ff0\u4e00\u4e0b\u8ab2\u5802\u4e0a\u8b1b\u7684\u4e09\u7a2e\u8a08\u7b97\u7d44\u5408\u6578\u8a08\u7b97\u65b9\u5f0f\u5404\u81ea\u7684\u512a\u52a3\u548c\u9069\u7528\u60c5\u6cc1\u3002</p> <ol> <li>\u9810\u8655\u7406 \u968e\u4e58 \u548c \u968e\u4e58\u9006\u5143\uff0c\u5feb\u901f\u67e5\u8a62 C(n,k)</li> <li>\u9810\u8655\u7406\u4e8c\u7dad\u7d44\u5408\u6578\u5df4\u65af\u5361 DP \u8868\uff0c\u67e5\u8868\u8a08\u7b97 C(n,k)</li> <li>\u76f4\u63a5\u7528\u7b97\u5f0f\u8a08\u7b97 C(n,k)</li> </ol> <p>\u8f38\u5165\u5169\u500b\u6b63\u6574\u6578 n, k\uff0c\u9084\u6709\u4e09\u500b\u8cea\u6578 p_1, p_2, p_3</p> <p>\u4ee4 M = p_1 \\times p_2 \\times p_3\uff0c\u6211\u5011\u5e0c\u671b\u8f38\u51fa C^{n}_{k} \\mod M</p> <p>\u5df2\u77e5 1 \\leq n, k \\leq 10^9 \u4e14 1\\leq p_1, p_2, p_3 \\leq 10^{6}</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(p_1 + p_2 + p_3) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>Hint: \u4e2d\u570b\u5269\u9918\u5b9a\u7406</p> <p>\u4f8b\u984c\u4e2d\u7684\uff0c Atcoder 156D Bouquet\uff0c\u56e0\u70ba a, b \u76f8\u5c0d\u65bc n \u8f03\u5c0f\u6240\u4ee5\u4e0d\u4e00\u5b9a\u8981\u7528\u5230 <code>Lucas</code> \u5b9a\u7406\uff0c\u82e5\u4e0d\u4f7f\u7528 <code>Lucas</code> \u5b9a\u7406\u7684\u8a71\u53ef\u4ee5\u600e\u9ebc\u89e3\u6c7a\u6b64\u984c\uff1f</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(max(a,b)) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> <p>\u6709\u4e00\u500b n\u00d7n \u7684\u68cb\u76e4\u683c \u4e00\u958b\u59cb\u5728 (1,1) \u7684\u4f4d\u7f6e\uff0c\u76ee\u6a19\u8d70\u5230 (n,n) \u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u53ea\u80fd\u5c07 x \u52a0\u4e0a 1 \u6216\u662f\u5c07 y \u52a0\u4e0a 1\u3002</p> <p>\u8acb\u7528 n \u8868\u793a\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684\u8d70\u6cd5\uff1f</p> <p>\u6709\u4e00\u500b n\u00d7n \u7684\u68cb\u76e4\u683c \u4e00\u958b\u59cb\u5728 (1,1) \u7684\u4f4d\u7f6e\uff0c\u76ee\u6a19\u8d70\u5230 (n,n) \u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u53ea\u80fd\u5c07 x \u52a0\u4e0a 1 \u6216\u662f\u5c07 y \u52a0\u4e0a 1\u3002</p> <p>\u904e\u7a0b\u4e2d\u4e0d\u80fd\u7d93\u904e y = x - 1 \u7684\u683c\u5b50</p> <p>\u8acb\u7528 n \u8868\u793a\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684\u8d70\u6cd5\uff1f Hint : \u5361\u7279\u862d\u6578</p> <p>\u7d66 n \u500b\u4ecb\u65bc [1,M] \u7684\u6574\u6578\uff0c\u8a08\u7b97\u6709\u5e7e\u5c0d\u6578\u5b57\u7684 gcd \u662f\u4e8c\u7684\u51aa\u6b21\u65b9</p> <p>\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(MlogM) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c Hint : \u6392\u5bb9\u539f\u7406</p> <p>\u7d66\u5b9a\u56db\u500b\u6578 x,y,z,len\uff0c\u8acb\u554f\u540c\u6642\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6\u7684 <code>tuple</code> (i,j,k) \u6709\u5e7e\u7a2e </p> <ol> <li>(i+x,j+y,k+z) \u53ef\u69cb\u6210\u9762\u7a4d\u5927\u65bc 0 \u7684\u4e09\u89d2\u5f62\u7684\u4e09\u908a\u9577</li> <li>i+j+k\u2264len</li> </ol> <p>hint : \u6392\u5bb9\u539f\u7406</p> <ul> <li>https://cses.fi/problemset/task/1715</li> <li>https://atcoder.jp/contests/abc172/tasks/abc172_e</li> <li>https://cses.fi/problemset/task/2187</li> <li>https://atcoder.jp/contests/abc156/tasks/abc156_e</li> <li>https://atcoder.jp/contests/abc205/tasks/abc205_e</li> <li>https://atcoder.jp/contests/abc207/tasks/abc207_e</li> <li>https://codeforces.com/problemset/problem/1444/B</li> <li>https://codeforces.com/problemset/problem/1342/E</li> </ul>"},{"location":"class/class9/","title":"Class9","text":"<p>\u6709 n \u500b\u4eba\u6392\u968a\u9032\u5165\u8eca\u7ad9\uff0c\u6bcf\u79d2\u6709\u4e00\u500b\u4eba\u9032\u5165\u8eca\u5ec2\u7684\u6982\u7387\u70ba x\uff0c\u6c92\u6709\u4eba\u9032\u8eca\u7ad9\u6a5f\u7387\u70ba 1\u2212x\uff0c\u6c42 t \u79d2\u5f8c\u6240\u6709\u4eba\u90fd\u9032\u5165\u8eca\u7ad9\u7684\u6a5f\u7387\uff0c\u8a2d\u8a08 DP \u72c0\u614b\u4e26\u5217\u51fa\u8f49\u79fb\u6c42\u89e3\u6b64\u984c\u3002</p> <p>\u7d66\u5b9a\u4e00\u68f5\u6709\u6839\u6a39\uff0c\u5f9e Root \u958b\u59cb\u8d70\uff0c\u6bcf\u6b21\u6703\u4ee5\u5747\u7b49\u6a5f\u7387\u5f80\u4efb\u610f\u4e00\u500b Child \u8d70\uff0c\u8d70\u5230\u8449\u7bc0\u9ede\u5c31\u7d50\u675f\uff0c\u7b97\u51fa\u671f\u671b\u503c\u6240\u9700\u8d70\u7684\u6b65\u6578\uff0c\u8a2d\u8a08 DP \u72c0\u614b\u4e26\u5217\u51fa\u8f49\u79fb\u6c42\u89e3\u6b64\u984c</p> <p>\u6709 n \u500b x \u9762\u9ab0\uff08\u6578\u5b57\u5206\u5225\u662f 1~x\uff09\uff0c\u5404\u4e1f\u4e00\u6b21\uff0c\u6c42 n \u500b\u9ab0\u5b50\u4e2d\u51fa\u73fe\u9ede\u6578\u6700\u5927\u503c\u7684\u671f\u671b\u503c \u8a2d\u8a08 DP \u72c0\u614b\u4e26\u5217\u51fa\u8f49\u79fb\u6c42\u89e3\u6b64\u984c\u3002</p> <p>\u6709 n \u7a2e\u7269\u54c1\uff0c\u6bcf\u7a2e\u6771\u897f\u88ab\u62bd\u5230\u7684\u6a5f\u7387\u90fd\u662f 1/n \u6c42\u5728 n \u500b\u6771\u897f\u4e2d\u81f3\u5c11\u62bd\u904e i \u7a2e\u4e0d\u540c\u7269\u54c1\u81f3\u5c11\u4e00\u6b21\u7684\u671f\u671b\u6240\u9700\u62bd\u53d6\u6b21\u6578\u3002 \u8a2d\u8a08 DP \u72c0\u614b\u4e26\u5217\u51fa\u8f49\u79fb\u6c42\u89e3\u6b64\u984c\u3002</p> <p>\u6709 n \u500b\u7269\u54c1\uff0c\u6bcf\u500b\u6771\u897f\u88ab\u62bd\u5230\u7684\u6a5f\u7387\u90fd\u662f 1/n \u6c42\u5728 k \u6b21\u4ee5\u5167\u53ef\u4ee5\u628a n \u7a2e\u6771\u897f\u90fd\u62bd\u5230\u81f3\u5c11\u4e00\u6b21\u7684\u6a5f\u7387 \u8a2d\u8a08 DP \u72c0\u614b\u4e26\u5217\u51fa\u8f49\u79fb\u6c42\u89e3\u6b64\u984c\u3002</p> <p>\u7d66\u4e00\u5f35 DAG\uff0c\u7d66\u8d77\u9ede\u7d42\u9ede\uff0c\u4e26\u4e14\u6bcf\u500b\u9ede\u90fd\u53ef\u4ee5\u8d70\u5230\u7d42\u9ede\uff0c\u6bcf\u6b21\u6703\u5f9e\u76ee\u524d\u6240\u5728\u9ede\u96a8\u6a5f\u9078\u4e00\u689d\u51fa\u908a\u8d70\uff0c\u554f\u671f\u671b\u503c\u8981\u8d70\u5e7e\u6b65\u53ef\u5230\u7d42\u9ede\uff0c\u8a2d\u8a08 DP \u72c0\u614b\u4e26\u5217\u51fa\u8f49\u79fb\u6c42\u89e3\u6b64\u984c\u3002</p> <p>\u6709 m \u500b\u4eba\uff0c\u6bcf\u500b\u4eba\u96a8\u6a5f\u5206\u914d\u5230\u4e00\u500b\u4ecb\u65bc [1,n] \u7684\u6574\u6578\uff0c\u6bcf\u4e00\u500b\u6574\u6578\u7684\u6a5f\u7387\u90fd\u76f8\u7b49</p> <p>\u5df2\u77e5 n=10^6 \u5229\u7528\u7a0b\u5f0f\u8f14\u52a9\u8a08\u7b97\u6700\u5c11\u9700\u8981\u5e7e\u500b\u4eba\uff0c\u81f3\u5c11\u6709\u5169\u500b\u4eba\u5206\u914d\u5230\u76f8\u540c\u6578\u5b57\u7684\u6a5f\u7387\u6703\u5927\u65bc 1/2</p> <p>C++ \u6709\u5167\u5efa\u7684\u96a8\u6a5f\u6392\u5e8f random_shuffle(arr.begin(), arr.end()) \u53ef\u4ee5\u628a\u9663\u5217\u96a8\u6a5f\u6392\u5e8f\u4e14\u4f7f\u6bcf\u500b\u6392\u5217\u51fa\u73fe\u7684\u6a5f\u7387\u5747\u7b49\uff0c\u73fe\u5728\u7d66\u5b9a\u4e00\u500b\u9663\u5217\uff0c\u4e14\u53ef\u4f7f\u7528 rand() \u751f\u6210\u4e00\u96a8\u6a5f\u6578\uff0c\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n) \u7684\u6f14\u7b97\u6cd5\uff0c\u50c5\u80fd\u984d\u5916\u4f7f\u7528\u5e38\u6578\u8a18\u61b6\u9ad4\u7a7a\u9593\uff0c\u5b8c\u6210 random_shuffle \u7684\u529f\u80fd\uff0c\u4e14\u9700\u4fdd\u8b49\u6bcf\u500b\u6392\u5217\u88ab\u62bd\u5230\u7684\u6a5f\u7387\u5747\u7b49\u3002</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u6574\u6578\u9663\u5217 a_1, a_2, ..., a_n</p> <p>\u5df2\u77e5\u6b64\u9663\u5217\u5b58\u5728\u4e00\u500b\u9577\u5ea6\u81f3\u5c11 n / 3 \u7684\u5b50\u5e8f\u5217\u70ba\u7b49\u5dee\u6578\u5217\u3002</p> <p>\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n) \u7684\u96a8\u6a5f\u6f14\u7b97\u6cd5\uff0c\u6709 99\\% \u6b63\u78ba\u627e\u51fa\u8a72\u5b50\u5e8f\u5217\uff0c\u4e26\u5206\u6790\u8a72\u6f14\u7b97\u6cd5\u6240\u9700\u904b\u884c\u7684\u6b21\u6578\u3002</p> <p>Hint: \u5f9e 1 ~ n \u96a8\u6a5f\u62bd 3 \u500b\u6578\u5b57 x, y, z\uff0c(y-x) \u8207 (z-x) \u4e92\u8cea\u7684\u6a5f\u7387\u53ef\u4ee5\u8996\u70ba\u5e38\u6578\u3002 \u96a8\u8457 n \u6108\u5927\uff0c\u9019\u500b\u6a5f\u7387\u6703\u8da8\u8fd1\u65bc \\(6/\\pi^2 \\simeq 0.6079\\)\u3002 https://en.wikipedia.org/wiki/Coprime_integers#Probability_of_coprimality</p> <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5ea7\u6a19\u9ede (x1,y1),(x2,y2),...,(xn,yn)</p> <p>\u5df2\u77e5\u5b58\u5728\u4e00\u689d\u7dda\u901a\u904e\u4e00\u534a\u4ee5\u4e0a\u7684\u9ede\uff0c\u51fa\u73fe n/2 \u6b21\u4ee5\u4e0a</p> <p>\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a O(n) \u7684\u96a8\u6a5f\u6f14\u7b97\u6cd5\uff0c\u6709 99% \u6b63\u78ba\u627e\u51fa\u8a72\u76f4\u7dda\uff0c\u4e26\u5206\u6790\u8a72\u6f14\u7b97\u6cd5\u6240\u9700\u904b\u884c\u7684\u6b21\u6578\u3002</p> <ul> <li>https://cses.fi/problemset/task/1725</li> <li>https://atcoder.jp/contests/dp/tasks/dp_j</li> <li>https://cses.fi/problemset/task/1728</li> <li>https://codingcompetitions.withgoogle.com/codejam/round/000000000087711b/0000000000acd29b</li> <li>https://codeforces.com/contest/442/problem/B</li> <li>https://codeforces.com/problemset/problem/1245/E</li> <li>https://codeforces.com/problemset/problem/1310/D</li> </ul>"},{"location":"cp/apcs/","title":"APCS","text":""},{"location":"cp/apcs/#_1","title":"\u6b77\u5c46\u984c\u76ee","text":""},{"location":"cp/apcs/#_2","title":"\u89c0\u5ff5\u984c","text":"<p> \u8003\u8a66\u7bc4\u570d</p> <ul> <li>2016 3 \u6708</li> <li>2016 10 \u6708</li> <li>2017 3 \u6708</li> <li>2020 7 \u6708</li> <li>2020 10 \u6708</li> <li>2021 1 \u6708</li> <li>2021 11 \u6708</li> <li>2022 1 \u6708</li> <li>2022 6 \u6708</li> </ul>"},{"location":"cp/apcs/#_3","title":"\u5be6\u4f5c\u984c","text":"<ul> <li>\u5be6\u4f5c\u984c\u6574\u7406\u7db2\u7ad9 (\u6db5\u84cb\u6b77\u5c46\u984c\u76ee\uff0c\u540d\u984c\u7bc4\u570d)</li> <li>\u6a21\u64ec\u8003\u8a66\u7cfb\u7d71</li> </ul>"},{"location":"cp/apcs/#_4","title":"\u8003\u8a66\u8cc7\u8a0a","text":""},{"location":"cp/apcs/#_5","title":"\u6642\u7a0b\u8868","text":"| \u79d1\u76ee        | \u8aaa\u660e  | \u6642\u9593                                                   | | ----------- | ----- | ------------------------------------------------------ | | \u89c0\u5ff5\u984c (\u4e00) | 20 \u984c | 9 : 40 ~ 10 : 40\u00a0\u00a0\u00a0(9 : 30 \u5165\u5834)    | | \u89c0\u5ff5\u984c (\u4e8c) | 20 \u984c | 11 : 10 ~ 12 : 10\u00a0\u00a0\u00a0(11 : 10 \u5165\u5834) | | \u5be6\u4f5c\u984c      | 4 \u984c  | 13 : 40 ~ 16 : 40\u00a0\u00a0\u00a0(13 : 30 \u5165\u5834) |"},{"location":"cp/apcs/#_6","title":"\u8003\u8a66\u7d30\u7bc0","text":""},{"location":"cp/apcs/#_7","title":"\u89c0\u5ff5\u984c","text":"<p>\u00a0\u00a0\u89c0\u5ff5\u984c\u4e26\u4e0d\u662f\u984c\u984c\u7b49\u5206</p> <ul> <li>\u89c0\u5ff5\u984c\u5171\u6709 40 \u984c</li> <li>\u9019 40 \u984c\u88e1\uff0c\u6709\u4e9b 4 \u5206\uff0c\u6709\u4e9b 0 \u5206</li> <li>\u4e94\u7d1a\u5206\u6700\u591a\u53ea\u80fd\u88ab\u6263 8 \u5206 (= \u6709\u5206\u7684 2 \u984c)</li> <li>\u4f60\u4e0d\u6703\u77e5\u9053\u90a3\u4e9b\u984c\u76ee\u662f\u6709\u5206\u7684\u90a3\u4e9b\u6c92\u6709\uff0c\u6bcf\u4e00\u984c\u90fd\u5f88\u91cd\u8981</li> </ul>"},{"location":"cp/apcs/#_8","title":"\u5be6\u4f5c\u984c","text":"<p>\u00a0\u00a0\u5be6\u4f5c\u984c\u6709\u90e8\u5206\u5206\u53ef\u62ff</p> <ul> <li>\u5be6\u4f5c\u984c\u5171\u6709 4 \u984c\uff0c\u6bcf\u984c\u6709 20 \u500b\u6e2c\u8cc7\uff0c1 \u500b 5 \u5206</li> <li>\u6bcf\u500b\u6e2c\u8cc7\u7bc4\u570d\u6709\u53ef\u80fd\u4e0d\u540c\uff0c\u4e0d\u7528\u5b8c\u5168\u5c0d\u4e5f\u6709\u6a5f\u6703\u62ff\u5230\u5206\u6578</li> <li>\u5982\u679c\u60f3\u4e0d\u5230\u6700\u597d\u8907\u96dc\u5ea6\u7684\u65b9\u6cd5\uff0c\u8a66\u8457\u60f3\u60f3\u770b\u80fd\u5920\u62ff\u90e8\u5206\u5206\u7684\u89e3\u6cd5</li> </ul> <p>\u00a0\u00a0\u8a55\u5206\u53d6\u6700\u5f8c\u984c\u4ea4\u7684\u90a3\u4efd\u7a0b\u5f0f\u78bc</p> <p>  \u6bcf\u4e00\u984c\u4e2d\u6240\u6709\u7e73\u4ea4\u7684\u7a0b\u5f0f\u78bc\u62ff\u5230\u7684\u5206\u6578\u53d6\u5e73\u5747</p> <p>  \u6bcf\u4e00\u984c\u4e2d\u6240\u6709\u7e73\u4ea4\u7684\u7a0b\u5f0f\u78bc\u4e2d\u53d6\u6700\u9ad8\u5206\u7684\u90a3\u500b</p> <p>  \u6bcf\u4e00\u984c\u4e2d\u53ea\u53d6\u6700\u5f8c\u7e73\u4ea4\u7684\u7a0b\u5f0f\u78bc\uff0c\u5176\u4ed6\u7565\u904e</p>"},{"location":"cp/apcs/#_9","title":"\u5b78\u7fd2","text":"<ul> <li>APCS Camp</li> <li>AP325</li> <li>PyAP45</li> <li>\u6210\u5927\u8b1b\u7fa9</li> <li>\u5f9e\u96f6\u958b\u59cb</li> <li>yuihuang</li> <li>\u57f9\u54e5\u5b78\u7fd2\u7b46\u8a18</li> <li>cbj's \u7a0b\u5f0f\u65e5\u8a18</li> </ul>"},{"location":"cp/apcs/#_10","title":"\u793e\u7fa4","text":"<ul> <li>\u6137\u54e5\u7a0b\u5f0f-\u9ad8\u4e2d\u751fAPCS\u7a0b\u5f0f\u6559\u80b2</li> <li>APCS CPE LeetCode \u7a0b\u5f0f\u89e3\u984c\u8a0e\u8ad6\u793e\u7fa4</li> <li>\u4e2d\u5b78\u8cc7\u8a0a\u8a0e\u8ad6\u7fa4 CISC</li> <li>APSC \u5be6\u4f5c\u984c\u6aa2\u6e2c</li> </ul>"},{"location":"cp/apcs/#_11","title":"\u5099\u8a3b","text":""},{"location":"cp/apcs/#_12","title":"\u908f\u8f2f\u904b\u7b97\u5b50\u9806\u5e8f","text":"| \u904b\u7b97\u5b50             | \u512a\u5148\u6b0a (\u6578\u5b57\u8d8a\u5c0f\u512a\u5148\u6b0a\u8d8a\u9ad8) | | ------------------ | --------------------------- | | $\\texttt{!},\\sim$  | 1                           | | $\\texttt{*},\\texttt{/},\\%$  | 2                           | | $\\texttt{+},\\texttt{-}$     | 3                           | | $\\texttt{&lt;&lt;},\\texttt{&gt;&gt;}$   | 4                           | | $\\texttt{&lt;},\\texttt{&gt;}$     | 5                           | | $\\texttt{==}$      | 6                           | | $\\texttt{&amp;},\\mid,$ ^  | 7                           | | $\\texttt{&amp;&amp;},\\mid\\mid$ | 8                           |"},{"location":"cp/contest/","title":"\u76ee\u9304","text":"<p>\u4ee5\u4e0b\u5e7e\u500b\u7db2\u5740\u5e7e\u4e4e\u6db5\u84cb\u4e86\u6240\u6709\u7684\u6bd4\u8cfd\u8cc7\u6599\uff0c\u9019\u908a\u4e3b\u8981\u662f\u6574\u7406\u9019\u4e9b\u7db2\u7ad9\u6c92\u6574\u7406\u5230\u7684\u8cc7\u6599</p> <ul> <li> <p>sorahisa-rank.github.io</p> </li> <li> <p>twpca</p> </li> <li> <p>google drive \u984c\u672c</p> </li> </ul>"},{"location":"cp/contest/#_1","title":"\u76ee\u9304","text":"<ul> <li> <p>TOI</p> <ul> <li>TOI \u5165\u71df\u8003</li> <li>TOI \u9078\u8a13\u6a21\u8003</li> <li>TOI \u6a21\u64ec\u8cfd</li> </ul> </li> <li> <p>\u5b78\u79d1\u80fd\u529b\u7af6\u8cfd</p> <ul> <li>\u6821\u5167\u8cfd</li> <li>\u5340\u57df\u8cfd</li> <li>\u5168\u570b\u8cfd\u6a21\u64ec\u8cfd</li> </ul> </li> <li> <p>\u5176\u4ed6\u6bd4\u8cfd</p> <ul> <li>\u652f\u7dda\u6bd4\u8cfd</li> <li>\u5404\u570b OI</li> </ul> </li> <li> <p>\u6bd4\u8cfd\u6649\u7d1a\u8def\u7dda\u5716</p> </li> </ul>"},{"location":"cp/learning1/","title":"Learning1","text":""},{"location":"cp/learning1/#_1","title":"\u90e8\u843d\u683c, \u7c21\u5831","text":"\u540d\u7a31 \u7db2\u5740 \u7d93\u6b77 \u4faf\u6b23\u7def <li>\u7af6\u7a0b\u7b46\u8a18 <li>\u90e8\u843d\u683c <li>2022 \u570b\u624b \u8cf4\u662d\u52f3 <li>slides<li>\u5165\u71df\u8003\u6bd4\u8cfd\u7b56\u7565 <li>2022 \u570b\u624b \u5433\u67cf\u71c1 <li>\u90e8\u843d\u683c<li>CSES solution <li>2022 2! \u674e\u653f\u9060 <li>\u90e8\u843d\u683c<li>wiki <li>NHDK \u8b1b\u5e2b<li>UMD CS \u674e\u65fa\u967d <li>slides <li>2015 2! \u738b\u6dc7 <li>\u90e8\u843d\u683c <li>2023 \u570b\u624b \u9673\u67cf\u51f1 <li>\u90e8\u843d\u683c <li>2023 \u570b\u624b \u738b\u8915\u7acb <li>\u90e8\u843d\u683c<li>slides<li>2022 \u81fa\u5927\u4e8c\u968e\u7b46\u8a66 <li>2022 2! \u6797\u79c9\u8ed2 <li>\u90e8\u843d\u683c <li>2021 \u570b\u624b \u9673\u514b\u76c8 <li>\u90e8\u843d\u683c<li>\u8b80\u66f8\u6703<li>github(\u7c21\u5831) <li>NHDK \u5275\u8fa6\u4eba \u9ec3\u81f4\u7693 <li>\u90e8\u843d\u683c<li>\u7af6\u7a0b\u6280\u80fd\u6a39 <li>NHDK \u8b1b\u5e2b \u937e\u8a60\u5148 <li>\u90e8\u843d\u683c <li>2013 2!<li>TOI \u51fa\u984c\u8005<li>\u5168\u570b\u8cfd\u51fa\u984c\u8005 \u6797\u51a0\u4f36 <li>\u90e8\u843d\u683c <li>2023 1! \u66f9\u5bb8\u777f <li>\u6559\u5b78\u90e8\u843d\u683c<li>slides \u5165\u71df\u8003\u8a13\u7df4 <li>2020 \u570b\u624b \u5433\u6c9b\u6069 <li>\u90e8\u843d\u683c \u7121 \u9673\u6cf0\u7a4e <li>\u90e8\u843d\u683c <li>2022 2! \u8b1d\u65fb\u931a <li>github<li>hackmd<li>\u8a08\u7b97\u5e7e\u4f55\u7b46\u8a18 <li>\u5361\u8eca\u6559\u6388<li>TOI \u51fa\u984c\u8005<li>\u5168\u570b\u8cfd\u51fa\u984c\u8005 \u2fb1\u8a60\u7965 <li>APSC \u7d44\u7d93\u9a57\u5206\u4eab \u7121 \u738b\u54c1\u7fd4 <li>\u7533\u8acb\u7d93\u9a57\u5206\u4eab <li>2021 2! \u8607\u67cf\u7444 <li>\u90e8\u843d\u683c <li>2019 \u570b\u624b \u674e\u5176\u6a3a <li>\u90e8\u843d\u683c \u7121 \u8303\u91d7\u7dad <li>\u90e8\u843d\u683c <li>2020 2! \u66f9\u5141\u78a9 <li>\u90e8\u843d\u683c <li>2023 1! \u5353\u80b2\u5b89 <li>hackmd <li>2023 1!<li>2023 \u6578\u5967\u570b\u624b \u9ec3\u67cf\u6f84 <li>hackmd <li>2023 \u6578\u5967 3! \u6797\u54c1\u5b89 <li>\u90e8\u843d\u683c<li>APCS \u7d93\u9a57\u5206\u4eab \u7121 \u5f35\u96c6\u8cb4 <li>hackmd<li>\u90e8\u843d\u683c<li>\u6f14\u7b97\u6cd5\u8cc7\u6e90\u6574\u7406 <li>2017 2! \u5433\u5b97\u9054 <li>algoseacow github<li>\u89e3\u984c\u65e5\u8a8c <li>2016 2! \u738b\u5f65\u4ec1 <li>FB \u5fc3\u5f97\u6587 <li>2016 2! \u5289\u6f88 <li>\u90e8\u843d\u683c <li>2021 \u570b\u624b \u8449\u5ba5\u8fb0 <li>hackmd<li>\u89e3\u984c\u65e5\u8a18 <li>2022 1! \u9ec3\u9802\u8ed2 <li>\u90e8\u843d\u683c \u7121 \u674e\u57f9\u7db8 <li>\u90e8\u843d\u683c \u7121 \u937e?\u5747 <li>\u90e8\u843d\u683c \u7121 \u674e\u5c1a\u54f2 <li>\u90e8\u843d\u683c \u7121 \u53e4\u4f73\u6021 <li>hackmd<li>111 \u7af9\u5973\u7af6\u8cfd\u57f9\u8a13 \u7121 \u9ec3\u60df <li>\u7db2\u7ad9 <li>2022 1! \u718a\u6069\u4f36 <li>\u90e8\u843d\u683c <li>2022 1! \u8b1d\u7267\u61f7 <li>hackmd<li>CSES \u984c\u89e3(code)<li>slides \u7121 \u738b\u5e2b\u5b87 <li>\u90e8\u843d\u683c <li>2019 \u570b\u624b \u90ed\u52dd\u5a01 <li>hackmd <li>2023 1! \u5ed6\u6600\u967d <li>hackmd <li>2023 1! \u738b\u653f\u797a <li>\u90e8\u843d\u683c <li>2021 2! \u912d\u8a60\u582f <li>\u90e8\u843d\u683c <li>2022 2!"},{"location":"cp/learning1/#_2","title":"\u5176\u4ed6\u7db2\u7ad9","text":"\u540d\u7a31 \u7db2\u5740 \u8cc7\u8a0a\u4e4b\u82bd <li>2023 \u7b97\u6cd5\u73ed\u6559\u6750<li>2023 \u8a9e\u6cd5\u73ed\u6559\u6750<li>neoj \u6f14\u7b97\u6cd5\u7b46\u8a18 <li>\u7db2\u7ad9 oi wiki <li>\u7db2\u7ad9<li>\u6db5\u84cb\u6240\u6709\u4e3b\u984c CSDN <li>\u7db2\u7ad9<li>\u535a\u5ba2 : \u984c\u89e3\uff0c\u4e3b\u984c\u8a73\u89e3 cnblog <li>\u7db2\u7ad9<li>\u535a\u5ba2 : \u984c\u89e3\uff0c\u4e3b\u984c\u8a73\u89e3 USACO guide <li>Training \u7db2\u7ad9<li>\u4e3b\u984c\u5f0f\u6559\u5b78 &amp; \u8a13\u7df4 &amp; \u984c\u55ae cp algorithm <li>\u7db2\u7ad9<li>\u90e8\u5206\u4e3b\u984c\u6574\u7406<li>\u8b1b\u89e3\u6e05\u6670 NHDK <li>\u56db\u6821\u71df\u968a\u7c21\u5831<li>\u5f71\u7247\u6e05\u55ae NCKU ACM <li>\u8b1b\u7fa9 \u8523\u5b97\u54f2\u6559\u6388\u6559\u6750 <li>hackmd<li>\u7db2\u53cb\u89e3\u7b54 Awesome CS Training <li>github ITSA <li>judge<li>\u9700\u8a3b\u518a\u5e33\u865f A Simple Blog <li>\u7db2\u7ad9 \u7af6\u7a0b\u4fee\u7df4\u5fc3\u6cd5 <li>hackmd \u5efa\u4e2d 2015 \u57f9\u8a13 <li>\u7db2\u7ad9 \u6700\u77ed\u8def blog <li>\u7db2\u7ad9 \u4e0d\u932f\u7684\u984c\u55ae <li>hackmd \u8cc7\u6599\u7d50\u69cb\u984c\u55ae <li>\u7db2\u7ad9 \u5b9c\u862d\u9ad8\u4e2d\u81ea\u5b78\u5e73\u53f0 <li>\u8ad6\u58c7(\u4e0d\u4e00\u5b9a\u8ddf\u7a0b\u5f0f\u6709\u95dc)<li>\u7db2\u7ad9 <p>CF</p> <ul> <li>https://codeforces.com/blog/entry/55219</li> <li>https://codeforces.com/blog/entry/94042</li> </ul>"},{"location":"cp/learning1/#youtube","title":"youtube","text":"<ul> <li> <p>Dynamic Programming Playlist</p> </li> <li> <p>CSES \u984c\u89e3\u5f71\u7247\u7248</p> </li> <li> <p>\u6f14\u7b97\u6cd5\u6982\u5ff5\u8b1b\u89e3</p> </li> <li> <p>Errichto Algorithms</p> </li> </ul>"},{"location":"cp/learning1/#_3","title":"\u5beb\u7a0b\u5f0f\u7528\u7684\u8edf\u9ad4","text":"<ul> <li>codeblock (APCS)</li> <li>vscode</li> <li>vim</li> </ul>"},{"location":"cp/learning1/#debug","title":"\u5982\u4f55 debug","text":"<ul> <li>USACO Guide debug \u6559\u5b78</li> </ul>"},{"location":"cp/learning1/#online-judge","title":"Online Judge","text":"\u540d\u7a31 \u5099\u8a3b Codeforces <li>\u8fd1\u671f\u6bd4\u8cfd\u5927\u90e8\u5206\u90fd\u662f\u6897\u984c\u5927\u8cfd<li>\u53ef\u4ee5\u5237\u6bd4\u8f03\u4e45\u9060\u7684 Educational Round,\u6703\u6709\u6bd4\u8f03\u591a\u6f14\u7b97\u6cd5\u984c CSES <li>\u6709\u5f88\u591a\u88f8\u984c\u3001\u7d93\u5178\u984c<li>\u53ef\u4ee5\u6311\u81ea\u5df1\u6bd4\u8f03\u4e0d\u719f\u7684\u4e3b\u984c\u5237<li>\u4e0d\u904e\u5f8c\u9762\u6709\u4e9b trick \u5176\u5be6\u4e0d\u592a\u6703\u7528\u5230 Atcoder <li>\u6574\u7406 Atcoder \u984c\u76ee\u7684\u7db2\u7ad9<li>atcoder tags<li>ABC \u592a\u6c34,\u8981 virtual \u5efa\u8b70 ARC \u6216\u4e0a\u53e4 AGC CS Academy <li>\u6709\u5f88\u591a\u512a\u8cea\u984c\u76ee<li>\u8981\u5237\u7684\u8a71\u53ef\u4ee5\u7167 solved \u6392\u5e8f,\u5c31\u5927\u6982\u6703\u7167\u96e3\u5ea6\u6392\u5e8f\u4e86 Leetcode <li>\u9762\u8a66\u5237\u984c Zerojudge <li>APCS<li>\u65b0\u624b\u7df4\u7fd2<li>\u984c\u76ee\u54c1\u8cea\u6709\u5f85\u52a0\u5f37 \u6d1b\u8c37 <li>\u4e0d\u559c\u6b61\u770b\u82f1\u6587\u7684\uff0c\u9019\u88e1\u5e7e\u4e4e\u90fd\u6709\u984c\u76ee\u7684\u4e2d\u6587\u7ffb\u8b6f loj <li>\u4e2d\u6587\uff0cOI \u9078\u62d4\u8003\u53e4\u984c\u5957\u984c Kattis \u7121 TIOJ <li>\u8003\u53e4\u984c\u5957\u984c tcirc <li>AP325\u7df4\u7fd2\u984c TOJ \u7121 NCTUOJ <li>\u4ea4\u5927\u6559\u6388\u7684\u4e00\u4e9b\u7df4\u7fd2\u984c"},{"location":"cp/learning2/","title":"\u5b78\u7fd2\u8cc7\u6e90","text":""},{"location":"cp/learning2/#_1","title":"\u81ea\u5b78","text":"<p> \u4ec0\u9ebc\u662f\u7af6\u7a0b ?</p>"},{"location":"cp/learning2/#_2","title":"\u71df\u968a","text":"\u540d\u7a31 \u96e3\u5ea6 \u6982\u8ff0 APCS Camp <li>\u6709\u5206\u8a9e\u6cd5\u73ed\u8ddf\u9032\u968e\u73ed<li>\u8a9e\u6cd5\u73ed\u53ef\u4ee5\u5b8c\u5168\u4e0d\u9808\u57fa\u790e<li>\u9032\u968e\u73ed\u96e3\u5ea6\u843d\u5728 APCS, \u5927\u90e8\u5206\u4e00\u968e\u4e3b\u984c<li>\u9023\u7e8c 10 \u5929\uff0c\u6bcf\u5929\u4e0a\u8ab2<li>\u6700\u5f8c\u4e00\u5929\u6709\u6a21\u64ec APCS \u6e2c\u9a57<li>\u52a9\u6559\u5718\u968a\u5f37\u5927\u96a8\u554f\u96a8\u5230 \u8cc7\u8a0a\u4e4b\u82bd <li>\u9069\u5408\u6703\u8a9e\u6cd5\u4e0d\u6703\u7b97\u6cd5\u7684<li>\u96e3\u5ea6\u843d\u5728\u9032\u4e00\u968e\uff0c\u4e09\u7b49\u734e\u9700\u8981\u6703\u7684<li>\u6bcf\u5468\u4e0a\u8ab2\uff0c\u6709\u8f03\u591a\u6642\u9593\u53ef\u5438\u6536<li>\u6709\u671f\u4e2d\u8003\u8207\u671f\u672b\u8003 NYCU PCCA <li>\u6559\u6750\u90fd\u5728discord\u7fa4\u88e1\u9762<li>\u96e3\u5ea6\u843d\u5728\u4e00\u968e\u4e3b\u984c\uff0c\u4e5f\u5305\u542b\u4e00\u4e9b\u4e8c\u968e\u4e3b\u984c<li>\u6301\u7e8c\u4e94\u5929\uff0c\u6bcf\u5929\u4e0a\u8ab2<li>\u6700\u5f8c\u4e00\u5929\u6709\u5718\u9ad4\u8cfd ION Camp <li>\u96e3\u5ea6\u5f9e\u9032\u4e00\u968e\u5230\u4e8c\u968e\u504f\u570b\u624b\u96e3\u5ea6\u90fd\u6709<li>\u9023\u7e8c\u4e94\u5929\uff0c\u6bcf\u5929\u4e0a\u8ab2<li>\u6bcf\u5929\u665a\u4e0a\u90fd\u6709\u6bd4\u8cfd\uff0c\u500b\u4eba\u5718\u9ad4\u7686\u6709<li>\u4f4f\u5bbf IOI Camp <li>\u96e3\u5ea6\u5728\u570b\u624b\u4e4b\u4e0a<li>\u9023\u7e8c\u4e94\u5929\uff0c\u6bcf\u5929\u4e0a\u8ab2<li>\u6bcf\u5929\u665a\u4e0a\u90fd\u6709\u6bd4\u8cfd\uff0c\u500b\u4eba\u5718\u9ad4\u7686\u6709<li>\u4f4f\u5bbf <p>\u5099\u8a3b :  \u8a18\u5f97\u5099\u5be9\u8cc7\u6599\u8981\u5beb\u7684\u76e1\u91cf\u8c50\u5bcc \u8cc7\u8a0a\u4e4b\u82bd\u5165\u82bd\u8003\u7684\u6210\u7e3e\u5e7e\u4e4e\u4e0d\u7b97\u4ec0\u9ebc\uff0c\u91cd\u8981\u7684\u662f\u770b\u4f60\u7684\u5099\u5be9\u8cc7\u6599</p> <ul> <li> <p>\u5982\u679c\u4ec0\u9ebc\u90fd\u4e0d\u6703\u7684\uff0c\u6216\u662f\u6703\u5176\u4ed6\u8a9e\u8a00\u4e0d\u6703 c++ \u7684\uff0c\u5f9e APCSC \u958b\u59cb</p> </li> <li> <p>\u5982\u679c\u6703\u8a9e\u6cd5\uff0c\u53ef\u4ee5\u5f9e APCSC \u7b97\u6cd5\u73ed\u6216\u662f\u8cc7\u8a0a\u4e4b\u82bd\u5b78\u6f14\u7b97\u6cd5</p> </li> <li> <p>\u5982\u679c\u9019\u4e9b\u7b97\u6cd5\u6709\u4e9b\u57fa\u790e\u7684\u8a71\uff0c\u53ef\u518d\u8003\u616e\u53c3\u52a0 PCCA \u8207 IONC</p> </li> <li> <p>\u5982\u679c\u5df2\u7d93\u6703\u5927\u90e8\u5206\u4e00\u968e\u4e3b\u984c\u7684\u8a71\uff0c\u53ef\u4ee5\u53c3\u52a0 IOIC</p> </li> </ul>"},{"location":"cp/learning2/#_3","title":"\u88dc\u7fd2\u73ed","text":"\u540d\u7a31/\u7c89\u5c08 \u6982\u8ff0 AA \u7af6\u7a0b \u6709\u5f9e\u8a9e\u6cd5\u958b\u59cb\u5230\u4e8c\u968e\u4e3b\u984c\u7684\u73ed \u6f14\u7b97\u6cd5\u6d77\u725b \u6709\u5f9e\u8a9e\u6cd5\u958b\u59cb\u5230\u4e00\u968e\u4e3b\u984c\u7684\u73ed\u6709\u8a0e\u8ad6\u8ab2\u8207\u9810\u9304\u7684\u5f71\u7247"},{"location":"cp/learning2/#_4","title":"\u66f8\u7c4d","text":"<ul> <li>Competitive Programmer's Handbook</li> <li>\u6f14\u7b97\u6cd5\u7af6\u8cfd\u5165\u9580\u7d93\u5178</li> <li>\u57f9\u990a\u8207\u935b\u934a\u7a0b\u5f0f\u8a2d\u8a08\u7684\u908f\u8f2f\u8166</li> <li> <p>\u65b0\u89c0\u5ff5\u6578\u5b78\u53e2\u66f8</p> <ul> <li>Ch 1, 2, 4, 5, 7, 13</li> </ul> </li> <li> <p>\u7b97\u6cd5\u7af6\u8cfd\u5165\u9580\u7d93\u5178\u8a13\u7df4\u6307\u5357</p> </li> <li>\"Algorithms,\" Jeff Erickson (2019)</li> <li>Competitive Programming 4</li> <li>Introduction to Algorithms, 3rd Edition</li> <li> \u6211\u7684\u672a\u4f86\uff0c\u81ea\u5df1\u5beb\uff1a17\u6b72\u8cc7\u5967\u91d1\u724c\u5c11\u5e74\uff0c\u885d\u649e\u9ad4\u5236500\u5929</li> </ul>"},{"location":"cp/learning2/#_5","title":"\u6821\u966a","text":"\u540d\u7a31 \u7db2\u5740 \u9644\u4e2d\u6821\u966a\u7c21\u5831 <li>\u9644\u4e2d\u8cc7\u57f9 \u984c\u55ae 2021 \u677f\u4e2d <li>\u677f\u4e2d\u6821\u966a \u5efa\u4e2d <li>2022 \u6821\u966a \u5317\u4e00\u5973\u9ed1\u9b54\u6cd5 <li>\u7c21\u4ecb<li>dp &amp; greedy<li>Geometry<li>\u57fa\u790e\u5716\u8ad6 \u7af9\u79d1\u5be6\u4e2d <li>C++\u7a0b\u5f0f\u8a9e\u8a00\u6559\u5b78\u8b1b\u7fa9<li>\u5be6\u4e2d\u8cc7\u78147th \u5609\u7fa9\u9ad8\u4e2d <li>\u5609\u4e2d\u8cc7\u8a0a\u79d1\u57f9\u8a13\u8b1b\u7fa9<li>\u5609\u4e2d\u5609\u5973\u806f\u5408\u8cc7\u8a0a\u8b80\u66f8\u6703 \u5b9c\u4e2d(\u6797\u71c8\u76c3 APCS) <li>\u6574\u7406"},{"location":"cp/learning2/#_6","title":"\u7fa4\u7d44","text":"<ul> <li>Code community</li> <li>CISC \u4e2d\u5b78\u8cc7\u8a0a\u8a0e\u8ad6\u7fa4</li> <li>NHDK TPR</li> <li>TOI \u65b0\u624b\u6751</li> <li>TOI \u9078\u624b\u6751</li> <li>TOI \u9078\u8a13\u71df\u8d85\u5927\u7fa4 (\u975e\u516c\u958b)</li> </ul>"},{"location":"cp/learning2/#_7","title":"\u6642\u9593\u8ef8","text":"\u6708\u4efd \u540d\u7a31 1 \u6708 IOIC 2 \u6708 NYCU PCCA 3 \u6708 TOI \u5165\u71df\u8003 (\u521d\u9078) 4 \u6708 \u6210\u5927\u9080\u8acb\u8cfd (\u521d\u8cfd) 7 \u6708 IONC 7 \u6708 YTP (\u521d\u8cfd) 7 \u6708 YTP (\u8907\u8cfd) 8 \u6708 APCSC 8 \u6708 \u6210\u5927\u9080\u8acb\u8cfd (\u8907\u8cfd) 10\u6708 ISSC 11 \u6708 \u5340\u57df\u8cfd 11 \u6708 HP Codewars 11 \u6708 NPSC (\u521d\u8cfd) 12 \u6708 \u5168\u570b\u8cfd 12 \u6708 NPSC (\u8907\u8cfd)"},{"location":"cp/resources/","title":"Resources","text":""},{"location":"cp/resources/#_1","title":"\u8b1b\u7fa9\u53ca\u8cc7\u6599\u53c3\u8003","text":""},{"location":"cp/resources/#_2","title":"\u5165\u9580","text":"<ul> <li> <p>C++\u7af6\u7a0b\u5165\u9580</p> </li> <li> <p>\u5f9e\u96f6\u958b\u59cb\u7684\u6f14\u7b97\u6cd5\u7af6\u8cfd\u5165\u9580\u6559\u5b78</p> </li> <li> <p>YUI HUANG \u6f14\u7b97\u6cd5\u5b78\u7fd2\u7b46\u8a18</p> </li> <li> <p>\u7af9\u79d1\u5be6\u4e2dC++\u6559\u5b78\u8b1b\u7fa9</p> </li> </ul>"},{"location":"cp/resources/#_3","title":"\u9032\u968e","text":"<ul> <li> <p>NCKU 2021 \u7af6\u6280\u7a0b\u8a2d\u6559\u6750</p> </li> <li> <p>NCKU 2020 \u7af6\u6280\u7a0b\u8a2d\u6559\u6750</p> </li> <li> <p>APCS - 2018\u53f0\u5357\u4e00\u4e2d\u9078\u4fee</p> </li> <li> <p>\u677f\u4e2d\u6821\u5167\u8cc7\u8a0a\u57f9\u8a13\u8b1b\u7fa9</p> </li> <li> <p>AP325</p> </li> <li>\u5efa\u4e2d\u6821\u5167\u57f9\u8a13\u8b1b\u7fa9</li> </ul>"},{"location":"cp/resources/#_4","title":"\u5f71\u7247\u53c3\u8003","text":"<ul> <li> <p>SCIST</p> </li> <li> <p>\u8cc7\u8a0a\u4e4b\u82bd</p> </li> <li> <p>\u5317\u4e00\u8cc7\u8a0a\u96c6\u8a13</p> </li> </ul>"},{"location":"cp/resources/#_5","title":"\u71df\u968a","text":"<p>\u5982\u679c\u4ec0\u9ebc\u90fd\u4e0d\u6703\u7684\uff0c\u6216\u662f\u6703\u5176\u4ed6\u8a9e\u8a00\u4e0d\u6703 c++ \u7684\uff0c\u5f9e APCSC \u958b\u59cb\u3002\u5982\u679c\u6703\u8a9e\u6cd5\uff0c\u53ef\u4ee5\u5f9e APCSC \u7b97\u6cd5\u73ed\u6216\u662f\u8cc7\u8a0a\u4e4b\u82bd\u5b78\u6f14\u7b97\u6cd5\u3002\u5982\u679c\u9019\u4e9b\u7b97\u6cd5\u6709\u4e9b\u57fa\u790e\u7684\u8a71\uff0c\u53ef\u518d\u8003\u616e\u53c3\u52a0 PCCA \u8207 IONC\u3002\u5982\u679c\u5df2\u7d93\u6703\u5927\u90e8\u5206\u4e00\u968e\u4e3b\u984c\u7684\u8a71\uff0c\u53ef\u4ee5\u53c3\u52a0 IOIC\u3002</p> <ul> <li>APCS Camp</li> <li>\u8cc7\u8a0a\u4e4b\u82bd</li> <li>NYCU PCCA</li> <li>ION Camp</li> <li>IOI Camp</li> </ul>"},{"location":"cp/resources/#_6","title":"\u66f8\u7c4d","text":"<ul> <li> <p>Competitive Programming 4</p> </li> <li> <p>AP325</p> </li> <li> <p>\u71df\u968a\u7684\u8b1b\u7fa9</p> </li> </ul>"},{"location":"cp/resources/#_7","title":"\u984c\u76ee\u7df4\u7fd2\u53bb\u54ea\u88e1\u627e","text":"<ul> <li>\u5efa\u4e2d 2016 \u6821\u966a\u8b1b\u7fa9</li> <li>\u71df\u968a\u8b1b\u7fa9</li> <li>\u7248\u4e2d\u6821\u966a</li> <li>wiwiho \u7684\u8b1b\u7fa9</li> <li>\u6821\u966a\u7c21\u5831</li> <li>\u8cc7\u8a0a\u679d\u6792\u4e0a\u8ab2\u7c21\u5831</li> </ul>"},{"location":"cp/strategy/","title":"Strategy","text":""},{"location":"cp/strategy/#_1","title":"\u6bd4\u8cfd\u7b56\u7565","text":"<p>\u91cd\u9ede\u4e0d\u662f\u5728\u4f60\u5b78\u4e86\u591a\u5c11\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u6216\u6f14\u7b97\u6cd5\uff0c\u800c\u662f\u5728\u4f60\u8981\u53bb\u7df4\u7fd2\u600e\u9ebc\u89c0\u5bdf\u984c\u76ee</p> <p>\u5b50\u984c\u901a\u5e38\u90fd\u5f88\u6709\u5f15\u5c0e\u6027\uff0c\u8981\u7df4\u7fd2\u60f3\u5b50\u984c\uff0c\u5728\u5229\u7528\u5b50\u984c\u60f3\u6b63\u78ba\u7684\u6eff\u5206\u89e3</p> <p>\u5148\u60f3 chain, tree \u7684 case</p> <p>\u5148\u60f3\u4f55\u70ba\u7121\u89e3\u7684\u60c5\u6cc1</p> <p>  cthbst</p> <ul> <li>\u8003\u524d<ul> <li>\u5e73\u6642<ul> <li>\u5b78\u7fd2\u65b0\u6280\u8853</li> <li>\u8907\u7fd2\u3001\u7df4\u7fd2</li> <li>virtual</li> </ul> </li> <li>\u63a5\u8fd1<ul> <li>\u4e0d\u8981\u78b0\u65b0\u6771\u897f</li> <li>\u8907\u7fd2\u6a21\u677f</li> </ul> </li> </ul> </li> <li>\u5587\u5206<ul> <li>\u5c0f\u6e2c\u8cc7</li> <li>\u63d0\u793a\u6eff\u5206\u89e3</li> <li>\u6642\u9593\u7b56\u7565</li> <li>\u4e0d\u8981\u6709 0 \u5206\u7684\u984c\u76ee</li> </ul> </li> <li>\u6642\u9593<ul> <li>\u8b80\u5b8c\u6240\u6709\u984c\u76ee</li> <li>\u4e0d\u7528\u5f9e\u982d\u5beb\u5230\u5c3e</li> <li>\u4e86\u89e3\u81ea\u5df1\u80fd\u529b\u8207\u76ee\u6a19</li> <li>\u4e0d\u8981\u9b3c\u6253\u7246</li> <li>\u5b50\u984c\u8207\u6eff\u5206\u89e3</li> </ul> </li> <li>\u5fc3\u614b<ul> <li>\u9069\u6642\u63db\u984c</li> <li>\u4e0d\u8981\u7ba1\u5225\u4eba\u5728\u5e79\u561b</li> <li>#\u76f8\u4fe1</li> </ul> </li> <li>\u5176\u4ed6<ul> <li>\u8b80\u984c\u6642\u6a19\u8a18\u96e3\u5ea6\u60f3\u6cd5</li> <li>\u5403\u6771\u897f\u5c3f\u5c3f</li> <li>\u6700\u5f8c\u4e00\u5206\u9418\u90fd\u53ef\u4ee5\u7ffb\u76e4</li> </ul> </li> </ul> <p>  Ccucumber12</p> <p>\u6b63\u8cfd</p> <ol> <li>\u82b1\u7d04\u534a\u5c0f\u6642\u6253\u6a21\u677f + \u770b\u5b8c\u6240\u6709\u984c\u76ee\uff0c\u5f8c\u9762\u984c\u76ee\u8a18\u5f97\u770b\u90e8\u5206\u5206\uff0c\u7136\u5f8c\u7a0d\u5fae\u60f3\u4e00\u4e0b\u7b2c\u4e00\u76f4\u89ba\u7684\u60f3\u6cd5\uff0c\u4e26\u628a\u6c34\u984c(\u99ac\u4e0a\u6709\u597d\u5be6\u4f5c\u89e3\u7684\u984c\u76ee)\u6311\u51fa\u4f86</li> <li>\u5148\u628a\u6c34\u984c\u5beb\u5b8c\uff0c\u5269\u4e0b\u984c\u76ee\u6bcf\u6b21\u7559\u4e09\u984c\u6700\u53ef\u505a or \u90e8\u5206\u5206\u5c11\u7684\u984c\u76ee\u8f2a\u6d41\u60f3\uff0c\u4e00\u984c\u60f320\u5206\u9418\uff0c\u6642\u9593\u5230\u5c31\u8981\u8df3\uff0c\u4e0d\u80fd\u4e00\u76f4\u505c\u5728\u67d0\u984c</li> <li>\u524d\u4e09\u5c0f\u6642\u601d\u8003\u76e1\u91cf\u4ee5\u6eff\u5206\u89e3\u70ba\u4e3b\uff0c\u6700\u5f8c\u5169\u5c0f\u6642\u4ee5\u96e3\u984c\u7684\u90e8\u5206\u5206\u70ba\u4e3b</li> </ol> <p>\u6bd4\u8cfd\u53ef\u80fd\u7684\u72c0\u6cc1</p> <p>\u6eff\u5206\u89e3WA</p> <ol> <li>\u53bb\u8d9f\u5ec1\u6240\uff0c\u82b15\u5206\u9418\u5148\u770b\u904e\u4e00\u904dcode\uff0c\u770b\u770b\u6709\u6c92\u6709\u523b\u7206</li> <li>\u91cd\u65b0\u60f3\u81ea\u5df1\u7684\u60f3\u6cd5\u6709\u6c92\u6709\u721b\uff0c\u69cb\u69cb\u770b\u53cd\u4f8b</li> <li>\u5beb\u5c0d\u62cd</li> <li>\u9664\u87f2\u6642\u9593\u6700\u591a20\u5206\u9418\uff0c\u4e00\u5230\u5c31\u8981\u8df3</li> </ol> <p>TLE</p> <ol> <li>\u82b15\u5206\u9418\u5148\u770b\u904e\u4e00\u904dcode\uff0c\u770b\u770b\u6709\u6c92\u6709\u523b\u7206</li> <li>\u672c\u6a5f\u751f\u5927\u6e2c\u8cc7\uff0c\u770b\u662f\u60f3\u6cd5\u721b\u9084\u662f\u5361\u5e38</li> <li>\u5361\u5e38\uff1a\u7dda\u6bb5\u6a39 -&gt; BIT or \u975c\u7f6e\u3001vector -&gt; array</li> </ol> <p>RE / MLE</p> <ol> <li>\u6233\u5230\u9663\u5217\u5916\u9762</li> <li>assert</li> </ol> <p>judge\u721b\u4e86</p> <ul> <li>\u4e0d\u78ba\u5b9a\u7684\u984c\u76ee\u5148\u5beb\u5c0d\u62cd\u7c21\u55ae\u9a57\u4e00\u4e0b</li> </ul> <p>\u5176\u4ed6\u4e8b\u9805</p> <ol> <li>\u9047\u5230\u5927\u5be6\u4f5c or \u5927\u8cc7\u7bc0\u984c\u5148\u60f3\u6e05\u695a\u8108\u7d61\u518d\u5beb</li> <li>\u8a18\u5f97\u4e0a\u5ec1\u6240</li> <li>\u6a94\u540d\u5b58\u597d\uff0c\u4e4b\u5f8c\u5c0d\u62cd\u8f03\u65b9\u4fbf</li> <li>\u5403\u98efdeadline\uff1a12:30</li> </ol> <p> \u00a0abc864197532</p> <ol> <li> <p>\u5be6\u4f5c\uff1a    Q. \u96d6\u7136\u6211\u7684\u601d\u8003\u4e5f\u633a\u721b\uff0c\u4f46\u5be6\u4f5c\u7684\u554f\u984c\u9084\u662f\u6700\u5927\u3002\u6211\u90fd\u4e00\u76f4\u5728\u6311\u6230\u96e3\u984c\u548c\u601d\u8003\u984c\uff0c\u96d6\u7136\u5f88\u6709\u8da3\uff0c\u4f46\u8b8a\u6210\u6211\u7684\u984c\u76ee\u91cf\u5f88\u5c11\uff0c\u5c0e\u81f4\u6211\u5f88\u591aC++\u5167\u90e8\u7684\u6771\u897f\u5176\u5be6\u90fd\u6c92\u641e\u61c2\uff0c\u90fd\u53ea\u662f\u628a\u5b83\u641e\u5230\u6703\u904e\u800c\u5df2\uff0c\u6c92\u6709\u597d\u597d\u7406\u89e3\u3002</p> </li> <li> <p>\u908a\u5beb\u908a\u60f3\uff1a    \u5728\u5beb\u5f88\u591aCF\u6897\u984c\u7684\u6642\u5019\u5176\u5be6\u5c31\u8a72\u610f\u8b58\u5230\u9019\u4e00\u9ede\uff0c\u6211\u90fd\u4e00\u76f4\u60f3\u5beb\u51fa\u6771\u897f\u4f86\uff0c\u6c92\u6709\u597d\u597d\u7684\u601d\u8003\u984c\u76ee\uff0c\u627e\u5230\u6700\u9069\u5408\u548c\u6b63\u78ba\u7684\u89e3\u6cd5\u3002\u5c24\u5176\u662f\u5728\u6211\u5f88\u6025\u7684\u6642\u5019\uff0c\u9019\u4e00\u500b\u554f\u984c\u5c31\u88ab\u7121\u9650\u5730\u653e\u5927\u4e86(\u5c31\u662f\u5168\u570b\u8cfd)\u3002</p> </li> <li> <p>\u6bd4\u8cfd\u7b56\u7565 :    \u9019\u500b\u5176\u5be6\u61c9\u8a72\u662f\u6700\u8f15\u5fae\u7684\uff0c\u56e0\u70ba\u8aaa\u5be6\u8a71\u5982\u679c\u4f60\u5be6\u529b\u4e0d\u597d(\u6211)\uff0c\u518d\u600e\u9ebc\u898f\u5283\u6bd4\u8cfd\u7b56\u7565\u90fd\u662f\u5c41\uff0c\u56e0\u70ba\u4f60\u6839\u672c\u9054\u4e0d\u5230\u4f60\u9810\u60f3\u7684\u7b56\u7565(\u4f8b\u5982\uff1a\u60f3\u8aaa\u524d\u4e09\u500b\u5c0f\u6642\u62fcAC\u89e3\u4f46\u6839\u672c\u62fc\u4e0d\u5230)\u3002\u4f46\u521d\u9078\u7684\u6642\u5019\u9084\u662f\u8981\u898f\u5283\u5b8c\u5584\u7684\u7b56\u7565\uff0c\u907f\u514d\u71d2\u96de\uff0c\u6240\u4ee5\u9084\u662f\u5f88\u91cd\u8981</p> </li> </ol> <p> \u00a0guagua</p> <p>\u6a21\u8003\u662f\u4e00\u5834\u4e94\u5c0f\u6642\u56db\u984c\u7684\u6bd4\u8cfd \u8981\u5728\u4e00\u5834\u9577\u6642\u9593\u7684\u6bd4\u8cfd\u4e2d\u7a69\u5b9a\u767c\u63ee \u6bd4\u8cfd\u7b56\u7565\u5c31\u662f\u95dc\u9375</p> <p>\u5be6\u7528\u6280\u5de7</p> <ul> <li>\u66ab\u6642\u4f11\u606f<ul> <li>\u559d\u6c34\u3001\u5403\u6771\u897f\u3001\u4e0a\u5ec1\u6240</li> </ul> </li> <li>\u6e05\u7a7a\u8166\u888b<ul> <li>\u4e0d\u8981\u4e00\u76f4\u5361\u5728\u540c\u4e00\u500b\u60f3\u6cd5\uff01</li> <li>\u540c\u4e0a</li> </ul> </li> <li>\u5728\u984c\u672c\u5c01\u9762\u5beb\u4e0b\u6240\u6709\u5b50\u984c\u7684\u5206\u6578\uff0c\u4e26\u628a\u6703\u505a\u8207 AC \u7684\u5b50\u984c\u4f5c\u8a18\u865f</li> <li>\u5361\u984c\u505c\u640d\u9ede</li> <li>\u5b50\u984c\u5f88\u6709\u7528</li> </ul> <p>\u6bd4\u8cfd\u7684\u76ee\u6a19</p> <ul> <li>\u6bd4\u8cfd\u7684\u76ee\u6a19\u53ea\u6709\u4e00\u500b\uff1amaximize \u4f60\u7684\u5206\u6578</li> <li>\u6240\u4ee5\u6bd4\u8cfd\u4e2d\u4f60\u4e0d\u61c9\u8a72\u60f3<ul> <li>\u5225\u4eba\u4e00\u5b9a\u90fd\u6703\u9019\u500b / \u5225\u4eba\u4e00\u5b9a\u90fd\u4e0d\u6703\u9019\u500b</li> <li>\u6211\u9019\u6a23\u53ef\u4ee5\u4e0a\u4e8c\u968e / \u7576\u570b\u624b\u55ce</li> <li>\u5982\u679c\u6211\u6253\u721b\u8981\u600e\u9ebc\u8fa6</li> </ul> </li> </ul> <p>\u6642\u9593\u5206\u914d</p> <ul> <li>\u521d\u671f\uff1a\u5982\u4f55\u958b\u984c\uff1f\u505a\u984c\u9806\u5e8f\uff1f</li> <li>\u4e2d\u671f\uff1a\u5c0f\u5fc3\u5361\u984c</li> <li>\u5f8c\u671f\uff1a\u8a18\u5f97\u5587\u5206\u3001\u9069\u5ea6\u653e\u68c4</li> </ul> <p>Debug</p> <ul> <li><code>assert</code>\uff08\u9084\u53ef\u4ee5\u81ea\u5df1\u5beb WA \u7248\u7684 assert\uff09</li> <li>\u8f38\u51fa\u8a0a\u606f<ul> <li>\u5370\u9663\u5217\u3001pair</li> </ul> </li> <li>\u66b4\u529b\u89e3\u5c0d\u62cd<ul> <li>\u5c0f\u6e2c\u8cc7\u5f88\u597d\u7528</li> </ul> </li> </ul> <p>\u6a21\u8003\u524d\u4e00\u5929 ~ \u6a21\u8003\u524d</p> <ul> <li>\u5b8c\u5168\u800d\u5ee2<ul> <li>\u770b\u52d5\u756b<ul> <li>\u628a\u6574\u9031\u7684\u65b0\u756a\u7559\u4e0b\u4f86\u770b</li> </ul> </li> <li>\u770b\u5c0f\u8aaa<ul> <li>\u5b89\u5229\u7f8e\u7279</li> </ul> </li> <li>\u62fc\u5716</li> </ul> </li> <li>\u63d0\u9192\u81ea\u5df1\u7684\u8a71</li> <li>\u6bcf\u5929\u90fd\u8981\u767c\u5fc3\u5f97</li> </ul> <p>\u8cfd\u4e2d</p> <ul> <li>\u524d 30 \u5206\u9418<ul> <li>\u8b80\u984c\u3001\u6bcf\u984c\u90fd\u6709\u500b\u521d\u6b65\u60f3\u6cd5</li> <li>\u6709\u6642\u958b\u5834\u6703\u56e0\u70ba\u7dca\u5f35\u60f3\u4e0a\u5ec1\u6240</li> </ul> </li> <li>\u5148\u5f9e\u6709\u628a\u63e1\u7684\u984c\u76ee\u958b\u59cb\u505a<ul> <li>\u5148\u62ff\u4e00\u4e9b\u5206\u6578\u63d0\u5347\u81ea\u4fe1</li> </ul> </li> <li>\u53ea\u8981\u5be6\u4f5c\u5c0f\u8907\u96dc\u5c31\u5148\u5beb\u5c0f\u5b50\u984c<ul> <li>\u7528 judge debug \u611b\u7528\u8005 (?)</li> </ul> </li> <li>\u901a\u5e38\u6703\u5728\u524d 2 \u500b\u5c0f\u6642\u628a\u525b\u958b\u5834\u60f3\u5230\u7684\u6771\u897f\u90fd\u5beb\u6389<ul> <li>\u542b\u6240\u6709\u4e0d\u96e3\u5beb\u7684\u5587\u5206</li> </ul> </li> <li>\u63a5\u4e0b\u4f86\u5927\u90e8\u5206\u6642\u9593\u90fd\u662f\u5404\u984c\u4ea4\u66ff\u8457\u60f3</li> <li> <p>\u63a5\u8fd1\u8cfd\u672b\u7684\u6642\u5019\uff08\u7d04 1 \u500b\u5c0f\u6642\uff09\u5982\u679c\u6c92\u6709\u5728\u5beb\u6771\u897f\uff0c\u628a\u6240\u6709\u984c\u76ee\u518d\u6383\u4e00\u6b21\uff0c\u6709\u6642\u6703\u5ffd\u7136\u60f3\u5230</p> </li> <li> <p>\u6bcf\u500b\u5c0f\u6642\u5403\u4e00\u6b21\u6771\u897f</p> <ul> <li>\u9806\u4fbf\u7576\u6210\u4e00\u7a2e\u63d0\u9192\u81ea\u5df1\u6642\u9593\u7684\u65b9\u5f0f</li> </ul> </li> <li>\u4e00\u76f4\u4e0a\u5ec1\u6240\u3001\u559d\u6c34<ul> <li>\u5927\u90e8\u5206\u7684\u60f3\u6cd5\u90fd\u662f\u5728\u5ec1\u6240\u88e1\u60f3\u7684</li> <li>\u4e00\u5834\u6bd4\u8cfd\u4e0a 6~7 \u6b21\u5ec1\u6240</li> <li>\u4f46\u5982\u679c\u6bcf\u500b\u4eba\u90fd\u9019\u6a23\u7537\u5ec1\u6703\u585e\u7206</li> </ul> </li> <li>\u4e00\u5b9a\u8981\u4e56\u4e56 (?)<ul> <li>\u4e0d\u80fd\u91cd\u8907\u4f7f\u7528</li> </ul> </li> <li>\u6478\u6478\u5409\u7965\u7269</li> <li>\u6211\u9ad8\u4e8c\u958b\u59cb\u5c31\u4e0d\u6703\u5728\u8cfd\u4e2d\u73a9\u8e29\u5730\u96f7\u4e86\uff0c\u4e0d\u8981\u518d\u62b9\u9ed1\u6211\u4e86</li> </ul> <p> \u00a0wiwiho</p> <p>\u6a21\u8003\u524d\u4e00\u5929\uff1a</p> <ul> <li>\u800d\u5ee2\uff0cbut how\uff1f</li> </ul> <p>\u6211\u66fe\u7d93\u5728\u6a21\u8003\u524d\u505a\u904e\u7684\u4e8b\u60c5\uff1a</p> <ul> <li>\u770b\u52d5\u6f2b</li> <li>\u8b80\u6f2b\u756b\uff08\u5be6\u9ad4\uff09</li> <li>\u770b\u7d00\u9304\u7247</li> <li>\u756b\u7d20\u63cf</li> <li>\u73a9\u4e09\u500b\u5c0f\u6642\u7684 osu!</li> <li>\u73a9\u5408\u6210\u5668\uff08\u97f3\u6a02\uff09</li> <li>\u62fc\u62fc\u5716</li> </ul> <p>\u9084\u6709\u65e9\u7761 (\u5927\u6982 10:30 \u524d) \u5f88\u91cd\u8981</p> <p>\u6a21\u8003\u7576\u5929\uff1a</p> <ul> <li>\u65e9\u9910\u5403\u6b63\u5e38\u7684\u98df\u7269\uff0c\u4e0d\u8981\u62ff\u65e5\u5f0f\u71d2\u96de</li> <li>\u8a18\u5f97\u6e96\u5099\u81ea\u5df1\u7684\u9ede\u5fc3\uff0c\u6700\u597d\u662f\u5df2\u7d93\u5403\u904e\u7684\u98df\u7269</li> <li>\u5728\u8003\u8a66\u958b\u59cb\u524d\u653e\u7a7a</li> </ul> <p>\u8003\u8a66\u6642\uff1a</p> <ul> <li>\u524d\u4e00\u5c0f\u6642\u770b\u5b8c\u6240\u6709\u984c\u76ee\uff0c\u4e26\u4e14\u78ba\u8a8d\u53ef\u4ee5\u505a\u7684\u5b50\u984c</li> <li>\u4e00\u5c0f\u6642\u4e4b\u5f8c\u5148\u53bb\u62ff\u53ef\u4ee5\u62ff\u7684\u5206\u6578</li> <li>\u62ff\u5230\u4e4b\u5f8c\u6839\u64da\u6bd4\u8cfd\u6642\u9593\u6709\u5169\u7a2e\u53ef\u80fd<ul> <li>1.5~2 \u5c0f\u6642\uff0c\u627e\u4e00\u500b\u53ef\u4ee5\u62ff\u5230\u5f88\u591a\u5206\u6578\u7684\u984c\u76ee\u82b1\u6642\u9593\u60f3</li> <li>2.5~3 \u5c0f\u6642\uff0c\u76f4\u63a5\u770b\u6bcf\u500b\u5b50\u984c\u6709\u4ec0\u9ebc\u53ef\u4ee5\u505a</li> </ul> </li> </ul> <p>(\u9019\u662f\u6211\u9ad8\u4e09\u7684\u7b56\u7565\uff0c\u7a0b\u5ea6\u4e0d\u540c\u53ef\u4ee5\u7528\u4e0d\u540c\u7b56\u7565)</p> <p>\u5176\u4ed6\u6ce8\u610f\u4e8b\u9805\uff1a</p> <ul> <li>\u559d\u6c34\uff08\u6211\u4e00\u5834\u6a21\u8003\u53ef\u80fd\u6703\u559d\u5230 1500 ml\uff09+\u4e0a\u5ec1\u6240</li> <li>\u4e00\u822c\u4f86\u8b1b\u662f\u5728\u8981\u958b\u59cb\u5beb\u67d0\u500b\u6771\u897f\u524d\u6216\u662f\u8981\u78ba\u8a8d\u67d0\u500b\u60f3\u6cd5\u6642</li> <li>\u5403\u6771\u897f\uff1a\u5927\u7d04 2hr, 3hr, 4hr \u5404\u4e00\u6b21\u30023hr \u6703\u5403\u6bd4\u8f03\u591a</li> <li>\u6478\u6478\u5409\u7965\u7269</li> </ul> <p> \u00a08e7</p> <p>\u6642\u9593\u5206\u914d :</p> <p>\u524d 30 \u5206\u9418 ( 2:00 - 2:30 )</p> <ol> <li>\u8b80\u5b8c\u6240\u6709\u984c\u76ee</li> <li>\u5beb\u7c3d\u5230\u984c</li> <li>\u6392\u5e8f\u984c\u76ee\u96e3\u5ea6</li> </ol> <p>\u63a5\u4e0b\u4f86\u4e00\u5c0f\u6642 ( 2:30 - 3:30 )</p> <ol> <li>\u5f9e\u7c21\u55ae\u7684\u984c\u76ee\u958b\u59cb\u60f3</li> <li>\u6bcf\u984c\u82b1 10 \u5206\u9418\u60f3</li> <li>\u5982\u679c\u6709\u6eff\u5206\u89e3\uff0c\u5c31\u60f3\u4e00\u4e0b\u5be6\u4f5c\u7d30\u7bc0\uff0c\u958b\u59cb\u5beb</li> <li>\u5982\u679c\u53ea\u6709\u90e8\u5206\u5206\uff0c\u5c31\u5148\u60f3\u4e0b\u4e00\u984c</li> <li>\u512a\u5148\u505a\u6709\u6eff\u5206\u89e3\u7684\uff0c\u5982\u679c\u5169\u984c\u90fd\u53ea\u6709\u90e8\u5206\u5206\u5c31\u5beb\u6bd4\u8f03\u7c21\u55ae\u7684</li> <li>\u60f3\u6e05\u695a\u518d\u5beb</li> <li>\u5982\u679c\u5beb\u5230\u4e00\u534a\u767c\u73fe\u60f3\u932f\u4e86\uff0c\u5c31\u5148\u505a\u53e6\u4e00\u984c</li> <li>\u5beb + debug \u5982\u679c\u8d85\u904e 25 \u5206\u9418\u4e5f\u5148\u505a\u53e6\u4e00\u984c</li> <li>\u5f8c 1.5 \u5c0f\u6642 ( 3:30 - 5:00 )</li> <li>\u770b\u6700\u96e3\u7684\u5169\u984c</li> <li>\u5148\u5404\u82b1 10 \u5206\u9418\u6aa2\u8996\u4e00\u4e0b\u80fd\u62ff\u7684\u90e8\u5206\u5206\u6709\u54ea\u4e9b</li> <li>\u6bcf\u984c\u82b1 20 \u5206\u9418\u62ff\u90e8\u5206\u5206\uff0c\u6642\u9593\u5230\u5c31\u8df3\u984c</li> <li>\u9664\u975e\u5f88\u6709\u628a\u63e1\uff0c\u4e0d\u7136\u5148\u4ee5\u4e00\u5b9a\u62ff\u5f97\u5230\u7684\u5206\u6578\u70ba\u4e3b</li> </ol> <p>\u5176\u4ed6\u4e8b\u9805 :</p> <ul> <li>\u5982\u679c\u5728 \u201c\u63a5\u4e0b\u4f86\u4e00\u5c0f\u6642\u201d \u89ba\u5f97\u96e3\u5ea6\u6709\u9ede\u4e0d\u5c0d\u52c1\uff0c\u5c31\u76f4\u63a5\u9032\u5165\u6488\u5206\u74b0\u7bc0</li> </ul> <p>  Paul-Liao</p> <ul> <li> <p>stuff you should look for</p> </li> <li> <p>int overflow, array bounds</p> </li> <li> <p>special cases (n=1?)</p> </li> <li> <p>do smth instead of nothing and stay organized</p> </li> <li> <p>WRITE STUFF DOWN</p> </li> <li> <p>DON'T GET STUCK ON ONE APPROACH</p> </li> </ul> <p>  Benq</p>"},{"location":"cp/strategy/#_2","title":"\u7d93\u9a57\u5206\u4eab","text":"<ul> <li>IOIC 2023 \u7d93\u9a57\u5206\u4eab</li> <li>TOI 2023 \u4e00\u968e\u9078\u8a13\u71df\u7d93\u9a57\u5206\u4eab</li> <li>TOI 2023 \u4e00\u968e\u9078\u8a13\u71df\u984c\u578b\u4ecb\u7d39</li> <li>TOI 2021 \u4e00\u968e\u9078\u8a13\u71df\u7d93\u9a57\u5206\u4eab</li> <li>TOI 2021 \u6bd4\u8cfd\u5fc3\u614b\u6e96\u5099</li> <li>\u6d77\u725b \u5609\u7fa9\u9ad8\u4e2d</li> </ul>"},{"location":"cp/contest/OI/","title":"\u5404\u570b OI","text":"<p>\u00a0\u00a0\u57fa\u672c\u4e0a\u90fd\u53ef\u4ee5\u5728 OI checklist \u4e0a\u9762\u627e\u5230</p>   | \u540d\u7a31  | \u8aaa\u660e                                                         | | ----- | ------------------------------------------------------------ | | JOI   | <li>[\u5b98\u7db2](https://contests.ioi-jp.org/)<li> [judge(\u82f1\u6587)](https://oj.uz/problems/source/45)<li> [judge(\u4e2d\u6587)](https://loj.ac/p?tagIds=196)<li>final round \u7684\u96e3\u5ea6\u5728\u5168\u570b\u8cfd | | POI   | <li>[judge](https://www.luogu.com.cn/problem/list?tag=57)    | | USACO | <li>[judge](http://www.usaco.org/)<li>\u5165\u71df\u8003\u96e3\u5ea6\u5728 silver \u548c gold |"},{"location":"cp/contest/TOI/","title":"TOI \u521d\u9078","text":"<p>\u00a0\u00a0\u57fa\u672c\u4e0a\u5168\u90e8\u90fd\u5728\u9019\u88e1</p>"},{"location":"cp/contest/TOI/#2023","title":"2023","text":"<ul> <li> <p>\u984c\u76ee</p> <ul> <li>pA \u623f\u5c4b\u63a8\u85a6 (house)</li> <li>pB \u88c1\u54e1\u98a8\u66b4 (storm)</li> <li>pC \u95dc\u5361\u5730\u5716 (game)</li> <li>pD \u5206\u5b50\u74b0 (molecule)</li> <li>pE \u516c\u8def (road)</li> </ul> </li> <li> <p>\u984c\u89e3</p> <ul> <li>algoseacow</li> <li>twpca</li> </ul> </li> </ul>"},{"location":"cp/contest/TOI_M/","title":"TOI \u9078\u8a13\u6a21\u8003","text":"<p>\u00a0\u00a0\u57fa\u672c\u4e0a\u5168\u90e8\u90fd\u5728 \u9019\u500b google drive \u5167</p>"},{"location":"cp/contest/TOI_M/#2023","title":"2023","text":"<ul> <li>2023 \u984c\u76ee(hackmd)</li> <li>2023 \u984c\u672c(pdf)</li> </ul>"},{"location":"cp/contest/TOI_easy/","title":"TOI \u65b0\u624b\u540c\u597d\u6703","text":"<p>\u00a0\u00a0\u8acb\u81f3\u5b98\u7db2</p>"},{"location":"cp/contest/TOI_mock/","title":"TOI \u6a21\u64ec\u8cfd","text":""},{"location":"cp/contest/TOI_mock/#2022","title":"2022","text":"<ul> <li>\u7b2c\u4e00\u5834<ul> <li>\u984c\u76ee</li> <li>\u89e3\u7b54</li> <li>\u5f71\u7247</li> </ul> </li> <li>\u7b2c\u4e8c\u5834<ul> <li>\u984c\u76ee</li> <li>\u89e3\u7b54</li> <li>\u5f71\u7247</li> </ul> </li> <li>\u7b2c\u4e09\u5834<ul> <li>\u984c\u76ee</li> <li>\u89e3\u7b54</li> <li>\u5f71\u7247</li> </ul> </li> </ul>"},{"location":"cp/contest/TOI_mock/#2023","title":"2023","text":"<ul> <li>\u7b2c\u4e00\u5834<ul> <li>\u984c\u76ee</li> <li>\u89e3\u7b54</li> <li>\u5f71\u7247</li> </ul> </li> <li>\u7b2c\u4e8c\u5834<ul> <li>\u984c\u76ee</li> <li>\u89e3\u7b54</li> <li>\u5f71\u7247</li> </ul> </li> <li>\u7b2c\u4e09\u5834<ul> <li>\u984c\u76ee</li> <li>\u89e3\u7b54</li> <li>\u5f71\u7247</li> </ul> </li> </ul>"},{"location":"cp/contest/nhspc_mock/","title":"\u5168\u570b\u8cfd\u6a21\u64ec\u8cfd","text":""},{"location":"cp/contest/nhspc_mock/#2019","title":"2019","text":"<ul> <li>\u984c\u672c</li> <li>\u5b98\u89e3</li> <li>\u6e2c\u8cc7</li> <li>\u8a18\u5206\u677f</li> </ul>"},{"location":"cp/contest/nhspc_mock/#2020","title":"2020","text":"<ul> <li>\u984c\u672c</li> <li>\u5b98\u89e3</li> <li>\u8a18\u5206\u677f</li> </ul>"},{"location":"cp/contest/nhspc_mock/#2021","title":"2021","text":"<ul> <li>\u984c\u672c</li> <li>\u5b98\u89e3</li> <li>Tioj</li> <li>\u8a18\u5206\u677f</li> </ul>"},{"location":"cp/contest/nhspc_mock/#2022","title":"2022","text":"<ul> <li>\u984c\u672c</li> <li>\u5b98\u89e3</li> <li>\u8a18\u5206\u677f</li> </ul>"},{"location":"cp/contest/other/","title":"\u652f\u7dda\u6bd4\u8cfd","text":""},{"location":"cp/contest/other/#ytp","title":"ytp \u5c11\u5e74\u5716\u9748\u8a08\u756b","text":""},{"location":"cp/contest/other/#_1","title":"\u8cc7\u6599","text":"<ul> <li>\u5b98\u7db2</li> <li>FB \u793e\u5718</li> </ul>"},{"location":"cp/contest/other/#_2","title":"\u8cfd\u5236","text":"<ul> <li>\u7dda\u4e0a\u521d\u8cfd\uff0c\u5be6\u9ad4\u8907\u8cfd</li> <li>\u5718\u9ad4\u8cfd(\u4e0d\u9650\u5b78\u6821)</li> </ul>"},{"location":"cp/contest/other/#_3","title":"\u5099\u8a3b","text":"<ul> <li>\u6709\u4e0d\u932f\u7684\u98df\u7269/\u70b8\u96de\u53ef\u5403</li> <li>\u6700\u591a\u53d6\u524d 15 \u968a\u53ef\u4ee5\u505a\u5c08\u984c</li> <li>\u524d\u4e09\u540d\u53ef\u7372\u5f97\u6d77\u5916\u5b78\u7fd2\u7684\u6a5f\u6703</li> <li>\u524d\u4e09\u540d\u6709\u9ad8\u984d\u734e\u91d1</li> </ul>"},{"location":"cp/contest/other/#_4","title":"\u6210\u5927\u9080\u8acb\u8cfd","text":""},{"location":"cp/contest/other/#_5","title":"\u8cc7\u6599","text":"<ul> <li>\u5b98\u7db2</li> <li>discord \u7fa4\u7d44</li> </ul>"},{"location":"cp/contest/other/#_6","title":"\u8cfd\u5236","text":"<ul> <li>OI \u8cfd\u5236</li> <li>\u7dda\u4e0a\u521d\u8cfd\uff0c\u5be6\u9ad4\u8907\u8cfd</li> <li>\u5718\u9ad4\u8cfd(\u4e0d\u9650\u5b78\u6821)</li> </ul>"},{"location":"cp/contest/other/#2023","title":"2023","text":"<ul> <li>2023 \u521d\u8cfd\u8a18\u5206\u677f</li> <li>2023 \u521d\u8cfd\u984c\u672c</li> <li>2023 \u521d\u8cfd CF gym</li> </ul>"},{"location":"cp/contest/other/#issc","title":"ISSC \u9752\u5e74","text":""},{"location":"cp/contest/other/#_7","title":"\u8cc7\u6599","text":"<ul> <li>FB \u793e\u5718</li> </ul>"},{"location":"cp/contest/other/#_8","title":"\u8cfd\u5236","text":"<ul> <li>ICPC</li> <li>\u5be6\u9ad4</li> <li>\u5718\u9ad4\u8cfd</li> </ul>"},{"location":"cp/contest/other/#_9","title":"\u5099\u8a3b","text":"<ul> <li>\u514d\u8cbb\u5348\u9910\u8ddf AC \u6c23\u7403\uff0c\u524d 3 \u540d\u6709\u734e\u91d1</li> </ul>"},{"location":"cp/contest/other/#ten-point-round","title":"Ten Point Round","text":""},{"location":"cp/contest/other/#_10","title":"\u8cc7\u6599","text":"<ul> <li>FB \u5e33\u865f</li> </ul>"},{"location":"cp/contest/other/#_11","title":"\u8cfd\u5236","text":"<ul> <li>\u7dda\u4e0a</li> </ul>"},{"location":"cp/contest/other/#hp-codewars","title":"HP Codewars","text":""},{"location":"cp/contest/other/#_12","title":"\u8cc7\u6599","text":"<ul> <li>FB \u5e33\u865f</li> </ul>"},{"location":"cp/contest/other/#_13","title":"\u5099\u8a3b","text":"<p>\u9001\u7684\u8d08\u54c1\u524d\u4e09\u5e74\u662f\u6ed1\u9f20\u3001\u8033\u6a5f\u3001\u5145\u96fb\u7dda</p>"},{"location":"cp/contest/other/#npsc","title":"NPSC","text":""},{"location":"cp/contest/other/#_14","title":"\u8cc7\u6599","text":"<ul> <li>2022 \u5b98\u7db2</li> <li>2014 \u5b98\u7db2</li> </ul>"},{"location":"cp/contest/other/#_15","title":"\u8cfd\u5236","text":"<ul> <li>\u7dda\u4e0a\u521d\u8cfd\uff0c\u5be6\u9ad4\u8907\u8cfd</li> <li>ICPC</li> <li>\u5718\u9ad4\u8cfd(\u9700\u540c\u6821)</li> </ul>"},{"location":"cp/contest/other/#_16","title":"\u5099\u8a3b","text":"<ul> <li>\u524d 6 \u540d\u734e\u54c1\u8c50\u5bcc</li> <li>\u6c7a\u8cfd\u6709\u514d\u8cbb\u9910\u76d2\u8ddf AC \u6c23\u7403</li> <li>\u570b\u5c0f\u7d44\uff0c\u570b\u4e2d\u7d44\uff0c\u9ad8\u4e2d\u7d44</li> </ul>"},{"location":"cp/contest/path/","title":"\u6bd4\u8cfd\u6649\u7d1a\u8def\u7dda\u5716","text":"\u6bd4\u8cfd\u8def\u7dda\u5716 by \u4f55\u9054\u777f <p>\u5099\u8a3b :</p> <ul> <li> <p>\u6709\u984d\u5916 5 \u500b\u540d\u984d\u662f\u5973\u6027\u4fdd\u969c (\u4e0d\u7ba1\u4e8c\u5341\u540d + \u5168\u570b\u6709\u591a\u5c11\u5973\u751f\uff0c\u90fd\u662f\u518d\u589e\u984d\u9304\u53d6 5 \u500b)</p> </li> <li> <p>\u9ad8\u4e00\u4fdd 4 \u500b\u540d\u984d (\u82e5\u524d\u4e8c\u5341\u540d + \u5168\u570b + \u5973\u4fdd\u9ad8\u4e00\u4ee5\u4e0b\u4e0d\u5230 4 \u500b\uff0c\u5247\u589e\u984d\u9304\u53d6\u5230 4 \u500b)</p> </li> <li> <p>\u4e8c\u968e\u7dda\u6210\u7e3e\u904e\u8fd1\u6703\u8003\u616e\u589e\u984d\u9304\u53d6</p> </li> </ul>"},{"location":"cp/contest/regional/","title":"\u5340\u57df\u8cfd","text":"<ul> <li>\u8fd1\u5e7e\u5e74\u7684\u984c\u672c</li> <li>TIOJ \u5317\u5e02\u8cfd</li> <li>\u4e00\u4e9b\u8a18\u5206\u677f\u8ddf\u984c\u672c</li> <li>\u504f\u65e9\u671f\u7684\u6bd4\u8cfd\u8cc7\u6599</li> <li> <p>Zerojudge tag \u8cc7\u8a0a\u5b78\u79d1\u80fd\u529b\u7af6\u8cfd (\u53ef\u4ee5\u8a55\u6e2c) </p> </li> <li> <p>110 \u9ad8\u96c4\u5e02\u8cfd</p> </li> <li> <p>Yuihuang</p> </li> </ul>"},{"location":"cp/contest/school/","title":"\u6821\u5167\u8cfd","text":"<p>\u00a0\u00a0\u57fa\u672c\u4e0a\u90fd\u53ef\u4ee5\u5728\u9019\u88e1\u627e\u5230</p>"},{"location":"cp/contest/school/#_1","title":"\u9644\u4e2d\u6a21\u7af6","text":"<p> \u9644\u4e2d\u6a21\u7af6 Group</p> <ul> <li>2021<ul> <li>2021 : I, II </li> <li>2021 : III </li> <li>2021 : IV </li> </ul> </li> <li>2022 <ul> <li>2022 : I </li> </ul> </li> </ul>"},{"location":"cp/contest/school/#_2","title":"\u5efa\u4e2d\u6821\u5167\u8cfd","text":"<ul> <li>TIOJ contest</li> </ul>"},{"location":"cp/contest/school/#_3","title":"\u5ef6\u5e73\u6821\u5167\u8cfd","text":"<ul> <li>2021</li> </ul>"},{"location":"cp/contest/school/#_4","title":"\u6210\u529f\u9ad8\u4e2d","text":"<ul> <li>Zerojudge \u6210\u529f\u9ad8\u4e2d</li> </ul>"},{"location":"cp/contest/school/#_5","title":"\u65b0\u7af9\u5973\u4e2d","text":"<ul> <li>Zerojudge hgsh</li> </ul>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/","title":"\u6797\u71c8\u76c3 APCS \u8ab2\u7a0b\u8cc7\u6599\u5f59\u6574","text":""},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#_1","title":"\u9032\u968e\u73ed","text":""},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#2020","title":"2020","text":"<p>\u8cc7\u6599 : https://vjudge.net/article/2291</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class1","title":"class1","text":"<p>\u9304\u5f71\u6a94 : Math 20210714 - \u6731\u5049\u54f2,\u9ec3\u5141\u8b19 \u6a19\u7c64 : GCD, Binary EXP, Prime, Modulo, Matrix </p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class2","title":"class2","text":"<p>\u9304\u5f71\u6a94 : Shortest Path 20210707 - \u6731\u5049\u54f2,\u9ec3\u5141\u8b19 \u6a19\u7c64 : Floyd-Warshall, Bellman-Ford, SPFA, Dijkstra</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class3","title":"class3","text":"<p>\u9304\u5f71\u6a94 : Heap,minimun spanning tree-20210630-\u6731\u5049\u54f2,\u9ec3\u5141\u8b19 \u6a19\u7c64 : disjoint set union, minimun spanning tree , kruscal, prim</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class4","title":"class4","text":"<p>\u9304\u5f71\u6a94 : \u52d5\u614b\u898f\u5283-20210623-\u9ec3\u5141\u8b19</p> <p>\u53c3\u8003\u8cc7\u6599 :</p> <ul> <li>https://www.itread01.com/content/1542940564.html</li> <li>http://www2.lssh.tp.edu.tw/~hlf/class-1/lang-c/DP.pdf</li> </ul>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class5","title":"class5","text":"<p>\u9304\u5f71\u6a94 : graph-1(20210616) \u6a19\u7c64 : \u5b9a\u7fa9graph,dfs, bfs</p> <p>dfs, bfs\u5be6\u4f5ccode : https://pastebin.com/eNx4Wzrt</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class6","title":"class6","text":"<p>\u9304\u5f71\u6a94 :  graph-2(20210616) \u6a19\u7c64 : BFS\u5be6\u4f5c,\u4e8c\u5206\u5716,\u62d3\u6a38topology</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class7","title":"class7","text":"<p>\u9304\u5f71\u6a94 : tree (20210609)</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#2021","title":"2021","text":""},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class1_1","title":"class1","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u57fa\u790e\u8907\u7fd2</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>C/C++</li> <li>CP knowledge</li> <li>CP Techniques</li> <li>Complexity</li> <li>Compiler</li> <li>Competition</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831 : https://hackmd.io/@Ccucumber12/BknmnNK0d#/</p> <p>8/2\u57fa\u790e\u8907\u7fd2\u4e0a\u8ab2\u7d00\u9304\u6a94 : https://drive.google.com/file/d/12NAAXZHwj5ema73kuB1OZTvJBHdLRWa8/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class2_1","title":"class2","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u5e38\u898b\u6280\u5de7</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>Binary Exponentiation</li> <li>Prefix Sum</li> <li>Discretize</li> <li>Enumeration</li> <li>Backtracking</li> <li>Binary Search</li> <li>Divide &amp; Conquer</li> <li>Sorting</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831 : https://hackmd.io/@Ccucumber12/SJ9lswGkK#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(enumeration) </p> </li> <li> <p>pB(binary search)</p> </li> <li> <p>pC(ternary search) </p> </li> <li> <p>pD(prefix sum) </p> </li> <li> <p>pE(\u53ef\u4ee5\u56de\u6714\u6cd5\u7684\u679a\u8209\u984c\u76ee) </p> </li> <li> <p>pF(\u96e2\u6563\u5316) </p> </li> <li> <p>pG(\u5feb\u901f\u51aa) </p> </li> <li> <p>pH(prefix sum + discretize) </p> </li> <li> <p>pI(\u6a39\u4e0a\u5169\u9ede\u8ddd\u96e2) </p> </li> <li> <p>pJ(enumeration\u91cf\u676f\u554f\u984c) </p> </li> </ul> <p>Scoreboard : https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/3 \u4e0a\u8ab2\u8a18\u9304\u6a94 : https://drive.google.com/file/d/17Qq8Jxtj5PBXommZihXRDvY2KWDF2O4b/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class3_1","title":"class3","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u57fa\u790e\u8cc7\u6599\u7d50\u69cb</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>binary heap</li> <li>DSU</li> <li>sparse table</li> <li>monotonic queue</li> <li>Fenwick tree</li> <li>segment tree</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/SkuTo_S1Y#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(monotonic queue\u7b97\u88f8\u984c) </p> </li> <li> <p>pB(RMQ\u6a21\u677f\u984c) </p> </li> <li> <p>pC(DSU\u88f8\u984c) </p> </li> <li> <p>pD(heap)</p> </li> <li> <p>pE(heap2)</p> </li> <li> <p>pF(\u4e8c\u7dadBIT (Fenwick tree))</p> </li> <li> <p>pG(\u4e8c\u7dad\u524d\u7db4\u5408)</p> </li> <li> <p>pH(sparse table) </p> </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/6 \u4e0a\u8ab2\u8a18\u9304\u6a94 : https://drive.google.com/file/d/1IR-wLdn-0EIq8cLPwABd44UvH6kNZ4_9/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class4_1","title":"class4","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u6a39\u8ad6</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>centroid</li> <li>diameter</li> <li>LCA</li> <li>euler tour technique</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/Hk5-jRi1t#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(\u6a39\u91cd\u5fc3\u6a21\u677f\u984c) </p> </li> <li> <p>pB(\u6a39\u91cd\u5fc3\u8b8a\u5316\u984c(\u53ea\u6709\u4e00\u9ede\u9ede))</p> </li> <li> <p>pC(\u6a39\u76f4\u5f91\u88f8\u984c)</p> </li> <li> <p>pD(\u6700\u5c0f\u76f4\u5f91\u6a39) </p> </li> <li> <p>pE(LCA\u6a21\u677f\u984c)</p> </li> <li> <p>pF(LCA) </p> </li> <li> <p>pG(Euler tour tree)</p> </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/9 \u4e0a\u8ab2\u8a18\u9304\u6a94 : https://drive.google.com/file/d/1x2imnPaK_gEH1wGY5wvEQ2JQQM6iujyS/view?usp=sharing</p> <p>\u8ab2\u5916\u88dc\u5145-\u91cd\u8f15\u934a\u5256\u5206\u6a21\u677f\u984c :  https://www.luogu.com.cn/problem/P3384 \u6709\u8208\u8da3\u7684\u540c\u5b78\u53ef\u4ee5\u6311\u6230\u770b\u770b</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class5_1","title":"class5","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u5716\u8ad6</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>shortest path</li> <li>MST</li> <li>topological sort</li> <li>components</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/BJGKlTRkt#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(topological sort) </p> </li> <li> <p>pB(\u55ae\u6e90\u6700\u77ed\u8def\u52a0\u4e00\u689d\u908a\u8b8a\u5316\u984c) </p> </li> <li> <p>pC(MST\u6a21\u677f\u984c)</p> </li> <li> <p>pD(\u5168\u9ede\u5c0d)</p> </li> <li> <p>pE(\u55ae\u6e90\u6700\u77ed\u8def(\u7121\u8ca0\u74b0)</p> </li> <li> <p>pF(\u8ca0\u74b0\u5224\u65b7)</p> </li> <li> <p>pG(topological sort)</p> </li> <li> <p>pH(Connected Component)</p> </li> <li> <p>pI(\u6700\u5c0f\u74b0)</p> </li> </ul> <p>\u6539\u70ba\u9032\u968e\u8cc7\u6599\u7d50\u69cb\u7bc4\u570d\u53ef\u4ee5\u81ea\u5df1\u7df4\u7fd2\u770b\u770b</p> <ul> <li>pJ(SCC (strongly connected components)) </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/10\u4e0a\u8ab2\u7d00\u9304\u6a94 : https://drive.google.com/file/d/1IPCAl3b6vK3kHeEAEC8Jjuxg29GqM7K5/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class6_1","title":"class6","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u6578\u5b78</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>number theory</li> <li>modular</li> <li>combinatorics</li> <li>matrix</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/Hy8nj-fxt#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(number theory(difficulty : 800))</p> </li> <li> <p>pB(number theory(difficulty : 1600))</p> </li> <li> <p>pC(combinatorics(difficulty : 1000))</p> </li> <li> <p>pD(combinatorics(difficulty : 1600))</p> </li> <li> <p>pE(\u77e9\u9663\u5feb\u901f\u51aa-\u8cbb\u6c0f\u6578\u5217) </p> </li> <li> <p>pF(MOD\u7c21\u55ae\u8a08\u7b971)</p> </li> <li> <p>pG(\u4e00\u6b21\u540c\u9918\u65b9\u7a0b)</p> </li> <li> <p>pH(\u4e2d\u570b\u5269\u9918\u5b9a\u7406)</p> </li> <li> <p>pI(\u64f4\u5c55\u6b50\u5e7e\u91cc\u5f97\u7b97\u6cd5(extgcd) \u8b8a\u5316\u984c)</p> </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/13\u4e0a\u8ab2\u7d00\u9304\u6a94 :https://drive.google.com/file/d/1rcqV_EMpk598piYq_cL1J2qsWm3KpfKx/view?usp=sharing</p> <p>\u88dc\u5145-\u6b50\u62c9\u51fd\u6578\u4f8b\u984c : https://tioj.ck.tp.edu.tw/problems/1875</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class7_1","title":"class7","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u9032\u968e\u8cc7\u6599\u7d50\u69cb</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>Segment Trees</li> <li>Lazy Propagation</li> <li>Sweeping Line</li> <li>Dynamic Segment Tree</li> <li>2D Segment Tree</li> <li>Persistent Segment Tree</li> <li>Treap</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/B1PqClBlY#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(\u5340\u9593\u7b2cK\u5c0f?\u5927? \u6301\u4e45\u5316\u7dda\u6bb5\u6a39)</p> </li> <li> <p>pB(\u77e9\u5f62\u7e3d\u548c\u9762\u7a4d \u7dda\u6bb5\u6a39\u61c9\u7528\u6383\u63cf\u7dda)</p> </li> <li> <p>pC(\u4e8c\u7dad\u7dda\u6bb5\u6a39\u6a21\u677f)</p> </li> <li> <p>pD(\u52d5\u614b\u958b\u9ede\u7dda\u6bb5\u6a39\u6a21\u677f)</p> </li> <li> <p>pE(\u7dda\u6bb5\u6a39lazytag\u6a21\u677f)</p> </li> <li> <p>pF(Treap)</p> </li> <li> <p>pG(Treap2)</p> </li> <li> <p>pH(Leftist Tree)</p> </li> <li> <p>pI(\u7dda\u6bb5\u6a39\u89e3\u5340\u9593\u548c)</p> </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/16 \u4e0a\u8ab2\u7d00\u9304\u6a94 : https://drive.google.com/file/d/1CaLX6KxSzqejAZvrPF1rvas3-xrT8d7Y/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class8","title":"class8","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u52d5\u614b\u898f\u5283</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>Knapsack </li> <li>\u6efe\u52d5\u9663\u5217</li> <li>\u72c0\u614b\u58d3\u7e2e</li> <li>Sum-over-Subset</li> <li>Optimization</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/Bk6lLyuxF#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(01\u80cc\u5305\u6a21\u677f)</p> </li> <li> <p>pB(\u7121\u9650\u80cc\u5305\u6a21\u677f)</p> </li> <li> <p>pC(\u591a\u91cd\u80cc\u5305\u6a21\u677f)</p> </li> <li> <p>pD(\u72c0\u614b\u58d3\u7e2edp)</p> </li> <li> <p>pE(\u72c0\u614b\u58d3\u7e2edp2)</p> </li> <li> <p>pF(SOSDP \u512a\u5316)</p> </li> <li> <p>pG(\u55ae\u8abf\u5c0d\u5217\u512a\u5316)</p> </li> <li> <p>pH(Divide &amp; Conquer dp)</p> </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/17 \u4e0a\u8ab2\u8a18\u9304\u6a94 : https://drive.google.com/file/d/1F_k99tZWO9JpgzhBk3BS7-xgVpqIj8bi/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class9","title":"class9","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u9032\u968e\u5716\u8ad6</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>DFS Tree</li> <li>Biconnected Component</li> <li>Strongly Connected Components</li> <li>2-SAT</li> <li>Maximum Bipartite Matching</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/HylySg2xF#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(Tarjan+dfs)</p> </li> <li> <p>pB(2-sat(difficulty : 1500))</p> </li> <li> <p>pC(2-sat(difficulty : 2600))</p> </li> <li> <p>pD(maximum bipartite matching)</p> </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/20 \u4e0a\u8ab2\u8a18\u9304\u6a94 : https://drive.google.com/file/d/1uvNpM2vX922x6ap-RGx-HX1vFn4bsSPE/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class10","title":"class10","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u5b57\u4e32</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>Trie</li> <li>KMP</li> <li>Z-algorithm</li> <li>Rolling hash</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/rkDAFuAxt#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(trie)</p> </li> <li> <p>pB(KMP)</p> </li> <li> <p>pC(Z-algorithm)</p> </li> <li> <p>pD(rolling hash)</p> </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>8/24 \u4e0a\u8ab2\u8a18\u9304\u6a94 : https://drive.google.com/file/d/1UIX8nq9gX8DzEKtzOz7jK8EhAE4N_4tI/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class11","title":"class11","text":"<p>\u8ab2\u7a0b\u4e3b\u984c\uff1a\u8a08\u7b97\u5e7e\u4f55</p> <p>\u8ab2\u7a0b\u5927\u7db1\uff1a</p> <ul> <li>2D-Vector</li> <li>Segments</li> <li>Sort by Angle</li> <li>Convex Hull</li> <li>Duality of Points and Lines</li> </ul> <p>\u8ab2\u7a0b\u7c21\u5831\uff1ahttps://hackmd.io/@Ccucumber12/BJeOhtzbF#/</p> <p>\u984c\u76ee\u7df4\u7fd2\uff1a</p> <ul> <li> <p>pA(\u7dda\u6bb5\u76f8\u4ea4)</p> </li> <li> <p>pB(\u51f8\u5305)</p> </li> <li> <p>pC(\u6975\u89d2\u6392\u5e8f)</p> </li> <li> <p>pD(\u51f8\u5305\u9762\u7a4d)</p> </li> </ul> <p>Scoreboard: https://docs.google.com/spreadsheets/d/10yJ5KIb7Hs6rqPigLnCAJ8nQVyKcLD2TSiZMR_IUYPo/edit?usp=sharing</p> <p>\u4e0a\u8ab2\u88dc\u5145 \u5c0d\u5076\u6027\u8cea : https://codeforces.com/problemset/problem/678/F</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class-12","title":"class 12 \u6691\u671f\u8cfd","text":"<p>\u7db2\u5740\uff1ahttps://codeforces.com/contestInvitation/6a6c3b9df3771afb48ea99da4ad55157a62e5a85</p> <p>\u898f\u5247\uff1ahttps://drive.google.com/file/d/1YBU9dm8a2Eo6KLuvcVkUyBM0BUcK3QQm/view?usp=sharing</p> <p>\u984c\u89e3\uff1ahttps://hackmd.io/@Ccucumber12/r1Y0jcd-K</p> <p>\u984c\u89e3\u5f71\u7247\uff1ahttps://drive.google.com/file/d/1PAGR3wDwvfarfsASTpr_x47e8UsYeFmE/view?usp=sharing</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#2022","title":"2022","text":""},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class1_2","title":"class1","text":"<p>\u4e3b\u984c\uff1a\u7af6\u7a0b\u5165\u9580</p> <p>\u8b1b\u7fa9\uff1ahttps://hackmd.io/@Ccucumber12/B1_ZAUPpc</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class2_2","title":"class2","text":"<p>\u4e3b\u984c:\u5e38\u7528\u6280\u5de7</p> <p>\u8b1b\u7fa9 : https://hackmd.io/pfu2Tz5JRkusQr2cGX7e_A?view</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class3_2","title":"class3","text":"<p>\u4e3b\u984c:\u6a39\u8ad6</p> <p>\u8b1b\u7fa9 : https://hackmd.io/4WgTERPXTDqbkx0_lSi-sw</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class4_2","title":"class4","text":"<p>\u4e3b\u984c\uff1a\u5716\u8ad6</p> <p>\u8b1b\u7fa9\uff1ahttps://hackmd.io/@Ccucumber12/ryKM3BXA9</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class5_2","title":"class5","text":"<p>\u4e3b\u984c\uff1a\u52d5\u614b\u898f\u5283</p> <p>\u8b1b\u7fa9\uff1ahttps://hackmd.io/@Ccucumber12/Hkzl59uA9</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class6_2","title":"class6","text":"<p>\u4e3b\u984c\uff1a\u7dda\u6bb5\u6a39</p> <p>\u8b1b\u7fa9\uff1ahttps://hackmd.io/@Ccucumber12/Bk5A5tnCq</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class7_2","title":"class7","text":"<p>\u4e3b\u984c\uff1a\u6578\u5b78</p> <p>\u8b1b\u7fa9\uff1ahttps://hackmd.io/@Ccucumber12/rycdcCWJo</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#class8_1","title":"class8","text":"<p>\u4e3b\u984c\uff1a\u7d9c\u5408\u61c9\u7528\uff08\u7dda\u6bb5\u6a39\u9032\u968e\u3001DP \u512a\u5316\uff09</p> <p>\u8b1b\u7fa9\uff1ahttps://hackmd.io/@Ccucumber12/Bk4dRhryi</p>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#_2","title":"\u929c\u63a5\u73ed","text":""},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#2021_1","title":"2021","text":"<p>\u8cc7\u6599 :  https://hackmd.io/@110ldadpre/</p> <p>\u8b1b\u5e2b\u7de8\u7684\u8b1b\u7fa9 : https://hackmd.io/@Distinguished/HJCZMKM8t</p> <p>\u5353\u8d8a\u76c3 : https://hackmd.io/@110ldadpre/r1GT2WtaY/%2FHfSOpfGBQeqy3GoNKFv8aQ</p> <p>\u4e0a\u8ab2\u7d00\u9304\u6a94 : </p> <ul> <li>1/24</li> <li>1/25</li> <li>1/26</li> <li>5/26</li> </ul> <p>\u4e0a\u8ab2\u7c21\u5831 :</p> <p>1.\u57fa\u672c\u6280\u5de7</p> <ul> <li>\u7c21\u5831 http://gg.gg/xcy2n</li> </ul> <p>1.2 \u5176\u4ed6\u57fa\u672c\u6280\u5de7</p> <ul> <li>\u7c21\u5831 https://hackmd.io/@mtmatt/HJE4RGay5</li> </ul> <p>2.\u6392\u5e8f\u8207\u4e8c\u5206\u641c</p> <ul> <li>\u6ce1\u6cab\u6392\u5e8f\u3001\u9078\u64c7\u6392\u5e8f\u7c21\u5831</li> <li>C++\u5167\u5efa\u6392\u5e8f\u51fd\u5f0f\u7684\u61c9\u7528</li> <li>\u4e8c\u5206\u641c\u88dc\u5145\u8cc7\u6599</li> </ul> <p>3.\u57fa\u672cSTL</p> <ul> <li>\u7c21\u5831</li> </ul> <p>4.\u5716\u8ad6</p> <ul> <li>\u7c21\u5831</li> </ul> <p>n.\u52d5\u614b\u898f\u5283</p> <ul> <li>\u7c21\u5831</li> </ul> <p>\u7af6\u8cfd\u7528\u53c3\u8003\u8cc7\u6599\u6574\u7406 :</p> <ul> <li> <p>\u5f9e\u96f6\u958b\u59cb\u7684\u6f14\u7b97\u6cd5\u7af6\u8cfd\u6559\u5b78(\u7531\u570b\u969b\u8cc7\u8a0a\u5967\u6797\u5339\u4e9e\u9280\u724c\u7684\u96fb\u795e\u6240\u7de8\u64b0)</p> </li> <li> <p>\u6210\u5927\u7af6\u8cfd\u7528\u8b1b\u7fa9(\u6211\u662f\u6c92\u7528\u904e\u4e0d\u904e\u5c1a\u54f2\u63a8\u85a6\u61c9\u8a72\u9084\u4e0d\u932f)</p> </li> <li> <p>\u57fa\u790e\u7df4\u7fd2\u984c\u55ae(\u7d93\u904e\u904e\u6ffe\u5f8c\u7684\u512a\u826f\u984c\u76ee)</p> </li> <li> <p>\u7df4\u7fd2\u984c\u7684\u984c\u89e3\u5011(\u5b9c\u4e2d\u5b78\u9577\u5614\u5fc3\u701d\u8840\u88fd\u4f5c\u7684)</p> </li> <li> <p>\u57fa\u790e\u8907\u7fd2\u5f71\u7247(\u534a\u5c0f\u6642\u8907\u7fd2C++\u57fa\u790e\u8a9e\u6cd5)</p> </li> <li> <p>VScode\u5b89\u88dd\u6559\u5b78</p> </li> <li> <p>\u5c1a\u672a\u5b8c\u6210\u7684\u5b9c\u4e2d\u8b1b\u7fa9</p> </li> <li> <p>\u4e0d\u77e5\u9053\u54ea\u88e1\u4f86\u7684\u8b1b\u7fa9(\u5927\u6982\u7387\u5efa\u4e2d\u7684)</p> </li> <li> <p>\u82f1\u6587\u66f8</p> </li> </ul>"},{"location":"cp/images/%E6%9E%97%E7%87%88%E7%9B%83/#2022_1","title":"2022","text":"<p>\u8cc7\u6599 : HOJ</p>"},{"location":"dp/aliens/","title":"Aliens \u512a\u5316","text":"<p>Aliens \u512a\u5316\uff0c\u5229\u7528\u624b\u7e8c\u8cbb w \u4f86\u9650\u5236\u9078\u7684\u6b21\u6578\uff0c\u6162\u6162\u53bb\u903c\u8fd1\u9078 k \u6b21\u7684 w\uff08\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u4f46\u5c31\u662f\u53bb\u5617\u8a66\u903c\u8fd1\uff0c\u56e0\u70ba\u9078\u7684\u6b21\u6578\u9084\u662f\u5177\u6709\u55ae\u8abf\u6027\uff09</p>"},{"location":"dp/aliens/#best-time-to-buy-and-sell-stock","title":"Best Time to Buy and Sell Stock","text":"LeetCode 122. Best Time to Buy and Sell Stock II <p>\u7d66\u4f60 \\(n\\) \u500b\u80a1\u50f9 \\(a_1,\\ldots ,a_n\\)\uff0c\u4f60\u53ef\u4ee5\u505a\u6700\u591a\u4e00\u6b21\u8cb7\u8ddf\u8ce3\uff0c\u4e14\u8cb7\u8ddf\u8ce3\u53ef\u4ee5\u5728\u540c\u4e00\u5929\uff0c\u7372\u5229\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(n\\le 3\\times 10^4,a_i\\le 10^4\\)</p> \u601d\u8def <p>\u56e0\u70ba\u53ef\u4ee5\u7576\u5929\u8ce3\u53c8\u7576\u5929\u8cb7\uff0c\u5229\u6f64\u8b8a\u6210\u53ef\u4ee5\u62c6\u89e3\u7684\uff0c\u90a3\u6211\u5011\u5c31 Greedy \u7684\u9078\u5373\u53ef</p> <p> Image caption </p> code <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int result = 0;\n        for (int i = 1; i &lt; prices.size(); i++) {\n            result += max(prices[i] - prices[i - 1], 0);\n        }\n        return result;\n    }\n};\n</code></pre> LeetCode 714. Best Time to Buy and Sell Stock with Transaction Fee <p>\u7d66\u4f60 \\(n\\) \u500b\u80a1\u50f9 \\(a_1,\\ldots ,a_n\\)\uff0c\u8cb7\u8ddf\u8ce3\u4e0d\u80fd\u5728\u540c\u4e00\u5929\uff0c\u4e14\u4e00\u6b21\u8cb7\u8ce3\u6703\u6263 w \u5143\u7684\u624b\u7e8c\u8cbb\uff0c\u7372\u5229\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(k\\le n\\le 2\\times 10^6,a_i\\le 10^7\\)</p> \u601d\u8def <p>dp[i][0/1]: i \u4e4b\u524d\u7684\u6700\u5f8c\u4e00\u5f35\u662f\u8ce3\u51fa/\u9084\u662f\u8cb7\u9032</p> <p>dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + a[i])</p> <p>dp[i][1] = max(dp[i - 1][0] - a[i] - w, dp[i - 1][1])</p>"},{"location":"dp/aliens/#ai-666","title":"AI-666 \u8cfa\u591a\u5c11","text":"2017 \u5168\u570b\u8cfd AI-666 \u8cfa\u591a\u5c11 <p>\u7d66\u4f60 \\(n\\) \u500b\u80a1\u50f9 \\(a_1,\\ldots ,a_n\\)\uff0c\u4f60\u53ef\u4ee5\u505a\u6700\u591a k \u8cb7\u8ddf\u8ce3\uff0c\u4e14\u8cb7\u8ddf\u8ce3\u4e0d\u80fd\u5728\u540c\u4e00\u5929\uff0c\u7372\u5229\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(k\\le n\\le 2\\times 10^6,a_i\\le 10^7\\)</p> \u601d\u8def <p>Aliens \u512a\u5316\u3002\u5728\u8a08\u7b97\u7684\u90e8\u5206\uff0c\u6211\u5011\u53ef\u4ee5\u5957\u5165\u4e0a\u9762\u624b\u7e8c\u8cbb\u7684\u6982\u5ff5\uff0c\u624b\u7e8c\u8cbb\u8d8a\u591a\uff0c\u80fd\u62ff\u7684\u6b21\u6578\u5c31\u8d8a\u5c0f\uff0c\u6ce8\u610f\u540c\u500b\u624b\u7e8c\u8cbb\u80fd\u62ff\u7684\u6b21\u6578\u53ef\u80fd\u4e0d\u53ea\u4e00\u7a2e\uff0c\u6211\u5011\u9019\u908a\u4e00\u5f8b\u53d6\u6700\u5c0f\u7684\u6b21\u6578\u3002</p> <p>\u82e5\u7121 k \u7684\u9650\u5236\uff0c\u610f\u5373\u6211\u5011\u62ff\u5e7e\u6b21\u90fd\u53ef\u4ee5\uff0c\u4ee4\u6b64\u6642\u6070\u597d\u8cb7\u8ce3 t \u6b21\uff0c\u5176\u5be6\u610f\u7fa9\u7b49\u540c\u65bc\u624b\u7e8c\u8cbb\u70ba 0\uff0c\u540c\u6642\u4e5f\u662f\u624b\u7e8c\u8cbb\u7684\u4e0b\u9650\u3002\u6211\u5011\u53ef\u4ee5\u5c07\u5716\u756b\u51fa\u4f86\uff0cg(k) \u70ba\u8cb7 k \u6b21\u7684\u6700\u5927\u7372\u5229\u3002 </p> <p> </p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5beb\u51fa :</p> <ul> <li> <p>\u82e5 k &lt; t\uff0c\u90a3\u4e00\u5b9a\u662f k \u6b21\u6700\u597d\u3002</p> </li> <li> <p>\u82e5 k &gt; t\uff0c\u6700\u4f73\u89e3\u5373\u662f t \u6b21\u3002</p> </li> </ul> <p>\u56e0\u70ba\u5728\u9019\u908a\u540c\u6a23\u624b\u7e8c\u8cbb\u53ef\u80fd\u5c0d\u61c9\u591a\u7a2e\u8cb7\u8ce3\u6b21\u6578\uff0c\u5728\u6211\u5011\u90fd\u4e00\u5f8b\u53d6\u6700\u5c0f\u7684\u60c5\u6cc1\u4e0b\uff0c\u6211\u5011\u5c31\u662f\u8981\u4e8c\u5206\u641c\u7b2c\u4e00\u500b\u300c\u6700\u4f73\u8cb7\u8ce3\u6b21\u6578\u300d &lt;= k \u7684 w\u3002\u4f8b\u5982 k = 4\uff0c\u90a3\u6211\u5c31\u6703\u9078\u5230 w = 2\u3002</p> \\[ \\begin{array}{c|cccccc} w&amp;0&amp;1&amp;2&amp;3&amp;4&amp;5\\\\ \\hline \u6700\u4f73\u8cb7\u8ce3\u6b21\u6578 &amp; 5 &amp; 5 &amp; 3 &amp; 3 &amp; 3 &amp; 1\\\\ \\end{array} \\] <p>\u6211\u5011\u4ee4\u300c\u5728\u624b\u7e8c\u8cbb\u70ba w \u7684\u6700\u5c0f\u8cb7\u8ce3\u6b21\u6578\u300d\u70ba x\u3002\u5be6\u4f5c\u4e0a\u6700\u5f8c\u8981\u52a0\u56de\u53bb\u7684\u624b\u7e8c\u8cbb\u6703\u662f k * w\uff0c\u4e0d\u80fd\u5beb\u6210 x * w\uff0c\u56e0\u70ba\u4f60\u540c\u6642\u53ef\u4ee5\u9078\u64c7\u8cb7\u8ce3 k \u6b21\u6216 x \u6b21\uff0c\u90a3\u82e5 x &lt; k\uff08\u5982\u4e0a\u5716\u7684 k = 4, x = 3\uff09\uff0cans + k*w \u986f\u7136\u662f\u6bd4\u8f03\u5927\u7684\u3002</p> <p>\u4e0b\u9762\u7684\u5beb\u6cd5\u6709\u9ede\u4e0d\u592a\u6b63\u7d71(\u4e26\u672a\u4f7f\u7528\u5c0f\u6578\u9ede\u4e8c\u5206\u641c\u53bb\u903c\u8fd1)</p> <p>Greedy \u4f5c\u6cd5:\uff08P.60\uff09 https://drive.google.com/file/d/1w4Lnxy5OuNN1rJ8nz9nBqakPGhS40g6B/view</p> code <pre><code>#pragma GCC optimize(\"O3,unroll-loops\")\n#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 9e18;\nconst int maxn = 3e6 + 5;\nconst int M = 1e9 + 7;\n\nint n, k;\nint a[maxn];\nint dp[maxn][2];\nint cnt[maxn][2];\n\npii cal(int w) {\n    dp[0][1] = -INF;\n    cnt[0][1] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + a[i]);\n        int mn = INF;\n        if (dp[i][0] == dp[i - 1][0]) {\n            mn = min(cnt[i - 1][0], mn);\n        }\n        if (dp[i][0] == dp[i - 1][1] + a[i]) {\n            mn = min(cnt[i - 1][1], mn);\n        }\n        cnt[i][0] = mn;\n\n        dp[i][1] = max(dp[i - 1][0] - a[i] - w, dp[i - 1][1]);\n        mn = INF;\n        if (dp[i][1] == dp[i - 1][0] - a[i] - w) {\n            mn = min(cnt[i - 1][0] + 1, mn);\n        } \n        if (dp[i][1] == dp[i - 1][1]) {\n            mn = min(cnt[i - 1][1], mn);\n        }\n        cnt[i][1] = mn;\n    }\n    // total profit, transiction time\n    return {dp[n][0], cnt[n][0]};\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; k;\n\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    auto [p, t] = cal(0);\n    if (k &gt; (n / 2) || k &gt;= t) {\n        cout &lt;&lt; p &lt;&lt; '\\n';\n        return 0;\n    }\n    int l = 0, r = 100000000;\n    while (l &lt; r) {\n        int mid = (l + r) / 2;\n        if (cal(mid).S &lt;= k) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n\n    cout &lt;&lt; cal(l).F + k * l &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"dp/aliens/#cf-125e","title":"CF 125E","text":"K \u5ea6\u9650\u5236\u751f\u6210\u6a39 CF 125 E. MST Company <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u9023\u901a\u5716\uff0c\u627e\u6700\u5c0f\u751f\u6210\u6a39\u6eff\u8db3\u8207\u9ede \\(1\\) \u7684\u5ea6\u6578\u8981\u6070\u70ba \\(k\\)\uff0c\u5370\u51fa\u6a39\u4e0a\u7684\u908a\uff0c\u6216\u7121\u89e3</p> <p>\\(n,k\\le 5000,m\\le 10^5,w_i\\le 10^5\\)</p> \u601d\u8def <p>\u6839\u64da Aliens \u512a\u5316\uff0c\u6211\u5011\u5c07\u8ddf\u9ede \\(1\\) \u9023\u63a5\u7684\u908a\u7684\u908a\u6b0a\u90fd\u52a0\u4e0a\u4e00\u500b\u6b0a\u503c \\(w\\)\uff0c\u4e8c\u5206\u641c\u53bb\u903c\u8fd1\u9019\u500b \\(w\\)\uff0c\u5176\u4e2d \\(w\\) \u53ef\u4ee5\u6b63\u6216\u8ca0\u4e14\u53ef\u70ba\u5c0f\u6578</p> <p>\u4e8c\u5206\u641c\u51fa\u4f86\u7684 w\uff0c\u8981\u5982\u4f55\u9078\u624d\u80fd\u9078\u6070\u597d k \u689d\u908a\u5462 ? \u9078\u6eff\u4e86\u8207 1 \u76f8\u9023\u7684\u908a\u5230 k \u689d\u4ee5\u5f8c\uff0c\u5c31\u4e0d\u5728\u628a\u8207 1 \u76f8\u9023\u7684\u908a\u52a0\u5165\u3002</p> code <pre><code>#include&lt;bits/stdc++.h&gt;\n#define maxn 5500\n#define maxm 100100\n#define INF (1&lt;&lt;30)\n#define PI acos(-1.0)\n#define mem(a, b) memset(a, b, sizeof(a))\n#define For(i, n) for (int i = 0; i &lt; n; i++)\ntypedef long long ll;\nusing namespace std;\nint n, m, k, x[maxm], y[maxm], w[maxm], p[maxm], f[maxn];\nint cnt, ans[maxn], inx;\ndouble l, r, mid;\nbool inline cmp(int i, int j) {\n    return (x[i] == 1) * mid + w[i] &lt; (x[j] == 1) * mid + w[j];\n}\nint findroot(int x) {\n    return f[x] = (f[x] == x ? f[x] : findroot(f[x]));\n}\nvoid work(bool flag) {\n    cnt = inx = 0;\n    for (int i = 1; i &lt;= n; i++) f[i] = i;\n    sort(p + 1, p + m + 1, cmp);\n    for (int i = 1; i &lt;= m; i++) {\n        int j = p[i];\n        int u = findroot(x[j]), v = findroot(y[j]);\n        if (u != v &amp;&amp; (cnt + (x[j] == 1) &lt;= k || flag)) {\n            f[u] = v;\n            ans[inx++] = j;\n            if (x[j] == 1) cnt++;\n        }\n    }\n}\nint main () {\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k);\n    int tot = 0;\n    for (int i = 1; i &lt;= m; i++) {\n        scanf(\"%d%d%d\", x + i, y + i, w + i);\n        p[i] = i;\n        if (x[i] &gt; y[i]) swap(x[i], y[i]);\n        if (x[i] == 1) tot++;\n    }\n    //\u5982\u679c\u6839\u8282\u70b9\u7684\u5ea6\u6570\u5c0f\u4e8ek\uff0c\u6216\u8005\u7ed3\u70b9\u6570\u5927\u4e8e1\uff0c\u800ck == 0 \u4e00\u5b9a\u4e0d\u884c\n    if (tot &lt; k || (n &gt; 1 &amp;&amp; k == 0)) {\n        puts(\"-1\");\n        return 0;\n    }\n    //\u770b\u80fd\u5426\u751f\u6210\u4e00\u68f5\u6811\n    mid = 0;\n    work(1);\n    if (inx + 1 &lt; n) {\n        puts(\"-1\");\n        return 0;\n    }\n    l = -1e5, r = 1e5;\n    while(l + 1e-5 &lt; r &amp;&amp; cnt != k) {\n        mid = (l + r) / 2;\n        work(1);\n        if (cnt &lt; k) r = mid;\n        else l = mid;\n    }\n    work(0);\n    printf(\"%d\\n\", inx);\n    for (int i = 0; i &lt; inx - 1; i++) printf(\"%d \", ans[i]);\n    if (inx) printf(\"%d\\n\", ans[inx - 1]);\n}\n\n/*\n5 6 3\n3 2 5\n4 5 5\n1 3 5\n1 2 5\n1 4 5\n1 5 5\n\n*/\n</code></pre>"},{"location":"dp/aliens/#_1","title":"\u76f8\u95dc","text":"<ul> <li>https://www.luogu.com.cn/problem/P1484</li> </ul>"},{"location":"dp/bitmask/","title":"\u72c0\u58d3dp","text":"<p>\u72c0\u614b\u58d3\u7e2e dp\uff0c\u82f1\u6587\u7a31 bitmask dp\uff0c\u4f7f\u7528\u4e8c\u9032\u4f4d\u4f86\u8868\u793a\u72c0\u614b\uff0c\u4f86\u9054\u5230\u985e\u4f3c\u66b4\u529b\u679a\u8209\u7684\u6548\u679c</p>"},{"location":"dp/bitmask/#_1","title":"\u679a\u8209\u5b50\u96c6\u7684\u5b50\u96c6","text":"code <pre><code>for (int mask = 0; mask &lt; (1 &lt;&lt; n); mask++) {\n    // \u7d66\u4e00\u500b mask\uff0c\u679a\u8209\u4ed6\u7684\u6240\u6709\u5b50\u96c6\u5408\n    for (int S = mask; S; S = (S - 1) &amp; mask) {\n        // TODO\n    }\n}\n</code></pre>"},{"location":"dp/bitmask/#_2","title":"\u984c\u76ee","text":"Atcoder DP Contest O - Matching <p>\u6709 \\(n\\) \u500b\u7537\u751f\u548c\u5973\u751f\uff0c\u7b2c \\(i\\) \u500b\u7537\u751f\u8207\u7b2c \\(j\\) \u7684\u5973\u751f\u662f\u5426\u80fd\u914d\u5c0d\u53d6\u6c7a\u65bc \\(a_{i,j}=\\{ 0, 1 \\}\\)\u3002\u554f\u6709\u5e7e\u7a2e\u65b9\u6cd5\u80fd\u7522\u751f \\(n\\) \u7d44\u914d\u5c0d</p> <p>\\(1\\le n\\le 21\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u4f9d\u7167 1, 2, ..., n \u7684\u9806\u5e8f\u8b93\u7537\u751f\u914d\u5c0d\uff0c\u5973\u751f\u5247\u7528\u679a\u8209 mask</p> <p>dp(S) = \u76ee\u524d\u5df2\u5c07\u7537\u751f [1, |S|] \u8207\u5973\u751f\u7684\u96c6\u5408 S \u914d\u5c0d</p> <p>\u8f49\u79fb dp(S) = dp(S ^ (1 &lt;&lt; i)) | a[|S|][i] == 1</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int M = 1e9 + 7;\nconst int maxn = 21;\nint n;\nint a[maxn][maxn];\nint dp[1 &lt;&lt; maxn];\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            cin &gt;&gt; a[i][j];\n        }\n    }\n    dp[0] = 1;\n    for (int mask = 1; mask &lt; (1 &lt;&lt; n); mask++) {\n        int now = __builtin_popcount(mask) - 1; \n        for (int i = 0; i &lt; n; i++) {\n            if ((mask &amp; (1 &lt;&lt; i) &amp;&amp; a[now][i])) {\n                dp[mask] += dp[mask ^ (1 &lt;&lt; i)];\n                dp[mask] %= M;\n            }\n        }\n    }\n    cout &lt;&lt; dp[(1 &lt;&lt; n) - 1];\n}\n</code></pre> CSES - Elevator Rides <p>\u6709 \\(n\\) \u500b\u4eba\uff0c\u7b2c \\(i\\) \u500b\u4eba\u7684\u91cd\u91cf\u70ba \\(w_i\\)\u3002\u7d66 \\(x\\)\uff0c\u6bcf\u6b21\u53ef\u4ee5\u79fb\u9664\u4e00\u500b\u91cd\u91cf\u548c \\(\\le x\\) \u7684\u96c6\u5408\uff0c\u554f\u6700\u5c11\u79fb\u9664\u5e7e\u6b21\u624d\u80fd\u5c07 \\(n\\) \u500b\u4eba\u90fd\u79fb\u9664</p> <p>\\(n\\le 20, 1\\le w_i \\le x \\le 10^9\\)</p> \u601d\u8def <p>\u5982\u679c\u679a\u8209\u5b50\u96c6\u7684\u5b50\u96c6\u6703\u9700\u8981 3^n\uff0cTLE</p> <p>\u4ee4 dp(S) \u70ba S \u5167\u7684\u4eba\u90fd\u5df2\u7d93\u79fb\u9664\u7684\u6700\u5c0f\u6b21\u6578\uff0cf(S) \u5728\u79fb\u9664\u6b21\u6578\u70ba dp(S) \u4e0b\uff0c\u6700\u5f8c\u4e00\u6b21\u79fb\u9664\u7684\u6700\u5c0f\u91cd\u91cf\u548c\u70ba\u591a\u5c11</p> <p>dp(S) = dp(S ^ (1 &lt;&lt; i)) + (f(S ^ (1 &lt;&lt; i)) + w[i] &gt; x)</p> <ul> <li> <p>f(S ^ (1 &lt;&lt; i)) + w[i] &gt; x</p> <ul> <li> <p>dp(S) = dp(S ^ (1 &lt;&lt; i)) + 1</p> </li> <li> <p>f(S) = f(S ^ (1 &lt;&lt; i)) + w[i] - x</p> </li> </ul> </li> <li> <p>f(S ^ (1 &lt;&lt; i)) + w[i] &lt;= x</p> <ul> <li> <p>dp(S) = dp(S ^ (1 &lt;&lt; i))</p> </li> <li> <p>f(S) = f(S ^ (1 &lt;&lt; i)) + w[i]</p> </li> </ul> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 2e18;\nconst int MAXN = 1 &lt;&lt; 22;\nint n, x;\nint w[MAXN], dp[MAXN], t[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; x;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; w[i];\n    }\n\n    dp[0] = 1;\n    t[0] = 0;\n    for (int mask = 1; mask &lt; (1 &lt;&lt; n); mask++) {\n        dp[mask] = INF;\n        t[mask] = INF;\n        for (int i = 0; i &lt; n; i++) {\n            if (mask &amp; (1 &lt;&lt; i)) {\n                int S = mask ^ (1 &lt;&lt; i);\n                if (w[i] + t[S] &lt;= x) {\n                    if (dp[S] &lt; dp[mask] || (dp[S] == dp[mask] &amp;&amp; t[S] + w[i] &lt; t[mask])) {\n                        t[mask] = t[S] + w[i];\n                        dp[mask] = dp[S];\n                    }\n                } else {\n                    if (dp[S] + 1 &lt; dp[mask] || (dp[S] + 1 == dp[mask] &amp;&amp; t[S] + w[i] &lt; t[mask])) {\n                        t[mask] = w[i];\n                        dp[mask] = dp[S] + 1;\n                    }\n                }\n            }\n        }\n    }\n    cout &lt;&lt; dp[(1 &lt;&lt; n) - 1] &lt;&lt; \"\\n\";\n}\n</code></pre> TIOJ 1418 . \u4ea4\u5927\u90fd\u662f\u96f7 <p>\u6709 3n \u500b\u4eba\uff0c\u7d66\u5b9a\u5006\u5006\u4e4b\u9593\u82e5\u5728\u540c\u7d44\u7684\u7f70\u5206\u3002\u554f\u5c07\u4ee5 3 \u500b\u70ba\u4e00\u7d44\uff0c\u5206\u6210 n \u7d44\u7684\u6700\u5c11\u7e3d\u7f70\u5206</p> <p>\\(1\\le n\\le 7\\)</p> \u601d\u8def <p>\u6bcf\u6b21\u679a\u8209 mask \u88e1\u9762\u7684 3 \u500b\u5143\u7d20 i, j, k \u505a\u8f49\u79fb\uff0c\u800c i \u5176\u5be6\u53ea\u8981\u679a\u8209\u4e00\u6b21\u5c31\u597d\uff0c\u56e0\u70ba\u4ed6\u7121\u8ad6\u5982\u4f55\u90fd\u8981\u914d\u5c0d\uff0c\u65e9\u665a\u4e0d\u662f\u554f\u984c</p> <p>\u6ce8\u610f: \u9700\u8981\u4f7f\u7528 Top down\uff0c\u56e0\u70ba Bottom up \u6703\u8dd1\u5230\u5f88\u591a\u6c92\u7528\u7684\u72c0\u614b</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nint n, v[22][22];\nstring s;\nint dp[1 &lt;&lt; 22];\n\nint cost(int a, int b, int c) {\n    int ret = v[a][b] + v[a][c] + v[b][c];\n    return ret;\n}\n\nint solve(int mask) {\n    if (dp[mask] &gt; -1) return dp[mask];\n    if (!mask) return 0;\n    int mn = 1e9;\n    for (int i = 0; i &lt; n; i++) {\n        if (!((1 &lt;&lt; i) &amp; mask)) continue;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (!((1 &lt;&lt; j) &amp; mask)) continue;\n            for (int k = j + 1; k &lt; n; k++) {\n                if (!((1 &lt;&lt; k) &amp; mask)) continue;\n                mn = min(mn, solve(mask ^ (1 &lt;&lt; i) ^ (1 &lt;&lt; j) ^ (1 &lt;&lt; k)) + cost(i, j, k));\n            }\n        }\n        break;\n    }\n    return dp[mask] = mn;\n}\n\nsigned main() {\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        cin &gt;&gt; n;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                cin &gt;&gt; v[i][j];\n            }\n        }\n        for (int i = 0; i &lt; (1 &lt;&lt; n); i++) {\n            dp[i] = -1;\n        }\n        cout &lt;&lt; solve((1 &lt;&lt; n) - 1) &lt;&lt; \"\\n\";\n    }\n}\n</code></pre> TIOJ 1014. \u6253\u5730\u9f20 <p>\u6709 \\(n\\) \u500b\u5730\u9f20\uff0c\u5206\u5225\u5728\u9ede \\(1\\) \u5230 \\(n\\)\u3002\u5730\u9f20 \\(i\\) \u6bcf \\(t_i\\) \u79d2\u6703\u51fa\u73fe\u4e00\u6b21\uff0c\u73a9\u5bb6\u5f9e \\(0\\) \u51fa\u767c\uff0c\u6bcf\u79d2\u53ef\u4ee5\u79fb\u52d5\u4e00\u683c\uff0c\u554f\u6253\u5b8c\u6240\u6709\u5730\u9f20\u6240\u9700\u7684\u6700\u5c11\u79d2\u6578</p> <p>\\(n \\leq 16\\)</p> \u601d\u8def <p>dp(S, i) = \u6253\u5b8c\u96c6\u5408 S \u5167\u7684\u5730\u9f20\uff0c\u76ee\u524d\u5728\u4f4d\u7f6e i</p> <p>dp(S, i) = dp(j, S ^ (1 &lt;&lt; i)) + cost(j, i)</p> <p>cost(j, i) \u5be6\u5247\u662f\u8981\u5c07 dp(S, i) \u8a2d\u70ba dp(j, S ^ (1 &lt;&lt; i)) + |i - j| \u4e0b\u4e00\u6b21 t[i] \u51fa\u73fe\u7684\u6642\u5019\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5217\u51fa</p> <p>dp(S, i) = ceil(dp(j, S ^ (1 &lt;&lt; i)) + |i - j|, t[i]) * t[i]</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = (1LL &lt;&lt; 60);\nint dp[(1 &lt;&lt; 16)][17], t[17];\n\nint iceil(int a, int b){\n    if(b &lt; 0) a *= -1, b *= -1;\n    if(a &gt; 0) return (a + b - 1) / b;\n    else return a / b;\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; t[i];\n    }\n    memset(dp, 0x3f, sizeof(dp));\n\n    dp[0][0] = 1;\n    for (int mask = 1; mask &lt; (1 &lt;&lt; n); mask++) {\n        for (int i = 0; i &lt; n; i++) {\n            if (mask &amp; (1 &lt;&lt; i) == 0) continue;\n            for (int j = 0; j &lt; n; j++) {\n                int time = dp[mask ^ (1 &lt;&lt; i)][j] + abs(j - i);\n                dp[mask][i] = min(dp[mask][i], iceil(time, t[i]) * t[i]);\n            }\n        }\n    }\n    int ans = INF;\n    for (int i = 0; i &lt; n; i++) {\n        ans = min(ans, dp[(1 &lt;&lt; n) - 1][i]);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> LeetCode 698. Partition to K Equal Sum Subsets <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 a\uff0c\u554f\u80fd\u4e0d\u80fd\u5206\u6210 k \u7d44\uff0c\u4f7f\u5f97\u6bcf\u7d44\u7684\u7e3d\u548c\u76f8\u540c</p> <p>\\(1\\le k\\le n\\le 16, 0\\le a_i\\le 10^4\\)</p> \u601d\u8def <p>\u5148\u770b target = a[0], ..., a[n - 1] \u662f\u5426\u7b26\u5408 target % k == 0\uff0c\u4e0d\u662f\u7684\u8a71\u76f4\u63a5 return\uff0c\u662f\u7684\u8a71\u518d\u5c07 target /= k</p> <p>dp(S) = S \u662f\u5426\u80fd\u5206\u6210\u597d\u5e7e\u7d44\uff0c\u6bcf\u7d44\u7684 sum \u90fd\u662f target</p> <p>dp(S) = dp(S ^ U) | (sum[U] == target)</p> <p>\u8907\u96dc\u5ea6 O(3^n)\uff0c\u5176\u5be6\u6211\u5011\u5728\u9810\u8655\u7406 sum[U] \u53ef\u4ee5\u505a\u5230 O(2^n)\uff0c\u5c31\u662f\u5229\u7528 </p> <p> sum[U] = sum[U - lowbit(U)] + a[__builtin_ctz(lowbit(mask))] </p> code <pre><code>#define lowbit(x) (x &amp; (-x))\nclass Solution {\n   public:\n    bool canPartitionKSubsets(vector&lt;int&gt;&amp; a, int k) {\n        int n = a.size();\n        int tar = 0;\n        for (auto ele : a) tar += ele;\n        if (tar % k) return 0;\n        tar /= k;\n        vector&lt;int&gt; sum(1 &lt;&lt; n);\n        for (int mask = 1; mask &lt; (1 &lt;&lt; n); mask++) {\n            int idx = __builtin_ctz(lowbit(mask));\n            sum[mask] = sum[mask - lowbit(mask)] + a[idx];\n        }\n        vector&lt;int&gt; dp(1 &lt;&lt; n);\n        dp[0] = true;\n        for (int mask = 1; mask &lt; (1 &lt;&lt; n); mask++) {\n            for (int s = mask; s &gt; 0; s = (s - 1) &amp; mask) {\n                if (sum[s] == tar &amp;&amp; dp[mask ^ s]) {\n                    dp[mask] = true;\n                    break;\n                }\n            }\n        }\n        return dp[(1 &lt;&lt; n) - 1];\n    }\n};\n</code></pre> CF 1886 E - I Wanna be the Team Leader <p>\u6709 \\(m\\) \u500b projects\uff0c\u96e3\u5ea6\u5206\u5225\u70ba \\(b_1, \\ldots ,b_m\\)\uff0c\u6709 \\(n\\) \u500b\u4eba\uff0c\u6297\u58d3\u7a0b\u5ea6\u5206\u5225\u70ba \\(a_1, \\ldots ,a_n\\)\u3002\u73fe\u5728\u9700\u8981\u5206\u7d44\uff0c\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6 :</p> <ul> <li>\u4f7f\u6bcf\u500b project \u81f3\u5c11\u6709\u4e00\u500b\u4eba\u505a</li> <li>\u6bcf\u500b\u4eba\u81f3\u591a\u8ca0\u8cac\u4e00\u500b project</li> <li>\u4ee4\u8ca0\u8cac\u7b2c \\(j\\) \u500b project \u7684\u4eba\u6709 \\(k\\) \u500b\uff0c\u5247\u9019\u4e9b \\(a_i\\) \u9808\u6eff\u8db3 \\(a_i\\le\\frac{b_j}{k}\\)</li> </ul> <p>\\(n\\le 2\\times 10^5, m\\le 20,1\\le a_i, b_i\\le 10^9\\)</p> \u601d\u8def <p>\u8003\u616e\u5c07\u5e8f\u5217 \\(a\\) \u5927\u5230\u5c0f sort\uff0c\u6bcf\u500b \\(b_i\\) \u6311\u7684\u5c31\u6703\u662f\u4e00\u500b prefix\uff0c\u56e0\u70ba\u5982\u679c\u4e0d\u662f\u4e00\u500b prefix\uff0c\u90a3\u5c0d\u65bc\u6700\u5f8c\u9762\u7684\u90a3\u683c\u6211\u5011\u53ea\u5728\u610f\u524d\u9762\u9078\u7684\u6578\u91cf\uff0c\u56e0\u6b64\u53ef\u5c07\u5012\u6578\u7b2c\u4e8c\u683c\u8207\u524d\u9762\u7684\u67d0\u500b\u7684 \\(b_i\\) swap\uff0c\u9084\u53ef\u4ee5\u8b93\u5176\u4ed6 \\(b_i\\) \u6311\u7684 \\(a_i\\) \u7684\u6700\u5c0f\u503c\u8b8a\u5927\uff0c\u4e00\u76f4\u9019\u6a23\u505a\u5c31\u6703\u8b8a\u597d\u5e7e\u500b\u9023\u7e8c\u5340\u6bb5\u3002\u90a3\u554f\u984c\u5c31\u53ef\u4ee5\u7528 bitmask dp \u89e3\u6c7a\uff0c\\(dp[S]\\) \u4ee3\u8868 \\(S\\) \u76ee\u524d prefix \u9078\u5230\u54ea\u88e1\u53ef\u4f7f \\(S\\) \u5167\u7684 \\(b_i\\) \u90fd\u6eff\u8db3\u689d\u4ef6\uff0c\u8f49\u79fb\u7684\u8a71\u679a\u8209\u4e0d\u5728 \\(S\\) \u5167\u7684 \\(j\\)\uff0c\u770b \\(j\\) \u8981\u5ef6\u4f38\u5230\u54ea\u88e1\uff0c\u6211\u5011\u4ee4 \\(j\\) \u652f\u914d\u7684\u5340\u6bb5\u70ba  \\([dp[S]+1,dp[S\\cup j]]\\)\uff0c\\(dp[S\\cup j]=nxt(j,dp[S])\\)\u3002\\(nxt(j,i)\\) \u4ee3\u8868 \\(b_j\\) \u5f9e \\(i\\) \u958b\u59cb\u5f80\u53f3\u9078\u6700\u5c11\u9078\u5230\u54ea\u88e1\u5373\u53ef\u4f7f \\(b_j\\) \u6eff\u8db3\u689d\u4ef6\u3002</p>"},{"location":"dp/bitmask/#graph-coloring-problem","title":"Graph coloring problem","text":"<p>\u6700\u5c0f\u9ede\u8457\u8272\u3001 k \u9ede\u8457\u8272\uff0c\u90fd\u662f NP-complete \u554f\u984c</p> \u56db\u8272\u5b9a\u7406 <p>\u5e73\u9762\u5716\u4e00\u5b9a\u53ef\u4ee5\u56db\u8457\u8272\uff0cP \u554f\u984c\uff0c\u6709\u8457 O(N\u00b2) \u6f14\u7b97\u6cd5\uff0c\u4f46\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u4e09\u8457\u8272\u3002\u8a73\u898b Wiki \u6216 \u6f14\u7b97\u6cd5\u7b46\u8a18</p> k-Vertex Coloring <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u554f\u662f\u5426\u80fd \\(k\\)-coloring\uff0c\u4f7f\u6bcf\u689d\u908a\u5169\u7aef\u7684\u984f\u8272\u90fd\u4e0d\u540c</p> \u601d\u8def <p>k = 2</p> <p>\u4e8c\u5206\u5716\u5224\u65b7</p> <p>k = 3</p> <p>\\(O(m\\times 2^n)\\) \u5217\u8209\u7b2c\u4e00\u7a2e\u7368\u7acb\u96c6\uff0c\u5269\u4e0b\u7684\u4e8c\u5206\u5716</p> <p>k = 4</p> <p>\u4ee4 \\(dp(S)=S\\) \u662f\u5426\u53ef\u4ee5 2-colors \u4e0a\u8272\uff0c\u5efa\u8868\u8907\u96dc\u5ea6 \\(O(m\\times 2^n)\\)\u3002\u5217\u8209 \\(S\\) \u4f7f\u5f97 \\(dp(S)\\) \u8ddf \\(dp(V\\setminus S)\\) \u90fd\u8981\u662f true</p> Minimum Vertex Coloring  / Chromatic Number <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u554f\u6700\u5c11\u5857\u5e7e\u7a2e\u984f\u8272\u53ef\u4f7f\u6bcf\u689d\u908a\u5169\u7aef\u7684\u984f\u8272\u90fd\u4e0d\u540c</p> \u601d\u8def <p>\u4ee4 \\(dp(S)=S\\) \u6700\u5c11\u591a\u5c11 coloring\uff0c\u8f49\u79fb\u5f0f</p> \\[ dp(S)=\\min\\limits_{T\\in S} \\{ dp(S \\setminus T) + 1 \\} \\] <p>\u5176\u4e2d \\(T\\) \u8981\u662f\u7368\u7acb\u96c6\uff0c\u8907\u96dc\u5ea6 \\(O(3^n)\\)</p>"},{"location":"dp/convex_hull_trick/","title":"\u659c\u7387\u512a\u5316","text":"<p>\u898b https://drive.google.com/file/d/1w4Lnxy5OuNN1rJ8nz9nBqakPGhS40g6B/view</p> <p></p>"},{"location":"dp/convex_hull_trick/#_1","title":"\u4ecb\u7d39","text":"<p>\u659c\u7387\u6700\u4f73\u5316\u662f\u4e00\u985e\u5229\u7528\u6c7a\u7b56\u55ae\u8abf\u6027\u4f86\u6700\u4f73\u5316DP\u8f49\u79fb\u7684\u6700\u4f73\u5316\u65b9\u5f0f\u3002\u56e0\u70ba\u5176\u539f\u7406\u4e2d\u4e00\u90e8\u5206\u5f62\u4f3c\u659c\u7387\uff0c\u6545\u540d\u70ba\u659c\u7387\u6700\u4f73\u5316\u3002\u80fd\u7528\u659c\u7387\u512a\u5316\u7684\u984c\u76ee\u7684\u8f49\u79fb\u5f0f\u4e00\u822c\u4f86\u8aaa\u5982\u4e0b\uff1a</p> \\[\\large dp(i)=\\max\\limits_{0\\le j &lt; i} \\{ a(j) \\times f(i) + b(j) \\}\\] <p>\u8f49\u79fb \\(dp(i)\\) \u6642\u60f3\u50cf\u6210\u4e8c\u7dad\u5e73\u9762\u4e0a\u6709\u4e00\u5806\u76f4\u7dda \\(y = a(j) \\times x + b(j)\\)\u3002\u8981\u627e\u5230\u9019\u4e9b\u76f4\u7dda\u548c \\(x = f(i)\\) \u7684\u6240\u6709\u4ea4\u9ede\u4e2d\uff0c\\(y\\) \u5ea7\u6a19\u6700\u5927\u7684\u6578\u503c\u3002</p> <p></p> <p>\u89c0\u5bdf\u9019\u4e9b\u76f4\u7dda\u53ef\u4ee5\u767c\u73fe\uff0c\u9019\u4e9b\u76f4\u7dda\u6240\u5f62\u6210\u7684\u4e0b\u51f8\u5305\uff0c\u6703\u662f\u8f49\u79fb\u7b54\u6848\u7684\u4f4d\u7f6e\u3002\u6709\u4e9b\u7dda\u6bb5\uff08\u865b\u7dda\uff09\u4e0d\u5728\u4e0b\u51f8\u5305\u7684\u4e0a\uff0c\u53ef\u4ee5\u5f9e\u8f49\u79fb\u540d\u55ae\u4e0a\u6dd8\u6c70\u3002</p> <p></p> <p>\u7dad\u8b77\u9019\u500b\u51f8\u5305\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u67e5\u8a62\u5728 \\(x = f(i)\\)\uff0c\u6700\u5927\u7684\u503c\u662f\u591a\u5c11\u3002\u6240\u4ee5\u6211\u5011\u8981\u89e3\u6c7a\u7684\u554f\u984c\u5c31\u662f</p> <ol> <li> <p>\u5982\u4f55\u5feb\u901f\u67e5\u8a62\u51f8\u5305</p> </li> <li> <p>\u52a0\u5165\u65b0\u76f4\u7dda\u5f8c\u5982\u4f55\u7dad\u8b77\u9019\u500b\u51f8\u5305</p> </li> </ol> <p>\u4ee5\u4e0b\uff0c\u6211\u5011\u91dd\u5c0d\u659c\u7387\u8207\u67e5\u8a62\u7684\u55ae\u8abf\u6027\u5206\u5225\u8a0e\u8ad6\u5e7e\u7a2e\u60c5\u6cc1\u7684\u8655\u7406\u65b9\u5f0f\u3002</p>"},{"location":"dp/convex_hull_trick/#_2","title":"\u659c\u7387\u8207\u67e5\u8a62\u55ae\u8abf","text":"<ul> <li> <p>\u6027\u8cea 1 : \u51fd\u6578 \\(a\\) \u55ae\u8abf\u905e\u589e</p> </li> <li> <p>\u6027\u8cea 2 : \u8a62\u554f\u7684 \\(x = f(i)\\) \u6703\u8d8a\u4f86\u8d8a\u5927</p> </li> </ul>"},{"location":"dp/convex_hull_trick/#_3","title":"\u52a0\u5165\u65b0\u76f4\u7dda","text":"<p>\\(L_1\\) \u8868\u793a\u7576\u524d\u659c\u7387\u6b21\u5927\u7684\u76f4\u7dda\uff0c\\(L_2\\) \u8868\u793a\u7576\u524d\u659c\u7387\u6b21\u5927\u7684\u76f4\u7dda\uff0c\\(L_3\\) \u8868\u793a\u7576\u524d\u8981\u52a0\u5165\u7684\u76f4\u7dda\uff0c\u6709 \\(L_1.a \\le L_2.a \\le L_3.a\\)\u3002</p> <p></p> <p>\u53ef\u4ee5\u89c0\u5bdf\u5230\u82e5 \\(L_2,L_3\\) \u7684\u4ea4\u9ede\uff08\u7d05\u8272\uff09\u5728  \\(L_1,L_2\\) \u7684\u4ea4\u9ede\uff08\u85cd\u8272\uff09\u7684\u5de6\u5074\uff0c\\(L_2\\) \u5c07\u6703\u88ab\u522a\u6389\u3002\u5be6\u4f5c\u4e0a\u4f7f\u7528\u4e00\u500b deque \u6309\u7167\u659c\u7387\u5c0f\u5230\u5927\u5132\u5b58\u5728\u51f8\u5305\u4e0a\u7684\u76f4\u7dda\uff0c\u52a0\u5165\u65b0\u76f4\u7dda\u6642\u67e5\u770b deque \u5c3e\u7aef\u76f4\u7dda\u662f\u5426\u6703\u88ab\u6dd8\u6c70\u3002</p> <p></p> <p>\u5982\u679c\u4e0a\u9762\u7684\u5716\u7247\u9084\u662f\u7121\u6cd5\u7406\u89e3\uff0c\u9019\u88e1\u662f\u7db2\u8def\u4e0a\u7684\u52d5\u5716\u3002\u5c07\u5f0f\u5b50\u5217\u51fa\u4f86\u5f8c\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u5beb\u51fa check\\((L_1,L_2,L_3)\\) \u7684\u4ee3\u78bc :</p> code <pre><code>bool check(Line l1, Line l2, Line l3) {\n    return (l2.b - l1.b) * (l2.a - l3.a) &gt;= (l3.b - l2.b) * (l1.a - l2.a);\n}\n</code></pre>"},{"location":"dp/convex_hull_trick/#x-fi","title":"\u67e5\u8a62 x = f(i)","text":"<p>\u6211\u5011\u5f9e deque \u7684 front \u6bcf\u6b21\u770b\u6700\u524d\u9762\u7684\u5169\u689d\u7dda\uff0c\u82e5\u767c\u73fe\u4ee3\u5165\u659c\u7387\u5927\uff08\u85cd\u8272\uff09\u7684\u6703\u6bd4\u4ee3\u5165\u659c\u7387\u5c0f\uff08\u7d05\u8272\uff09\u7684\u9084\u5927\u4ee3\u8868\u8981\u5f80\u53f3\uff0c\u5426\u5247\u5de6\u908a\u7684\u5c31\u662f\u7b54\u6848</p> <p></p> <p>\u56e0\u70ba\u8a62\u554f\u7684\u4f4d\u7f6e \\(x\\) \u53ea\u6703\u8d8a\u4f86\u8d8a\u5927\uff0c\u56e0\u6b64\u88ab\u6dd8\u6c70\u7684\u76f4\u7dda\u5fc5\u4e0d\u6703\u662f\u5f8c\u9762\u7684\u8a62\u554f\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5 pop_front \u76f4\u5230\u5c6c\u65bc\u627e\u5230\u7576\u524d\u4ee3\u5165 \\(x=f(i)\\) \u6700\u5927\u7684\u90a3\u689d\u7dda</p>"},{"location":"dp/convex_hull_trick/#_4","title":"\u7e3d\u7d50","text":"<p>\u7dad\u8b77\u4e00\u500b <code>deque&lt;pair&lt;int, int&gt;&gt;</code> \u4ee3\u8868\u76f4\u7dda\u7684 (a, b)\u3002\u5148\u627e x = f(i) \u7684\u7b54\u6848 dp(i)\uff0c\u6240\u4ee5\u6211\u5011\u4e00\u76f4\u53bb\u5224\u65b7\u6700\u524d\u9762\u7684\u503c\u662f\u5426\u70ba\u6700\u5927\u503c \uff08\u548c\u7b2c\u4e8c\u500b\u6bd4\u8f03\uff09\uff0c\u82e5\u4e0d\u662f\u5247\u6301\u7e8c pop_front\u3002\u7136\u5f8c\u5373\u53ef\u6c42\u51fa\u7576\u524d\u65b0\u76f4\u7dda\u7684 a, b\u3002\u7136\u5f8c\u6211\u5011\u5c31\u8981\u52a0\u5165\u9019\u689d\u65b0\u76f4\u7dda\uff0c\u7528 check\\((L_1,L_2,L_3)\\) \u4e00\u76f4\u53bb\u5224\u65b7\u5c3e\u7aef\u76f4\u7dda\u662f\u5426\u8981\u88ab pop_back\u3002\u67b6\u69cb\u7b49\u50f9\u65bc\u55ae\u8abf\u968a\u5217\uff0c\u8f49\u79fb\u7e3d\u8907\u96dc\u5ea6\u5747\u6524\u70ba \\(O(n)\\)\u3002\u5be6\u4f5c\u898b\u4e0b\u9762 CSES Monster Game I \u7684 code\u3002</p> \u7576\u659c\u7387\u4e00\u6a23\u6642\uff0c\u6703\u767c\u751f\u4ec0\u9ebc\u4e8b? <p> </p> <p>\u82e5\u659c\u7387\u76f8\u540c\u6642\uff0cb \u8f03\u5927\u7684\u61c9\u8a72\u8981\u7559\u4e0b\u4f86\uff0cb \u8f03\u5c0f\u7684\u9700\u88ab\u6dd8\u6c70\u3002\u56e0\u6b64\u6211\u4e0b\u9762\u7684\u5beb\u6cd5\u7576\u65b0\u7684\u7dda\u52a0\u5165\u5f8c\uff0c\u6703\u5148\u7279\u5224\u659c\u7387\u662f\u5426\u8207 deque \u7684\u5c3e\u7aef\u76f8\u540c\uff0c\u662f\u7684\u8a71\u5c31\u53ea\u7559\u4e0b b \u5927\u7684\u3002\u4f46\u5728 CSES - Monster Game I \u9019\u984c\u5f88\u591a\u4eba\u662f\u6c92\u6709\u7279\u5224\u7684\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u78bc\u4f86\u770b\u662f\u5426\u6dd8\u6c70\u5c3e\u7aef\uff1a</p> <pre><code>bool check(Line l1, Line l2, Line l3) {\n    return (l3.b - l2.b) * (l1.a - l2.a) &lt;= (l2.b - l1.b) * (l2.a - l3.a);\n}\n</code></pre> <p>\u9019\u500b\u5f0f\u5b50\u662f\u5c07\u6211\u5011\u7684\u4e0d\u7b49\u5f0f\u79fb\u5411\u5f97\u5230\u7684\uff0c\u4f46\u6ce8\u610f\u5230\u4efb\u5169\u689d\u76f4\u7dda\u659c\u7387\u76f8\u540c\u6642\uff0c\u6211\u5011\u672a\u79fb\u5411\u7684\u4e0d\u7b49\u5f0f\u7684\u5206\u6bcd\u6703\u662f 0\uff0c\u90a3\u79fb\u5411\u5f8c\u662f\u5426\u9084\u5177\u6709\u6b63\u78ba\u6027?</p> <p> </p> <p>\u6211\u5011\u5c31\u5206\u4e09\u7a2e\u60c5\u6cc1\u8a0e\u8ad6 \\(L_1, L_2\\) \u659c\u7387\u76f8\u540c\uff0c\\(L_2, L_3\\) \u659c\u7387\u76f8\u540c\uff0c\\(L_1, L_2, L_3\\) \u659c\u7387\u76f8\u540c\u3002\u524d\u5169\u7a2e\u60c5\u6cc1\u6211\u5011\u6703\u767c\u73fe\uff0c\u79fb\u5411\u904e\u5f8c\u7684\u5f0f\u5b50\u5176\u4e2d\u4e00\u5074\u8b8a\u70ba 0\uff0c\u6240\u4ee5\u95dc\u9375\u662f\u5728\u53e6\u4e00\u5074\uff0c\u4e5f\u5c31\u662f\u770b\u5169\u689d\u7dda\u7684\u7bc0\u8ddd\u662f\u6b63\u662f\u8ca0\u3002\u4ee5 \\(L_2, L_3\\) \u659c\u7387\u76f8\u540c\u4f86\u8aaa\uff0c\u53f3\u5074\u6703\u8b8a\u70ba 0\uff0c\u6240\u4ee5\u53ea\u5269\u4e0b (l3.b - l2.b) * (l1.a - l2.a) &lt;= 0\uff0c\u53c8 (l1.a - l2.a) \u5fc5\u70ba\u8ca0\u6578\uff0c\u6240\u4ee5\u4e0d\u7b49\u5f0f\u7684\u6210\u7acb\u4e00\u5207\u53d6\u6c7a\u65bc (l3.b - l2.b) \u7684\u6b63\u8ca0\u6027\u3002\u800c\u4e09\u689d\u7dda\u659c\u7387\u90fd\u76f8\u540c\u60c5\u6cc1\u6211\u5011\u7684\u5f0f\u5b50\u4e00\u5b9a\u90fd\u662f 0 &lt;= 0\uff0c\u6240\u4ee5\u6703\u6210\u7acb\uff0c\u9019\u6642\u82e5 l1.b, l2.b, l3.b \u975e\u905e\u589e\u7684\u8a71\uff0c\u7dad\u8b77\u5c31\u6703\u51fa\u73fe\u554f\u984c\u3002\u4f46\u5728 CSES - Monster Game I \u5167\uff0cb = dp(j)\uff0c\u6070\u597d dp(j) \u53c8\u662f\u55ae\u8abf\u905e\u589e\u7684\uff08\u9019\u662f\u56e0\u70ba s \u905e\u589e\uff09\uff0c\u56e0\u6b64\u624d\u6703 AC\uff0c\u82e5\u4eca\u5929 b \u6c92\u6709\u9650\u5236\u7684\u8a71\u5c31\u6703\u51fa\u554f\u984c\u3002</p> <p>\u7e3d\u7d50\u4f86\u8aaa\uff0c\u628a\u659c\u7387\u76f8\u540c\u7684\u60c5\u6cc1\u7279\u5224\u6389\u662f\u6bd4\u8f03\u5b89\u5168\u7684\u8655\u7406\u65b9\u5f0f\u3002</p>"},{"location":"dp/convex_hull_trick/#_5","title":"\u984c\u76ee","text":"CSES - Monster Game I <p>\u7d66 \\(n\\) \u500b\u602a\u7378\uff0c\u4f60\u5fc5\u9808\u6253\u6557\u7b2c \\(n\\) \u96bb\u602a\u7378\u624d\u80fd\u8d0f\u3002\u6253\u6557\u7b2c \\(i\\) \u96bb\u602a\u7378\u6703\u82b1 \\(s_i\\times f_j\\) \u7684\u6642\u9593\uff0c\u5176\u4e2d \\(j\\) \u70ba\u4f60\u4e0a\u6b21\u6253\u6557\u7684\u602a\u7378\u7684\u7de8\u865f\uff0c\u5982\u679c\u6c92\u6709\u4e0a\u4e00\u96bb\uff0c\u5247 \\(f_j=x\\)\u3002\u6700\u5c11\u82b1\u591a\u5c11\u6642\u9593\u53ef\u4ee5\u8d0f</p> <p>\\(n\\le 2\\times 10^5,1\\le x\\le 10^6,1 \\le s_1 \\le \\dots \\le s_n \\le 10^6,x \\ge f_1 \\ge \\dots \\ge f_n \\ge 1\\)</p> \u601d\u8def \\[dp(i)=\\min \\limits_{0\\le j &lt; i} \\{f_j\\times s_i + dp(j) \\}\\] <p>\u6211\u5011\u53ef\u4ee5\u5c07\u5f0f\u5b50\u6539\u6210 :</p> \\[dp(i)=\\max \\limits_{0\\le j &lt; i} \\{(-f_j)\\times s_i + dp(j) \\}\\] <p>\u9019\u6a23\u5c31\u8b8a\u6210\u4e0a\u9762\u6a19\u6e96\u659c\u7387\u512a\u5316\u7684\u8f49\u79fb\u5f0f\u4e86\uff0c\\(a=-f_j,b=dp(j)\\)\uff0c\u6700\u5f8c\u7684\u7b54\u6848\u8a18\u5f97\u662f \\(-dp[n]\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\nusing namespace std;\n\nint n;\nint dp[200005], f[200005], s[200005];\n\nstruct Line {\n    int a, b;\n\n    int get_value(int x) {\n        return a * x + b;\n    }\n};\n\nbool check(Line l1, Line l2, Line l3) {\n    return (l2.b - l1.b) * (l2.a - l3.a) &gt;= (l3.b - l2.b) * (l1.a - l2.a);\n}\n\nvoid solve() {\n    deque&lt;Line&gt; dq;\n    dq.pb({f[0], dp[0]});\n    for (int i = 1; i &lt;= n; i++) {\n        // \u522a\u6389\u904e\u671f\u7684\u76f4\u7dda\n        while (dq.size() &gt;= 2 &amp;&amp; dq[0].get_value(s[i]) &lt; dq[1].get_value(s[i])) {\n            dq.pop_front();\n        }\n\n        dp[i] = dq[0].get_value(s[i]);\n        Line l = {f[i], dp[i]};\n        // \u52a0\u5165\u65b0\u7684\u76f4\u7dda, \u4e26\u4e14\u6aa2\u67e5\u6703\u4e0d\u6703\u628a\u820a\u7684\u76f4\u7dda\u7d66\u84cb\u4f4f\n        while (dq.size() &gt;= 2 &amp;&amp; check(dq[dq.size() - 2], dq.back(), l)) {\n            dq.pop_back();\n        }\n        dq.push_back(l);\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; f[0];\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; s[i];\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; f[i];\n    for (int i = 0; i &lt;= n; i++)\n        f[i] = -f[i];\n    solve();\n    cout &lt;&lt; -dp[n] &lt;&lt; '\\n';\n}\n</code></pre> TOI 2022 \u4e8c\u6a21 pD. rectangle <p>\u7d66\u4f60 \\(N\\) \u500b\u77e9\u5f62\uff0c\u7b2c \\(i\\) \u500b\u500b\u77e9\u5f62\u6709\u53c3\u6578\u9ad8 \\(H_i\\)\u3001\u5bec \\(W_i\\)\u3001\u4eae\u5ea6 \\(D_i\\)\u3001\u6210\u672c\u53c3\u6578 \\(C_i ,F_i\\)\u3002  </p> <p>\u5176\u4e2d \\(H\\) \u662f\u55ae\u8abf\u905e\u589e\u7684\uff0c\u8986\u84cb \\([L ,R]\\) \u7684\u77e9\u5f62\u9700\u8981\u6210\u672c</p> \\[C_R \\frac{\\sum_{i = L}^{R}D_iW_i}{\\sum_{i = L}^{R}W_i}\\sum_{i = L}^{R}W_i + F_R\\] <p>\u554f\u6700\u5c0f\u8986\u84cb\u6210\u672c\u3002  </p> <p>\\(1 \\leq N \\leq 2 \\times 10^5, 1 \\leq W_i, H_i \\leq 10^6, -16 \\leq D_i \\leq 16 , -10^6 \\leq C_i , F_i \\leq 10^6\\) </p> \u5410\u9214\u6a5f 2 <p>\u6709 \\(N\\) \u53f0\u6a5f\u5668\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u53f0\u6703\u5728\u6642\u9593 \\(D_i\\) \u62cd\u8ce3\uff0c\u50f9\u683c\u70ba \\(P_i\\)\uff0c\u6b64\u6a5f\u5668\u6bcf\u5929\u6703\u751f\u7522 \\(G_i\\) \u5143\uff0c\u4e14\u5c07\u9019\u53f0\u6a5f\u5668\u8f49\u8ce3\u53ef\u5f97 \\(R_i\\) \u5143\uff0c\u4e00\u500b\u6642\u9593\u53ea\u80fd\u64c1\u6709\u4e00\u53f0\u6a5f\u5668\uff0c\u4f60\u4e00\u958b\u59cb\u6709 \\(C_i\\) \u5143\uff0c\u6c42\u5728\u7b2c \\(D\\) \u5929\u5f8c\u4f60\u6700\u591a\u53ef\u4ee5\u8cfa\u9032\u591a\u5c11\u9322</p> <p>\\(N\\le 10^5,D\\le 10^9\\)</p>"},{"location":"dp/convex_hull_trick/#_6","title":"\u8b8a\u5316 : \u659c\u7387\u6703\u904e\u671f","text":"<p>\u82e5 \\(L_2,L_3\\) \u7684\u4ea4\u9ede\u5728 \\(L_1,L_2\\) \u7684\u4ea4\u9ede\u7684\u5de6\u5074\uff0c\u4e14 \\(L_1\\) \u904e\u671f\u53f3\u754c\u5728 \\(L_2,L_3\\) \u7684\u53f3\u5074\uff0c\\(L_2\\) \u5c07\u6703\u88ab\u522a\u6389</p>"},{"location":"dp/convex_hull_trick/#_7","title":"\u8b8a\u5316 : \u7f3a\u5c11\u67e5\u8a62\u55ae\u8abf","text":"<ul> <li> <p>\u6027\u8cea 1 : \u51fd\u6578 a \u55ae\u8abf\u905e\u589e</p> </li> <li> <p>\u6027\u8cea 2 : \u8a62\u554f\u7684 x = f(i) \u6703\u8d8a\u4f86\u8d8a\u5927</p> </li> </ul> <p>\u4e8c\u5206\u641c \\(x=f(i)\\)</p> code <pre><code>struct Line {  // ax+b;\n    int a;\n    int b;\n\n    int get_value(int x) const {\n        return a * x + b;\n    }\n};\n\nlong double intersection_x(Line f, Line g) {\n    // a1 x + b1 = a2 x + b2\n    // x = (b2-b1) / (a1-a2)\n    return 1.0 * (g.b - f.b) / (f.a - g.a);\n}\n\nstruct LineContainer {\n    vector&lt;Line&gt; lines;\n\n    bool ok(Line f, Line g, Line h) {\n        // \u5224\u65b7 f, g \u7684\u4ea4\u9ede\u662f\u5426\u5728 f,h \u7684\u4ea4\u9ede\u5de6\u908a\n        return intersection_x(f, g) &lt; intersection_x(g, h);\n    }\n\n    void insert(Line l) {\n        // \u5047\u8a2d insert \u7684\u659c\u7387\u905e\u589e\n        int m = lines.size();\n        if (m &gt;= 1 &amp;&amp; lines[m - 1].a == l.a) {\n            if (lines[m - 1].b &gt;= l.b) return;\n            lines.pop_back();\n            m--;\n        }\n\n        while (m &gt;= 2 &amp;&amp; !ok(lines[m - 2], lines[m - 1], l)) {\n            lines.pop_back();\n            m--;\n        }\n        lines.push_back(l);\n    }\n    int get_max(int x) {\n        // \u627e\u5230\u7b2c\u4e00\u689d\u76f4\u7dda lines[i]\n        // lines[i] \u548c lines[i+1] \u7684\u4ea4\u9ede\u5927\u65bc\u7b49\u65bc x\n        int m = lines.size();\n        if (m == 1) {\n            return lines[0].get_value(x);\n        }\n        int l = 0, r = m - 2;\n        while (l != r) {\n            int mid = (l + r) / 2;\n            int p = intersection_x(lines[mid], lines[mid + 1]);\n            if (p &gt;= x) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return max(lines[r].get_value(x), lines[m - 1].get_value(x));\n    }\n};\n</code></pre>"},{"location":"dp/convex_hull_trick/#_8","title":"\u4e0d\u5177\u55ae\u8abf\u6027","text":"<ul> <li> <p>\u6027\u8cea 1 : \u51fd\u6578 a \u55ae\u8abf\u905e\u589e</p> </li> <li> <p>\u6027\u8cea 2 : \u8a62\u554f\u7684 x = f(i) \u6703\u8d8a\u4f86\u8d8a\u5927</p> </li> </ul>"},{"location":"dp/convex_hull_trick/#_9","title":"\u52d5\u614b\u51f8\u5305","text":""},{"location":"dp/convex_hull_trick/#_10","title":"\u52a0\u5165\u65b0\u76f4\u7dda","text":"<p>\u7528\u4e00\u500b set \u7dad\u8b77\u7576\u524d\u5728\u51f8\u5305\u4e0a\u7684\u76f4\u7dda\uff0c\u6309\u7167\u659c\u7387\u7531\u5c0f\u5230\u5927\u5132\u5b58\uff0c\u7576\u8981\u65b0\u589e\u4e00\u689d\u65b0\u7684\u76f4\u7dda\u6642\uff0c\u5148\u76f4\u63a5\u653e\u5165 set \u5167\uff0c\u548c\u4f4d\u65bc\u8a72\u76f4\u7dda\u524d\u5f8c\u7684\u76f4\u7dda\u7528 check \u5224\u65b7\u9700\u4e0d\u9700\u8981\u88ab pop \u6389\u3002\u6bcf\u689d\u76f4\u7dda\u6700\u591a\u9032\u53bb\u548c\u51fa\u4f86 set \u4e00\u6b21\uff0c\u6bcf\u6b21\u82b1\u8cbb \\(O(\\log n)\\) \u7684\u6642\u9593\u7dad\u8b77\uff0c\u8f49\u79fb\u7e3d\u8907\u96dc\u5ea6\u70ba \\(O(n\\log n)\\)\u3002</p>"},{"location":"dp/convex_hull_trick/#x-fi_1","title":"\u67e5\u8a62 x = f(i)","text":"<p>\u76f4\u63a5\u4e8c\u5206\u641c \\(x=f(i)\\)</p> code <pre><code>struct Line {  // ax+b;\n    int a;\n    int b;\n\n    int get_value(int x) const {\n        return a * x + b;\n    }\n};\n\nlong double intersection_x(Line f, Line g) {\n    // a1 x + b1 = a2 x + b2\n    // x = (b2-b1) / (a1-a2)\n    return 1.0 * (g.b - f.b) / (f.a - g.a);\n}\n\nstruct LineContainer {\n    vector&lt;Line&gt; lines;\n\n    bool ok(Line f, Line g, Line h) {\n        // \u5224\u65b7 f, g \u7684\u4ea4\u9ede\u662f\u5426\u5728 f,h \u7684\u4ea4\u9ede\u5de6\u908a\n        return intersection_x(f, g) &lt; intersection_x(g, h);\n    }\n\n    void insert(Line l) {\n        // \u5047\u8a2d insert \u7684\u659c\u7387\u905e\u589e\n        int m = lines.size();\n        if (m &gt;= 1 &amp;&amp; lines[m - 1].a == l.a) {\n            if (lines[m - 1].b &gt;= l.b) return;\n            lines.pop_back();\n            m--;\n        }\n\n        while (m &gt;= 2 &amp;&amp; !ok(lines[m - 2], lines[m - 1], l)) {\n            lines.pop_back();\n            m--;\n        }\n        lines.push_back(l);\n    }\n    int get_max(int x) {\n        // \u627e\u5230\u7b2c\u4e00\u689d\u76f4\u7dda lines[i]\n        // lines[i] \u548c lines[i+1] \u7684\u4ea4\u9ede\u5927\u65bc\u7b49\u65bc x\n        int m = lines.size();\n        if (m == 1) {\n            return lines[0].get_value(x);\n        }\n        int l = 0, r = m - 2;\n        while (l != r) {\n            int mid = (l + r) / 2;\n            int p = intersection_x(lines[mid], lines[mid + 1]);\n            if (p &gt;= x) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return max(lines[r].get_value(x), lines[m - 1].get_value(x));\n    }\n};\n</code></pre>"},{"location":"dp/convex_hull_trick/#_11","title":"\u984c\u76ee","text":"CSES - Monster Game II <p>\u7d66 \\(n\\) \u500b\u602a\u7378\uff0c\u4f60\u5fc5\u9808\u6253\u6557\u7b2c \\(n\\) \u96bb\u602a\u7378\u624d\u80fd\u8d0f\u3002\u6253\u6557\u7b2c \\(i\\) \u96bb\u602a\u7378\u6703\u82b1 \\(s_i\\times f_j\\) \u7684\u6642\u9593\uff0c\u5176\u4e2d \\(j\\) \u70ba\u4f60\u4e0a\u6b21\u6253\u6557\u7684\u602a\u7378\u7684\u7de8\u865f\uff0c\u5982\u679c\u6c92\u6709\u4e0a\u4e00\u96bb\uff0c\u5247 \\(f_j=x\\)\u3002\u6700\u5c11\u82b1\u591a\u5c11\u6642\u9593\u53ef\u4ee5\u8d0f</p> <p>\\(n\\le 2\\times 10^5,1\\le x\\le 10^6,1\\le s_i,f_i\\le 10^6\\)</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n#define int long long\n\nstruct Line {\n    int a, b;\n    int operator()(int x) const {\n        return a * x + b;\n    }\n};\n\nstruct LineContainer {\n    static constexpr int LIMIT = 1e6;\n    static constexpr int SIZE = LIMIT * 4;\n    static const int INF = 1e18;\n\n    vector&lt;int&gt; lo = vector&lt;int&gt;(SIZE);\n    vector&lt;int&gt; hi = vector&lt;int&gt;(SIZE);\n    vector&lt;Line&gt; seg = vector&lt;Line&gt;(SIZE, {0, INF});\n\n    void build(int i = 1, int l = 1, int r = LIMIT) {\n        lo[i] = l;\n        hi[i] = r;\n        if (l == r) return;\n        int mid = (l + r) / 2;\n        build(2 * i, l, mid);\n        build(2 * i + 1, mid + 1, r);\n    }\n    void insert(Line L, int i = 1) {\n        int l = lo[i], r = hi[i];\n        if (l == r) {\n            if (L(l) &lt; seg[i](l)) seg[i] = L;\n            return;\n        }\n\n        int mid = (l + r) / 2;\n        if (seg[i].a &lt; L.a) swap(seg[i], L);\n        if (seg[i](mid) &gt; L(mid)) {\n            swap(seg[i], L);\n            insert(L, 2 * i);\n        } else {\n            insert(L, 2 * i + 1);\n        }\n    }\n    int query(int x, int i = 1) {\n        int l = lo[i], r = hi[i];\n        if (l == r) return seg[i](x);\n\n        int mid = (l + r) / 2;\n        if (x &lt;= mid) {\n            return min(seg[i](x), query(x, 2 * i));\n        } else {\n            return min(seg[i](x), query(x, 2 * i + 1));\n        }\n    }\n};\n\nint solve(int n, int x, const vector&lt;int&gt; &amp;s, const vector&lt;int&gt; &amp;f) {\n    LineContainer ds;\n    ds.build();\n    ds.insert({x, 0});\n    for (int i = 0; i &lt; n - 1; i++) {\n        int v = ds.query(s[i]);\n        ds.insert({f[i], v});\n    }\n    return ds.query(s[n - 1]);\n}\n\nsigned main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    int n, X;\n    cin &gt;&gt; n &gt;&gt; X;\n\n    vector&lt;int&gt; s(n), f(n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; s[i];\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; f[i];\n\n    int ans = solve(n, X, s, f);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u6d1b\u8c37 P4097. \u6a21\u677f\u3011\u674e\u8d85\u7ebf\u6bb5\u6811 / [HEOI2013] Segment <p>\u6709 \\(n\\) \u500b\u77f3\u982d\uff0c\u7b2c \\(i\\) \u500b\u77f3\u982d\u7684\u9ad8\u5ea6\u662f \\(h_i\\)\uff0c\u76ee\u6a19\u5f9e\u7b2c 1 \u500b\u77f3\u982d\u8df3\u5230\u7b2c n \u500b\u77f3\u982d\u3002\u82e5\u73fe\u5728\u4f4d\u65bc\u7b2c \\(j\\) \u500b\u77f3\u982d\uff0c\u53ef\u4ee5\u8df3\u5230\u4efb\u4f55\u4e00\u500b\u7de8\u865f\u5927\u65bc \\(j\\)\u7684\u77f3\u982d \\(i\\)\uff0c\u4f46\u9700\u8981\u82b1\u8cbb \\((h_i-h_j)^2 + c\\)\u80fd\u91cf\u3002\u8acb\u554f\u6700\u5c11\u9700\u8981\u82b1\u8cbb\u5c11\u80fd\u91cf\u624d\u80fd\u5230\u9054\u77f3\u982d \\(n\\) ?</p>"},{"location":"dp/digit_dp/","title":"\u6578\u4f4ddp","text":"CSES - Counting Numbers <p>\u6c42\u51fa [a, b] \u4e2d\u76f8\u9130\u5169\u4f4d\u6c92\u6709\u76f8\u540c digit \u7684\u6578\u5b57\u500b\u6578</p> <p>\\(0\\le a \\le b \\le 10^{18}\\)</p> <p>\u5148\u89c0\u5bdf\uff0c\u7b54\u6848\u5176\u5be6\u5c31\u662f [0, b] \u5408\u6cd5\u7684\u6578\u91cf\u6e1b\u6389 [0, a - 1] \u5408\u6cd5\u7684\u6578\u91cf\uff0c\u6240\u4ee5\u5176\u5be6\u6211\u5011\u53ef\u4ee5\u5c07\u554f\u984c\u7c21\u5316\u70ba\u7b97 [0, n] \u5408\u6cd5\u7684\u6578\u91cf\u3002</p> <p>dfs \u5f9e\u9ad8\u4f4d\u300c\u56fa\u5b9a\u300d\u5230\u4f4e\u4f4d\uff0c\u82e5\u767c\u73fe\u4e0d\u5408\u6cd5\u5c31\u505c\u4e0b\u4f86\uff0c\u597d\u8655\u662f\u53ef\u4ee5\u8a18\u61b6\u5316\u3002\u4f8b\u5982 n = 324\uff0c\u76ee\u524d\u586b\u5230 <code>0 _ _</code> \uff0c\u82e5\u4e4b\u5f8c\u8981\u586b\u5230 <code>1 _ _</code> \u7684\u6642\u5019\u6211\u5011\u4e0d\u5fc5\u91cd\u65b0 dfs\uff0c\u56e0\u70ba <code>1 _ _</code> \u5f8c\u9762\u5169\u500b\u7a7a\u683c\u5176\u5be6\u8ddf <code>0 _ _</code> \u5f8c\u9762\u5169\u500b\u7a7a\u683c\u80fd\u586b\u7684\u4e00\u6a21\u4e00\u6a23\u3002</p> <p>\u70ba\u4e86\u66f4\u6e05\u695a\u7684\u4e86\u89e3\uff0c\u4e0b\u5716\u662f dfs \u7684\u6a39\u72c0\u5716\uff0c\u53ef\u4ee5\u767c\u73fe\u50cf\u662f\u5169\u584a\u7da0\u8272\u6240\u679a\u8209\u7684\u72c0\u614b\u662f\u4e00\u6a21\u4e00\u6a23\u7684</p> <p></p> code <pre><code>int dfs(int d, int last, bool tight, bool zero) {\n    // d: \u76ee\u524d\u6240\u8003\u616e\u7684\u4f4d\u6578\n    // last: \u4e0a\u4e00\u500b\u8dd1\u5b8c\u7684\u6578\u5b57\n    // tight: \u4e0a\u4e00\u500b\u662f\u5426\u5728\u6975\u9650\u72c0\u614b\n    // zero: \u524d\u9762\u662f\u5426\u90fd\u662f0\n    if (d == -1) return 1;\n    if (dp[d][last][tight][zero] != -1) return dp[d][last][tight][zero];\n    int ans = 0;\n    for (int i = 0; i &lt; 10; i++) {\n        if (i == last &amp;&amp; zero == false) {\n            // \u8ddf\u4e0a\u4e00\u4f4d\u7684\u6578\u5b57\u4e00\u6a23(\u4e0d\u7b26\u5408\u984c\u76ee)\n            // \u5982\u679c\u8aaa\u524d\u9762\u90fd\u662f0\u7684\u8a71\u90a3\u4f8b\u5916(\u6e1b\u5c11\u4f4d\u6578)\n            continue;\n        }\n        if (tight == true &amp;&amp; i &gt; digits[d]) {\n            // \u8d85\u904e\u6578\u5b57\u4e0a\u754c\n            continue;\n        }\n        bool is_tight = tight &amp;&amp; i == digits[d];\n        bool is_zero = zero &amp;&amp; i == 0;\n        ans += dfs(d - 1, i, is_tight, is_zero);\n    }\n    return dp[d][last][tight][zero] = ans;\n}\n</code></pre> <p>\u8907\u96dc\u5ea6\u5c31\u662f\u72c0\u614b\u6578\u91cf * \u8f49\u79fb\u6642\u9593</p>"},{"location":"dp/digit_dp/#_1","title":"\u7fd2\u984c","text":"Atcoder abc154 E - Almost Everywhere Zero <p>\u554f \\([1, n]\\) \u5167\u6709\u5e7e\u500b\u6578\u5b57\u6070\u6709 \\(k\\) \u500b\u975e 0 \u7684\u4f4d\u6578</p> <p>\\(n\\le 10^{100}, 1\\le k\\le 3\\)</p> \u601d\u8def <p>\u53ea\u8981\u8a18\u9304\u7576\u524d dfs \u5230\u6709\u5e7e\u500b\u975e 0 \u7684\u4f4d\u6578\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int M = 1e9 + 7;\nvector&lt;int&gt; num;\nint n, k;\nint dp[101][5][2];\n\nint dfs(int pos, int cnt, bool tight) {\n    if (cnt &gt; k) return 0;\n    if (dp[pos][cnt][tight]) return dp[pos][cnt][tight];\n    if (pos == n) return (cnt == k);\n    int up = (tight ? num[pos] : 9);\n    int ans = 0;\n    for (int i = 0; i &lt;= up; i++) {\n        ans += dfs(pos + 1, cnt + (i != 0), tight &amp;&amp; (i == num[pos]));\n    } \n    return dp[pos][cnt][tight] = ans;\n}\n\nsigned main() {\n    string s;\n    cin &gt;&gt; s;\n    cin &gt;&gt; k;\n    for (int i = 0; i &lt; s.size(); i++) {\n        num.push_back(s[i] - '0');\n    }\n    n = s.size();\n    cout &lt;&lt; dfs(0, 0, 1);\n}\n</code></pre> Atcoder DP Contest - Digit Sum  <p>\u554f \\([1, n]\\) \u5167\u6709\u591a\u5c11\u500b\u6578\u5b57\u6bcf\u4e00\u4f4d\u76f8\u52a0\u6070\u597d\u662f \\(d\\) \u7684\u500d\u6578</p> <p>\\(1\\le n\\le 10^{10000}, 1\\le d\\le 100\\)</p> \u601d\u8def <p>\u7dad\u8b77\u76ee\u524d\u524d\u7db4\u7e3d\u548c mod d \u7684\u7d50\u679c</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 1e18;\nconst int MOD = 1e9 + 7;\nconst int N = 1e4 + 5;\nint m;\nvector&lt;int&gt; num;\nint dp[N][105][2];\n\nint dfs(int pos, int val, bool tight) {\n    if (pos == num.size()) return (val == 0);\n    if (dp[pos][val][tight] != -1) return dp[pos][val][tight];\n    int up = (tight ? num[pos] : 9);\n    int ans = 0;\n    for (int i = 0; i &lt;= up; i++) {\n        ans += dfs(pos + 1, (val + i) % m, (i == up &amp;&amp; tight));\n        if (ans &gt;= MOD) ans %= MOD;\n    }\n    return dp[pos][val][tight] = ans;\n}\n\nsigned main() {\n    string s;\n    cin &gt;&gt; s;\n    cin &gt;&gt; m;\n    for (int i = 0; i &lt; s.size(); i++) num.push_back(s[i] - '0');\n    memset(dp, -1, sizeof(dp));\n    cout &lt;&lt; (dfs(0, 0, true) - 1 + MOD) % MOD;\n}\n</code></pre>"},{"location":"dp/grid/","title":"Grid","text":"<p>\u65b0\u5317\u5e02 111 </p> <p>\u65b0\u5317\u5e02\u770b\u932f</p> <p>ioic pretest(cses)</p> <p>whale \u81ea\u5275</p>"},{"location":"dp/knapsack/","title":"\u80cc\u5305\u554f\u984c","text":""},{"location":"dp/knapsack/#01","title":"01 \u80cc\u5305","text":"\u5728\u67d0\u4e9b\u984c\u76ee\u4e2d\uff0c\u8981\u6709\u9806\u5e8f\u7684 dp \u624d\u80fd\u8b93\u89e3\u6700\u512a <p>\u4f8b\u5982\u5728 Atcoder X. Tower\uff08\u5728 LIS \u4e3b\u984c\u7684\u984c\u76ee\u4e2d\uff09 \u5167\u6211\u5011\u7684\u7269\u54c1\u6709\u8f09\u91cd\u9650\u5236\uff0c\u6240\u4ee5\u6211\u5011\u5c07\u8f09\u91cd\u5c0f\u7684\u5148\u8f49\u79fb\uff0c\u518d\u6162\u6162\u8f49\u79fb\u8f09\u91cd\u5927\u7684\u60c5\u6cc1\uff0c\u56e0\u70ba\u5982\u679c\u6211\u5011\u4e0d\u9019\u9ebc\u505a\u5f8c\u9762\u7684\u6771\u897f\u662f\u653e\u4e0d\u4e0a\u53bb\u7684\uff0c\u4f8b\u5982\u6709\u4e00\u500b\u91cd\u91cf 2 \u8f09\u91cd 2 \u4e00\u500b\u91cd\u91cf 5 \u8f09\u91cd 5\uff0c\u82e5\u6211\u5011\u5148\u653e 5\uff0c2 \u7121\u8ad6\u5982\u4f55\u90fd\u7121\u6cd5\u5c07 5 \u5806\u5230\u81ea\u5df1\u4e0a\u9762\uff0c\u6240\u4ee5\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u53ea\u6703\u662f\u653e\u8f09\u91cd 5 \u9019\u4e00\u500b\u7269\u54c1\uff0c\u800c\u4e26\u975e 7\u3002 </p> <p>\u5728 CEOI 2018 Cloud computing\uff08\u5728\u4e0b\u65b9\u984c\u76ee\u7684 section \u4e2d\uff09\u4e2d\uff0c\u6211\u5011\u82e5\u5148\u8ce3\u51fa\u6211\u5011\u7684\u80a1\u7968\uff0c\u5728\u9019\u500b\u904e\u7a0b\u4e2d\u662f\u6c92\u6709\u8fa6\u6cd5\u8f49\u79fb\u7684\uff0c\u56e0\u70ba\u6211\u5011\u6c92\u6771\u897f\u53ef\u4ee5\u8ce3\uff0c\u5728 dp \u770b\u4f86\u5c31\u662f dp[x] = dp[x + w] + v\uff0c\u4f46\u6b64\u6642 dp[x + w] \u7684\u72c0\u614b\u90fd\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u7b97\u51fa\u4f86\u7684\u5229\u6f64\u5c31\u6703\u6bd4\u8f03\u5c0f\u3002\u9019\u5c31\u597d\u50cf\u4f60\u73fe\u5728\u5f88\u60f3\u8ce3\u51fa\u5f88\u591a\u80a1\u7968\uff0c\u4f46\u4f60\u624b\u4e0a\u4e00\u5f35\u90fd\u6c92\u6709\u7684\u6982\u5ff5\u3002</p> <p>\u4f46\u5728\u4e00\u822c\u6c92\u6709\u9650\u5236\u7684 01 \u80cc\u5305\u4e2d\uff0c\u6211\u5011\u7528\u4ec0\u9ebc\u9806\u5e8f\u53bb\u8f49\u79fb\u90fd\u662f ok \u7684\u3002</p> Atcoder DP Contest - Knapsack 1 <p>\u7d66 \\(n\\) \u7a2e\u7269\u54c1\u7684\u91cd\u91cf \\(w_i\\) \u8207\u50f9\u503c \\(v_i\\)\uff0c\u80cc\u5305\u5bb9\u91cf\u4e0a\u9650\u662f \\(W\\)\u3002\u6bcf\u7a2e\u7269\u54c1\u53ea\u6709\u4e00\u500b\u3002\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u91cd\u91cf\u7e3d\u548c\u4e0d\u8d85\u904e\u5bb9\u91cf\uff0c\u8acb\u554f\u6700\u5927\u50f9\u503c\u7e3d\u548c\u70ba\u4f55 ?</p> <p>\\(n\\le 100, 1\\le w_i \\le W\\le 10^5, 1\\le v_i \\le 10^9\\)</p> <p>\\(dp(i, j)\\) \u8868\u793a\u524d \\(i\\) \u500b\u7269\u54c1\u4e2d\uff0c\u91cd\u91cf\u7e3d\u548c\u70ba \\(j\\) \u7684\u6700\u5927\u50f9\u503c\u3002\u8f49\u79fb\u7684\u8a71\u8003\u616e\u62ff\u4e0d\u62ff\u7b2c \\(i\\) \u7a2e\u7269\u54c1</p> \\[ dp(i, j) = \\max \\{dp(i - 1, j - w_i) + v_i, dp(i-1, j) \\} \\] <p>\u521d\u59cb\u72c0\u614b\u5247\u5c07 \\(dp(0, 0) = 0, dp(0, j) = -\\infty\\)\u3002\u6700\u5f8c\uff0c\u7b54\u6848\u5c31\u662f \\(\\max\\{ dp(n, 0), dp(n, 1), \\ldots , dp(n, W) \\}\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nconst int MAXN = 105;\nconst int MAXW = 1e5 + 5;\nconst int INF = 1e9;\nint v[MAXN], w[MAXN];\nint dp[MAXN][MAXW];\n\nint main() {\n    int n, W;\n    cin &gt;&gt; n &gt;&gt; W;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; v[i] &gt;&gt; w[i];\n    }\n    dp[0][0] = 0;\n    for (int j = 1; j &lt;= W; j++) {\n        dp[0][j] = -INF;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= W; j++) {\n            dp[i][j] = dp[i - 1][j];\n            if (j &gt;= w[i]) {\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i]] + v[i]);\n            }\n        }\n    }\n    int ans = 0;\n    for (int j = 0; j &lt;= W; j++) {\n        ans = max(ans, dp[n][j]);\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre> <p>\u6ce8\u610f\u5230 \\(dp(i, j)\\) \u53ea\u6703\u5f9e \\(dp(i-1, *)\\) \u8f49\u79fb\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u6efe\u52d5\u9663\u5217\uff0c\u7d00\u9304 \\(dp(j)\\) \u5373\u53ef\u3002\u5728\u8f49\u79fb\u7684\u6642\u5019\u8981\u5f9e\u5927\u679a\u8209\u5230\u5c0f\uff0c\u9019\u6a23\u5728\u8f49\u79fb\u7684\u6642\u5019\u624d\u4e0d\u6703\u8f49\u79fb\u5230\u65b0\u7684\u72c0\u614b</p> code(\u6efe\u52d5\u9663\u5217) <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nconst int MAXN = 105;\nconst int MAXW = 1e5 + 5;\nconst int INF = 1e9;\nint v[MAXN], w[MAXN];\n\nint main() {\n    int n, W;\n    cin &gt;&gt; n &gt;&gt; W;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i] &gt;&gt; v[i];\n    }\n    vector&lt;int&gt; dp(W + 1, -INF);\n    dp[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = W; j &gt;= w[i]; j--) {\n            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);\n        }\n    }\n    int ans = 0;\n    for (int j = 0; j &lt;= W; j++) {\n        ans = max(ans, dp[j]);\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre>"},{"location":"dp/knapsack/#_1","title":"\u65b9\u6cd5\u6578","text":"code <pre><code>vector&lt;int&gt; cnt(W + 1);\nvector&lt;int&gt; dp(W + 1, -INF);\ndp[0] = 0;\ncnt[0] = 1;\nfor (int i = 1; i &lt;= n; i++) {\n    for (int j = W; j &gt;= w[i]; j--) {\n        if (dp[j] == dp[j - w[i]] + v[i]) {\n            cnt[j] += cnt[j - w[i]];\n            cnt[j] %= M;\n        } else if (dp[j - w[i]] + v[i] &gt; dp[j]) {\n            dp[j] = dp[j - w[i]] + v[i];\n            cnt[j] = cnt[j - w[i]];\n            cnt[j] %= M;\n        }\n    }\n}\n</code></pre> \u7b97\u65b9\u6cd5\u6578 CSES - Two Sets II <p>\u7d66 \\(n\\)\uff0c\u554f\u5c07 \\(\\{1, 2, \\ldots ,n \\}\\) \u5206\u6210\u5169\u500b\u7e3d\u548c\u76f8\u540c\u7684\u96c6\u5408\uff0c\u6709\u5e7e\u7a2e\u5206\u6cd5</p> <p>\\(n\\le 500\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int M = 1e9 + 7;\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; w(n + 1);\n    vector&lt;int&gt; v(n + 1);\n    int W = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        W += i;\n        w[i] = i;\n        v[i] = i;\n    }\n    if (W &amp; 1) {\n        cout &lt;&lt; 0;\n        exit(0);\n    }\n    W /= 2;\n    vector&lt;int&gt; cnt(W + 1);\n    vector&lt;int&gt; dp(W + 1, -INF);\n    dp[0] = 0;\n    cnt[0] = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = W; j &gt;= w[i]; j--) {\n            if (dp[j] == dp[j - w[i]] + v[i]) {\n                cnt[j] += cnt[j - w[i]];\n                cnt[j] %= M;\n            } else if (dp[j - w[i]] + v[i] &gt; dp[j]) {\n                dp[j] = dp[j - w[i]] + v[i];\n                cnt[j] = cnt[j - w[i]];\n                cnt[j] %= M;\n            }\n        }\n    }\n    int mx = -INF;\n    cnt[W] *= 500000004;\n    cnt[W] %= M;\n    cout &lt;&lt; cnt[W];\n}\n</code></pre>"},{"location":"dp/knapsack/#_2","title":"\u5b57\u5178\u5e8f","text":"\u5b57\u5178\u5e8f <p>\u7d66 \\(n\\) \u7a2e\u7269\u54c1\u7684\u91cd\u91cf \\(w_i\\) \u8207\u50f9\u503c \\(v_i\\)\uff0c\u80cc\u5305\u5bb9\u91cf\u4e0a\u9650\u662f \\(W\\)\u3002\u6bcf\u7a2e\u7269\u54c1\u53ea\u6709\u4e00\u500b\u3002\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u91cd\u91cf\u7e3d\u548c\u4e0d\u8d85\u904e\u5bb9\u91cf\uff0c\u8acb\u554f\u6700\u5927\u50f9\u503c\u7e3d\u548c\u70ba\u4f55\uff0c\u8f38\u51fa\u7de8\u865f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u89e3</p> <p>\\(n\\le 100, 1\\le w_i \\le W\\le 10^5, 1\\le v_i \\le 10^9\\)</p> \u601d\u8def <p>\u56e0\u70ba\u5b57\u5178\u5e8f\u9700\u8981\u5f9e\u982d\u958b\u59cb\u8003\u616e\u53cd\u904e\u4f86\u5efa dp \u8868\u683c\u5c31\u597d</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 1e3 + 5;\n\nint dp[MAXN][MAXN];\nint w[MAXN], v[MAXN];\nint n, W;\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; W;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i] &gt;&gt; v[i];\n    }\n    memset(dp, -INF, sizeof dp);\n    dp[n + 1][0] = 0;\n    int total_w, mx = 0;\n    for (int i = n; i &gt; 0; i--) {\n        for (int j = 0; j &lt;= W; j++) {\n            if (w[i] &gt; j) {\n                dp[i][j] = dp[i + 1][j];\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i + 1][j - w[i]] + v[i]);\n            }\n            if (mx &lt; dp[i][j]) {\n                mx = dp[i][j];\n                total_w = j;\n            }\n        }\n    }\n\n    cout &lt;&lt; dp[1][total_w] &lt;&lt; \"\\n\";\n    for (int i = 1; i &lt;= n; ++i) {\n        if (total_w &gt;= w[i] &amp;&amp; dp[i][total_w] == dp[i + 1][total_w - w[i]] + v[i]) {\n            cout &lt;&lt; i &lt;&lt; ' ';\n            total_w -= w[i];\n        }\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#_3","title":"\u7fd2\u984c","text":"\u8d85\u5927\u80cc\u5305 Atcoder DP Contest - Knapsack 2 <p>\u7d66 \\(n\\) \u7a2e\u7269\u54c1\u7684\u91cd\u91cf \\(w_i\\) \u8207\u50f9\u503c \\(v_i\\)\uff0c\u80cc\u5305\u5bb9\u91cf\u4e0a\u9650\u662f \\(W\\)\u3002\u6bcf\u7a2e\u7269\u54c1\u53ea\u6709\u4e00\u500b\u3002\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u91cd\u91cf\u7e3d\u548c\u4e0d\u8d85\u904e\u5bb9\u91cf\uff0c\u8acb\u554f\u6700\u5927\u50f9\u503c\u7e3d\u548c\u70ba\u4f55 ?</p> <p>\\(n\\le 100, 1\\le w_i \\le W\\le 10^9, 1\\le v_i \\le 10^3\\)</p> \u601d\u8def <p>dp(i, j) = \u53d6\u5230\u50f9\u503c j \u7684\u6700\u5c0f\u91cd\u91cf</p> <p>dp(i, j) = min{dp(i - 1, j), dp(i - 1, j - v_i) + w_i}</p> <p>\u6700\u5f8c\u7b54\u6848\u5c31\u662f min{dp(n, 0), dp(n, 1), ... , dp(n, W)}</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 1e2 + 5;\nconst int MAXV = 2e5;\nconst int INF = (1LL &lt;&lt; 60);\nint n, m;\nint w[MAXN], v[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i] &gt;&gt; v[i];\n    }\n    vector&lt;int&gt; dp(MAXV + 1, INF);\n    dp[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = MAXV; j &gt;= v[i]; j--) {\n            dp[j] = min(dp[j], dp[j - v[i]] + w[i]);\n        }\n    }\n    for (int j = MAXV; j &gt;= 0; j--) {\n        if (dp[j] &lt;= m) {\n            cout &lt;&lt; j &lt;&lt; '\\n';\n            exit(0);\n        }\n    }\n}\n</code></pre> \u8b8a\u5316: n = 40 <p>\u7d66 \\(n\\) \u7a2e\u7269\u54c1\u7684\u91cd\u91cf \\(w_i\\) \u8207\u50f9\u503c \\(v_i\\)\uff0c\u80cc\u5305\u5bb9\u91cf\u4e0a\u9650\u662f \\(W\\)\u3002\u6bcf\u7a2e\u7269\u54c1\u53ea\u6709\u4e00\u500b\u3002\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u91cd\u91cf\u7e3d\u548c\u4e0d\u8d85\u904e\u5bb9\u91cf\uff0c\u8acb\u554f\u6700\u5927\u50f9\u503c\u7e3d\u548c\u70ba\u4f55 ?</p> <p>\\(n\\le 40, 1\\le w_i \\le W\\le 10^9, 1\\le v_i \\le 10^9\\)</p> \u601d\u8def <p>\u4f7f\u7528\u6298\u534a\u679a\u8209\uff0c\u679a\u8209\u7b2c\u4e00\u500b\u96c6\u5408\u5167\u7684\u5143\u7d20\uff0c\u7528\u4e8c\u5206\u641c\u6216\u96d9\u6307\u91dd\u770b\u7b2c\u4e8c\u500b\u96c6\u5408\u5167\u5408\u6cd5\u7684\u5143\u7d20</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nusing pii = pair&lt;int, int&gt;;  // (\u91cd\u91cf, \u50f9\u503c)\n\n// A \u7684\u9577\u5ea6\u662f 2^|a|\uff0c\u5b58\u653e a \u6240\u6709\u5b50\u96c6\u5408\u7e3d\u548c\nvector&lt;pii&gt; allSubsetSum(vector&lt;pii&gt; a) {\n    int n = a.size();\n    vector&lt;pii&gt; A = {{0, 0}};\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = A.size() - 1; j &gt;= 0; j--) {\n            A.push_back({A[j].first + a[i].first, A[j].second + a[i].second});\n        }\n    }\n\n    sort(A.begin(), A.end());\n    for (int i = 1; i &lt; A.size(); i++) {\n        A[i].second = max(A[i].second, A[i - 1].second);\n        //\u4ed6\u5982\u679c\u653e\u5f97\u4e0b\u90a3\u4e5f\u4e00\u5b9a\u6709\u8fa6\u6cd5\u6539\u6210\u80fd\u6bd4\u4ed6\u91cd\u91cf\u5c0f\u7684\u50f9\u503c\n    }\n    return A;\n}\n\nint main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    int n, W;\n    vector&lt;pii&gt; a, b;\n\n    cin &gt;&gt; n &gt;&gt; W;\n    for (int i = 0; i &lt; n; i++) {\n        int w, v;\n        cin &gt;&gt; w &gt;&gt; v;\n        if (i &lt; n / 2) {\n            a.push_back({w, v});\n        } else {\n            b.push_back({w, v});\n        }\n    }\n\n    int ans = 0;  // w \u7e3d\u548c\u5c0f\u65bc\u7b49\u65bc W \u7684\u6700\u5927 v \u7e3d\u548c\n    vector&lt;pii&gt; A = allSubsetSum(a);\n    vector&lt;pii&gt; B = allSubsetSum(b);\n    for (pii x : B) {\n        auto it = upper_bound(A.begin(), A.end(), pii{W - x.first, INT_MAX});\n        if (it != A.begin()) {\n            it = prev(it);\n            ans = max(ans, x.second + it-&gt;second);\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> \u7b2c k \u5927 <p>\u7d66 \\(n\\) \u7a2e\u7269\u54c1\u7684\u91cd\u91cf \\(w_i\\) \u8207\u50f9\u503c \\(v_i\\)\uff0c\u80cc\u5305\u5bb9\u91cf\u4e0a\u9650\u662f \\(W\\)\u3002\u6bcf\u7a2e\u7269\u54c1\u53ea\u6709\u4e00\u500b\u3002\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u554f\u80fd\u6e4a\u51fa\u7b2c \\(k\\) \u5927\u7684\u50f9\u503c\u70ba\u4f55</p> <p>\\(n\\le 40, 1\\le w_i \\le W\\le 10^9, 1\\le v_i \\le 10^3\\)</p> \u601d\u8def <p>\u4e00\u6a23\u5229\u7528\u6298\u534a\u679a\u8209\uff0c\u7528\u4e8c\u5206\u641c\u6700\u5927\u7684 t\uff0c\u4f7f\u50f9\u503c &gt;= t \u7684\u6070\u6709 k \u500b\u3002\u81f3\u65bc\u8981\u600e\u9ebc\u8a08\u7b97\u50f9\u503c &gt;= t \u6709\u5e7e\u500b\u5462 ? \u679a\u8209\u7b2c\u4e00\u500b\u96c6\u5408\u5167\u7684\u5143\u7d20 (w1[i], v1[i])\uff0c\u7528\u96d9\u6307\u91dd\u7684\u65b9\u5f0f\u627e\u5230\u5728\u7b2c\u4e8c\u500b\u5143\u7d20\u5408\u6cd5\u7684\u90e8\u5206\uff0c\u5229\u7528 DS \u8a62\u554f\u50f9\u503c &gt;= t - v1[i] \u6709\u5e7e\u500b\uff0c\u53ef\u4ee5\u7528 BIT \u505a\u5230</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;long long&gt; d;\nlong long bit[1 &lt;&lt; 21];\n\nvector&lt;pair&lt;long long, long long&gt;&gt; gen_subset(vector&lt;pair&lt;int, int&gt;&gt; v) {\n    vector&lt;pair&lt;long long, long long&gt;&gt; ret;\n    for (int i = 0; i &lt; (1 &lt;&lt; v.size()); i++) {\n        long long sum_w = 0, sum_v = 0;\n        for (int j = 0; j &lt; v.size(); j++) {\n            if (i &amp; (1 &lt;&lt; j)) {\n                sum_w += v[j].first;\n                sum_v += v[j].second;\n            }\n        }\n        ret.push_back({sum_w, sum_v});\n    }\n    return ret;\n}\n\nint bit_query(int x) {\n    int ret = 0;\n    while (x) {\n        ret += bit[x];\n        x -= x &amp; (-x);\n    }\n    return ret;\n}\n\nvoid bit_update(int x) {\n    while (x &lt;= d.size()) {\n        bit[x]++;\n        x += x &amp; (-x);\n    }\n}\n\nint main() {\n    int n;\n    long long k, lim;\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; lim;\n    vector&lt;pair&lt;int, int&gt;&gt; p1, p2;\n    for (int i = 0; i &lt; n / 2; i++) {\n        long long a, b;\n        cin &gt;&gt; a &gt;&gt; b;  // weight, value\n        p1.push_back({a, b});\n    }\n    for (int i = n / 2; i &lt; n; i++) {\n        long long a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        p2.push_back({a, b});\n    }\n    vector&lt;pair&lt;long long, long long&gt;&gt; v1, v2;\n    v1 = gen_subset(p1);\n    v2 = gen_subset(p2);\n    sort(v1.begin(), v1.end()); \n    sort(v2.rbegin(), v2.rend()); \n    for (auto &amp;i : v1) {\n        d.push_back(i.second);\n    }\n    sort(d.begin(), d.end());\n    d.erase(unique(d.begin(), d.end()), d.end());\n    long long l = 0, r = 1e12;\n    while (r - l &gt; 1) {\n        long long mid = (l + r) / 2;\n        int ptr = 0;\n        long long cnt = 0;\n        memset(bit, 0, sizeof(bit));\n        for (auto &amp;i : v2) {\n            while (ptr &lt; v1.size() &amp;&amp; v1[ptr].first + i.first &lt;= lim) {\n                int idx = lower_bound(d.begin(), d.end(), v1[ptr].second) - d.begin() + 1;\n                bit_update(idx);\n                ptr++;\n            }\n            int idx = lower_bound(d.begin(), d.end(), mid - i.second) - d.begin() + 1;\n            cnt += ptr - bit_query(idx - 1);  \n        }\n        if (cnt &lt; k) {  // \u50f9\u503c &gt;= x \u7684\u65b9\u6cd5\u6578\n            r = mid;\n        } else {\n            l = mid;\n        }\n    }\n    cout &lt;&lt; l &lt;&lt; endl;\n}\n\n/*\nInput\n4 3 3\n1 2\n1 3\n1 7\n1 12\nOutput\n19\n*/\n</code></pre> Zerojudge c835. \u80cc\u5305\u554f\u984c <p>\u7d66\u4f60 \\(n\\) \u500b\u7269\u54c1\uff0c\u80cc\u5305\u91cd\u91cf\u9650\u5236\u70ba \\(2^W\\)\uff0c\u6bcf\u500b\u7269\u54c1\u7684\u91cd\u91cf\u662f \\(2^{w_i}\\)\uff0c\u50f9\u503c\u662f \\(v_i\\)\uff0c\u6c42\u80fd\u653e\u5230\u80cc\u5305\u5167\u7684\u6700\u5927\u50f9\u503c\u548c</p> \u601d\u8def <p>\u63a1\u7528 Greedy\uff0c\u6211\u5011\u53ef\u4ee5\u5f9e\u5c0f\u7684\u6b21\u65b9\u505a\u5230\u5927\u7684\u6b21\u65b9\uff0c\u5c0d\u65bc\u6bcf\u4e00\u4f4d\uff0c\u6211\u5011\u958b\u4e00\u500b Max Heap \u4f86\u8a18\u9304\u7576\u524d\u7269\u54c1\u7684\u50f9\u503c\uff0c\u7136\u5f8c\u6211\u5011\u8981\u60f3\u8fa6\u6cd5\u5f9e\u5c0f\u7684\u8b8a\u5316\u5230\u5927\u7684\uff0c\u6ce8\u610f\u5230 \\(2^{n-1}+2^{n-1} \\le 2^n\\)\uff0c\u6211\u5011\u53ef\u4ee5\u8b93 Max Heap \u5167\u50f9\u503c\u6700\u9ad8\u7684\u5169\u500b\u5408\u4f75\u6210\u4e00\u500b\u6771\u897f\uff0c\u653e\u5230\u66f4\u9ad8\u4e00\u4f4d\u7684 Heap \u5167\uff0c\u82e5\u6700\u5f8c\u9084\u5269\u4e0b\u4e00\u500b\uff0c\u5247\u55ae\u7368\u653e\u5230 Heap \u5167\u3002\u6700\u5f8c\u7b54\u6848\u5c31\u662f\u7b2c \\(W\\) \u4f4d Max Heap \u50f9\u503c\u6700\u9ad8\u7684\u6771\u897f</p> code <pre><code>void solve() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; ++i) {\n        int w, v;\n        cin &gt;&gt; w &gt;&gt; v;\n        if (w &lt;= m) {\n            pq[w].push(v);\n        }\n    }\n    for (int i = 0; i &lt; m; ++i) {\n        while(!pq[i].empty()) {\n            if(pq[i].size() == 1) {\n                pq[i + 1].push(pq[i].top());\n                break;\n            }\n            ll a = pq[i].top();\n            pq[i].pop();\n            ll b = pq[i].top();\n            pq[i].pop();\n            pq[i + 1].push(a + b);\n        }\n    }\n    cout &lt;&lt; pq[m].top() &lt;&lt; \"\\n\";\n}\n</code></pre> TOI 2008 p3. \u52a0\u6e1b\u554f\u984c <p>\u6709 \\(n\\) \u500b\u6b63\u6574\u6578 \\(a_1, \\ldots ,a_n\\)\uff0c\u5c0d\u65bc\u6bcf\u500b\u6578\u8ce6\u4e88 \\(\\texttt{+}\\) \u6216 \\(\\texttt{-}\\) \u4f7f\u5f97\u4ed6\u5011\u7e3d\u5408\u70ba \\(0\\)\uff0c\u554f\u662f\u5426\u505a\u5f97\u5230</p> <p>\u6709 \\(t\\) \u7b46\u8f38\u5165\uff0c\\(t\\le 10, n\\le 100, 1\\le a_i\\le 1000\\)</p> \u601d\u8def <p>\u4ee4 \\(\\sum a_i = s\\)\uff0c\u5c31\u53ea\u662f\u554f\u80fd\u4e0d\u80fd\u9078\u51fa \\(s/2\\) </p> \u5206\u7d44\u80cc\u5305  <p>\u7d66\u5b9a \\(n\\) \u500b\u7269\u54c1\uff0c\u80cc\u5305\u5bb9\u91cf \\(W\\)\uff0c\u7b2c \\(i\\) \u500b\u7269\u54c1\u91cd\u91cf \\(w_i\\) \uff0c\u50f9\u503c \\(v_i\\)\uff0c\u7d44\u5225\u662f \\(k_i\\)\u3002\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u6bcf\u7d44\u6700\u591a\u9078 \\(1\\) \u500b\uff0c\u5171\u6709 \\(k\\) \u7d44\uff0c\u4f7f\u5f97\u91cd\u91cf\u7e3d\u548c\u4e0d\u8d85\u904e\u5bb9\u91cf\uff0c\u8acb\u554f\u6700\u5927\u50f9\u503c\u7e3d\u548c\u70ba\u4f55 ?</p> <p>\\(n, k\\le 100, w\\le 10^5\\)</p> \u601d\u8def <p>\u4ee4 dp(i, j) = \u524d i \u7d44\u91cd\u91cf\u662f j \u53ef\u4ee5\u9078\u5230\u7684\u6700\u5927\u50f9\u503c\u7e3d\u548c</p> <p>\u8f49\u79fb\u7684\u8a71\u5c31\u679a\u8209\u7b2c i \u7d44\u88e1\u9762\u7684\u7269\u54c1\uff0c\u5047\u8a2d\u76ee\u524d\u679a\u8209\u5230 u</p> <p>dp(i, j) = max{dp(i - 1, j), dp(i - 1, j - w[u]) + v[u]}</p> <p>\u56e0\u70ba \\(\\sum \\limits_{i=1}^k a_i=n\\)\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u70ba O(nW)</p> code <pre><code>for (int i = 1; i &lt;= k; i++) {\n    for (int j = W; j &gt;= 0; j--) {\n        for (auto u : a[i]) {\n            if (j - w[u] &gt;= 0) {\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[u]] + v[u]);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"dp/knapsack/#_4","title":"\u7121\u9650\u80cc\u5305","text":"\u6d1b\u8c37 P1616 \u75af\u72c2\u7684\u91c7\u836f <p>\u7d66 \\(n\\) \u7a2e\u7269\u54c1\u7684\u91cd\u91cf \\(w_i\\) \u8207\u50f9\u503c \\(v_i\\)\uff0c\u80cc\u5305\u5bb9\u91cf\u4e0a\u9650\u662f \\(W\\)\u3002\u6bcf\u7a2e\u7269\u54c1\u53ea\u6709\u4e00\u500b\u3002\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u91cd\u91cf\u7e3d\u548c\u4e0d\u8d85\u904e\u5bb9\u91cf\uff0c\u8acb\u554f\u6700\u5927\u50f9\u503c\u7e3d\u548c\u70ba\u4f55 ?</p> <p>\\(n\\le 10^4, 1\\le n\\times W\\le 10^7, 1\\le w_i, v_i \\le 10^4\\)</p> <p>\u8ddf 01 \u80cc\u5305\u5dee\u4e0d\u591a\uff0c\u4f46\u8981\u6ce8\u610f\u5728\u8f49\u79fb\u7684\u6642\u5019\uff0c\u5c0d\u65bc \\(dp(i, j)\\) \u53d6\u5b8c\u7269\u54c1 \\(i\\) \u5f8c\u72c0\u614b\u4f9d\u7136\u6703\u505c\u7559\u5728 \\(dp(i,j-w_i)\\) \u800c\u975e \\(dp(i-1,j-w_i)\\)</p> \\[ dp(i, j) = \\max \\{dp(i, j - w_i) + v_i, dp(i-1, j) \\} \\] <p>\u6700\u5f8c\uff0c\u7b54\u6848\u5c31\u662f \\(\\max\\{ dp(n, 0), dp(n, 1), \\ldots , dp(n, W) \\}\\)\u3002</p> <p>\u5be6\u4f5c\u4e0a\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6efe\u52d5\u9663\u5217\uff0c\u4f46\u9700\u8981\u5f9e\u524d\u5f80\u5f8c\u8f49\u79fb\uff0c\u56e0\u70ba\u5f8c\u9762\u7684 dp(i, j) \u6703\u7528\u5230\u524d\u9762\u65b0\u7684\u72c0\u614b\u3002\u8907\u96dc\u5ea6 \\(O(nW)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 1e4 + 5;\nconst int INF = 1e9;\nint n, m;\nint w[MAXN], v[MAXN];\n\nsigned main() {\n    cin &gt;&gt; m &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i] &gt;&gt; v[i];\n    }\n    vector&lt;int&gt; dp(m + 1, -INF);\n    dp[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = w[i]; j &lt;= m; j++) {\n            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);\n        }\n    }\n    cout &lt;&lt; *max_element(dp.begin(), dp.end()) &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"dp/knapsack/#_5","title":"\u6709\u9650\u80cc\u5305","text":"CSES - Book Shop II <p>\u7d66 \\(n\\) \u7a2e\u7269\u54c1\u7684\u91cd\u91cf \\(w_i\\)\uff0c\u50f9\u503c \\(v_i\\)\uff0c\u6578\u91cf \\(c_i\\)\uff0c\u80cc\u5305\u5bb9\u91cf\u4e0a\u9650\u662f \\(W\\)\u3002\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u91cd\u91cf\u7e3d\u548c\u4e0d\u8d85\u904e\u5bb9\u91cf\uff0c\u8acb\u554f\u6700\u5927\u50f9\u503c\u7e3d\u548c\u70ba\u4f55 ?</p> <p>\\(n\\le 100, 1\\le W \\le 10^5, 1\\le w_i,v_i,c_i \\le 1000\\)</p> <p>\u6bcf\u500b\u7269\u54c1\u7684 \\(c_i\\) \u500b\u90fd\u7576\u6210\u4e00\u500b\u7269\u54c1\uff0c\u5957\u7528 01 \u80cc\u5305\u3002\u8907\u96dc\u5ea6 \\(O(nW\\max \\{ c_i \\})\\)</p>"},{"location":"dp/knapsack/#_6","title":"\u4e8c\u9032\u5236\u62c6\u89e3\u512a\u5316","text":"<p>\u628a c \u500b\u4e00\u6a23\u7684\u7269\u54c1\u62c6\u6210 log c \u500b\u4e0d\u540c\u7684\u7269\u54c1\uff0c\u57f7\u884c 0/1 \u80cc\u5305\u3002\u4f8b\u5982\u6709\u4e00\u7a2e\u6771\u897f\u6709 13 \u500b\uff0c13 = 1 + 2 + 4 + 6\uff0c\u6211\u5011\u5c31\u6309\u7167 1 \u500b\u30012 \u500b\u30014 \u500b\u30016 \u500b\u628a\u6771\u897f\u6253\u5305\uff0c\u8b8a\u6210 01 \u80cc\u5305\uff0c\u9019\u6a23\u6211\u5011\u5c31\u53ef\u4ee5\u7d44\u51fa\u5728 [1, 13] \u5167\u4efb\u610f\u7684\u6578\u5b57\u4e86\u3002\u8907\u96dc\u5ea6 \\(O(nW\\log  c_i)\\)</p> \u6b63\u78ba\u6027\u8b49\u660e <p>\u6211\u5011\u90fd\u77e5\u9053\uff0c\u82e5\u6211\u5011\u6709 \\(2^0, 2^1, 2^2, \\ldots ,2^n\\) \u5e7e\u500b\u6578\u5b57\uff0c\u90a3\u6211\u5011\u53ef\u4ee5\u8868\u793a \\([1, 2^{(n + 1)} - 1]\\) \u5167\u7684\u6240\u6709\u6578\u5b57\u3002\u76f8\u4f3c\u7684\uff0c\u82e5\u6211\u5011\u60f3\u8981\u6e4a\u51fa\u4e00\u500b \\(c\\) \u4ee5\u5167\u6240\u6709\u7684\u6578\u5b57\uff0c\u6211\u5011\u53ef\u4ee5\u5c07 \\(c\\) \u62c6\u89e3\u70ba \\(k\\) \u8207 \\(2^{n+1} - 1\\) \u5169\u500b\u90e8\u5206\uff0c\u4e26\u4f7f \\(n\\) \u76e1\u91cf\u5927\uff0c\u63a5\u8457 \\(2^{n+1} - 1\\) \u4fbf\u53ef\u4ee5\u62c6\u89e3\u70ba \\(2^0, 2^1, 2^2, \\ldots ,2^n\\)\u3002\u5982\u6b64\u4e00\u4f86\u6211\u5011\u5c31\u53ef\u4ee5\u6e4a\u51fa \\([1, 2^{(n + 1)} - 1]\\) \u7684\u6240\u6709\u6578\u5b57\u4ee5\u53ca \\([1+k, 2^{(n + 1)}-1+k]\\) \u7684\u6240\u6709\u6578\u5b57\uff0c\u806f\u96c6\u8d77\u4f86\uff0c\u5c31\u662f\u53ef\u4ee5\u8868\u793a \\([1, c]\\) \u7684\u6240\u6709\u6578\u5b57\u3002\u4f8b\u5982 \\(c=10\\)\uff0c\\(10=(1+2+4)+3\\)\uff0c\u4ee3\u8868\u6211\u5011\u53ef\u4ee5\u6e4a\u51fa \\([1, 7] \\cup [3, 10]\\) \u7684\u6240\u6709\u6578\u5b57\u3002\u82e5\u9700\u80cc\u5305\u4e00\u7a2e\u6578\u91cf\u6709 \\(c\\) \u500b\u7684\u7269\u54c1\uff0c\u5c31\u53ef\u4ee5\u4f9d\u7167\u4e0a\u6cd5\u5c07\u4e4b\u62c6\u70ba \\(\\log(c) + 1\\) \u5718\uff0c\u6211\u5011\u53ea\u9700\u8981\u5c07\u6bcf\u5718\u5404\u81ea\u8996\u70ba\u4e00\u500b\u65b0\u7684\u7269\u9ad4\u62ff\u53bb\u80cc\u5305\u5373\u53ef\u3002</p> <p>\u76f8\u95dc\u8b70\u984c: \u781d\u78bc\u554f\u984c</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 1e2 + 5;\nconst int MAXW = 1e5 + 5;\nconst int INF = 1e9;\nint n, m;\nint w[MAXN], v[MAXN], c[MAXN];\n\nint solve(vector&lt;pair&lt;int, int&gt;&gt; items) {\n    vector&lt;int&gt; dp(m + 1, -INF);\n    dp[0] = 0;\n    for (auto [w, v] : items) {\n        for (int j = m; j &gt;= w; j--) {\n            dp[j] = max(dp[j], dp[j - w] + v);\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; v[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; c[i];\n    }\n\n    vector&lt;pair&lt;int, int&gt;&gt; vec;\n    for (int i = 1; i &lt;= n; i++) {\n        int k = 1;\n        while (k &lt;= c[i]) {\n            vec.push_back({w[i] * k, v[i] * k});\n            c[i] -= k;\n            k *= 2;\n        }\n        if (c[i] &gt; 0) {\n            vec.push_back({w[i] * c[i], v[i] * c[i]});\n        }\n    }\n\n    cout &lt;&lt; solve(vec) &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"dp/knapsack/#_7","title":"\u55ae\u8abf\u5c0d\u5217\u512a\u5316","text":"<p>\u6211\u5011\u5148\u5217\u51fa\u8f49\u79fb\u5f0f</p> \\[ dp(i,j)=\\max \\begin{cases} dp(i-1, j) \\\\ dp(i-1, j- w) + v \\\\ dp(i-1, j-2w) + v \\\\ \\vdots \\\\ dp(i-1,j-kw)+kv\\end{cases} \\] <p>\u53ef\u4ee5\u767c\u73fe\uff0c\u5c0d\u65bc dp(i, j)\uff0c\u4ed6\u80fd\u8f49\u79fb\u7684\u9ede\u53ef\u80fd\u662f j - 2w, j - w, j\uff0c\u5c0d\u65bc dp(i, j - w)\uff0c\u4ed6\u80fd\u8f49\u79fb\u7684\u9ede\u53ef\u80fd\u662f j - 3w, j - 2w, j - w\uff0c\u6ce8\u610f\u5230\u9019\u500b\u5340\u9593\u7684\u5de6\u754c\u3001\u53f3\u754c\u6703\u96a8\u8457 j \u7684\u589e\u9577\u6301\u7e8c\u905e\u589e\uff0c\u53ef\u4ee5\u4f7f\u7528\u985e\u4f3c\u7528\u55ae\u8abf\u968a\u5217\u7dad\u8b77 Sliding Window \u7684\u6280\u5de7\u4f86\u89e3\u6c7a</p> <p></p> <p>\u6240\u4ee5\u5c0d\u65bc dp(i, *) \u4e2d j % w \u76f8\u540c\u7684\u72c0\u614b\uff0c\u6211\u5011\u90fd\u7528\u4e00\u500b\u55ae\u8abf\u968a\u5217\u4f86\u7dad\u8b77\u7b54\u6848<sup>1</sup></p> <p></p> <p>\u8907\u96dc\u5ea6\u6bcf\u500b\u72c0\u614b\u90fd\u53ea\u6703\u9032, \u51fa\u55ae\u8abf\u968a\u5217\u5404\u4e00\u6b21\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u662f O(nW)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define ALL(x) x.begin(),x.end()\nusing namespace std;\n\nconst int MAXN = 1e2 + 5;\nconst int MAXW = 1e5 + 5;\nint n, m;\nint w[MAXN], v[MAXN], c[MAXN];\nint g[MAXW], dp[MAXW];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; v[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; c[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        memcpy(g, dp, sizeof(g));\n        for (int r = 0; r &lt; w[i]; r++) {\n            deque&lt;int&gt; dq;\n            for (int j = r; j &lt;= m; j += w[i]) {\n                while (!dq.empty() &amp;&amp; g[dq.back()] + ((j - dq.back()) / w[i]) * v[i] &lt;= g[j]) {\n                    dq.pop_back();\n                }\n                dq.push_back(j);\n                dp[j] = g[dq.front()] + ((j - dq.front()) / w[i]) * v[i];\n                if (dq.front() == j - c[i] * w[i]) {\n                    dq.pop_front();\n                }\n            }\n        }\n    }\n    cout &lt;&lt; dp[m] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"dp/knapsack/#_8","title":"\u5176\u4ed6","text":""},{"location":"dp/knapsack/#_9","title":"\u5206\u6578\u80cc\u5305","text":"\u8caa\u5fc3\u6cd5\u932f\u8aa4 <p>\\(n=3,W=6\\)</p> <ul> <li> <p>\\(v_1=4,w_1=5\\)</p> </li> <li> <p>\\(v_2=3,w_2=3\\)</p> </li> <li> <p>\\(v_3=3,w_3=3\\)</p> </li> </ul> <p>\u6309\u7167 Greedy\uff0c\u5c31\u53ea\u80fd\u653e\u5165\u7b2c 1 \u500b\u7269\u54c1\uff0c\u7e3d\u50f9\u503c\u70ba \\(5\\)\uff0c\u4f46\u662f\u6700\u512a\u89e3\uff0c\u61c9\u8a72\u653e\u5165\u7b2c 2, 3 \u500b\u7269\u54c1\uff0c\u7e3d\u50f9\u503c\u70ba \\(6\\)</p> <p>\u4e4b\u6240\u4ee5\u8caa\u5fc3\u6cd5\u6703\u5931\u6548\uff0c\u539f\u56e0\u5728\u65bc\u80cc\u5305\u7684\u9ad4\u7a4d\uff0c\u512a\u5148\u9078 CP \u503c\u9ad8\u7684\u7269\u54c1\uff0c\u53ef\u80fd\u6703\u5c0e\u81f4\u4e00\u4e9b\u7a7a\u9593\u88ab\u6d6a\u8cbb\uff0c\u4ee5\u524d\u9762\u7684\u4f8b\u5b50\u4f86\u8aaa\uff0c\u5c31\u662f\u6d6a\u8cbb 2 \u55ae\u4f4d\u7684\u7a7a\u9593</p> <p>\u53cd\u904e\u4f86\u8aaa\uff0c\u4e0b\u9762\u7684\u984c\u76ee\u300c2021 \u5168\u570b\u8cfd pA. \u7926\u7802\u63a1\u96c6\u300d\u5c31\u53ef\u4ee5\u4f7f\u7528\u8caa\u5fc3\u6cd5:</p> <p>\u7269\u54c1\u53ef\u4ee5\u5207\u5272\uff0c\u63db\u53e5\u8a71\u8aaa\u5c31\u662f\u53ef\u4ee5\u53d6 0.5 \u500b\u30010.7 \u500b\u7269\u54c1\uff0c\u9019\u6a23\u4e00\u4f86\uff0c\u5c31\u6c92\u6709\u6d6a\u8cbb\u7a7a\u9593\u7684\u554f\u984c\uff0c\u800c\u53ef\u4ee5\u4f7f\u7528\u6524\u65b0\u6cd5\u4e86</p> <p>\\(n=3,W=6\\)</p> <ul> <li> <p>\\(v_1=4,w_1=5\\)</p> </li> <li> <p>\\(v_2=3,w_2=3\\)</p> </li> <li> <p>\\(v_3=3,w_3=3\\)</p> </li> </ul> <p>\u53d6 1 \u500b\u7b2c\u4e00\u4ef6\u7269\u54c1\uff0c2/3 \u500b\u7b2c\u4e8c\u4ef6\u7269\u54c1\uff0c\u7e3d\u50f9\u503c\u70ba 7</p> 2021 \u5168\u570b\u8cfd pA. \u7926\u7802\u63a1\u96c6 <p>\u7d66 \\(n\\) \u7a2e\u7269\u54c1\u7684\u91cd\u91cf \\(w_i\\) \u8207\u50f9\u503c \\(v_i\\)\uff0c\u80cc\u5305\u5bb9\u91cf\u4e0a\u9650\u662f \\(W\\)\u3002\u6bcf\u7a2e\u7269\u54c1\u53ea\u6709\u4e00\u500b\uff0c\u7269\u54c1\u53ef\u4ee5\u5207\u5272\uff0c\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u91cd\u91cf\u7e3d\u548c\u4e0d\u8d85\u904e\u5bb9\u91cf\uff0c\u8acb\u554f\u6700\u5927\u50f9\u503c\u7e3d\u548c\u70ba\u4f55 ?</p> <p>\\(n\\le 1000, 1\\le W\\le 10^5, 1\\le w_i\\le 100, 1\\le v_i \\le 1000\\)</p> \u601d\u8def <p>\u9019\u500b\u984c\u76ee\u5728 wiki \u4e0a\u53eb\u9023\u7e8c\u80cc\u5305\u554f\u984c</p> <p>\u3010\u7d50\u8ad6\u3011: \u53ea\u8981\u4e0d\u65b7 Greedy \u5730\u5c07\u55ae\u4f4d\u91cd\u91cf\u50f9\u503c\u6700\u5927\u7684\u7269\u54c1\u653e\u9032\u80cc\u5305\uff0c\u76f4\u5230\u80cc\u5305\u5df2\u6eff\u6216\u6240\u6709\u7269\u54c1\u5747\u5df2\u88ab\u653e\u5165\uff0c\u5c31\u80fd\u6700\u5927\u5316\u7e3d\u50f9\u503c\u3002</p> <p>\u4e00\u500b\u7c21\u55ae\u7684\u505a\u6cd5\u662f\u5c07\u6240\u6709\u7269\u54c1\u4f9d\u7167\u55ae\u4f4d\u91cd\u91cf\u50f9\u503c\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4f9d\u5e8f\u653e\u5165\u80cc\u5305\u76f4\u5230\u6eff\u5373\u53ef\u3002\u8907\u96dc\u5ea6\u662f \\(O(n \\log n)\\)\u3002</p> <p>\u7dda\u6027\u505a\u6cd5</p> <p>\u4ee5\u4e0b\u70ba\u4e86\u65b9\u4fbf\u8aaa\u660e\uff0c\u5047\u5b9a\u6240\u6709\u7684 \\(x_i\\) \u5747\u76f8\u7570\uff0c\u5176\u4e2d \\(x_i=v_i/w_i\\)\u3002</p> <ol> <li>\u96a8\u6a5f\u9078\u64c7\u4e00\u500b\u7926\u7802 \\(i\\)\uff0c\u4e26\u5c07\u6240\u6709\u7684\u7269\u54c1\u5206\u70ba\u55ae\u4f4d\u50f9\u503c \\(\\ge x_i\\) \u8207 \\(&lt; x_i\\) \u5169\u5806\u3002</li> <li>\u5206\u6b67\u5224\u65b7\uff1a</li> <li>\u82e5\u55ae\u4f4d\u50f9\u503c \\(\\ge x_i\\) \u7684\u7269\u54c1\u53ef\u4ee5\u585e\u6eff\u80cc\u5305\uff0c\u5247\u5c07 \\(&lt; x_i\\) \u7684\u7926\u7802\u5168\u522a\u9664\uff0c\u4e26\u5f80\u5927\u7684 \\(x\\) \u627e\u7b54\u6848\u3002</li> <li>\u53cd\u4e4b\u5247\u5c07\u50f9\u503c \\(\\ge x_i\\) \u7684\u7926\u7802\u5168\u522a\u9664\uff0c\u5f80\u5c0f\u7684 \\(x\\) \u627e\u7b54\u6848\u3002</li> <li>\u641c\u5c0b\u5b8c\u5f8c\u5f97\u5230\u7684\u503c\u4ee3\u8868\u300c\u7e3d\u50f9\u503c\u6700\u5927\u6642\uff0c\u80cc\u5305\u4e2d\u55ae\u4f4d\u91cd\u91cf\u50f9\u503c\u6700\u5c0f\u7684\u7269\u54c1\u300d\uff0c\u518d\u7528\u9019\u500b\u50f9\u503c\u53bb\u53cd\u6c42\u7b54\u6848\u3002</li> </ol> <p>\u5be6\u4f5c\u4e0a\u53ef\u4ee5\u4f7f\u7528 nth_element \u505a\u5230\uff0c\u6f14\u7b97\u6cd5\u8207 quickselect \u548c \u9019\u500b\u6280\u5de7 \u975e\u5e38\u76f8\u4f3c\uff0c\u671f\u671b\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n)\\)\u3002</p>"},{"location":"dp/knapsack/#bitset","title":"bitset","text":""},{"location":"dp/knapsack/#_10","title":"\u88dc\u5145: \u9000\u80cc\u5305","text":"\u5e36\u522a\u9664\u80cc\u5305 - \u554f\u65b9\u6cd5\u6578 <p>\u7d66\u4e00\u4e9b\u7269\u54c1\uff0c\u7b2c i \u500b\u7269\u54c1\u7684\u91cd\u91cf\u70ba w[i]\uff0c\u5206\u5225\u8f38\u51fa\u82e5\u522a\u9664\u7b2c i \u500b\u7269\u54c1\uff0c\u80fd\u6e4a\u5230\u91cd\u91cf\u70ba m \u7684\u65b9\u6848\u6578\u662f\u591a\u5c11</p> <p>\u80cc\u5305\u554f\u984c\u662f\u53ef\u9006\u7684\u3002\u9000\u80cc\u5305\u5c31\u662f\u5f9e\u6709\u9078\u7684\u7269\u54c1\u4e2d\u522a\u9664\u5176\u4e2d\u4e00\u500b\u7269\u54c1\uff0c\u554f\u6eff\u8db3\u6240\u53d6\u80fd\u6e4a\u5230\u91cd\u91cf\u70ba j \u7684\u65b9\u6848\u6578\u3002\u50cf\u4e00\u822c\u80cc\u5305\u4e00\u6a23\uff0c\u9000\u80cc\u5305\u5148\u666e\u901a dp \u4e00\u4e0b\uff0c\u7136\u5f8c\u9000\u53bb\u6240\u9078\u7269\u54c1\u3002\u8a2d f(i, j) \u70ba\u53ea\u7528\u524d i \u4ef6\u7269\u54c1\uff0c\u4e0d\u8003\u616e\u522a\u9664\u4efb\u4f55\u7269\u54c1\u6642\uff0c\u6070\u597d\u88dd\u6eff\u5bb9\u91cf\u70ba j \u7684\u65b9\u6cd5\u6578\uff0c\u8a2d g(i, j) \u70ba\u4e0d\u8003\u616e\u7269\u54c1 i\uff0c\u6070\u597d\u88dd\u6eff\u5bb9\u91cf\u70ba j \u7684\u65b9\u6cd5\u6578\u3002f(i, j) \u5c31\u7528\u666e\u901a\u7684 01 \u80cc\u5305\u8f49\u79fb\u5373\u53ef\uff0c\u800c g(i, j) \u5728\u8f49\u79fb\u6642\u5c31\u8981\u5f9e f(i, j) \u6263\u6389\u300c\u6709\u9078 i \u500b\u65b9\u6cd5\u6578\u300d\uff0c\u5982\u4e0b:</p>  g(i, j) = f(i, j) - g(i, j - w[i])  CF 1442 D. sum <p>\u7d66\u5b9a \\(n\\) \u500b\u55ae\u8abf\u4e0d\u964d\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u5f9e\u9019\u4e9b\u5e8f\u5217\u7684\u6700\u5de6\u7aef\u4f9d\u6b21\u5f80\u53f3\u53d6\uff0c\u554f\u53d6 \\(k\\) \u500b\u6578\u7684\u6700\u5927\u503c</p> <p>\\(n,k\\le 3000, 0\\le a_{i,j}\\le 10^8, \\sum |a_i| \\le 10^6\\)</p> \u601d\u8def <p>\u6709\u4e00\u500b\u5e8f\u5217\u7684\u53d6\u90e8\u5206\u5143\u7d20\uff0c\u5176\u4ed6\u5e8f\u5217\u8981\u99ac\u5168\u53d6\uff0c\u8981\u99ac\u5168\u4e0d\u53d6\u3002\u56e0\u70ba\u82e5\u90e8\u5206\u53d6\u5169\u500b\u5e8f\u5217\uff0c\u4e00\u5b9a\u53ef\u4ee5\u5c08\u6ce8\u53d6\u5176\u4e2d\u4e00\u500b\u4e00\u5b9a\u6703\u66f4\u597d\u3002\u6240\u4ee5\u554f\u984c\u5c31\u8f49\u63db\u6210 01 \u80cc\u5305\u4e86\uff0c\u6211\u5011\u53ef\u4ee5\u53bb\u679a\u8209\u54ea\u500b\u5e8f\u5217\u8981\u53d6\u4e00\u90e8\u5206\uff0c\u5269\u4e0b\u505a 01 \u80cc\u5305\uff08\u679a\u8209 i \u4ee3\u8868\u5f9e\u9019\u500b\u5e8f\u5217\u53d6 i \u500b\uff0c\u5176\u4ed6\u5e8f\u5217\u5c31\u662f\u53d6 k - i \u500b\uff0c\u53ef\u4ee5\u5f9e 01 \u80cc\u5305\u7684 dp(k - i) \u67e5\u8868\uff09\u3002\u6211\u5011\u60f3\u8fa6\u6cd5\u512a\u5316\u9019\u500b\u904e\u7a0b\uff0c\u8003\u616e\u5206\u6cbb\uff0c\u7576\u905e\u8ff4\u5230\u6bcf\u500b leaf \u5c31\u662f\u4e0d\u5305\u542b\u8a72\u9805\u7684 01 \u80cc\u5305\uff0c\u8907\u96dc\u5ea6 \\(O(nk \\log n)\\)\u3002 </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define mk make_pair\n#define pb push_back\nusing namespace std;\n\nconst int MAXN = 3e3 + 5;\nconst long long mod = 1e9 + 7;\nint n, k, ans;\nint a[MAXN][MAXN];\nint t[MAXN];\nint tot[MAXN];\nint dp[MAXN];\n\nvoid solve(int l, int r) {\n    if (l &gt; r) return;\n    if (l == r) {\n        int cur = 0;\n        for (int i = 0; i &lt;= t[l]; i++) {\n            cur += a[l][i];\n            ans = max(dp[k - i] + cur, ans);\n        }\n        return;\n    }\n    int mid = (l + r) &gt;&gt; 1;\n    vector&lt;int&gt; tmp(k + 1);\n    for (int i = 1; i &lt;= k; i++) {\n        tmp[i] = dp[i];\n    }\n    for (int i = mid + 1; i &lt;= r; i++) {\n        for (int j = k; j &gt;= t[i]; j--) {\n            dp[j] = max(dp[j], dp[j - t[i]] + tot[i]);\n        }\n    }\n    solve(l, mid);\n    for (int i = 1; i &lt;= k; i++) dp[i] = tmp[i];\n    for (int i = l; i &lt;= mid; i++) {\n        for (int j = k; j &gt;= t[i]; j--) {\n            dp[j] = max(dp[j], dp[j - t[i]] + tot[i]);\n        }\n    }\n    solve(mid + 1, r);\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; t[i];\n        int x;\n        for (int j = 1; j &lt;= t[i]; j++) {\n            if (j &lt;= k) {\n                cin &gt;&gt; a[i][j];\n            } else {\n                cin &gt;&gt; x;\n            }   \n            if (j &lt;= k) tot[i] += a[i][j];\n        }\n        if (t[i] &gt; k) t[i] = k;\n    }\n    solve(1, n);\n    cout &lt;&lt; ans;\n}\n</code></pre> \u6d1b\u8c37 P4141 \u6d88\u5931\u4e4b\u7269 <p>\u6709 \\(n\\) \u500b\u7269\u54c1\uff0c\u9ad4\u7a4d\u5206\u5225\u662f \\(w_1,w_2,\\dots,w_n\\)\u3002\u7b2c \\(i\\) \u500b\u7269\u54c1\u4e1f\u5931\u4e86\u3002</p> <p>\u300c\u8981\u4f7f\u7528\u5269\u4e0b\u7684 \\(n-1\\) \u7269\u54c1\u88dd\u6eff\u5bb9\u7a4d\u70ba \\(x\\) \u7684\u80cc\u5305\uff0c\u6709\u5e7e\u7a2e\u65b9\u6cd5\u5462 ?\u300d</p> <p>\u628a\u7b54\u6848\u8a18\u70ba \\(\\text{cnt}(i,x)\\) \uff0c\u8f38\u51fa\u6240\u6709 \\(i \\in [1,n], x \\in [1,m]\\) \u7684 \\(\\text{cnt}(i, x)\\)\u3002</p> <p>\\(n,m\\le 2\\times 10^3\\)</p> \u601d\u8def <p>\u8a2d f[i][j] \u70ba\u53ea\u7528\u524d i \u4ef6\u7269\u54c1\uff0c\u4e0d\u8003\u616e\u522a\u9664\u4efb\u4f55\u7269\u54c1\u6642\uff0c\u6070\u597d\u88dd\u6eff\u5bb9\u91cf\u70ba j \u7684\u65b9\u6cd5\u6578\uff0c\u8a2d g[i][j] \u70ba\u4e0d\u8003\u616e\u7269\u54c1 i \u7684\u8ca2\u737b\u6070\u597d\u88dd\u6eff\u5bb9\u91cf\u70ba j \u7684\u65b9\u6cd5\u6578\u3002\u6211\u5011\u5217\u51fa\u8f49\u79fb\u5f0f :</p> <p>g[i][j] = f[n][j] - g[i][j - w[i]]</p> <p>\u6b64\u6642\u7684 g[i][j - w[i]] \u6070\u597d\u522a\u9664\u4e86\u7269\u54c1 i \u7684\u8ca2\u737b</p> <p>\u53c3\u8003\u81ea : https://blog.csdn.net/qq_50332374/article/details/124864380</p> \u7d93\u5178\u9000\u80cc\u5305\u4f8b\u984c Atcoder abc321 F - #(subset sum = K) with Add and Erase <p>\u6709 q \u7b46\u64cd\u4f5c\uff0c\u7b2c i \u6b21\u6703\u65b0\u589e\u4e00\u500b\u7269\u54c1\u6216\u79fb\u9664\u4e00\u500b\u7269\u54c1\uff0c\u9ad4\u7a4d\u70ba w[i]\uff0c\u4e26\u56de\u7b54:</p> <p>\u300c\u7528\u76ee\u524d\u6240\u5269\u7684\u7269\u54c1\u88dd\u6eff\u5bb9\u91cf\u70ba x \u7684\u80cc\u5305\uff0c\u6709\u5e7e\u7a2e\u65b9\u6cd5\u5462 ?\u300d</p> <p>\\(1\\le q, x, w_i \\le 5000\\)</p> \u601d\u8def <p>\u65b0\u589e\u7269\u54c1 w: \u4e5f\u5c31\u662f\u666e\u901a\u7684\u80cc\u5305 dp\uff0c\u6211\u5011\u679a\u8209 i \u5f9e\u5927\u5230\u5c0f\uff0c\u7136\u5f8c\u5c07 dp(i) += dp(i - w)</p> <p>\u522a\u9664\u7269\u54c1 w: \u4e5f\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u9000\u80cc\u5305\uff0c\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u4e0d\u7528\u771f\u7684\u53bb\u7dad\u8b77 g(i, j)\uff0c\u53ea\u8981\u53bb\u679a\u8209 i \u5f9e\u5c0f\u5230\u5927\uff0c\u7136\u5f8c\u5c07 dp(i) -= dp(i - w)\uff0c\u56e0\u70ba\u5f9e\u5c0f\u4f5c\u5230\u5927\u7684\u8a71 dp(i - w) \u5df2\u7d93\u662f\u4e0d\u5305\u542b\u7269\u54c1 i \u7684\u65b9\u6cd5\u6578\u4e86\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 5005;\nconst int M = 998244353;\nint n, m;\nint dp[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    dp[0] = 1;\n    char op;\n    int w;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; op &gt;&gt; w;\n        if (op == '+') {\n            for (int i = m; i &gt;= w; i--) {\n                dp[i] += dp[i - w];\n                dp[i] %= M;\n            }\n        } else {\n            for (int i = w; i &lt;= m; i++) {\n                dp[i] -= dp[i - w];\n                dp[i] = (dp[i] % M + M) % M;\n            }\n        }\n        cout &lt;&lt; dp[m] &lt;&lt; endl;\n    }\n}\n</code></pre> \u8cc7\u8a0a\u4e4b\u82bd dpII - \u53ef\u56de\u6eaf\u63db\u96f6\u9322\u554f\u984c <p>\u6709 n \u7a2e\u786c\u5e63 c[1], c[2], \u2026, c[n]\uff0c\u6c42\u5c0d\u65bc\u6240\u6709\u9577\u5ea6 k \u7684\u5340\u9593\uff0c\u6e4a\u51fa m \u7684\u65b9\u6cd5\u6578\u6709\u5e7e\u7a2e\uff1f</p> <p>\u8981\u6c42 O(nm)</p> \u601d\u8def <p>\u540c Atcoder \u90a3\u984c\u7684\u9000\u80cc\u5305\uff0c\u985e\u4f3c two pointer \u7684\u65b9\u6cd5\u7dad\u8b77\u5373\u53ef\u3002</p>"},{"location":"dp/knapsack/#_11","title":"\u984c\u76ee","text":"CF 19 B. Checkout Assistant <p>\u6709 \\(n\\) \u4ef6\u7269\u54c1\uff0c\u6bcf\u4ef6\u7269\u54c1\u6709\u50f9\u683c \\(c_i\\) \u548c\u6536\u9280\u54e1\u6383\u63cf\u6642\u9593 \\(t_i\\)\uff0c\u7576\u6536\u9280\u54e1\u6383\u63cf\u7269\u54c1\u6642\uff0c\u53ef\u4ee5\u5077\u7269\u54c1\uff0c\u5077\u4e00\u4ef6\u7269\u54c1\u53ea\u9700\u4e00\u79d2\uff0c\u6c42\u6700\u5c11\u9700\u8981\u82b1\u8cbb\u591a\u5c11\u9322\uff08\u7269\u54c1\u9806\u5e8f\u53ef\u4ee5\u96a8\u610f\u6c7a\u5b9a\uff09</p> <p>\\(n\\le 2000,\\le 0\\le t_i\\le 2000,1\\le c_i\\le 10^9\\)</p> \u601d\u8def <p>\u6383\u63cf\u4e00\u4ef6\u7269\u54c1\u9700\u8981 \\(t_i\\) \u6642\u9593\uff0c\u8a00\u5916\u4e4b\u610f\u5c31\u662f\u5728\u6b64\u671f\u9593\uff0c\u6211\u5011\u53ef\u4ee5\u5077\u8d70 \\(t_i\\) \u4ef6\u7269\u54c1\uff0c\u4e5f\u5c31\u662f\u5c0d\u65bc\u7b2c \\(i\\) \u4ef6\u7269\u54c1\uff0c\u6211\u5011\u53ef\u4ee5\u5f97\u5230 \\(t_i+1\\) \u4ef6\u7269\u54c1\u3002\u554f\u984c\u5c31\u8f49\u5316\u70ba : </p> <p>\u7d66 \\(n\\) \u4ef6\u7269\u54c1\uff0c\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u91cd\u91cf\u662f \\(t_i+1\\)\uff0c\u82b1\u8cbb\u662f \\(c_i\\)\uff0c\u6c42\u81f3\u5c11\u5f97\u5230 \\(n\\) \u500b\u91cd\u91cf\u6240\u9700\u7684\u6700\u5c0f\u82b1\u8cbb\u3002</p> <p>\\(dp[i][j]=\\) \u8003\u616e\u524d \\(i\\) \u500b\u7269\u54c1\uff0c\u5f97\u5230\u91cd\u91cf\u7e3d\u5408\u70ba \\(j\\) \u6700\u5c0f\u82b1\u8cbb</p> <p>\\(dp[i][j]=\\min \\begin{cases} dp[i - 1][j] \\\\ dp[i - 1][j - (t_i + 1)] + c_i\\end{cases}\\)</p> <p>\u91cd\u91cf\u7e3d\u548c\u6700\u5927\u6709\u53ef\u80fd\u5230 \\(2n\\)\uff08\u524d\u9762\u7684 \\(\\sum (t_i+1)=n-1\\)\uff0c\u6700\u5f8c\u4f86\u4e86\u4e00\u500b \\(t_i+1=n+1\\) \u7684\uff09\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6 \\(O(n\\times 2n)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Item {\n    int t, c;\n};\n\nint n, W;\nvector&lt;Item&gt; items; \n\nvoid init() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        int t, c;\n        cin &gt;&gt; t &gt;&gt; c;\n        W = max(W, t);\n        items.pb({t, c});\n    }\n    W += n;\n}\n\nvoid solve() {\n    vector&lt;int&gt; dp(W + 1, INF);\n    dp[0] = 0;\n    for (int i = 0; i &lt; n; i++) {\n        int t = items[i].t, c = items[i].c;\n        for (int j = W; j &gt;= (t + 1); j--) {\n            dp[j] = min(dp[j], dp[j - (t + 1)] + c);\n        }\n    }\n    int mn = INF;\n    for (int j = n; j &lt;= W; j++) {\n        mn = min(mn, dp[j]);\n    }\n    cout &lt;&lt; mn &lt;&lt; '\\n';\n}\n\nsigned main() {\n    init();\n    solve();\n} \n</code></pre> Sloane's Box Stacking Problem Atcoder dp contest X. Tower <p>\u6709 \\(n\\) \u500b\u7bb1\u5b50\uff0c\u6bcf\u500b\u7bb1\u5b50\u6709 \\((w,s,v)\\) \u4ee3\u8868\u91cd\u91cf\u3001\u6297\u58d3\u91cf\u3001\u9ad8\u5ea6\u3002\u4e00\u500b\u7bb1\u5b50\u4e0a\u65b9\u7684\u91cd\u91cf\u7e3d\u548c\uff0c\u4e0d\u80fd\u8d85\u904e\u9019\u500b\u7bb1\u5b50\u7684\u6297\u58d3\u529b\u91cf\u3002\u554f\u6700\u591a\u80fd\u758a\u591a\u9ad8 ?</p> <p>\\(1\\le n\\le 10^3,1\\le w_i, s_i\\le 10^4,1\\le v_i\\le 10^9\\)</p> \u601d\u8def <p>\u8003\u616e Exchange Arguements\uff0c\u6211\u5011\u62ff\u5169\u500b\u7bb1\u5b50 \\(i\\) \u8ddf \\(j\\) \u4f86\u6bd4\u8f03\u3002\\(j\\) \u53ef\u4ee5\u653e\u6bd4\u8f03\u4e0b\u9762 iff \\(s_i - w_j &lt; s_j - w_i\\)\u3002</p> <p>\u7576\u6211\u5011\u5c07\u9663\u5217\u7528\u4e0a\u9762\u7684 Exchange Arguements sort \u597d\u5f8c\uff0c\u6211\u5011\u505a\u985e\u4f3c\u80cc\u5305\u554f\u984c\uff0c\\(dp(i,j)=\\) \u8003\u616e \\(1\\ldots i\\)\uff0c\u91cd\u91cf\u7e3d\u548c \\(\\le j\\) \u80fd\u53d6\u5230\u7684\u6700\u5927\u9ad8\u5ea6\u3002\u8f49\u79fb\u7684\u8a71\u4e00\u6a23\u8003\u616e\u53d6 \\(i\\) \u6216\u4e0d\u53d6 \\(i\\)\uff0c\u53d6 \\(i\\) \u7684\u8a71\u5269\u4e0b\u7684\u91cd\u91cf\u5c31\u5fc5\u9808 \\(\\le s_i\\)</p> \\[dp(i, j)=\\max \\begin{cases} dp(i - 1, j - w_i)+v_i \\space \\text{if}\\space 0 \\le j - w_i \\le s_i \\\\ dp(i - 1, j)\\end{cases}\\] code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1010,M = 20010;\nstruct faner {\n    int w, s, v;\n} a[N];\nll f[M], ans;\n\nbool cmp(faner a, faner b) {\n    return a.s + a.w &lt; b.s + b.w;\n}\n\nint main() {\n    int n; \n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i].w &gt;&gt; a[i].s &gt;&gt; a[i].v;\n    }\n    sort(a + 1, a + n + 1, cmp);\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = M - 1; j &gt;= a[i].w; j--) {\n            if (a[i].s + a[i].w &gt;= j) {\n                f[j] = max(f[j], f[j - a[i].w] + a[i].v);\n            }\n        }\n    }       \n    for (int i = 1; i &lt; M; i++) {\n        ans = max(ans, f[i]);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u6d1b\u8c37 P4394 \u9009\u4e3e <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u9078\u4e00\u4e9b \\(a_i\\)\uff0c\u4f7f\u5f97:</p> <ul> <li> <p>\u6709\u9078\u7684 \\(a_i\\) \u7e3d\u548c \\(&gt;\\) \\(\\sum a_i / 2\\)</p> </li> <li> <p>\u6368\u68c4\u6389\u4e00\u500b \\(a_i\\)\uff0c\u5269\u9918\u6709\u9078\u7684 \\(a_i\\) \u7e3d\u548c\u5fc5\u9808 \\(\\le \\sum a_i / 2\\)</p> </li> </ul> <p>\u554f\u6709\u9078\u7684 \\(a_i\\) \u7e3d\u548c\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(1\\le n\\le 300\\)</p> \u601d\u8def <p>\u300c\u6368\u68c4\u6389\u4e00\u500b \\(a_i\\)\uff0c\u5269\u9918\u6709\u9078\u7684 \\(a_i\\) \u7e3d\u548c\u5fc5\u9808 \\(\\sum a_i / 2\\)\u300d\u9019\u500b\u689d\u4ef6\u76f8\u7576\u65bc: \u5c07\u6700\u5c0f\u7684\u6368\u68c4\uff0c\u5269\u9918\u6709\u9078\u7684 \\(a_i\\) \u7e3d\u548c\u5fc5\u9808 \\(\\sum a_i / 2\\)</p> <p>\u6211\u5011\u767c\u73fe\u300c\u6709\u9078\u7684 \\(a_i\\)\u300d\u5c31\u662f\u4e00\u500b\u80cc\u5305\u554f\u984c\u88e1\u9762\u6240\u9078\u7684\u96c6\u5408\uff0c\u800c\u6368\u68c4\u6700\u5c0f\u7684\uff0c\u6211\u5011\u53ef\u4ee5\u5c07 \\(a_i\\) \u7531\u5c0f\u5230\u5927 sort\uff0c\u7136\u5f8c\u53cd\u8457\u505a\u80cc\u5305\u554f\u984c\uff08\\(dp(i, j)\\) \u8868\u793a\u5f8c \\(i\\) \u500b\u7269\u54c1\u662f\u5426\u80fd\u6e4a\u5230 j\uff09\uff0c\u9019\u6a23\u6211\u5011\u7576\u524d\u679a\u8209\u5230\u7684 \\(a_i\\) \u5c31\u6703\u662f\u7576\u524d\u96c6\u5408\u5167\u6700\u5c0f\u7684\u4e86</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint a[305];\nint dp[100005];\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int sum = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        sum += a[i];\n    }\n    sort(a + 1, a + n + 1);\n    dp[0] = 1;\n    int ans = 0;\n    for (int i = n; i &gt;= 1; i--) {\n        for (int j = sum; j &gt;= a[i]; j--) {\n            dp[j] |= dp[j - a[i]];\n            if (dp[j - a[i]] == 0) continue;\n            if (j - a[i] &lt;= sum / 2 &amp;&amp; j &gt; sum / 2) {\n                ans = max(ans, j);\n            }\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> BOI 2019 Day2 p1. Tom's Kitchen <p>\u6709 \\(n\\) \u500b\u5de5\u4f5c\uff0c\\(m\\) \u500b\u5de5\u5177\uff0c\u6bcf\u500b\u5de5\u4f5c\u81f3\u5c11\u8981\u7528 \\(k\\) \u500b\u4e0d\u540c\u7684\u5de5\u5177\u3002\u7b2c \\(i\\) \u500b\u5de5\u4f5c\u6240\u9700\u7684\u5de5\u5177\u6578\u91cf\u70ba \\(a_i\\)\uff0c\u800c\u7b2c \\(j\\) \u500b\u5de5\u5177\u6709 \\(b_j\\) \u500b\uff0c\u554f\u6709\u7528\u5230\u7684\u5de5\u5177\u88e1\u9762\uff0c\u5269\u4e0b\u7684\u7e3d\u6578\u6700\u5c11\u662f\u591a\u5c11</p> <p>\\(1\\le n,m,k,a_i,b_j\\le 300\\)</p> \u601d\u8def <p>\u7576 \\(a_i&lt;k\\) \u6642\uff0c\u7121\u89e3\u3002\u4e00\u500b\u5408\u6cd5\u7684\u65b9\u6848\u9700\u8981:</p> <ol> <li>\u7e3d\u6578\u91cf \\(\\ge \\sum a_i\\)</li> <li>distinct \u7684\u6578\u91cf \\(\\ge n\\times k\\)\uff08\u9019\u6a23\u5c31\u80fd\u6eff\u8db3\u6bcf\u500b\u5de5\u4f5c\u81f3\u5c11\u8981\u7528 \\(k\\) \u500b\u4e0d\u540c\u7684\u5de5\u5177\uff09</li> </ol> <p>\u9019\u662f\u4e00\u500b\u80cc\u5305\u7684\u6a21\u578b\u3002\u8a2d \\(dp(i, j)\\) \u8868\u793a\u8003\u616e\u524d \\(i\\) \u500b\u5de5\u5177\uff0c\u7e3d\u6578\u91cf\u70ba \\(j\\) \u6642\uff0cdistinct \u6578\u91cf\u6700\u5927\u662f\u591a\u5c11\u3002\u5c0d\u65bc\u6bcf\u500b\u72c0\u614b\uff0c\u6709\u5169\u7a2e\u6c7a\u7b56\uff1a</p> <ol> <li>\u4e0d\u9078\u7b2c \\(i\\) \u500b\u5de5\u5177\uff0c\\(dp(i, j) = dp(i - 1, j)\\)</li> <li>\u9078\u7b2c \\(i\\) \u500b\u5de5\u5177\uff0c\\(dp(i, j) = dp(i - 1, j - b_i)+\\min\\{n,b_i \\}\\)</li> </ol> <p>\u6700\u7d42\u7b54\u6848\u5c31\u662f \\(dp(m, j)\\ge n \\times k\\) \u4e14 \\(j\\ge \\sum a_i\\) \u7684\u6700\u5c0f\u7684 \\(j\\)</p> CF 1928 E. Modular Sequence <p>\u7d66\u5b9a\u5169\u500b\u6574\u6578 \\(x\\) \u548c \\(y\\)\uff0c\u4ee5\u53ca\u4e00\u500b\u6574\u6578 \\(s\\)\u3002\u5b9a\u7fa9\u4e00\u500b\u9577\u5ea6\u70ba\\(n\\) \u7684\u6578\u5217 \\(a\\) \u662f\u597d\u7684\u7576\u4e14\u50c5\u7576 \\(a_1 = x\\) \u4e14 \\(a_{i+1} = a_i + y\\) \u6216 \\(a_{i+1} \\equiv a_i \\pmod {y}\\)\u3002\u554f\u662f\u5426\u5b58\u5728\u9577\u5ea6\u70ba \\(n\\) \u7684\u597d\u5e8f\u5217\uff0c\u5176\u5143\u7d20\u7e3d\u548c\u7b49\u65bc \\(s\\)\u3002\u5982\u679c\u5b58\u5728\uff0c\u9700\u8981\u627e\u51fa\u4efb\u4e00\u500b\u9019\u6a23\u7684\u5e8f\u5217\u3002</p> <p>\\(\\sum n, \\sum s \\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u5230\u5c0d\u4efb\u610f\u7684 \\(i\\) \u90fd\u6709 \\(a_i \\equiv x \\pmod{y}\\)\uff0c\u56e0\u6b64\u53ef\u4ee5\u5148\u7d66 \\(s\\) \u6e1b\u53bb \\(n \\times (x \\bmod y)\\)\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u4e00\u5b9a\u662f\u975e\u8ca0\u7684 \\(y\\) \u7684\u500d\u6578\uff0c\u5426\u5247\u986f\u7136\u4e0d\u5408\u6cd5\u3002</p> <p>\u4ee4 \\(s = \\dfrac{s - n \\times (x \\bmod y)}{y}, a_1 = \\left\\lfloor\\dfrac{x}{y}\\right\\rfloor\\)\uff0c\u65bc\u662f\u554f\u984c\u8f49\u5316\u70ba\uff1a\u6c42\u4e00\u500b\u6578\u5217\uff0c\u6eff\u8db3\u7b2c\u4e00\u9805\u70ba\u65b0\u7684 \\(a_1\\)\uff0c\u548c\u70ba\u65b0\u7684 \\(s\\)\uff0c\u80fd\u5426\u7531\u82e5\u5e72\u500b\u516c\u5dee\u70ba \\(1\\)\uff0c\u8d77\u59cb\u5411\u70ba \\(0\\) \u7684\u7b49\u5dee\u6578\u5217\u62fc\u8d77\u4f86\u3002</p> <p> </p> <p>\u76f4\u63a5\u8003\u616e\u6bcf\u500b\u4f4d\u7f6e\u505a DP \u6700\u5c11\u4e5f\u8981 2D \u7684\u72c0\u614b\uff08\u4f4d\u7f6e\uff0c\u4e0a\u4e00\u500b\u7684\u503c\uff09\uff0c\u4f46\u662f\u89c0\u5bdf\u7b49\u5dee\u6578\u5217\u6700\u5927\u7684\u9577\u5ea6\u4e5f\u5c31 \\(O(\\sqrt{s})\\)\uff0c\u56e0\u70ba\u9700\u6eff\u8db3 \\(\\dfrac{i(i - 1)}{2}\\le s\\)\uff0c\u65bc\u662f\u4e0d\u59a8\u4ea4\u63db\u72c0\u614b\u548c\u7b54\u6848\uff0c\u8a2d \\(dp(i)\\) \u8868\u793a\u5f97\u5230\u548c\u70ba \\(i\\) \u7684\u6578\u5217\u6240\u9700\u8981\u7684\u6700\u5c0f\u9577\u5ea6\u3002\u7531\u65bc\u53ef\u4ee5\u5728\u5f8c\u9762\u88dc \\(0\\)\uff0c\u6240\u4ee5\u6709\u89e3\u7684\u5145\u8981\u689d\u4ef6\u70ba \\(dp(s) \\le n\\)\u3002\u9019\u500b\u6211\u5011\u5c31\u53ef\u4ee5\u7528\u7121\u7dda\u80cc\u5305\u4f86\u505a\u8f49\u79fb\uff0c\u8907\u96dc\u5ea6\u70ba\u7269\u54c1\u7a2e\u985e \\(\\times\\) \u80cc\u5305\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f \\(O(s\\sqrt{s})\\)\u3002</p> <p>\u7531\u65bc\u7b2c\u4e00\u500b\u7b49\u5dee\u6578\u5217\u7684\u9996\u9805\u6bd4\u8f03\u7279\u5225\uff0c\u4f46\u662f\u50c5\u6709\u5b83\u4e00\u500b\u7279\u5225\u7684\uff0c\u65bc\u662f\u6211\u5011\u53ef\u4ee5\u5148\u5efa\u5b8c dp \u5f8c\uff0c\u5148\u66b4\u529b\u679a\u8209\u7b2c\u4e00\u6bb5\u7b49\u5dee\u6578\u5217\u7684\u9577\u5ea6\uff0c\u7136\u5f8c\u770b\u5269\u4e0b\u7684\u7e3d\u548c\u662f\u5426\u80fd\u7528\u525b\u525b\u7684 dp \u6e4a\u51fa\u4f86\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, x, y, s, dp[200005], pre[200005];\n\nvoid print(int sum) {\n    if (sum == 0) return;\n    print(sum - pre[sum] * (pre[sum] + 1) / 2);\n    // \u7b49\u5dee\u6578\u5217\u5f9e 0 \u958b\u59cb\n    for (int i = 0; i &lt;= pre[sum]; i++) {\n        cout &lt;&lt; i * y + (x % y) &lt;&lt; '\\n';\n    }\n}\n\nint main() {\n    // \u9810\u8655\u7406 dp\n    dp[0] = 0;\n    for (int i = 1; i &lt;= 200000; i++) {\n        dp[i] = 0x3f3f3f3f;\n        for (int j = 1; j * (j + 1) / 2 &lt;= i; j++) {\n            if (dp[i - j * (j + 1) / 2] + j + 1 &lt; dp[i]) {\n                dp[i] = dp[i - j * (j + 1) / 2] + j + 1;\n                pre[i] = j;\n            }\n        }\n    }\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        cin &gt;&gt; n &gt;&gt; x &gt;&gt; y &gt;&gt; s;\n        // \u5224\u65b7 s \u5408\u4e0d\u5408\u6cd5\n        if (s &lt; 1ll * (x % y) * n) {\n            cout &lt;&lt; \"NO\\n\";\n            continue;\n        }\n        s -= (x % y) * n;\n        if (s % y) {\n            cout &lt;&lt; \"NO\\n\";\n            continue;\n        }\n        s /= y;\n        int sum = 0;\n        bool fl = 0;\n        int first = (x / y);\n        for (int i = 1; i &lt;= n; i++) {\n            sum += first;\n            first++;\n            if (sum &gt; s) break;\n            if (dp[s - sum] &lt;= n - i) {\n                fl = 1;\n                cout &lt;&lt; \"YES\\n\";\n                // \u7b2c\u4e00\u500b\u7b49\u5dee\u6578\u5217\n                for (int j = 1; j &lt;= i; j++) {\n                    cout &lt;&lt; ((x / y) + j - 1) * y + (x % y) &lt;&lt; '\\n';\n                }\n                // backtracking \u5f8c\u9762\u7684\u7b49\u5dee\u6578\u5217\n                print(s - sum);\n                // \u9577\u5ea6\u9084\u662f\u4e0d\u5920\u7684\u8a71\u518d\u88dc 0\n                for (int j = 1; j &lt;= n - (dp[s - sum] + i); j++) {\n                    cout &lt;&lt; (x % y) &lt;&lt; '\\n';\n                }\n                cout &lt;&lt; '\\n';\n                break;\n            }\n        }\n        if (!fl) {\n            cout &lt;&lt; \"NO\\n\";\n        }\n    }\n    return 0;\n}\n</code></pre> CSES - Coin Combinations I <p>\u7d66 \\(n\\) \u500b\u7269\u54c1\uff0c\u7b2c \\(i\\) \u500b\u7269\u54c1\u91cd\u91cf \\(c_i\\)\uff0c\u6bcf\u500b\u7269\u54c1\u6709\u7121\u9650\u500b\u3002\u554f\u8981\u6e4a\u51fa \\(x\\) \u7684\u65b9\u6848\u6578\uff0c\u653e\u7684\u5148\u5f8c\u9806\u5e8f\u4e0d\u540c\u8996\u70ba\u4e0d\u540c\u7684\u65b9\u6848\u3002</p> <p>\\(n\\le 100,1\\le x, c_i\\le 10^6\\)</p> \u601d\u8def <p>\u6211\u5011\u5b9a\u7fa9 dp(i, j) \u662f\u8003\u616e\u7269\u54c1 1...i\uff0c\u6e4a\u51fa j \u7684\u65b9\u6848\u6578\uff0c\u4f46\u7531\u65bc\u8981\u8003\u616e\u5148\u5f8c\u9806\u5e8f\uff0c\u6240\u4ee5\u6211\u5011\u5148\u679a\u8209\u6bcf\u500b\u91cd\u91cf\uff0c\u5c0d\u65bc\u9019\u500b\u91cd\u91cf\u6211\u5011\u53bb\u8003\u616e\u7576\u524d\u8981\u7528\u54ea\u500b\u7269\u54c1\u53bb\u8f49\u79fb\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u505a\u5230\u5148\u653e a\uff0c\u518d\u653e b \u8ddf\u5148\u653e b \u518d\u653e a \u90fd\u6703\u7b97\u5230\u7684\u60c5\u6cc1\u4e86\u3002</p> <pre><code>dp[0] = 1;\nfor (int j = 1; j &lt;= x; j++) {\n    for (int i = 1; i &lt;= n; i++) {\n        if (j &gt;= a[i]) {\n            dp[j] += dp[j - a[i]];\n            if (dp[j] &gt;= M) dp[j] -= M; \n        }\n    }\n}\n</code></pre> CSES - Coin Combinations II <p>\u7d66 \\(n\\) \u500b\u7269\u54c1\uff0c\u7b2c \\(i\\) \u500b\u7269\u54c1\u91cd\u91cf \\(c_i\\)\uff0c\u6bcf\u500b\u7269\u54c1\u6709\u7121\u9650\u500b\u3002\u554f\u8981\u6e4a\u51fa \\(x\\) \u7684\u65b9\u6848\u6578\uff0c\u653e\u7684\u5148\u5f8c\u9806\u5e8f\u4e0d\u540c\u8996\u70ba\u76f8\u540c\u7684\u65b9\u6848\u3002</p> <p>\\(n\\le 100,1\\le x, c_i\\le 10^6\\)</p> \u601d\u8def <p>\u7531\u65bc\u4e0d\u7528\u8003\u616e\u5148\u5f8c\u9806\u5e8f\uff0c\u6240\u4ee5\u6211\u5011\u8b93\u7269\u54c1\u6309\u7167\u4e00\u5b9a\u7684\u9806\u5e8f\u653e\u9032\u53bb\uff0c\u5c31\u4e0d\u6703\u767c\u73fe\u5148\u653e a\uff0c\u518d\u653e b \u8ddf\u5148\u653e b \u518d\u653e a \u90fd\u767c\u751f\u7684\u60c5\u6cc1\u4e86\u3002</p> <pre><code>dp[0] = 1;\nfor (int i = 1; i &lt;= n; i++) {\n    for (int j = 1; j &lt;= x; j++) {\n        if (j &gt;= a[i]) {\n            dp[j] += dp[j - a[i]];\n            if (dp[j] &gt;= M) dp[j] -= M; \n        }\n    }\n}\n</code></pre> 2024 TOI \u7b2c\u4e8c\u5834 pD. \u8df3\u8e8d\u6578 <p>\u7d66 \\(n\\) \u500b\u7269\u54c1\uff0c\u91cd\u91cf\u5206\u5225\u662f \\(0\\ldots n\\)\uff0c\u6bcf\u500b\u7269\u54c1\u6709\u7121\u9650\u500b\u3002\u554f\u6e4a\u51fa \\(m\\) \u7684\u6240\u6709\u65b9\u6848\u7684\u7269\u54c1\u91cd\u91cf\u548c\u7684\u7e3d\u5408\uff0c\u4f46\u8981\u6eff\u8db3\u76f8\u9130\u5169\u6b21\u53d6\u7684\u6578\u5b57\u7684\u5dee\u7684\u7d55\u5c0d\u503c\u90fd\u8981\u5927\u65bc\u7b49\u65bc \\(d\\)\uff0c\u4e14\u7b2c\u4e00\u500b\u4e0d\u80fd\u53d6 \\(0\\)\u3002</p> <p>\\(2\\le d &lt;n\\le 2000,1\\le m\\le 2000\\)</p> \u601d\u8def <p>\u6709\u9ede\u985e\u4f3c\u80cc\u5305\u554f\u984c\u7684\u8b8a\u5316\u984c\u3002\u53ef\u80fd\u6709\u4e9b\u4eba\u4e00\u958b\u59cb\u6703\u60f3\u5b9a\u7fa9 dp(i, j, k) \u8868\u793a\u76ee\u524d\u586b\u5230\u7b2c i \u9805\uff0c\u7e3d\u5408\u70ba j\uff0c\u6700\u5f8c\u586b\u7684\u662f k \u7684\u6240\u6709\u65b9\u6848\u6b0a\u503c\u7e3d\u548c\uff0c\u7136\u5f8c\u5229\u7528\u524d\u7db4\u548c\u512a\u5316\u505a\u3002\u4f46\u4f9d\u7167\u4e0a\u9762 CSES - Coin Combinations \u7cfb\u5217\u4f86\u770b\uff0c\u6211\u5011\u4e5f\u4e26\u4e0d\u7528\u7d00\u9304\u8aaa\u4ed6\u586b\u5230\u54ea\u4e00\u9805\uff0c\u80cc\u5305\u554f\u984c\u4e5f\u662f\u4e00\u6a23\uff0c\u9664\u975e\u4eca\u5929\u984c\u76ee\u6709\u9650\u5236\u80fd\u653e\u7684\u9577\u5ea6\uff0c\u90a3\u624d\u9700\u8981\u7d00\u9304\u586b\u5230\u7b2c\u5e7e\u9805\u3002\u6240\u4ee5\u6211\u5011\u5b9a\u7fa9 dp(i, j) \u8868\u793a\u76ee\u524d\u586b\u5f97\u7e3d\u548c\u662f i\uff0c\u6700\u5f8c\u586b\u7684\u662f j \u7684\u6240\u6709\u65b9\u6848\u6b0a\u503c\u7e3d\u548c\u3002\u8003\u616e\u8f49\u79fb\uff0c\u5047\u8a2d\u6211\u5011\u73fe\u5728\u8981\u5728\u5f8c\u9762\u653e\u4e00\u500b k\uff0c\u5c31\u6703\u662f       dp(i + k, k) = dp(i, j) * B + \u6700\u5f8c\u4e00\u9805\u653e k \u7684\u65b9\u6848\u6578 * k </p> <p> </p> <p>\u6240\u4ee5\u6211\u5011\u518d\u8a18\u9304\u4e00\u500b cnt(i, j) \u8868\u793a\u76ee\u524d\u586b\u5f97\u7e3d\u548c\u662f i\uff0c\u6700\u5f8c\u586b\u7684\u662f j \u7684\u65b9\u6848\u6578\u5373\u53ef\u3002</p> <p>\u56e0\u70ba\u6211\u5011\u662f\u8981\u8003\u616e\u6578\u5b57\u7684\u76f8\u5c0d\u9806\u5e8f\u7684\uff0c\u6240\u4ee5\u5728\u8f49\u79fb\u6642\uff0c\u5148\u679a\u8209\u7e3d\u548c\uff0c\u518d\u679a\u8209\u7576\u524d\u8981\u653e\u7684\u6578\u5b57\u3002\u7528\u524d\u7db4\u548c\u512a\u5316\u8f49\u79fb\uff0c\u8907\u96dc\u5ea6\u662f O(nm) * O(1) = O(nm)\u3002</p> CEOI 2018 Cloud computing <p>\u6709 n \u500b\u8ce3\u5bb6\uff0c\u7b2c i \u500b\u8ce3 c1[i] \u500b\u8ca8\u7269\uff0c\u6b0a\u91cd f1[i]\uff0c\u50f9\u683c v1[i]\u3002\u6709 m \u500b\u8cb7\u5bb6\uff0c\u7b2c i \u500b\u60f3\u8cb7 c2[i] \u500b\u8ca8\u7269\uff0c\u53ea\u8cb7\u6b0a\u91cd\u81f3\u5c11 f2[i] \u7684\uff0c\u50f9\u683c v2[i]\u3002\u6311\u4e00\u4e9b\u8cb7\u5bb6\uff0c\u8ce3\u5bb6\uff0c\u554f\u5229\u6f64\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(1 \\le n, m \\le 2000, 1 \\le c_1[i], c_2[i] \\le 50, 1 \\le f_1[i], f_2[i], v_1[i], v_2[i] \\le 10^9\\)</p> \u601d\u8def <p>\u5148\u8003\u616e f1[i], f2[i] \u90fd\u662f 1 \u7684\u60c5\u6cc1\uff0c\u9019\u9ebc\u4e00\u4f86\u5c31\u6709\u9ede\u985e\u4f3c\u80cc\u5305\u554f\u984c\u7684\u611f\u89ba\uff0c\u53ef\u662f\u6709\u5169\u7a2e\u4e0d\u540c\u7684\u300c\u7269\u9ad4\u300d\uff0c\u4e00\u500b\u662f\u8cb7\uff0c\u4e00\u500b\u662f\u8ce3\uff0c\u986f\u7136\u4e0d\u80fd\u5206\u5169\u6b21\u505a\u3002\u600e\u9ebc\u8fa6\u5462\uff1f\u5176\u5be6\u8cb7\u9032\u548c\u8ce3\u51fa\u7684\u8cc7\u6599\u53ef\u4ee5\u5b58\u5230\u540c\u4e00\u500b\u9663\u5217\u88e1\u9762\uff0c\u6211\u5011\u628a\u8cb7\u7684 v2[i] \u7576\u6210\u662f -v2[i]\uff0c\u5c07\u5169\u500b\u7269\u54c1\u7684 v \u4f5c\u70ba\u50f9\u503c\uff0cc \u7576\u6210\u91cd\u91cf\uff0c\u505a\u80cc\u5305\u554f\u984c\uff0c\u56e0\u70ba v[i] \u4e00\u500b\u662f\u8ca0\u7684\uff0c\u4e00\u500b\u662f\u6b63\u7684\uff0c\u6240\u4ee5\u8f49\u79fb\u4e5f\u8981\u7531\u6240\u4e0d\u540c\u3002\u6ce8\u610f\u5230\u6211\u5011\u4e00\u5b9a\u8981\u6709\u5920\u7684\u5132\u91cf\u624d\u80fd\u8ce3\uff0c\u4e0d\u7136\u9084\u6c92\u8cb7\u9032\u5c31\u8981\u8ce3\u51fa\u4e86\uff0c\u7d50\u679c\u986f\u7136\u504f\u5c0f\uff0c\u6240\u4ee5\u6211\u5011\u4e8b\u5148\u5c07\u7269\u54c1\u5011\u6309\u7167\u8cb7\u5728\u524d\uff0c\u8ce3\u5728\u5f8c\u4f86 sort\u3002</p> <pre><code>sort(a, cmp);\nfor (int i = 0; i &lt; n + m; i++) {\n    if (a[i].v &lt; 0) {\n        for(int j = cnt; j &gt;= 0; j--) {\n            dp[j + a[i].c] = max(dp[j + a[i].c], dp[j] + a[i].v);\n        }\n    } else {\n        // \u4e4d\u770b\u4e4b\u4e0b\u6703\u4ee5\u70ba\u662f\u7121\u9650\u80cc\u5305\u8f49\u79fb\n        // \u5be6\u969b\u4e0a\u90fd\u662f\u5012\u5e8f\n        for (int j = 0; j &lt;= cnt - a[i].c; j++) {\n            dp[j] = max(dp[j], dp[j + a[i].c] + a[i].v);\n        }\n    }\n}\n</code></pre> <p>\u6700\u5f8c\uff0c\u82e5\u52a0\u4e0a\u8981\u8003\u616e f[i]\uff0c\u6211\u5011\u5c31\u5c07\u7269\u54c1\u5148\u6309\u7167 f[i] \u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8b93 f[i] \u5927\u7684\u7269\u54c1\u5148\u8cb7\u9032\u4f86\uff0c\u4e4b\u5f8c\u8ce3\u51fa\u53bb\u6642 f[i] \u6703\u6bd4\u8f03\u5c0f\uff0c\u53ef\u4ee5\u8ce3\uff0c\u5c0d\u65bc f[i] \u76f8\u540c\u7684\uff0c\u6309\u7167\u8cb7\u7684\u5148\uff0c\u8ce3\u7684\u5f8c\u6392\u5e8f\u5373\u53ef\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nint n, m, tot, dp[1000005], ans, sum;\n\ninline int read() {\n    int a;\n    scanf(\"%lld\", &amp;a);\n    return a;\n}\n\nstruct node {\n    int a, b, c;\n    bool p;\n    bool operator&lt;(const node &amp;t) const {\n        if (b == t.b)\n            return p &lt; t.p;\n        return b &gt; t.b;\n    }\n} p[4005];\n\nsigned main() {\n    scanf(\"%lld\", &amp;n);\n    for (int i = 1; i &lt;= n; i++)\n        p[i] = node({read(), read(), read(), 0});\n    scanf(\"%lld\", &amp;m);\n    for (int i = 1; i &lt;= m; i++)\n        p[i + n] = node({read(), read(), read(), 1});\n    sort(p + 1, p + n + m + 1);\n    memset(dp, -0x3f, sizeof(dp));\n    dp[0] = 0;\n    for (int i = 1; i &lt;= m + n; i++) {\n        if (p[i].p) {\n            for (int j = 0; j &lt;= sum - p[i].a; j++)\n                dp[j] = max(dp[j], dp[j + p[i].a] + p[i].c);\n        } else {\n            for (int j = sum; j &gt;= 0; j--)\n                dp[j + p[i].a] = max(dp[j + p[i].a], dp[j] - p[i].c);\n            sum += p[i].a;\n        } \n    }\n    for (int i = 0; i &lt;= sum; i++)\n        ans = max(ans, dp[i]);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"dp/knapsack/#_12","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>APCSC</p> </li> <li> <p>https://hackmd.io/@Ccucumber12/Bk6lLyuxF#/</p> </li> <li> <p>https://sprout.tw/algo2023/ppt_pdf/week09/dp2_inclass_tp.pdf</p> </li> <li> <p>http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&amp;file=fcaa846ddcba22c1c63777723152ba9492a9f2218</p> </li> <li> <p>https://blog.csdn.net/windfriendc/article/details/123892024</p> </li> <li> <p>https://hackmd.io/-EB3-tLaSbOcNb9yn1XCyg</p> </li> <li> <p>https://koyingtw.github.io/2023/10/03/%E5%B8%B6%E5%88%AA%E9%99%A4%E8%83%8C%E5%8C%85%E5%95%8F%E9%A1%8C/</p> </li> </ul> <ol> <li> <p>\u4e0a\u8ff0\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u5224\u65b7\uff0c\u6b64\u8655\u6709\u5c0d\u65bc\u7db2\u8def\u4e0a\u53e6\u4e00\u7a2e\u65b9\u6cd5\u7684\u89e3\u91cb\u00a0\u21a9</p> </li> </ol>"},{"location":"dp/lcs/","title":"LCS","text":""},{"location":"dp/lcs/#lcs","title":"LCS \u4ecb\u7d39","text":"LCS <p>\u8f38\u5165\u5169\u500b\u5b57\u4e32 s, t\uff0c\u9577\u5ea6\u5206\u5225\u662f n, m\uff0c\u627e\u5230 s, t \u7684\u6700\u9577\u5171\u540c\u5b50\u5e8f\u5217\u9577\u5ea6</p> <p>\u8003\u616e\u5169\u500b\u5b57\u4e32\u7684\u6700\u5f8c\u4e00\u500b\u5b57\u5143\u662f\u5426\u53ef\u4ee5\u914d\u5c0d\uff0cdp(i, j) \u8868\u793a\u53ea\u770b s[0~i] \u8207 t[0~j] \u7684 LCS \u9577\u5ea6\uff0ci, j \u4e00\u5b9a\u8981\u914d\u5728\u4e00\u8d77\uff0c\u90a3\u9019\u6a23\u8f49\u79fb\u5c31\u6703\u662f\u53bb\u679a\u8209\u4e4b\u524d\u7684\u6c7a\u7b56\u9ede dp(p, q)\uff0c\u8f49\u79fb\u8017\u6642 O(n^2)\u3002\u4e0d\u904e\u82e5\u6211\u5011\u5b9a\u7fa9 dp(i, j) \u8868\u793a\u53ea\u770b s[0~i] \u8207 t[0~j] \u7684 LCS \u9577\u5ea6\uff0c\u800c i, j \u4e0d\u4e00\u5b9a\u8981\u914d\uff0c\u90a3\u9ebc\u6211\u5011\u9032\u800c\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u8f49\u79fb\uff1a</p> <ul> <li> <p>\u82e5 s[i] == t[j]\uff1a dp(i, j) = max{ dp(i, j-1), dp(i-1, j) , dp(i-1, j-1) + 1}</p> </li> <li> <p>\u5426\u5247\uff1adp(i, j) = max{ dp(i, j-1), dp(i-1, j) }</p> </li> </ul> <p>\u7b54\u6848\u5c31\u662f dp(n-1, m-1)\u3002\u6211\u5011\u53ef\u4ee5\u767c\u73fe\u82e5\u4e00\u500b\u72c0\u614b\u5b9a\u7fa9\u6539\u8b8a\u4e00\u4e0b\uff0c\u6216\u8a31\u5c31\u80fd\u66f4\u5feb\u901f\u7684\u8f49\u79fb\uff0c\u5be6\u73fe\u66f4\u5feb\u7684\u6548\u7387\u3002</p>"},{"location":"dp/lcs/#_1","title":"\u984c\u76ee","text":"USACO 2016 DEC Team Building P <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a\\)\uff0c\u4e00\u500b\u9577\u5ea6\u70ba \\(m\\) \u7684\u5e8f\u5217 \\(b\\)\uff0c\u5f9e\u5169\u500b\u5e8f\u5217\u5404\u9078\u51fa \\(k\\) \u500b\u5143\u7d20\uff0c\u6eff\u8db3 \\(a\\) \u9078\u7684\u6700\u5927\u5143\u7d20\u5927\u65bc \\(b\\) \u9078\u7684\u6700\u5927\u5143\u7d20\uff0c\\(a\\) \u9078\u7684\u6b21\u5927\u5143\u7d20\u5927\u65bc \\(b\\) \u9078\u7684\u6b21\u5927\u5143\u7d20\uff0c\u4ee5\u6b64\u985e\u63a8\uff0c\u554f\u6709\u5e7e\u7a2e\u9078\u6cd5\u3002</p> <p>\\(1\\le n,m\\le 1000, 1\\le k\\le 10\\)</p> \u601d\u8def <p>\u5b9a\u7fa9 dp(i, j, k) \u70ba\u8003\u616e a \u7684\u524d i \u500b\uff0cb \u7684\u524d j \u500b\uff0c\u5171\u9078\u4e86 k \u500b\u7684\u65b9\u6848\u6578\u3002 \u8f49\u79fb\u70ba</p> <ul> <li>\u9078\uff1aif (a[i] &gt; b[j]) dp(i, j, k) += dp(i - 1, j - 1, k - 1)</li> <li>\u4e0d\u9078\uff1adp(i, j, k) += dp(p, q, k - 1)</li> </ul> <p>\u7531\u65bc dp(i, j, k) \u9700\u8981\u7528\u5230\u6240\u6709 dp(p, q, k - 1) \u7684\u95dc\u4fc2\uff0c\u6211\u5011\u5728\u5be6\u4f5c\u4e0a\u5fc5\u9808\u5148\u679a\u8209 k \u9019\u7dad\u3002\u8f49\u79fb\u5f0f\u7684\u90e8\u5206\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u4e8c\u7dad\u524d\u7db4\u548c\u512a\u5316\uff0c\u6216\u8005\u662f\u6211\u5011\u6bcf\u6b21\u679a\u8209\u5b8c\u4e00\u500b k \u5f8c\uff0c\u6211\u5011\u5c0d\u65bc\u6574\u500b dp(i, j, k) \u505a\u4e00\u6b21\u524d\u7db4\u52a0\u7e3d\u3002\u8907\u96dc\u5ea6 O(nmk)\u3002</p> <p>\u628a\u6240\u6709\u725b\u653e\u5728\u4e00\u8d77\u5f9e\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u76f8\u540c\u5247 \\(A\\) \u7684\u725b\u653e\u5728\u524d\u9762\uff0c\u554f\u984c\u8b8a\u70ba\u5f9e\u5e8f\u5217\u4e2d\u9078\u64c7\u4e00\u4e9b\u5143\u7d20\uff0c\u4f7f\u5f97\u4efb\u610f\u524d\u7db4 \\(A\\) \u5165\u9078\u7684\u500b\u6578\u5927\u65bc \\(B\\) \u5165\u9078\u7684\u500b\u6578\u3002</p> <p>\\(dp(i, j, k)\\) \u8868\u793a\u8003\u616e\u4e86\u524d \\(i\\) \u982d\u725b\uff0c\\(A\\) \u5165\u9078\u4e86 \\(j\\) \u982d\uff0c\\(B\\) \u6bd4 \\(A\\) \u5c11 \\(k\\) \u982d\uff0c\u8f49\u79fb\u5c31\u5224\u65b7\u4e0b\u4e00\u982d\u725b\u662f \\(A\\) \u7684\u9084\u662f \\(B\\) \u7684\uff0c\u5982\u679c\u662f \\(B\\) \u9084\u8981\u5224\u65b7\u7576\u524d\u72c0\u614b \\(k\\) \u662f\u4e0d\u662f\u7b49\u65bc \\(0\\)\u3002\u8907\u96dc\u5ea6 \\(O((n+m)k^2)\\)</p> code1 <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int mod = 1e9 + 9;\nint a[1005], b[1005], dp[1005][1005][12];\n\nint main() {\n    int n, m, p;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; b[i];\n    }\n    sort(a + 1, a + n + 1);\n    sort(b + 1, b + m + 1);\n    for (int i = 0; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= m; j++) {\n            dp[i][j][0] = 1;\n        }\n    }\n    for (int k = 1; k &lt;= p; k++) {\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= m; j++) {\n                if (a[i] &gt; b[j]) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1];\n                }\n            }  \n        }\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= m; j++) {\n                dp[i][j][k] = (dp[i][j][k] + dp[i][j - 1][k]) % mod;\n            }\n        }\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= m; j++) {\n                dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k]) % mod;\n            }\n        }\n    }\n    cout &lt;&lt; dp[n][m][p];\n}\n</code></pre> code2 <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int mod = 1e9 + 9;\nint a[1005], b[1005], dp[1005][1005][12];\n\nint main() {\n    int n, m, p;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; b[i];\n    }\n    sort(a + 1, a + n + 1);\n    sort(b + 1, b + m + 1);\n    for (int i = 0; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= m; j++) {\n            dp[i][j][0] = 1;\n        }\n    }\n    for (int k = 1; k &lt;= p; k++) {\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= m; j++) {\n                dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k]) % mod;\n                dp[i][j][k] = (dp[i][j][k] + dp[i][j - 1][k]) % mod;\n                dp[i][j][k] = (dp[i][j][k] - dp[i - 1][j - 1][k] + mod) % mod;\n                if (a[i] &gt; b[j]) {\n                    dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j - 1][k - 1]) % mod;\n                }\n            }  \n        }\n    }\n    cout &lt;&lt; dp[n][m][p];\n}\n</code></pre> code3 <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstruct Node {\n    int x, t;\n\n    bool operator&lt;(const Node &amp;rhs) const {\n        if (x == rhs.x) {\n            return rhs.t &lt; t;\n        }\n        return rhs.x &lt; x;\n    }\n} a[2009];\n\nconst int mod = 1e9 + 9;\nint n, m, p, dp[2009][2009][20];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (int i = 1; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        a[i] = {x, 1};\n    }\n    for (int i = 1; i &lt;= m; i++) {\n        int x;\n        cin &gt;&gt; x;\n        a[i + n] = {x, 2};\n    }\n    sort(a + 1, a + 1 + n + m);\n    dp[0][0][0] = 1;\n    for (int i = 0; i &lt;= n + m; i++) {\n        for (int j = 0; j &lt;= min(i, p); j++) {\n            for (int k = 0; k &lt;= j; k++) {\n                dp[i + 1][j][k] = (dp[i + 1][j][k] + dp[i][j][k]) % mod;\n                if (a[i + 1].t == 1) {\n                    dp[i + 1][j + 1][k + 1] = (dp[i + 1][j + 1][k + 1] + dp[i][j][k]) % mod;\n                }\n                if (a[i + 1].t == 2 &amp;&amp; k &gt;= 1) {\n                    dp[i + 1][j][k - 1] = (dp[i + 1][j][k - 1] + dp[i][j][k]) % mod;\n                }\n            }\n        }\n    }\n    cout &lt;&lt; dp[n + m][p][0] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"dp/lis/","title":"LIS","text":""},{"location":"dp/lis/#_1","title":"\u4ecb\u7d39","text":"CSES - Increasing Subsequence <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2 ,\\ldots ,a_n\\)\uff0c\u627e\u51fa\u4e00\u500b\u6700\u9577\u7684\u5b50\u5e8f\u5217\uff0c\u88e1\u9762\u7684\u503c\u662f\u56b4\u683c\u905e\u589e\u7684</p> <p>\\(n\\le 2\\times 10^5,a_i\\le 10^9\\)</p> <p>\u8003\u616e\u6700\u5f8c\u4e00\u500b\u6771\u897f\u4e00\u5b9a\u8981\u9078\uff0c\\(dp[i]\\) \u8868\u793a\u53ea\u770b \\(a_1, \\ldots ,a_i\\)\uff0c\u7b2c \\(i\\) \u9805\u4e00\u5b9a\u8981\u9078\u7684\u6700\u597d\u7b54\u6848\uff0c\u6211\u5011\u53ef\u4ee5\u5217\u51fa\u8f49\u79fb\u5f0f</p> \\[dp[i]=\\max \\limits_{j&lt; i \\texttt{ and }a_j&lt;a_i} \\{ dp[j] + 1 \\}\\] <p>\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f \\(\\max \\{ dp[1], dp[2], \\ldots ,dp[n]\\}\\)</p>"},{"location":"dp/lis/#_2","title":"\u89e3\u6cd5\u4e00 \u2014 \u4e8c\u5206\u641c","text":"<p>\u8003\u616e\u522a\u9664\u6c92\u6709\u7528\u7684\u5b50\u554f\u984c\uff0c\u6bcf\u4e00\u7a2e\u53ef\u80fd\u7684\u9577\u5ea6\u53ea\u6703\u6709\u4e00\u500b\u9ede\u88ab\u7559\u4e0b\u4f86\uff0clis \u9577\u5ea6\u70ba \\(L\\) \u800c\u88ab\u7559\u4e0b\u4f86\u7684\u5c31\u662f\u300c\u9577\u5ea6 L \u7684\u6700\u5c0f\u53ef\u80fd\u7d50\u5c3e\u300d\u3002\u5982\u679c\u6211\u5011\u5c07\u9019\u500b\u8cc7\u6599\u5b58\u653e\u5728\u4e00\u500b\u9663\u5217 \\(v\\)\uff0c\u9019\u500b\u9663\u5217\u7684\u5143\u7d20\u662f\u55ae\u8abf\u905e\u589e\u7684\uff0c\u5728\u7b2c \\(i\\) \u500b\u56de\u5408\u8a08\u7b97 lis\\((i)\\) \u6642\uff0c\u6211\u5011\u641c\u5c0b\u627e\u5230 \\(L=\\max \\limits_{v[j] &lt; a[i]}\\{ j \\}\\)\uff0c\u65bc\u662f\u6211\u5011\u5f97\u5230 lis\\((i) = L+1\\)\uff0c\u6700\u5f8c\u6211\u5011\u8981\u8a18\u5f97\u5c07 lis\\((i)\\) \u7684\u7b97\u5230 \\(v\\) \u88e1\u9762\u3002</p> code <pre><code>vector&lt;int&gt; find_lis(vector&lt;int&gt; &amp;a) {\n    int n = a.size();\n    vector&lt;int&gt; dp(n);\n    vector&lt;int&gt; v;\n    for (int i = 0; i &lt; n; i++) {\n        if (v.empty() || v.back() &lt; a[i]) {\n            v.push_back(a[i]);\n            dp[i] = v.size();\n        } else {\n            dp[i] = lower_bound(ALL(v), a[i]) - v.begin() + 1;\n            *lower_bound(ALL(v), a[i]) = a[i];\n        }\n    }\n    return dp;\n}\n</code></pre>"},{"location":"dp/lis/#_3","title":"\u89e3\u6cd5\u4e8c \u2014 \u4e8c\u7dad\u5ea7\u6a19","text":"<p>\u89c0\u5bdf\u8f49\u79fb\u5f0f </p> \\[dp[i]=\\max \\limits_{j&lt; i \\texttt{ and }a_j&lt;a_i} \\{ dp[j] + 1 \\}\\] <p>\u6211\u5011\u5c07 \\((i,a_i)\\) \u6253\u5728\u4e8c\u7dad\u5ea7\u6a19\u4e0a\u770b</p> <p> </p> <p>\u4e5f\u5c31\u662f\u6211\u5011\u9700\u8981\u4e00\u500b DS \u53bb\u300c\u56de\u50b3 \\(a_i &lt; x\\)\u300d\u7684\u6700\u5927\u503c\u3002\u9019\u5229\u7528\u503c\u57df\u7dda\u6bb5\u6a39\u6216 BIT\uff0cv\\([x]\\) \u7dad\u8b77\u4ee5 \\(x\\) \u7d50\u5c3e\u7684\u6700\u5927 LIS \u9577\u5ea6\u3002</p>"},{"location":"dp/lis/#_4","title":"\u8b8a\u5316","text":""},{"location":"dp/lis/#lis","title":"\u5e36\u6b0a LIS","text":"Atcoder dp contest Q. Flowers <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2 ,\\ldots ,a_n\\)\uff0c\u6bcf\u500b \\(i\\) \u6709\u4e00\u500b\u6b0a\u91cd \\(w_i\\)\uff0c\u627e\u51fa\u4e00\u500b\u6b0a\u91cd\u548c\u6700\u5927\u7684\u5b50\u5e8f\u5217\uff0c\u88e1\u9762\u7684\u503c\u662f\u56b4\u683c\u905e\u589e\u7684</p> \u601d\u8def \\[dp[i]=\\max \\limits_{j&lt; i \\texttt{ and }a_j&lt;a_i} \\{ dp[j] + w_i \\}\\] <p>\u4e00\u6a23\u7528\u7528\u503c\u57df\u7dda\u6bb5\u6a39\u5373\u53ef</p>"},{"location":"dp/lis/#_5","title":"\u5b57\u5178\u5e8f","text":"\u554f\u984c <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2 ,\\ldots ,a_n\\)\uff0c\u8f38\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 LIS</p> \u601d\u8def <p>\u5b57\u5178\u5e8f\u662f\u5f9e\u5e8f\u5217\u7684\u982d\u958b\u59cb\u6bd4\u8f03\uff0c\u6240\u4ee5\u8981\u628a LIS \u8b8a\u5316\u4e00\u4e0b\u6539\u6210\u300c\u5f9e\u7b2c i \u9805\u5230\u7b2c n \u9805\u7684 LIS \u9577\u5ea6\u300d</p> \\[ \\begin{array}{c|cccccc} \u9663\u5217&amp;3&amp;1&amp;4&amp;2&amp;5&amp;9\\\\ \\hline \u5f80\u5f8c\u7684 \\space \\texttt{LIS} \\space \u9577\u5ea6&amp; 4 &amp; 4 &amp; 3 &amp; 3 &amp; 2 &amp; 1\\\\ \\end{array} \\] code <pre><code>vector&lt;int&gt; v[N]; // v[x] : \u5b58 LIS(i) = x \u7684 i\n\nvoid solve() {\n    vector&lt;int&gt; ans;\n    int pos = 0, last = 0;\n    for (int i = len; i &gt;= 1; i--) {\n        int mn = 1e9;\n        int nxt_pos = 0;\n        for (auto j : v[i]) {\n            if (a[j] &gt; last &amp;&amp; j &gt; pos &amp;&amp; a[j] &lt; mn) {\n                nxt_pos = j;\n                mn = a[j];\n            }\n        }\n        ans.push_back(mn);\n        pos = nxt_pos;\n        last = mn;\n    }\n}\n</code></pre>"},{"location":"dp/lis/#lis_1","title":"LIS \u6578\u91cf","text":"LIS \u65b9\u6cd5\u6578 LeetCode 673. Number of Longest Increasing Subsequence <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2 ,\\ldots ,a_n\\)\uff0cLIS \u6709\u5e7e\u7a2e\u9078\u6cd5</p> <p>\\(n\\le 2\\times 10^5\\)</p> <p>\u3010\u66b4\u529b O(n^2) \u89e3\u3011:</p> <p>\u8ddf O(n^2) \u7684 LIS \u89e3\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u7576\u9577\u5ea6\u4e00\u6a23\u6642\u65b9\u6cd5\u6578\u7e7c\u7e8c\u7d2f\u52a0\uff1b\u7576\u9577\u5ea6\u66f4\u5927\u6642\u5c07\u65b9\u6cd5\u6578\u8986\u84cb\u904e\u53bb\u3002</p> code <pre><code>for (int i = 0; i &lt; n; i++) {\n    for (int j = 0; j &lt; i; j++) {\n        if (a[j] &lt; a[i]) {\n            if (dp[j] + 1 == dp[i]) {\n                cnt[i] += cnt[j];\n            } else if (dp[j] + 1 &gt; dp[i]) {\n                cnt[i] = cnt[j];\n                dp[i] = dp[j] + 1;\n            }\n        }\n}\n</code></pre> <p>\u3010\u512a\u5316\u7684\u7b2c\u4e00\u7a2e\u65b9\u6cd5: \u7dda\u6bb5\u6a39\u3011</p> <p>\u4f7f\u7528\u503c\u57df\u7dda\u6bb5\u6a39\uff0cv[x] \u7dad\u8b77 (max length, cnt) \u5206\u5225\u4ee3\u8868\u76ee\u524d\u4ee5 x \u9019\u500b\u503c\u4f5c\u70ba\u7d50\u5c3e\u5f97\u905e\u589e\u5e8f\u5217\u9577\u5ea6\u6700\u5927\u662f\u591a\u5c11\uff0c\u4e26\u4e14\u7e3d\u5171\u6709\u5e7e\u500b\u3002\u5728 update(x, length, cnt) \u7684\u6642\u5019\uff0c\u5982\u679c\u8981\u66f4\u65b0\u7684\u9577\u5ea6\u8207\u7dda\u6bb5\u6a39\u539f\u672c\u5132\u5b58\u7684\u9577\u5ea6\u662f\u4e00\u6a23\u7684\uff0c\u4e5f\u5c31\u662f node[x].length = length\uff0c\u90a3\u5c31\u5c07 node[x].cnt += cnt\uff1b\u5982\u679c\u9577\u5ea6\u66f4\u5927\uff0c\u4e5f\u5c31\u662f node[x].length &lt; length\uff0c\u90a3\u5c31\u5c07\u65b9\u6cd5\u6578\u76f4\u63a5\u8986\u84cb\u904e\u53bb\u8b8a\u6210 cnt\uff0cnode[x].cnt = cnt\u3002</p> <p>\u3010\u512a\u5316\u7684\u7b2c\u4e8c\u7a2e\u65b9\u6cd5: \u5229\u7528\u55ae\u8abf\u6027\u3011</p> <p>\\(f(i)\\) \u8868\u793a\u4ee5 \\(a_i\\) \u70ba\u7d50\u5c3e\uff0c\u6240\u80fd\u9078\u53d6\u7684\u6700\u9577\u7684\u5b50\u5e8f\u5217\u7684\u9577\u5ea6\uff0c\u800c \\(g(i)\\) \u8868\u793a\u4ee5 \\(i\\) \u70ba\u7d50\u5c3e\uff0c\u5728\u9078\u53d6\u5b50\u5e8f\u5217\u70ba\u6700\u9577\u7684\u60c5\u6cc1\u4e0b\u7684\u65b9\u6848\u6578\u3002\u6211\u5011\u9996\u5148\u7528\u4e8c\u5206\u5728 \\(O(n \\log n)\\) \u69cb\u5efa\u51fa\u6211\u5011\u7684 \\(f(i)\\) \u5e8f\u5217\u3002\u5c0d\u65bc \\(g(i)\\)\uff0c\u6211\u5011\u5217\u51fa\u4ed6\u7684\u8f49\u79fb\u5f0f</p> <p>  g(i) = sum{ g(j) | j &lt; i &amp;&amp; a[j] &lt; a[i] &amp;&amp; f(j) = f(i) - 1}  </p> <p>\u8003\u616e\u55ae\u8abf\u6027\uff0c\u5c0d\u65bc \\(j&lt;i,f(j)=f(i)\\)\uff0c\u7e3d\u6709 \\(a_j \\ge a_i\\)\u3002\u5373 \\(f(i)\\) \u76f8\u7b49\u7684\u6240\u6709 \\(a_i\\) \u4e00\u5b9a\u69cb\u6210\u905e\u6e1b\u7684\u5e8f\u5217\uff08\u975e\u589e\u5e8f\u5217\uff09\u3002\u9019\u8b93\u6211\u5011\u60f3\u5230\u53ef\u4ee5\u7528 bucket \u8207\u6307\u91dd\u4f86\u4f7f\u7528\u9019\u500b\u55ae\u8abf\u6027\u7dad\u8b77\u3002\u5177\u9ad4\u4f86\uff0cbucket[x] \u662f\u4e00\u500b vector\uff0c\u5b58\u7684\u662f \\(f(i)=x\\) \u7684 \\(a_i\\)\uff0c\u800c\u56e0\u70ba\u6839\u64da\u525b\u525b\u7684\u6027\u8cea\uff0cbucket[x] \u662f\u905e\u6e1b\u7684\uff0c\u800c\u6211\u5011\u6703\u7528\u4f86\u67e5\u627e v[x] \u7684\u6578\u5b57\u4e5f\u6703\u662f\u905e\u6e1b\u7684\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u4e00\u500b\u6307\u91dd\u4f86\u7dad\u8b77\u7576\u524d\u7b97\u5230\u7684\u5730\u65b9\uff0c\u7b54\u6848\u5c31\u662f\u6307\u91dd\u4e4b\u5f8c\u7684\u5f8c\u7db4\u7e3d\u548c\u3002\u56e0\u70ba\u6307\u91dd\u53ea\u6703\u55ae\u8abf\u5f80\u53f3\u79fb\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6\u662f \\(O(n)\\)\u3002</p> <p> </p> <p>\u4ee5\u9019\u500b\u4f8b\u5b50\u4f86\u8aaa\uff0c\u7576\u8dd1\u5230 i = 3, a[i] = 2 \u6642\u7576\u524d\u7684\u60c5\u6cc1 bucket[1] = {3, 2, 1}\uff0c\u800c bucket[1] \u7684\u6307\u91dd pos[1] = 0\uff0c\u5f8c\u7db4\u548c\u70ba 7\u3002\u8003\u616e\u5230\u662f a[i] = 2 \u8981\u63a5\u904e\u4f86\uff0c\u6240\u4ee5\u6211\u5011\u5fc5\u9808\u5c07\u6307\u91dd\u79fb\u5230\u76f4\u5230\u6307\u5230\u7684\u6578\u5b57\u6bd4 2 \u5c0f\uff0c\u6240\u4ee5 pos[1] = 2\uff0c\u5f8c\u7db4\u548c\u5c31\u662f 1\u3002</p> code <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; get_lis(vector&lt;int&gt;&amp; a) {\n        int n = a.size();\n        vector&lt;int&gt; dp(n);\n        vector&lt;int&gt; v;\n        for (int i = 0; i &lt; n; i++) {\n            if (v.empty() || v.back() &lt; a[i]) {\n                v.push_back(a[i]);\n                dp[i] = v.size();\n            } else {\n                auto pos = lower_bound(v.begin(), v.end(), a[i]);\n                dp[i] = pos - v.begin() + 1;\n                *pos = a[i];\n            }\n        }\n        return dp;\n    }\n    int findNumberOfLIS(vector&lt;int&gt;&amp; a) {\n        int n = a.size();\n        vector&lt;int&gt; dp = get_lis(a);\n        vector&lt;int&gt; cnt(n + 1);\n        vector&lt;int&gt; pos(n + 1);\n        vector&lt;vector&lt;int&gt;&gt; bucket(n + 1);\n        vector&lt;int&gt; bucket_sum(n + 1);\n\n        for (int i = 0; i &lt; n; i++) {\n            int len = dp[i];\n            if (len == 1) {\n                cnt[i] = 1;\n            } else {\n                while (pos[len - 1] &lt; bucket[len - 1].size() &amp;&amp; a[bucket[len - 1][pos[len - 1]]] &gt;= a[i]) {\n                    bucket_sum[len - 1] -= cnt[bucket[len - 1][pos[len - 1]]];\n                    pos[len - 1]++;\n                }\n                cnt[i] = bucket_sum[len - 1];\n            }\n            bucket[len].push_back(i);\n            bucket_sum[len] += cnt[i];\n        }\n        int lis_len = *max_element(dp.begin(), dp.end());\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (dp[i] == lis_len) {\n                ans += cnt[i];\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> LIS \u4e0d\u540c\u7684\u9078\u6cd5\u6578 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2 ,\\ldots ,a_n\\)\uff0c\u8f38\u51fa\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684 LIS</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6d1b\u8c37 P1108 \u4f4e\u4ef7\u8d2d\u4e70 \u662f\u4e00\u500b\u985e\u4f3c\u984c\uff0c\u4e0d\u904e\u7528 O(n^2) \u5373\u53ef\u901a\u904e\uff0c\u6240\u4ee5\u6211\u5011\u4e5f\u5148\u4f86\u60f3\u60f3 O(n^2) \u7684\u5f0f\u5b50\u8a72\u600e\u9ebc\u5217</p> <pre><code>for (int i = 0; i &lt; n; i++) {\n    for (int j = 0; j &lt; i; j++) {\n        if (a[j] &lt; a[i]) {\n            if (dp[j] + 1 == dp[i]) {\n                cnt[i] += cnt[j];\n            } else if (dp[j] + 1 &gt; dp[i]) {\n                cnt[i] = cnt[j];\n                dp[i] = dp[j] + 1;\n            }\n        }\n    }\n    // \u907f\u514d\u91cd\u8907\u8a08\u7b97\n    for (int j = 0; j &lt; i; j++) {\n        if (a[j] == a[i] &amp;&amp; dp[j] == dp[i]) {\n            cnt[j] = 0;\n        }\n    }\n}\n</code></pre> <p>\u4e5f\u5c31\u4ee3\u8868\u8aaa\u540c\u4e00\u7a2e\u6578\u5b57\uff0c\u6211\u5011\u53ea\u9700\u8981\u90a3\u7a2e\u6578\u5b57\u6700\u5f8c\u51fa\u73fe\u7684\u5730\u65b9\u7d00\u9304\u4ed6\u7684\u65b9\u6cd5\u6578\u5c31\u597d\u3002\u5c0d\u61c9\u5230\u4e0a\u9762\u8b1b\u7684\u5169\u7a2e\u505a\u6cd5\uff0c\u7b2c\u4e00\u7a2e\u65b9\u6cd5\u5728\u66f4\u65b0\u6642\u5c31\u76f4\u63a5\u628a\u539f\u672c\u7684 cnt \u7d66\u8986\u84cb\u904e\u53bb\uff1b\u800c\u7b2c\u4e8c\u7a2e\u505a\u6cd5\u5728\u628a\u6578\u5b57 push back \u5230 bucket \u6642\u76f4\u63a5\u6aa2\u67e5 bucket \u662f\u5426\u542b\u6709\u540c\u6a23\u7684\u6578\u5b57\uff0c\u5982\u679c\u662f\u7684\u8a71\u5c31\u628a\u524d\u9762\u7684\u780d\u6389\u5c31\u597d\uff0c\u9019\u4e26\u4e0d\u6703\u5f71\u97ff\u6307\u91dd\u6240\u7dad\u8b77\u7684\u55ae\u8abf\u6027\u3002</p> \u7df4\u7fd2\u984c \u6d1b\u8c37 P1108 \u4f4e\u4ef7\u8d2d\u4e70 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2 ,\\ldots ,a_n\\)\uff0c\u8f38\u51fa\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684\u6700\u9577\u4e0b\u964d\u5b50\u5e8f\u5217</p> <p>\\(n\\le 5000\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nvector&lt;int&gt; get_lis(vector&lt;int&gt;&amp; a) {\n    int n = a.size();\n    vector&lt;int&gt; dp(n);\n    vector&lt;int&gt; v;\n    for (int i = 0; i &lt; n; i++) {\n        if (v.empty() || v.back() &lt; a[i]) {\n            v.push_back(a[i]);\n            dp[i] = v.size();\n        } else {\n            auto pos = lower_bound(v.begin(), v.end(), a[i]);\n            dp[i] = pos - v.begin() + 1;\n            *pos = a[i];\n        }\n    }\n    return dp;\n}\n\nvoid findNumberOfLIS(vector&lt;int&gt;&amp; a) {\n    int n = a.size();\n    vector&lt;int&gt; dp = get_lis(a);\n    vector&lt;int&gt; cnt(n + 1);\n    vector&lt;int&gt; pos(n + 1);\n    vector&lt;vector&lt;int&gt;&gt; bucket(n + 1);\n    vector&lt;int&gt; bucket_sum(n + 1);\n\n    for (int i = 0; i &lt; n; i++) {\n        int len = dp[i];\n        if (len == 1) {\n            cnt[i] = 1;\n        } else {\n            while (pos[len - 1] &lt; bucket[len - 1].size() &amp;&amp; a[bucket[len - 1][pos[len - 1]]] &gt;= a[i]) {\n                bucket_sum[len - 1] -= cnt[bucket[len - 1][pos[len - 1]]];\n                pos[len - 1]++;\n            }\n            cnt[i] = bucket_sum[len - 1];\n        }\n        if (bucket[len].size() &amp;&amp; a[bucket[len].back()] == a[i]) {\n            bucket_sum[len] -= cnt[bucket[len].back()];\n            cnt[bucket[len].back()] = 0;\n            bucket[len].pop_back();\n        }\n        bucket[len].push_back(i);\n        bucket_sum[len] += cnt[i];\n    }\n    int lis_len = *max_element(dp.begin(), dp.end());\n    int ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (dp[i] == lis_len) {\n            ans += cnt[i];\n        }\n    }\n    cout &lt;&lt; lis_len &lt;&lt; ' ' &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    int mx = *max_element(a.begin(), a.end());\n    for (int i = 0; i &lt; n; i++) {\n        // \u984c\u76ee\u8981\u6c42\u6700\u9577\u4e0b\u964d\u5b50\u5e8f\u5217\n        a[i] = mx - a[i];\n    }\n    findNumberOfLIS(a);\n}\n</code></pre>"},{"location":"dp/lis/#lis_2","title":"\u5fc5\u7d93 LIS","text":"CF 486 E. LIS of Sequence <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2 ,\\ldots ,a_n\\)\uff0c\u554f\u5c0d\u65bc\u6bcf\u4e00\u9805 \\(a_i\\) \u662f\u5c6c\u65bc\u54ea\u500b type</p> <ul> <li> <p>\\(\\text{type 1: }\\) \u5728\u6bcf\u4e00\u500b LIS \u90fd\u4e00\u5b9a\u5305\u542b \\(a_i\\)</p> </li> <li> <p>\\(\\text{type 2: }\\) \u5728\u81f3\u5c11\u4e00\u500b LIS \u5305\u542b \\(a_i\\)</p> </li> <li> <p>\\(\\text{type 3: }\\) \\(a_i\\) \u5b8c\u5168\u4e0d\u5728\u4efb\u4f55 LIS \u4e4b\u4e2d</p> </li> </ul> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u4ee4 \\(L[i],R[i]\\) \u5206\u5225\u4ee3\u8868\u4ee5 \\(a_i\\) \u7d50\u5c3e\uff0c\u4ee5 \\(a_i\\) \u958b\u982d\u7684 LIS \u9577\u5ea6</p> <p>\u5982\u679c \\(a_i\\) \u5728 LIS \u4e2d\u5c31\u4ee3\u8868 : LIS \u9577\u5ea6 \\(= L[i]+R[i]-1\\)</p> <p>\u9019\u6a23\u5c31\u53ef\u4ee5\u5224\u65b7\u662f\u4e0d\u662f type 3 \u4e86\u3002\u82e5\u70ba type 1\uff0c\u4ee3\u8868 \\(L[i]\\) \u552f\u4e00\uff0c\u5426\u5247\u5982\u679c\u6709\u4eba \\(L[i]=L[j]\\) \u90a3\u5f8c\u9762\u7684 \\(R[i]\\) \u5169\u500b\u90fd\u53ef\u4ee5\u63a5</p> code <pre><code>int getPos (vector&lt;int&gt; &amp;lis, int x) {\n    return lower_bound(lis.begin(), lis.end(), x) - lis.begin();\n}\n\nvoid solve () {\n    cin &gt;&gt; n;\n    a.resize(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }     \n\n    // \u7d50\u5c3e\u7684 LIS\n    vector&lt;int&gt; lis;\n    int len = 0, cur = 0;\n    for (int i = 0; i &lt; n; i++) {\n        l[i] = getPos(lis, a[i]) + 1;\n        if (l[i] - 1 &lt; lis.size()) lis[l[i] - 1] = a[i];\n        else lis.pb(a[i]);\n        len = max(len, l[i]);\n    }\n\n    // \u958b\u982d\u7684 LIS\n    // \u5f9e\u5f8c\u9762\u770b\u904e\u4f86\u905e\u6e1b, \u52a0\u4e86\u8ca0\u865f\u76f8\u7576\u65bc\u905e\u589e\n    lis.clear();\n    cur = m - 1;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        r[i] = getPos(lis, -a[i]) + 1;\n        if (r[i] - 1 &lt; lis.size()) lis[r[i] - 1] = -a[i];\n        else lis.pb(-a[i]);\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        if (l[i] + r[i] - 1 == len) {\n            cnt[l[i]]++;\n        }\n        else // type 3\n    }\n    for (int i = 0; i &lt; n; i ++) {\n        if (l[i] + r[i] - 1 == len) {\n            if (cnt[l[i]] == 1) // type 1\n            else // type 2\n        }\n    }\n}\n</code></pre> CS Academy Critical Cells <p>\u7d66\u4e00\u500b \\(n\\times m\\) \u7684 grid\uff0c\u5176\u4e2d\u6709 \\(k\\) \u683c\u662f\u7279\u6b8a\u683c\uff0c\u5f9e \\((1,1)\\) \u958b\u59cb\u8981\u8d70\u5230 \\((n,m)\\)\uff0c\u6bcf\u6b21\u53ef\u5411\u53f3\uff0c\u6216\u5411\u4e0b\u79fb\u52d5\u4e00\u683c\uff0c\u76ee\u6a19\u662f\u8d70\u904e\u8d8a\u591a\u683c\u7279\u6b8a\u8d8a\u597d\u3002\u554f\u6709\u5e7e\u500b\u7279\u6b8a\u683c\u662f\u79fb\u9664\u4e4b\u5f8c\u80fd\u8d70\u904e\u7684\u6700\u5927\u7279\u6b8a\u683c\u6578\u91cf\u6703\u6e1b\u5c11</p> <p>\\(1\\le n, m\\le 10^9, 1\\le k\\le 10^5\\)</p> \u601d\u8def <p>\u76f4\u63a5\u628a \\(k\\) \u500b\u7279\u6b8a\u683c\u7684\u5ea7\u6a19 \\((x,y)\\) \u7576\u6210\u4e0a\u9762\u90a3\u500b\u554f\u984c\u505a\u5c31\u597d</p>"},{"location":"dp/lis/#k-lis","title":"\u5207 k \u6bb5 LIS","text":"\u554f\u984c <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2 ,\\ldots ,a_n\\)\uff0c\u548c \\(k\\)\uff0c\u5c07\u9663\u5217 a \u5206\u6210 k \u6bb5\uff0c\u6bcf\u6bb5\u5404\u81ea\u6c42 LIS\uff0c\u76ee\u6a19\u662f\u8b93 k \u6bb5 LIS \u9577\u5ea6\u7e3d\u548c\u6700\u5927</p> <p>\\(n\\times k \\le 10^5\\)</p> \u601d\u8def <p>\\(dp(k, i)=\\) \\(a_1 , \\ldots ,a_n\\) \u5206\u6210 \\(k\\) \u6bb5\u7684\u6700\u597d\u7b54\u6848\uff0c\\(a_i\\) \u4e00\u5b9a\u8981\u9078</p> <p>\u8f49\u79fb\u5f0f</p> \\[ dp(k, i) = \\max \\begin{cases} dp(k, j) + 1 \\\\ dp(k - 1, j) + 1 \\text{ if } a_j \\ge a_i\\end{cases} \\] <p>\u8907\u96dc\u5ea6 \\(O(n\\times k)\\times O(\\log n)\\)</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nstruct BIT {\n    int len;\n    vector&lt;int&gt; bit;\n    // b[x] : \u67d0\u500b\u9700\u8981\u5feb\u901f\u8655\u7406\u7684\u9663\u5217\n    // bit[x] = min(b[x - lowbit(x) + 1] ~ b[x])\n\n    BIT(int n) {\n        len = n;\n        bit.resize(n + 1);\n    }\n    inline int lowbit(int x) {\n        return x &amp; (-x);\n    }\n    void update(int pos, int val) {  // \u628a b[pos] \u8ddf val \u53d6 max\n        for (; pos &lt;= len; pos += lowbit(pos)) {\n            bit[pos] = max(bit[pos], val);\n        }\n    }\n    int prefix_max(int pos) {  // \u627e b[1] ~ b[pos] \u6700\u5927\u503c\n        int ans = 0;\n        for (; pos &gt; 0; pos -= lowbit(pos)) {\n            ans = max(ans, bit[pos]);\n        }\n        return ans;\n    }\n};\n\nint solve(int n, int K, const vector&lt;int&gt; &amp;a) {\n    vector&lt;vector&lt;int&gt;&gt; dp(K + 1, vector&lt;int&gt;(n, 0));\n\n    for (int k = 1; k &lt;= K; k++) {\n        // \u8003\u616e\u958b\u65b0\u7684\u4e00\u6bb5\n        int mx = 0;\n        for (int i = 0; i &lt; n; i++) {\n            dp[k][i] = max(mx + 1, dp[k - 1][i]);\n            mx = max(mx, dp[k - 1][i]);\n        }\n\n        // \u8003\u616e\u524d\u4e00\u500b\u9078\u7684\u6771\u897f\u5728\u540c\u6bb5\n        BIT DS(n);  // b[i] = \u7528\u4e86 k \u6bb5\uff0c\u4e14\u7d50\u5c3e\u6578\u503c\u70ba b[i] \u7684\u7b54\u6848\n        for (int i = 0; i &lt; n; i++) {\n            // \u5feb\u7684\u505a\u6cd5\n            dp[k][i] = max(dp[k][i], DS.prefix_max(a[i] - 1) + 1);\n            DS.update(a[i], dp[k][i]);\n\n            // \u6162\u7684\u505a\u6cd5\n            /*\n            for (int j = 0; j &lt; i; j++) {\n                if (a[j] &lt; a[i]) {\n                    dp[k][i] = max(dp[k][i], dp[k][j] + 1);\n                }\n            }\n            */\n        }\n    }\n    return *max_element(dp[K].begin(), dp[K].end());\n}\n\nint main() {\n    int n, K;\n    vector&lt;int&gt; a;\n\n    cin &gt;&gt; n &gt;&gt; K;\n    a = vector&lt;int&gt;(n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\n\n    // \u96e2\u6563\u5316\uff1a\u628a a[i] \u6578\u503c\u7bc4\u570d\u8f49\u70ba 0~(n-1)\n    vector&lt;int&gt; t = a;\n    sort(t.begin(), t.end());\n    for (int &amp;x : a) {\n        x = 1 + lower_bound(t.begin(), t.end(), x) - t.begin();\n    }\n\n    int ans = solve(n, K, a);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> CF 650 D. Zip-line <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\\(\\text{query}(i,x):\\) \u82e5\u5c07 \\(a_i\\) \u6539\u6210 \\(x\\)\uff0cLIS\\((a)\\) \u662f\u591a\u5c11</li> </ul> <p>\\(n,m\\le 4\\times 10^5, 1\\le a_i, x\\le 10^9\\)</p> \u601d\u8def <p>\u5c07\u4ee5\u4e0b\u5169\u7a2e\u60c5\u6cc1\u53d6 max \u5c31\u662f\u6539\u8b8a\u5f8c\u7684 LIS \u9577\u5ea6</p> <ul> <li> <p>\\(a_i\\) \u662f\u5fc5\u7d93\u7684\uff0c\u7b54\u6848\u8b8a\u6210 lis - 1</p> </li> <li> <p>\u5305\u542b \\(a_i = x\\) \u7684 lis \u9577\u5ea6</p> </li> </ul> <p>\u5176\u4e2d\uff0c\u5305\u542b \\(a_i = x\\) \u7684 lis \u53ef\u4ee5\u5728\u5efa l[ ], r[ ] \u7684\u6642\u5019\u9806\u4fbf\u505a\u597d\uff0c\u8a73\u898b\u4ee3\u78bc</p> <p>\u5c0f\u5fc3\u9019\u984c\u6703\u5361\u6642\u9593</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nstruct qry {\n    int idx, val, id, ans;\n};\n\nconst int INF = 9e18;\nconst int maxn = 4e6 + 5;\nint n, m;\nvector&lt;int&gt; a;\nvector&lt;qry&gt; q;\nint l[maxn], r[maxn], all[maxn], cnt[maxn];\n\nint getPos(vector&lt;int&gt; &amp;lis, int x) {\n    return lower_bound(lis.begin(), lis.end(), x) - lis.begin();\n}\n\nvoid solve() {\n    scanf(\"%lld%lld\", &amp;n, &amp;m);\n    a.resize(n);\n    q.resize(m);\n    for (int i = 0; i &lt; n; i++) {\n        scanf(\"%lld\", &amp;a[i]);\n    }\n    for (int i = 0; i &lt; m; i++) {\n        scanf(\"%lld%lld\", &amp;q[i].idx, &amp;q[i].val);\n        q[i].idx--;\n        q[i].id = i;\n    }\n\n    sort(q.begin(), q.end(), [](qry a, qry b)\n         { return a.idx &lt; b.idx; });\n    vector&lt;int&gt; lis;\n    int len = 0, cur = 0;\n    for (int i = 0; i &lt; n; i++) {\n        while (cur &lt; m &amp;&amp; q[cur].idx == i) {\n            q[cur++].ans += getPos(lis, q[cur].val);\n        }\n        l[i] = getPos(lis, a[i]) + 1;\n        if (l[i] - 1 &lt; lis.size()) {\n            lis[l[i] - 1] = a[i];\n        } else {\n            lis.pb(a[i]);\n        }\n        len = max(len, l[i]);\n    }\n\n    lis.clear();\n    cur = m - 1;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        while (cur &gt;= 0 &amp;&amp; q[cur].idx == i) {\n            q[cur--].ans += getPos(lis, -q[cur].val);\n        }\n        r[i] = getPos(lis, -a[i]) + 1;\n        if (r[i] - 1 &lt; lis.size()) {\n            lis[r[i] - 1] = -a[i];\n        } else {\n            lis.pb(-a[i]);\n        }\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        if (l[i] + r[i] - 1 == len) {\n            cnt[l[i]]++;\n        }\n    }\n    for (int i = 0; i &lt; n; i++) {\n        if (l[i] + r[i] - 1 == len) {\n            all[i] = (cnt[l[i]] == 1);\n        }\n    }\n\n    sort(q.begin(), q.end(), [](qry a, qry b)\n         { return a.id &lt; b.id; });\n    for (int i = 0; i &lt; m; i++) {\n        printf(\"%lld\\n\", max(q[i].ans + 1, len - all[q[i].idx]));\n    }\n}\n\nsigned main() {\n    solve();\n}\n</code></pre>"},{"location":"dp/lis/#_6","title":"\u4e8c\u7dad\u504f\u5e8f","text":""},{"location":"dp/lis/#_7","title":"\u56b4\u683c","text":"\u554f\u984c\uff08Box Stacking Problem\uff09 <p>\u7d66\u4f60 \\(n\\) \u500b \\((x,y)\\)\uff0c\u554f\u4f60\u6700\u591a\u53ef\u4ee5\u9078\u5e7e\u500b\uff0c\u6eff\u8db3 \\(x_i&lt;x_j\\) \u4e14 \\(y_i &lt; y_j\\)</p> \u601d\u8def <p>\u5c07 \\((x,y)\\) \u5148\u6309\u7167 \\(x\\) \u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5c0d\u65bc \\(x\\) \u76f8\u540c\u7684\uff0c\u5c07 \\(y\\) \u5927\u5230\u5c0f\u6392\u5e8f\uff08\u9019\u6a23\u624d\u4e0d\u6703\u9078\u5230\u5169\u500b \\(x\\) \u4e00\u6a23\u7684\uff0c\u5982\u5716\uff09</p> <p> </p> <p>\u9019\u6a23\u5c31\u53ef\u4ee5\u5c07\u554f\u984c\u8b8a\u6210\u7531 \\(y\\) \u7d44\u6210\u7684 LIS \u9577\u5ea6</p> CF 4 D. Mysterious Present <p>\u7d66\u4f60 \\(n\\) \u500b \\((x,y)\\)\uff0c\u554f\u4f60\u6700\u591a\u53ef\u4ee5\u9078\u5e7e\u500b\uff0c\u6eff\u8db3 \\(x_i&lt;x_j\\) \u4e14 \\(y_i &lt; y_j\\)\uff0c\u8f38\u51fa\u9078\u7684\u7de8\u865f</p> <p>\\(1\\le n\\le 5000,1\\le w,h\\le 10^6\\)</p>"},{"location":"dp/lis/#_8","title":"\u975e\u56b4\u683c","text":"APCS 2021 1 \u6708 p4. \u98db\u9ec3\u9a30\u9054 <p>\u7d66\u4f60 \\(n\\) \u500b \\((x,y)\\)\uff0c\u554f\u4f60\u6700\u591a\u53ef\u4ee5\u9078\u5e7e\u500b\uff0c\u6eff\u8db3 \\(x_i\\le x_j\\) \u4e14 \\(y_i \\le y_j\\)</p> \u601d\u8def <p>\u5c07 \\((x,y)\\) \u5148\u6309\u7167 \\(x\\) \u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5c0d\u65bc \\(x\\) \u76f8\u540c\u7684\uff0c\u5c07 \\(y\\) \u5c0f\u5230\u5927\u6392\u5e8f\uff08\u53ef\u4ee5\u9078\u5230\u5169\u500b \\(x\\) \u4e00\u6a23\u7684\uff09\u3002\u5728\u9078 \\(y\\) \u7684\u6642\u5019\uff0c\u8981\u4f7f\u7528 upper bound\uff0c\u56e0\u70ba \\(y\\) \u76f8\u540c\u7684\u662f\u53ef\u4ee5\u4e00\u8d77\u9078\u7684</p>"},{"location":"dp/lis/#lcs-lis","title":"LCS \u8f49 LIS","text":"LCS - \u51fa\u73fe\u4e00\u6b21 <p>\u7d66\u5169\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a,b\\)\uff0c\u6c42 LCS \u9577\u5ea6</p> <p>\\(n\\le 5\\times 10^5,1\\le a_i, b_i\\le n,\\) \u540c\u7a2e\u6578\u5b57\u51fa\u73fe\u5728\u9663\u5217 1 \u6b21</p> \u601d\u8def <p>\u5c07\u9663\u5217 \\(a\\) \u5f9e\u5de6\u5230\u53f3\u7de8\u865f \\(1\\sim n\\)\uff0c\u5c07 \\(b_i\\) \u7de8\u865f\u70ba \\(b_i\\) \u9019\u500b\u6578\u503c\u5728 \\(a\\) \u5167\u7684\u7de8\u865f\uff0c\u5982\u5716</p> <p> </p> <p>\u9019\u6a23\u5c31\u53ef\u4ee5\u7528\u7de8\u865f\u7d44\u6210\u7684\u65b0\u9663\u5217\u6c42 LIS</p> LCS - \u51fa\u73fe\u5169\u6b21 <p>\u7d66\u5169\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a,b\\)\uff0c\u6c42 LCS \u9577\u5ea6</p> <p>\\(n\\le 5\\times 10^5,1\\le a_i, b_i\\le n,\\) \u540c\u7a2e\u6578\u5b57\u51fa\u73fe\u5728\u9663\u5217 1 \u6216 2 \u6b21</p> \u601d\u8def <p>\u5c07\u540c\u4e00\u7a2e\u6578\u503c\u51fa\u73fe\u7684\u7de8\u865f\u53cd\u8457\u653e\uff0c\u9019\u6a23\u53ef\u4ee5\u4fdd\u8b49\u5c0f\u7684\u4e00\u5b9a\u6703\u88ab\u5148\u9078</p> <p> </p> Sprout OJ 421 <p>\u7d66\u9577\u5ea6 \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u53ef\u4ee5\u5c07\u4efb\u4e00\u500b\u6578\u5b57\u8b8a\u5169\u500d\uff0c\u8f38\u51fa\u6bcf\u500b\u6578\u5b57\u5747\u5927\u65bc \\(m\\) \u7684\u6700\u9577\u975e\u56b4\u683c\u905e\u589e\u5e8f\u5217\u9577\u5ea6</p> <p>\\(1\\le n\\le 5\\times 10^5, 1\\le m, a_i \\le 10^9\\)</p> \u601d\u8def <p>\u5c07 \\(2\\times a_i, a_i\\) \u4f9d\u5e8f\u653e\u5230\u65b0\u9663\u5217\u88e1\u9762\uff0c\u5728\u65b0\u9663\u5217\u505a</p> <p> </p> <p>\u7136\u5f8c\u518d\u7528 upper bound \u6c42 LIS \u5c31\u597d\u4e86</p> TOI \u521d\u9078 2021 pC. \u7c89\u5237\u8b77\u6b04 <p>\u7d66\u5169\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a,b\\)\uff0c\u6578\u5b57\u6070\u597d\u90fd\u51fa\u73fe\u5728 \\(a,b\\) \u5404\u4e00\u6b21\uff0c\u4f60\u53ef\u4ee5\u5728 \\(a,b\\) \u4e4b\u9593\u5c0d\u540c\u7a2e\u6578\u5b57\u9023\u7dda\uff0c\u554f\u7dda\u4e0d\u80fd\u4ea4\u53c9\u4e0b\u6700\u591a\u80fd\u9023\u5e7e\u689d\uff0c\u8f38\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848</p> <p>\\(n\\le 2\\times 10^5,0\\le a_i, b_i\\le 10^9\\)</p> \u601d\u8def <p>\u4e0d\u4ea4\u53c9 iff \\(i_a &lt; i_b\\) \u4e14 \\(j_a &lt; j_b\\)\uff0c\u5c31\u8b8a\u6210 LCS \u51fa\u73fe\u4e00\u6b21\u7684\u554f\u984c\u4e86</p> <p>\u5728\u52a0\u4e0a\u4e0a\u9762\u63d0\u5230\u7684\u5224\u5b57\u5178\u5e8f\u5c31\u53ef\u4ee5\u4e86</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\nusing namespace std; \nint a[200005], b[200005];\nint dp[200005];\nmap&lt;int,int&gt;mp;\nvector&lt;int&gt;s[200005];\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1 ; i &lt;= n ; i++) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 1 ; i &lt;= n ; i++) {\n        cin &gt;&gt; b[i];\n        mp[b[i]] = i;\n    }\n    vector&lt;int&gt;v;\n    vector&lt;int&gt;arr;\n    int mx = 0;\n    for (int i = n ; i &gt;= 1 ; i--) {\n        int pos = mp[a[i]];\n        arr.push_back(pos);\n        pos = n - 1 - pos;\n        if (!v.size() || pos &gt; v.back()) {\n            v.push_back(pos);\n            dp[i] = v.size();\n        }\n        else {\n            dp[i] = lower_bound(v.begin(), v.end(), pos) - v.begin() + 1;\n            *lower_bound(v.begin(), v.end(), pos) = pos;\n        }\n        s[dp[i]].push_back(i);\n        mx = max(mx, dp[i]);\n    }\n    int pos1 = 0, pos2 = 0;\n    for (int i = mx ; i &gt;= 1 ; i--) {\n        int ans = 0, pos = 0;\n        for (auto &amp;j : s[i]) {\n            if (a[j] &gt; ans &amp;&amp; j &gt; pos1 &amp;&amp; mp[a[j]] &gt; pos2) {\n                pos = j;\n                ans = a[j];\n            }\n        }\n        cout &lt;&lt; ans &lt;&lt;' ';\n        pos1 = pos;\n        pos2 = mp[a[pos]];\n    }\n}\n</code></pre>"},{"location":"dp/lis/#dilworths-theorom","title":"Dilworth's theorom","text":"Dilworth's theorom"},{"location":"dp/lis/#_9","title":"\u4f8b\u984c","text":"LIS deletion <p>\u7d66\u4e00\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a\\)\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5f9e \\(a\\) \u522a\u6389\u4e00\u500b\u56b4\u683c\u905e\u589e\u7684\u5b50\u5e8f\u5217\uff0c\u6c42\u6700\u5c11\u5e7e\u6b21\u624d\u80fd\u522a\u5b8c</p> <p>\\(n\\le 2\\times 10^5, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u7b54\u6848\u76f8\u7576\u65bc\u6c42 LDS</p>"},{"location":"dp/lis/#_10","title":"\u984c\u76ee","text":"CSES - Increasing Subsequence II <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u554f\u6709\u5e7e\u500b\u905e\u589e\u6578\u5217</p> <p>\\(n\\le 2\\times 10^5, a_i\\le 10^9\\)</p> \u601d\u8def <p>dp[i] = \u770b 1 ~ i\uff0c\u4ee5 a[i] \u70ba\u7d50\u5c3e\u7684\u905e\u589e\u6578\u5217\u6709\u5e7e\u500b</p> <p>\u8f49\u79fb dp[i] = sum(dp[j] | j &lt; i &amp;&amp; a[j] &lt; a[i] )</p> Atcoder arc149 B. Two LIS Sum <p>\u7d66\u4f60\u5169\u500b \\(1\\ldots n\\) \u7684 permutation \\(a, b\\)\uff0c\u4f60\u53ef\u4ee5\u505a\u4ee5\u4e0b\u64cd\u4f5c\u4efb\u610f\u6b21</p> <ul> <li>\u9078\u4e00\u500b \\(i\\)\uff0cswap\\((a_i, a_{i + 1})\\) \u4e26 swap\\((b_i, b_{i + 1})\\)</li> </ul> <p>\u8f38\u51fa LIS\\((a)+\\) LIS\\((b)\\) \u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(2\\le n\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u8003\u616e\u6700\u5f8c\u7684\u7b54\u6848 LIS \u9078\u64c7\u7684\u6771\u897f\u6703\u662f\u4ec0\u9ebc\uff0c\u5982\u679c\u6709\u6c92\u9078\u7684\uff0c\u8b93 a \u628a\u4ed6\u9078\u8d77\u4f86\u4e00\u5b9a\u66f4\u597d  </p> <p>\u5982\u679c b \u6709\u9078 a \u6c92\u9078\u7684\uff0c\u8b93 a \u9078\u7b54\u6848\u4e00\u5b9a\u4e0d\u6703\u8b8a\u5dee</p> <p> </p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5f97\u51fa\u4e00\u500b\u7d50\u8ad6 : \u5148\u5c07 a sort \u597d\uff08b \u4e5f\u8ddf\u8457 a \u7684\u9806\u5e8f\u8b8a\uff09\uff0c\u7b54\u6848\u5c31\u662f |a| + LIS(b)</p> Sloane's Box Stacking Problem Atcoder dp contest X. Tower <p>\u6709 \\(n\\) \u500b\u7bb1\u5b50\uff0c\u6bcf\u500b\u7bb1\u5b50\u6709 \\((w,s,v)\\) \u4ee3\u8868\u91cd\u91cf\u3001\u6297\u58d3\u91cf\u3001\u9ad8\u5ea6\u3002\u4e00\u500b\u7bb1\u5b50\u4e0a\u65b9\u7684\u91cd\u91cf\u7e3d\u548c\uff0c\u4e0d\u80fd\u8d85\u904e\u9019\u500b\u7bb1\u5b50\u7684\u6297\u58d3\u529b\u91cf\u3002\u554f\u6700\u591a\u80fd\u758a\u591a\u9ad8 ?</p> <p>\\(1\\le n\\le 10^3,1\\le w_i, s_i\\le 10^4,1\\le v_i\\le 10^9\\)</p> \u601d\u8def <p>\u8003\u616e Exchange Arguements\uff0c\u6211\u5011\u62ff\u5169\u500b\u7bb1\u5b50 \\(i\\) \u8ddf \\(j\\) \u4f86\u6bd4\u8f03\u3002\\(j\\) \u53ef\u4ee5\u653e\u6bd4\u8f03\u4e0b\u9762 iff \\(s_i - w_j &lt; s_j - w_i\\)\u3002</p> <p>\u7576\u6211\u5011\u5c07\u9663\u5217\u7528\u4e0a\u9762\u7684 Exchange Arguements sort \u597d\u5f8c\uff0c\u6211\u5011\u505a\u985e\u4f3c\u80cc\u5305\u554f\u984c\uff0c\\(dp(i,j)=\\) \u8003\u616e \\(1\\ldots i\\)\uff0c\u91cd\u91cf\u7e3d\u548c \\(\\le j\\) \u80fd\u53d6\u5230\u7684\u6700\u5927\u9ad8\u5ea6\u3002\u8f49\u79fb\u7684\u8a71\u4e00\u6a23\u8003\u616e\u53d6 \\(i\\) \u6216\u4e0d\u53d6 \\(i\\)\uff0c\u53d6 \\(i\\) \u7684\u8a71\u5269\u4e0b\u7684\u91cd\u91cf\u5c31\u5fc5\u9808 \\(\\le s_i\\)</p> \\[dp(i, j)=\\max \\begin{cases} dp(i - 1, j - w_i)+v_i \\space \\text{if}\\space 0 \\le j - w_i \\le s_i \\\\ dp(i - 1, j)\\end{cases}\\] code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nusing ll = long long;\n\nconst int N = 1010,M = 20010;\nstruct faner {\n    int w, s, v;\n} a[N];\nll f[M], ans;\n\nbool cmp(faner a, faner b) {\n    return a.s + a.w &lt; b.s + b.w;\n}\n\nint main() {\n    int n; \n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i].w &gt;&gt; a[i].s &gt;&gt; a[i].v;\n    }\n    sort(a + 1, a + n + 1, cmp);\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = M - 1; j &gt;= a[i].w; j--) {\n            if (a[i].s + a[i].w &gt;= j) {\n                f[j] = max(f[j], f[j - a[i].w] + a[i].v);\n            }\n        }\n    }       \n    for (int i = 1; i &lt; M; i++) {\n        ans = max(ans, f[i]);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u7af9\u79d1\u5be6\u4e2d 2023 \u6821\u5167\u8cfd pB. \u69cb\u9020 LIS <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u4e0a\u6709\u4e00\u500b\u672a\u5b9a\u7684\u6578 \\(p_i\\)\uff0c\u69cb\u9020 \\(p=1\\ldots n\\) \u7684 permutation \u4f7f\u5f97 :</p> <ul> <li>\u5f9e root \u5230 \\(i\\)\uff0c\u4ee5 \\(p_i\\) \u7d50\u5c3e\u7684 LIS \u9577\u5ea6\u70ba \\(b_i\\)</li> </ul> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5148\u5206\u6790 :</p> <ul> <li> <p>\u5c0d\u65bc \\(j&lt;i\\) \u4e14 \\(b_j=b_i\\) \uff0c\u8981\u6eff\u8db3 \\(p_j&gt;p_i\\)</p> </li> <li> <p>\u5c0d\u65bc \\(j&lt;i\\) \u4e14 \\(b_j=b_i-1\\)\uff0c\u81f3\u5c11\u5b58\u5728\u4e00\u500b \\(p_j&lt;p_i\\)</p> </li> </ul> <p>\u8003\u616e\u5efa\u5716\uff0c\u6211\u5011\u5f9e\u5c0f\u7684\u9023\u5230\u5927\u7684\u3002\u53ef\u4ee5\u89c0\u5bdf\u5230\u5c0d\u65bc\u540c\u6a23 \\(b_i\\) \u7684 \\(i\\)\uff0c\u8d8a\u5f8c\u9762\u7684 \\(p_i\\) \u8d8a\u5c0f\uff0c\u6240\u4ee5\u4e0a\u9762\u5169\u500b\u9650\u5236\u5176\u5be6\u90fd\u53ea\u8981\u9023\u5230\u6700\u5f8c\u9762\u6eff\u8db3\u689d\u4ef6\u7684\u5373\u53ef\u3002</p> <ul> <li> <p>\\(i\\to j\\)</p> </li> <li> <p>\\(j\\to i\\)</p> </li> </ul> <p>\u9019\u6a23\u6703\u5f62\u6210\u4e00\u500b DAG\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f topo order</p> CS Academy - Strictly Increasing Array <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5c07\u67d0\u9805\u8b8a\u6210\u4efb\u610f\u6574\u6578\uff0c\u554f\u6700\u5c11\u5e7e\u6b21\u64cd\u4f5c\u53ef\u4f7f\u9663\u5217\u56b4\u683c\u905e\u589e</p> <p>\\(n\\le 10^5, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u5c07\u554f\u984c\u8f49\u63db\u6210\u300c\u6700\u591a\u53ef\u4ee5\u4e0d\u6539\u52d5\u5e7e\u500b\u6578\u300d\u3002\u82e5\u4e0d\u52d5\u7684\u76f8\u9130\u5169\u9805\u70ba \\(i,j\\) \u5176\u4e2d \\((i&lt;j)\\)\uff0c\u90a3\u5fc5\u9808\u6eff\u8db3 \\(j-i \\le a_j-a_i\\)\uff0c\u9019\u6a23\u4e2d\u9593\u624d\u6709\u8fa6\u6cd5\u585e\u503c\u57df\u9032\u53bb\u3002</p> <p>\u6211\u5011\u5c07\u5f0f\u5b50\u6574\u7406\u4e00\u4e0b\u8b8a\u6210 \\(a_i - i \\le a_j-j\\)\uff0c\u4e5f\u5c31\u662f\u5728 \\(a_i'=a_i-i\\) \u4e0a\u627e\u6700\u9577\u975e\u56b4\u683c\u905e\u589e\u5b50\u5e8f\u5217</p> LMIO 2019 - Rabbit Carrot <p>\u6709 \\(n\\) \u500b\u67f1\u5b50\uff0c\u5f9e\u5de6\u5230\u53f3\u9ad8\u5ea6\u5206\u5225\u70ba \\(a_1, \\ldots ,a_n\\)\uff0c\u5f9e\u6700\u5de6\u908a\u9ad8\u5ea6 \\(0\\) \u958b\u59cb\uff0c \u76ee\u6a19\u662f\u8df3\u5230\u6700\u5f8c\u4e00\u500b\u67f1\u5b50\u3002\u6700\u591a\u53ea\u80fd\u5411\u4e0a\u8df3 \\(h\\)\uff0c\u5411\u4e0b\u8df3\u7121\u9650\u5236\uff0c\u554f\u6700\u5c11\u6539\u52d5\u5e7e\u500b\u67f1\u5b50\u7684\u9ad8\u5ea6\u624d\u80fd\u9054\u5230\u76ee\u6a19\u3002</p> \u601d\u8def <p>\u56e0\u70ba\u7b97\u6709\u5e7e\u500b\u8981\u6539\u6211\u5011\u9084\u8981\u53bb\u60f3\u8981\u6539\u6210\u54ea\u500b\u9ad8\u5ea6\u6bd4\u8f03\u597d\uff0c\u554f\u984c\u76f8\u7576\u8907\u96dc\uff0c\u4e0d\u5982\u53cd\u5411\u601d\u8003\uff0c\u5c07\u554f\u984c\u8f49\u63db\u6210\u300c\u6700\u591a\u53ef\u4ee5\u4e0d\u6539\u52d5\u5e7e\u500b\u300d\u3002\\(i\\) \u8981\u8df3\u5230 \\(j\\) \u4e0a\u9762\uff0c\u4e2d\u9593\u9084\u6709 \\((j-i)\\) \u6b21\u6a5f\u6703\u53ef\u4ee5\u722c\u9ad8 \\(h\\)\uff0c\u6240\u4ee5\u6211\u5011\u5217\u51fa \\(a_j\\le a_i+h\\cdot (j - i)\\)\u3002\u79fb\u5411\u53ef\u5f97 \\(a_j-h\\cdot j\\le a_i -h\\cdot i\\)\uff0c\u6211\u5011\u4ee4 \\(a_i'=a_i-h\\cdot i\\)\uff0c\u7528 \\(a_i'\\) \u627e\u6700\u9577\u975e\u56b4\u683c\u905e\u589e\u5b50\u5e8f\u5217\u5373\u53ef\u3002</p> CSES - Collecting Numbers II <p>\u7d66\u4e00\u500b \\(1\\ldots n\\) permutation \\(a\\)\uff0c\u6bcf\u8f2a\u53ef\u4ee5\u5f9e \\(a\\) \u522a\u6389\u4e00\u500b\u905e\u589e\u7684\u5b50\u5e8f\u5217\uff0c\u4e00\u4e00\u5b9a\u8981\u5f9e \\(1\\) \u53d6\u5230 \\(n\\)\u3002\u6709 \\(q\\) \u7b46\u64cd\u4f5c\u5982\u4e0b :</p> <ul> <li>\\(\\text{swap}(i,j):\\) \u5c07 \\(a_i\\) \u8207 \\(a_j\\) swap\uff0c\u7136\u5f8c\u8f38\u51fa\u7576\u524d \\(a\\) \u6700\u5c11\u8981\u5e7e\u8f2a\u624d\u80fd\u53d6\u5b8c</li> </ul> <p>\\(n\\le 2\\times 10^5, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>2 \u5982\u679c\u518d 1 \u5f8c\u9762\u5c31\u53ef\u4ee5\u8ddf 1 \u4e00\u8d77\u53d6\uff0c\u5426\u5247\u5fc5\u9808\u518d\u8dd1\u4e00\u8f2a\uff0c\u6240\u4ee5\u518d\u6c92 swap \u7684\u60c5\u6cc1\u4e0b\u53ea\u8981\u8a08\u7b97 pos[a[i]] &gt; pos[a[i + 1]] \u7684\u6578\u91cf\u5373\u53ef\u3002\u6709 swap \u7684\u8a71\u518d\u597d\u597d\u7dad\u8b77\u4e00\u4e0b i, j \u8ddf\u4ed6\u5011\u524d\u5f8c\u7684\u8ca2\u737b\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nconst int INF = 9e18;\nconst int maxn = 2e5 + 5;\nint n, m, cnt;\nint a[maxn], pos[maxn];\nint up[maxn], down[maxn];\n\nvoid update(int u, int v) {\n    vector&lt;pii&gt; st;\n    if (a[u] &lt; n) st.pb({a[u], a[u] + 1});\n    if (a[v] &gt; 1) st.pb({a[v] - 1, a[v]});\n    if (a[u] &gt; 1) st.pb({a[u] - 1, a[u]});\n    if (a[v] &lt; n) st.pb({a[v], a[v] + 1});\n\n    pos[a[u]] = v;\n    pos[a[v]] = u;\n    swap(a[u], a[v]);\n    for (auto p = st.begin(); p != st.end(); p++) {\n        cnt -= up[p -&gt; F];\n        if (pos[p -&gt; F] &gt; pos[p -&gt; S])  cnt++;\n        up[p -&gt; F] = pos[p -&gt; F] &gt; pos[p -&gt; S];\n    }                                                           \n}\n\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        pos[a[i]] = i;\n    }\n    for (int i = 1; i &lt;= n - 1; i++) {\n        up[i] = pos[i] &gt; pos[i + 1];\n        if (up[i]) cnt++;\n    }\n    int u, v;\n    while (m--) {\n        cin &gt;&gt; u &gt;&gt; v;\n        update(u, v);\n        cout &lt;&lt; cnt + 1 &lt;&lt; \"\\n\";\n    }\n}\n\nsigned main() {\n    solve();\n}\n</code></pre>"},{"location":"dp/lis/#_11","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>AP325</p> </li> <li> <p>https://drive.google.com/file/d/1HaGN0aFsFLbgT6XkmZ-R7NS-LkWrobRt/view</p> </li> <li> <p>https://www.luogu.com.cn/training/215</p> </li> </ul>"},{"location":"dp/monotonous-queue/","title":"Monotonous queue","text":"<ul> <li>\u9694\u96e2\u63a1\u7926</li> </ul>"},{"location":"dp/problem/","title":"\u96dc\u984c\u6574\u7406","text":"2023 TOI 4 \u6a21 p2. \u6574\u9664\u5e8f\u5217 (Divide) <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots, a_n\\)\uff0c\u4f60\u53ea\u77e5\u9053\u6bcf\u500b\u6578\u5b57\u7684\u5176\u4e2d\u4e00\u500b character\uff0c\u8981\u69cb\u9020\u51fa\u9663\u5217\uff0c\u4f7f\u5f97\u76f8\u9130\u7684\u5169\u500b\u6578\u5b57\u4e92\u70ba\u56e0\u6578\u6216\u500d\u6578\u95dc\u4fc2\uff0c\u4e14\u88dc\u4e0a\u7684 character \u6578\u91cf\u8981\u8d8a\u5c11\u8d8a\u597d</p> <p>\\(2\\le n\\le 10^5\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u89c0\u5bdf\u5230\u6bcf\u4e00\u9805\u7684\u6578\u5b57\u90fd\u4e0d\u6703\u592a\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u731c\u4e00\u500b threshold T</p> <p>\u7136\u5f8c\u53bb dp(i, x) : 0~i \u8981\u8b93 a[i] = x \u6700\u5c11\u8981\u586b\u7684 character \u6578\u91cf</p> <p>f(i, k) : 0~i \u8981\u8b93 a[i]|k \u6216 k|a[i] \u6700\u5c11\u8981\u586b\u7684 character \u6578\u91cf</p> <p>f(i, k) = min{dp(i, x)} \u5176\u4e2d x|k or k|x \u4e14 dp(i, x) \u6709\u89e3</p> <p>dp(i + 1, k) = </p> <ul> <li> <p>k \u6709 b[i + 1]: f(i, k) + size(k) - 1</p> </li> <li> <p>otherwise: -1</p> </li> </ul> <p>\u53ef\u4ee5\u5148\u9810\u8655\u7406 0~T \u6bcf\u500b\u6578\u5b57\u6703\u4e0d\u6703\u51fa\u73fe\u67d0\u500b character exist[x][0~9]\u3002\u9019\u6a23\u5c0d\u65bc\u6bcf\u500b i \u90fd\u8981\u505a\u4e00\u6b21\u7be9\u6cd5\u5f9e dp(i, x) \u8f49\u79fb\u5230 f(i, k)\uff0c\u8907\u96dc\u5ea6 O(n * T * log(T))\u3002</p> CF 1860 D. Balanced String <p>\u7d66\u4f60\u4e00\u500b\u7531 01 \u7d44\u6210\u7684\u5b57\u4e32 s\uff0c\u5728\u4e00\u6b21\u64cd\u4f5c\u4e0b\uff0c\u4f60\u53ef\u4ee5 swap \u4efb\u610f\u5169\u9805\u3002\u554f\u6700\u5c11\u5e7e\u6b21\u64cd\u4f5c\u53ef\u8b93 s \u7684\u9006\u5e8f\u6578\u5c0d\u6578\u91cf\uff0810\uff09 = \u6b63\u5e8f\u6578\u5c0d\u6578\u91cf\uff0801\uff09</p> <p>\\(3\\le |s| \\le 100\\)</p> \u601d\u8def <p>\u5148\u60f3\u8003\u616e\u5c07\u9019\u500b\u5b57\u4e32 ramdom shuffle \u5f8c\uff0c\u600e\u9ebc\u8a08\u7b97\u6700\u5c11\u8981 swap \u5e7e\u6b21 ? \u5176\u5be6\u53ea\u8981\u770b a[i] != b[i] \u7684\u6578\u91cf\u9664\u4ee5 2 \u5373\u53ef\uff08\u56e0\u70ba\u6bcf\u6b21 swap \u4e00\u5b9a\u53ef\u4ee5\u63db\u597d\u5169\u500b\uff09</p> <p>dp[i][j][k] : \u4ee3\u8868\u5230\u7b2c i \u500b\u4f4d\u7f6e\u70ba\u6b62\u5171\u653e\u4e86 j \u500b 1\uff0c10 \u6578\u91cf\u70ba k\uff0c\u8ddf\u539f\u672c\u7684 a[i] != b[i] \u7684\u6578\u91cf\u6700\u5c11\u6709\u5e7e\u500b</p> <p>dp[i][j][k] \u8f49\u79fb\u5230 :</p> <ul> <li> <p>\u653e 0 : dp[i+1][j+1][k + j]</p> </li> <li> <p>\u653e 1 : dp[i+1][j][k]</p> </li> </ul> <p>\u9019\u6a23\u53ef\u80fd\u6703 MLE\uff0c\u8003\u616e\u5230 dp[i + 1][ ][ ] \u53ea\u7528\u5230 dp[i][ ][ ]\uff0c\u6240\u4ee5\u53ef\u4ee5\u6efe\u52d5\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define ll long long\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define pii pair&lt;int, int&gt;\nconst int mod = 998244353, N = 105;\n\nint dp[2][N][N * N];\n\nvoid solve() {\n    string s; cin &gt;&gt; s;\n    int n = s.length();\n    int tot = 0, cnt0 = 0, cnt1 = 0;\n    for (char c : s) {\n        (c == '0' ? cnt0 : cnt1)++;\n    }\n    tot = n * (n - 1) / 2;\n    tot -= cnt0 * (cnt0 - 1) / 2;\n    tot -= cnt1 * (cnt1 - 1) / 2;\n    assert(tot % 2 == 0);\n\n    for (int i = 0; i &lt; 2; ++i) {\n        for (int j = 0; j &lt; N; ++j) {\n            for (int k = 0; k &lt; N * N; ++k) {\n                dp[i][j][k] = 1 &lt;&lt; 30;\n            }\n        }\n    }\n\n    int now = 0;\n    dp[1][0][0] = 0;\n    for (int i = 0; i &lt; n; ++i) {\n        for (int j = 0; j &lt; N; ++j) {\n            for (int k = 0; k &lt; N * N; ++k) {\n                dp[now][j][k] = 1 &lt;&lt; 30;\n            }\n        }\n        for (int j = 0; j &lt;= n; ++j) {\n            for (int k = 0; k &lt;= n * (n - 1) / 2; ++k) {\n                if (dp[now ^ 1][j][k] &lt;= n) {\n                    int c0 = (s[i] == '1'), c1 = c0 ^ 1;\n                    // 0\n                    dp[now][j][k + j] = min(dp[now][j][k + j], dp[now ^ 1][j][k] + c0);\n                    // 1\n                    dp[now][j + 1][k] = min(dp[now][j + 1][k], dp[now ^ 1][j][k] + c1);\n                }\n            }\n        }\n        now ^= 1;\n    }\n    cout &lt;&lt; dp[now ^ 1][cnt1][tot / 2] / 2 &lt;&lt; '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> CF 1861 E. Non-Intersecting Subpermutations <p>\u7d66 \\(n,k\\)\uff0c\u5c0d\u65bc\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\)\uff0c\u6bcf\u500b\u5143\u7d20\u7686\u5728 \\(1\\ldots k\\) \u7684 array\uff0ccost \u7684\u8a08\u7b97\u65b9\u5f0f\u70ba\u300c\u6700\u591a\u53ef\u5207\u51fa\u5e7e\u6bb5 \\(1\\ldots k\\) \u7684 permutation\u300d\uff0c\u8f38\u51fa\u6240\u6709\u53ef\u80fd\u7684 array \u7684 cost \u7e3d\u5408\u70ba\u591a\u5c11</p> <p>\\(2\\le k\\le n\\le 4000\\)</p> \u601d\u8def <p>\u60f3\u6cd5 : \u5c0d\u65bc\u4e00\u500b subarray\uff0c\u8ca2\u737b\u4e86\u5e7e\u500b array</p> <p>dp[i] = \u6709\u5e7e\u500b\u9577\u5ea6\u70ba i \u7684 array \u6eff\u8db3 subarray(i - k + 1, i) \u662f\u6709\u8ca2\u737b\u5230\u7684</p> <p>[i - k + 1, i] \u4e00\u5b9a\u8981\u662f\u4e00\u500b 1~k \u7684 permutation\uff0c\u800c\u4e4b\u524d\u7684\u6bcf\u4e00\u683c\u6211\u5011\u64fa 1~k \u90fd\u53ef\u4ee5\uff0c\u6240\u4ee5 initially dp[i] = k! * exp(k, i - k)</p> <p>\u8003\u616e\u8981\u5f9e dp[i] \u4e2d\u6263\u6389\u4e0d\u5408\u6cd5\u7684 case\uff0c\u4e5f\u5c31\u662f\u6709\u5e7e\u500b permutation \u7684\u7d50\u5c3e\u5728 [i - k + 1, i) \u5c31\u5df2\u5f62\u6210\u3002\u8a2d j \\(\\in\\) [i- k + 1, i)\uff0c\u6211\u5011\u9700\u8981\u5c07 dp[i] -= dp[j] * (i - j)!</p> <p>\u6700\u5f8c\uff0c\u5c0d\u65bc\u6bcf\u500b i\uff0c\u56e0\u70ba\u5f8c\u9762\u53ef\u4ee5\u96a8\u4fbf\u64fa\uff0c\u5c0d\u7b54\u6848\u7684\u8ca2\u737b\u5c31\u662f dp[i] * exp(k, n - i)</p> <p>\u53c3\u8003\u81ea : https://codeforces.com/blog/entry/119891?#comment-1064151</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int N = 4005;\nconst int M = 998244353;\n\nint n, k;\nint dp[N], fac[N], powK[N];\n\nvoid init() {\n    powK[0] = 1;\n    fac[0] = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        powK[i] = (powK[i - 1] * k) % M;\n        fac[i] = (fac[i - 1] * i) % M;\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    init();\n\n    for (int i = k; i &lt;= n; i++) {\n        dp[i] = (fac[k] * powK[i - k]) % M;\n        for (int j = i - k + 1; j &lt; i; j++) {\n            dp[i] = (dp[i] - (dp[j] * fac[i - j]) % M + M) % M;\n        }\n    }\n\n    int ans = 0;\n    for (int i = k; i &lt;= n; i++) {\n        ans = (ans + dp[i] * powK[n - i]) % M;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> 2022 IONC Day3 G. TypeRacer 2 (typeracer2) <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u9375\u76e4\u5de6\u5230\u53f3\u662f \\(1, 2, \\ldots, k\\)\uff0c\u5169\u96bb\u624b\u6307\u982d\u4e00\u958b\u59cb\u53ef\u653e\u4efb\u610f\u4f4d\u7f6e\u3002\u624b\u6307\u5f9e \\(i\\) \u5230 \\(j\\) \u6703\u82b1 \\(|i-j|\\)\uff0c\u8f38\u51fa\u5c07\u9663\u5217 \\(a\\) \u6253\u5b8c\u7684\u6700\u5c11\u6642\u9593</p> <p>\\(1\\le n, k\\le 2\\times 10^5\\)</p> \u601d\u8def <p>dp(i, j) = \u6bcf\u6b21\u53ea\u52d5\u4e00\u96bb\u624b\u7684\u689d\u4ef6\u4e0b\uff0c\u6253\u5b8c\u7b2c i \u500b\u9375\uff0c\u53e6\u96bb\u624b\u5728 j \u7684\u6700\u5c0f cost</p> <p>\\(dp(i,j) \\to \\begin{cases}dp(i+1, j) ,\\space \\text{cost}(a_{i}, a_{i+1}) \\\\ dp(i + 1, a_{i}) ,\\space \\text{cost}(j, a_{i+1}) \\end{cases}\\)</p> <p>basecase: dp(1, 1~k) = 0, \u5176\u4ed6 = INF</p> <p>\u5be6\u4f5c: \u8cc7\u6599\u7d50\u69cb\u512a\u5316</p> <p>\u6211\u5011\u628a \\(dp(i + 1, a_{i})\\) \u55ae\u7368\u62c9\u51fa\u4f86\u770b</p> <p>\\(dp(i+1, a_i)=\\min \\limits_{j=1\\ldots k} \\{dp(i, j) + |a_{i+1} - j| \\}\\)</p> <p>\\(dp(i + 1, a_i) = \\min \\begin{cases} dp(i, j) + a_{i+1} - j \\space \\forall j \\le a_{i+1} \\\\  dp(i, j) +j - a_{i+1} \\space \\forall j &gt; a_{i+1} \\end{cases}\\)</p> <p>\u6240\u4ee5\u6211\u5011\u53ea\u9700\u8981\u53bb\u7dad\u8b77\u5169\u9846\u7dda\u6bb5\u6a39 \\(dp(i,j)+j, dp(i, j) - j\\) \u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\nusing namespace std;\n\nconst int INF = 2e18;\n\nstruct Node {\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int l, r;\n    int add = 0, mn = 0;\n\n    Node(int l, int r) : l(l), r(r) {} \n\n    void pull() {\n        mn = min(lc-&gt;mn, rc-&gt;mn);\n    }\n    void push() {\n        if (add) {\n            lc-&gt;add += add;\n            lc-&gt;mn += add;\n            rc-&gt;add += add;\n            rc-&gt;mn += add;\n            add = 0;\n        }\n    }\n};\n\nNode* build(int l, int r) {\n    Node *root = new Node(l, r);\n    if (l == r) {\n        return root;\n    }\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    root-&gt;pull();\n    return root;\n}\n\nvoid add(Node *root, int ml, int mr, int val) {\n    if (ml &gt; mr) return;\n    if (ml &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= mr) {\n        root-&gt;add += val;\n        root-&gt;mn += val;\n        return;\n    } \n    root-&gt;push();\n    if (ml &lt;= root-&gt;lc-&gt;r) {\n        add(root-&gt;lc, ml, mr, val);\n    }\n    if (root-&gt;rc-&gt;l &lt;= mr) {\n        add(root-&gt;rc, ml, mr, val);\n    }\n    root-&gt;pull();\n}\n\nint query(Node *root, int ql, int qr) {\n    if (ql &gt; qr) return INF;\n    if (ql &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qr) {\n        return root-&gt;mn;\n    }\n    root-&gt;push();\n    int ret = INF;\n    if (ql &lt;= root-&gt;lc-&gt;r) {\n        ret = min(query(root-&gt;lc, ql, qr), ret);\n    }\n    if (root-&gt;rc-&gt;l &lt;= qr) {\n        ret = min(query(root-&gt;rc, ql, qr), ret);\n    }\n    root-&gt;pull();\n    return ret;\n}\n\nconst int N = 2e5 + 5;\nint n, k;\nint a[N];\nsigned main () {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    Node *root_del = build(1, k);\n    Node *root_add = build(1, k);\n    for (int i = 1; i &lt;= k; i++) {\n        add(root_del, i, i, -i);\n        add(root_add, i, i, +i);\n    }\n    for (int i = 1; i &lt; n; i++) {\n        // calculate dp(i + 1, a[i])\n        int dp = min(query(root_del, 1, a[i + 1]) + a[i + 1], \n                     query(root_add, a[i + 1] + 1, k) - a[i + 1]);\n\n        // update dp(i + 1, *)\n        add(root_del, 1, k, abs(a[i + 1] - a[i]));\n        add(root_add, 1, k, abs(a[i + 1] - a[i]));\n        // update dp(i + 1, a[i])\n        int now = query(root_del, a[i], a[i]) + a[i];\n        if (dp &lt; now) {\n            add(root_del, a[i], a[i], -now+dp);\n            add(root_add, a[i], a[i], -now+dp);\n        }\n    }\n    int ans = INF;\n    for (int i = 1; i &lt;= k; i++) {\n        ans = min(ans, query(root_del, i, i) + i);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> TOI 2022 B. \u6253\u9375\u76e4 (keyboard) <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5b57\u4e32 \\(S\\)\uff0c\u4e00\u958b\u59cb\u5de6\u624b\u6307\u5728 F\uff0c\u53f3\u624b\u6307\u5728 J\uff0c\u6bcf\u6b21\u53ef\u5c07\u4e00\u96bb\u624b\u6307\u79fb\u52d5\u4e00\u55ae\u4f4d\uff0c\u8f38\u51fa\u5c07\u5b57\u4e32 \\(S\\) \u6253\u5b8c\u7684\u6700\u5c11\u6b21\u6578</p> <p>\\(1\\le n\\le 10^4,S\\) \u50c5\u7531\u82f1\u6587\u5927\u5beb\u5b57\u6bcd\u69cb\u6210</p> \u601d\u8def <p>\u5148\u5229\u7528 Floyd Warshall \u5efa\u597d dis(A-Z, A-Z)</p> <p>dp(i, j) = \u6bcf\u6b21\u53ea\u52d5\u4e00\u96bb\u624b\u7684\u689d\u4ef6\u4e0b\uff0c\u6253\u5b8c\u7b2c i \u500b\u9375\uff0c\u53e6\u96bb\u624b\u5728 j \u7684\u6700\u5c0f cost</p> <p>\\(dp(i,j) \\to \\begin{cases}dp(i+1, j) ,\\space \\text{cost}(a_{i}, a_{i+1}) \\\\ dp(i + 1, a_{i}) ,\\space \\text{cost}(j, a_{i+1}) \\end{cases}\\)</p> <p>\u8f49\u79fb\u5f9e dp(i, * ) \u63a8\u5230 dp(i + 1, * )\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(26n)</p>"},{"location":"dp/problem/#cf-484d","title":"CF 484D","text":"CF 484 D. Kindergarten <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u80fd\u5c07\u9663\u5217\u5207\u6210\u597d\u5e7e\u6bb5\uff0c\u554f\u6bcf\u6bb5\u7684 max - min \u52a0\u8d77\u4f86\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(1\\le n\\le 10^6, -10^9 \\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u767c\u73fe\uff0c\u5c07\u9663\u5217\u5206\u6210\u597d\u5e7e\u6bb5\uff0c\u82e5\u9047\u5230\u8f49\u6298\u5c31\u5207\uff0c\u4e00\u5b9a\u662f\u6700\u597d\u7684\u3002\u611f\u6027\u7406\u89e3\u7684\u8a71\uff0c\u5c31\u662f\u5c07\u6bcf\u500b\u80fd\u7528\u5dee\u503c\u90fd\u7528\u4e0a</p> <p> </p> <p>\u4f46\u5728\u8f49\u6298\u8655\uff0c\u6703\u6709\u4e00\u6bb5\u8ca2\u737b\u4e0d\u6703\u9078\u5230\uff0c\u6211\u5011\u5c31\u8981\u7528 dp \u5230\u5e95\u8a08\u7b97\u9078\u54ea\u500b\u6bd4\u8f03\u597d</p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int maxn = 1e6 + 5;\nint n;\nint a[maxn], dp[maxn];\n\nvoid init () {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n}\n\nvoid solve () {\n    int j = 1; \n    for (int i = 2; i &lt;= n; i++) {\n        dp[i] = max(dp[j] + abs(a[i] - a[j + 1]), dp[j - 1] + abs(a[i] - a[j]));\n        if (a[i - 1] &lt;= a[i] &amp;&amp; a[i] &gt;= a[i + 1]) j = i;\n        else if (a[i - 1] &gt;= a[i] &amp;&amp; a[i] &lt;= a[i + 1]) j = i;\n    }\n    cout &lt;&lt; dp[n] &lt;&lt; \"\\n\";\n}\n\nsigned main () {\n    init();\n    solve();\n}\n</code></pre> CS Academy - Distinct Neighbours <p>\u7d66\u4f60\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, a_2, \\ldots ,a_n\\)\uff0c\u554f\u6709\u5e7e\u7a2e \\(a\\) \u7684 permutation \u6eff\u8db3\u76f8\u540c\u6578\u5b57\u4e0d\u76f8\u9130</p> <p>\\(1\\le n\\le 750,1\\le a_i \\le n\\)</p> \u601d\u8def <p>\u9996\u5148\uff0c\u5c07\u76f8\u540c\u7684\u6578\u5b57\u5206\u70ba\u4e00\u985e</p> <p>\u5148\u8003\u616e\u53ea\u6709\u5169\u7d44\u6578\u5b57\u7684 case\uff0c\u4f8b\u5982\u8aaa\u662f 4 \u500b a\uff0c3 \u500b b\uff0c\u6703\u767c\u73fe\u6211\u5011\u53ef\u4ee5\u63d2\u5165 b \u4f7f\u4e00\u4e9b\u76f8\u9130\u7684 a \u65b7\u6389\uff0c\u4e5f\u5c31\u662f\u7576\u53ea\u4f7f\u7528\u524d\u9762\u7684\u5b57\u5143\u4e0d\u5408\u6cd5\u6642\uff0c\u6211\u5011\u4f9d\u7136\u80fd\u5728\u4ed6\u5011\u4e4b\u9593 insert \u65b0\u7684\u5b57\u5143\uff0c\u4f7f\u5176\u8b8a\u5408\u6cd5</p> <p>\u6240\u4ee5\u6211\u5011\u5b9a\u7fa9 dp(i, j) = \u524d i \u7d44\u6578\u5b57\u6070\u597d\u6709 j \u5c0d\u76f8\u9130\u6578\u5b57\u76f8\u540c\u7684\u65b9\u6848\u6578</p> <p>\u8003\u616e\u5f9e dp(i, j) \u8f49\u79fb\u5230 dp(i + 1, ?)\uff0c\u5148\u4ee4\u524d i \u7d44\u7d44\u6210\u7684\u662f\u4e00\u500b\u9577\u5ea6\u70ba S \u7684\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u5728 S + 1 \u7684 gaps \u4e2d\u63d2\u5165 i + 1\uff08\u7b2c\u4e00\u9805\u4e4b\u524d\u3001\u4e2d\u9593\u3001\u6700\u5f8c\u4e00\u9805\u4e4b\u5f8c\uff09</p> <p>\u6211\u5011\u5148\u679a\u8209 k\uff0c\u5047\u8a2d\u6709 k \u500b gaps \u81f3\u5c11\u6709\u653e\u4e00\u500b\u7b2c i + 1 \u7d44\u7684\u6578\u5b57\uff0c\u8981\u5c07 cnt[i + 1] \u500b\u7269\u54c1\u586b\u5165\uff0c\u4e5f\u5c31\u662f\u5c07 cnt[i + 1] \u9846\u7403\u653e\u5165 k \u500b\u7bb1\u5b50\uff0c\u5229\u7528\u9694\u677f\u6cd5\u5f97\u77e5\u65b9\u6cd5\u6578\u70ba C(cnt[i + 1] - 1, k - 1)</p> <p>\u6211\u6703\u600e\u9ebc\u9078\u9019 k \u500b gaps \u5462 ? \u9019\u4e5f\u9700\u8981\u8003\u616e gaps \u7684\u300c\u7a2e\u985e\u300d\u6703\u662f\u4ec0\u9ebc</p> <ul> <li> <p>\u679a\u8209 L\uff0c\u4ee3\u8868\u9078 L \u500b\u540c pair gaps\uff0c\u65b9\u6cd5\u6578 : C(j, L)</p> </li> <li> <p>\u4e5f\u5c31\u6703\u6709 k - L \u500b\u7570 pair gaps\uff0c\u65b9\u6cd5\u6578 : C(S + 1 - j, k - L)</p> </li> </ul> <p>\u6240\u4ee5\u6703\u88ab\u6263\u6389 L \u500b\u540c pair gaps\uff0c\u5c07 cnt[i + 1] \u500b\u7269\u54c1\u653e\u5165 k \u500b gaps \u6703\u7522\u751f cnt[i + 1] - k \u500b\u540c pair\uff08\u4f8b\u5982\u8aaa 5 \u500b\u7269\u54c1\u653e\u5165 3 \u500b gap\uff0c\u4e0d\u7ba1\u600e\u9ebc\u653e\u4e00\u5b9a\u6703\u6709 2 \u500b\u7269\u54c1\u76f8\u9130\uff09\uff0c\u6211\u5011\u767c\u73fe dp(i, j) \u5c31\u662f\u8981\u8f49\u79fb\u5230 dp(i + 1, j - L + cnt[i + 1] - k)</p> <p>\u73fe\u5728\u8981\u6b63\u5f0f\u7684\u4f86\u5217\u8f49\u79fb\u5f0f\uff0c\u6211\u5011\u628a\u525b\u525b\u6240\u8aaa\u7684\u65b9\u6cd5\u6578\u90fd\u4e58\u8d77\u4f86:</p> <p>dp(i + 1, j - L + cnt[i + 1] - k) = dp(i, j) * C(cnt[i + 1] - 1, k - 1) * C(j, L) * C(S + 1 - j, k - L)</p> <p>\u53c3\u8003\u81ea : https://www.cnblogs.com/jiachinzhao/p/7410938.html</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define LL long long\nusing namespace std;\nconst int N = 800;\nconst int mod = 1e9 + 7;\nint C[N][N];\nvoid init() {\n    for (int i = 0; i &lt; N; i++) C[i][0] = C[i][i] = 1;\n    for (int i = 2; i &lt; N; i++) {\n        for (int j = 1; j &lt;= i; j++) {\n            C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod;\n        }\n    }\n}\nint dp[N][N], cnt[N], total[N];\nvector&lt;int&gt; v;\nint main() {\n    init();\n    int n, x, mx = 1;\n    cin &gt;&gt; n;\n    v.push_back(0);\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; x;\n        if (!cnt[x]) v.push_back(x);\n        cnt[x]++;\n    }\n    for (int i = 1; i &lt; v.size(); i++) total[i] = total[i - 1] + cnt[v[i]];\n    dp[0][0] = 1;\n    for (int i = 0; i &lt; v.size() - 1; i++) {\n        int num = cnt[v[i + 1]], S = total[i] + 1;\n        for (int j = S - 1; j &gt;= 0; j--) {  \n            int kk = min(num, S);        \n            for (int k = 1; k &lt;= kk; k++) {\n                int L = min(j, k);\n                for (int l = L; S - j &gt;= k - l; l--) {\n                    int &amp;res = dp[i + 1][j - l + num - k];\n                    res = (res + 1LL * C[num - 1][k - 1] * C[j][l] % mod * C[S - j][k - l] % mod * dp[i][j] % mod) % mod;\n                }\n            }\n        }\n    }\n    cout &lt;&lt; dp[v.size() - 1][0] &lt;&lt; endl;\n    return 0;\n}\n</code></pre> 2021 \u5168\u570b\u8cfd pF. \u6311\u6c34\u679c <p>\u4e00\u958b\u59cb\u8239\u4e0a\u6709 \\(c\\) \u500b\u7a2e\u985e\u7684\u6c34\u679c\uff0c\u7b2c \\(i\\) \u7a2e\u985e\u6709 \\(n_i\\) \u9846\uff0c\u4f9d\u5e8f\u7d93\u904e \\(c\\) \u500b\u57ce\u5e02\uff0c\u6bcf\u7d93\u904e\u4e00\u500b\u57ce\u5e02\u53ef\u4ee5\u6c7a\u5b9a\u8981\u4e0d\u8981\u628a\u8239\u4e0a\u6240\u6709\u524d \\(i\\) \u7a2e\u985e\u7684\u6c34\u679c\u7d66\u7576\u5730\u76e4\u5546\u8ce3\uff0c\u7a4d\u8f09\u6bcf\u9846\u6c34\u679c\u7d93\u904e\u90fd\u5e02 \\(i\\) \u9700\u8981\u7a4d\u8f09\u6210\u672c \\(p_i\\)\uff0c\u628a\u6bcf\u9846\u6c34\u679c\u7d66\u90fd\u5e02 \\(i\\) \u7684\u76e4\u5546\u8ce3\u9700\u8981\u6210\u672c \\(s_i\\)\uff0c\u5728\u90fd\u5e02 \\(i\\) \u8ce3\u7a2e\u985e \\(j\\) \u7684\u6c34\u679c\u6700\u5f8c\u53ea\u6703\u8ce3\u51fa \\(r_{i,j}\\) \u9846\uff0c\u554f\u82e5\u7a4d\u8f09\u6210\u672c\u548c\u92b7\u552e\u6210\u672c\u7e3d\u548c\u4e0d\u8d85\u904e \\(T\\) \u7684\u524d\u63d0\u4e0b\uff0c\u6700\u591a\u80fd\u8ce3\u5e7e\u9846\u6c34\u679c ?</p> <p>\\(1\\le c,n_i\\le 40,1\\le p_i, s_i\\le 1000,T \\le 10^7\\)</p> \u601d\u8def <p>\u985e\u4f3c\u8d85\u5927\u80cc\u5305\u7684\u60f3\u6cd5\uff0c\u4ee4 dp(i, j, v): \u5230\u4e86\u7b2c i \u500b\u57ce\u5e02\uff0c\u4e0a\u4e00\u90e8\u8ce3\u5b8c\u7b2c j \u7a2e\u6c34\u679c\uff0c\u5229\u6f64\u70ba v \u7684\u6700\u5c0f\u6210\u672c</p> <p>\u8f49\u79fb\u5f0f\u5982\u4e0b\uff0c\u5f9e dp(i, j, v) \u8f49\u79fb\u904e\u53bb</p> <ul> <li> <p>dp(i + 1, i + 1, v + rsum(j + 1, i + 1)) = min(dp(i, j, v) + p_sum(j + 1, n) + s_sum(j + 1, i + 1) )</p> </li> <li> <p>dp(i + 1, j, v) = min(dp(i, j, v) + p_sum(j + 1, n))</p> </li> </ul> <p>\u8907\u96dc\u5ea6 : \u72c0\u614b O(40 * 40 * (40 * 40))\uff0c\u8f49\u79fb O(1)</p> CS Academy - Count Arrays <p>\u6709\u4e00\u500b 01 \u5e8f\u5217 \\(a\\)\uff0c\u7d66 \\(q\\) \u7b46\u9650\u5236\uff0c\u6bcf\u7b46\u9650\u5236 \\([l_i,r_i]\\) \u4ee3\u8868\u5728\u9019\u500b\u5340\u9593\u5167\u81f3\u5c11\u8981\u6709\u4e00\u500b 0\uff0c\u554f \\(a\\) \u6709\u5e7e\u7a2e</p> <p>\\(n,q\\le 10^5\\)</p> \u601d\u8def <p>\u4ee4 dp[i] = \u53ea\u8003\u616e 1~i\uff0c\\(a_i\\) \u653e 0 \u7684\u5408\u6cd5\u5e8f\u5217\u6709\u5e7e\u7a2e\uff0c\u8f49\u79fb\u7684\u8a71\u6211\u5011\u5c31\u9700\u8981\u53bb\u679a\u8209\u653e 1 \u7684\u5340\u9593 \\([j+1, i-1]\\)\uff0c\u6240\u4ee5\u53ef\u5217\u51fa\u8f49\u79fb\u5f0f \\(dp[i] = \\sum dp[j]\\)\u3002\u6211\u5011\u53ef\u4ee5\u6309\u7167\u984c\u76ee\u7d66\u7684\u9650\u5236\u4f86\u9810\u8655\u7406\u51fa i \u4e4b\u524d\u81f3\u5c11\u5230\u54ea\u88e1\u90fd\u53ef\u4ee5\u653e 1\uff08\u4e5f\u5c31\u662f\u6211\u5011 j \u6700\u5c0f\u80fd\u591a\u5c0f\uff09\uff0c\u5c0d\u65bc\u8f49\u79fb\u7576 i \u905e\u589e\u7684\u6642\u5019\uff0cj \u7684\u6700\u5c0f\u503c\u662f\u55ae\u8abf\u4e0d\u964d\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u904e\u9019\u500b\u55ae\u8abf\u6027\u505a\u5230 \\(O(n)\\)\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, m;\nint mx[N], dp[N];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        mx[r + 1] = max(mx[r + 1], l);\n    }\n    dp[0] = 1;\n    int now = 0, cnt = 1;\n    for (int i = 1; i &lt;= n + 1; i++) {\n        while(now &lt; mx[i]) {\n            cnt = (cnt - dp[now] + M) % M;\n            now++;\n        }\n        dp[i] = cnt;\n        cnt = (cnt + dp[i]) % M;\n    }\n    cout &lt;&lt; dp[n + 1] &lt;&lt; '\\n';\n} \n</code></pre> Zerojudge e900. \u4ea4\u63db\u7d19\u724c\u904a\u6232 <p>\u5171\u6709 \\(n\\) \u500b pair\uff0c\u53ef\u4ee5\u4ea4\u63db\u540c\u500b pair \u7684\u5169\u9805\uff0c\u76ee\u6a19\u4f7f\u7b2c\u4e00\u9805\u7e3d\u548c\u8207\u7b2c\u4e8c\u9805\u7e3d\u548c\u7684\u5dee\u503c\u6700\u5c0f\uff0c\u554f\u6700\u5c11\u4ea4\u63db\u6b21\u6578\u3002</p> <p>\\(n\\le 1000,1\\le\\) pair \u4e2d\u7684\u5143\u7d20 \\(\\le 13\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nint n,a[100000],b[100000],sum,times,mi,dp[1001][13001];\nconst int INF=0x3f3f3f3f;\n\nsigned main(){\n    while(cin&gt;&gt;n){\n        times=INF;\n        mi=INF;\n        sum=0;\n        memset(dp,INF,sizeof(dp));\n        dp[0][0]=0;\n        //dp(i, j) \u8868\u793a\u524d i \u9805\uff0c\u9663\u5217 A \u7684\u7e3d\u548c\u662f j\uff0c\u6700\u5c11\u8981\u63db\u5e7e\u6b21\n        for(int i=1;i&lt;=n;i++){\n            cin&gt;&gt;a[i]&gt;&gt;b[i];\n            sum+=a[i]+b[i];\n            for(int j=1*i;j&lt;=13*i;j++){\n                if(j-a[i]&gt;=0) dp[i][j]=dp[i-1][j-a[i]];\n                if(j-b[i]&gt;=0) dp[i][j]=min(dp[i][j],dp[i-1][j-b[i]]+1);\n            }\n        }\n        //\u627eAB\u6700\u5c0f\u5dee\u503c\n        for(int j=1*n;j&lt;=13*n;j++){\n            if(dp[n][j]&lt;INF){\n                //abs(B\u7684\u5361\u724c\u7e3d\u548c-A\u7684\u5361\u724c\u7e3d\u548c)=abs((\u5168-A)-A)=abs(sum-j-j)\n                if(abs(sum-j-j)&lt;mi){\n                    mi=abs(sum-j-j);\n                    times=dp[n][j];\n                }\n                else if(abs(sum-j-j)==mi){\n                    if(times&gt;dp[n][j]){\n                        times=dp[n][j];\n                    }\n                }\n            }\n\n        }   \n        cout&lt;&lt;times&lt;&lt;\"\\n\";\n\n    }\n}\n</code></pre> CF 510 D. Fox And Jumping <p>\u7d66\u4f60 \\(n\\) \u5f35\u5361\u7247\uff0c\u521d\u59cb\u5750\u6a19\u70ba 0\uff0c\u6bcf\u5f35\u5361\u7247\u90fd\u6709\u4e00\u500b \\(l_i,c_i\\)\uff0c\u4ee3\u8868\u8cb7\u4e86\u4e4b\u5f8c\u53ef\u4ee5\u8df3 \\(-l_i\\) \u6216 \\(+l_i\\)\u3002\u554f\u53ef\u4ee5\u8df3\u5230\u4efb\u610f\u683c\u5b50\u7684\u6700\u5c0f\u82b1\u8cbb\u3002</p> <p>\\(n\\le 300, 1\\le l_i \\le 10^9, 1\\le c_i \\le 10^5\\)</p> \u601d\u8def <p>\u6839\u64da\u8c9d\u7956\u5b9a\u7406\uff0c\\(ax+by=m\\) \u6709\u89e3 iff \\(m\\) \u70ba \\(\\gcd (a,b)\\) \u7684\u500d\u6578\uff0c\u53cd\u904e\u4f86\u770b\uff0c\\(a,b\\) \u7684 \\(\\gcd\\) \u8981\u662f \\(m\\) \u7684\u56e0\u6578\u624d\u6709\u89e3</p> <p>\u540c\u7406\uff0c\u8a2d\u7576\u524d\u9078\u53d6\u5361\u7247\u80fd\u8df3\u7684\u8ddd\u96e2\u70ba \\(a_1, \\ldots ,a_k\\)\uff0c\u6211\u5011\u53ef\u4ee5\u5217\u51fa</p> \\[ b_1 \\times a_1 + b_2 \\times a_2 + \\ldots + b_k \\times a_k = 1 \\] <p>\u4e5f\u5c31\u662f \\(\\gcd(a_1, \\ldots ,a_k)\\) \u8981\u7b49\u65bc \\(1\\)\u3002\u4ee4 \\(dp[i]\\) \u70ba\u7576\u524d\u80fd\u5f97\u5230\u7684gcd \u7b49\u65bc \\(i\\) \u7684\u6700\u5c0f\u82b1\u8cbb\uff0c\u6bcf\u6b21\u7528\u4e00\u5f35\u5361\u7247\u7684\u503c\u53bb\u66f4\u65b0\u9019\u4e9b gcd \u5373\u53ef\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define ll long long\n\nstruct node {\n    int l, c;\n    friend bool operator&lt;(node a, node b) {\n        return a.c &gt; b.c;\n    }\n} a[310];\nmap&lt;int, int&gt; dp;\n\nint main() {\n    map&lt;int, int&gt;::iterator iter;\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i].l;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i].c;\n    }\n    ll ans = 1e18;\n    sort(a + 1, a + 1 + n);\n    int gcd = a[1].l;\n    for (int i = 1; i &lt;= n; i++) {\n        gcd = __gcd(gcd, a[i].l);\n    }\n    if (gcd &gt; 1) {\n        cout &lt;&lt; -1 &lt;&lt; endl;\n        return 0;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        dp[a[i].l] = a[i].c;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (iter = dp.begin(); iter != dp.end(); iter++) {\n            if (dp[__gcd(a[i].l, iter-&gt;first)] == 0) {\n                dp[__gcd(a[i].l, iter-&gt;first)] = a[i].c + iter-&gt;second;\n            } else {\n                dp[__gcd(a[i].l, iter-&gt;first)] = min(dp[__gcd(a[i].l, iter-&gt;first)], a[i].c + iter-&gt;second);\n            }\n\n        }\n    }\n    cout &lt;&lt; dp[1] &lt;&lt; endl;\n}\n</code></pre> CF 1483 C. Skyline Photo <p>\u7d66 \\(n\\) \u500b\u5efa\u7bc9\uff0c\u6bcf\u500b\u5efa\u7bc9\u6709\u9ad8\u5ea6 \\(a_i\\) \u548c\u7f8e\u9e97\u503c \\(b_i\\)\u3002\u5283\u5206\u6210\u82e5\u5e72\u500b\u9023\u7e8c\u6bb5\uff0c\u4f7f\u5f97\u6240\u6709\u5340\u9593\u7684\u8ca2\u737b\u4e4b\u548c\u6700\u5927\u3002\u5176\u4e2d\u6bcf\u500b\u5340\u9593\u7684\u8ca2\u737b\u503c\u70ba\uff0c\u5340\u9593\u4e2d\u9ad8\u5ea6\u6700\u4f4e\u7684\u5efa\u7bc9\u7269\u7684\u7f8e\u9e97\u503c\u3002\u8f38\u51fa\u6700\u5927\u8ca2\u737b\u548c\u3002</p> <p>\\(n\\le 3\\times 10^5, 0\\le |b_i| \\le 10^9\\)</p> \u601d\u8def \\[dp(i)=\\max \\{dp(j) + \\text{cost}(j + 1, i) \\}\\] <p>\u6211\u5011\u60f3\u8fa6\u6cd5\u5229\u7528\u7dda\u6bb5\u6a39\u4f86\u5feb\u901f\u67e5\u8a62\u6700\u5927\u503c\uff0c\u4f46\u74f6\u9838\u5728\u65bc\u5f8c\u9762\u7684 cost \u6c92\u8fa6\u6cd5\u5f88\u5feb\u5730\u8a08\u7b97\u3002\u4e0d\u904e\u53ef\u4ee5\u89c0\u5bdf\u5230\u5be6\u969b\u4e0a\u5728 cost(l, r) \u5c31\u662f l, ..., r \u88e1\u9762 a[i] \u6700\u5c0f\u7684\u90a3\u4e00\u9805\uff0c\u82e5\u6545\u56fa\u5b9a r\uff0c\u5247 l = 1...r \u6703\u767c\u73fe\u8ca2\u737b cost(l, r) \u7684 a[i] \u53ea\u6703\u55ae\u8abf\u905e\u589e\uff08\u4e0b\u5716\u5c31\u662f\u4e00\u500b\u4f8b\u5b50\uff09\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u4e00\u500b\u55ae\u8abf\u968a\u5217\u7dad\u8b77\uff0c\u8907\u96dc\u5ea6 \\(O(n \\log n)\\)</p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nconst int INF = 9e18;\nconst int maxn = 3e5 + 5;\nint a[maxn], w[maxn], stk[maxn], dp[maxn];\nint n;\n\nstruct seg {\n    int mx, tag;\n    seg *lch, *rch;\n    seg() {\n        tag = 0;\n        mx = 0;\n        lch = rch = nullptr;\n    }\n    void push() {\n        if (tag) {\n            lch-&gt;mx += tag;\n            rch-&gt;mx += tag;\n            lch-&gt;tag = tag;\n            rch-&gt;tag = tag;\n            tag = 0;\n        }\n    }\n    void modify(int l, int r, int mL, int mR, int val) {\n        if (mL &lt;= l &amp;&amp; r &lt;= mR) {\n            mx += val, tag += val;\n            return;\n        }\n        int mid = (l + r) &gt;&gt; 1;\n        if (!lch) lch = new seg();\n        if (!rch) rch = new seg();\n        push();\n        if (mL &lt;= mid) {\n            lch-&gt;modify(l, mid, mL, mR, val);\n        }\n        if (mid + 1 &lt;= mR) {\n            rch-&gt;modify(mid + 1, r, mL, mR, val);\n        }\n        mx = max(lch-&gt;mx, rch-&gt;mx);\n    }\n    int query(int l, int r, int qL, int qR) {\n        if (qL &lt;= l &amp;&amp; r &lt;= qR) {\n            return mx;\n        }\n        int mid = (l + r) &gt;&gt; 1;\n        if (!lch) lch = new seg();\n        if (!rch) rch = new seg();\n        push();\n        int ret = -INF;\n        if (qL &lt;= mid) {\n            ret = max(ret, lch-&gt;query(l, mid, qL, qR));\n        }\n        if (mid + 1 &lt;= qR) {\n            ret = max(ret, rch-&gt;query(mid + 1, r, qL, qR));\n        }\n        return ret;\n    }\n};\n\nvoid init() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i];\n    }\n}\n\nvoid solve() {\n    seg *rt = new seg();\n    a[0] = -INF;\n    int top = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        while (top &amp;&amp; a[stk[top - 1]] &gt;= a[i]) {\n            rt-&gt;modify(0, n, stk[top - 2], stk[top - 1] - 1, -w[stk[top - 1]]);\n            top--;\n        }\n        rt-&gt;modify(0, n, stk[top - 1], i - 1, w[i]);\n        dp[i] = rt-&gt;query(0, n, 0, i - 1);\n        rt-&gt;modify(0, n, i, i, dp[i]);\n        stk[top++] = i;\n    }\n    cout &lt;&lt; dp[n] &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    init();\n    solve();\n}\n</code></pre> 2019 \u5168\u570b\u8cfd pG. \u9694\u96e2\u63a1\u7926 <p>\u6709 \\(n\\) \u500b\u7926\u4e95\uff0c\u6bcf\u500b\u7926\u4e95\u6709\u9ad8\u5ea6 \\(h_i\\) \u8207\u50f9\u503c \\(v_i\\)\uff0c\u6311\u4e00\u4e9b\u7926\u4e95\uff0c\u4f7f\u5f97\u76f8\u9130\u5169\u500b\u7926\u4e95\u9593\u90fd\u5b58\u5728\u4e00\u500b\u66f4\u9ad8\u7684\u7926\u4e95</p> <p>\\(n\\le 10^6, h_i\\le 10^9, v_i\\le 10^5\\)</p> \u601d\u8def \\[dp[i]=\\max \\{ dp[j]+v[i] \\}\\] <p>\u53ef\u4ee5\u767c\u73fe\u80fd\u8f49\u79fb\u7684 \\(j\\) \u6703\u9577\u9019\u6a23 :</p> <p> \u7da0\u8272\u6709\u8fa6\u6cd5\u8f49\u79fb\uff0c\u7d05\u8272\u6c92\u8fa6\u6cd5 </p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u55ae\u8abf stack \u7dad\u8b77\u7121\u6cd5\u8f49\u79fb\u7684 \\(j\\)\uff0c\u5229\u7528 BIT \u5132\u5b58\u80fd\u300c\u5408\u6cd5\u300d\u8f49\u79fb\u7684 \\(j\\) \u7684 dp \u503c\u3002\u6211\u5011\u5fc5\u9808\u5728 stack \u5167\u4e8c\u5206\u51fa\u6bd4 \\(h_i\\) \u5927\u4e14\u6700\u9760\u8fd1 \\(i\\) \u7684 \\(j\\)\uff0c\u7528 BIT \u53bb query_max\\((1, j)\\) \u4f86\u8f49\u79fb\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e6 + 5;\nint n;\nint h[N], v[N], dp[N];\n\nstruct BIT {\n    #define lowbit(x) (x &amp; (-x))\n    int n;\n    vector&lt;int&gt; bit;\n\n    BIT(int _n) {\n        n = _n;\n        bit = vector&lt;int&gt;(n + 1, 0);\n    }\n    int query(int x) {\n        int ret = 0;\n        while (x &gt; 0) {\n            ret = max(ret, bit[x]);\n            x -= lowbit(x);\n        }\n        return ret;\n    }\n    void update(int x, int d) {\n        while (x &lt;= n) {\n            bit[x] = max(bit[x], d);\n            x += lowbit(x);\n        }\n    }\n}; \n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; h[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; v[i];\n    }\n    BIT bit(n);\n    vector&lt;int&gt; stk;\n    for (int i = 1; i &lt;= n; i++) {\n        while (stk.size() &amp;&amp; h[stk.back()] &lt; h[i]) {\n            bit.update(stk.back(), dp[stk.back()]);\n            stk.pop_back();\n        }\n        int l = 0, r = stk.size();\n        while (r - l &gt; 1) {\n            int mid = (l + r) / 2;\n            if (h[stk[mid]] &lt;= h[i]) {\n                r = mid;\n            } else {\n                l = mid;\n            }\n        }\n\n        if (stk.size() &amp;&amp; h[stk[l]] &gt; h[i]) {\n            dp[i] = bit.query(stk[l]) + v[i];\n        } else {\n            dp[i] = v[i];\n        }\n        stk.push_back(i);\n    }\n    cout &lt;&lt; *max_element(dp + 1, dp + n + 1) &lt;&lt; '\\n';\n}\n</code></pre> CF 730 J. Bottles <p>\u6709 \\(n\\) \u500b\u74f6\u5b50\uff0c\u5404\u6709\u6c34\u91cf \\(a_i\\) \u548c\u5bb9\u91cf \\(b_i\\)\u3002\u73fe\u5728\u8981\u5c07\u9019\u5beb\u74f6\u5b50\u88e1\u7684\u6c34\u5b58\u5165\u6700\u5c11\u7684\u74f6\u5b50\u88e1\u3002\u554f\u6700\u5c11\u9700\u8981\u7684\u74f6\u5b50\u6578\uff0c\u8207\u5728\u4fdd\u8b49\u74f6\u5b50\u6578\u6700\u5c11\u7684\u60c5\u6cc1\u4e0b\uff0c\u8f49\u79fb\u7684\u6c34\u91cf\u6700\u5c11\u662f\u591a\u5c11\u3002</p> <p>\\(n\\le 100, 1\\le a_i,b_i\\le 100\\)</p> \u601d\u8def <p>\u9996\u5148\uff0c\u6700\u5c11\u74f6\u5b50\u6578\u53ef\u4ee5\u900f\u904e\u8caa\u5fc3\u7684\u679a\u8209\u524d\u5e7e\u5927\u7684 \\(b_i\\)\uff0c\u770b\u679a\u8209\u5230\u54ea\u6642\u53ef\u4ee5\u88dd\u5f97\u4e0b \\(\\sum a_i\\)\u3002</p> <p>\u5728\u4f86\uff0c\u6211\u5011\u4f86\u6574\u7406\u4e00\u4e0b\u300c\u6700\u5c11\u8f49\u79fb\u7684\u6c34\u91cf\u300d\u6240\u9700\u7b26\u5408\u7684\u689d\u4ef6 :</p> <ul> <li> <p>\u9700\u8981 ans1 \u500b\u4f86\u5132\u5b58\uff08\u7b2c\u4e00\u500b\u7b54\u6848\uff09</p> </li> <li> <p>\u5bb9\u91cf\u548c\u8981\u8db3\u5920\u8b93\u5269\u4e0b\u7684\u6c34\u91cf\u5012\u9032\u53bb</p> </li> <li> <p>\u8f49\u79fb\u7684\u6c34\u91cf\u8d8a\u5c11\u8d8a\u597d \u21d2 \u5df2\u56fa\u5b9a\u7684\u6c34\u91cf\u8981\u8d8a\u5927\u8d8a\u597d</p> </li> </ul> <p>\u8003\u616e dp(i, j, k) = \u8003\u616e 1...i\uff0c\u6211\u5011\u5df2\u7d93\u9078\u4e86 j \u500b\u4f86\u5132\u5b58\uff0c\u5bb9\u91cf\u80fd\u6e4a\u5230 k \u7684\uff0c\u6c34\u91cf\u6700\u591a\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f dp(n, ans1, \\(\\sum a_i \\ldots \\sum b_i\\)) \u53d6 max</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define a first\n#define b second\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nconst int INF = 9e18;\nconst int maxn = 105;\nint n, m;\nint sumA, sumB, dp[maxn][maxn * maxn];\nvector&lt;pii&gt; v;\n\nvoid solve () {\n     cin &gt;&gt; n;\n     v.resize(n + 1);\n     for (int i = 1; i &lt;= n; i++) {\n          cin &gt;&gt; v[i].a;\n          sumA += v[i].a;\n     }\n     for (int i = 1; i &lt;= n; i++) {\n          cin &gt;&gt; v[i].b;\n          sumB += v[i].b;\n     }\n\n     sort (v.begin() + 1, v.end(), [](pii x, pii y) { return x.b &gt; y.b; });\n     int N;\n     for (int i = 1, s = 0; i &lt;= n; i++) {\n          s += v[i].b;\n          if (s &gt;= sumA) {\n               N = i;\n               break;\n          }\n     }\n\n     // dp[i][j] = \u5bb9\u91cf\u70ba j \u7684\u6700\u5927\u6c34\u91cf\n     memset (dp, -1, sizeof dp);\n     dp[0][0] = 0;\n     for (int i = 1; i &lt;= n; i++) {\n          for (int j = sumB; j &gt;= v[i].b; j--) {\n               for (int k = i; k &gt;= 1; k--) {\n                    if (dp[k - 1][j - v[i].b] != -1)\n                         dp[k][j] = max(dp[k - 1][j - v[i].b] + v[i].a, dp[k][j]);\n               }\n          }\n     }\n\n     int ans = 0;\n     for (int j = sumA; j &lt;= sumB; j++) {\n          ans = max(ans, dp[N][j]);\n     }\n     cout &lt;&lt; N &lt;&lt; \" \" &lt;&lt; sumA - ans &lt;&lt; \"\\n\";\n}\n\nsigned main () {\n    solve();\n}\n</code></pre> CF 366 C. Dima and Salad <p>\u6709 \\(n\\) \u500b\u7269\u54c1\uff0c\u6bcf\u500b\u7269\u54c1\u6709\u6b0a\u503c \\(a_i\\) \u8207 \\(b_i\\)\uff0c\u9078\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97</p> \\[ \\frac{\\sum \\limits_{j=1}^m a_j}{\\sum \\limits_{j=1}^m b_j} =k \\] <p>\u6eff\u8db3\u4e0a\u9762\u689d\u4ef6\u7684\u9019\u4e00\u4e9b\u7269\u54c1 \\(a_i\\) \u548c\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(n\\le 100, 1\\le k\\le 10, 1\\le a_i, b_i\\le 100\\)</p> \u601d\u8def <p>\u985e\u4f3c 01 \u5206\u6578\u898f\u5283\u7684\u5f62\u5f0f\uff0c\u554f\u984c\u5c31\u8b8a\u6210 :</p> <p>\u6709 \\(n\\) \u500b\u7269\u54c1\u91cd\u91cf \\(a_i - k\\times b_i\\) \u8207\u50f9\u503c \\(a_i\\)\uff0c\u6c42\u91cd\u91cf\u70ba \\(0\\) \u6700\u5927\u7684 \\(a_i\\) \u7e3d\u548c</p> <p>\u5be6\u4f5c\u4e0a\u4e0d\u80fd\u72c0\u614b\u58d3\u7e2e\uff0c\u56e0\u70ba \\(a_i - k\\times b_i\\) \u6709\u53ef\u80fd\u662f\u6b63\u7684\u4e5f\u6709\u53ef\u80fd\u662f\u8ca0\u7684\uff0c\u53ef\u4ee5\u7528\u6efe\u52d5\u9663\u5217\u4ee3\u66ff\u3002\u672c\u4f86\u91cd\u91cf\u548c\u7684 range \u6703\u5728 [-1e5, 1e5]\uff0c\u4f46\u9663\u5217 index \u4e0d\u80fd\u7528\u8ca0\u7684\uff0c\u6240\u4ee5\u8981\u6539\u6210 [0, 2e5]\uff0c\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f dp(n, 1e5)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nconst int N = 105;\nconst int M = 1e5;\nint n, k;\nint a[N], b[N], dp[2][200005];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; b[i];\n    }\n    memset(dp, -0x3f, sizeof(dp));\n    dp[0][M] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        int w = a[i] - k * b[i];\n        for (int j = 2e5; j &gt;= 0; j--) {\n            if (j - w &gt;= 0 &amp;&amp; j - w &lt;= 2e5) {\n                dp[i % 2][j] = max(dp[(i - 1) % 2][j], dp[(i - 1) % 2][j - w] + a[i]);\n            }\n        }\n    }\n    if (dp[n % 2][M] == 0) {\n        cout &lt;&lt; \"-1\\n\";\n    } else {\n        cout &lt;&lt; dp[n % 2][M] &lt;&lt; '\\n';\n    }\n} \n</code></pre> \u5ef6\u5e73\u4e2d\u5b78 2022 \u6821\u5167\u8cfd p8. \u5927\u6a13\u62c6\u9664 (building) <p>\u6709 \\(n\\) \u68df\u5efa\u7bc9\u9ad8\u5ea6\u70ba \\(h_1, \\ldots, h_n\\)\uff0c\u5728\u7b2c\u4e00\u68df\u4e0d\u80fd\u70b8\u7684\u60c5\u6cc1\u4e0b\uff0c\u6700\u5c11\u9700\u8981\u70b8\u5e7e\u68df\u624d\u80fd\u5f9e\u5de6\u5f80\u53f3\u770b\u6070\u770b\u5230 \\(k\\) \u68df</p> <p>\\(1\\le n\\le 10^5, 1\\le k\\le 10, 1\\le h_i\\le 10^9\\)</p> \u601d\u8def <p>\u8003\u616e dp\uff0c\u56e0\u70ba\u7b2c\u4e00\u68df\u4e0d\u80fd\u70b8\uff0c\u6240\u4ee5\u8981\u5f9e\u5f8c\u5f80\u524d\u505a\uff0c\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f\u7b2c\u4e00\u9805\u7684 dp \u503c\u3002\u4ee4 dp(i, k) = \u5f9e n \u5f80 i \u8003\u616e\uff0c\u7b2c i \u68df\u662f\u7b2c k \u500b\u88ab\u770b\u898b\u7684\u6700\u5c0f cost</p> <p>dp(i, k) = dp(j, k - 1) + cost(i + 1, j - 1) | h[i] &lt; h[j]\uff0c\u5176\u4e2d cost \u70ba h[i + 1, j - 1] \u6709\u5e7e\u500b\u6bd4 h[i] \u5927</p> <p>\u6211\u5011\u8f49\u79fb\u90fd\u662f\u5148\u679a\u8209 k\u3002\u8003\u616e\u512a\u5316\uff0c\u6211\u5011\u958b\u4e00\u9846\u7dda\u6bb5\u6a39\uff0c\u6bcf\u9694\u7d00\u9304 dp(i, k - 1)\uff0c\u521d\u59cb\u5316\u90fd\u5c07\u5176\u8a2d\u70ba dp(i, k - 1) + INF\uff0c\u8b93\u5f85\u6703\u7684\u5340\u9593\u6700\u5c0f\u503c\u4e0d\u6703\u6311\u5230 h[j] \u6bd4 h[i] \u5c0f\u7684\u3002\u9084\u6709\u4e00\u500b\u554f\u984c\uff0c\u5c31\u662f\u6211\u5011\u8981\u600e\u9ebc\u8a08\u7b97 cost\uff0c\u6211\u5011\u53ef\u4ee5\u60f3\u8fa6\u6cd5\u5148\u7b97\u597d\uff08\u9810\u8655\u7406\uff09 h[i + 1, n] \u6bd4 h[i] \u7684\u6578\u91cf\uff0c\u7136\u5f8c\u8b93\u7dda\u6bb5\u6a39\u6bcf\u9694\u88e1\u9762\u90fd\u6263\u6389\u6211\u5011\u591a\u9078\u7684\u8ca2\u737b\u3002\u6211\u5011\u5f9e h[i] \u7684\u6578\u503c\u5927\u5230\u5c0f\u505a\uff0cdp(i, k) \u5c31\u76f4\u63a5\u7b49\u65bc\u300c\u7dda\u6bb5\u6a39 [i + 1, n] \u7684 min\u300d+\u300ch[i + 1, n] \u6bd4 h[i] \u5927\u7684\u6578\u91cf\u300d\uff0c\u518d\u4f86\uff0c\u8981\u5c07\u81ea\u5df1\u6703\u88ab\u4e4b\u5f8c\u7684 i \u8a08\u7b97\u300ch[i + 1, n] \u6bd4 h[i] \u5927\u7684\u6578\u91cf\u300d\u591a\u7b97\u7684\u8ca2\u737b\u7d66\u6263\u6389\uff0c\u56e0\u70ba\u4e4b\u5f8c\u7684 h[i] \u80af\u5b9a\u6bd4\u76ee\u524d\u7684 h[i] \u9084\u4f86\u7684\u5c0f\uff0c\u6240\u4ee5\u5c0d\u65bc\u524d\u9762\u6240\u6709\u7684\u8f49\u79fb\u9ede\uff0c\u4e5f\u5c31\u662f\u7dda\u6bb5\u6a39\u7684 [1, i - 1] \u90fd -1\u3002</p> <p>\u53ef\u4ee5\u5c07 (i, h[i]) \u6253\u5728\u4e8c\u7dad\u5ea7\u6a19\u5e73\u9762\u4e0a\u7406\u89e3\u6703\u66f4\u6e05\u695a\u3002</p> <p>\u53c3\u8003\u81ea : https://hackmd.io/@HNO2/HysqfODG3#pH-%E5%A4%A7%E6%A8%93%E6%8B%86%E9%99%A4</p> EOJ 2799. \u533a\u95f4\u8986\u76d6 <p>\u7d66 \\(n\\) \u500b interval \\([l, r]\\)\uff0c\u6bcf\u500b interval \u6709\u4e00\u500b\u6b0a\u91cd \\(w\\)\uff0c\u554f\u81f3\u5c11\u8986\u84cb \\(k\\) \u500b point \u7684\u6700\u5c0f\u6b0a\u91cd\u548c</p> <p>\\(n\\le 10^5, 1\\le w_i\\le 10^9,\\) point \u6578\u91cf \\(\\le 300\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u5230\u53ef\u4ee5\u5c07\u6709\u8986\u84cb\u5230\u7684 point \u5206\u6210\u597d\u5e7e\u6bb5\uff0c\u6bcf\u4e00\u6bb5 point \u90fd\u53ea\u6703\u88ab\u4e00\u500b interval \u8986\u84cb</p> <p>cost(l, r) : \u7528\u4e00\u500b interval \u8986\u84cb point[l ~ r] \u7684\u6700\u5c0f\u6b0a\u91cd</p> <p>dp(i, k) = \u5728 point 1 ~ i \u5167\u6070\u597d\u8986\u84cb k \u500b point \u7684 min cost</p> \\[dp(i, k) = \\min \\begin{cases}dp(i - 1, k) \\\\ dp(i - j, k - j) +  \\text{cost}(i - j + 1, i) \\space\\space \\text{for} \\space   \\text{all}\\space j=1 \\ldots k\\end{cases}\\] code <pre><code>#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\n#define MAX_N 307\n#define INFINITY 0x3F3F3F3F\n\nusing namespace std;\n\nint costs[MAX_N][MAX_N];  // costs[i][j]\u8868\u793a\u4ecei\u653e\u5230j\u7684\u82b1\u8d39\nint dp[MAX_N][MAX_N];     // dp[i][j]\u8868\u793a\u5728\u603b\u5171i\u4e2a\u91cc\u9762\u653ek\u4e2a\u7684\u6700\u5c0f\u82b1\u8d39\n\nint main() {\n    int caseNumber;\n    scanf(\"%d\", &amp;caseNumber);\n    for (int caseIndex = 0; caseIndex &lt; caseNumber; ++caseIndex) {\n        for (int i = 0; i &lt; MAX_N; ++i) {\n            for (int j = 0; j &lt; MAX_N; ++j) {\n                costs[i][j] = INFINITY;\n            }\n        }\n        for (int i = 0; i &lt; MAX_N; ++i) {\n            for (int j = 0; j &lt; MAX_N; ++j) {\n                dp[i][j] = INFINITY;\n            }\n        }\n        int n, m, k;\n        scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k);\n        while (m--) {\n            int left, right, cost;\n            scanf(\"%d%d%d\", &amp;left, &amp;right, &amp;cost);\n            costs[left][right] = min(costs[left][right], cost);\n\n            for (int i = left; i &lt;= right; ++i) {\n                for (int j = i; j &lt;= right; ++j) {\n                    costs[i][j] = min(costs[i][j], cost);\n                }\n            }\n        }\n        for (int i = 1; i &lt;= n; ++i) {\n            for (int j = i; j &lt;= n; ++j) {\n                for (int t = i; t &lt; j; ++t) {\n                    costs[i][j] = min(costs[i][j], costs[i][t] + costs[t + 1][j]);\n                }\n            }\n        }\n\n        for (int i = 0; i &lt;= n; ++i) dp[i][0] = 0;\n\n        for (int i = 1; i &lt;= n; ++i)\n            for (int j = 1; j &lt;= i; ++j) {\n                dp[i][j] = dp[i - 1][j];\n                for (int t = 1; t &lt;= j; ++t)\n                    if (costs[i - t + 1][i] != INFINITY)\n                        dp[i][j] = min(dp[i][j], dp[i - t][j - t] + costs[i - t + 1][i]);\n            }\n        printf(\"case #%d:\\n%d\\n\", caseIndex, dp[n][k] == INFINITY ? -1 : dp[n][k]);\n    }\n\n    return 0;\n}\n</code></pre> \u6d1b\u8c37 P1077 [NOIP2012 \u666e\u53ca\u7ec4] \u6446\u82b1 <p>\u6709 \\(n\\) \u7a2e\u82b1\uff0c\u4f9d\u5e8f\u7de8\u865f\u70ba \\(1\\) \u5230 \\(n\\)\uff0c\u7b2c \\(i\\) \u7a2e\u6709 \\(a_i\\) \u500b\u3002\u554f\u4f9d\u7de8\u865f\u5c0f\u5230\u5927\u653e \\(m\\) \u6735\u82b1\u6709\u5e7e\u7a2e\u65b9\u6cd5</p> <p>\\(n\\le 100, m\\le 100, a_i\\le 100\\)</p> \u601d\u8def <p>\\(dp(i,k)=\\) \u770b\u524d \\(k\\) \u7a2e\u82b1\uff0c\u76ee\u524d\u5df2\u7d93\u653e\u4e86 \\(i\\) \u500b</p> <p>\\(dp(i,k)=\\sum \\limits_{i-a_i\\le j}dp(j,k-1)\\)</p> code <pre><code>cin &gt;&gt; n &gt;&gt; m;\nfor (int i = 1; i &lt;= n; i++) {\n    cin &gt;&gt; a[i];\n}\nfor (int k = 0; k &lt;= n; k++) {\n    dp[0][k] = 1;\n}\nfor (int k = 1; k &lt;= n; k++) {\n    for (int i = 1; i &lt;= m; i++)  {\n        for (int j = i; j &gt;= max(i - a[k]); j--) {\n            dp[i][k] = (dp[i][k] + dp[i - 1][k]) % M;\n        }\n    }\n}\ncout &lt;&lt; dp[m][n] &lt;&lt; '\\n';\n</code></pre> CSES - Permutation Inversions <p>\u554f\u6709\u591a\u5c11\u500b \\(1\\ldots n\\) \u7684 permutation \u7684\u9006\u5e8f\u6578\u5c0d\u6578\u91cf\u70ba \\(k\\)</p> <p>\\(n\\le 500, k\\le \\frac{n(n-1)}{2}\\)</p> \u601d\u8def <p>dp(i, j) = 1 ... i \u7d44\u6210\u7684 permutation \u5167\uff0c\u9006\u5e8f\u6578\u5c0d\u6578\u91cf\u70ba j \u7684\u6709\u5e7e\u500b</p> <p>\\(dp(i, j) = \\sum \\limits_{j-(i-1)\\le k\\le j} dp(i - 1, k)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int maxn = 505;\nconst int M = 1e9 + 7;\nint n, k;\nint dp[maxn][maxn * maxn];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n\n    dp[1][0] = 1;\n    for(int i = 2; i &lt;= n; i++){\n        int sum = 0, p = 0; \n        for(int j = 0; j &lt;= k; j++){\n            if(j - (i - 1) &gt; p) {\n                sum -= dp[i - 1][p];\n                p++;\n            }\n            sum += dp[i - 1][j];\n            dp[i][j] = sum % M;\n        }\n    }\n    cout &lt;&lt; dp[n][k] &lt;&lt; \"\\n\";\n} \n</code></pre> CSES - Coding Company <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u554f\u6709\u5e7e\u7a2e\u5206\u7d44\u65b9\u5f0f\u4f7f\u6bcf\u7d44\u7684\u6700\u5927\u6700\u5c0f\u5dee\u4e4b\u548c \\(\\le x\\)</p> <p>\\(n\\le 100, 0\\le x\\le 5000, 0\\le t_i \\le 100\\)</p> \u601d\u8def <p>\u5148\u5c07\u9663\u5217 \\(a\\) \u5c0f\u5230\u5927 sort\uff0c\u6211\u5011\u5728\u7b97 max - min \u5c31\u53ef\u4ee5\u4e00\u6bb5\u4e00\u6bb5\u7684\u7b97</p> <p>dp(i, j, x): 1~i\uff0c\u6709 j \u7d44\u5df2\u7d93\u958b\u59cb\uff0c\u4f46\u9084\u6c92\u7d50\u675f\uff0c\u6700\u5927\u6700\u5c0f\u5dee\u4e4b\u548c\u662f x \u7684\u65b9\u6cd5\u6578</p> <p>dp(i, j, x) +=</p> <ul> <li> <p>\u5c07 i \u52a0\u5165\u5176\u4e2d\u4e00\u7d44 (j + 1) * dp(i - 1, j, x - (a[i] - a[i - 1]) * j)</p> <ul> <li> <p>i \u81ea\u5df1\u958b\u65b0\u7684\u4e00\u7d44, \u7136\u5f8c\u7acb\u523b\u7d50\u675f</p> </li> <li> <p>i \u52a0\u5165 j \u7d44\u88e1\u9762\u7684\u5176\u4e2d\u4e00\u7d44</p> </li> </ul> </li> <li> <p>\u518d\u958b\u4e00\u7d44 dp(i - 1, j - 1, x - (a[i] - a[i - 1]) * (j - 1))</p> </li> <li> <p>\u7d50\u675f\u4e00\u7d44 (j + 1) * dp(i - 1, j + 1, x - (a[i] - a[i - 1]) * (j + 1))</p> </li> </ul> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n\n#define int long long\nusing namespace std;\n\nconst int maxn = 1e2 + 5;\nconst int maxm = 5e3 + 5;\nconst int M = 1e9 + 7;\nint n, m;\nint a[maxn], dp[2][maxn][maxm];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    sort(a + 1, a + n + 1);\n\n    dp[1][0][0] = 1;\n    dp[1][1][0] = 1;\n\n    for (int i = 2; i &lt;= n; i++) {\n        int now = (i % 2), pre = ((i - 1) % 2);\n        memset(dp[now], 0, sizeof(dp[now]));\n\n        int d = a[i] - a[i - 1];\n\n        for (int j = 0; j &lt;= i; j++) {\n            for (int k = 0; k &lt;= m; k++) {\n                if (0 &lt;= k - d * j &amp;&amp; k - d * j &lt;= m)\n                    dp[now][j][k] += dp[pre][j][k - d * j] * (j + 1);\n                dp[now][j][k] %= M;\n\n                if (j + 1 &lt;= n &amp;&amp; 0 &lt;= k - d * (j + 1) &amp;&amp; k - d * (j + 1) &lt;= m)\n                    dp[now][j][k] += dp[pre][j + 1][k - d * (j + 1)] * (j + 1);\n                dp[now][j][k] %= M;\n\n                if (j &gt;= 1 &amp;&amp; 0 &lt;= k - d * (j - 1) &amp;&amp; k - d * (j - 1) &lt;= m)\n                    dp[now][j][k] += dp[pre][j - 1][k - d * (j - 1)];\n                dp[now][j][k] %= M;\n            }\n        }\n    }\n\n    int sum = 0;\n    for (int k = 0; k &lt;= m; k++) {\n        int now = (n % 2);\n        sum += dp[now][0][k];\n        sum %= M;\n    }\n\n    cout &lt;&lt; sum &lt;&lt; \"\\n\";\n}\n</code></pre> \u5168\u570b\u8cfd 2021 pI. \u9435\u8def\u92ea\u8a2d(rail) <p>\u7d66 \\(L\\)\uff0c\u73fe\u5728\u6709\u4e00\u500b \\(2\\times L\\) \u7684\u65b9\u683c\uff0c\u554f\u6709\u5e7e\u7a2e\u653e\u6cd5\u3002\u4ee5 \\(2\\times 4\\) \u70ba\u4f8b\uff0c\u6709 \\(6\\) \u653e\u6cd5</p> <p> </p> <p>\\(1\\le L \\le 10^{10}\\)</p> \u601d\u8def <p>\u5148\u8003\u616e\u6700\u5f8c\u4e00\u500b\u9023\u7e8c\u6bb5<sup>1</sup>\u653e\u4ec0\u9ebc\uff0c\u6211\u5011\u5c07\u6700\u5f8c\u4e00\u6bb5\u9577\u5ea6\u70ba 2, 3, 4 \u7684\u756b\u51fa\u4f86\u770b\u770b</p> <p> </p> <p>\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c\u82e5\u6700\u5f8c\u4e00\u6bb5</p> <ul> <li> <p>\u9577\u5ea6\u70ba 2 \u21d2 1 \u7a2e\u53ef\u80fd</p> </li> <li> <p>\u9577\u5ea6\u70ba 3 \u21d2 3 \u7a2e\u53ef\u80fd</p> </li> <li> <p>\u9577\u5ea6\u70ba 4 \u21d2 5 \u7a2e\u53ef\u80fd</p> </li> <li> <p>\u9577\u5ea6\u70ba 5 \u21d2 7 \u7a2e\u53ef\u80fd</p> </li> </ul> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5217\u51fa </p> \\[f(n)=f(n-2) + 3\\times f(n-3) + 5\\times f(n - 4)+\\ldots + (2n-3)\\times f(n-n)\\] <p>\u53ea\u662f\u9019\u500b\u4e0d\u597d\u8f49\u79fb\uff0c\u6211\u5011\u60f3\u8981\u5c07\u5f8c\u9762\u4fc2\u6578\u70ba 3, 5, 7, ... \u7d66\u5f04\u6389</p> <p> </p> <p> </p> <p>\u6700\u5f8c\u4f7f\u7528\u77e9\u9663\u5feb\u901f\u51aa\u52a0\u901f\u5373\u53ef</p> Hackerrank - Equal <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6bcf\u6b21\u53ef\u9078\u4e00\u500b \\(i\\)\uff0c\u5c07\u300c\u9664\u4e86 \\(a_i\\) \u4ee5\u5916\u300d\u90fd\u52a0\u4e0a \\(\\{ 1, 2, 5\\}\\) \u5176\u4e2d\u4e00\u500b\uff08\u53ea\u80fd\u9078\u4e00\u500b\uff0c\u7136\u5f8c\u90fd\u52a0\u540c\u6a23\u7684\uff09\uff0c\u554f\u6700\u5c11\u64cd\u4f5c\u6b21\u6578\u4f7f\u9663\u5217\u7684\u6bcf\u4e00\u9805\u90fd\u4e00\u6a23</p> <p>\u6709 \\(t\\) \u7b46\u6e2c\u8cc7 \\(,t\\le 100, n\\le 10^4\\)</p> \u601d\u8def <p>\u5176\u4ed6\u4eba\u90fd +x\uff0c\u53ef\u4ee5\u60f3\u6210\u81ea\u5df1\u88ab -x\u3002\u6240\u4ee5\u554f\u984c\u5c31\u8b8a\u6210\u8981\u505a\u5e7e\u6b21 -1, -2, -5\uff0c\u624d\u80fd\u4f7f\u6bcf\u4e00\u9805\u90fd\u76f8\u540c\uff0c\u89c0\u5bdf\u5230\u4e00\u6a23\u81f3\u5c11\u8981\u6e1b\u5c11\u5230\u6700\u5c0f\u7684\u90a3\u4e00\u9805\uff0c\u81f3\u591a\u5c31\u662f\u6700\u5c0f\u7684\u90a3\u4e00\u9805\u518d -5\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u679a\u8209\u9019\u500b\u7bc4\u570d\uff0c\u7136\u5f8c\u5148\u9810\u8655\u7406 dp[x] \u4ee3\u8868 x \u81f3\u5c11\u9700\u8981\u6e1b -1, -2, -5 \u5e7e\u6b21\u624d\u6703\u8b8a\u6210 0\uff0c\u5c0d\u65bc\u9663\u5217\u7684\u6bcf\u4e00\u9805\u76f4\u63a5\u67e5\u8868\u5373\u53ef</p> code <pre><code>const int MAXN = 1e3 + 5;\nint dp[MAXN];\n\nvoid table() {\n    for (int i = 1; i &lt; MAXN; i++) {\n        dp[i] = dp[i - 1] + 1;\n        if (i &gt;= 2) dp[i] = min(dp[i], dp[i - 2] + 1);\n        if (i &gt;= 5) dp[i] = min(dp[i], dp[i - 5] + 1);\n    }\n}\n\nint equal(vector&lt;int&gt; arr) {\n    int n = arr.size();\n    int ans = 0x3f3f3f3f;\n    int mn = *min_element(arr.begin(), arr.end());\n    for (int val = mn - 5; val &lt;= mn; val++) {\n        int cnt = 0;\n        for (int i = 0; i &lt; n; i++) {\n            cnt += dp[arr[i] - val];\n        }\n        ans = min(ans, cnt);\n    }\n    return ans;\n}\n</code></pre> \u81ea\u5275\u984c by Whale <p>\u7d66\u4e00\u500b \\(n\\times m\\) \u7684 Grid\uff0c\u6bcf\u9694\u9700\u586b\u5165 \\(\\{0, 1, 2\\}\\) \u5176\u4e2d\u4e00\u500b\u6578\u5b57\uff0c\u6eff\u8db3:</p> <ol> <li>\u4e0d\u80fd\u6709\u4e00\u500b row \u5168\u90e8\u90fd\u662f \\(0\\)</li> <li>\u4e0d\u80fd\u6709\u4e00\u500b col \u540c\u6642\u5b58\u5728 \\(1\\) \u548c \\(2\\)</li> </ol> <p>\u6c42\u653e\u6cd5\u6578</p> <p>\\(1\\le n,m \\le 100\\)</p> \u601d\u8def <p>\u5148\u601d\u8003 \\(1\\) \u6216\u662f \\(2\\) \u662f\u5426\u91cd\u8981 ? \u53ef\u4ee5\u767c\u73fe\u5176\u5be6\u6211\u5011\u53ef\u4ee5\u5148\u586b \\(0,1\\)\uff0c\u518d\u5c07 \\(1\\) \u63db\u6210 \\(2\\) \u5373\u53ef\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u4ee4 </p> <p> \\(f(n, m, t)=n\\times m\\) \u7684 grid \u6070\u6709 \\(t\\) \u500b col \u81f3\u5c11\u6709 1 \u500b \\(1\\) \u7684\u5408\u6cd5\u65b9\u6cd5\u6578 </p> <p>\u90a3\u9ebc\u9019 \\(t\\) \u500b col \u88e1\u9762\u7684 \\(1\\) \u5c31\u53ef\u4ee5\u662f \\(1\\) \u6216\u8005\u662f \\(2\\)\uff0c\u6240\u4ee5\u7b54\u6848\u70ba \\(\\sum \\limits_{t=1}^m f(n, m, t) \\times 2^t\\) \uff0c\u63a5\u4e0b\u4f86\u6211\u5011\u5c31\u53ea\u9700\u8981\u60f3\u5982\u4f55\u8f49\u79fb \\(f(n,m,t)\\)</p> <p> </p> <p>\u6211\u5011\u8003\u616e\u5f9e \\(f(n-1,m,t)\\) \u8207 \\(f(n,m,t)\\) \u7684\u95dc\u4fc2\uff0c\u56e0\u70ba\u6c92\u6709\u984d\u5916\u518d\u9078\u8981\u653e \\(1\\) \u7684 col\uff0c\u6240\u4ee5\u8ca2\u737b\u5c31\u662f \\(f(n-1,m,t)\\times (2^t-1)\\) \u4e5f\u5c31\u662f\u6bcf\u500b\u6709\u9078 \\(1\\) \u7684 col \u53ef\u4ee5\u6c7a\u5b9a\u8981\u65b0\u589e \\(1\\) \u6216 \\(0\\)\uff0c\u4f46\u4e0d\u80fd\u5168\u90e8\u653e \\(0\\) \u6240\u4ee5\u8981\u6e1b \\(1\\)\u3002\u90a3\u5982\u679c\u8981\u984d\u5916\u518d\u9078\u8981\u653e \\(1\\) \u7684 col\uff0c\u8ca2\u737b\u6703\u8a66 \\(f(n-1,m,t-1)\\times 2^{t-1}\\times \\tbinom{m-(t-1)}{1}\\)\uff0c\u5c31\u662f\u984d\u5916\u9078\u4e00\u500b col \u653e \\(1\\)\uff0c\u5176\u4ed6\u539f\u672c\u6709\u653e \\(1\\) \u7684 col \u653e \\(0,1\\) \u90fd\u53ef\u3002\u6240\u4ee5\u6700\u5f8c\u6211\u5011\u6574\u7406\u4e00\u4e0b:</p> \\[\\begin{align} f(n,m,t) &amp;= f(n-1,m,t)\\times (2^t-1) \\\\ &amp;+ \\sum\\limits_{i=1\\ldots t}f(n-1,m, t-i)\\times 2^{t-i}\\times \\tbinom{m-(t-i)}{i}\\end{align}\\] <p>\u72c0\u614b\u53ea\u6709 \\(n,t\\) \u6709\u7528\uff0c\u6240\u4ee5\u662f \\(O(n^2)\\)\uff0c\u8f49\u79fb \\(O(n)\\)\uff0c\u7e3d\u6642\u9593\u8907\u96dc\u5ea6 \\(O(n^3)\\)</p> CSES - Counting Towers <p>\u6709\u7121\u9650\u591a\u7a2e\u908a\u9577\u70ba\u6574\u6578\u7684\u65b9\u584a\uff0c\u554f\u586b\u6eff \\(2\\times n\\) \u7684\u77e9\u5f62\u6709\u5e7e\u7a2e\u65b9\u6cd5</p> <p>\u6709 \\(t\\) \u7b46\u8f38\u5165\uff0c\\(1\\le t\\le 100, 1\\le n\\le 10^6\\)</p> \u601d\u8def <ol> <li>\u8003\u616e\u6700\u5f8c\u4e00\u6bb5\u653e\u4ec0\u9ebc\uff08nhspc\uff09</li> <li>\u8003\u616e\u6700\u5f8c\u4e00\u683c\u653e\u4ec0\u9ebc\uff0c\u8207\u4e4b\u524d\u7684\u95dc\u4fc2\uff08\u6b64\u984c\uff09</li> </ol> <p>\u4ee4 \\(dp(i, 0/1)\\) \u70ba \u6700\u5f8c\u4e00\u500b column \u662f\u300c\u4e0d\u9023\u901a\u7684/\u9023\u901a\u7684\u300d\u65b9\u6cd5\u6578</p> <p> </p> <ul> <li> <p>\\(dp(i, 0) = 4 \\times dp(i - 1, 0) + dp(i - 1, 1)\\)</p> </li> <li> <p>\\(dp(i, 1) = 2 \\times dp(i - 1, 1) + dp(i - 1, 0)\\)</p> </li> </ul> CSES - Permutation II <p>\u554f\u6709\u5e7e\u500b \\(1\\ldots n\\) \u7684 permutation \u4e0d\u5b58\u5728\u76f8\u9130\u9805\u5dee 1</p> <p>\\(n\\le 1000\\)</p> \u601d\u8def <p>\u4ee4 \\(dp(i, j, 0/1)=1\\ldots i\\) \u7684 permutation \u5167\uff0c\u76f8\u9130\u9805\u5dee 1 \u7684\u6709 \\(j\\) \u500b\uff0c\\(i\\) \u8ddf \\(i-1\\) \u4e0d\u76f8\u9130/\u76f8\u9130</p> <p>\u5148\u8003\u616e \\(i\\) \u8981\u63d2\u5165 \\(1\\ldots i-1\\) \u7684 permutation \u4e2d\uff0c\u6eff\u8db3 \\(i\\) \u8ddf \\(i-1\\) \u4e0d\u76f8\u9130\uff0c\\(i\\) \u53ef\u4ee5:</p> <ul> <li> <p>\u653e\u5728\u76f8\u9130\u5dee 1 \u7684\u5143\u7d20\u4e4b\u9593\uff08\u9664\u4e86 \\(i-1\\) \u65c1\u908a\u4e0d\u80fd\uff09</p> </li> <li> <p>\u5176\u4ed6\uff08\u9664\u4e86 \\(i-1\\) \u65c1\u908a\u4e0d\u80fd\uff09</p> </li> </ul> <p>\u6240\u4ee5\u53ef\u4ee5\u5217\u51fa\u8f49\u79fb\u5f0f</p> <p>\\(dp(i,j,0)=\\begin{cases}(j+1)\\times dp(i-1,j+1,0)+j\\times dp(i-1,j+1, 1) \\\\ (i-j-2)\\times dp(i-1,j,0)+(i-j-1)\\times dp(i-1,j,1)  \\end{cases}\\) </p> <p>\u8003\u616e \\(i\\) \u8981\u63d2\u5165 \\(1\\ldots i-1\\) \u7684 permutation \u4e2d\uff0c\u6eff\u8db3 \\(i\\) \u8ddf \\(i-1\\) \u76f8\u9130\uff0c\\(i\\) \u53ef\u4ee5:</p> <ul> <li>\u653e\u5728 \\(i-1\\) \u65c1\u908a</li> </ul> <p>\\(dp(i,j,1)=2\\times dp(i-1,j-1,0)+dp(i-1,j,1)+dp(i-1,j-1,1)\\)</p> Atcoder abc207 E - Mod i <p>\u6709\u4e00\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\u554f\u6709\u591a\u5c11\u7a2e partition \u65b9\u5f0f\uff0c\u4f7f\u5f97\u5c0d\u65bc\u7b2c \\(i\\) \u584a\u7684\u5143\u7d20\u548c \\(sum_i\\) \u90fd\u6574\u9664 \\(i\\)</p> <p>\\(n\\le 3000,1\\le a_i\\le 10^{15}\\)</p> \u601d\u8def <p>\u8a2d \\(dp(i,j)\\) \u70ba\u5c0d\u65bc \\(a_1,\\ldots ,a_i\\)\uff0c\u5206\u6210 \\(j\\) \u584a\u7684\u5408\u6cd5\u65b9\u6cd5\u6578</p> \\[ dp(i,j)=\\sum \\limits_{k=1\\ldots i-1} dp(k,j-1) \\mid (S_i-S_k)\\% j = 0 \\] <p>\u89c0\u5bdf\u5230\u6211\u5011\u5728\u5176\u5be6\u53ef\u4ee5\u5148\u679a\u8209 \\(j\\)\uff0c\u518d\u679a\u8209 \\(i\\)\uff0c\u9019\u6a23\u6211\u5011\u5c31\u53ef\u4ee5\u958b\u4e00\u500b\u9663\u5217 \\(cnt\\)\uff0c\\(cnt_x\\) \u7d00\u9304 \\(S_i\\% j=x\\) \u7684\u7e3d\u548c\uff0c\u8f49\u79fb\u76f4\u63a5\u53bb\u67e5\u8868\u5373\u53ef\uff0c\u8907\u96dc\u5ea6 \\(O(n^2)\\)</p> JOI 2018 Final \u56e2\u5b50\u5236\u4f5c <p>\u7d66\u4e00\u500b n * m \u7684 grid\uff0c\u6bcf\u683c\u6709 R, G, W \u5176\u4e2d\u4e00\u500b\uff0c\u76e1\u53ef\u80fd\u7684\u9078\u4e00\u4e9b\u9806\u5e8f\u70ba R \u2192 G \u2192 W \u7684\u683c\u5b50\uff0c\u53ea\u80fd\u5f9e\u5de6\u5230\u53f3\u6216\u5f9e\u4e0a\u5230\u4e0b\u3002\u554f\u6700\u591a\u80fd\u9078\u5e7e\u500b R \u2192 G \u2192 W</p> <p>\\(n, m\\le 3000\\)</p> \u601d\u8def <p> \u5982\u679c\u91cd\u5408\uff08\u4e8c\u9078\u4e00\uff09\u80af\u5b9a\u662f\u4e0a\u9762\u4e09\u7a2e\u60c5\u6cc1\u4e4b\u4e00 </p> <p>\u6ce8\u610f\u5230\uff0c\u5982\u679c\u9700\u8981\u4e8c\u9078\u4e00\u6642\uff0c\u5169\u500b G \u7684\u90e8\u5206\u6703\u5728\u4e00\u689d\u5c0d\u89d2\u7dda\u4e0a\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5c0d\u6bcf\u689d\u5c0d\u89d2\u7dda\u55ae\u7368\u9032\u884c dp\uff0c\u6700\u5f8c\u518d\u52a0\u8d77\u4f86\u5373\u53ef\u3002\u4e5f\u5c31\u662f dp(i, 0 / 1 / 2) \u8868\u793a\u7576\u524d\u5728\u770b\u7684\u9019\u689d\u5c0d\u89d2\u7dda\u4e0a\uff0c\u7b2c i \u884c\u300c\u4e0d\u9078 / \u6a6b\u8457\u9078 / \u8c4e\u8457\u9078\u300d</p> <p>Dinic O(m sqrt(n)) \u4f5c\u6cd5(TLE)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nconst int MAXN = 3005;\nint n, m, ans;\nint dp[MAXN][3];\nchar s[MAXN][MAXN];\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; ++i) {\n        cin &gt;&gt; s[i] + 1;\n    }\n    for (int sm = 2; sm &lt;= n + m; ++sm) {\n        memset(dp, 0, sizeof(dp));\n        int tmp = 0;\n        for (int i = max(1, sm - m), j = sm - i; i &lt;= n &amp;&amp; j; ++i, --j) {\n            dp[i][0] = max({dp[i - 1][0], dp[i - 1][1], dp[i - 1][2]});\n            if (s[i][j] == 'G') {\n                if (s[i - 1][j] == 'R' &amp;&amp; s[i + 1][j] == 'W')\n                    dp[i][1] = max(dp[i][1], max(dp[i - 1][0], dp[i - 1][1]) + 1);\n                if (s[i][j - 1] == 'R' &amp;&amp; s[i][j + 1] == 'W')\n                    dp[i][2] = max(dp[i][2], max(dp[i - 1][0], dp[i - 1][2]) + 1);\n            }\n            tmp = max(tmp, max({dp[i][0], dp[i][1], dp[i][2]}));\n        }\n        ans += tmp;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> CF 1913 D. Array Collapse <p>\u7d66\u4e00\u500b\u5e8f\u5217 \\(p_1,\\ldots ,p_n\\)\uff0c\u4fdd\u8b49\u5e8f\u5217\u5143\u7d20\u4e92\u4e0d\u76f8\u540c\u3002\u53ef\u4ee5\u5c0d\u5176\u505a\u82e5\u5e72\u6b21\u64cd\u4f5c\uff08\u53ef\u4ee5\u70ba 0 \u6b21\uff09\uff0c\u6bcf\u6b21\u64cd\u4f5c\u9078\u53d6\u4e00\u500b\u5340\u9593\uff0c\u522a\u9664\u6700\u5c0f\u503c\u4ee5\u5916\u7684\u5176\u4ed6\u5143\u7d20\u3002\u6c42\u6700\u7d42\u64cd\u4f5c\u5f8c\u6709\u591a\u5c11\u7a2e\u53ef\u80fd\u7684\u5e8f\u5217 ?</p> <p>\\(n\\le 3\\times 10^5, 1\\le p_i\\le 10^9\\)</p> \u601d\u8def <p>\u9019\u7a2e\u984c\u76ee\u6211\u5011\u4e00\u822c\u6703\u60f3\u7528\u7d44\u5408\u6216\u662f dp \u4f86\u505a\uff0c\u6211\u5011\u5148\u4f86\u89c0\u5bdf\u4e00\u4e9b\u6027\u8cea\u3002</p> <p>\u89c0\u5bdf\u5230\u8981\u522a\u6389\u67d0\u500b\u5340\u9593 \\(a_i,\\ldots ,a_j\\)\uff0c\u4e00\u5b9a\u662f \\(a_{i-1}\\) \u6216 \\(a_{j+1}\\) \u522a\u6389\u7684\uff0c\u4e5f\u5c31\u662f \\(a_{i-1}\\) \u6216\u662f \\(a_{j+1}\\) \u662f\u6700\u5c0f\u503c\u3002</p> <p> </p> <p>\u6211\u5011\u5617\u8a66\u4ee4 dp[i] \u8868\u793a\u4ee5 i \u7d50\u5c3e\u7684\u65b9\u6cd5\u6578\u3002\u89c0\u5bdf\u4ee5\u4e0a\u4f8b\u5b50\uff0c\u4ee5\u85cd\u8272\u7684\u9ede\u4f86\u8aaa\uff0c\u80fd\u8f49\u79fb\u7684\u9ede\u5c31\u662f\u7d05\u8272\uff0c\u56e0\u70ba p[i] \u6bd4\u4ed6\u5011\u5c0f\uff0c\u80fd\u522a\u6389\u4ed6\u5011\uff0c\u90a3\u8003\u616e\u524d\u9762\u7684\u53bb\u522a\u6389\u5f8c\u9762\u7684\u8a71\u5462? \u90a3\u6211\u5011\u6703\u5f97\u5230\u6a58\u8272\u7684\u9ede\u4e5f\u53ef\u4ee5\u8f49\u79fb\u5230 dp[i]\u3002\u53ef\u4ee5\u767c\u73fe\u7d05\u8272\u7684\u9ede\u4e00\u5b9a\u662f\u9023\u7e8c\u7684\uff0c\u800c\u6a58\u8272\u7684\u9ede\u5982\u679c\u6709\u5f88\u591a\u500b\u7684\u8a71\u6703\u4e0d\u4e00\u5b9a\u9023\u7e8c\uff0c\u4f46\u4e00\u5b9a\u662f\u7531\u5c0f\u5230\u5927\uff0c\u56e0\u70ba\u9019\u6a23\u524d\u9762\u7684\u624d\u80fd\u522a\u6389\u5f8c\u9762\u7684\uff0c\u6240\u4ee5\u9019\u8b93\u6211\u5011\u60f3\u5230\u53ef\u4ee5\u7528\u55ae\u8abf stack \u4f86\u7dad\u8b77\uff0c\u6240\u4ee5\u7a0d\u5fae\u5217\u4e00\u4e0b\uff0c\u7576 j \u53ef\u4ee5\u8f49\u79fb\u5230 i \u6642:</p> <ul> <li> <p>a[i] &lt; a[j]: \u53ef\u884c\u7684 j \u662f\u5728 i \u524d\u9762\u4e00\u6bb5\u9023\u7e8c\u7684\u5340\u9593</p> </li> <li> <p>a[i] &gt; a[j]: j \u662f\u5728\u7531\u5c0f\u5230\u5927\u7684\u55ae\u8abf stack \u88e1\u9762\u7684\u7bc0\u9ede</p> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int N = 3e5 + 5, p = 998244353;\nint n, m, a[N], dp[N], s[N], stk[N];\n\nvoid solve() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    int sum = 0, top = 0; // sum \u7d00\u9304\u55ae\u8abf stack \u5167\u7684\u5143\u7d20 dp \u503c\u4e4b\u548c\n    for (int i = 1; i &lt;= n; i++) {\n        while (top &amp;&amp; a[stk[top]] &gt; a[i]) {\n            sum = (sum - dp[stk[top]] + p) % p;\n            // \u88ab pop \u6389, \u5c31\u8981\u5f9e sum \u88e1\u6263\u9664\u8ca2\u737b\n            top--;\n        }\n        dp[i] = (sum + s[i - 1] - s[stk[top]] + (top == 0) + p) % p;\n        // sum: \u55ae\u8abf stack \u7684\u8ca2\u737b, s[i - 1] - s[stk[top]]: \u6bd4 a[i] \u5927\u7684\u8ca2\u737b\n        // top == 0: \u55ae\u8abf stack \u70ba\u7a7a\u6642, \u4ee3\u8868 i \u53ef\u505a\u958b\u982d, \u56e0\u70ba\u662f\u6700\u5c0f\n        s[i] = (s[i - 1] + dp[i]) % p; // \u524d\u7db4\u548c\n        stk[++top] = i;\n        sum = (sum + dp[i]) % p;\n    }\n    cout &lt;&lt; sum &lt;&lt; '\\n';\n}\n\nsigned main() {\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> CF 1935 C. Messenger in MAC <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217\uff0c\u7b2c i \u9805\u6709\u6b0a\u503c \\(a_i, b_i\\)\uff0c\u5f9e\u4e2d\u9078\u4e00\u4e9b\u9805 \\(p_1, \\ldots ,p_k\\) \u4f7f\u5f97</p> \\[ \\sum_{i=1}^{k} a_{p_i} + \\sum_{i=1}^{k - 1} |b_{p_i} - b_{p_{i+1}}| \\le t \\] <p>\u554f\u6700\u591a\u80fd\u9078\u5e7e\u9805</p> <p>\\(n\\le 2000, 1\\le t, a_i, b_i\\le 10^9\\)</p> \u601d\u8def <p>\u56e0\u70ba\u7d55\u5c0d\u503c\u6709\u5927\u5c0f\u4e4b\u5206\uff0c\u6211\u5011\u5c07 b[i] \u5148\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u7528 dp(i, j) \u8868\u793a\u5728\u524d i \u9805\u88e1\u9762\uff0c\u9078\u4e86 j \u9805\uff0ccost \u6700\u5c0f\u662f\u591a\u5c11\uff0c\u4f46\u9019\u88e1\u6709\u500b\u7d30\u7bc0\u5c31\u662f\u9019\u88e1\u7684 dp(i, j) \u6db5\u84cb\u6700\u5f8c\u7684 - b[i]\uff08\u56e0\u70ba\u9019\u6a23\u5728\u8f49\u79fb\u6642\u624d\u80fd\u5b8c\u6574\u7684\u8868\u793a\u7d55\u5c0d\u503c\u5167\u7684\u503c\uff09\u3002\u6240\u4ee5\u8f49\u79fb\u5f0f\u70ba dp(i, j) = dp(i - 1, j - 1) + a[i] + b[i]\u3002\u5728\u505a\u5b8c\u9019\u500b\u4e4b\u5f8c\u8a18\u5f97\u5c07 dp(i, j) = min{dp(i - 1, j), dp(i, j) - b[i]}\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nstruct Node {\n    int a, b;\n    bool operator&lt;(const Node &amp;rhs) const {\n        return b &lt; rhs.b;\n    }\n};\n\nconst int inf = 1e9;\nsigned main() {\n    int T;\n    cin &gt;&gt; T;\n    while (T--) {\n        int n, t;\n        cin &gt;&gt; n &gt;&gt; t;\n        vector&lt;Node&gt; v(n);\n        for (int i = 0; i &lt; n; i++) {\n            int a, b;\n            cin &gt;&gt; a &gt;&gt; b;\n            v[i] = {a, b};\n        }\n        sort(v.begin(), v.end());\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n + 1, inf));\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (t &gt;= v[i].a) {\n                ans = max(ans, 1ll);\n            }\n        }\n        dp[0][1] = v[0].a - v[0].b;\n        for (int i = 1; i &lt; n; i++) {\n            // 0-base, consider [0, i]\n            dp[i][1] = min(dp[i - 1][1], v[i].a - v[i].b);\n            for (int j = 2; j &lt;= i + 1; j++) {\n                dp[i][j] = dp[i - 1][j - 1] + v[i].a + v[i].b;\n                if (t &gt;= dp[i][j]) {\n                    ans = max(ans, j);\n                }\n                dp[i][j] = min(dp[i - 1][j], dp[i][j] - v[i].b);\n            }\n        }\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"dp/problem/#_1","title":"\u8cc7\u6599","text":"<ul> <li>https://hackmd.io/@penguin71630/DPpractice1?view#/7/9</li> </ul> <ol> <li> <p>\u70ba\u4ec0\u9ebc\u8981\u9019\u6a23\u8003\u616e\u5462? \u4f8b\u5982\u8cbb\u5f0f\u6578\u5217 f(n) \u53ea\u8981\u5f9e f(n - 1) \u8207 f(n - 2) \u8f49\u79fb\u5c31\u597d\uff0c\u5982 f(n - 3) \u5c31\u53ef\u4ee5\u7528 1 + 2 \u4f86\u4ee3\u66ff\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u8981\u8003\u616e\u7121\u6cd5\u88ab\u66ff\u4ee3\u7684\u5373\u53ef\u00a0\u21a9</p> </li> </ol>"},{"location":"dp/range_dp/","title":"\u5340\u9593dp","text":""},{"location":"dp/range_dp/#_1","title":"\u6982\u5ff5","text":"<p>\u5340\u9593\u985e\u52d5\u614b\u898f\u5283\u662f\u7dda\u6027\u52d5\u614b\u898f\u5283\u7684\u64f4\u5c55\uff0c\u5b83\u5728\u5206\u968e\u6bb5\u5730\u5283\u5206\u554f\u984c\u6642\uff0c\u8207\u968e\u6bb5\u4e2d\u5143\u7d20\u51fa\u73fe\u7684\u9806\u5e8f\u548c\u524d\u4e00\u968e\u6bb5\u7684\u54ea\u4e9b\u5143\u7d20\u5408\u4f75\u800c\u4f86\u6709\u5f88\u5927\u7684\u95dc\u4fc2\u3002 \u8a2d\u72c0\u614b \\(dp(l, r)\\) \u8868\u793a\u5c07 \\(a_l,\\ldots ,a_r\\) \u7684\u6240\u6709\u5143\u7d20\u5408\u4f75\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u50f9\u503c\uff0c\u5247 \\(dp(l, r)=\\max\\{dp(l, k) + dp(k+1, r)+\\text{cost}(l, r)\\}\\)\uff0c\\(cost(l, r)\\) \u70ba\u5c07\u9019\u5169\u7d44\u5143\u7d20\u5408\u4f75\u8d77\u4f86\u7684\u4ee3\u50f9\u3002</p>"},{"location":"dp/range_dp/#_2","title":"\u984c\u76ee","text":"CF 1025 D. Recovering BST <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u4e2d\u5e8f\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u554f\u662f\u5426\u80fd\u7d44\u51fa\u4e00\u9846 BST \u6eff\u8db3\u76f8\u9130\u5169\u9ede\u7684 \\(\\gcd (a_i, a_j)=1\\)</p> <p>\\(2\\le n\\le 700, 2\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u4ee4 L(i, j) \u70ba\u4ee5 j \u70ba\u6839\uff0c[i, j - 1] \u7576\u5de6\u5b50\u6a39\u662f\u5426\u80fd\u7d44\u51fa\u4e00\u9846\u5408\u6cd5 BST</p> <p>\u4ee4 R(i, j) \u70ba\u4ee5 i \u70ba\u6839\uff0c[i + 1, j] \u7576\u53f3\u5b50\u6a39\u662f\u5426\u80fd\u7d44\u51fa\u4e00\u9846\u5408\u6cd5 BST</p> <p>\u5c0d\u65bc\u4e00\u500b\u5340\u9593 [l, r]\uff0c\u679a\u8209 k \u7576 [l, r] \u7684\u6839\uff08\u7528 L(l, k) &amp;&amp; R(k, r) \u5224\u65b7\uff09\uff0c\u770b\u770b\u662f k \u5426\u80fd\u63a5\u5230 l - 1 \u7684\u53f3\u5b50\u6a39\u6216 r + 1 \u7684\u5de6\u5b50\u6a39\uff0c\u53ef\u884c\u5247\u5206\u5225\u8a2d R(l - 1, k) = true\uff0c\u6216 L(k, r + 1) = true</p> <p>\u53ef\u4ee5\u5148\u9810\u8655\u7406 G(i, j) \u4ee3\u8868 i \u662f\u5426\u80fd\u8207 j \u9023\u908a\uff0c\u5728\u8f49\u79fb\u6642\u7dad\u8b77\u4e00\u500b ans(l, r) \u4ee3\u8868 [l, r] \u662f\u5426\u80fd\u7d44\u51fa\u4e00\u9846\u5408\u6cd5\u7684 BST\uff0c\u6700\u5f8c\u8f38\u51fa ans(1, n) \u5373\u53ef</p> 2021 \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd pF. \u9b27\u9418\u8a2d\u7f6e (F_Alarm_Clock) <p>\u7d66\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4f60\u53ef\u4ee5\u5728\u6bcf\u500b\u4f4d\u7f6e \\(k+1\\le i\\le n - k\\) \u90fd\u8a2d\u7f6e\u4efb\u610f\u500b\u9b27\u9418\uff0c\u4e26\u6c7a\u5b9a\u6bcf\u500b\u9b27\u9418\u4ec0\u9ebc\u6642\u5019\u8981\u97ff\uff0c\u6bcf\u500b\u9b27\u9418\u7684\u5f71\u97ff\u7bc4\u570d\u662f \\([i-k, i+k]\\)\uff0c\u67d0\u4e00\u500b\u4f4d\u7f6e \\(j\\) \u7684\u8d77\u5e8a\u6642\u9593\u662f\u5f71\u97ff\u5230\u4ed6\u7684\u6240\u6709\u9b27\u9418\u4e2d\uff0c\u6700\u65e9\u97ff\u7684\u6642\u9593\uff0c\u800c\u9019\u500b\u6642\u9593\u5fc5\u9808 \\(\\le a_j\\)\u3002\u6c42\u6700\u5927\u7684\u8d77\u5e8a\u6642\u9593\u7e3d\u548c\u3002</p> <p>\\(1\\le n\\le 500 , 2k+1\\le n, 1\\le a_i\\le 10^6\\)</p> \u601d\u8def <p>\\(dp(l,r)=[l,r]\\) \u7bc4\u570d\u5167\u7684\u7b54\u6848\uff0c\u8f49\u79fb\u5c31\u662f\u627e\u5230\u5340\u9593\u88e1\u6700\u5c0f\uff0c\u90a3\u500b\u5f8c\u679a\u8209 \\([i-k, i+k]\\) \u6eff\u8db3\u6709\u8986\u84cb\u5230\u6700\u5c0f\u7684\uff08\u9b27\u9418\u53ef\u4ee5\u8a2d\u7f6e\u5728 \\([l, r]\\) \u4e4b\u5916\uff09\uff0c\u4e14\u6c92\u6709\u8a2d\u7f6e\u5728\u6700\u524d\u9762\u8207\u6700\u5f8c\u9762\u4e0d\u5408\u6cd5\u7684\u5340\u6bb5\uff0c\u7136\u5f8c \\([i-k, i+k]\\) \u4ee5\u5916\u7684\u5169\u500b\u5340\u9593\u5c31\u662f\u5b50\u554f\u984c\u3002</p> <p> </p> JOI 2015 Final \u5206\u86cb\u7cd5 2 <p>\u6709\u4e00\u500b\u86cb\u7cd5\uff0c\u5207\u6210 \\(n\\) \u584a\uff0c\u7b2c \\(i\\) \u584a\u7684\u5927\u5c0f\u662f \\(a_i\\)\u3002\u9996\u5148\uff0cAlice \u5148\u62ff\u4e00\u584a\u8d70\uff0c\u63a5\u8457\u5f9e Bob \u958b\u59cb\u4ea4\u66ff\u9078\uff0c\u53ea\u80fd\u9078\u64c7\u5de6\u53f3\u81f3\u5c11\u6709\u4e00\u584a\u5df2\u88ab\u9078\u64c7\u7684\u86cb\u7cd5\uff0c\u7576\u6709\u591a\u500b\u9078\u64c7\uff0cBob \u6703\u9078\u6bd4\u8f03\u5927\u7684\uff0cAlice \u53ef\u4ee5\u4efb\u610f\u9078\u3002\u554f Alice \u9078\u7684\u86cb\u7cd5\u5927\u5c0f\u7e3d\u548c\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(1\\le n\\le 2000, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>dp(l, r) = \u53d6\u5b8c [l, r]\uff0cAlice \u7684\u5206\u6578 - Bob \u7684\u5206\u6578\u7684 max</p> <p>\u7136\u5f8c\u5f9e\u9577\u5ea6\u5c0f\u5230\u9577\u5ea6\u5927\u8f49\u79fb\u5373\u53ef\uff0c\u6ce8\u610f\u662f\u74b0\uff0c\u6240\u4ee5\u6211\u5011\u81ea\u7136\u6703\u628a\u9577\u5ea6\u5f04\u6210 2n\uff0c\u4f46 \\(dp(1, *)\\) \u4e5f\u662f\u8981\u8003\u616e\u5f80\u5de6\u8f49\u79fb\u7684 case\uff0c\u6211\u7684\u8655\u7406\u65b9\u6cd5\u662f\u5c07 a[0] = a[n]\uff0c\u7136\u5f8c\u6700\u5f8c\u7684\u7b54\u6848\u4e0d\u8a08\u5165 \\(dp(0, *)\\) \u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 4e18;\nconst int maxn = 4e3 + 10;\n\nint n;\nint sum;\nint a[maxn], dp[maxn][maxn];\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        sum += a[i];\n    }\n    for (int i = n + 1; i &lt;= 2 * n; i++) {\n        a[i] = a[i - n];\n    }\n    for (int l = 0; l &lt; maxn; l++)  {\n        for (int r = 0; r &lt; maxn; r++) {\n            dp[l][r] = -INF;\n        }\n    }\n    for (int i = 1; i &lt;= 2 * n; i++) {\n        dp[i][i] = a[i];\n    }\n    a[0] = a[n];\n    for (int len = 1; len &lt;= n - 1; len++) {\n        for (int l = 1; l + len - 1 &lt; 2 * n; l++) {\n            int r = l + len - 1;\n            if (len &amp; 1) {\n                int mx = max(a[l - 1], a[r + 1]);\n                if (mx == a[r + 1]) {\n                    dp[l][r + 1] = max(dp[l][r + 1], dp[l][r] - mx);\n                } else {\n                    dp[l - 1][r] = max(dp[l - 1][r], dp[l][r] - mx);\n                }\n            } else {\n                dp[l - 1][r] = max(dp[l][r] + a[l - 1], dp[l - 1][r]);\n                dp[l][r + 1] = max(dp[l][r] + a[r + 1], dp[l][r + 1]);\n            }\n        }\n    }\n    int ans = -INF;\n    // me: 9, u: 6\n    // dp: 3, sum = 15, val = (15 - 3) / 2 + 3\n    for (int i = 1; i &lt;= n; i++) {\n        int val = (sum - dp[i][i + n - 1]) / 2 + dp[i][i + n - 1];\n        ans = max(val, ans);\n    }\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> POI 2015 Car washes <p>\u6709 \\(n\\) \u9593\u5546\u5e97\uff0c\u7b2c \\(i\\) \u9593\u50f9\u683c \\(p_i\\)\u3002\u6709 \\(m\\) \u500b\u6d88\u8cbb\u8005\uff0c\u7b2c \\(i\\) \u500b\u6703\u5f9e \\(p_{a_i},\\ldots ,p_{b_i}\\) \u6311\u50f9\u683c\u6700\u5c0f\u7684\uff0c\u82e5\u50f9\u683c \\(\\le c_i\\) \u5c31\u6703\u8cb7\uff0c\u53cd\u4e4b\u4e0d\u6703\u3002\u69cb\u9020 \\(p\\)\uff0c\u4f7f\u82b1\u9322\u7e3d\u548c\u6700\u5927</p> <p>\\(n\\le 50, m\\le 4000, 1\\le c_i,p_i\\le 5\\times 10^5\\)</p> \u601d\u8def <p>\u56e0\u70ba\u6700\u4f73\u89e3\u4e00\u5b9a\u53ef\u4ee5\u900f\u904e\u591a\u500b \\(c_i\\) \u69cb\u6210\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5148\u5c07 \\(c_i\\) \u96e2\u6563\u5316</p> <p>\\(dp(l,r,k)=\\) \u6240\u6709\u5340\u9593 \\([l,r]\\) \u5167\u7684\u6d88\u8cbb\u8005\u7576\u5340\u9593\u6700\u5c0f\u503c \\(\\ge k\\) \u6642\u7684\u7e3d\u6d88\u8cbb\u6700\u5c0f\u503c</p> \\[ dp(i,j,k)=\\min \\limits_{i\\le pos\\le j} \\{dp(i,pos-1,k)+dp(pos+1,j,k)+k\\cdot g(pos,k) \\} \\] <p>\u7136\u5f8c\u56e0\u70ba\u662f \\(\\ge k\\)\uff0c\u6240\u4ee5\u4e5f\u5fc5\u9808\u8003\u616e\u5f9e \\(dp(i,j,k+1)\\) \u8f49\u79fb\u904e\u4f86\u7684\u60c5\u6cc1</p> <p>\u5176\u4e2d \\(g(pos,k)\\) \u8868\u793a: \u5728\u7576\u524d \\([l,r]\\) \u5167\u7684\u6d88\u8cbb\u8005\u4e2d\uff0c\u7d93\u904e\u4e86 \\(pos\\) \u4e14 \\(c_i\\le k\\) \u7684\u6578\u91cf\u3002\u9019\u4e00\u90e8\u5206\u6d88\u8cbb\u8005\u7684\u8ca2\u737b\u5c31\u662f \\(k\\)</p> <p>\u69cb\u9020\u4e00\u7d44\u89e3\u7684\u8a71\uff0c\u6211\u5011\u7d00\u9304:</p> <ul> <li> <p>\\(k\\) \u8981\u5f80\u4e0a\u8df3\u5230\u54ea\u88e1</p> </li> <li> <p>\u65b7\u9ede \\(pos\\) \u7684\u4f4d\u7f6e</p> </li> </ul> <p>\u6700\u5f8c\u7528\u905e\u8ff4\u56de\u6eaf\u7b54\u6848</p> <p>\u53c3\u8003\u81ea: https://blog.csdn.net/qq_41996523/article/details/112477860</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 55, MAXM = 4005;\nint n, m, a[MAXM], b[MAXM], c[MAXM], lsh[MAXM], tot;\nint g[MAXN][MAXM], f[MAXN][MAXN][MAXM], pos[MAXN][MAXN][MAXM];\nint lstk[MAXN][MAXN][MAXM], ans[MAXN];\n\nvoid getans(int l, int r, int k) {\n    if (k &gt; tot) {\n        return;\n    }\n    if (l &gt; r) {\n        return;\n    }\n    k = lstk[l][r][k];\n    ans[pos[l][r][k]] = lsh[k];\n    getans(l, pos[l][r][k] - 1, k);\n    getans(pos[l][r][k] + 1, r, k);\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];\n        lsh[++tot] = c[i];\n    }\n\n    sort(lsh + 1, lsh + 1 + tot);\n    tot = unique(lsh + 1, lsh + 1 + tot) - lsh - 1;\n    for (int i = 1; i &lt;= m; i++) {\n        c[i] = lower_bound(lsh + 1, lsh + 1 + tot, c[i]) - lsh;\n    }\n\n    for (int len = 1; len &lt;= n; len++) {\n        for (int l = 1; l + len - 1 &lt;= n; l++) {\n            int r = l + len - 1;\n            for (int i = 1; i &lt;= n; i++) {\n                for (int j = 1; j &lt;= tot; j++) {\n                    g[i][j] = 0;\n                }\n            }\n            for (int i = 1; i &lt;= m; i++) {\n                if (l &lt;= a[i] &amp;&amp; b[i] &lt;= r) {\n                    g[a[i]][c[i]]++;\n                    g[b[i] + 1][c[i]]--;\n                }\n            }\n            for (int i = 1; i &lt;= n; i++) {\n                for (int j = 1; j &lt;= tot; j++) {\n                    g[i][j] += g[i - 1][j];\n                }\n            }\n            for (int i = 1; i &lt;= n; i++) {\n                for (int j = tot; j &gt;= 1; j--) {\n                    g[i][j] += g[i][j + 1];\n                }\n            }\n            for (int k = tot; k &gt;= 1; k--) {\n                for (int p = l; p &lt;= r; p++) {\n                    int val = (p &gt; l ? f[l][p - 1][k] : 0) + (p &lt; r ? f[p + 1][r][k] : 0) + lsh[k] * g[p][k];\n                    if (f[l][r][k] &lt;= val) {\n                        f[l][r][k] = val;\n                        pos[l][r][k] = p;\n                    }\n                }\n                if (f[l][r][k] &gt;= f[l][r][k + 1]) {\n                    lstk[l][r][k] = k;\n                } else {\n                    f[l][r][k] = f[l][r][k + 1];\n                    lstk[l][r][k] = lstk[l][r][k + 1];\n                }\n            }\n        }\n    }\n    cout &lt;&lt; f[1][n][1] &lt;&lt; '\\n';\n    getans(1, n, 1);\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; ' ';\n    }\n}\n</code></pre> CF 1312 E. Array Shrinking <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u76f8\u9130\u7684\u5169\u500b \\(a_i\\) \u82e5\u76f8\u7b49\u53ef\u4ee5\u5408\u4f75\u6210\u4e00\u500b\u5143\u7d20 \\(a_i+1\\)\uff0c\u554f\u6700\u5f8c\u6700\u5c11\u53ef\u4ee5\u5269\u4e0b\u591a\u5c11\u500b\u5143\u7d20\u3002</p> <p>\\(n\\le 500, 1\\le a_i\\le 1000\\)</p> \u601d\u8def <p>\u9019\u88e1\u9700\u8981\u7528\u5230\u4e00\u500b\u7d50\u8ad6: \u5c0d\u65bc\u4e00\u500b\u5340\u9593\uff0c\u5982\u679c\u5b83\u53ef\u4ee5\u88ab\u5408\u6210\u4e00\u500b\u6578\uff0c\u90a3\u9ebc\u5b83\u88ab\u5408\u6210\u7684\u6578\u662f\u552f\u4e00\u7684\u3002</p> <p>\u8b49\u660e:</p> <p>\u82e5\u5c07\u4e00\u500b\u6578 \\(a_i\\) \u5b9a\u7fa9\u6210 \\(2^{a_i}\\)\uff0c\u90a3\u9ebc\u4e0d\u7ba1\u600e\u9ebc\u5408\u4f75\u7e3d\u548c\u90fd\u662f\u4e00\u6a23\u7684</p> <p>\u4ee4 \\(dp(l,r)\\) \u70ba \\(a_l,\\ldots ,a_r\\) \u6700\u5f8c\u6700\u591a\u53ef\u4ee5\u5269\u591a\u5c11\u5143\u7d20\uff0c\\(f(l,r)\\) \u70ba \\(a_l,\\ldots ,a_r\\) \u82e5\u53ef\u4ee5\u6700\u5f8c\u6703\u5408\u4f75\u6210\u4ec0\u9ebc\u6578\u5b57\u3002\u8f49\u79fb\u5f0f</p> \\[ dp(l,r)=\\min\\{dp(l,k)+dp(k+1,r) \\} \\] <p>\u82e5 \\(dp(l,k)=1\\) \u4e14 \\(dp(k+1,r)=1\\) \u4e14 \\(a_{l,k}=a_{k+1,r}=1\\)\uff0c\u624d\u53ef\u8b93 \\(dp(l,r)=1,a_{l,r}=a_{l,k}+1\\)</p> 2023 TOI \u4e8c\u6a21 pB. \u5713\u5468\u62c9\u5f26\uff08chord\uff09 <p>\u6709\u4e00\u500b\u5713\uff0c\u4e0a\u9762\u6709 \\(n\\) \u500b\u7b49\u5206\u9ede\uff0c\u9023\u8d77\u5169\u500b\u9ede \\(i,j\\) \u6240\u5f97\u5230\u7684 cost \u662f \\(w_i + w_j \\pmod k\\)\uff0c\u5728\u9023\u7dda\u53ea\u80fd\u4ea4\u5728\u7aef\u9ede\u7684\u60c5\u6cc1\u4e0b\uff0c\u6c42\u6700\u5927\u5206\u6578\u3002</p> <p>\\(3\\le n\\le 500,2\\le k\\le 500,0\\le w_i\\le k\\)</p> \u601d\u8def <p>\\(dp(l,r)=\\) \u53ea\u80fd\u5728 \\(l,\\ldots ,r\\) \u4e4b\u9593\u9023\u7dda\u7684\u6700\u5927 cost</p> <p>\u8f49\u79fb\u5f0f\u5247\u679a\u8209\u4e2d\u9593\u7684\u65b7\u9ede\uff0c\u5169\u908a\u8b8a\u6210\u5b50\u554f\u984c\uff0c\u8a18\u5f97\u8981\u52a0\u4e0a \\(l\\) \u8207 \\(r\\) \u9023\u63a5\u7684 cost</p> \\[ dp(l,r)=\\max \\limits_{l&lt;k&lt;r}\\{dp(l,k)+dp(k,r) \\}+(w_l+w_r)\\% k \\] <p> </p> <p>\u6700\u5f8c\uff0c\u7b54\u6848\u5c31\u662f\u679a\u8209\u8d77\u9ede\u8207\u65b7\u9ede \\(s,t\\)\uff0c\u7b54\u6848\u5c31\u662f \\(\\max \\{dp(s,t)+dp(t,s)-(w_s+w_t)\\% k \\}\\)</p> <p> </p> UVA 1626. Brackets Sequence <p>\u7d66\u4e00\u500b\u9577\u5ea6 n \u7684\u62ec\u865f\u5e8f\u5217 s\uff0c\u53ef\u4efb\u610f\u589e\u52a0\u62ec\u865f\uff0c\u554f\u6700\u5c11\u589e\u52a0\u5e7e\u6b21\u624d\u80fd\u4f7f s \u6210\u70ba\u5408\u6cd5\u62ec\u865f\u5e8f\u5217 ? </p> <p>\\(n\\le 100\\)</p> \u601d\u8def <p>dp(l, r) = s[l..r] \u6700\u5c11\u8981\u52a0\u5165\u5e7e\u500b\u62ec\u865f\u53ef\u4ee5\u8b8a\u6210\u5408\u6cd5\u7684</p> <p>\u8f49\u79fb\u7684\u8a71\u6211\u5011\u5206\u6210\u770b\u770b\u80fd\u4e0d\u80fd\u62c6\u6210\u524d\u5f8c\u5169\u6bb5\uff0c\u4e0d\u80fd\u7684\u8a71\u4ee3\u8868\u4e00\u5b9a\u662f\u524d\u5f8c\u914d\u5c0d</p> <p>dp(l, r) = min{</p> <ul> <li> <p>dp(l, k) + dp(k + 1, r) // \u53ef\u4ee5\u5206\u6210\u524d\u5f8c\u5169\u6bb5</p> </li> <li> <p>dp(l + 1, r - 1) if ok(s[l], s[r]) // \u524d\u5f8c\u5169\u500b\u525b\u597d\u53ef\u4ee5\u914d\u5c0d</p> </li> <li> <p>dp(l, r - 1) + 1 // \u4f8b\u5982\u8aaa [ ( [ ( ] </p> </li> <li> <p>dp(l + 1, r) + 1 // \u4f8b\u5982\u8aaa ( [ ( ] )</p> </li> </ul> LeetCode 516. Longest Palindromic Subsequence <p>\u7d66\u4e00\u500b\u9577\u5ea6 n \u7684\u5b57\u4e32 s\uff0c\u554f s \u7684\u6700\u9577\u8ff4\u6587\u5b50\u5e8f\u5217\u9577\u5ea6</p> <p>\\(n\\le 1000\\)</p> \u601d\u8def <p>\u4ee4 dp(l, r) = s[l..r] \u7684\u6700\u9577\u8ff4\u6587\u5b50\u5e8f\u5217\u9577\u5ea6</p> <p>\u8003\u616e\u524d\u5f8c\u80fd\u4e0d\u80fd\u914d\u5c0d\u5728\u4e00\u8d77\uff0c\u82e5 s[l] == s[r] \u5c31\u53ef\u4ee5\u914d\u5c0d\u518d\u4e00\u8d77\uff0c\u5426\u5247\u5169\u500b\u4e0d\u53ef\u80fd\u5728\u540c\u4e00\u7d44\u7b54\u6848\u88e1\u9762\uff0c\u5fc5\u9808\u522a\u6389\u5176\u4e2d\u4e00\u500b\u3002\u6ce8\u610f\u5230\u7576 s[l] == s[r] \u4e0d\u7528\u518d\u8003\u616e dp(l+1, r), dp(l, r-1)\uff0c\u56e0\u70ba\u7576 (l, r) \u53ef\u4ee5\u914d\u5c0d\u4e00\u5b9a\u6bd4 (l, r' &lt; r) \u4f86\u7684\u66f4\u597d</p> <p>dp(l, r) =</p> <ul> <li> <p>dp(l+1, r-1) + 2 if s[l] == s[r]</p> </li> <li> <p>max(dp(l+1, r), dp(l, r-1)) else</p> </li> </ul> code <pre><code>class Solution {\n   public:\n    int longestPalindromeSubseq(string str) {\n        int n = str.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));\n        for (int i = 0; i &lt; n; i++) dp[i][i] = 1;\n        for (int len = 2; len &lt;= n; len++) {\n            for (int l = 0; l + len - 1 &lt; n; l++) {\n                int r = l + len - 1;\n                if (str[l] == str[r]) {\n                    if (len == 2) {\n                        dp[l][r] = 2;\n                        continue;\n                    }\n                    dp[l][r] = dp[l + 1][r - 1] + 2;\n                } else {\n                    dp[l][r] = max(dp[l + 1][r], dp[l][r - 1]);\n                }\n            }\n        }\n        return dp[0][n - 1];\n    }\n};\n</code></pre> Optimal Binary Search Tree Atcoder DP Contest N - Slimes <p>\u6709 \\(n\\) \u5806\u77f3\u5b50\uff0c\u5206\u5225\u6709 \\(a_1, \\ldots ,a_n\\) \u500b\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5408\u4f75\u76f8\u9130\u7684\u77f3\u5b50\uff0c\u82b1\u8cbb\u70ba\u5169\u5806\u77f3\u5b50\u6578\u76ee\u4e4b\u548c\uff0c\u554f\u6700\u5f8c\u5269\u4e0b\u4e00\u5806\u7684\u6700\u5c11\u82b1\u8cbb</p> <p>\\(2\\le n\\le 400, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>dp(l, r) = \u5c07 a[l..r] \u5408\u4f75\u6210\u4e00\u5806\u77f3\u5b50\u7684\u6700\u5c0f\u82b1\u8cbb</p> <p>dp(l, r) = dp(l, k) + dp(k + 1, r) + cost(l, r)</p> <p>\u5176\u4e2d cost(l, r) \u5c31\u662f\u5c07 a[l..k] \u548c a[k+1..r] \u5408\u4f75\u7684\u82b1\u8cbb\uff0c\u4e5f\u5c31\u662f a[l..r]</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = (1LL &lt;&lt; 60);\nconst int M = 1e9 + 7;\nconst int MAXN = 405;\nint n;\nint a[MAXN], psum[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(n + 1, INF));\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        psum[i] =  psum[i - 1] + a[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        dp[i][i] = 0;\n    }\n    for (int len = 2; len &lt;= n; len++) {\n        for (int l = 1; l + len - 1 &lt;= n; l++) { \n            int r = l + len - 1;                  \n            for (int k = l; k &lt; r; k++) {    \n                dp[l][r] = min({dp[l][r], dp[l][k] + dp[k + 1][r]});\n            }\n            dp[l][r] += psum[r] - psum[l - 1];\n        }\n    }\n    cout &lt;&lt; dp[1][n];\n}\n</code></pre> JOI 2020 \u96c6\u90ae\u6bd4\u8d5b 3 <p>\u6709\u4e00\u500b\u5468\u9577\u70ba \\(m\\) \u7684\u5712\uff0c\u6709 \\(n\\) \u5f35\u90f5\u7968\uff0c\u7b2c \\(i\\) \u500b\u5f35\u5728 \\(a_i\\)\uff0c\u5728 \\(t_i\\) \u5167\u6536\u96c6\u8a72\u90f5\u7968\u624d\u7b97\u6578\u3002\u5f9e\u8d77\u9ede\u958b\u59cb\uff0c\u8d70\u9806\u6642\u91dd\u6216\u9006\u6642\u91dd\u6700\u591a\u53ef\u4ee5\u6536\u96c6\u5230\u5e7e\u5f35\u90f5\u7968</p> <p>\\(1\\le n\\le 100, 2\\le m \\le 10^9, 0\\le t_i\\le 10^9\\)</p> \u601d\u8def <p>n = 200\uff0c\u60f3\u5230\u5340\u9593 dp\uff0c\u4ee4 dp(l, r, k, 0 / 1) \u70ba\u76ee\u524d\u8003\u616e\u7684\u7bc4\u570d\u70ba\u9006\u6642\u91dd l \u500b\u8207\u9806\u6642\u91dd r \u500b\uff0c\u7576\u524d\u5728\u9019\u500b\u7bc4\u570d\u5167\u5df2\u7d93\u53d6\u5f97 k \u5f35\u90f5\u7968\uff0c\u6700\u5f8c\u505c\u5728\u5de6\u7aef\u9ede/\u53f3\u7aef\u9ede\u7684\u6700\u5c0f\u6642\u9593</p> <p>\u8f49\u79fb\u7684\u8a71\u6211\u5011\u8003\u616e\u5f9e dp(l, r, k, 0) \u5f80\u5f8c\u8f49\u79fb\uff0c\u6211\u5011\u5148\u8aaa\u5f80 l \u5ef6\u4f38\u4e00\u500b\u5230 l + 1 \u7684 case:</p> <p> dp(l + 1, r, i + ok, 0) = min{dp(l, r, k, 0) + time(l, l + 1)} </p> <p>\u5176\u4e2d time(l, l + 1) = a[n - l + 1] - a[n - l]\uff0cok = dp(l, r, k, 0) + time(l, l + 1) &lt;= t[n - l]</p> <p>\u800c\u82e5\u5f80 r \u5ef6\u4f38\u4e00\u683c\u5230 r + 1 \u7684\u8a71\u5247\u662f:</p> <p> dp(l, r + 1, i + ok, 0) = min{dp(l, r, k, 0) + time(r, r + 1)} </p> <p>\u5176\u4e2d time(l, r + 1) = m - (a[n - l + 1] - a[r + 1])\uff0cok = dp(l, r, k, 0) + time(r, r + 1) &lt;= t[r + 1]</p> <p> </p> <p>\u5728\u5be6\u4f5c\u4e0a\u6211\u5011\u5efa\u7acb a[0] = 0, a[n + 1] = m\uff0c\u8b93\u6211\u5011\u6709\u9006\u6642\u91dd\u8207\u9806\u6642\u91dd\u7684\u8d77\u9ede</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\ninline int&amp; min_to(int&amp; a, int b) {\n    return a = min(a, b);\n}\n\nconst int MAXN = 205;\nint t[MAXN];\nint a[MAXN];\nint dp[MAXN][MAXN][MAXN][2];\n\nsigned main() {\n    int n, m;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", a + i);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", t + i);\n    memset(dp, 0x3f, sizeof(dp));\n    dp[0][0][0][0] = dp[0][0][0][1] = 0;\n    a[n + 1] = m;\n    for (int len = 0; len &lt; n; len++) {\n        for (int l = 0; l &lt;= n; l++) {\n            int r = len - l;\n            for (int k = 0; k &lt;= n; k++) {\n                if (dp[l][r][k][0] != 0x3f3f3f3f) {\n                    int tNow = dp[l][r][k][0];\n                    int time0 = tNow + a[n - l + 1] - a[n - l];\n                    int time1 = tNow + m - (a[n - l + 1] - a[r + 1]);\n                    bool canGet0 = time0 &lt;= t[n - l];\n                    bool canGet1 = time1 &lt;= t[r + 1];\n                    min_to(dp[l + 1][r][k + canGet0][0], time0);\n                    min_to(dp[l][r + 1][k + canGet1][1], time1);\n                }\n                if (dp[l][r][k][1] != 0x3f3f3f3f) {\n                    int tNow = dp[l][r][k][1];\n                    int time1 = tNow + a[r + 1] - a[r];\n                    int time0 = tNow + m - (a[n - l] - a[r]);\n                    bool canGet0 = time0 &lt;= t[n - l];\n                    bool canGet1 = time1 &lt;= t[r + 1];\n                    min_to(dp[l + 1][r][k + canGet0][0], time0);\n                    min_to(dp[l][r + 1][k + canGet1][1], time1);\n                }\n            }\n        }\n    }\n    int ans = 0;\n    for (int l = 0; l &lt;= n; l++) {\n        for (int r = 0; r &lt;= n; r++) {\n            for (int i = 0; i &lt;= n; i++) {\n                if (dp[l][r][i][0] != 0x3f3f3f3f || dp[l][r][i][1] != 0x3f3f3f3f) {\n                    ans = max(ans, i);\n                }\n            }\n        }\n    }\n\n    printf(\"%d\\n\", ans);\n}\n</code></pre> \u6d1b\u8c37 P1220 \u5173\u8def\u706f <p>\u6709 n \u500b\u8def\u71c8\uff0c\u7b2c i \u500b\u8def\u71c8\u5728 a[i]\uff0c\u529f\u7387\u70ba w[i]\uff0c\u4e00\u958b\u59cb\u5728\u7b2c i \u500b\u71c8\uff0c\u6bcf\u8d70\u4e00\u55ae\u4f4d\u9700\u8981\u82b1\u4e00\u79d2\uff0c\u554f\u6700\u5c11\u8017\u591a\u5c11\u96fb\u529b\u53ef\u4ee5\u95dc\u5b8c\u5168\u90e8\u7684\u71c8</p> <p>\\(n\\le 50, 1\\le w_i \\le 100\\)</p> \u601d\u8def <p>\u4ee4 dp(l, r, 0 / 1) = \u95dc\u5b8c l, ..., r \u7684\u71c8\uff0c\u6700\u5f8c\u5728 a[l] / a[r] \u4e0a\u7684\u6700\u5c0f\u5168\u5c40\u8017\u96fb\u91cf</p> <p>\u8f49\u79fb\u7684\u8a71\u5c31\u770b\u80fd\u4e0d\u80fd\u5f80\u5de6\uff0c\u5f80\u53f3\u64f4\u5c55\uff0ccost \u5c31\u662f\u5728 [l, r] \u5916\u7684\u529f\u7387\u7e3d\u548c\u4e58\u4e0a\u8f49\u79fb\u8981\u8d70\u7684\u6642\u9593\uff0c\u8a73\u898b\u4ee3\u78bc</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int N = 55;\nint n, c;\nint a[N], w[N], pre[N];\nint dp[N][N][2];\n\nint cal(int i, int j, int l, int r) {\n    return (a[j] - a[i]) * (pre[l] + pre[n] - pre[r - 1]);\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; c;\n    memset(pre, 0, sizeof(pre));\n    memset(dp, 0x3f, sizeof(dp));\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i] &gt;&gt; w[i];\n        pre[i] = pre[i - 1] + w[i];\n    }\n    dp[c][c][1] = dp[c][c][0] = 0;\n    for (int len = 2; len &lt;= n; len++) {\n        for (int l = 1; l &lt;= n; l++) {\n            int r = l + len - 1;\n            if (r &gt; n) {\n                break;\n            }\n            dp[l][r][0] = min(dp[l + 1][r][0] + cal(l, l + 1, l, r + 1), dp[l + 1][r][1] + cal(l, r, l, r + 1));\n            dp[l][r][1] = min(dp[l][r - 1][0] + cal(l, r, l - 1, r), dp[l][r - 1][1] + cal(r - 1, r, l - 1, r));\n        }\n    }\n    cout &lt;&lt; min(dp[1][n][0], dp[1][n][1]) &lt;&lt; '\\n';\n}\n</code></pre> CF 149 D. Coloring Brackets <p>\u7d66\u4e00\u500b\u5408\u6cd5\u62ec\u865f\u5e8f\u5217 s\uff0c\u554f s \u6709\u5e7e\u7a2e\u67d3\u8272\u65b9\u6cd5\u3002\u67d3\u8272\u898f\u5247\u5982\u4e0b:</p> <ol> <li>\u4e00\u500b\u62ec\u865f\u53ef\u4ee5\u67d3\u7d05\u8272\u3001\u85cd\u8272\u6216\u4e0d\u67d3\u8272</li> <li>\u4e00\u5c0d\u5339\u914d\u7684\u62ec\u865f\u9700\u8981\u4e14\u53ea\u80fd\u5c07\u5176\u4e2d\u4e00\u500b\u67d3\u8272</li> <li>\u76f8\u9130\u5169\u500b\u62ec\u865f\u984f\u8272\u4e0d\u80fd\u76f8\u540c\uff08\u4f46\u53ef\u4ee5\u90fd\u4e0d\u67d3\u8272\uff09</li> </ol> <p>\\(|s|\\le 700\\)</p> \u601d\u8def <p>\u5148\u57f7\u884c\u62ec\u865f\u914d\u5c0d\uff0c\u4ee4 r_match[i] \u70ba\u7b2c i \u500b\u62ec\u865f\u7684\u914d\u5c0d\u62ec\u865f\u3002\u5b9a\u7fa9 dp(l, r, p, q) = s[l] \u7684\u984f\u8272\u70ba p\uff0cs[r] \u7684\u984f\u8272\u70ba q\uff0c\u5340\u9593 [l, r] \u7684\u5857\u8272\u65b9\u6cd5\u6578\uff0c\u5176\u4e2d p, q \u7684\u503c\u70ba 0 \u6642\u4ee3\u8868\u4e0d\u67d3\u8272\uff0c\u70ba 1 \u6642\u4ee3\u8868\u85cd\u8272\uff0c\u70ba 2 \u6642\u4ee3\u8868\u7d05\u8272\u3002</p> <p>\u9996\u5148\u662f\u521d\u59cb\u689d\u4ef6\uff1a\u5982\u679c r = l + 1\uff0c\u90a3\u9ebc [l,r] \u4e00\u5b9a\u662f\u4e00\u5c0d\u5339\u914d\u7684\u62ec\u865f\u3002\u6240\u4ee5\u6211\u5011\u8a2d\u5b9a dp(l, r 0, 0) = dp(l, r, 1, 2) = dp(l, r, 2, 1) = dp(l, r, 2, 2) = 0</p> <p>\u8f49\u79fb\u7684\u6642\u5019\uff0c\u9700\u8981\u5206\u985e\u8a0e\u8ad6\uff1a</p> <ol> <li> <p>\u5982\u679c\u7b2c l \u500b\u62ec\u865f\u525b\u597d\u8ddf\u7b2c r \u500b\u62ec\u865f\u914d\u5c0d</p> <p>\u4ee5 dp(l, r, 0, 1) \u70ba\u4f8b\uff1a\u7531\u65bc\u5de6\u7aef\u9ede\u4e0d\u67d3\u8272\uff0c\u53f3\u7aef\u9ede\u662f 1\uff0c\u6240\u4ee5\u5b83\u4e0d\u80fd dp(l + 1, r - 1, *, 1) \u8f49\u79fb\u904e\u4f86\uff0c\u5426\u5247\u76f8\u9130\u5169\u500b\u62ec\u865f\u7684\u984f\u8272\u76f8\u540c\uff0c\u5c31\u4e0d\u7b26\u5408\u689d\u4ef6\u4e86\u3002\u90a3\u9ebc\u6211\u5011\u5f9e 0 \u5230 2 \u679a\u8209 i,j\uff0c\u7136\u5f8c\u770b i, j \u7684\u503c\u4f86\u4e00\u500b\u4e00\u500b\u8f49\u79fb\u5373\u53ef\u3002</p> </li> </ol> <pre><code>for (int i = 0; i &lt;= 2; i++) {\n    for (int j = 0; j &lt;= 2; j++) {\n        if (j != 1) dp[l][r][0][1] += dp[l + 1][r - 1][i][j], dp[l][r][0][1] %= mod;\n        if (j != 2) dp[l][r][0][2] += dp[l + 1][r - 1][i][j], dp[l][r][0][2] %= mod;\n        if (i != 1) dp[l][r][1][0] += dp[l + 1][r - 1][i][j], dp[l][r][1][0] %= mod;\n        if (i != 2) dp[l][r][2][0] += dp[l + 1][r - 1][i][j], dp[l][r][2][0] %= mod;\n    }\n}\n</code></pre> <ol> <li> <p>\u5982\u679c\u7b2c l \u500b\u62ec\u865f\u525b\u597d\u8ddf\u7b2c r \u500b\u62ec\u865f\u4e0d\u914d\u5c0d</p> <p>\u4f8b\u5982\u8aaa ( ... ) (...)\u3002\u6211\u5011\u627e\u51fa\u8207\u7b2c l \u500b\u62ec\u865f\u914d\u5c0d\u7684\u62ec\u865f\uff0c\u5206\u5225\u8655\u7406\u51fa\u5340\u9593 [l, r_match[l]] \u7684\u65b9\u6848\u6578\u8207 [r_match[l] + 1, r] \u7684\u65b9\u6848\u6578\uff0c\u7136\u5f8c\u76f8\u4e58\u5373\u53ef\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f r_match[l] \u8207 r_match[l] + 1 \u8655\u7684\u62ec\u865f\u984f\u8272\u4e0d\u80fd\u76f8\u540c\uff0c\u9019\u7a2e\u60c5\u6cc1\u9700\u8981\u7279\u5224\u3002</p> </li> </ol> <pre><code>for (int i = 0; i &lt;= 2; i++) {\n    for (int j = 0; j &lt;= 2; j++) {\n        for (int p = 0; p &lt;= 2; p++) {\n            for (int q = 0; q &lt;= 2; q++) {\n                // r_match[l] \u8207 r_match[l] + 1 \u8655\u7684\u62ec\u865f\u984f\u8272\u76f8\u540c\n                if ((j == 1 &amp;&amp; p == 1) || (j == 2 &amp;&amp; p == 2)) continue;  \n                dp[l][r][i][q] += (dp[l][r_match[l]][i][j] * dp[r_match[l] + 1][r][p][q] % mod);\n                dp[l][r][i][q] %= mod;\n            }\n        }\n    }\n}\n</code></pre> <p>\u90a3\u9ebc\uff0c\u8f49\u79fb\u65b9\u5f0f\u5c31\u5f04\u597d\uff01 \u6709\u4e00\u500b\u9700\u8981\u6ce8\u610f\u7684\u9ede\u5c31\u662f\uff1a\u8f49\u79fb\u9806\u5e8f\u6700\u597d\u662f\u4ee5\u8a18\u61b6\u5316\u641c\u5c0b\uff08Top Down\uff09\u7684\u9806\u5e8f\u4f86\uff0c\u4e0d\u7136\u7684\u8a71\u6703\u5f88\u9ebb\u7169\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 800;\nstring s;\nint dp[MAXN][MAXN][5][5], r_match[MAXN];\nstack&lt;int&gt; stk;\n\nconst int mod = 1000000007;\n\nvoid dfs(int l, int r) {\n    if (r == l + 1) {\n        dp[l][r][0][1] = dp[l][r][0][2] = dp[l][r][1][0] = dp[l][r][2][0] = 1;\n    } else if (r_match[l] == r) {\n        dfs(l + 1, r - 1); \n        for (int i = 0; i &lt;= 2; i++) {\n            for (int j = 0; j &lt;= 2; j++) {\n                if (j != 1) dp[l][r][0][1] += dp[l + 1][r - 1][i][j], dp[l][r][0][1] %= mod;\n                if (j != 2) dp[l][r][0][2] += dp[l + 1][r - 1][i][j], dp[l][r][0][2] %= mod;\n                if (i != 1) dp[l][r][1][0] += dp[l + 1][r - 1][i][j], dp[l][r][1][0] %= mod;\n                if (i != 2) dp[l][r][2][0] += dp[l + 1][r - 1][i][j], dp[l][r][2][0] %= mod;\n            }\n        }\n    } else {\n        dfs(l, r_match[l]);\n        dfs(r_match[l] + 1, r);\n        for (int i = 0; i &lt;= 2; i++) {\n            for (int j = 0; j &lt;= 2; j++) {\n                for (int p = 0; p &lt;= 2; p++) {\n                    for (int q = 0; q &lt;= 2; q++) {\n                        if ((j == 1 &amp;&amp; p == 1) || (j == 2 &amp;&amp; p == 2)) continue;\n                        dp[l][r][i][q] += (dp[l][r_match[l]][i][j] * dp[r_match[l] + 1][r][p][q] % mod);\n                        dp[l][r][i][q] %= mod;\n                    }\n                }\n            }\n        }\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; s;\n    int n = s.size();\n    s = \"$\" + s;\n    for (int i = 1; i &lt;= n; i++) {\n        if (s[i] == '(') {\n            stk.push(i);\n        } else {\n            r_match[stk.top()] = i;\n            r_match[i] = stk.top();\n            stk.pop();\n        }\n    }\n\n    dfs(1, n);\n    int ans = 0;\n    for (int i = 0; i &lt;= 2; i++) {\n        for (int j = 0; j &lt;= 2; j++) {\n            ans += dp[1][n][i][j];\n            ans %= mod;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> USACO 2016 OPEN 262144 P <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u5728\u4e00\u6b21\u64cd\u4f5c\u4e2d\u53ef\u4ee5\u628a\u76f8\u9130\u5169\u500b\u76f8\u540c\u7684\u6578\uff0c\u5408\u4f75\u6210\u4e00\u500b\u6bd4\u539f\u4f86\u7684\u5927\u4e00\u7684\u6578\u3002\u76ee\u6a19\u662f\u4f7f\u5f97\u6700\u5927\u7684\u6578\u6700\u5927\uff0c\u554f\u6b64\u6700\u5927\u503c</p> <p>\\(2\\le n\\le 262144, 1\\le a_i\\le 40\\)</p> \u601d\u8def <p>\u6211\u5011\u6703\u60f3\u5230\u6709\u9ede\u985e\u4f3c Atcoder Slime \u90a3\u984c\uff0c\u4f7f\u7528\u5340\u9593 dp\uff0c\u4e5f\u5c31\u662f\u985e\u4f3c dp(l, r) \u8868\u793a\u5c07 l...r \u5408\u4f75\u7684\u6700\u5927\u6578\u5b57\u70ba\u4f55\uff0c\u4f46\u9019\u984c n = 2e5 \u6703\u592a\u5927\u3002\u4e0d\u904e\u7531\u65bc a[i] \u53ea\u6709\u5230 40\uff0c\u6211\u5011\u53ef\u4ee5\u7528\u8d85\u5927\u80cc\u5305\u5b9a\u7fa9\u72c0\u614b\u7684\u60f3\u6cd5\uff0c\u5c07\u72c0\u614b\u8207\u7b54\u6848\u505a\u4ea4\u63db\uff0c\u4e5f\u5c31\u662f dp(l, i) = \u8868\u793a\u4ee5 l \u70ba\u5de6\u7aef\u9ede\u5408\u4f75\u51fa i \u6642\u7684\u53f3\u7aef\u9ede\uff0c\u4e5f\u5c31\u662f [l, dp(l, i)) \u53ef\u4ee5\u5408\u4f75\u51fa i\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u985e\u4f3c\u500d\u589e\u7684\u65b9\u6cd5\u4f86\u505a\u8f49\u79fb\uff0cdp(l, i) = dp(dp(l, i - 1), i - 1)\u3002</p> <p> </p> <p>\u56e0\u70ba\u9577\u5ea6\u662f n = 262144\uff0c\u9019\u6a23\u6211\u5011\u5408\u4f75\u5408\u4f75\u5408\u4f75\uff0c\u6700\u591a\u5408\u4f75 log(n) \u6b21\u5dee\u4e0d\u591a\u662f log(n) = 18\uff0c\u6240\u4ee5 dp(l, i) \u7684 i \u6700\u8981\u958b\u5230 40 + 18 = 58\uff0c\u6240\u4ee5\u6574\u9ad4\u7684\u8907\u96dc\u5ea6 O(58n)\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, dp[262145][60], ans;\n\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        dp[i][x] = i + 1;\n    }\n    for (int i = 2; i &lt;= 58; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            if (!dp[j][i]) {\n                dp[j][i] = dp[dp[j][i - 1]][i - 1];\n            }\n            if (dp[j][i]) {\n                ans = i;\n            }\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"dp/sos/","title":"SOS\u512a\u5316","text":""},{"location":"dp/sos/#_1","title":"\u540d\u8a5e\u89e3\u91cb","text":"<p>T \u662f S \u7684\u5b50\u96c6\uff08subset\uff09\uff0c\u53cd\u904e\u4f86\uff0c\u96c6\u5408 S \u5c31\u662f T \u7684\u4e00\u500b\u8d85\u96c6\uff08superset\uff09</p> <p></p>"},{"location":"dp/sos/#_2","title":"\u5f15\u5165","text":"Subset of Subset <p>\u5c0d\u65bc\u6bcf\u500b mask \\(S\\) \u6c42 </p> \\[ f[S]=\\sum \\limits_{S\\space \\subseteq \\space T} w[T] \\]"},{"location":"dp/sos/#1","title":"\u6cd5 1: \u679a\u8209\u5b50\u96c6\u7684\u5b50\u96c6","text":"<p>\u5167\u5c64 popcount \u70ba \\(x\\) \u7684 mask \u9700\u8981\u82b1 \\(O(2^x)\\)\uff0c\u5171\u6709 \\(C^n_x\\) \u500b\uff0c\u7e3d\u8a08 \\(O\\left( \\sum \\limits_{x=0}^n C^n_x 2^x\\right)\\)</p> <p>\u53c8\u6839\u64da\u4e8c\u9805\u5f0f\u5b9a\u7406\uff0c\\((1+a)^n=\\sum \\limits_{x=0}^n C^n_x a^x\\)\uff0c\u5247 \\(O\\left ( \\sum \\limits_{x=0}^n C^n_x 2^x = (1+2)^n=3^n\\right )\\)</p> code <pre><code>for (int mask = 0; mask &lt; (1 &lt;&lt; n); mask++) {\n    // \u7d66\u4e00\u500b mask\uff0c\u679a\u8209\u4ed6\u7684\u6240\u6709\u5b50\u96c6\u5408\n    for (int S = mask; S; S = (S - 1) &amp; mask) {\n        // TODO\n    }\n}\n</code></pre>"},{"location":"dp/sos/#2-sos-dp","title":"\u6cd5 2 : sos dp","text":"<p>\u53c8\u7a31\u9ad8\u7dad\u524d\u7db4\u548c\u3002</p> <p>dp(mask, i) : \u53ea\u679a\u8209 mask \u7684 [0, i] \u800c\u5176\u9918\u4e0d\u52d5\u7684\u7e3d\u548c</p> <p>dp(S, i) : \u770b\u7b2c i \u4f4d\u9078\u4e0d\u9078</p> <ul> <li> <p>if (S &amp; (1&lt;&lt;i)) dp(S, i) = dp(S, i-1) + dp(S ^ (1&lt;&lt;i), i-1)</p> </li> <li> <p>else dp(S, i) = dp(S, i-1)</p> </li> </ul> code <pre><code>for (int i = 0; i &lt; n; i++) {\n    f[a[i]]++;\n}\n\nfor (int i = 0; i &lt; 21; i++) {\n    for (int mask = 0; mask &lt; (1 &lt;&lt; 21); mask++) {\n        if (mask &amp; (1 &lt;&lt; i)) {\n            f[mask] += f[mask ^ (1 &lt;&lt; i)];\n        }\n    }\n}\n</code></pre>"},{"location":"dp/sos/#_3","title":"\u6280\u5de7 : \u679a\u8209\u8d85\u96c6","text":"\u554f\u984c <p>\u7d66\u4e00\u500b\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u5c0d\u65bc\u6bcf\u500b \\(i\\) \u554f\u6709\u6c92\u6709 \\(a_i\\) &amp; \\(a_j=a_i\\)</p> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\u82e5 </p> <ul> <li>x = 1101001</li> <li>y = 1101001</li> </ul> <p>y \u53ea\u80fd\u5728\u85cd\u8272\u7684\u90e8\u5206\u5f9e 0 \u8b8a 1\uff0c\u4ee3\u8868\u82e5 0, 1 \u985b\u5012\u5f8c y \u5c31\u8981\u662f x \u7684 subset</p> <ul> <li>(~x) = 0010110</li> <li>(~y) = 0010110</li> </ul> <p>\u6240\u4ee5\u7b54\u6848\u5c31\u662f subset of (~\\(x\\)) in set(~\\(a_i\\))</p> <p>\u70ba\u4e86\u4e4b\u5f8c\u65b9\u4fbf\u4f7f\u7528\uff0c\u4ee5\u4e0b\u7684 code \u4ee4 f[i] \u70ba x &amp; i = i \u7684 x \u7684\u6578\u91cf</p> code <pre><code>vector&lt;int&gt; build() {\n    vector&lt;int&gt; f((1LL &lt;&lt; 21) + 1);\n    for (int i = 0; i &lt; n; i++) {\n        f[a[i]]++;\n    }\n    for (int i = 0; i &lt; 21; i++) {\n        for (int mask = (1LL &lt;&lt; 21) - 1; mask &gt;= 0; mask--) {\n            if (!(mask &amp; (1 &lt;&lt; i))) {\n                f[mask] = f[mask] + f[mask ^ (1 &lt;&lt; i)];\n            }\n        }\n    }\n    return f;\n}\n</code></pre>"},{"location":"dp/sos/#_4","title":"\u4f8b\u984c","text":""},{"location":"dp/sos/#cses-bit-problem","title":"CSES Bit Problem","text":"CSES - Bit Problem <p>\u5c0d\u65bc\u6bcf\u7b46 \\(\\text{query}(x)\\) \u5206\u5225\u8a08\u7b97\u4ee5\u4e0b\u7684 \\(y\\) \u7684\u6578\u91cf</p> <ul> <li> <p>\\(x \\mid y = x\\)</p> </li> <li> <p>\\(x\\mathrel{\\&amp;} y=x\\)</p> </li> <li> <p>\\(x \\mathrel{\\&amp;} y \\neq 0\\) </p> </li> </ul> \u601d\u8def <p>subtask : x | y = x</p> <p>\u88f8 sos dp</p> <p>subtask : x &amp; y = x</p> <p>\u4e0a\u9762\u7684\u8d85\u96c6 sos dp</p> <p>subtask : x &amp; y \u2260 0</p> <p>ans = n - subset of (~x) in set(~a[i])</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst int C = (1LL &lt;&lt; 21) - 1;\n\nint n;\nint F[(1LL &lt;&lt; 21) + 2], R[(1LL &lt;&lt; 21) + 2];\nint a[maxn];\n\nvoid build () {\n    for (int i = 0; i &lt; n; i++) F[a[i]]++;\n\n    for (int i = 0; i &lt; 21; i++) {\n        for (int mask = 0; mask &lt; (1 &lt;&lt; 21); mask++) {\n            if (mask &amp; (1 &lt;&lt; i))\n                F[mask] += F[mask ^ (1 &lt;&lt; i)];\n        }\n    }\n\n    for (int i = 0; i &lt; n; i++) R[C ^ a[i]]++;\n\n    for (int i = 0; i &lt; 21; i++) {\n        for (int mask = 0; mask &lt; (1 &lt;&lt; 21); mask++) {\n            if (mask &amp; (1 &lt;&lt; i))\n                R[mask] += R[mask ^ (1 &lt;&lt; i)];\n        }\n    }\n}\n\nvoid init () {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\n}\n\nvoid solve () {\n    build ();\n    for (int i = 0; i &lt; n; i++) {\n        int Q1 = F[a[i]];\n        int Q2 = R[C ^ a[i]];\n        int Q3 = n - F[C ^ a[i]];\n        cout &lt;&lt; Q1 &lt;&lt; \" \" &lt;&lt; Q2 &lt;&lt; \" \" &lt;&lt; Q3 &lt;&lt; \"\\n\";\n    }\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre>"},{"location":"dp/sos/#cf-compatible-numbers","title":"CF Compatible Numbers","text":"CF 449 D. Jzzhu and Numbers <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u554f\u6709\u5e7e\u500b\u5b50\u5e8f\u5217\u6eff\u8db3 \\(a_{i_1}\\) &amp; \\(a_{i_2}\\) &amp; \\(\\ldots\\) &amp; \\(a_{i_k}=0\\)</p> <p>\\(1\\le n\\le 10^6,0\\le a_i\\le 10^6\\)</p> \u601d\u8def <p>\u4ee4 d[i] \u70ba x &amp; i = i \u7684 x \u7684\u6578\u91cf\uff0c\u5171\u53ef\u6e4a\u51fa 2^d[i]-1 \u7a2e\u5b50\u96c6\u3002</p> <p>\u56e0\u70ba\u6b63\u8457\u505a\u4e0d\u597d\u505a\uff0c\u6211\u5011\u8003\u616e\u8b93 \u300cans = \u5168\u90e8 - \u81f3\u5c11 1 \u500b bit \u662f 1\u300d</p> <p>\u4f46 SOS dp \u662f\u6703\u91cd\u8907\u7b97\u7684\uff0c\u4f8b\u5982 11 \u6703\u5728 d[10], d[01] \u90fd\u88ab\u7b97\u904e\u4e00\u904d</p> <p>\u8003\u616e\u6392\u5bb9 : ans = \u5168\u90e8 - \u81f3\u5c11 1 \u500b bit \u662f 1 + \u81f3\u5c11 2 \u500b bit \u662f 1 - \u81f3\u5c11 3 \u500b bit \u662f 1</p> <p> </p> <p>\u6240\u4ee5\u6211\u5011\u53ea\u8981\u679a\u8209 i = [1, C]\uff0c\u770b popcount(i) \u662f\u5947\u6578\u9084\u5076\u6578\uff0c\u5c07\u8ca2\u737b\u52a0\u6216\u6e1b 2^d[i]-1 \u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\n\nint n;\nint a[maxn];\n\nvector&lt;int&gt; build() {\n    vector&lt;int&gt; f((1LL &lt;&lt; 21) + 1);\n    for (int i = 0; i &lt; n; i++) {\n        f[a[i]] = (f[a[i]] + 1) % M;\n    }\n    for (int i = 0; i &lt; 21; i++) {\n        for (int mask = (1LL &lt;&lt; 21) - 1; mask &gt;= 0; mask--) {\n            if (!(mask &amp; (1 &lt;&lt; i))) {\n                f[mask] = (f[mask] + f[mask ^ (1 &lt;&lt; i)]) % M;\n            }\n        }\n    }\n    return f;\n}\n\nint fpow(int a, int b) {\n    int ret = 1;\n    while (b != 0) {\n        if (b &amp; 1) ret = (ret * a) % M;\n        a = (a * a) % M;\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    vector&lt;int&gt; f = build();\n\n    int ans = 0;\n    for (int i = 0; i &lt; (1 &lt;&lt; 21); i++) {\n        if (__builtin_popcount(i) &amp; 1) {\n            ans = ((ans - (fpow(2, f[i]) - 1)) % M + M) % M;\n        } else {\n            ans = ((ans + (fpow(2, f[i]) - 1)) % M + M) % M;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"dp/sos/#cf-bits-and-pieces","title":"CF Bits And Pieces","text":"CF 1208F Bits And Pieces <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u8f38\u51fa \\(i&lt;j&lt;k\\) \u6642\u6700\u5927\u7684 \\(a_{i} \\mid ( a_{j} \\mathrel{\\&amp;} a_{k} )\\) </p> <p>\\(3\\le n\\le 10^6,0\\le a_i\\le 2\\times 10^6\\)</p> \u601d\u8def <p>d[i]: \u7dad\u8b77\u6700\u5927\u7684\u5169\u500b index</p> <p>\u5c0d\u65bc\u6bcf\u500b \\(a_i\\)\uff0cgreedy \u7684\u5f9e\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u770b d[x].S \u662f\u5426\u5927\u65bc i</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\nconst int C = (1LL &lt;&lt; 21) - 1;\n\nint n;\nint a[maxn];\n\npii sec(pii p, int x) {\n    if (x &gt; p.F) {\n        p.S = p.F;\n        p.F = x;\n    } else if (x &gt; p.S) {\n        p.S = x;\n    }\n    return p;\n}\n\nvector&lt;pii&gt; build() {\n    vector&lt;pii&gt; f(C + 1, {-1, -1});\n    for (int i = 0; i &lt; n; i++) {\n        f[C ^ a[i]] = sec(f[C ^ a[i]], i);\n    }\n    for (int i = 0; i &lt; 21; i++) {\n        for (int mask = 0; mask &lt; (1 &lt;&lt; 21); mask++) {\n            if (mask &amp; (1 &lt;&lt; i)) {\n                f[mask] = sec(f[mask], f[mask ^ (1 &lt;&lt; i)].F);\n                f[mask] = sec(f[mask], f[mask ^ (1 &lt;&lt; i)].S);\n            }\n        }\n    }\n    vector&lt;pii&gt; d(C + 1);\n    for (int mask = 0; mask &lt; (1 &lt;&lt; 21); mask++) { \n        d[mask] = f[C ^ mask];\n    }\n    return d;\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    vector&lt;pii&gt; dp = build();\n\n    int ans = 0;\n    for (int i = 0; i &lt; n - 2; i++) {\n        int res = 0, ret = 0;\n        for (int j = 20; j &gt;= 0; j--) {\n            if (a[i] &amp; (1 &lt;&lt; j)) {\n                res |= (1 &lt;&lt; j);\n                continue;\n            } else {\n                if (dp[ret | (1 &lt;&lt; j)].S &gt; i) {\n                    ret |= (1 &lt;&lt; j);\n                    res |= (1 &lt;&lt; j);\n                }\n            }\n        }\n        ans = max(ans, res);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"dp/sos/#joi-2018-p5","title":"JOI 2018 p5","text":"JOI 2018 Final p5. \u6bd2\u86c7\u8d8a\u72f1 <p>\u7d66\u4f60 \\(n\\) \u8207\u9663\u5217 \\(w\\)\uff0c\u5f9e \\([0,2^n-1]\\) \u7684\u6bcf\u500b\u6578\u5b57 \\(i\\) \u90fd\u6709\u5c0d\u61c9\u7684 \\(w[i]\\)\u3002\u6709 \\(q\\) \u7b46\u67e5\u8a62 : </p> <ul> <li>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\)\uff0c\u7531 <code>0</code>, <code>1</code>, <code>?</code> \u7d44\u6210\u7684\u4e8c\u9032\u5236\uff0c<code>?</code> \u53ef\u4ee5\u662f <code>0</code> or <code>1</code>\u3002\u554f\u53ef\u4ee5\u7d44\u51fa\u7684\u6578\u5b57\u7684 \\(w\\) \u52a0\u7e3d\u8d77\u4f86\u662f\u591a\u5c11</li> </ul> <p>\\(1\\le n\\le 20,1\\le q\\le 10^6\\)</p> \u601d\u8def <p>\u6700\u4e3b\u8981\u7684\u89c0\u5bdf\u662f\u9d3f\u7c60\u539f\u7406\uff0c\\(n\\le 20\\) \u4ee3\u8868 <code>0</code> <code>1</code> <code>?</code> \u6700\u5c11\u7684\u6700\u5927\u51fa\u73fe\u6b21\u6578\u662f 6\u3002\u6240\u4ee5\u770b <code>0</code> <code>1</code> <code>?</code> \u54ea\u500b\u6bd4\u8f03\u5c11\u5c31\u7528\u54ea\u500b\u4e0b\u624b</p> <p>calculate ?\uff1a\u679a\u8209 ? \u9078\u4ec0\u9ebc\uff0c\u7136\u5f8c\u7b97\u7b54\u6848\u3002\u9019\u6a23\u5b50\u662f \\(O(2^{\\text{cnt[?]}})\\) \u7684\u3002      calculate 1\uff1a\u8003\u616e\u6c92\u6709 1 \u7684\u8a71\uff0c\u6211\u5011\u53ea\u9700\u8981\u7b97 ? \u7684\u5b50\u96c6\u548c\u3002\u73fe\u5728\u6709\u4e86 1\uff0c\u6211\u5011\u53ea\u9700\u8981\u5c07\u5176\u5bb9\u65a5\u6389\u5373\u53ef\u3002\u9019\u6a23\u5b50\u662f \\(O(2^{\\text{cnt[1]}})\\) \u7684\u3002</p> <p>calculate 0\uff1a\u8003\u616e\u6c92\u6709 0 \u7684\u8a71\uff0c\u6211\u5011\u53ea\u9700\u8981\u7b97 ? \u7684\u8d85\u96c6\u548c\u3002\u73fe\u5728\u6709\u4e86 0\uff0c\u6211\u5011\u540c\u6a23\u53ea\u9700\u8981\u5c07\u5176\u5bb9\u65a5\u6389\u5373\u53ef\u3002\u9019\u6a23\u5b50\u662f \\(O(2^{\\text{cnt[0]}})\\) \u7684\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = (1 &lt;&lt; 20) + 1;\nconst int M = 1e9 + 7;\n\nstring s;\nint n, q;\nint f[maxn], g[maxn];\n\nvoid build() {\n    for (int i = 0; i &lt; (1 &lt;&lt; n); i++) {\n        f[i] += s[i] - '0';\n        g[i] += s[i] - '0';\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        for (int mask = 0; mask &lt; (1 &lt;&lt; n); mask++) {\n            if (mask &amp; (1 &lt;&lt; i)) {\n                f[mask] += f[mask ^ (1 &lt;&lt; i)];\n            }\n        }\n    }\n    for (int i = 0; i &lt; n; i++) {\n        for (int mask = (1 &lt;&lt; n) - 1; mask &gt;= 0; mask--) {\n            if (!(mask &amp; (1 &lt;&lt; i))) {\n                g[mask] += g[mask ^ (1 &lt;&lt; i)];\n            }\n        }\n    }\n}\n\nint solver(string t) {\n    int cntq = 0, maskq = 0, cnt0 = 0, mask0 = 0, cnt1 = 0, mask1 = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (t[i] == '?') {\n            maskq |= (1 &lt;&lt; (n - i - 1));\n            cntq++;\n        } else if (t[i] == '0') {\n            mask0 |= (1 &lt;&lt; (n - i - 1));\n            cnt0++;\n        } else if (t[i] == '1') {\n            mask1 |= (1 &lt;&lt; (n - i - 1));\n            cnt1++;\n        }\n    }\n    int ans = 0;\n    if (cntq &lt;= 6) {\n        int mask = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (t[i] == '1') mask |= (1 &lt;&lt; (n - i - 1));\n        }\n        ans = s[mask] - '0';\n        for (int S = maskq; S; S = (S - 1) &amp; maskq) {\n            ans += s[S | mask] - '0';\n        }\n    } else if (cnt0 &lt;= 6) {\n        int mask = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (t[i] == '1') mask |= (1 &lt;&lt; (n - i - 1));\n        }\n        ans = g[mask];\n        for (int S = mask0; S; S = (S - 1) &amp; mask0) {\n            if (__builtin_popcountll(S) &amp; 1) {\n                ans -= g[S | mask];\n            } else {\n                ans += g[S | mask];\n            }\n        }\n    } else if (cnt1 &lt;= 6) {\n        int mask = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (t[i] == '1' || t[i] == '?') mask |= (1 &lt;&lt; (n - i - 1));\n        }\n        ans = f[mask];\n        for (int S = mask1; S; S = (S - 1) &amp; mask1) {\n            if (__builtin_popcountll(S) &amp; 1) {\n                ans -= f[mask ^ S];\n            } else {\n                ans += f[mask ^ S];\n            }\n        }\n    }\n    return ans;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    cin &gt;&gt; s;\n\n    build();\n    while (q--) {\n        string t;\n        cin &gt;&gt; t;\n        cout &lt;&lt; solver(t) &lt;&lt; '\\n';\n    }\n} \n</code></pre>"},{"location":"dp/sos/#_5","title":"\u8cc7\u6599","text":"<ul> <li> <p>CF \u8a73\u7d30\u8b1b\u89e3</p> </li> <li> <p>cnblog SOS DP \u5b66\u4e60\u7b14\u8bb0</p> </li> </ul>"},{"location":"dp/submatrix_dp/","title":"\u5b50\u77e9\u5f62 DP","text":""},{"location":"dp/submatrix_dp/#_1","title":"\u6700\u5927\u5b50\u6b63\u65b9\u5f62","text":"LeetCode 221. Maximal Square <p>\u7d66\u4e00\u500b n x m \u7684 01 \u65b9\u683c\u5716\uff0c\u627e\u51fa\u6700\u5927\u7684\u6b63\u65b9\u5f62\u53ea\u5305\u542b 1</p> <p>n, m \u2264 300</p>"},{"location":"dp/submatrix_dp/#_2","title":"\u6700\u5927\u5b50\u77e9\u5f62","text":"Zerojudge b123. \u6700\u5927\u77e9\u5f62 (Area) <p>\u7d66\u4e00\u500b n x m \u7684 01\u65b9\u683c\u5716\uff0c\u627e\u51fa\u9762\u7a4d\u6700\u5927\u7684\u9577\u65b9\u5f62\u53ea\u5305\u542b 1\u3002</p> <p>n, m \u2264 200</p>"},{"location":"dp/submatrix_dp/#_3","title":"\u7df4\u7fd2\u984c","text":"CF 1393 D. Rarity and New Dress <p>\u7d66\u4e00\u500b n * m \u7684 grid\uff0c\u554f\u53ef\u4ee5\u9078\u51fa\u5e7e\u500b\u83f1\u5f62\uff0c\u5176\u4e2d\u83f1\u5f62\u5167\u7684\u5b57\u6bcd\u90fd\u8981\u4e00\u6a23</p> <p>\\(n,m\\le 2000\\)</p> \u601d\u8def <p> </p> <p>\u6211\u5011\u767c\u73fe\u9019\u500b\u984c\u76ee\u6709\u9ede\u985e\u4f3c\u6700\u5927\u5b50\u6b63\u65b9\u5f62\uff0c\u4f46\u56e0\u70ba\u83f1\u5f62\u4e0d\u597d\u8a08\u7b97 dp\uff0c\u6211\u5011\u63db\u500b\u89d2\u5ea6\u60f3\uff0c\u628a\u83f1\u5f62\u62c6\u6210 4 \u500b\u65b9\u5411\u8003\u616e</p> <p> </p> <p>\u5c0d\u65bc\u4e00\u500b\u683c\u5b50 (i, j) \u4f86\u8aaa\uff0c\u6211\u5011\u53ea\u8981\u5728 4 \u500b\u65b9\u5411\u5404\u81ea\u7528 dp \u6c42\u51fa\u80fd\u7522\u751f\u7684\u6700\u5927\u4e09\u89d2\u5f62\uff0c\u518d\u53d6 min \u5c31\u662f\u80fd\u7522\u751f\u7684\u6700\u5927\u83f1\u5f62\u3002\u4ee5\u5de6\u4e0a\u7684 dp \u4f86\u8aaa\uff0c\u8f49\u79fb\u5f0f\u5c31\u662f dp(i, j) = min{dp(i - 1), dp(i, j - 1)} + 1</p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 2000 + 5;\nint a[MAXN][MAXN];\nint dp1[MAXN][MAXN], dp2[MAXN][MAXN], dp3[MAXN][MAXN], dp4[MAXN][MAXN];\n\nsigned main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        string s;\n        cin &gt;&gt; s;\n        for (int j = 1; j &lt;= m; j++) {\n            a[i][j] = s[j - 1] - 'a' + 1;\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            if (a[i][j] == a[i - 1][j] &amp;&amp; a[i][j] == a[i][j - 1]) {\n                dp1[i][j] = min(dp1[i - 1][j], dp1[i][j - 1]) + 1;\n            } else {\n                dp1[i][j] = 1;\n            }\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = m; j &gt;= 1; j--) {\n            if (a[i][j] == a[i - 1][j] &amp;&amp; a[i][j] == a[i][j + 1]) {\n                dp2[i][j] = min(dp2[i - 1][j], dp2[i][j + 1]) + 1;\n            } else {\n                dp2[i][j] = 1;\n            }\n        }\n    }\n\n    for (int i = n; i &gt;= 1; i--) {\n        for (int j = 1; j &lt;= m; j++) {\n            if (a[i][j] == a[i + 1][j] &amp;&amp; a[i][j] == a[i][j - 1]) {\n                dp3[i][j] = min(dp3[i + 1][j], dp3[i][j - 1]) + 1;\n            } else {\n                dp3[i][j] = 1;\n            }\n        }\n    }\n\n    for (int i = n; i &gt;= 1; i--) {\n        for (int j = m; j &gt;= 1; j--) {\n            if (a[i][j] == a[i + 1][j] &amp;&amp; a[i][j] == a[i][j + 1]) {\n                dp4[i][j] = min(dp4[i + 1][j], dp4[i][j + 1]) + 1;\n            } else {\n                dp4[i][j] = 1;\n            }\n        }\n    }\n\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            ans += min({dp1[i][j], dp2[i][j], dp3[i][j], dp4[i][j]});\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u6700\u5927\u5b50\u6b63\u65b9\u5f62 \u8b8a\u5316 1 <p>\u7d66\u4e00\u500b n x m \u7684 01 \u65b9\u683c\u5716\uff0c\u53ef\u4ee5\u5c07 row \u5169\u5169 swap\uff0c\u53ef\u4ee5\u505a\u4efb\u610f\u6b21\uff0c\u627e\u51fa\u9762\u7a4d\u6700\u5927\u7684\u6b63\u65b9\u5f62\u53ea\u5305\u542b 1</p> hint <p>Hint: \u5c0d\u65bc\u6bcf\u4e00\u500b\u76f4\u884c (column)\uff0c\u82e5\u6709\u8d85\u904e k \u500b\u4ee5\u8a72 column \u70ba\u7d50\u5c3e\u4e14\u9577\u5ea6\u8d85\u904e  k \u7684\u6a6b\u5217 (row)\uff0c\u5247\u627e\u5230\u4e00\u500b k * k \u7684\u6b63\u65b9\u5f62</p> \u601d\u8def <p>\u4e8c\u5206\u641c k\uff0c\u5c0d\u65bc\u6bcf\u4e00\u500b column\uff0c\u6aa2\u67e5\u662f\u5426\u6709\u8d85\u904e k \u500b\u4ee5\u8a72 column \u70ba\u7d50\u5c3e\u4e14\u9577\u5ea6\u8d85\u904e k \u7684\u6a6b\u5217 row\uff0c\u8907\u96dc\u5ea6 O(nm log n)</p> \u6700\u5927\u5b50\u6b63\u65b9\u5f62 \u8b8a\u5316 2 <p>\u7d66\u4e00\u500b n x m \u7684 01 \u65b9\u683c\u5716\uff0c\u53ef\u4ee5\u5c07 row \u5169\u5169 swap\uff0c\u4e5f\u53ef\u4ee5\u5c07 column \u5169\u5169 swap\uff0c\u90fd\u53ef\u4ee5\u505a\u4efb\u610f\u6b21\uff0c\u627e\u51fa\u9762\u7a4d\u6700\u5927\u7684\u6b63\u65b9\u5f62\u53ea\u5305\u542b 1</p> \u601d\u8def <p>\u539f\u984c\u53ef\u8f49\u70ba\u6311\u4e00\u4e9b row \u5b50\u96c6\u548c\u4e00\u4e9b col \u5b50\u96c6\uff0crow \u548c col \u6311\u7684\u6578\u91cf\u76f8\u540c\uff0c\u4e14\u9019\u4e9b row col \u4ea4\u96c6\u8655\u70ba\u5168 1</p> <p>dp(i, mask) = mask \u9019\u500b row \u7684\u96c6\u5408\u4e2d\u662f 1 \u7684\u4f4d\u7f6e\u5728 column i \u5167\u662f\u5426\u90fd\u662f 1\u00a0</p> <p>\u9810\u8655\u7406\u5b8c\u4e0a\u9762\u7684 dp \u5f8c\uff0c\u6211\u5011\u5c31\u53ea\u8981\u53bb\u679a\u8209 row \u7684 mask\uff0c\u770b i = 1...n\uff0c\u6eff\u8db3 dp(i, mask) \u7684\u6578\u91cf\u662f\u5426\u5927\u65bc\u7b49\u65bc |mask| \u5373\u53ef\uff0c\u8907\u96dc\u5ea6 O(2^n * m)\uff0c\u8a73\u898b\u4ee3\u78bc</p> code <pre><code>for (int i = 0; i &lt; m; i++) dp[i][0] = 1;\nint mx = 0;\nfor (int mask = 1; mask &lt; (1 &lt;&lt; n); mask++) {\n    int cnt = 0;\n    int cur = __builtin_ctz(mask);\n    int sz = __builtin_popcountll(mask);\n    for (int i = 0; i &lt; m; i++) {\n        if (a[cur][i] == 1 &amp;&amp; dp[i][mask ^ (1 &lt;&lt; cur)]) {\n            dp[i][mask] = 1;\n            cnt++;\n        }\n    }\n    if (cnt &gt;= sz) {\n        mx = max(mx, sz * sz);\n    }\n}\n// mx is the final ans\n</code></pre>"},{"location":"dp/images/ionc_307/","title":"Ionc 307","text":""},{"location":"dp/images/ionc_307/#g-typeracer-2-typeracer2","title":"G. TypeRacer 2 (typeracer2)","text":"<p>TypeRacer \u662f\u4e00\u500b\u57fa\u65bc\u700f\u89bd\u5668\u7684\u591a\u4eba\u5728\u7dda\u6253\u5b57\u904a\u6232\u3002\u5728 TypeRacer \u4e2d\uff0c\u73a9\u5bb6\u53ef\u4ee5\u8207\u81ea\u5df1\u6216\u8207\u5176\u4ed6\u5728\u7dda\u7528\u6236\u7af6\u722d\uff0c\u76e1\u5feb\u5b8c\u6210\u5404\u7a2e\u6587\u672c\u7684\u6253\u5b57\u6e2c\u8a66\u3002\u5728 TypeRacer \u4e2d\uff0c\u73a9\u5bb6\u9700\u8981\u6309\u7167\u9806\u5e8f\u6309\u4e0b\u6307\u5b9a\u7684\u9375\u4f4d\u3002\u800c\u5d14\u5d14\uff0c\u4e00\u4f4d\u8077\u696d\u7684 TypeRacer \u96fb\u7af6\u9078\u624b\uff0c\u81f4\u529b\u65bc\u9054\u5230\u7406\u8ad6\u7684\u6253\u5b57\u901f\u5ea6\u6975\u9650\u3002\u81ea\u7136\uff0c\u4ed6\u5c0d\u65bc\u525b\u767c\u4f48\u7684 TypeRacer 2 \u4e5f\u662f\u5341\u5206\u6709\u8208\u8da3\u3002</p> <p>\u4f46\u5728 TypeRacer 2 \u9019\u500b\u904a\u6232\u88e1\uff0c\u9700\u8981\u73a9\u5bb6\u6309\u4e0b\u7684\u6309\u9375\u5c31\u4e0d\u53ea\u662f\u4e00\u822c\u9375\u76e4\u4e0a\u6703\u6709\u7684\u6309\u9375\u4e86\u3002\u6240\u4ee5\u4e5f\u9700\u8981\u5c08\u696d\u7684\u9375\u76e4\u4f86\u904a\u73a9\u9019\u500b\u904a\u6232\u3002\u5df2\u77e5\u904a\u73a9 TypeRacer 2 \u6240\u9700\u8981\u7684\u9375\u76e4\u4e0a\u6709 \\(K\\) \u500b\u9375\u6392\u6210\u4e00\u76f4\u7dda\uff0c\u7de8\u865f\u70ba \\(1, 2, \\ldots, K\\)\u3002\u5d14\u5d14\u7684\u5169\u96bb\u624b\u4e0a\u5404\u9577\u6709\u4e00\u6839\u624b\u6307\u982d\uff0c\u53ef\u4ee5\u5728\u9375\u76e4\u4e0a\u79fb\u52d5\u4e26\u96a8\u6642\u82b1\u8cbb \\(0\\) \u6642\u9593\u55ae\u4f4d\u6309\u4e0b\u624b\u6307\u982d\u6240\u5728\u4f4d\u7f6e\u7684\u9375\uff0c\u4efb\u4e00\u6839\u624b\u6307\u982d\u5f9e\u7de8\u865f \\(i\\) \u7684\u9375\u79fb\u52d5\u5230\u7de8\u865f \\(j\\) \u7684\u9375\u9700\u8981 \\(|i-j|\\) \u6642\u9593\u55ae\u4f4d\uff0c\u4e14\u5d14\u5d14\u540c\u6642\u9593\u53ea\u80fd\u52d5\u4e00\u6839\u624b\u6307\u982d\u3002</p> <p>\u73fe\u5728\uff0c\u7d66\u5b9a\u9577\u5ea6 \\(N\\) \u7684 TypeRacer 2 \u6240\u9700\u8981\u7167\u9806\u5e8f\u6309\u4e0b\u7684\u9375\u4f4d\uff0c\u8acb\u544a\u8a34\u5d14\u5d14\uff0c\u4ed6\u81f3\u5c11\u9700\u8981\u82b1\u591a\u5c11\u6642\u9593\u55ae\u4f4d\u624d\u80fd\u6253\u5b8c\u9019\u6240\u6709\u9375\u4f4d\uff08\u5d14\u5d14\u7684\u5169\u96bb\u624b\u6307\u982d\u4e00\u958b\u59cb\u53ef\u4ee5\u5728\u9375\u76e4\u4e0a\u7684\u4efb\u610f\u4f4d\u7f6e\uff09\u3002</p>"},{"location":"dp/images/ionc_307/#input","title":"Input","text":"<p>\u8f38\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u5169\u500b\u6b63\u6574\u6578 \\(N\\)\u3001\\(K\\)\uff0c\u4ee5\u4e00\u500b\u7a7a\u767d\u9694\u958b\u3002</p> <p>\u8f38\u5165\u7684\u7b2c\u4e8c\u884c\u5305\u542b \\(N\\) \u500b\u6b63\u6574\u6578 \\(a_1, a_2, \\ldots ,a_N\\)\uff0c\u4ee3\u8868\u9700\u8981\u5d14\u5d14\u7167\u9806\u5e8f\u6309\u4e0b\u7684\u9375\u4f4d\u3002</p>"},{"location":"dp/images/ionc_307/#output","title":"Output","text":"<p>\u8f38\u51fa\u4e00\u500b\u975e\u8ca0\u6574\u6578\u4f54\u4e00\u884c\uff0c\u4ee3\u8868\u5d14\u5d14\u6240\u9700\u8981\u82b1\u7684\u6700\u5c11\u6642\u9593\u55ae\u4f4d\u3002</p>"},{"location":"dp/images/ionc_307/#scoring","title":"Scoring","text":"<ul> <li>\\(1 \\le K \\le N \\le 200\\,000\\)\u3002</li> <li>\\(1 \\le a_i \\le K\uff081 \\le i \\le N\uff09\\)\u3002</li> </ul> \u5b50\u4efb\u52d9 \u5206\u6578 \u984d\u5916\u8f38\u5165\u9650\u5236 1 50 \\(1 \\le K \\le 26\\)\u3002 2 50 \u7121\u984d\u5916\u9650\u5236\u3002"},{"location":"dp/images/ionc_307/#examples","title":"Examples","text":""},{"location":"dp/images/ionc_307/#sample-input-1","title":"sample input 1","text":"<pre><code>5 5\n5 1 5 2 3\n</code></pre>"},{"location":"dp/images/ionc_307/#sample-output-1","title":"sample output 1","text":"<pre><code>2\n</code></pre>"},{"location":"dp/images/ionc_307/#sample-input-2","title":"sample input 2","text":"<pre><code>10 6\n5 5 3 4 6 6 5 5 6 3\n</code></pre>"},{"location":"dp/images/ionc_307/#sample-output-2","title":"sample output 2","text":"<pre><code>5\n</code></pre>"},{"location":"dp/images/ionc_307/#sample-input-3","title":"sample input 3","text":"<pre><code>20 10\n8 7 8 10 5 1 2 5 3 9 7 3 4 6 5 7 7 9 6 9\n</code></pre>"},{"location":"dp/images/ionc_307/#sample-output-3","title":"sample output 3","text":"<pre><code>24\n</code></pre>"},{"location":"dp/images/ionc_307/#note","title":"Note","text":"<p>\u5728\u7bc4\u4f8b\u4e00\u4e2d\uff0c\u5d14\u5d14\u53ef\u4ee5\u628a\u5de6\u624b\u653e\u5728 \\(1\\) \u4e0a\u3001\u53f3\u624b\u653e\u5728 \\(5\\) \u4e0a\uff0c\u4e26\u4e14\u4f9d\u5e8f\u7528\u53f3\u3001\u5de6\u3001\u53f3\u3001\u5de6\u3001\u5de6\u624b\u4f86\u6309\u4e0b \\(\\color{blue}{5}, \\color{red}{1}, \\color{blue}{5}, \\color{red}{2}, \\color{red}{3}\\)\u3002\u9019\u6a23\u7684\u79fb\u52d5\u7e3d\u8ddd\u96e2\u662f \\(\\color{red}{|1-2| + |2-3|} + \\color{blue}{|5-5|} = \\color{red}{2} + \\color{blue}{0} = 2\\)</p>"},{"location":"dp/images/ionc_307/#limits","title":"Limits","text":"<ul> <li> <p>time limit per test: 2 seconds</p> </li> <li> <p>memory limit per test: 256 megabytes</p> </li> <li> <p>input: standard input</p> </li> <li> <p>output: standard output</p> </li> </ul>"},{"location":"dp/images/%E6%9C%89%E9%99%90%E8%83%8C%E5%8C%85%20-%20%E5%96%AE%E8%AA%BF%E9%9A%8A%E5%88%97%E5%84%AA%E5%8C%96/","title":"\u6709\u9650\u80cc\u5305 - \u55ae\u8abf\u968a\u5217\u512a\u5316","text":"<p>\u6211\u5011\u5148\u5217\u51fa\u8f49\u79fb\u5f0f $$ dp(i,j)=\\max \\begin{cases} dp(i-1, j) \\ dp(i-1, j- w) + v \\ dp(i-1, j-2w) + v \\ \\vdots \\ dp(i-1,j-kw)+kv\\end{cases} $$</p> <p>\u53ef\u4ee5\u767c\u73fe\uff0c\u5c0d\u65bc dp(i, j)\uff0c\u4ed6\u80fd\u8f49\u79fb\u7684\u9ede\u53ef\u80fd\u5c31\u662f j - 2w, j - w, j\uff0c\u5c0d\u65bc dp(i, j - w)\uff0c\u4ed6\u80fd\u8f49\u79fb\u7684\u9ede\u53ef\u80fd\u5c31\u662f j - 3w, j - 2w, j - w\u3002</p> <p></p> <p>\u6240\u4ee5\u5c0d\u65bc j % w \u76f8\u540c\u7684\u72c0\u614b\uff0c\u5176\u5be6\u53ef\u4ee5\u7528\u4e00\u500b\u55ae\u8abf\u968a\u5217\u4f86\u7dad\u8b77\u7b54\u6848</p> <p></p> <p>\u63a5\u4e0b\u4f86\u8981\u4f86\u770b\u5982\u4f55\u7dad\u8b77\u55ae\u8abf\u968a\u5217\u88e1\u9762\u6bcf\u9805\u7684 value\u3002\u5047\u82e5 dp(i, j) \u5f9e dp(i - 1, j - kw) \u8f49\u79fb\uff0c\u8f49\u79fb\u5f0f\u5c31\u662f dp(i, j) = dp(i - 1, j - kw) + k * v\uff0c\u90a3\u6211\u5011\u8981\u600e\u9ebc\u6a23\u5728\u55ae\u8abf\u5c0d\u5217\u88e1\u9762\u8868\u793a\u9019\u500b k * w \u7684\u8ca2\u737b\u5462 ? \u6211\u5011\u4f7f\u7528\u4e86\u4e00\u500b\u985e\u4f3c\u524d\u7db4\u548c\u7684\u65b9\u6cd5 \u5047\u8a2d\u6211\u5011\u5c07 j - kw \u8868\u793a\u6210 w'\uff0c\u90a3\u9ebc\u8f49\u79fb\u5f0f\u5c31\u8b8a\u6210 </p> <p>dp(i, j) </p> <ul> <li> <p>= dp(i - 1, j - kw) + k * v</p> </li> <li> <p>= dp(i - 1, w') + ((j - w') / w) * v</p> </li> <li>= dp(i - 1, w') + (j / w) * v - (w' / w) * v</li> <li>= dp(i - 1, w') - (w' / w) * v + (j / w) * v</li> </ul> <p>\u5176\u4e2d\u6211\u5011\u5c31\u53ef\u4ee5\u628a dp(i - 1, w') - (w' / w) * v \u505a\u70ba\u55ae\u8abf\u5c0d\u5217\u88e1\u9762\u7684\u503c\uff0c\u6700\u5f8c\u51fa\u4f86\u518d\u7d71\u4e00\u52a0\u4e0a (j / w) * v \u5373\u53ef\u3002\u6ce8\u610f\u5230\u96fb\u8166\u662f\u76f4\u63a5\u53d6\u4e0b\u9ad8\u65af\uff0c\u4e0d\u904e j % w \u8207 j - kw % w \u6703\u662f\u4e00\u6a23\u7684\uff0c\u6240\u4ee5\u4e0d\u6703\u6709\u554f\u984c\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define ALL(x) x.begin(),x.end()\nusing namespace std;\n\nconst int MAXN = 1e2 + 5;\nconst int MAXW = 1e5 + 5;\nint n, m;\nint w[MAXN], v[MAXN], c[MAXN];\nint val[MAXN][MAXW], dp[MAXN][MAXW];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; v[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; c[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int r = 0; r &lt; w[i]; r++) {\n            deque&lt;int&gt; dq;\n            for (int j = r; j &lt;= m; j += w[i]) {\n                val[i][j] = dp[i - 1][j] - (j / w[i]) * v[i];\n                while (!dq.empty() &amp;&amp; val[i][dq.back()] &lt;= val[i][j]) {\n                    dq.pop_back();\n                }\n                dq.push_back(j);\n                dp[i][j] = val[i][dq.front()] + (j / w[i]) * v[i];\n                if (dq.front() == j - c[i] * w[i]) {\n                    dq.pop_front();\n                }\n            }\n        }\n    }\n    cout &lt;&lt; dp[n][m] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"ds/","title":"\u6982\u8ff0","text":"<p>\u5728\u89e3\u984c\u6642\uff0c\u53ef\u80fd\u6703\u5e38\u5e38\u9047\u5230 : </p> <p>\u9700\u8981\u7dad\u8b77\u4e00\u500b Data Structure\uff0c\u652f\u63f4 :</p> <ul> <li>...</li> <li>...</li> </ul> <p>\u9019\u6642\u5019\uff0c\u5c31\u53ef\u4ee5\u5f9e\u9019\u4e9b\u8cc7\u6599\u7d50\u69cb\u4e2d\uff0c\u9078\u51fa\u9069\u5408\u7684\u4f86\u7528</p>"},{"location":"ds/bit/","title":"BIT","text":""},{"location":"ds/bit/#_1","title":"\u524d\u7f6e\u77e5\u8b58","text":""},{"location":"ds/bit/#_2","title":"\u8ca0\u865f\u7684\u4e8c\u9032\u5236","text":"<p>\u6bcf\u4f4d 01 \u4e92\u63db\u518d\u52a0 1, \u53ef\u4ee5\u8f49\u63db\u6b63\u8ca0\u865f\uff0cex. 3 \u548c -3</p> <p></p>"},{"location":"ds/bit/#lowbit","title":"lowbit \u4ecb\u7d39","text":"<p>lowbit(x) :  \u4e8c\u9032\u5236\u6700\u9760\u53f3\u7684 1</p> <p>\u4f8b\u5982 6 = 0110\uff0clowbit(6) = 0010</p>"},{"location":"ds/bit/#lowbit_1","title":"lowbit \u904b\u7b97","text":"<p>lowbit(x) = x &amp; (-x)</p> <p></p>"},{"location":"ds/bit/#_3","title":"\u5f15\u5165","text":"<p>BIT \u4e00\u5b9a\u8981\u662f 1-base</p>"},{"location":"ds/bit/#query","title":"query","text":"<p>query(x) : \u6c42 a[1, x] \u5340\u9593\u7684\u548c</p> code <pre><code>int query(int x) {\n    int ret = 0;\n    while (x &gt; 0) {\n        ret += bit[x];\n        x -= lowbit(x);\n    }\n    return ret;\n}\n</code></pre>"},{"location":"ds/bit/#modify","title":"modify","text":"<p>modify(x, d) : a[x] \u52a0\u4e0a d</p> code <pre><code>void modify(int x, int d) {\n    while (x &lt;= n) {\n        bit[x] += d;\n        x += lowbit(x);\n    }\n}\n</code></pre>"},{"location":"ds/bit/#_4","title":"\u6a21\u677f","text":"code <pre><code>struct BIT {\n    #define lowbit(x) (x &amp; (-x))\n    int n;\n    vector&lt;int&gt; bit;\n\n    void build(int _n) {\n        n = _n;\n        bit.resize(n + 1);\n    }\n    int query(int x) {\n        int ret = 0;\n        while (x &gt; 0) {\n            ret += bit[x];\n            x -= lowbit(x);\n        }\n\n        return ret;\n    }\n    void add(int x, int d) {\n        while (x &lt;= n) {\n            bit[x] += d;\n            x += lowbit(x);\n        }\n    }\n}; \n</code></pre>"},{"location":"ds/bit/#bit","title":"BIT \u652f\u63f4\u64cd\u4f5c","text":"<p>query \u7684\u5340\u9593\u53ea\u80fd\u662f\u524d\u7db4, \u50c5\u80fd\u56de\u7b54\u53ef\u7531\u524d\u7db4\u7d44\u5408\u51fa\u4f86\u7684\u554f\u984c</p> <ol> <li>\u5340\u9593\u6c42\u548c, \u55ae\u9ede\u52a0\u503c</li> <li>\u55ae\u9ede\u6c42\u548c, \u5340\u9593\u52a0\u503c</li> <li>\u5340\u9593\u6c42\u548c, \u5340\u9593\u52a0\u503c</li> </ol>"},{"location":"ds/bit/#_5","title":"\u5340\u9593\u6c42\u548c, \u55ae\u9ede\u52a0\u503c","text":"<p>\u8a3b : \u5176\u5be6\u628a\u52a0\u503c\u8b8a\u5316\u4e00\u4e0b\u53ef\u4ee5\u652f\u63f4\u55ae\u9ede\u6539\u503c</p>"},{"location":"ds/bit/#_6","title":"\u55ae\u9ede\u6c42\u548c, \u5340\u9593\u52a0\u503c","text":"<p>\u628a bit \u7684\u770b\u6210\u662f\u524d\u7db4\u548c\u9663\u5217\uff0c\u5340\u9593\u52a0\u503c\u5c31\u7528\u5dee\u5206\u6539\u5169\u500b\u9ede\uff0c\u55ae\u9ede\u6c42\u548c\u6642\u5c31\u6c42 bit[1] + ... + bit[i]</p>"},{"location":"ds/bitset/","title":"bitset\u52a0\u901f","text":""},{"location":"ds/bitset/#_1","title":"\u5ba3\u544a &amp; \u64cd\u4f5c","text":"<p>\u5ba3\u544a</p> <pre><code>bitset&lt;1000&gt; b;\n</code></pre> <p>\u7b97\u51fa x \u7684\u4e8c\u9032\u5236\u8868\u793a\u6cd5\u6709\u5e7e\u500b 1</p> <pre><code>__builtin_popcount(x)\n__builtin_popcountll(x)\n</code></pre> <p>\u7b97\u51fa x \u7684\u4e8c\u9032\u5236\u8868\u793a\u6cd5\u982d/\u5c3e\u6709\u5e7e\u500b 0\uff08\u90fd\u662f \\(O(1)\\)\uff0c\u6703\u6bd4\u81ea\u5df1\u7528\u8ff4\u5708\u7b97\u5feb\u5f88\u591a\uff09\u3000</p> <pre><code>__builtin_clz(x)\n__builtin_ctz(x)\n</code></pre>"},{"location":"ds/bitset/#_2","title":"\u4f8b\u984c","text":""},{"location":"ds/bitset/#cses-beautiful-subgrids","title":"CSES Beautiful Subgrids","text":"CSES - Beautiful Subgrids <p>\u7d66\u4e00\u500b \\(n\\times n\\) \u7684 grid\uff0c\u6bcf\u4e00\u683c\u975e\u9ed1\u5373\u767d\uff0c\u554f\u6709\u5e7e\u500b\u5b50\u77e9\u5f62\u6eff\u8db3 :</p> <ul> <li> <p>\u81f3\u5c11 \\(2\\times 2\\)</p> </li> <li> <p>\u56db\u500b\u89d2\u843d\u90fd\u662f\u9ed1\u8272\u7684</p> </li> </ul> <p>\\(n\\le 3000\\)</p> \u601d\u8def <p>\u5148\u60f3\u66b4\u529b\uff0c\u66b4\u529b\u7684\u8a71\u4e00\u5b9a\u662f\u679a\u8209 \\(x_1,y_1,x_2,y_2\\)\uff0c\u9019\u6a23 \\(O(n^4)\\)\u3002\\(O(n^2)\\) \u7684\u8a71\u5148\u5217\u8209 \\(y_1, y_2\\)\uff0c\u7136\u5f8c \\(O(n)\\) \u627e\u5408\u6cd5\u7684 \\(x\\)\u3002</p> <p>\u81f3\u65bc\u8981\u600e\u9ebc \\(O(n)\\) \u627e\u5408\u6cd5\u7684 \\(x\\) : (bitset[y1] &amp; bitset[y2]).count()</p> <p>\u8907\u96dc\u5ea6 \\(O(\\frac{n^3}{64})\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#pragma GCC target(\"popcnt\")\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3005;\nconst int M = 1e9 + 7;\nconst int X = 131;\n\nint n, m;\nbitset&lt;maxn&gt; B[maxn];\nint a[maxn][maxn];\n\nvoid init () {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; B[i];\n    }\n}\n\nvoid solve() {\n    int ans = 0;\n    bitset&lt;maxn&gt; b;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = i + 1; j &lt;= n; j++) {\n            b = B[i] &amp; B[j];\n            int cnt = b.count();\n            ans += cnt * (cnt - 1) / 2;\n        }\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre>"},{"location":"ds/bitset/#cses-reachable-nodes","title":"CSES Reachable Nodes","text":"CSES - Reachable Nodes <p>\u7d66\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684 DAG\uff0c\u5c0d\u65bc\u6bcf\u500b\u9ede\u8f38\u51fa\u4ed6\u53ef\u4ee5\u8d70\u5230\u5e7e\u500b\u9ede\uff08\u542b\u81ea\u5df1\uff09</p> <p>\\(n\\le 5\\times 10^4,m\\le 10^5\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 5e4 + 5;\nconst int M = 1e9 + 7;\nconst int X = 131;\n\nint n, m;\nvector&lt;int&gt; G[maxn];\nbitset&lt;maxn&gt; B[maxn];\nint vis[maxn];\n\nvoid dfs (int u) {\n    if (vis[u]) return;\n    vis[u] = true;\n    for (auto v : G[u]) {\n        dfs (v);\n        B[u][v] = 1;\n        B[u] |= B[v];\n    }\n}\n\nvoid init () {\n    cin &gt;&gt; n &gt;&gt; m;\n    int u, v;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n    }\n}\n\nvoid solve() {\n    for (int i = 1; i &lt;= n; i++)\n        if (!vis[i]) dfs (i);\n    for (int i = 1; i &lt;= n; i++) cout &lt;&lt; B[i].count() + 1 &lt;&lt; \" \";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre>"},{"location":"ds/bitset/#usaco-lots-of-triangles","title":"USACO Lots of Triangles","text":"USACO 2016 Dec. Platinum P1. Lots of Triangles <p>\u7d66 \\(n\\) \u7684\u4e8c\u7dad\u5ea7\u6a19\u9ede\uff0c\u4efb\u4e09\u9ede\u4e0d\u5171\u76f4\u7dda\uff0c\u4efb\u4e09\u9ede\u53ef\u4ee5\u5f62\u6210\u4e09\u89d2\u5f62\u3002\u5c0d\u6bcf\u500b\u9ede\uff0c\u8f38\u51fa\u4ed6\u6703\u88ab\u5305\u542b\u5728\u5e7e\u500b\u4e09\u89d2\u5f62\u5167</p> <p>\\(n\\le 300\\)</p>"},{"location":"ds/bitset/#_3","title":"\u5168\u570b\u8cfd \u5171\u540c\u670b\u53cb","text":"2021 \u5168\u570b\u8cfd pE. \u5171\u540c\u670b\u53cb <p>\u6709 \\(n\\) \u500b\u4eba\uff0c\u5c0d\u65bc\u7b2c \\(i\\) \u500b\u4eba\u7d66\u51fa\u4ed6\u7684 \\(d_i\\) \u500b\u670b\u53cb\uff0c\u554f\u6709\u591a\u5c11\u7d44 \\((a,b)\\) \u6eff\u8db3 \\(a&lt;b\\) \u4e14 \\(a\\) \u8207 \\(b\\) \u6709\u5171\u540c\u7684\u670b\u53cb</p> <p>\\(n\\le 2500\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\nusing namespace std;\n\nconst int maxn = 2505;\nconst int M = 1e9 + 7;\nconst int INF = 0x3f3f3f3f;\n\nbitset&lt;maxn&gt; B[maxn];\nint n, m;\n\nvoid init () {\n    cin &gt;&gt; n;\n    for (int i = 1, u, v; i &lt;= n; i++) {\n        int t;\n        cin &gt;&gt; t;\n        while (t--) {\n            cin &gt;&gt; v;\n            v++;\n            B[i][v] = 1;\n        }\n    }\n}\n\nvoid solve () {\n    bitset&lt;maxn&gt; b; \n    int res = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = i + 1; j &lt;= n; j++) {\n            b = B[i] &amp; B[j];\n            if (b.count()) res++;\n        }\n    }\n    cout &lt;&lt; res &lt;&lt; \"\\n\";\n}\n\nsigned main () {\n    init();\n    solve();\n}\n</code></pre>"},{"location":"ds/bitset/#_4","title":"\u80cc\u5305\u554f\u984c","text":"<p>\u7b54\u6848 true false \u7684\u53ef\u4ee5\u601d\u8003\u770b\u770b\u80fd\u4e0d\u80fd\u7528\u4f4d\u5143\u904b\u7b97</p>"},{"location":"ds/bitset/#01","title":"0/1 \u80cc\u5305","text":"0/1 \u80cc\u5305 <p>\u7d66\u5b9a \\(N\\) \u500b\u7269\u54c1\uff0c\u7b2c \\(i\\) \u500b\u7269\u54c1\u91cd\u91cf \\(w_i\\)\uff0c\u554f\u662f\u5426\u80fd\u9078\u4e00\u4e9b\u7269\u54c1\u4f7f\u91cd\u91cf\u7e3d\u548c\u6e4a\u5230 \\(W\\) </p> \u601d\u8def <p>\u4e00\u822c\u6211\u5011\u6703\u9019\u6a23\u5beb\uff0c\u8907\u96dc\u5ea6 \\(O(nW)\\)</p> <pre><code>bool dp[maxW];\nint main() {\n    int n, W;\n    cin &gt;&gt; n &gt;&gt; W;\n    dp[0] = true;\n    for(int id = 0; id &lt; n; id++) {\n        int x;\n        cin &gt;&gt; x;\n        for(int i = W; i &gt;= x; i--) {\n            if(dp[i - x]) dp[i] = true;\n        }\n    }\n    puts(dp[W] ? \"YES\" : \"NO\");\n}\n</code></pre> <p>\u6211\u5011\u53ef\u4ee5\u5c07\u5167\u5c64\u7684\u8ff4\u5708\u6539\u6210 <code>dp |= (dp &lt;&lt; x)</code>\uff0c\u5982\u4e0b</p> <pre><code>bitset&lt;maxW&gt; dp;\nint main() {\n    int n, W;\n    cin &gt;&gt; n &gt;&gt; W;\n    dp[0] = true;\n    for(int id = 0; id &lt; n; id++) {\n        int x;\n        cin &gt;&gt; x;\n        dp |= (dp &lt;&lt; x);\n    }\n    puts(dp[W] ? \"YES\" : \"NO\");\n}\n</code></pre> <p>\u9019\u6a23\u505a\u4e4b\u5f8c\u8907\u96dc\u5ea6\u70ba \\(O(\\frac{nW}{64})\\)</p> TIOJ 1993. \u51b0\u584a\u5854 <p>\u7d66 \\(n\\) \u500b tuple \\((x_i,y_i,z_i)\\)\uff0c\u5c0d\u65bc\u6bcf\u500b tuple \u9078 \\(x_i,y_i,z_i\\) \u5176\u4e2d\u4e00\u500b\u653e\u5165\u80cc\u5305\u88e1\uff0c\u4f7f\u5728\u80cc\u5305\u91cd\u91cf\u4e0d\u8d85\u904e \\(W\\) \u7684\u60c5\u6cc1\u4e0b\uff0c\u6700\u5927\u5316\u80cc\u5305\u91cd\u91cf\u7e3d\u548c</p> <p>\u6709 \\(t\\) \u7d44\u6e2c\u8cc7</p> <p>\\(t\\le 20,n\\le 10^3,W\\le 10^5,x_i,y_i,z_i\\le 10^4\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e5 + 5;\n\nbitset&lt;maxn&gt; dp;\n\nvoid solve() {\n    int n, W;\n    cin &gt;&gt; n &gt;&gt; W;\n    dp.reset();\n    dp.set(0);\n    for (int i = 0; i &lt; n; i++) {\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        dp = (dp &lt;&lt; x) | (dp &lt;&lt; y) | (dp &lt;&lt; z);\n    }\n\n    for (int i = W; i &gt; 0; i--) {\n        if (dp[i]) {\n            cout &lt;&lt; i &lt;&lt; '\\n';\n            return;\n        }\n    }\n    cout &lt;&lt; \"no solution\\n\";\n}\n\nsigned main() {\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}   \n</code></pre>"},{"location":"ds/bitset/#_5","title":"\u6709\u9650\u80cc\u5305","text":"\u6709\u9650\u80cc\u5305 <p>\u7d66\u5b9a \\(N\\) \u500b\u7269\u54c1\uff0c\u7b2c \\(i\\) \u500b\u7269\u54c1\u6709 \\(c_i\\) \u500b\uff0c\u6bcf\u500b\u91cd\u91cf \\(w_i\\)\uff0c\u554f\u662f\u5426\u80fd\u9078\u4e00\u4e9b\u7269\u54c1\u4f7f\u91cd\u91cf\u7e3d\u548c\u6e4a\u5230 \\(W\\) </p> \u601d\u8def <p>\u628a \\(c_i\\) \u5206\u6210 \\(\\log c_i\\) \u7d44\uff0c\u7528 0/1 \u80cc\u5305\u505a</p> <p>\u8907\u96dc\u5ea6 \\(O(\\frac{n\\log c_i\\times W}{64})\\)</p>"},{"location":"ds/bitset/#_6","title":"\u7121\u9650\u80cc\u5305","text":"\u7121\u9650\u80cc\u5305 <p>\u7d66\u5b9a \\(N\\) \u500b\u7269\u54c1\uff0c\u7b2c \\(i\\) \u500b\u7269\u54c1\u6709\u7121\u9650\u591a\u500b\uff0c\u6bcf\u500b\u91cd\u91cf \\(w_i\\)\uff0c\u554f\u662f\u5426\u80fd\u9078\u4e00\u4e9b\u7269\u54c1\u4f7f\u91cd\u91cf\u7e3d\u548c\u6e4a\u5230 \\(W\\) </p> \u601d\u8def <p>\u8a2d \\(c_i = W / w_i\\)\uff0c\u7576\u6709\u9650\u80cc\u5305\u89e3</p> <p>\u8907\u96dc\u5ea6 \\(O(\\frac{n\\log W\\times W}{64})\\)</p> Decide if a number equals the sum of some submultiset of positive integers <p>\u7d66 \\(w_1,\\ldots ,w_k\\)\uff0c\\(\\sum \\limits_{i=1}^k w_i=n\\)\uff0c\u554f\u662f\u5426\u80fd\u9078\u4e00\u4e9b \\(w_i\\) \u4f7f \\(\\sum w_i = x\\)</p> \u601d\u8def <p>\u5982\u679c\u76f4\u63a5\u66b4\u529b\u7528 01 \u80cc\u5305\u505a\u7684\u8a71\u5c31\u662f \\(O(nk)\\)</p> <p>\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u5c07\u554f\u984c\u6574\u7406\u6210\u6709\u9650\u80cc\u5305\u7684\u6a21\u5f0f :</p> <p>\u7d66\u4e00\u4e9b \\(w_i,c_i\\)\uff0c\u5176\u4e2d \\(\\sum w_i\\times c_i=n\\)\uff0c\u554f\u662f\u5426\u80fd\u6e4a\u5230 \\(x\\)</p> <p>\u6211\u5011\u5c07\u9019\u4e9b\u7269\u54c1\u7684 \\(c_i\\) \u7528\u4e8c\u9032\u5236\u62c6\u89e3\u6210 \\(\\log(c_i)\\) \u500b\uff0c\u6240\u4ee5\u6211\u5011\u9019\u908a\u53ef\u4ee5\u4f9d\u7167 \\(2\\) \u7684\u51aa\u6b21\u4e00\u6a23\u7684\u4e00\u8d77\u8003\u616e\u8907\u96dc\u5ea6</p> <p>\u7576\u8003\u616e \\(c_i\\ge 2^0\\)\uff0c\u4e5f\u5c31\u662f\u6bcf\u7a2e\u7269\u54c1\u90fd\u53ea\u7528\u4e00\u500b \\(w_i\\)\uff0c\u56e0\u70ba\u540c\u4e00 \\(w_i\\) \u4e0d\u6703\u51fa\u73fe\u4e00\u6b21\u4ee5\u4e0a\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u6709 \\(\\sqrt{n}\\) \u7a2e \\(w_i\\)\uff08\u4e5f\u5c31\u662f \\(w_i\\) \u7684\u96c6\u5408\u662f \\(1+2+\\ldots + \\sqrt{n}=n\\)\uff09\uff0c\u8907\u96dc\u5ea6 O(\u8f49\u79fb\u6642\u9593 * \u8f49\u79fb\u6b21\u6578)\\(=O(n\\times \\sqrt{n})\\)</p> <p>\u7576\u8003\u616e \\(c_i\\ge 2^1\\)\uff0c\u4e5f\u5c31\u662f\u6bcf\u7a2e\u7269\u54c1\u90fd\u7528\u5169\u500b \\(w_i\\)\uff0c\u56e0\u70ba\u540c\u4e00 \\(w_i\\) \u4e0d\u6703\u51fa\u73fe\u4e00\u6b21\u4ee5\u4e0a\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u6709 \\(\\sqrt{\\frac{n}{2}}\\) \u7a2e \\(w_i\\)\uff08\u4e5f\u5c31\u662f \\(w_i\\) \u7684\u96c6\u5408\u662f \\(2+4+\\ldots + =n\\Rightarrow 1+2+\\ldots +\\sqrt{\\frac{n}{2}}=\\frac{n}{2}\\)\uff09\uff0c\u8907\u96dc\u5ea6 \\(O(n\\times \\sqrt{\\frac{n}{2}})\\)</p> <p>\u4ee5\u6b64\u985e\u63a8\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5217\u51fa</p> \\[ \\begin{align} n \\cdot \\left( \\sqrt{\\frac{n}{1}} + \\sqrt{\\frac{n}{2}} + \\sqrt{\\frac{n}{4}} + \\sqrt{\\frac{n}{8}} + \\ldots \\right) = \\\\ n \\sqrt n \\cdot \\left(1 + \\frac{1}{\\sqrt{2}} + \\frac{1}{\\sqrt{4}} + \\frac{1}{\\sqrt{8}} + \\ldots \\right) \\end{align} \\] <p>\u5f8c\u9762\u62ec\u865f\u88e1\u9762\u7684\u7e3d\u548c\u53ef\u4ee5\u7528\u7121\u7aae\u7b49\u6bd4\u7d1a\u6578\u516c\u5f0f\u5957\u4e0a \\(=\\frac{\\sqrt{2}}{\\sqrt{2} - 1} \\le 4\\)\uff0c\u6240\u4ee5\u7e3d\u8907\u96dc\u5ea6\u70ba</p> \\[ \\le n\\sqrt{n}\\times 4=O(n\\sqrt{n}) \\] <p>\u53ef\u4ee5\u5728\u7528 bitset \u52a0\u901f\u8f49\u79fb\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u662f \\(O(\\frac{n\\sqrt{n}}{64})\\)</p> \u7d00\u9304 <p>BOI 2015 Tug of War, CF 1856 E2. PermuTree (hard version) \u90fd\u6709\u7528\u5230\u985e\u4f3c\u7684\u6280\u5de7\uff0c\u601d\u8def\u6709\u90e8\u5206\u662f\u53c3\u8003 CF \u90a3\u984c\u7684\u984c\u89e3</p> code <pre><code>#include &lt;bitset&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nbitset&lt;10000&gt; B;\n\nvoid solve(vector&lt;int&gt; vec) {\n    B[0] = true;\n\n    for (int x : vec) {\n        B |= (B &lt;&lt; x);\n    }\n}\n\nint main() {\n    vector&lt;int&gt; w = {2, 4, 9};\n    vector&lt;int&gt; cnt = {3, 5, 4};\n\n    vector&lt;int&gt; vec;\n    for (int i = 0; i &lt; (int)w.size(); i++) {\n        int k = 1;\n        while (k &lt; cnt[i]) {\n            vec.push_back(w[i] * k);\n            cnt[i] -= k;\n            k *= 2;\n        }\n        if (k &gt; 0) {\n            vec.push_back(w[i] * k);\n        }\n        /*\n        slow version\n        for (int j = 0; j &lt; cnt[i]; j++) {\n            vec.push_back(w[i]);\n        }\n        */\n    }\n\n    solve(vec);  // 01 \u80cc\u5305\n    cout &lt;&lt; B &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> CSES - School Excursion <p>\u7d66\u4f60\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u5716\uff0c\u53ef\u4ee5\u53d6 \\(k\\) \u500b\u9023\u901a\u584a\uff0c\u554f\u53d6\u5230\u7684 node \u7e3d\u548c\u6709\u54ea\u4e9b\u53ef\u80fd\uff0c\u4f9d\u5e8f\u8f38\u51fa</p> <p>\\(n\\le 10^5, m\\le 10^5\\)</p> \u601d\u8def <p>\u5c07\u554f\u984c\u8f49\u63db\u6210\u6709\u9650\u80cc\u5305\uff0c\u4f7f\u7528\u62c6\u6210 log c \u7d44\u7684\u512a\u5316 + bitset</p> code <pre><code>#include &lt;bitset&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\n#define int long long\n\nusing namespace std;\n\nconst int maxn = 1e5 + 5;\n\nint n, m;\nint par[maxn], sz[maxn];\nvector&lt;int&gt; W;\n\nvoid dsu_init() {\n    for (int i = 1; i &lt;= n; i++) {\n        par[i] = i;\n        sz[i] = 1;\n    }\n}\n\nint find(int x) {\n    if (par[x] == x) return x;\n    return par[x] = find(par[x]);\n}\n\nvoid merge(int a, int b) {\n    int x = find(a), y = find(b);\n    if (x == y) return;\n    par[x] = y;\n    sz[y] += sz[x];\n    sz[x] = 0;\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int u, v;\n    dsu_init();\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        merge(u, v);\n    }\n}\n\nvoid solve() {\n    W.resize(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        W[sz[i]]++;\n    }\n    bitset&lt;maxn&gt; B;\n    B.reset();\n    B[0] = 1;\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (W[i] &gt;= 2) {\n            int k = (W[i] - 1) / 2;\n            W[2 * i] += k;\n            W[i] -= 2 * k;\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= W[i]; j++) {\n            B |= (B &lt;&lt; i);\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; B[i];\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n}\n</code></pre>"},{"location":"ds/bitset/#_7","title":"\u7fd2\u984c","text":"CF 1854 B. Earn or Unlock"},{"location":"ds/bitset/#_8","title":"\u8cc7\u6599","text":"<ul> <li> <p>https://www.youtube.com/watch?v=jqJ5s077OKo</p> </li> <li> <p>https://drive.google.com/file/d/1fVCA6AJ65Z7ZQUQzEfs7JbkAjJRKAnVP/view</p> </li> </ul>"},{"location":"ds/li_chao_segment_tree/","title":"\u674e\u8d85\u7dda\u6bb5\u6a39","text":""},{"location":"ds/li_chao_segment_tree/#_1","title":"\u5f15\u5165","text":"<p>\u674e\u8d85\u7dda\u6bb5\u6a39\u4e3b\u8981\u89e3\u6c7a\u5e73\u9762\u5ea7\u6a19\u7cfb\u5167\u6709\u95dc\u76f4\u7dda\u7684\u554f\u984c\uff0c\u674e\u8d85\u7dda\u6bb5\u6a39\u662f\u4e00\u7a2e\u7279\u6b8a\u7684\u7dda\u6bb5\u6a39\u3002</p>"},{"location":"ds/li_chao_segment_tree/#_2","title":"\u4e00\u3001\u76f4\u7dda","text":"LOJ #2625. \u300cJSOI2008\u300dBlue Mary \u5f00\u516c\u53f8 <p>\u73fe\u5728\u6709 \\(q\\) \u500b\u64cd\u4f5c\uff0c\u6bcf\u500b\u64cd\u4f5c\u6703\u662f\u4ee5\u4e0b\u5169\u7a2e\u4e2d\u7684\u4e00\u7a2e\uff1a</p> <ul> <li> <p>\u63d2\u5165\u4e00\u689d\u76f4\u7dda \\(y = mx + k\\)</p> </li> <li> <p>\u8a62\u554f\u4e00\u689d\u76f4\u7dda \\(x = t\\) \u8207\u5176\u5b83\u76f4\u7dda\u76f8\u4ea4\u7684\u9ede\u4e2d\uff0c\u6700\u5927\u7684 \\(y\\) \u5ea7\u6a19</p> </li> </ul> <p>\\(q\\le 10^5\\)</p> <p>\u6211\u5011\u767c\u73fe\uff0c\u50b3\u7d71\u7684\u7dda\u6bb5\u6a39\u7121\u6cd5\u5f88\u597d\u5730\u7dad\u8b77\u9019\u6a23\u7684\u8cc7\u8a0a\u3002\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u674e\u8d85\u7dda\u6bb5\u6a39\u4fbf\u61c9\u904b\u800c\u751f\u3002\u6211\u5011\u5c0d\u503c\u57df\u958b\u7dda\u6bb5\u6a39\uff0c\u8b93\u4e00\u500b\u7dda\u6bb5\u6a39\u4e0a\u7684\u7bc0\u9ede\uff0c\u90fd\u7dad\u8b77\u76e1\u91cf\u597d\u7684\u76f4\u7dda\uff0c\u4f7f\u5f97\u8a72\u7bc0\u9ede\u7dad\u8b77\u7684\u5340\u9593\u4e2d\u9ede\u4ee3\u5165\u8a72\u76f4\u7dda\u5f8c\u5f97\u5230\u7684\u503c\u76e1\u91cf\u5927\u3002\u5177\u9ad4\u4f86\u8aaa\uff0cseg[i] \u5132\u5b58\u7684\u662f\uff0c\u53bb\u9664\u7956\u5148\u7bc0\u9ede\u5132\u5b58\u7684\u76f4\u7dda\u5f8c\uff0c\u5728\u9019\u500b\u5340\u6bb5\u7684 mid \u4f4d\u7f6e\u6578\u503c\u6700\u5927\u7684\u76f4\u7dda</p> <p></p> <p>\u5728\u5de6\u5716\u4e2d\uff0cmid \u4ee3\u5165 B \u7684\u503c\u5927\u65bc\u5e36\u5165 A \u7684\u503c\uff0c\u6839\u64da\u674e\u8d85\u7dda\u6bb5\u6a39\u7684\u7406\u5ff5\uff0c\u6211\u5011\u5f97\u8981\u7559\u4f4f B \u9019\u689d\u7dda\uff0c\u6b64\u6642\u554f\u984c\u5c31\u4f86 : \u90a3 A \u61c9\u8a72\u53bb\u54ea\u88e1\u5462 ? \u7e3d\u4e0d\u80fd\u62cb\u68c4\u6389\u5427 ?</p> <p>\u60f3\u60f3\u70ba\u4ec0\u9ebc A \u4e0d\u80fd\u62cb\u68c4\u6389\uff0c\u539f\u56e0\u5c31\u662f\u56e0\u70ba\u6709\u4eba\u9084\u8981\u7528\u5230\u5b83\uff0c\u800c\u9700\u8981\u7528\u5230 A \u7684\u9ede\u80af\u5b9a\u90fd\u5728 mid \u7684\u5de6\u908a\u3002\u6b64\u6642\uff0c\u6211\u5011\u53ea\u9808\u5c07 A \u50b3\u7d66\u5de6\u5340\u9593\u905e\u8ff4\u4e0b\u53bb\uff0c\u5c31\u4e0d\u7528\u64d4\u5fc3\u60f3\u7528 A \u7684\u9ede\u7528\u4e0d\u5230\u4ed6</p> <p>\u540c\u7406\uff0c\u82e5\u767c\u751f\u53f3\u5716\u7684\u60c5\u6cc1\uff0c\u6211\u5011\u5c31\u628a B \u50b3\u7d66\u53f3\u5340\u9593\uff0c\u5373\u53ef\u9054\u6210\u540c\u6a23\u6548\u679c\u3002</p> code <pre><code>void insert(Line L, int i = 1) {\n    int l = lo[i], r = hi[i];\n    if (l == r) {\n        if (L(l) &gt; seg[i](l)) seg[i] = L;\n        return;\n    }\n\n    int mid = (l + r) / 2;\n    // \u9810\u8a2d\u7bc0\u9ede\u4e0a\u5b58\u7684\u76f4\u7dda\u659c\u7387\u6bd4\u8f03\u5c0f\n    if (seg[i].a &gt; L.a) swap(seg[i], L);\n    // \u6839\u64da\u4ee3\u5165\u7684\u503c\uff0c\u770b\u54ea\u689d\u8981\u88ab\u5f80\u4e0b\u50b3\n    if (seg[i](mid) &lt; L(mid)) {\n        swap(seg[i], L);\n        insert(L, 2 * i);\n    } else {\n        insert(L, 2 * i + 1);\n    }\n}\n</code></pre> <p>\u5c0d\u65bc query\uff0c\u6211\u5011\u53bb query path \u4e0a\u9762\u7684\u7bc0\u9ede\u53d6 min\uff0c\u56e0\u70ba\u5c0d\u65bc\u4e00\u500b\u7bc0\u9ede\uff0c\u9664\u4e86\u4ee3\u5165 mid \u6700\u5927\u7684\u90a3\u689d\u7dda\u4e4b\u5916\uff0c\u5176\u9918\u7684\u90fd\u6703\u88ab\u5f80\u4e0b\u50b3\uff0c\u800c\u6211\u5011\u53ea\u9700\u95dc\u5fc3\u73fe\u5728 query \u7684 x \u5728\u54ea\u908a\u5c31\u8003\u616e\u90a3\u908a\u7684\u5373\u53ef</p> code <pre><code>int query(int x, int i = 1) {\n        int l = lo[i], r = hi[i];\n        if (l == r) return seg[i](x);\n\n        int mid = (l + r) / 2;\n        if (x &lt;= mid) {\n            return max(seg[i](x), query(x, 2 * i));\n        } else {\n            return max(seg[i](x), query(x, 2 * i + 1));\n        }\n    }\n</code></pre> code <pre><code>struct Line {\n    int a, b;\n    int operator()(int x) const {\n        return a * x + b;\n    }\n};\n\nstruct LineContainer {\n    static constexpr int LIMIT = 1e6;\n    static constexpr int SIZE = LIMIT * 4;\n    static const int INF = 1e18;\n\n    vector&lt;int&gt; lo = vector&lt;int&gt;(SIZE);\n    vector&lt;int&gt; hi = vector&lt;int&gt;(SIZE);\n    vector&lt;Line&gt; seg = vector&lt;Line&gt;(SIZE, {0, -INF});\n\n    void build(int i = 1, int l = 1, int r = LIMIT) {\n        lo[i] = l;\n        hi[i] = r;\n        if (l == r) return;\n        int mid = (l + r) / 2;\n        build(2 * i, l, mid);\n        build(2 * i + 1, mid + 1, r);\n    }\n    void insert(Line L, int i = 1) {\n        int l = lo[i], r = hi[i];\n        if (l == r) {\n            if (L(l) &gt; seg[i](l)) seg[i] = L;\n            return;\n        }\n\n        int mid = (l + r) / 2;\n        if (seg[i].a &gt; L.a) swap(seg[i], L);\n        if (seg[i](mid) &lt; L(mid)) {\n            swap(seg[i], L);\n            insert(L, 2 * i);\n        } else {\n            insert(L, 2 * i + 1);\n        }\n    }\n    int query(int x, int i = 1) {\n        int l = lo[i], r = hi[i];\n        if (l == r) return seg[i](x);\n\n        int mid = (l + r) / 2;\n        if (x &lt;= mid) {\n            return max(seg[i](x), query(x, 2 * i));\n        } else {\n            return max(seg[i](x), query(x, 2 * i + 1));\n        }\n    }\n};\n</code></pre>"},{"location":"ds/li_chao_segment_tree/#_3","title":"\u4e8c\u3001\u7dda\u6bb5","text":"\u6d1b\u8c37 4097 [HEOI2013]Segment <p>\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6a19\u7cfb\u4e0b\u7dad\u8b77\u5169\u500b\u64cd\u4f5c\uff1a</p> <ol> <li>\u7d66\u5b9a\u4e00\u689d\u7dda\u6bb5\u7684\u5de6\u7aef\u9ede\u548c\u53f3\u7aef\u9ede\u3002</li> <li>\u7d66\u5b9a\u76f4\u7dda x = k\uff0c\u6c42\u8207\u6b64\u76f4\u7dda\u76f8\u4ea4\u7684\u7dda\u6bb5\u7684\u6700\u5927 y \u503c\u662f\u591a\u5c11\u3002</li> </ol> <p>\\(1 \\leq n \\leq 10^5, 1 \\leq k, x_0, x_1 \\leq 39989, 1 \\leq y_0, y_1 \\leq 10^9\\)</p> <p>\u56e0\u70ba\u9019\u984c\u7d66\u7684\u662f\u7dda\u6bb5\uff0c\u6240\u4ee5\u6211\u5011\u6c92\u6709\u8fa6\u6cd5\u50cf\u525b\u525b\u90a3\u6a23\u76f4\u63a5\u505a\u3002\u56e0\u70ba\u662f\u7dda\u6bb5\u6a39\uff0c\u6211\u5011\u8003\u616e\u5c07\u7dda\u6bb5\u62c6\u5206\u6210 log n \u500b\u5340\u9593\uff0c\u55ae\u7368\u89e3\u6c7a\u5b50\u554f\u984c\u3002</p>"},{"location":"ds/li_chao_segment_tree/#_4","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>IOIC 2023 \u9032\u968e\u8cc7\u6599\u7d50\u69cb</li> <li>https://robert1003.github.io/2020/02/06/li-chao-segment-tree.html</li> </ul>"},{"location":"ds/memory_pool/","title":"Memory pool","text":""},{"location":"ds/memory_pool/#_1","title":"\u4ecb\u7d39","text":"<p>\u5728\u9047\u5230\u8981\u53bb\u4e00\u76f4\u958b <code>new</code> \u6307\u6a19\u7684\u6642\u5019\uff08\u52d5\u614b\u958b\u9ede\uff09\uff0c\u82e5\u767c\u751f TLE \u7684\u60c5\u6cc1\uff0c\u800c\u8a18\u61b6\u9ad4\u9084\u5920\u7684\u60c5\u6cc1\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 Memory pool \u7684\u6280\u5de7\u3002\u56e0\u70ba\u96fb\u8166\u5728 <code>new</code> \u7684\u6642\u5019\u5fc5\u9808\u53bb\u96fb\u8166\u88e1\u9762\u627e\u5230\u7a7a\u7684\u8a18\u61b6\u9ad4\uff0c\u9019\u6703\u82b1\u6642\u9593\uff0c\u4e0d\u5982\u6211\u5011\u76f4\u63a5\u5148\u628a\u8a18\u61b6\u9ad4\u90fd\u958b\u597d\u76f4\u63a5\u7528\u3002</p>"},{"location":"ds/memory_pool/#_2","title":"\u7bc4\u4f8b","text":"<p>\u4ee5 CSES - Distinct Values Queries \u4f7f\u7528\u6301\u4e45\u5316\u7dda\u6bb5\u6a39\u70ba\u4f8b :</p> CSES - Distinct Values Queries <p>\u7d66\u4f60\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,...,a_n\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <ul> <li>\u8f38\u51fa \\(a_i,...,a_j\\) \u4e4b\u9593\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684\u6578\u5b57</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r, sum = 0;\n\n    Node() {\n    }\n\n    Node(int l, int r) : l(l), r(r) {\n    }\n\n    void pull() {\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n};\n\nNode pool[500000000 / sizeof(Node)];\nint cnt = 0;\n\nstruct DS {\n    DS(const vector&lt;int&gt;&amp; v) {\n        n = v.size();\n        roots = vector&lt;Node*&gt;(n + 1, nullptr);\n        int maxv = *max_element(ALL(v));\n        last = vector&lt;int&gt;(maxv + 1, -1);\n        roots[0] = build(0, n - 1);\n        for (int i = 0; i &lt; n; i++) {\n            if (last[v[i]] != -1) {\n                roots[i + 1] = update(roots[i], last[v[i]], 0);\n                roots[i + 1] = update(roots[i + 1], i, 1);\n            } else {\n                roots[i + 1] = update(roots[i], i, 1);\n            }\n            last[v[i]] = i;\n        }\n    }\n\n    int query(int l, int r) {\n        return query_sum(roots[r], l - 1, r - 1);\n    }\n\n   private:\n    int n;\n    vector&lt;Node*&gt; roots;\n    vector&lt;int&gt; last;\n    // \u55ae\u9ede\u6539\u503c \u5340\u9593\u67e5\u8a62\n\n    Node* build(int l, int r) {\n        Node* root = new (&amp;pool[cnt++]) Node(l, r);\n        if (l == r) {\n            return root;\n        }\n        int mid = (l + r) / 2;\n        root-&gt;lc = build(l, mid);\n        root-&gt;rc = build(mid + 1, r);\n        root-&gt;pull();\n        return root;\n    }\n\n    Node* update(const Node* root, int pos, int val) {\n        Node* now = new (&amp;pool[cnt++]) Node(*root);\n        if (now-&gt;l == now-&gt;r) {\n            now-&gt;sum = val;\n            return now;\n        }\n\n        if (pos &lt;= now-&gt;lc-&gt;r) {\n            now-&gt;lc = update(now-&gt;lc, pos, val);\n        } else {\n            now-&gt;rc = update(now-&gt;rc, pos, val);\n        }\n        now-&gt;pull();\n        return now;\n    }\n\n    int query_sum(const Node* root, int qL, int qR) {\n        if (root-&gt;r &lt; qL || qR &lt; root-&gt;l) return 0;\n        if (qL &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qR) {\n            return root-&gt;sum;\n        }\n        return query_sum(root-&gt;lc, qL, qR) + query_sum(root-&gt;rc, qL, qR);\n    }\n};\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    vector&lt;int&gt; b = a;\n    sort(ALL(b));\n    for (int i = 0; i &lt; n; i++) {\n        a[i] = lower_bound(ALL(b), a[i]) - b.begin();\n    }\n\n    DS ds(a);\n    while (q--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        cout &lt;&lt; ds.query(l, r) &lt;&lt; '\\n';\n    }\n}\n</code></pre> <p>\u9019\u984c\u7684\u8a18\u61b6\u9ad4\u9650\u5236\u662f 512 MB\uff08MB \u662f Millions Byte\uff09\u3002<code>Node pool[500000000 / sizeof(Node)]</code>\uff0c500MB / \u4e00\u500b node \u4f54\u7528\u5e7e\u500b byte \u5c31\u53ef\u4ee5\u5f97\u5230\u7e3d\u5171\u80fd\u958b\u591a\u5c11 node\uff0csizeof \u53ef\u4ee5\u770b\u4e00\u500b Node \u4f54\u591a\u5c11 byte</p> <p>\u88e1\u9762 <code>Node* now = new (&amp;pool[cnt++]) Node(*root);</code> \u7684\u8a9e\u6cd5\u53eb\u505a placement new\uff0c\u76f4\u63a5\u6307\u5b9a\u8a18\u61b6\u9ad4\u4f4d\u5740</p>"},{"location":"ds/monotonous-stack/","title":"\u55ae\u8abf\u968a\u5217","text":""},{"location":"ds/monotonous-stack/#stack","title":"\u55ae\u8abf stack","text":"\u9762\u8a66\u984c <p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u6570\u5217, \u627e\u51fa\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u4ed6\u5927\u7684\u6570</p> <p>\\(O(n)\\)</p> \u601d\u8def <p>https://blog.csdn.net/weixin_36888577/article/details/88724916</p>"},{"location":"ds/monotonous-stack/#queue","title":"\u55ae\u8abf queue","text":"LeetCode 239. Sliding Window Maximum <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 a[1], ..., a[n]\uff0c\u548c k\uff0c\u627e\u51fa\u6240\u6709\u9023\u7e8c k \u9805\u7684\u6700\u5927\u503c</p> <p>\\(n\\le 10^5\\)</p> code <pre><code>vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n    vector&lt;int&gt; ret;\n    deque&lt;int&gt; dq;\n    for (int i = 0; i &lt; nums.size(); i++) {\n        if (dq.size() &amp;&amp; dq.front() &lt;= i - k) {\n            dq.pop_front();  // \u5c07\u904e\u671f\u5143\u7d20\u79fb\u9664\n        }\n        while (dq.size() &amp;&amp; nums[i] &gt;= nums[dq.back()]) {\n            dq.pop_back();  // \u5c07\u968a\u5c3e\u7528\u4e0d\u4e0a\u7b54\u6848\u79fb\u9664\n        }\n        dq.push_back(i);\n        if (i &gt;= k - 1) {\n            ret.push_back(nums[dq.front()]);  // \u4ee5 i \u70ba\u7d50\u5c3e\u9577\u5ea6\u70ba k \u7684\u6975\u503c\n        }\n    }\n    return ret;\n}\n</code></pre> CF 372 C. Watching Fireworks is Fun <p>\u6709 \\(n\\) \u500b\u4f4d\u7f6e\uff0c\u6709 \\(m\\) \u500b\u7159\u82b1\u8981\u653e\uff0c\u6bcf\u79d2\u9418\u53ef\u4ee5\u79fb\u52d5 \\(d\\) \u9577\u5ea6\u7684\u8ddd\u96e2\uff0c\u6bcf\u500b\u7159\u82b1\u653e\u51fa\u7684\u5730\u9ede\u548c\u6642\u9593\u5206\u5225\u70ba \\(a_i\\) \u548c \\(t_i\\)\uff0c\u5982\u679c\u5728\u7159\u82b1\u653e\u51fa\u6642\u4f60\u6240\u5728\u4f4d\u7f6e\u70ba \\(x\\) \u90a3\u9ebc\u5f97\u5230\u7684\u5feb\u6a02\u503c\u70ba \\(b_i-|a_i-x|\\)\uff0c\u554f\u4f60\u80fd\u5f97\u5230\u7684\u6700\u5927\u5feb\u6a02\u503c\u662f\u591a\u5c11\uff1f</p> <p>\\(n\\le 1.5\\times 10^5,m\\le 300, b_i,t_i\\le 10^9\\)</p> \u601d\u8def <p>\u8a2d\u770b\u7b2c \\(i\\) \u6b21\u7159\u82b1\u6642\u6240\u5728\u4f4d\u7f6e\u70ba \\(j\\)\uff0c\u90a3\u9ebc\u8f49\u79fb\u65b9\u7a0b\u70ba </p> \\[dp[i][j]=\\max\\{ dp[i-1][k] + b_i-|a_i-j|\\}\\] <p>\u5176\u4e2d \\(k\\in [ j-d\\times (t_i-t_{i-1}), j+d\\times (t_i-t_{i-1}) ]\\)\u3002\u90a3\u5c31\u7b49\u50f9\u65bc\u5c0d\u6bcf\u4e00\u6b21\u7159\u82b1\u7684\u6bcf\u4e00\u500b\u4f4d\u7f6e \\(j\\) \u6211\u5011\u90fd\u8981\u6c42\u9577\u5ea6\u70ba \\(2\\times d\\times t_i\\) \u5340\u9593\u5167\u7684\u6700\u5927\u503c\uff0c\u90a3\u9ebc\u554f\u984c\u53c8\u8b8a\u6210\u6c42\u6ed1\u52d5\u7a97\u53e3\u5167\u7684\u6700\u5927\u503c\u3002\u6ce8\u610f\u9019\u88e1\u7684\u7a97\u53e3\u9577\u5ea6\u6709\u5de6\u53f3\u5169\u90e8\u5206\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define F first\n#define S second\nusing namespace std;\n\nconst int MAXN = 15e4 + 5;\n\nstruct Node {\n    int t, a, b;\n};\n\nint n, m, d;\nNode v[MAXN];\nint dp[MAXN], tmp[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;\n    for (int i = 1; i &lt;= m; i++) {\n        auto &amp;[t, a, b] = v[i];\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; t;\n    }\n    sort(v + 1, v + m + 1);\n    int last = 0;\n    for (int i = 1; i &lt;= m; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            tmp[j] = dp[j];\n            dp[j] = 0;\n        }\n        auto [t, a, b] = v[i];\n\n        int rp = 0;\n        deque&lt;pair&lt;int, int&gt;&gt; st;\n        for (int j = 1; j &lt;= n; j++) {\n            int L = max(1ll, j - 1ll * (t - last) * d), R = min(n, j + 1ll * (t - last) * d);\n            while (rp &lt; R) {\n                rp++;\n                while (st.size() &amp;&amp; tmp[rp] &gt;= st.back().S) {\n                    st.pop_back();\n                }\n                st.push_back({rp, tmp[rp]});\n            }\n            while (st.front().F &lt; L) st.pop_front();\n            dp[j] = st.front().S;\n        }\n        for (int j = 1; j &lt;= n; j++) {\n            dp[j] += b - abs(a - j);\n        }\n        last = t;\n    }\n    cout &lt;&lt; *max_element(dp + 1, dp + n + 1) &lt;&lt; '\\n';\n}\n</code></pre> Zerojudge c528. \u76f8\u9694\u5c0f\u65bc\u4e00\u5b9a\u8ddd\u96e2\u6700\u5c0f\u7e3d\u548c\u5b50\u5e8f\u5217 <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u6574\u6578\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u53ca\u4e00\u500b\u6b63\u6574\u6578 \\(k\\)\uff0c\u8acb\u84cb\u6389\u4efb\u610f\u500b\u6578\u5b57\u4f7f\u5f97\u539f\u5e8f\u5217\u4e2d\u4efb\u610f\u7684\u9023\u7e8c \\(k\\) \u500b\u6578\u5b57\u90fd\u81f3\u5c11\u6709\u4e00\u500b\u6578\u5b57\u88ab\u84cb\u6389\u4e86\uff0c\u554f\u84cb\u6389\u7684\u6578\u5b57\u7684\u7e3d\u548c\u6700\u5c0f\u70ba\u591a\u5c11</p> <p>\\(n\\le 10^6, -10^9\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>dp(i) = 1..i \u5408\u6cd5\u7684\u7b54\u6848</p> <p>dp(i) = max{dp(j) + a[i]} | i - k &lt;= j &lt; i</p> <p>\u7528\u55ae\u8abf\u5c0d\u5217\u7dad\u8b77\uff0c\u6b65\u9a5f\u70ba:</p> <ul> <li> <p>\u522a\u6389\u904e\u671f\u7684\u5143\u7d20</p> </li> <li> <p>\u8a08\u7b97 dp(i)</p> </li> <li> <p>\u7528 dp(i) \u4f86\u66f4\u65b0\u55ae\u8abf queue</p> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 1e6 + 5;\nconst int INF = 0x3f3f3f3f;\nint n, k;\nint a[MAXN];\nint dp[MAXN];\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; k;\n    deque&lt;int&gt; dq;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        while (dq.size() &amp;&amp; dq.front() &lt; i - k) {\n            dq.pop_front();\n        }\n        if (i &lt; k) {\n            dp[i] = a[i];\n            if (dq.size() &amp;&amp; dp[dq.front()] &lt; 0) dp[i] += dp[dq.front()];\n        } else {\n            dp[i] = dp[dq.front()] + a[i];\n        }\n        while (dq.size() &amp;&amp; dp[dq.back()] &gt;= dp[i]) {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n    }\n    cout &lt;&lt; dp[dq.front()];\n}\n</code></pre>"},{"location":"ds/monotonous-stack/#stack_1","title":"\u985e\u4f3c stack \u7684\u7dad\u8b77\u904e\u7a0b","text":"JOI 2023 Stone Arranging 2 <p>\u4f9d\u5e8f\u7d66 \\(n\\) \u500b \\(a_i\\)\uff0c\u7576 \\(i\\) \u52a0\u5165\u6642\uff0c\u4ee4 \\(j\\) \u70ba index \u6700\u5927\u4e14 \\(a_j=a_i\\)\uff0c\u82e5\u5b58\u5728\uff0c\u5247\u5c07 \\(a_i,\\ldots ,a_j\\) \u90fd\u8a2d\u70ba \\(a_i\\)\uff0c\u8f38\u51fa\u6700\u5f8c\u7684 \\(a_1, \\ldots ,a_n\\) </p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u3010\u89c0\u5bdf\u3011: \u5f9e \\([j,i]\\) \u90fd\u6703\u88ab \\(i\\) \u652f\u914d\uff0c\u4e5f\u5c31\u662f\u82e5 \\(i\\) \u6539\u8b8a\u984f\u8272 \\([j, i]\\) \u4e5f\u6703\u8ddf\u8457\u6539\u8b8a\u6210\u540c\u4e00\u7a2e\u984f\u8272</p> <p>\u6240\u4ee5\u5176\u5be6\u6211\u5011\u53ef\u4ee5\u53ea\u8a18\u9304\u9019\u4e9b\u652f\u914d\u5225\u4eba\u7684 \\(i\\)\uff0c\u985e\u4f3c\u55ae\u8abf stack\u3002\u6bcf\u6b21\u52a0\u5165\u65b0\u7684 \\(i\\) \u7684\u6642\u5019\uff0cpop \u5f8c\u9762\u76f4\u5230\u78b0\u5230\u540c\u6a23\u984f\u8272\u70ba\u6b62\uff0c\u9084\u8981\u518d\u958b\u4e00\u500b bool \u9663\u5217\u7d00\u9304\u524d\u9762\u662f\u5426\u6709\u51fa\u73fe\u904e\u540c\u6a23\u7684\u984f\u8272</p> CF 1886 C. Decreasing String <p>\u7d66\u4e00\u500b\u5b57\u4e32 \\(s\\)\uff0c\u6bcf\u6b21\u6703\u5c07 \\(s\\) \u79fb\u9664\u4e00\u500b\u5b57\u5143\uff0c\u4f7f\u5269\u4e0b\u7684 \\(s\\) \u5b57\u5178\u5e8f\u6700\u5c0f\u3002\u5c07\u9019\u500b\u904e\u7a0b\u7684 \\(s\\) \u4f75\u8d77\u4f86\uff0c\u554f\u7b2c \\(k\\) \u9805\u662f\u591a\u5c11</p> <p>\\(1\\le |s| \\le 10^6,s\\) \u70ba a-z</p> \u601d\u8def <p>\u6211\u5011\u5148\u6c42\u6700\u5f8c\u4e00\u500b\u4f75\u8d77\u4f86\u7684 \\(s\\) \u7684\u9577\u5ea6\u6703\u662f\u591a\u5c11</p> <p>\u4f9d\u7167\u5b57\u5178\u5e8f\u7684\u5b9a\u7fa9 : \u5b58\u5728\u4e00\u500b\u6700\u5c0f\u7684 index \\(i\\) \u6eff\u8db3 \\(a_i&lt;b_i\\)\uff0c\u6211\u5011\u73fe\u5728\u5f9e\u5de6\u5f80\u53f3\u770b\uff0c\u82e5\u767c\u73fe\u7576\u524d\u7684\u5143\u7d20\u90fd\u662f\u905e\u589e\u7684\uff0c\u90a3\u9ebc\u6211\u5011\u5c07\u6700\u5f8c\u4e00\u500b\u5143\u7d20\u522a\u9664\u6703\u662f\u6700\u597d\u7684\uff0c\u56e0\u70ba\u5982\u679c\u522a\u9664\u5176\u4ed6\u5143\u7d20\u6703\u4f7f\u5927\u7684\u88ab\u5f80\u524d\u63a8 ; \u82e5\u767c\u73fe\u7576\u524d\u5143\u7d20\u6709\u4e00\u500b\u7a81\u7136\u905e\u6e1b\uff0c\u90a3\u6211\u5011\u76e1\u91cf\u5c07\u9019\u500b\u5143\u7d20\u79fb\u5f80\u958b\u982d\u6703\u662f\u6700\u597d\u7684\uff0c\u6240\u4ee5\u9019\u500b\u904e\u7a0b\u53ef\u7528\u55ae\u8abf stack \u4f86\u7dad\u8b77</p> POI 2013 Take out <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u767d\u8272\u662f\u9ed1\u8272\u7684 \\(k\\) \u500d\uff0c\u6c42\u4e00\u500b\u6d88\u9664\u5e8f\u5217\uff0c\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6: </p> <ul> <li> <p>\u6bcf\u6b21\u6d88\u9664 \\(k + 1\\) \u500b\u78da\uff0c\u5176\u4e2d \\(k\\) \u584a\u767d\u8272\uff0c\\(1\\) \u584a\u9ed1\u8272</p> </li> <li> <p>\u4e26\u4e14\u9019 \\(k + 1\\) \u584a\u78da\u5f9e\u958b\u59cb\u5230\u7d50\u675f\uff0c\u4e2d\u9593\u4e0d\u80fd\u7d93\u904e\u5df2\u7d93\u6d88\u9664\u904e\u7684\u78da\u584a</p> </li> </ul> <p>\u8f38\u51fa\u65b9\u6848\uff0c\u6578\u64da\u4fdd\u8b49\u6709\u89e3\u3002</p> <p>\\(2\\le n\\le 10^6, 1\\le k\\le n - 1\\)</p> \u601d\u8def <p>\u5be6\u969b\u6a21\u64ec\u4e00\u6b21\uff0c\u6703\u767c\u73fe\u6709\u9ede\u985e\u4f3c\u4e00\u500b\u5206\u6cbb\u7684\u611f\u89ba\uff0c\u4f46\u4e0d\u597d\u601d\u8003\u3002\u65bc\u662f\u6211\u5011\u9006\u5411\u8003\u616e\uff0c\u8003\u616e\u6700\u5f8c\u4e00\u6b21\u522a\u9664\u4e00\u5b9a\u662f\u9023\u7e8c\u7684\u5340\u9593\uff0c\u522a\u9664\u5f8c\u5c31\u8b8a\u6210\u5b50\u554f\u984c\u3002\u4f8b\u5982\u7bc4\u4f8b\u6e2c\u8cc7\u5c0d\u61c9\u7684\u5c31\u662f <code>[c[c[bcb]bb]bb][bcb]</code>\u3002\u540c\u6642\uff0c\u53ef\u4ee5\u767c\u73fe\uff0c\u53ea\u8981\u6eff\u8db3\u767d\u8272\u662f\u9ed1\u8272\u7684 k \u500d\uff0c\u5c31\u4e00\u5b9a\u6709\u89e3\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 stack \u4f86\u7dad\u8b77\uff0c\u4e00\u65e6\u7b26\u5408\u689d\u4ef6\u6642\uff08\u767d\u8272\u6709 k \u500b\uff0c\u9ed1\u8272\u6709 1 \u500b\uff09\uff0c\u5c31\u522a\u6389 stack \u5c3e\u7aef\u7684 k + 1 \u9805\uff0c\u6700\u5f8c\u9006\u5e8f\u8f38\u522a\u9664\u7684\u9806\u5e8f\u5373\u53ef</p> <p>\u8b49\u660e: \u5982\u679c\u4e0d\u80fd\u522a\uff0c\u5247\u6bcf\u500b\u9ed1\u8272\u76f8\u9130\u7684\u767d\u8272\u90fd &lt; k\uff0c\u90a3\u9ebc\u767d\u8272\u7e3d\u6578\u5c31 &lt; k * \u9ed1\u8272\uff0c\u77db\u76fe\u3002</p> code <pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nchar a[1000001];\nint n, top, sum[1000001], stack[1000001];\nint k, cnt, ans[1000001];\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; a + 1;\n    for (int i = 1; i &lt;= n; i++) {\n        stack[++top] = i;\n        sum[top] = sum[top - 1] + (a[i] == 'c');\n        if (top &gt;= k + 1 &amp;&amp; sum[top] - sum[top - k - 1] == 1) {\n            for (int j = top; j &gt;= top - k; j--) {\n                ans[++cnt] = stack[j];\n            }\n            top -= (k + 1);\n        }\n    }\n    for (int i = n; i &gt;= 1; i--) {\n        cout &lt;&lt; ans[i] &lt;&lt; ' ';\n        if (i % (k + 1) == 1) {\n            cout &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"ds/pb_ds/","title":"pb_ds","text":""},{"location":"ds/pb_ds/#_1","title":"\u5ba3\u544a","text":"\u5982\u679c\u8981\u5728 set \u67e5\u8a62\u5e7e\u500b\u6578\u5b57\u6bd4 x \u9084\u5c0f\uff0c\u4e0d\u80fd\u7528 st.lower_bound(x) - st.begin() + 1\uff0c\u8981\u7528\u4ec0\u9ebc\u6bd4\u8f03\u597d\uff0c\u9084\u662f\u505a\u4e0d\u5230? <p>\u7b54\u6848\u662f\u505a\u4e0d\u5230\u7684\uff0c\u96d6\u7136\u7db2\u8def\u4e0a\u6709\u5beb distance \u51fd\u5f0f\u80fd\u505a\u5230\u9019\u4ef6\u4e8b\u60c5\uff0c\u4f46\u8907\u96dc\u5ea6\u662f O(n) \u7684\uff0c\u6703\u592a\u6162\u3002\u9019\u7a2e\u60c5\u6cc1\u4e0b\u6700\u597d\u9084\u662f\u4f7f\u7528 pbds\u3002</p> code <pre><code>// include pbds \u5957\u4ef6\n#include &lt;bits/extc++.h&gt;\n// \u8a2d\u5b9a\u547d\u540d\u7a7a\u9593\nusing namespace __gnu_pbds;\n// \u7c21\u7a31 pb_ds::tree\n\ntemplate &lt;typename T&gt;\nusing rank_set = tree&lt;T, null_type, std::less&lt;T&gt;, rb_tree_tag,\n                                           tree_order_statistics_node_update&gt;;\n</code></pre>"},{"location":"ds/pb_ds/#_2","title":"\u529f\u80fd","text":"<ul> <li> <p><code>find_by_order(k)</code> :  \u56de\u50b3\u7b2c k\uff080-base\uff09 \u5c0f\u7684\u5143\u7d20 \u7684\u5730\u5740</p> </li> <li> <p><code>order_of_key (x)</code> : \u56de\u50b3\u6bd4 x strictly smaller \u7684\u500b\u6578</p> </li> </ul> <p>\u6642\u9593\u8907\u96dc\u5ea6\u90fd\u662f \\(O(\\log n)\\)</p>"},{"location":"ds/pb_ds/#_3","title":"\u7bc4\u4f8b","text":"code <pre><code>int main() {\n    rank_set&lt;int&gt; s;\n    s.insert(4);  // {4}    \n    s.insert(1);   // {1, 4}    \n    s.insert(9);   // {1, 4, 9}    \n\n    cout &lt;&lt; *s.find_by_order(0) &lt;&lt; '\\n';  // 1   \n    cout &lt;&lt; s.order_of_key(4) &lt;&lt; '\\n';  // 1    \n\n    s.erase(1);  // {4, 9}    \n    cout &lt;&lt; *s.find_by_order(0) &lt;&lt; '\\n';  // 4\n}\n</code></pre>"},{"location":"ds/pb_ds/#_4","title":"\u4f8b\u984c","text":"pb_ds - rank tree LOJ #104. \u666e\u901a\u5e73\u8861\u6811 <p>\u5be6\u4f5c pb_ds::tree\uff0c\u652f\u63f4\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u63d2\u5165 \\(x\\)</li> <li>\u522a\u9664 \\(x\\)</li> <li>\u67e5\u8a62 \\(x\\) \u7684\u662f\u7b2c\u5e7e\u5c0f</li> <li>\u67e5\u8a62\u7b2c \\(k\\) \u5c0f\u7684\u6578</li> <li>\u6c42\u5c0f\u65bc \\(x\\)\uff0c\u6700\u5927\u7684\u6578</li> <li>\u6c42\u5927\u65bc \\(x\\)\uff0c\u6700\u5c0f\u7684\u6578</li> </ol> <p>\\(1 \\leq n \\leq 10^5,|x|\\le 10^7\\)</p> code <pre><code>#include&lt;bits/stdc++.h&gt;\n#include&lt;bits/extc++.h&gt;\nusing namespace std;\nusing namespace __gnu_pbds;\ntypedef int64_t ll;\ntemplate&lt;typename T&gt; using rbt = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;\nint32_t main(){\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    int n;\n    rbt&lt;ll&gt; eek;\n    cin &gt;&gt; n;\n    for(ll opt, x; n; --n){\n        cin &gt;&gt; opt &gt;&gt; x;\n        if(opt == 1) eek.insert((x&lt;&lt;20) + n);\n        else if(opt == 2) eek.erase(eek.lower_bound(x&lt;&lt;20));\n        else if(opt == 3) cout &lt;&lt; eek.order_of_key(x&lt;&lt;20) + 1 &lt;&lt; '\\n';\n        else if(opt == 4) cout &lt;&lt; (*eek.find_by_order(x-1) &gt;&gt; 20) &lt;&lt; '\\n';\n        else if(opt == 5) cout &lt;&lt; (*--eek.lower_bound(x&lt;&lt;20) &gt;&gt; 20) &lt;&lt; '\\n';\n        else if(opt == 6) cout &lt;&lt; (*eek.lower_bound((x+1)&lt;&lt;20) &gt;&gt; 20) &lt;&lt; '\\n';\n    }\n    return 0;\n}\n</code></pre> <ul> <li> <p>CSES - List Removals</p> </li> <li> <p>CSES - Salary Queries</p> </li> <li> <p>CSES - Josephus Problem II</p> </li> </ul>"},{"location":"ds/pb_ds/#_5","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://fhvirus.github.io/blog/2021/pbds-tree/</p> </li> <li> <p>https://loj.ac/d/415</p> </li> </ul>"},{"location":"ds/persistent/","title":"\u6301\u4e45\u5316","text":"<p>\u76f8\u95dc\u77e5\u8b58 : </p> <ul> <li> <p>\u6301\u4e45\u5316 Treap</p> </li> <li> <p>\u6301\u4e45\u5316 DSU</p> </li> </ul> CSES - Range Queries and Copies <p>\u6709\u4e00\u500b\u9577\u5ea6 \\(n\\) \u9663\u5217\uff0c\\(q\\) \u7b46\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li> <p>\u5c0d\u65bc\u7b2c \\(k\\) \u500b\u9663\u5217\u55ae\u9ede\u6539\u503c</p> </li> <li> <p>\u5c0d\u65bc\u7b2c \\(k\\) \u500b\u9663\u5217\u5340\u9593\u6c42\u548c</p> </li> <li> <p>\u8907\u88fd\u7b2c \\(k\\) \u500b\u9663\u5217\uff0c\u4e26\u5c07\u5176\u6dfb\u52a0\u5230\u5217\u8868\u7684\u5c3e\u7aef</p> </li> </ul> <p>\\(n,q\\le 2\\times 10^5,a_i\\le 10^9\\)</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\n#define int long long\n\nusing namespace std;\n\nstruct Node {\n    int val = 0;\n    int l, r;  // range \u5de6\u53f3\u754c\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n\n    void pull() {\n        val = lc-&gt;val + rc-&gt;val;\n    }\n};\n\nNode* build(int l, int r) {\n    Node* root = new Node;\n    root-&gt;l = l;\n    root-&gt;r = r;\n    if (l == r) return root;\n\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    return root;\n}\n\n// return \u65b0\u7684 segment tree \u7684 root\nNode* update(const Node* root, int pos, int val) {\n    Node* now = new Node(*root);\n\n    if (now-&gt;l == now-&gt;r) {\n        now-&gt;val = val;\n        return now;\n    }\n    if (pos &lt;= now-&gt;lc-&gt;r) {\n        now-&gt;lc = update(root-&gt;lc, pos, val);\n    } else {\n        now-&gt;rc = update(root-&gt;rc, pos, val);\n    }\n    now-&gt;pull();\n    return now;\n}\n\nint query(const Node* root, int ql, int qr) {\n    if (ql &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qr) return root-&gt;val;\n    if (root-&gt;r &lt; ql || qr &lt; root-&gt;l) return 0;\n    return query(root-&gt;lc, ql, qr) + query(root-&gt;rc, ql, qr);\n}\n\nsigned main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    vector&lt;Node*&gt; roots(2);\n    roots[1] = build(1, n);\n    for (int i = 1; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        roots[1] = update(roots[1], i, x);\n    }\n\n    for (int cmd; cin &gt;&gt; cmd &amp;&amp; q &gt; 0; q--) {\n        if (cmd == 1) {\n            int k, pos, val;\n            cin &gt;&gt; k &gt;&gt; pos &gt;&gt; val;\n            roots[k] = update(roots[k], pos, val);\n        } else if (cmd == 2) {\n            int k, ql, qr;\n            cin &gt;&gt; k &gt;&gt; ql &gt;&gt; qr;\n            int ans = query(roots[k], ql, qr);\n            cout &lt;&lt; ans &lt;&lt; '\\n';\n        } else {  // cmd == 3\n            int k;\n            cin &gt;&gt; k;\n            roots.push_back(roots[k]);\n        }\n    }\n    return 0;\n}\n</code></pre> \u6d1b\u8c37 P3834 - \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 2 <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\\(q\\) \u7b46\u8a62\u554f</p> <ul> <li>\\(\\text{query(}a_l\\sim a_r,k):\\) \u56de\u7b54 \\(a_l\\sim a_r\\) \u4e2d\u7b2c \\(k\\) \u5c0f\u7684\u6578\u503c\u662f\u591a\u5c11</li> </ul> <p>\\(n,q\\le 2\\times 10^5,|a_i|\\le 10^9\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b \\(i\\) \u7dad\u8b77\u9663\u5217 \\(v_i\\)\uff0c\u5c0d\u65bc\u6bcf\u500b \\(v_i\\) \u5148\u7b49\u65bc \\(v_{i-1}\\)\uff0c\u7136\u5f8c\u518d\u5c07 \\(v_i[a_i]\\)++</p> <p> </p> <p>\u9019\u6a23\u554f\u4e00\u500b\u5340\u9593\u7684\u6642\u5019\u53ef\u5c07 \\(v_r-v_{l-1}\\) \u5f97\u5230\u4e00\u500b\u9663\u5217\uff0c\u5728\u4e0a\u9762 walk</p> <p> </p> <p>\u5be6\u4f5c\u4e0a\u56e0\u70ba 0-base \u7684\u6642\u5019 \\(l-1\\) \u6703\u662f\u8ca0\u7684\uff0c\u6240\u4ee5\u6211\u5011\u5c07 \\(v_i\\) \u7684 index \u5411\u53f3\u5e73\u79fb\uff08\u8a73\u898b\u4ee3\u78bc\uff09</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r, sum = 0;\n\n    Node(int l, int r) : l(l), r(r) {}\n\n    void pull() {\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n};\n\nstruct DS {\n    DS(const vector&lt;int&gt; &amp;v) { \n        // 0-base v\n        // 1-base roots\n        n = v.size();\n        roots = vector&lt;Node*&gt;(n + 1, nullptr);\n        int minv = *min_element(ALL(v));\n        int maxv = *max_element(ALL(v));\n        roots[0] = build(minv, maxv);\n        for (int i = 0; i &lt; n; i++) {\n            roots[i + 1] = update(roots[i], v[i], 1);\n        }\n    }\n\n    int query(int l, int r, int k) { // 1-base l, r\n        Node* p = roots[l - 1];\n        Node* q = roots[r];\n        while(q-&gt;l != q-&gt;r) {\n            int cntL = q-&gt;lc-&gt;sum - p-&gt;lc-&gt;sum;\n\n            if (cntL &lt; k) {\n                p = p-&gt;rc;\n                q = q-&gt;rc;\n                k -= cntL;\n            } else {\n                p = p-&gt;lc;\n                q = q-&gt;lc;\n            }\n        }\n        return q-&gt;l;\n    }\n    private:\n    int n;\n    vector&lt;Node*&gt; roots;\n\n    Node* build(int l, int r) {\n        Node* root = new Node(l, r);\n        if (l == r) {\n            return root;\n        }\n        int mid = (l + r) / 2;\n        root-&gt;lc = build(l, mid);\n        root-&gt;rc = build(mid + 1, r);\n        return root;\n    }\n\n    Node* update(const Node* root, int pos, int val) {\n        Node* now = new Node(*root);\n        if (now-&gt;l == now-&gt;r) {\n            now-&gt;sum += val;\n            return now;\n        }\n\n        if (pos &lt;= now-&gt;lc-&gt;r) {\n            now-&gt;lc = update(now-&gt;lc, pos, val);\n        } else {\n            now-&gt;rc = update(now-&gt;rc, pos, val);\n        }\n        now-&gt;pull();\n        return now;\n    }\n};\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    vector&lt;int&gt; b = a;\n    sort(ALL(b));\n    for (int i = 0; i &lt; n; i++) {\n        a[i] = lower_bound(ALL(b), a[i]) - b.begin();\n    }\n\n    DS ds(a);\n    while(q--) {\n        int l, r, k;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n        int rk = ds.query(l, r, k);\n        cout &lt;&lt; b[rk] &lt;&lt; '\\n';\n    }\n} \n</code></pre> CSES - Distinct Values Queries <p>\u7d66\u4f60\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,...,a_n\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <ul> <li>\u8f38\u51fa \\(a_i,...,a_j\\) \u4e4b\u9593\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684\u6578\u5b57</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u8ddf\u96e2\u7dda\u7b97\u6cd5\u7684\u5957\u8def\u5dee\u4e0d\u591a\u3002\u6309\u7167 \\(r_i\\) \u5c0f\u5230\u5927\u679a\u8209\uff0c\u7dad\u8b77\u6bcf\u500b\u6578\u5b57\u6700\u5f8c\u51fa\u73fe\u7684\u4f4d\u7f6e\u653e \\(1\\)\uff0c\u5176\u4ed6\u653e \\(0\\)\u3002\u9019\u500b\u53ef\u4ee5\u5c0d\u6bcf\u500b \\(r_i\\) \u4f7f\u7528\u6301\u4e45\u5316\u7dda\u6bb5\u6a39\u55ae\u9ede\u6539\u503c\u505a\u5230\uff0c\u8a62\u554f\u7684\u6642\u5019\u53ea\u8981\u53bb\u5c0d\u61c9\u7684 \\(\\texttt{roots}[r_i]\\) \u8a62\u554f\u5340\u9593\u548c\u5373\u53ef</p> \u5be6\u4f5c\u7d30\u7bc0 <p>\u58d3\u5e38</p> normal code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r, sum = 0;\n\n    Node(int l, int r) : l(l), r(r) {}\n\n    void pull() {\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n};\n\nstruct DS {\n    DS(const vector&lt;int&gt; &amp;v) {\n        n = v.size();\n        roots = vector&lt;Node*&gt;(n + 1, nullptr);\n        int maxv = *max_element(ALL(v));\n        last = vector&lt;int&gt;(maxv + 1, -1);\n        roots[0] = build(0, n - 1);\n        for (int i = 0; i &lt; n; i++) {\n            if (last[v[i]] != -1) {\n                roots[i + 1] = update(roots[i], last[v[i]], 0);\n                roots[i + 1] = update(roots[i + 1], i, 1);\n            } else {\n                roots[i + 1] = update(roots[i], i, 1);\n            }\n            last[v[i]] = i;\n        }\n    }\n\n    int query(int l, int r) {\n        return query_sum(roots[r], l - 1, r - 1);\n    }\n\n    private:\n    int n;\n    vector&lt;Node*&gt; roots;\n    vector&lt;int&gt; last;\n    // \u55ae\u9ede\u6539\u503c \u5340\u9593\u67e5\u8a62\n\n    Node* build(int l, int r) {\n        Node* root = new Node(l, r);\n        if (l == r) {\n            return root;\n        }\n        int mid = (l + r) / 2;\n        root-&gt;lc = build(l, mid);\n        root-&gt;rc = build(mid + 1, r);\n        root-&gt;pull();\n        return root;\n    }\n\n    Node* update(const Node* root, int pos, int val) {\n        Node* now = new Node(*root);\n        if (now-&gt;l == now-&gt;r) {\n            now-&gt;sum = val;\n            return now;\n        }\n\n        if (pos &lt;= now-&gt;lc-&gt;r) {\n            now-&gt;lc = update(now-&gt;lc, pos, val);\n        } else {\n            now-&gt;rc = update(now-&gt;rc, pos, val);\n        }\n        now-&gt;pull();\n        return now;\n    }\n\n    int query_sum(const Node* root, int qL, int qR) {\n        if (root-&gt;r &lt; qL || qR &lt; root-&gt;l) return 0;\n        if (qL &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qR) {\n            return root-&gt;sum;\n        }\n        return query_sum(root-&gt;lc, qL, qR) + query_sum(root-&gt;rc, qL, qR);\n    }\n};\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    vector&lt;int&gt; b = a;\n    sort(ALL(b));\n    for (int i = 0; i &lt; n; i++) {\n        a[i] = lower_bound(ALL(b), a[i]) - b.begin();\n    }\n\n    DS ds(a);\n    while(q--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        cout &lt;&lt; ds.query(l, r) &lt;&lt; '\\n';\n    }\n} \n</code></pre> AC code <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r, sum = 0;\n\n    Node() {\n    }\n\n    Node(int l, int r) : l(l), r(r) {\n    }\n\n    void pull() {\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n};\n\nNode pool[500000000 / sizeof(Node)];\nint cnt = 0;\n\nstruct DS {\n    DS(const vector&lt;int&gt;&amp; v) {\n        n = v.size();\n        roots = vector&lt;Node*&gt;(n + 1, nullptr);\n        int maxv = *max_element(ALL(v));\n        last = vector&lt;int&gt;(maxv + 1, -1);\n        roots[0] = build(0, n - 1);\n        for (int i = 0; i &lt; n; i++) {\n            if (last[v[i]] != -1) {\n                roots[i + 1] = update(roots[i], last[v[i]], 0);\n                roots[i + 1] = update(roots[i + 1], i, 1);\n            } else {\n                roots[i + 1] = update(roots[i], i, 1);\n            }\n            last[v[i]] = i;\n        }\n    }\n\n    int query(int l, int r) {\n        return query_sum(roots[r], l - 1, r - 1);\n    }\n\n   private:\n    int n;\n    vector&lt;Node*&gt; roots;\n    vector&lt;int&gt; last;\n    // \u55ae\u9ede\u6539\u503c \u5340\u9593\u67e5\u8a62\n\n    Node* build(int l, int r) {\n        Node* root = new (&amp;pool[cnt++]) Node(l, r);\n        if (l == r) {\n            return root;\n        }\n        int mid = (l + r) / 2;\n        root-&gt;lc = build(l, mid);\n        root-&gt;rc = build(mid + 1, r);\n        root-&gt;pull();\n        return root;\n    }\n\n    Node* update(const Node* root, int pos, int val) {\n        Node* now = new (&amp;pool[cnt++]) Node(*root);\n        if (now-&gt;l == now-&gt;r) {\n            now-&gt;sum = val;\n            return now;\n        }\n\n        if (pos &lt;= now-&gt;lc-&gt;r) {\n            now-&gt;lc = update(now-&gt;lc, pos, val);\n        } else {\n            now-&gt;rc = update(now-&gt;rc, pos, val);\n        }\n        now-&gt;pull();\n        return now;\n    }\n\n    int query_sum(const Node* root, int qL, int qR) {\n        if (root-&gt;r &lt; qL || qR &lt; root-&gt;l) return 0;\n        if (qL &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qR) {\n            return root-&gt;sum;\n        }\n        return query_sum(root-&gt;lc, qL, qR) + query_sum(root-&gt;rc, qL, qR);\n    }\n};\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    vector&lt;int&gt; b = a;\n    sort(ALL(b));\n    for (int i = 0; i &lt; n; i++) {\n        a[i] = lower_bound(ALL(b), a[i]) - b.begin();\n    }\n\n    DS ds(a);\n    while (q--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        cout &lt;&lt; ds.query(l, r) &lt;&lt; '\\n';\n    }\n}\n</code></pre> SPOJ COT <p>\u7d66\u5b9a\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u90fd\u6709\u4e00\u500b\u7de8\u865f\u3002\u73fe\u5728\u8981\u6c42\u5728\u7dda\u56de\u7b54 \\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\\(\\text{query}(u, v, k):\\) \u8f38\u51fa \\(u\\) \u5230 \\(v\\) \u4e4b\u9593\u7684\u8def\u5f91\u4e0a\u7b2c \\(k\\) \u5c0f\u7684\u9ede\u7de8\u865f\u3002</li> </ul> <p>\\(n,q\\le 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u70ba\u6bcf\u500b\u9802\u9ede\u7dad\u8b77\u4e00\u500b\u503c\u57df\u7dda\u6bb5\u6a39\uff0c\u8a18\u9304\u5f9e\u6839\u5230\u9019\u500b\u9802\u9ede\u7684\u8def\u5f91\u4e0a\u6bcf\u500b\u7de8\u865f\u7684\u51fa\u73fe\u6b21\u6578\u3002\u53ef\u4ee5\u767c\u73fe\u5982\u679c\u6211\u5011\u9019\u88e1\u501f\u52a9\u6301\u4e45\u5316\u6280\u8853\uff0c\u53ef\u4ee5\u4fdd\u8b49\u6642\u7a7a\u8907\u96dc\u5ea6\u70ba \\(O(n \\log n)\\)\u3002</p> <p>\u4e4b\u5f8c\u5c0d\u65bc\u6bcf\u500b\u8acb\u6c42\uff0c\u8a18 \\(rt=\\text{lca}(u,v)\\) \uff0c\\(par_{rt}\\) \u70ba \\(rt\\) \u5728\u6a39\u4e0a\u7684\u7236\u89aa\u3002\u90a3\u9ebc\u4e8c\u8005\u8def\u5f91\u4e0a\u7684\u7d71\u8a08\u95dc\u4fc2\u53ef\u4ee5\u901a\u904e \\(u+v\u2212rt\u2212par_{rt}\\)\uff08\u9019\u88e1\u8868\u793a\u7684\u7dda\u6bb5\u6a39\u7684\u52a0\u6e1b\u6cd5\uff09\u4f86\u7372\u5f97\u3002\u6211\u5011\u4e0d\u9700\u8981\u518d\u65b0\u84cb\u4e00\u9846\u7dda\u6bb5\u6a39\uff0c\u53ea\u9700\u8b93\u4ed6\u5011\u52a0\u6e1b\u7136\u5f8c\u5728\u4e0a\u9762\u4e8c\u5206\u5373\u53ef\uff0c\u9019\u6a23\u662f \\(O(\\log n)\\)</p> <p>\u7e3d\u7684\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O((n+q)\\log n)\\)</p> <p>\u53c3\u8003 : https://taodaling.github.io/blog/2019/09/10/%E6%A0%91%E4%B8%8A%E7%AE%97%E6%B3%95/#heading-%E6%A0%91%E4%B8%8A%E8%B7%AF%E5%BE%84%E7%BB%9F%E8%AE%A1%E9%97%AE%E9%A2%98</p> NPSC 2020 \u9ad8\u4e2d\u7d44\u6c7a\u8cfd pE. \u6392\u5217 <p>\u7d66\u4e00\u500b \\(1\\) \u5230 \\(n\\) \u7684\u6392\u5217 \\(p_0\\)\uff0c\u9084\u6709 \\(m-1\\) \u500b\u6392\u5217\uff0c\u7b2c \\(i\\) \u500b\u6392\u5217\u662f\u628a\u4e0a\u4e00\u500b\u6392\u5217\u7684\u7b2c \\(x_i\\) \u548c \\(y_i\\) \u9805\u4ea4\u63db\uff0c\u6c42\u5b57\u5178\u5e8f\u6392\u5e8f\u5f8c\u7684\u7d50\u679c\uff08\u8f38\u51fa\u7de8\u865f\uff09\u3002</p> <p>\\(2\\le n\\le 10^5, 1\\le m\\le 10^5\\)</p> \u601d\u8def <p>\u6a23\u628a\u6bcf\u4e00\u500b\u6392\u5217\u7576\u6210\u6642\u9593\uff0c\u4ea4\u63db\u7576\u6210\u5169\u500b\u55ae\u9ede\u4fee\u6539\uff0c\u7136\u5f8c\u5f04\u4e00\u68f5\u7dad\u8b77\u524d\u7db4 hash \u7684\u6301\u4e45\u5316\u7dda\u6bb5\u6a39\uff0c\u7b2c \\(i\\) \u500b\u7248\u672c\u5c31\u662f\u7b2c \\(i\\) \u500b\u6392\u5217\uff0c\u6bd4\u8f03\u5b57\u4e32\u6642\uff0c\u5728\u7dda\u6bb5\u6a39\u4e0a\u4e8c\u5206\u641c\u5169\u500b\u6392\u5217\u7684\u6700\u9577\u5171\u540c\u524d\u7db4\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u7528 \\(O(\\log n)\\) \u7684\u6642\u9593\u6bd4\u8f03\u6392\u5217\uff0c\u7e3d\u6642\u9593\u8907\u96dc\u5ea6\u6703\u662f \\(O(n\\log^2 n)\\)\u3002</p> <p>\u53c3\u8003\u81ea : https://www.wiwiho.me/2020/12/08/npsc2020final/#pE</p>"},{"location":"ds/prefix/","title":"\u524d\u7db4\u548c\u6280\u5de7","text":"<p>\u6253\u5728\u4e8c\u70ba\u5ea7\u6a19\u5e73\u9762</p> <p>2023 JOI pB</p> <p>\u526f\u937e\u9b54\u93e1</p> <p>2018 TOI p4</p> <p>https://oi-wiki.org/basic/prefix-sum/</p>"},{"location":"ds/prefix/#_1","title":"\u4e8c\u7dad\u524d\u7db4\u548c","text":"<pre><code>const int N = 505, M = 505;\nint n, m, a[N][M], pre[N][M];\n\nvoid build() {\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            pre[i][j] = pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1] + a[i][j];\n        }\n    }\n}\n\nint query(int i1, int j1, int i2, int j2) {\n    int sum = 0;\n    if (1 &lt;= i1 &amp;&amp; i1 &lt;= n &amp;&amp; 1 &lt;= i2 &amp;&amp; i2 &lt;= n &amp;&amp; 1 &lt;= j1 &amp;&amp; j1 &lt;= m &amp;&amp; 1 &lt;= j2 &amp;&amp; j2 &lt;= m) {\n        sum += pre[i2][j2] - pre[i2][j1 - 1] - pre[i1 - 1][j2] + pre[i1 - 1][j1 - 1];\n    } else {\n        return 0;\n    }\n    return sum;\n}\n</code></pre>"},{"location":"ds/prefix/#_2","title":"\u4e8c\u7dad\u5dee\u5206","text":"<pre><code>const int N = 505, M = 505;\nint n, m, a[N][M], pre[N][M];\n\nvoid add(int i1, int j1, int i2, int j2, int x) {\n    // \u5c07\u5de6\u4e0b\u89d2 (i1, j1) \u53f3\u4e0a\u89d2 (i2, j2) \u7684\u5340\u57df\u5167\u90fd\u52a0\u4e0a x\n    pre[i1][j1] += x;\n    pre[i2 + 1][j1] -= x;\n    pre[i1][j2 + 1] -= x;\n    pre[i2 + 1][j2 + 1] += x;\n}\n\nvoid build() {\n    // \u5dee\u5206\u5b8c\u5728\u505a\u4e00\u6b21\u524d\u7db4\u548c\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            pre[i][j] = pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1] + a[i][j];\n        }\n    }\n    // \u6b64\u6642 pre[i][j] \u5c31\u662f (i, j) \u4e0a\u9762\u7684\u6578\u5b57\n    // \u800c\u4e0d\u662f\u524d\u7db4\u5e8f\u5217\n}\n</code></pre>"},{"location":"ds/prefix/#_3","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>https://zhuanlan.zhihu.com/p/439268614</li> </ul>"},{"location":"ds/problem/","title":"\u984c\u76ee","text":"USACO 2021 December Contest, Silver Problem 3. Convoluted Intervals <p>\u7d66 \\(n\\) \u500b intervals \\((a_i,b_i)\\)\u3002\u554f\u5c0d\u65bc \\(k=0\\sim 2m\\) \u7684\u6bcf\u500b \\(k\\) \u554f\u6709\u591a\u5c11 pair \\((i,j)\\) \u6eff\u8db3 \\(a_i + a_j \\leq k \\leq b_i + b_j\\)</p> <p>\\(n\\le 2\\times 10^5,m\\le 5000,0\\le a_i,b_i \\le m\\)</p> \u601d\u8def <p>\u56e0\u70ba \\(m\\) \u53ea\u6709 \\(5000\\)\uff0c\u6211\u5011\u5c07\u958b\u4e00\u500b\u5927\u5c0f\u70ba \\(m\\) \u7684 vector\uff0c\u7b2c \\(x\\) \u683c\u5b58 \\(a_i=x\\) \u7684 \\(i\\) \u7684\u6578\u91cf\uff0c\u76f4\u63a5 \\(m^2\\) \u679a\u8209 vector \u88e1\u9762\u7684 index</p> <p>\u53c3\u8003\u81ea : https://www.usaco.org/current/data/sol_prob3_silver_dec21.html</p> code(from usaco) <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    cin.tie(0)-&gt;sync_with_stdio(0);\n    int N, M;\n    cin &gt;&gt; N &gt;&gt; M;\n    vector&lt;pair&lt;int, int&gt;&gt; ivals(N);\n    for (auto &amp;ival : ivals)\n        cin &gt;&gt; ival.first &gt;&gt; ival.second;\n    vector&lt;int64_t&gt; win_start(2 * M + 1), win_end(2 * M + 1);\n    {\n        vector&lt;int64_t&gt; a_freq(M + 1);\n        for (int i = 0; i &lt; N; ++i)\n            ++a_freq.at(ivals.at(i).first);\n        for (int i = 0; i &lt;= M; ++i)\n            for (int j = 0; j &lt;= M; ++j)\n                win_start.at(i + j) += a_freq.at(i) * a_freq.at(j);\n    }\n    {\n        vector&lt;int64_t&gt; b_freq(M + 1);\n        for (int i = 0; i &lt; N; ++i)\n            ++b_freq.at(ivals.at(i).second);\n        for (int i = 0; i &lt;= M; ++i)\n            for (int j = 0; j &lt;= M; ++j)\n                win_end.at(i + j) += b_freq.at(i) * b_freq.at(j);\n    }\n    int64_t win_count = 0;\n    for (int i = 0; i &lt;= 2 * M; ++i) {\n        win_count += win_start.at(i);\n        cout &lt;&lt; win_count &lt;&lt; \"\\n\";\n        win_count -= win_end.at(i);\n    }\n}\n</code></pre> CS Academy - Candles <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, ... ,a_n\\) \uff0c\u4f9d\u5e8f\u6709 \\(m\\) \u5929\uff0c\u7b2c \\(i\\) \u5929\u8981\u9078 \\(c_i\\) \u500b\u6578\u5b57\u6e1b\u4e00\uff0c\u554f\u6700\u591a\u80fd\u505a\u80fd\u6301\u7e8c\u5e7e\u5929</p> <p>\\(n, m \\le 10^5\\)</p> \u601d\u8def <p>greedy \u7b56\u7565\uff0c\u62ff\u6700\u5927\u7684 \\(c_i\\) \u500b\u51fa\u4f86\u6e1b\u4e00\u3002</p> <p>\u5148\u627e\u5230\u76ee\u524d\u7b2c \\(c_i\\) \u5927\u7684\u6578\u5b57 \\(x\\) </p> <ul> <li> <p>\u5927\u65bc \\(x\\) \u7684\u6240\u6709\u6578\u5b57\u90fd\u76f4\u63a5\u6e1b\u4e00</p> </li> <li> <p>\u5047\u8a2d\u6578\u5b57 \\(x\\) \u8981\u522a\u9664\u7684\u6578\u91cf\u662f \\(t\\)\uff0c\u627e\u5230\u6700\u5de6\u908a\u7684 \\(t\\) \u500b \\(x\\) \u62ff\u51fa\u4f86\u6e1b\u4e00</p> </li> </ul> <p>\u9019\u53ef\u4ee5\u7528\u7dda\u6bb5\u6a39\u4f86\u89e3\u6c7a</p> CF 1919 F1. Wine Factory (Easy Version) <p>\u6709\u5ea7\u6c34\u5854\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u5ea7\u5305\u542b \\(a_i\\) \u516c\u5347\u7684\u6c34\uff0c\u4e14\u64c1\u6709\u4e00\u500b\u80fd\u6d88\u9664 \\(b_i\\) \u516c\u5347\u6c34\u7684\u6cd5\u5e2b\u3002\u540c\u6642\uff0c\u76f8\u9130\u5169\u5ea7\u6c34\u5854\u4e4b\u9593\u64c1\u6709\u4e00\u9053\u95a5\u9580\uff0c\u7b2c \\(i\\) \u5ea7\u9ad8\u5854\u8207\u7b2c \\(i+1\\) \u5ea7\u6c34\u5854\u4e4b\u9593\u7684\u95a5\u9580\u5141\u8a31\u901a\u904e \\(c_i\\) \u5347\u6c34\u3002</p> <p>\u5c0d\u65bc\u7b2c \\(i=1,2,\\ldots ,n\\) \u5ea7\u5854\uff0c\u5c07\u6703\u9032\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ol> <li>\u6cd5\u5e2b\u5c07\u6c34\u5854 \\(i\\) \u4e2d\u6700\u591a \\(b_i\\) \u516c\u5347\u7684\u6c34\u6d88\u9664\uff0c\u4e26\u5c07\u6d88\u9664\u7684\u6c34\u8f49\u5316\u70ba\u7b49\u91cf\u7684\u7d05\u9152\u3002</li> <li>\u5982\u679c \\(i \\neq n\\)\uff0c\u90a3\u9ebc\u81f3\u591a \\(c_i\\) \u516c\u5347\u6c34\u53ef\u4ee5\u7531\u95a5\u9580\u6d41\u5230\u7b2c \\(i+1\\) \u5ea7\u6c34\u5854\u3002</li> </ol> <p>\u6709 \\(q\\) \u6b21\u55ae\u9ede\u4fee\u6539\uff0c\u6bcf\u6b21\u7d66\u51fa\u56db\u500b\u6578\u5b57 \\(p,x,y,z\\)\uff0c\u5373\u5c07 \\(a_p = x, b_p = y, c_p = z\\)\uff0c\u4e26\u8981\u6c42\u5c0d\u65bc\u6bcf\u6b21\u66f4\u65b0\uff0c\u8f38\u51fa\u6700\u591a\u80fd\u7372\u5f97\u591a\u5c11\u516c\u5347\u7d05\u9152\u3002</p> <p>\\(n\\le 5\\times 10^5, a_i \\le 10^9, c_i = 10^{18}, z = 10^{18}\\)</p> \u601d\u8def <p>\u56e0\u70ba \\(c_i, z\\) \u5747\u70ba \\(10^{18}\\)\uff0c\u90a3\u9ebc\u5982\u679c\u6c34\u5854\u4e2d\u7684\u6c34\u6c92\u6709\u88ab\u5168\u90e8\u6d88\u9664\uff0c\u5247\u5269\u4e0b\u7684\u6c34\u5747\u80fd\u6d41\u5230\u4e0b\u4e00\u5ea7\u9ad8\u5854\uff0c\u5373\u53ef\u4ee5\u4e0d\u8003\u616e \\(c_i\\) \u9019\u500b\u9650\u5236\u56e0\u7d20\u3002</p> <p>\u5148\u8003\u616e\u6bcf\u5ea7\u6c34\u5854\u672c\u8eab\u7121\u6cd5\u6d88\u9664\u7684\u6c34\u91cf\uff1a\\(v_i=a_i-b_i\\)\uff0c\u7576 \\(v_i &gt; 0\\) \u6642\uff0c\u672a\u88ab\u6d88\u9664\u7684\u6c34\u91cf\u5fc5\u7136\u9700\u8981\u7531\u5f8c\u9762\u7684\u6cd5\u5e2b\u4f86\u9032\u884c\u6d88\u9664\uff08\u5982\u679c\u53ef\u4ee5\u7684\u8a71\uff09\uff0c\u56e0\u6b64\u5c0d\u65bc\u6c34\u5854 \\(k\\) \u800c\u8a00\uff0c\u7121\u6cd5\u6d88\u9664\u7684\u6c34\u91cf\u5be6\u969b\u4e0a\u70ba \\(f(k)=\\sum \\limits_{i=k}^n v_i\\)\u3002\u90a3\u9ebc\u5c0d\u65bc\u6240\u6709\u6c34\u5854\u4f86\u8aaa\uff0c\u7121\u6cd5\u6d88\u9664\u7684\u6c34\u91cf\u5373\u70ba \\(\\max \\{ f(1), f(2), \\ldots ,f(n) \\}\\)\uff0c\u56e0\u70ba\u524d\u9762\u7684\u7121\u6cd5\u6d88\u9664\u5f8c\u9762\u7684\uff0c\u6240\u4ee5\u4e00\u65e6\u67d0\u500b\u5f8c\u7db4 \\(f(i)\\) \u5f88\u5927\u6642\uff0c\u90a3\u4e9b\u6c34\u5c31\u6703\u88ab\u7559\u5728\u9019\u500b\u6c34\u6876 \\(i\\)\u3002</p> <p>\u4f7f\u7528\u5f8c\u7db4\u548c\u5efa\u9020\u4e00\u68f5\u7dda\u6bb5\u6a39\uff0c\u7dad\u8b77\u5340\u9593\u4e0a\u7684\u6700\u5927\u503c\uff0c\u4e26\u4f7f\u7528\u8b8a\u6578 \\(\\text{sum}\\) \u8a18\u9304\u6c34\u5854\u7684\u7e3d\u6c34\u91cf\u3002</p> <p>\u6bcf\u6b21\u66f4\u65b0\u6c34\u5854 \\(p\\) \u6642\uff0c\u7531\u65bc\u7dda\u6bb5\u6a39\u7dad\u8b77\u7684\u662f\u5f8c\u7db4\u548c\uff0c\u90a3\u9ebc\u5c0d\u65bc\u6240\u6709 \\((p+1)\\sim n\\) \u4e0a\u7684\u9ede\uff0c\u90fd\u4e0d\u6703\u6536\u5230\u5f71\u97ff\uff0c\u53ea\u9700\u8981\u5c0d\u5340\u9593 \\([1, p]\\) \u9032\u884c\u66f4\u65b0\uff0c\u5148\u6e1b\u53bb\u539f\u672c\u7684 \\(v_p\\)\uff0c\u518d\u52a0\u4e0a\u76ee\u524d\u66f4\u65b0\u5f8c\u7684\u65b0 \\(v_p = x - y\\)\u3002</p> <p>\u90a3\u9ebc\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f \\(\\text{sum} - \\max \\{ f(1), f(2), \\ldots ,f(n) \\}\\)\uff0c\u5176\u4e2d \\(\\max \\{ f(1), f(2), \\ldots ,f(n) \\}\\) \u70ba\u7dda\u6bb5\u6a39\u4e0a\u7684\u8a0a\u606f\u3002</p> 2024 TOI \u6a21\u64ec\u8cfd I pC. \u2f29\u2f49\u2f7c\u5e2b\u7684\u8a0a\u606f\u8ffd\u8e64\u7cfb\u7d71 <p>\u7dad\u8b77\u4e00\u500b stack\uff0c\u7d66 q \u7b46\u64cd\u4f5c\uff0c\u5206\u5225\u6709\u4ee5\u4e0b\u5169\u7a2e:</p> <ul> <li> <p>\u52a0\u5165\u4e00\u500b\u65b0\u7684\u5143\u7d20\u81f3\u5806\u9802</p> </li> <li> <p>\u5c07\u4e00\u500b\u5143\u7d20\u79fb\u81f3\u5806\u9802</p> </li> </ul> <p>\u8f38\u51fa\u6bcf\u500b\u5143\u7d20\u5728\u5806\u88e1\u6700\u5927\u662f\u7b2c\u5e7e\u5c64</p> <p>\\(q \\le 10^6\\)</p> \u601d\u8def <p>\u5148\u770b subtask 2\uff08\u6bcf\u500b\u6578\u5b57\u90fd\u53ea\u79fb\u81f3\u5806\u9802\u4e00\u6b21\uff09\uff0c\u4e5f\u5c31\u662f\u7576\u4e00\u500b\u6578\u5b57 x \u88ab\u79fb\u5230\u5806\u9802\u5f8c\uff0c\u5f8c\u9762\u7684\u4efb\u4f55\u64cd\u4f5c\u90fd\u6703\u53bb\u8ca2\u737b x \u7684\u7b54\u6848\u3002\u56de\u5230\u6211\u5011\u539f\u672c\u7684\u554f\u984c\uff0c\u5982\u679c\u4e00\u500b\u6578\u5b57 y \u672c\u4f86\u5c31\u5df2\u7d93\u5728 x \u4e0a\u9762\uff0c\u90a3\u4ed6\u4e0d\u7ba1\u64cd\u4f5c\u591a\u5c11\u6b21\uff0c\u5c0d\u65bc x \u7684\u8ca2\u737b\u90fd\u662f 1\u3002\u6240\u4ee5\u6211\u5011\u5f97\u5230\u4e00\u500b\u7d50\u8ad6: \u5982\u679c x \u5728\u7b2c i, j \u500b query \u90fd\u88ab\u64cd\u4f5c\u4e86\uff0c\u90a3\u4ed6\u5728\u7b2c j \u500b query \u7684\u6642\u5019\u7684\u4f4d\u7f6e\u5c31\u662f</p> <p>      query(i + 1...j - 1) \u4e4b\u9593\u6709\u591a\u5c11\u4e0d\u91cd\u8907\u7684 index \u88ab\u64cd\u4f5c\u4e86 +1  </p>"},{"location":"ds/segment_tree/","title":"\u7dda\u6bb5\u6a39","text":""},{"location":"ds/segment_tree/#_1","title":"\u4ecb\u7d39","text":"<p>\u7dda\u6bb5\u6a39\u662f\u6f14\u7b97\u6cd5\u7af6\u8cfd\u4e2d\u5e38\u7528\u7684\u7528\u4f86\u7dad\u8b77 \u5340\u9593\u8cc7\u8a0a \u7684\u8cc7\u6599\u7d50\u69cb\u3002 \u7dda\u6bb5\u6a39\u53ef\u5728 \u7684\u6642\u9593\u8907\u96dc\u5ea6\u5167\u5be6\u73fe\u55ae\u9ede\u4fee\u6539\u3001\u5340\u9593\u4fee\u6539\u3001\u5340\u9593\u67e5\u8a62\uff08\u5340\u9593\u6c42\u548c\uff0c\u6c42\u5340\u9593\u6700\u5927\u503c\uff0c\u6c42\u5340\u9593\u6700\u5c0f\u503c\uff09\u7b49\u64cd\u4f5c\u3002</p>"},{"location":"ds/segment_tree/#_2","title":"\u7dda\u6bb5\u6a39\u57fa\u672c","text":"\u8a18\u61b6\u9ad4\u7a7a\u9593: 4n <p>\u5047\u8a2d\u7576\u524d\u7dda\u6bb5\u6a39\u70ba full binary tree\uff0c\u90a3\u9ebc\u7bc0\u9ede\u6578\u91cf\u5c31\u662f n + n/2 + n/4 + \u2026 + 1 = 2n - 1\u3002\u53ef\u662f\u7576\u67d0\u4e9b\u60c5\u6cc1\u7dda\u6bb5\u6a39\u6703\u5f80\u4e0b\u591a\u905e\u8ff4\u4e00\u5c64\uff0c\u4f8b\u5982\u4e0b\u9762\u9019\u500b case</p> <p> </p> <p>\u9019\u6642\u5c31\u6703\u662f\u70ba\u591a\u4e00\u5c64\u7684 full binary tree\uff0c\u7bc0\u9ede\u6578\u91cf\u70ba 2n + n + n/2 + n/4 + \u2026 + 1 = 4n - 1\u3002</p> Node \u8cc7\u8a0a <pre><code>struct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r;\n    int sum;\n\n    Node(int l, int r) : l(l), r(r) {\n        sum = 0;\n    }\n    void pull() { // \u5408\u4f75\u5de6\u7bc0\u9ede\u8207\u53f3\u7bc0\u9ede\u7684\u503c\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n};\n</code></pre> build <pre><code>Node* build(int l, int r) {\n    Node* root = new Node(l, r);\n    if (l == r) {\n        root-&gt;sum = a[l];\n        return root;\n    }\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    root-&gt;pull();\n    return root;\n}\n</code></pre> query <pre><code>int query(Node* root, int ql, int qr) {\n    if (qr &lt; root-&gt;l || root-&gt;r &lt; ql) {\n        return 0;\n    }\n    if (ql &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qr) {\n        return root-&gt;sum;\n    }\n    return query(root-&gt;lc, ql, qr) + query(root-&gt;rc, ql, qr);\n}\n</code></pre> update <pre><code>void update(Node* root, int pos, int val) {\n    if (root-&gt;l == root-&gt;r) {\n        root-&gt;sum = val;\n        return;\n    }\n    if (pos &lt;= root-&gt;lc-&gt;r) {\n        update(root-&gt;lc, pos, val);\n    } else {\n        update(root-&gt;rc, pos, val);\n    }\n    root-&gt;pull();\n}\n</code></pre>"},{"location":"ds/segment_tree/#_3","title":"\u61f6\u4eba\u6a19\u8a18","text":"\u5340\u9593\u4fee\u6539\u6642\uff0c\u76e1\u91cf\u4e0d\u8981\u8b93 0 \u8a2d\u70ba\u672a\u6539\u52d5\u7684\u72c0\u614b <p>\u82e5 chg != 0 \u624d\u6703\u6539\u52d5\uff0c\u90a3\u9ebc\u5982\u679c\u8981\u5c07\u4e00\u500b\u5340\u9593\u90fd\u8a2d\u70ba 0 \u5c31\u4e0d\u6703\u8dd1\u5230\u4e86\uff0c\u6240\u4ee5\u6700\u597d\u9084\u662f\u5c07 chg \u672a\u6539\u52d5\u7684\u72c0\u614b\u8a2d\u70ba INF\u3002</p> <p>\u53ef\u4ee5\u89c0\u5bdf\u5230\u591a\u500b\u5340\u9593\u64cd\u4f5c\u4e2d\u6709\u5f88\u591a\u91cd\u758a\u7684\u5340\u57df\uff0c\u91cd\u758a\u591a\u6b21\u7684\u5730\u65b9\u53ef\u4ee5\u5c07\u64cd\u4f5c\u5148\u6574\u7406\u8d77\u4f86\uff0c\u518d\u4e00\u8d77\u66f4\u65b0\uff0c\u6c92\u6709\u5fc5\u8981\u7d30\u5316\u5230\u6bcf\u500b\u8449\u5b50\u7d50\u9ede\uff0c\u53ea\u8981\u4fee\u6539\u5230\u8a72\u5340\u9593\u6240\u5c0d\u61c9\u7684\u90a3\u4e9b\u7bc0\u9ede</p> Node \u8cc7\u8a0a &amp; push <pre><code>struct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r;\n    int chg, sum;\n\n    Node(int l, int r) : l(l), r(r) {\n        chg = INF;\n        sum = 0;\n    }\n    void push() {\n        if (chg != INF) {\n            lc-&gt;chg = chg;\n            lc-&gt;sum = (lc-&gt;r - lc-&gt;l + 1) * chg;\n            rc-&gt;chg = chg;\n            rc-&gt;sum = (rc-&gt;r - rc-&gt;l + 1) * chg;\n            chg = INF;\n        } \n    }\n    void pull() {\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n};\n</code></pre> \u5340\u9593\u6539\u503c <pre><code>void update(Node* root, int ml, int mr, int val) {\n    if (mr &lt; root-&gt;l || root-&gt;r &lt; ml) {\n        return;\n    }\n    if (ml &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= mr) {\n        root-&gt;sum = (root-&gt;r - root-&gt;l + 1) * val;\n        root-&gt;chg = val;\n        return;\n    }\n    root-&gt;push();\n    update(root-&gt;lc, ml, mr, val);\n    update(root-&gt;rc, ml, mr, val);\n    root-&gt;pull();\n}\n</code></pre> \u5340\u9593\u67e5\u8a62\u7e3d\u548c <pre><code>int query(Node* root, int ql, int qr) {\n    if (qr &lt; root-&gt;l || root-&gt;r &lt; ql) {\n        return 0;\n    }\n    if (ql &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qr) {\n        return root-&gt;sum;\n    }\n    root-&gt;push();\n    return query(root-&gt;lc, ql, qr) + query(root-&gt;rc, ql, qr);\n}\n</code></pre>"},{"location":"ds/segment_tree/#walk","title":"\u7dda\u6bb5\u6a39 walk","text":"code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n\nusing namespace std;\n\nconst int MAXN = 2e5 + 5;\n\nstruct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r;\n    long long sum;\n\n    Node(int l, int r) : l(l), r(r) {\n        sum = 0;\n    }\n    void pull() {\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n};\n\nint n, q;\nint a[MAXN];\n\nNode* build(int l, int r) {\n    Node* root = new Node(l, r);\n    if (l == r) {\n        root-&gt;sum = a[l];\n        return root;\n    }\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    root-&gt;pull();\n    return root;\n}\n\nvoid update(Node* root, int pos, int val) {\n    if (root-&gt;l == root-&gt;r) {\n        root-&gt;sum = val;\n        return;\n    }\n    if (pos &lt;= root-&gt;lc-&gt;r) {\n        update(root-&gt;lc, pos, val);\n    } else {\n        update(root-&gt;rc, pos, val);\n    }\n    root-&gt;pull();\n}\n\nint walk(Node* root, int k) {\n    if (root-&gt;l == root-&gt;r) {\n        return root-&gt;l;\n    }\n    if (k &lt;= root-&gt;lc-&gt;sum) {\n        return walk(root-&gt;lc, k);\n    } else {\n        return walk(root-&gt;rc, k - root-&gt;lc-&gt;sum);\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    Node* root = build(0, n - 1);\n    while (q--) {\n        int op;\n        cin &gt;&gt; op;\n        if (op == 1) {\n            int pos;\n            cin &gt;&gt; pos;\n            a[pos] ^= 1;\n            update(root, pos, a[pos]);\n        } else if (op == 2) {\n            int k;\n            cin &gt;&gt; k;\n            k++;\n            cout &lt;&lt; walk(root, k) &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre> CSES - List Removals <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u9663\u5217 a[1], a[2], \u2026 , a[n]\uff0c\u6709 q \u7b46\u64cd\u4f5c\uff0c\u7d66 k\uff0c\u5c07\u5f9e\u5de6\u6578\u904e\u53bb\u7b2c k \u500b\u6578\u79fb\u9664\uff0c\u4e26\u8f38\u51fa\u88ab\u79fb\u9664\u7684\u6578\u5b57\u662f\u591a\u5c11</p> <p>\\(1\\le n, q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u554f\u5728\u54ea\u500b index \u7684 prefix sum \u6070\u597d\u8d85\u904e k\u3002\u4e5f\u5c31\u662f\u5728\u7dda\u6bb5\u6a39\u4e0a\u300c\u4e8c\u5206\u641c\u300d\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u770b\u5de6\u5b50\u6a39\u7684 sum \u662f\u5426\u8db3\u5920 k\uff0c\u662f\u7684\u8a71\u5c31\u5f80\u5de6\u8d70\uff0c\u4e0d\u662f\u7684\u8a71\u5c31\u5f80\u53f3\u8d70\uff0c\u4e26\u5c07 k -= lc.sum</p>"},{"location":"ds/segment_tree/#_4","title":"\u77e9\u5f62\u8986\u84cb\u76f8\u95dc\u554f\u984c","text":"\u4e0d\u7528\u96e2\u6563\u5316\u7248 CSES - Area of Rectangles <p>\u7d66 \\(n\\) \u500b\u77e9\u5f62 \\((x_1, x_2)\\) \u5230 \\((y_1, y_2)\\)\uff0c\u554f\u4ed6\u5011\u7684\u806f\u96c6\u9762\u7a4d</p> <p>\\(n\\le 10^5, -10^6\\le x_1, x_2, y_1, y_2 \\le 10^6\\)</p> <p>\u5c07\u554f\u984c\u8f49\u63db\u6210\u5728\u4e00\u7dad\u4e0a\u7684\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u597d\u5e7e\u500b events\uff0c\u8b8a\u6210\u597d\u5e7e\u500b\u5340\u9593 +1, -1\u3002</p> <p></p> <p>v[i]: \u5b58\u7576\u524d\u6383\u63cf\u7dda\u7684 y = i \u88ab\u591a\u5c11\u77e9\u5f62 cover\u3002\u5c0d\u65bc\u6bcf\u4e00\u500b x\uff0c\u7b54\u6848\u5c31\u662f v[i] &gt; 0 \u7684\u6578\u91cf\uff0c\u6211\u5011\u53ef\u4ee5\u7528\u7dda\u6bb5\u6a39\u7dad\u8b77\u5340\u9593\u6700\u5c0f\u503c minv\uff0c\u4ee5\u53ca\u51fa\u73fe\u5e7e\u6b21 cntv\u3002</p> <ul> <li> <p>\u82e5 minv = 0 \u21d2 ans = total - cntv</p> </li> <li> <p>\u82e5 minv &gt; 0 \u21d2 ans = total</p> </li> </ul> <p>\u9700\u8981\u96e2\u6563\u5316\u7684\u8a71\u53ea\u8981\u5c07 leaf \u7684 cntv \u6539\u6210\u7dad\u8b77\u300c\u96e2\u6563\u5316\u524d\u7684\u9577\u5ea6\u300d\u5373\u53ef</p> <p></p> TIOJ 1224 \u96e2\u6563\u5316\u7684 code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\n\nstruct Node {\n    int l, r;\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int cnt;\n    int mn;\n    int add = 0;\n\n    Node(int l, int r) : l(l), r(r) {}\n\n    void pull() {\n        mn = min(lc-&gt;mn, rc-&gt;mn);\n        cnt = 0;\n        if (mn == lc-&gt;mn) {\n            cnt += lc-&gt;cnt;\n        } \n        if (mn == rc-&gt;mn) {\n            cnt += rc-&gt;cnt;\n        }\n    }\n\n    void push() {\n        if (add) {\n            lc-&gt;mn += add;\n            lc-&gt;add += add;\n            rc-&gt;mn += add;\n            rc-&gt;add += add;\n            add = 0;\n        }\n    }\n};\n\nstruct OP {\n    int x, y1, y2, val;\n\n    bool operator&lt;(const OP &amp;rhs) const {\n        return x &lt; rhs.x;\n    }\n};\n\nint n;\nvector&lt;int&gt; sortedY; \nvector&lt;OP&gt; op;\n\n// {1, 8, 9, 10}\n// i \u7dad\u8b77 i~i+1\n// lb(i), lb(i - 1)\n\nNode* build(int l, int r) {\n    Node* root = new Node(l, r);\n    if (l == r) {\n        root-&gt;cnt = sortedY[l + 1] - sortedY[l]; \n        root-&gt;mn = 0; \n        return root;\n    }\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n\n    root-&gt;pull();\n    return root;\n}\n\nvoid modify(Node* root, int ml, int mr, int val) {\n    if (ml &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= mr) {\n        root-&gt;mn += val;\n        root-&gt;add += val;\n        return;\n    }\n    if (root-&gt;r &lt; ml || mr &lt; root-&gt;l) {\n        return;\n    }\n    root-&gt;push();\n    modify(root-&gt;lc, ml, mr, val);\n\n    modify(root-&gt;rc, ml, mr, val);\n    root-&gt;pull();\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        int x1, x2, y1, y2;\n        cin &gt;&gt; x1 &gt;&gt; x2 &gt;&gt; y1 &gt;&gt; y2;\n        op.pb({x1, y1, y2, +1});\n        op.pb({x2, y1, y2, -1});\n        sortedY.pb(y1);\n        sortedY.pb(y2);\n    }\n    sort(ALL(sortedY));\n    sortedY.resize(unique(ALL(sortedY)) - sortedY.begin());\n    sort(ALL(op));\n}\n\nvoid solve() {\n    int range = sortedY.back() - sortedY.front();\n    Node* root = build(0, sortedY.size() - 2);\n    int lastX = INF, ans = 0;\n    for (auto [x, y1, y2, val] : op) {\n        int yl = lower_bound(ALL(sortedY), y1) - sortedY.begin();\n        int yr = lower_bound(ALL(sortedY), y2) - sortedY.begin() - 1;\n\n        if (lastX != INF &amp;&amp; x != lastX) {\n            int dy = (root-&gt;mn == 0) ? (range - root-&gt;cnt) : range;\n            ans += (x - lastX) * dy;\n        }\n\n        modify(root, yl, yr, val);\n        lastX = x;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nsigned main() {\n    init();\n    solve();\n} \n</code></pre> 2021 \u5168\u570b\u8cfd pF. \u6b61\u6a02\u5916\u9001\u9ede <p>\u7d66 \\(n\\) \u500b\u83f1\u5f62\uff0c\u4e2d\u5fc3\u9ede\u70ba \\((x_i, y_i)\\)\uff0c\u534a\u5f91\u70ba \\(r_i\\)\uff0c\u6b0a\u503c\u70ba \\(w_i\\)\u3002\u554f\u6240\u6709\u683c\u5b50\u9ede\u7684\u4e0a\u88ab\u8986\u84cb\u5230\u7684\u6b0a\u503c\u7e3d\u548c\u6700\u5927\u503c</p> <p>\\(n\\le 3\\times 10^5, 0\\le x_i, y_i, r_i\\le 10^8, 1\\le w_i \\le 100\\)</p> \u601d\u8def <p>\u5c07\u83f1\u5f62\u8b8a\u6210 \\((x+y,x-y)\\) \u5c31\u53ef\u4ee5\u8b8a\u6210\u4e00\u822c\u7684\u77e9\u5f62\u8986\u84cb\u554f\u984c</p> <p> </p> \u77e9\u5f62\u5468\u9577 POJ 1177 <p>\u7d66 \\(n\\) \u500b\u77e9\u5f62 \\((x_1, x_2)\\) \u5230 \\((y_1, y_2)\\)\uff0c\u554f\u4ed6\u5011\u6240\u5f62\u6210\u7684\u8f2a\u5ed3\u9031\u9577</p> <p>\\(n\\le 5000, -10^4\\le x_1, x_2, y_1, y_2 \\le 10^4\\) </p> \u601d\u8def <p>\u7528\u6383\u63cf\u7dda\uff0c\u7dda\u6bb5\u6a39\u4e00\u6a23\u7dad\u8b77\u7576\u524d\u6709\u5e7e\u500b\u975e 0 \u7684\u9ede</p> <p>\u76ee\u524d\u7dda\u6bb5\u8ca2\u737b\u7684\u5468\u9577\u662f\uff0c\u76ee\u524d\u7684\u7e3d\u9577\u5ea6\u6e1b\u53bb\u4e0a\u4e00\u6b21\u7684\u7e3d\u9577\u5ea6\u7684\u7d55\u5c0d\u503c</p> <p>\u53c3\u8003\u81ea : https://blog.csdn.net/weixin_43236122/article/details/105306765</p> CSES - Intersection Points <p>\u7d66 n \u500b\u7dda\u6bb5\uff0c\u53ea\u53ef\u80fd\u662f\u6c34\u5e73\u7dda\u6216\u925b\u76f4\u7dda\uff0c\u554f\u9019\u4e9b\u7dda\u6bb5\u7684\u4ea4\u9ede\u6709\u5e7e\u500b</p> <p>\\(n\\le 10^6, -10^6 \\le x_1, x_2, y_1, y_2 \\le 10^6\\)</p> \u601d\u8def <p>\u628a\u6bcf\u500b\u7dda\u6bb5\u90fd\u60f3\u6210\u4e00\u500b\u77e9\u5f62\uff0c\u7528 sweep line \u5f9e\u5de6\u908a\u6383\u5230\u53f3\u908a\uff0c\u904e\u7a0b\u4e2d\u53ef\u80fd\u6703\u6709\u4e09\u7a2e\u60c5\u6cc1:</p> <ol> <li>\u9047\u5230\u4e00\u500b\u5e73\u884c\u7dda\u6bb5\u7684\u8d77\u59cb\u9ede</li> <li>\u9047\u5230\u4e00\u500b\u5e73\u884c\u7dda\u6bb5\u7684\u7d42\u9ede</li> <li>\u9047\u5230\u4e00\u500b\u5782\u76f4\u7dda\u6bb5</li> </ol> <p>\u5176\u4e2d\u7576\u9047\u5230 3. \u7684\u6642\u5019\uff0c\u6703\u9700\u8981\u8a62\u554f\u7576\u524d\u7684\u4e00\u6bb5\u5340\u9593\u6709\u5e7e\u689d\u7dda\u6bb5\u7d93\u904e\uff0c\u800c\u9047\u5230 1. 2. \u7684\u6642\u5019\uff0c\u6703\u9700\u8981\u5c07\u4e00\u500b\u9ede\u52a0\u503c\u6216\u6e1b\u503c</p> LOJ #6276.\u679c\u6811 <p>\u7d66\u51fa\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u6709\u4e00\u7a2e\u984f\u8272\u3002\u554f\u6709\u591a\u5c11\u689d\u8def\u5f91\u6eff\u8db3\u8def\u5f91\u4e0a\u4efb\u610f\u5169\u9ede\u7684\u984f\u8272\u90fd\u4e0d\u540c\u3002 </p> <p>\\(n\\le 10^5\\)\uff0c\u6eff\u8db3\u6bcf\u7a2e\u984f\u8272\u81f3\u591a\u51fa\u73fe \\(20\\) \u6b21\u3002</p> \u601d\u8def <p>\u5c07 path \\((u,v)\\) \u7684 \\(\\texttt{dfn}[u],\\texttt{dfn}[v]\\) \u6253\u5728\u4e8c\u7dad\u5e73\u9762\u4e0a\uff0c\u540c\u6a23\u984f\u8272\u7684\u9ede\u6703\u5f62\u6210\u4e00\u4e9b\u77e9\u5f62\uff0c\u90a3\u4e9b\u77e9\u5f62\u5c31\u4e0d\u80fd\u9078\u7684\u5730\u65b9\uff0c\u7b54\u6848\u5c31\u662f\u6c92\u88ab\u4efb\u4f55\u77e9\u5f62\u8986\u84cb\u5230\u7684\u4e8c\u7dad\u5ea7\u6a19\u9ede\u3002\u7531\u65bc\u9700\u8981 \\(O(20^2)\\) \u679a\u8209\u540c\u6a23\u984f\u8272\u7684\u9ede\uff0c\u6bcf\u6b21\u6703\u751f\u6210 \\(4\\) \u500b\u77e9\u5f62\uff0c\u6240\u4ee5 worst case \\(O((C^{20}_2 \\times 4 \\times \\frac{n}{C^{20}_2})\\times \\log n)\\approx 7.6\\times 10^7\\)</p>"},{"location":"ds/segment_tree/#_5","title":"\u7dda\u6bb5\u6a39\u5206\u6cbb","text":"<p>\u8003\u616e\u9019\u6a23\u4e00\u500b\u554f\u984c\uff1a </p> <ul> <li> <p>\u6709\u4e00\u4e9b\u64cd\u4f5c\uff0c\u6bcf\u500b\u64cd\u4f5c\u53ea\u5728 \\(l\\sim r\\) \u7684\u6642\u9593\u5167\u6709\u6548\u3002 </p> </li> <li> <p>\u6709\u4e00\u4e9b\u8a62\u554f\uff0c\u6bcf\u500b\u8a62\u554f\u67d0\u4e00\u500b\u6642\u9593\u9ede\u6240\u6709\u64cd\u4f5c\u7684\u8ca2\u737b\u3002</p> </li> </ul> <p>\u5c0d\u65bc\u9019\u6a23\u7684\u8a62\u554f\uff0c\u6211\u5011\u53ef\u4ee5\u5728\u96e2\u7dda\u5f8c\u5728\u6642\u9593\u8ef8\u4e0a\u5efa\u4e00\u68f5\u7dda\u6bb5\u6a39\uff0c\u9019\u6a23\u5c0d\u65bc\u6bcf\u500b\u64cd\u4f5c\uff0c\u76f8\u7576\u65bc\u5728\u7dda\u6bb5\u6a39\u4e0a\u9032\u884c\u5340\u9593\u64cd\u4f5c\u3002\u904d\u6b77\u6574\u9846\u7dda\u6bb5\u6a39\uff0c\u5230\u9054\u6bcf\u500b\u7bc0\u9ede\u6642\u57f7\u884c\u5c0d\u61c9\u7684\u64cd\u4f5c\uff0c\u7136\u5f8c\u7e7c\u7e8c\u5411\u4e0b\u905e\u6b78\uff0c\u5230\u9054\u8449\u5b50\u7bc0\u9ede\u6642\u7d71\u8a08\u8ca2\u737b\uff0c\u56de\u6eaf\u6642\u64a4\u92b7\u64cd\u4f5c\u5373\u53ef\u3002\u9019\u6a23\u7684\u60f3\u6cd5\u88ab\u7a31\u70ba\u7dda\u6bb5\u6a39\u5206\u6cbb\uff0c\u53ef\u4ee5\u5728\u4f4e\u6642\u9593\u8907\u96dc\u5ea6\u5167\u89e3\u6c7a\u4e00\u985e\u5728\u7dda\u6f14\u7b97\u6cd5\u4e26\u4e0d\u512a\u79c0\u7684\u554f\u984c\u3002</p> \u6d1b\u8c37 P5787 \u4e8c\u5206\u56fe /\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811\u5206\u6cbb <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u6709 \\(m\\) \u689d\u908a\u8207 \\(k\\) \u500b\u6642\u9593\u9ede\uff0c\u6bcf\u689d\u908a\u53ea\u5b58\u5728\u65bc \\([l_i, r_i)\\) \u9019\u4e9b\u6642\u9593\u9ede\uff0c\u6c42\u6bcf\u500b\u6642\u9593\u9ede\u6642\u9019\u5f35\u5716\u662f\u5426\u70ba\u4e8c\u5206\u5716\u3002</p> <p>\\(n\\le 10^5, m,k\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u9996\u5148\uff0c\u5716\u662f\u4e8c\u5206\u5716\u7684\u5145\u8981\u689d\u4ef6\u662f\u4e0d\u5b58\u5728\u5947\u74b0\uff0c\u9019\u500b\u53ef\u4ee5\u7528\u5e36\u6b0a\u4e26\u67e5\u96c6\u7dad\u8b77\u3002\u4f9d\u7167\u4e0a\u8ff0\u601d\u60f3\u5efa\u4e00\u68f5\u7dda\u6bb5\u6a39\uff0c\u5c0d\u65bc\u6bcf\u689d\u908a\uff0c\u5c07\u5b83\u4f9d\u7167\u7dda\u6bb5\u6a39\u5340\u9593\u64cd\u4f5c\u7684\u65b9\u5f0f\u5206\u6210 \\(O(\\log k)\\) \u6bb5\uff0c\u7528 vector \u639b\u5728\u7dda\u4e0a\u6bb5\u6a39\u7684\u7bc0\u9ede\u4e0a\u3002\u904d\u6b77\u6642\uff0c\u5f9e\u6839\u7bc0\u9ede\u51fa\u767c\uff0c\u6bcf\u5230\u4e00\u500b\u7bc0\u9ede\uff0c\u5c07\u639b\u5728\u8a72\u7bc0\u9ede\u4e0a\u7684\u6240\u6709\u908a\u5408\u4f75\uff0c\u7136\u5f8c\u905e\u6b78\u8655\u7406\u5de6\u5152\u5b50\u548c\u53f3\u5152\u5b50\u3002\u5982\u679c\u767c\u73fe\u6709\u67d0\u908a\u5408\u4f75\u6703\u51fa\u73fe\u5947\u74b0\uff0c\u90a3\u9ebc\u76ee\u524d\u7dda\u6bb5\u6a39\u7bc0\u9ede\u6240\u5c0d\u61c9\u7684\u6642\u9593\u5340\u9593\u90fd\u4e0d\u6703\u5f62\u6210\u4e8c\u5206\u5716\u3002\u7576\u5230\u9054\u8449\u5b50\u7bc0\u9ede\u6642\uff0c\u5982\u679c\u5408\u4f75\u4e86\u6240\u6709\u639b\u5728\u7576\u524d\u7bc0\u9ede\u4e0a\u7684\u908a\uff0c\u4f9d\u820a\u6eff\u8db3\u4e8c\u5206\u5716\u7684\u6027\u8cea\uff0c\u90a3\u9ebc\u53ef\u4ee5\u76f4\u63a5\u8f38\u51fa Yes\u3002\u56de\u6eaf\u6642\uff0c\u7531\u65bc\u4e26\u67e5\u96c6\u4e0d\u652f\u63f4\u522a\u908a\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u53efrollback dsu\u3002</p> <p>\u6bcf\u689d\u908a\u6703\u8dd1 \\(O(\\log k)\\) \u6b21\uff0c\u5171 \\(m\\) \u689d\uff0c\u5728\u4e58\u4e0a rollback dsu \u7684\u8907\u96dc\u5ea6\u662f \\(O(m \\log n \\log k)\\)</p> code <pre><code>const int N = 1e5 + 7, M = 2e5 + 7;\nint n, m, k, u[M], v[M], f[N&lt;&lt;1], d[N&lt;&lt;1];\nstruct T {\n    int l, r;\n    vi e;\n} t[N&lt;&lt;2];\nstack&lt; pi &gt; s;\n\nvoid build(int p, int l, int r) {\n    t[p].l = l, t[p].r = r;\n    if (l == r) return;\n    build(ls, l, md), build(rs, md + 1, r);\n}\n\nvoid ins(int p, int l, int r, int x) {\n    if (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) return t[p].e.pb(x), void();\n    if (l &lt;= md) ins(ls, l, r, x);\n    if (r &gt; md) ins(rs, l, r, x);\n}\n\ninline int get(int x) {\n    while (x ^ f[x]) x = f[x];\n    return x;\n}\n\ninline void merge(int x, int y) {\n    if (x == y) return;\n    if (d[x] &gt; d[y]) swap(x, y);\n    s.push(mp(x, d[x] == d[y])), f[x] = y, d[y] += d[x] == d[y];\n}\n\nvoid dfs(int p, int l, int r) {\n    bool ok = 1;\n    ui o = s.size();\n    for (ui i = 0; i &lt; t[p].e.size(); i++) {\n        int x = t[p].e[i], u = get(::u[x]), v = get(::v[x]);\n        if (u == v) {\n            for (int j = l; j &lt;= r; j++) prints(\"No\");\n            ok = 0;\n            break;\n        }\n        merge(get(::u[x] + N), v), merge(get(::v[x] + N), u);\n    }\n    if (ok) {\n        if (l == r) prints(\"Yes\");\n        else dfs(ls, l, md), dfs(rs, md + 1, r);\n    }\n    while (s.size() &gt; o) d[f[s.top().fi]] -= s.top().se, f[s.top().fi] = s.top().fi, s.pop();\n}\n\nint main() {\n    rd(n), rd(m), rd(k), build(1, 1, k);\n    for (int i = 1, l, r; i &lt;= m; i++) {\n        rd(u[i]), rd(v[i]), rd(l), rd(r);\n        if (l ^ r) ins(1, l + 1, r, i);\n    }\n    for (int i = 1; i &lt;= n; i++) f[i] = i, f[i+N] = i + N;\n    dfs(1, 1, k);\n    return 0;\n}\n</code></pre> CF 1681 F. Unique Occurrences <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u908a\u5e36\u6b0a\u3002\u5b9a\u7fa9 \\(f(u,v)\\) \u70ba \\(u\\) \u5230 \\(v\\) \u7684\u8def\u5f91\u4e0a\u53ea\u51fa\u73fe\u4e00\u6b21\u7684\u908a\u6b0a\u6578\u91cf\uff0c\u554f\u5c0d\u65bc\u6240\u6709 \\(u&lt;v\\)\uff0c\\(f(u,v)\\) \u7684\u52a0\u7e3d</p> <p>\\(2\\le n\\le 5\\times 10^5\\)</p> \u601d\u8def <p>\u8003\u616e\u6b0a\u91cd \\(w\\)\uff0c\u7576\u5c07\u6b0a\u91cd\u70ba \\(w\\) \u7684\u908a\u90fd\u79fb\u9664\u5f8c\uff0c\u6703\u5269\u4e0b\u597d\u5e7e\u500b\u9023\u901a\u584a\uff0c\u5c07\u6b0a\u91cd\u70ba \\(w\\) \u7684\u908a\u90fd\u79fb\u9664\u5f8c\uff0c\u6bcf\u689d\u6b0a\u91cd\u70ba \\(w\\) \u7684\u908a\u5c0d\u7b54\u6848\u7684\u8ca2\u737b\u5c31\u662f \\((u,v)\\) \u6240\u5728\u7684\u9023\u901a\u584a\u7684\u5927\u5c0f\u7684\u4e58\u7a4d\uff0c\u4e5f\u5c31\u662f \\(sz(u)\\times sz(v)\\)\u3002\u6240\u4ee5\u6211\u5011\u8003\u616e\u5206\u6cbb\uff0c\u4ee5\u6b0a\u91cd\u5c0f\u5230\u5927\u7576\u6642\u9593\u8ef8\uff0c\u5c0d\u65bc\u4e00\u689d\u6b0a\u91cd\u70ba \\(w\\) \u7684\u908a\u5373\u8ca2\u737b \\([1, w-1]\\) \u548c \\([w+1, n]\\)\uff0c\u4e5f\u5c31\u662f\u5230\u4e86\u8449\u7bc0\u9ede\u5fc5\u9808\u52a0\u5165\u9664\u4e86\u6b0a\u91cd\u70ba \\(w\\) \u4ee5\u5916\u7684\u6240\u6709 edges\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u985e\u4f3c CF 1442 D. sum \u7684\u5be6\u4f5c\u65b9\u5f0f\u4f86\u505a\u9019\u984c\uff0c\u4e5f\u5c31\u662f\u5728\u905e\u8ff4\u7684\u904e\u7a0b\u5c07\u4e0d\u5c6c\u65bc \\(w\\) \u7684\u908a\u4f9d\u5e8f\u52a0\u5165\u3002</p> <p>\u53c3\u8003\u81ea : https://www.luogu.com.cn/blog/257146/solution-cf1681f</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int N = 5e5 + 5;\n\nint n, ans;\nvector&lt;pair&lt;int, int&gt;&gt; G[N];\n\nstruct Graph {\n    int n, cnt;\n    vector&lt;int&gt; sz;\n    vector&lt;int&gt; par;\n    stack&lt;pair&lt;int, int&gt;&gt; stk;\n\n    int find(int x) {\n        if (par[x] == x)\n            return x;\n        else\n            return find(par[x]);\n    }\n    void init(int _n) {\n        n = _n;\n        sz = vector&lt;int&gt;(n, 1);\n        par = vector&lt;int&gt;(n);\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    void merge(int u, int v) {\n        int x = find(u), y = find(v);\n        if (x == y) {\n            stk.push({x, x});\n            return;\n        }\n        if (sz[x] &lt; sz[y]) swap(x, y);\n        sz[x] += sz[y];\n        par[y] = x;\n        stk.push({x, y});\n    }\n    void undo() {\n        auto [x, y] = stk.top();\n        stk.pop();\n        if (x == y) return;\n        sz[x] -= sz[y];\n        par[y] = y;\n    }\n} dsu;\n\nvoid divide(int l, int r) {\n    if (l == r) {\n        for (auto [a, b] : G[l]) {\n            a = dsu.find(a), b = dsu.find(b);\n            ans += dsu.sz[a] * dsu.sz[b];\n        }\n        return;\n    }\n    int mid = (l + r) / 2;\n    for (int i = l; i &lt;= mid; i++) {\n        for (auto [u, v] : G[i]) {\n            dsu.merge(u, v);\n        }\n    }\n    divide(mid + 1, r);\n    for (int i = l; i &lt;= mid; i++) {\n        for (auto [u, v] : G[i]) {\n            dsu.undo();\n        }\n    }\n    for (int i = mid + 1; i &lt;= r; i++) {\n        for (auto [u, v] : G[i]) {\n            dsu.merge(u, v);\n        }\n    }\n    divide(l, mid);\n    for (int i = mid + 1; i &lt;= r; i++) {\n        for (auto [u, v] : G[i]) {\n            dsu.undo();\n        }\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt; n; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        G[w].push_back({u, v});\n    }\n    dsu.init(n + 1);\n    divide(1, n);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> CF 601 E. A Museum Robbery <p>\u7d66 \\(n\\) \u500b\u7269\u54c1\u4ee5\u53ca\u80cc\u5305\u5bb9\u91cf \\(k\\)\uff0c\u6709\u4ee5\u4e0b \\(q\\) \u7b46\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{add}(w, v):\\) \u52a0\u5165\u4e00\u500b\u91cd\u91cf\u70ba \\(w\\)\uff0c\u50f9\u503c\u70ba \\(v\\) \u7684\u7269\u54c1</p> </li> <li> <p>\\(\\text{del}(x):\\) \u522a\u9664\u7de8\u865f \\(x\\) \u7684\u7269\u54c1</p> </li> <li> <p>\\(\\text{query}:\\) \u4ee4 \\(s(m)\\) \u8868\u793a\u5bb9\u91cf\u70ba \\(m\\) \u6240\u80fd\u7372\u53d6\u7684\u6700\u5927\u50f9\u503c\uff0c\u6c42 \\(\\sum \\limits_{m=1}^k s(m) \\times p^{m-1} \\pmod{q}\\)</p> </li> </ul> <p>\\(n\\le 5000, k\\le 1000, q\\le 3\\times 10^4\\)</p> \u601d\u8def <p>\u6211\u5011\u8655\u7406\u51fa\u6bcf\u500b\u7269\u54c1\u6703\u51fa\u73fe\u5728\u54ea\u4e9b\u5340\u9593\u4e2d\u3002\u5176\u5b83\u90fd\u548c\u7dda\u6bb5\u6a39\u5206\u6cbb\u4e00\u6a23\uff0c\u552f\u4e00\u7684\u4e0d\u540c\u5c31\u662fdfs \u7684\u6642\u5019\uff0c\u6211\u5011\u4e0d\u53bb\u56de\u6eaf\uff0c\u800c\u662f\u9078\u64c7\u76f4\u63a5\u628a \\(dp\\) \u6578\u7d44\u50b3\u4e0b\u53bb\uff08\u5176\u5be6\u4e5f\u8ddf CF 1442 D. sum \u7684\u505a\u6cd5\u5dee\u4e0d\u591a\uff09\u3002</p> <p>\u53c3\u8003\u81ea : https://zhuanlan.zhihu.com/p/557382505</p>"},{"location":"ds/segment_tree/#bit","title":"\u4e8c\u7dad BIT","text":"CSES - Forest Queries II <p>\\(n\\times n\\) \u7684 grid \u4e0a\uff0c\\(q\\) \u500b\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p>\u6539\u8b8a\u4e00\u683c\u7684\u72c0\u614b\uff080/1\uff09</p> </li> <li> <p>\u8a62\u554f\u4e00\u500b\u77e9\u5f62\u5340\u57df\u7684\u548c</p> </li> </ul> <p>\\(n\\le 1000, q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>yuihuang code</p> code"},{"location":"ds/segment_tree/#_6","title":"\u6253\u67b6\u7dda\u6bb5\u6a39","text":"\u5340\u9593\u6578\u5b57\u500b\u6578 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u9663\u5217\uff0c\\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li> <p>\\(\\text{query}(l,r,x):a_l,\\ldots ,a_r\\)\uff0c\\(x\\) \u51fa\u73fe\u7684\u6b21\u6578</p> </li> <li> <p>\\(\\text{update}(i,x):\\) \u5c07 \\(a_i=x\\)</p> </li> </ul> <p>\\(n,q\\le 2\\times 10^5,x\\le 10^9\\)</p> \u601d\u8def <p>\uff08\u975c\u614b\uff09\u6c92 update : vec[x] \u653e \\(a_i=x\\) \u7684\u6240\u6709 \\(x\\)</p> <p>\uff08\u52d5\u614b\uff09\u6709 update : DS[x] \u652f\u63f4 </p> <ul> <li> <p>insert(i)</p> </li> <li> <p>erase(i)</p> </li> <li> <p>lower_bound(i)</p> </li> </ul> <p>\u4f7f\u7528 Treap \u6216 <code>pb_ds::tree</code></p> code <pre><code>// using pbds\ntree&lt;pii,null_type,less&lt;pii&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; T;\n\n// update(i, x)\nT.erase({a[i], i});\na[i] = x;\nT.insert({a[i], i});\n\n// query(l, r, x)\ncout &lt;&lt; T.order_of_key(mk(id, r + 1)) - T.order_of_key(mk(id, l)); \n</code></pre> \u8cc7\u82bd OJ 794 \u2014 \u5340\u9593\u7d55\u5c0d\u773e\u6578 <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6\u70ba \\(N\\) \u7684\u6b63\u6574\u6578\u5e8f\u5217 \\(a_1, \\ldots, a_N\\)\uff0c\u63a5\u4e0b\u4f86\u6709 \\(Q\\) \u7b46\u8a62\u554f\u3002</p> <p>\u6bcf\u7b46\u8a62\u554f\u8f38\u5165 \\(l_i, r_i\\)\uff0c\u8f38\u51fa\u5340\u9593 \\([l_i, r_i]\\) \u7684\u7d55\u5c0d\u773e\u6578\uff0c\u82e5\u4e0d\u5b58\u5728\u8acb\u8f38\u51fa \\(0\\)\u3002</p> <p>\\(N, Q \\leq 5 \\times 10^5, 1 \\leq a_i \\leq 5 \\times 10^5\\)</p> \u601d\u8def <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#include &lt;bits/extc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntree&lt;pii,null_type,less&lt;pii&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; T;\n\nconst int INF = 2e18;\nconst int maxn = 5e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r;\n    int id = -1, cnt = 0;\n\n    Node(int l, int r) : l(l), r(r) {}\n\n    void pull () {\n        if (lc-&gt;cnt == 0) {\n            id = rc-&gt;id;\n            cnt = rc-&gt;cnt;\n            return;\n        } \n        if (rc-&gt;cnt == 0) {\n            id = lc-&gt;id;\n            cnt = lc-&gt;cnt;\n            return;\n        }\n        if (lc-&gt;id == rc-&gt;id) {\n            id = lc-&gt;id;\n            cnt = lc-&gt;cnt + rc-&gt;cnt;\n        } else {\n            if (lc-&gt;cnt &gt; rc-&gt;cnt) {\n                id = lc-&gt;id;\n                cnt = lc-&gt;cnt - rc-&gt;cnt;\n            } else {\n                id = rc-&gt;id;\n                cnt = rc-&gt;cnt - lc-&gt;cnt;\n            }\n        }\n    }\n};\n\nint n, q;\nint a[maxn];\n\nNode* build (int l, int r) {\n    Node* root = new Node(l, r);\n    if (l == r) {\n        root-&gt;id = a[l];\n        root-&gt;cnt = 1;\n        return root;\n    }\n\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    root-&gt;pull();\n    return root;\n}\n\npii query(const Node* root, int ql, int qr) {\n    if (qr &lt; root-&gt;l || root-&gt;r &lt; ql) return {-1, 0};\n    if (ql &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qr) {\n        return {root-&gt;id, root-&gt;cnt};\n    } \n\n    pii tmp = {-1, 0};\n    if (ql &lt;= root-&gt;lc-&gt;r) {\n        pii ret = query(root-&gt;lc, ql, qr);\n        if (tmp.S == 0) {\n            tmp = ret;\n        } else if (ret.S != 0) {\n            if (ret.F == tmp.F) {\n                tmp.S += ret.S;\n            } else {\n                if (ret.S &gt; tmp.S) {\n                    tmp.F = ret.F;\n                    tmp.S = ret.S - tmp.S;\n                } else {\n                    tmp.S = tmp.S - ret.S;\n                }\n            }\n        }\n    }\n    if (root-&gt;rc-&gt;l &lt;= qr) {\n        pii ret = query(root-&gt;rc, ql, qr);\n        if (tmp.S == 0) {\n            tmp = ret;\n        } else if (ret.S != 0) {\n            if (ret.F == tmp.F) {\n                tmp.S += ret.S;\n            } else {\n                if (ret.S &gt; tmp.S) {\n                    tmp.F = ret.F;\n                    tmp.S = ret.S - tmp.S;\n                } else {\n                    tmp.S = tmp.S - ret.S;\n                }\n            }\n        }\n    }\n    return tmp;\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; q;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        T.insert ({a[i], i});\n    }\n}\n\nvoid solve() {\n    Node* root = build(0, n - 1);\n    while (q--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        l--, r--;\n\n        auto [id, c] = query(root, l, r);\n        if (c == 0) {\n            cout &lt;&lt; 0 &lt;&lt; '\\n';\n            continue;\n        }\n        int cnt = T.order_of_key(mk(id, r + 1)) - T.order_of_key(mk(id, l)); \n        if (cnt &gt; (r - l + 1) / 2) {\n            cout &lt;&lt; id &lt;&lt; '\\n';\n        } else {\n            cout &lt;&lt; 0 &lt;&lt; '\\n';\n        }\n    }\n}\n\nsigned main() {\n    int t = 1;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre>"},{"location":"ds/segment_tree/#_7","title":"\u984c\u76ee","text":"NPSC 2020 \u9ad8\u4e2d\u7d44\u521d\u8cfd pF. \u5154\u7530\u5efa\u8a2d <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots, a_n\\)\uff0c\u7d66 \\(k\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f : </p> <ul> <li>\\(\\text{query}(v,l,r,c):\\) \u554f \\(a_l, \\ldots, a_r\\) \u6709\u6c92\u6709\u9577\u5ea6\u70ba \\(k\\) \u7684\u5340\u9593\u4e2d\uff0c\u6070\u6709 \\(c\\) \u500b \\(\\le v\\) \u7684\u6578</li> </ul> <p>\\(n,q,k\\le 10^6\\)</p> \u601d\u8def <p>\u628a\u8a62\u554f\u6309 \\(v\\) \u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u5148\u628a \\(&lt;v\\) \u7684\u4f4d\u7f6e\u90fd\u5857\u4e0a\u984f\u8272\uff0c\u53ef\u4ee5\u7528\u7dda\u6bb5\u6a39\u7dad\u8b77\u6bcf\u500b\u4f4d\u7f6e\u958b\u982d\u7684\u9577\u5ea6 \\(k\\) \u7684\u5340\u9593\u4e2d\uff0c\u6709\u5e7e\u500b\u4f4d\u7f6e\u5857\u984f\u8272\uff0c\u6700\u96e3\u7684\u5730\u65b9\u662f\u627e\u6709\u6c92\u6709\u51fa\u73fe \\(c\\)\u3002</p> <p>\u958b\u982d\u5728 \\(i\\) \u7684\u5340\u9593\u548c\u958b\u982d\u5728 \\(i+1\\) \u7684\u5340\u9593\uff0c\u5857\u8272\u7684\u4f4d\u7f6e\u6578\u91cf\u6700\u591a\u53ea\u6703\u5dee 1\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u985e\u4f3c\u4ecb\u503c\u5b9a\u7406\u7684\u60f3\u6cd5\uff0c\\(c\\) \u5728\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e4b\u9593\u5c31\u8868\u793a\u6709\u51fa\u73fe \\(c\\)\u3002</p> <p>\u53c3\u8003\u81ea : https://www.wiwiho.me/2020/11/21/npsc2020pre/</p> HDU 5726 GCD <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\\(q\\) \u6b21\u8a62\u554f :</p> <ul> <li>\\(\\text{query}(l,r):\\) \u554f\u6709\u5e7e\u500b \\(\\gcd(a_{l'},\\ldots ,a_{r'})=\\gcd(a_l,\\ldots ,a_r)\\)</li> </ul> <p>\\(n, q\\le 10^5\\)</p> \u601d\u8def <p>\u5340\u9593 gcd \u7684\u503c\u5229\u53ef\u4ee5\u7528 Sparse Table \u6216 Segment Tree \u7b97\u51fa\u4f86\uff0c\u4f46\u8981\u600e\u9ebc\u6c42\u6709\u5e7e\u500b\u5b50\u5340\u9593\u7684 gcd = x \u5462 ? \u89c0\u5bdf\u5230\uff0c\u5c0d\u65bc\u4e00\u500b\u5de6\u754c\uff0c\u7576\u53f3\u754c\u905e\u589e\u6642 gcd \u662f\u55ae\u8abf\u905e\u6e1b\u7684\uff0c\u6240\u4ee5\u6211\u5011\u5047\u8a2d\u5df2\u7528 map \u5b58\u4ee5 a[i - 1] \u7d50\u5c3e\u7684 distinct \u5340\u9593 gcd\uff0c\u90a3\u6211\u5011\u5c31\u53ea\u8981\u5c07\u9019\u4e9b gcd \u5728\u53bb\u8ddf a[i] \u53d6 gcd \u5b58\u5165 map \u5373\u53ef</p> <p>\u8a73\u898b\u4ee3\u78bc\uff0c\u6284\u9304\u81ea\u4ee5\u4e0b\u535a\u5ba2</p> <p>\u53c3\u8003 : https://blog.nowcoder.net/n/27772b54fd3c4968b905303d83138dea?from=nowcoder_improve</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int mod = 1000000007;\nconst int maxn = 1e5 + 10;\nint g[maxn * 4], a[maxn];\nmap&lt;int, ll&gt; ans;      // \u5b58\u6700\u7ec8\u7b54\u6848\nmap&lt;int, ll&gt; p[maxn];  // p[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684gcd\u7684\u533a\u95f4\u96c6\u5408,\u524d\u8005\u4e3agcd\uff0c\u540e\u8005\u4e3a\u5bf9\u5e94\u7684\u533a\u95f4\u4e2a\u6570\nint t, n, q, x, y;\nint Gcd(int a, int b) {\n    return b == 0 ? a : Gcd(b, a % b);\n}\nvoid update(int id) {\n    g[id] = Gcd(g[id &lt;&lt; 1], g[id &lt;&lt; 1 | 1]);\n}\nvoid build(int l, int r, int id) {\n    if (l == r) {\n        g[id] = a[l];\n        return;\n    }\n    int mid = (l + r) &gt;&gt; 1;\n    build(l, mid, id &lt;&lt; 1);\n    build(mid + 1, r, id &lt;&lt; 1 | 1);\n    update(id);\n}\nint query(int l, int r, int x, int y, int id) {\n    if (x &lt;= l &amp;&amp; r &lt;= y)\n        return g[id];\n    int mid = (l + r) &gt;&gt; 1;\n    int le = 0, ri = 0;\n    if (x &lt;= mid)\n        le = query(l, mid, x, y, id &lt;&lt; 1);\n    if (y &gt; mid)\n        ri = query(mid + 1, r, x, y, id &lt;&lt; 1 | 1);\n    if (!le) swap(le, ri);  // le\u4e3a0\uff0c \u4e0d\u80fd\u6c42ri%0\n    return Gcd(le, ri);     // Gcd(x, 0) = x\n}\nint main() {\n    // freopen(\"/Users/zhangkanqi/Desktop/11.txt\",\"r\",stdin);\n    scanf(\"%d\", &amp;t);\n    int Case = 1;\n    while (t--) {\n        printf(\"Case #%d:\\n\", Case++);\n        scanf(\"%d\", &amp;n);\n        ans.clear();  // \u6e05\u7a7a!!\n        for (int i = 1; i &lt;= n; i++)\n            p[i].clear();\n        for (int i = 1; i &lt;= n; i++)\n            scanf(\"%d\", &amp;a[i]);\n\n        build(1, n, 1);\n        ans[a[1]] = 1, p[1][a[1]] = 1;\n        for (int i = 2; i &lt;= n; i++) {\n            ans[a[i]]++, p[i][a[i]] += 1;\n            for (map&lt;int, ll&gt;::iterator it = p[i - 1].begin(); it != p[i - 1].end(); it++) {\n                int tmp = Gcd(a[i], it-&gt;first);  // \u6c42a[i]\u548c\u4e4b\u524d\u7684\u6570\u7684gcd\n                p[i][tmp] += it-&gt;second;\n                ans[tmp] += it-&gt;second;\n            }\n        }\n        scanf(\"%d\", &amp;q);\n        while (q--) {\n            scanf(\"%d %d\", &amp;x, &amp;y);\n            int k = query(1, n, x, y, 1);\n            printf(\"%d %lld\\n\", k, ans[k]);\n        }\n    }\n    return 0;\n}\n</code></pre> \u5340\u9593\u9664\u6cd5 2023 YTP \u570b\u4e2d\u7d44\u521d\u8cfd p6 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(N\\) \u7684\u5e8f\u5217 \\(a_1,a_2,\\ldots, a_N\\)\uff0c\\(Q\\) \u7b46\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\texttt{f}\\space l\\space r\\space x:\\) \u5c0d\u65bc \\(l\\le i\\le r\\)\uff0c\\(a_i\\) \u8b8a\u6210 \\(\\displaystyle  \\lfloor \\frac{a_i}{x} \\rfloor\\)</p> </li> <li> <p>\\(\\texttt{c}\\space l\\space r\\space x:\\) \u5c0d\u65bc \\(l\\le i\\le r\\)\uff0c\\(a_i\\) \u8b8a\u6210 \\(\\displaystyle \\lceil \\frac{a_i}{x} \\rceil\\)</p> </li> <li> <p>\\(\\texttt{?}\\space k:\\) \u8f38\u51fa \\(a_k\\)</p> </li> </ul> <p>\\(N,Q\\le 2\\times 10^5,1\\le a_i,x\\le 10^9\\)</p> \u601d\u8def <p>ceil \u9664\u6cd5\u7684\u8a71\u662f\u628a floor \u7684\u9664\u6cd5\u6539\u4e00\u4e0b\u8b8a\u5340\u9593\u6700\u5927\u503c\u662f 1 \u7684\u6642\u5019\u4e0d\u905e\u8ff4\u505a\u4e0b\u53bb</p> 2016 \u5168\u570b\u8cfd \u76f4\u5347\u6a5f\u6293\u5bf6 (Helicopter) <p>\u6709\u4e00\u500b \\(n\\times n\\) \u7684 grid\u3002\u4f60\u4e00\u958b\u59cb\u5728\u5de6\u4e0b\u89d2\uff0c\u8981\u8d70\u5230\u53f3\u4e0a\u89d2\u53bb\uff0c\u4f60\u53ea\u80fd\u5f80\u4e0a\u6216\u5f80\u53f3\u8d70\u3002\u6bcf\u4e00\u500b row \u90fd\u6709\u4e00\u500b\u7279\u6b8a\u7684\u5340\u9593\uff0c\u7bc4\u570d\u662f \\(l_i\\) \u5230 \\(r_i\\)\uff0c\u6c42\u4f60\u6700\u591a\u80fd\u7d93\u904e\u5e7e\u500b\u7279\u6b8a\u5340\u9593\u3002</p> <p>\\(n\\le 8\\times 10^5\\)</p> \u601d\u8def <p>\u8003\u616e dp(i, j) = \u8d70\u5230 (i, j) \u6700\u591a\u7d93\u904e\u5e7e\u500b\uff0c\u8f49\u79fb\u5f0f dp(i, j) = max(dp(i, j - 1), dp(i - 1, j) + 1 | if (i, j) is in interval)</p> <p>\u53ef\u4ee5\u89c0\u5bdf\u5230\u4e00\u500b row \u7684 dp(i, j) \u6703\u662f\u55ae\u8abf\u905e\u589e\u7684\uff0c\u4e14\u6703\u88ab\u6539\u8b8a\u7684\u53ea\u6709 interval \u4ee5\u53ca interval \u4ee5\u5f8c\u7684\u4e00\u500b\u524d\u7db4</p> <p> </p> <p>\u9019\u6a23\u6211\u5011\u5c31\u53ea\u8981\u7dad\u8b77\u4e00\u500b segment tree \u4ee3\u8868\u7576\u524d row \u7684 dp \u503c\uff0c\u770b\u5230 interval \u7684\u6642\u5019\u5c31\u5728\u4e0a\u9762 walk \u5230\u6700\u5f8c\u4e00\u500b\u5c0f\u65bc\u7b49\u65bc\u7684\u3002</p> TIOJ 2140. \u6bbf\u58ec\u611b\u5e8f\u5217 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\u8acb\u652f\u63f4\u4e09\u7a2e\u64cd\u4f5c\uff1a</p> <ol> <li>\u7d66\u5b9a \\(i,x\\)\uff0c\u5c07 \\(a_i\\) \u8a2d\u6210 \\(x\\)</li> <li>\u7d66\u5b9a \\(l,r,k\\)\uff0c\\(\\forall l\\le i\\le r,a_i=\\lfloor \\frac{a_i}{k} \\rfloor\\)</li> <li>\u7d66\u5b9a \\(l,r\\)\uff0c\u8f38\u51fa \\(a_l,a_{l+1},\\ldots ,a_r\\) \u7684\u7d55\u5c0d\u591a\u6578\uff0c\u82e5\u4e0d\u5b58\u5728\u8f38\u51fa \\(-1\\)</li> </ol> <p>\\(n,q\\le 10^5\\)</p> \u601d\u8def <p>\u53c3\u8003 : https://abc864197532.github.io/2021/02/07/tioj-2140/</p> <p>\u5340\u9593\u9664\u6cd5\u7684\u90e8\u5206\uff0c\u56e0\u70ba \\(k = 1\\) \u4e0d\u6703\u5f71\u97ff\u9663\u5217\uff0c\u6240\u4ee5\u53ef\u4ee5\u8996\u70ba \\(k \\geq 2\\)\u3002\u7576\u5340\u9593\u7684\u6700\u5927\u503c \\(&gt;0\\) \u7684\u6642\u5019\u624d\u7e7c\u7e8c\u905e\u8ff4\u4e0b\u53bb\u3002\u9019\u6a23\u4e00\u4f86\u6bcf\u500b\u6578\u6700\u591a\u53ea\u6703\u88ab\u9664 \\(\\log C\\) \u6b21\u3002\u5be6\u4f5c\u4e0a\u6bcf\u6b21\u5c07\u4e00\u500b\u9ede\u9664\u5230 \\(0\\) \u9700\u8981 \\(O(\\log C\\times \\log n)\\)\uff0c\u53c8\u6bcf\u6b21\u4fee\u6539\u53ea\u662f\u55ae\u9ede\u4fee\u6539\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u6703\u662f \\(O((n + q)\\log C \\log n)\\approx 1.2\\times 10^8\\)\u3002</p> <pre><code>// \u5340\u9593\u9664\u6cd5\u4ee3\u78bc\nvoid division(Node* root, int mL, int mR, int val) {\n    if (root-&gt;r &lt; mL || mR &lt; root-&gt;l) return;\n    if (root-&gt;l == root-&gt;r) {\n        root-&gt;id /= val;\n        root-&gt;mx = root-&gt;id;\n        return;\n    }\n\n    if (mL &lt;= root-&gt;lc-&gt;r &amp;&amp; root-&gt;lc-&gt;mx) {\n        division(root-&gt;lc, mL, mR, val);\n    }\n    if (root-&gt;rc-&gt;l &lt;= mR &amp;&amp; root-&gt;rc-&gt;mx) {\n        division(root-&gt;rc, mL, mR, val);\n    }\n    root-&gt;pull();\n}\n</code></pre> <p>\u55ae\u9ede\u4fee\u6539\uff0c\u5340\u9593\u7d55\u5c0d\u773e\u6578\u4e0a\u9762\u90fd\u6709\u63d0\u5230\uff0c\u7565\u3002</p> \u5be6\u4f5c\u7d30\u7bc0 <p>\u8a18\u5f97\u8981\u7279\u5224 k = 1</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#include &lt;bits/extc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntree&lt;pii,null_type,less&lt;pii&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; T;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Node{\n    int l, r;\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int id = -1, cnt = 0;\n    int mx;\n\n    Node (int l, int r) : l(l), r(r) {}\n\n    void pull () {\n        if (lc-&gt;cnt == 0) {\n            id = rc-&gt;id;\n            cnt = rc-&gt;cnt;\n        } else if (rc-&gt;cnt == 0) {\n            id = lc-&gt;id;\n            cnt = lc-&gt;cnt;\n        } else {\n            if (lc-&gt;id == rc-&gt;id) {\n                id = lc-&gt;id;\n                cnt = lc-&gt;cnt + rc-&gt;cnt;\n            } else {\n                if (lc-&gt;cnt &gt; rc-&gt;cnt) {\n                    id = lc-&gt;id;\n                    cnt = lc-&gt;cnt - rc-&gt;cnt;\n                } else {\n                    id = rc-&gt;id;\n                    cnt = rc-&gt;cnt - lc-&gt;cnt;\n                }\n            }\n        }\n        mx = max(lc-&gt;mx, rc-&gt;mx);\n    }\n};\n\nint n, q;\nint a[maxn];\n\nNode* build (int l, int r) {\n    Node* root = new Node(l, r);\n    if (l == r) {\n        root-&gt;id = a[l];\n        root-&gt;cnt = 1;\n        root-&gt;mx = a[l];\n        return root;\n    }\n\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    root-&gt;pull();\n    return root;\n}\n\nvoid update(Node* root, int pos, int val) {\n    if (root-&gt;l == root-&gt;r) {\n        T.erase({root-&gt;id, root-&gt;l});\n        root-&gt;id = val;\n        root-&gt;cnt = 1;\n        root-&gt;mx = val;\n        T.insert({root-&gt;id, root-&gt;l});\n        return;\n    }\n\n    if (pos &lt;= root-&gt;lc-&gt;r) {\n        update(root-&gt;lc, pos, val);\n    } else {\n        update(root-&gt;rc, pos, val);\n    }\n    root-&gt;pull();\n}\n\nvoid division(Node* root, int mL, int mR, int val) {\n    if (root-&gt;r &lt; mL || mR &lt; root-&gt;l) return;\n    if (root-&gt;l == root-&gt;r) {\n        T.erase({root-&gt;id, root-&gt;l});\n        root-&gt;id /= val;\n        root-&gt;mx = root-&gt;id;\n        T.insert({root-&gt;id, root-&gt;l});\n        return;\n    }\n\n    if (mL &lt;= root-&gt;lc-&gt;r &amp;&amp; root-&gt;lc-&gt;mx) {\n        division(root-&gt;lc, mL, mR, val);\n    }\n    if (root-&gt;rc-&gt;l &lt;= mR &amp;&amp; root-&gt;rc-&gt;mx) {\n        division(root-&gt;rc, mL, mR, val);\n    }\n    root-&gt;pull();\n}\n\npii query(const Node* root, int ql, int qr) {\n    if (qr &lt; root-&gt;l || root-&gt;r &lt; ql) return {-1, 0};\n    if (ql &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qr) {\n        return {root-&gt;id, root-&gt;cnt};\n    } \n\n    pii tmp = {-1, 0};\n    if (ql &lt;= root-&gt;lc-&gt;r) {\n        pii ret = query(root-&gt;lc, ql, qr);\n        if (tmp.S == 0) {\n            tmp = ret;\n        } else if (ret.S != 0) {\n            if (ret.F == tmp.F) {\n                tmp.S += ret.S;\n            } else {\n                if (ret.S &gt; tmp.S) {\n                    tmp.F = ret.F;\n                    tmp.S = ret.S - tmp.S;\n                } else {\n                    tmp.S = tmp.S - ret.S;\n                }\n            }\n        }\n    }\n    if (root-&gt;rc-&gt;l &lt;= qr) {\n        pii ret = query(root-&gt;rc, ql, qr);\n        if (tmp.S == 0) {\n            tmp = ret;\n        } else if (ret.S != 0) {\n            if (ret.F == tmp.F) {\n                tmp.S += ret.S;\n            } else {\n                if (ret.S &gt; tmp.S) {\n                    tmp.F = ret.F;\n                    tmp.S = ret.S - tmp.S;\n                } else {\n                    tmp.S = tmp.S - ret.S;\n                }\n            }\n        }\n    }\n    return tmp;\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; q;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        T.insert({a[i], i});\n    }\n}\n\nvoid solve() {\n    Node* root = build(0, n - 1);\n\n    int op;\n    while(q--) {\n        cin &gt;&gt; op;\n        if (op == 1) {\n            int i, x;\n            cin &gt;&gt; i &gt;&gt; x;\n            i--;\n            update(root, i, x);\n        } else if (op == 2) {\n            int l, r, k;\n            cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n            l--, r--;\n            if (k &gt; 1) division(root, l, r, k);\n        } else {\n            int l, r;\n            cin &gt;&gt; l &gt;&gt; r;\n            l--, r--;\n            auto [id, c] = query(root, l, r);\n            if (c == 0) {\n                cout &lt;&lt; \"-1\" &lt;&lt; '\\n';\n                continue;\n            }\n            int cnt = T.order_of_key(mk(id, r + 1)) - T.order_of_key(mk(id, l)); \n            if (cnt &gt; (r - l + 1) / 2) {\n                cout &lt;&lt; id &lt;&lt; '\\n';\n            } else {\n                cout &lt;&lt; \"-1\" &lt;&lt; '\\n';\n            }\n        }\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n}\n</code></pre> CSES - Increasing Array Queries <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u67e5\u8a62 :</p> <p>\\(\\text{query}(l,r):\\) \u6bcf\u6b21\u53ef\u4ee5\u5c07\u67d0\u4e00\u9805 +1\uff0c\u554f\u9700\u8981\u505a\u5e7e\u6b21 \\(a_l, \\ldots ,a_r\\) \u624d\u6703\u975e\u56b4\u683c\u905e\u589e</p> <p>\\(n,q\\le 2\\times 10^5, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u5c07\u8a62\u554f\u6309\u7167 \\(l_i\\) \u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7528\u55ae\u8abf stack \u7dad\u8b77\u652f\u914d\u7684\u9805</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\n\nstruct Query{\n    int l, r, id;\n\n    bool operator&lt;(const Query &amp;rhs) const {\n        return l &gt; rhs.l;\n    }\n};\n\nstruct Node{\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int l, r;\n    int chg, sum;\n    Node(int l, int r) : l(l), r(r) {\n        chg = 0;\n    }\n\n    void pull() {\n        sum = lc-&gt;sum + rc-&gt;sum;\n    }\n    void push() {\n        if (chg) {\n            lc-&gt;sum = chg * (lc-&gt;r - lc-&gt;l + 1);\n            rc-&gt;sum = chg * (lc-&gt;r - lc-&gt;l + 1);\n            lc-&gt;chg = chg;\n            rc-&gt;chg = chg;\n            chg = 0;\n        }\n    }\n};\n\nNode* build(int l, int r) {\n    Node* root = new Node(l, r);\n    if (l == r) {\n        root-&gt;sum = 0;\n        return root;\n    }\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    root-&gt;pull();\n    return root;\n}\n\nvoid update(Node* root, int ml, int mr, int val) {\n    if (mr &lt; root-&gt;l || root-&gt;r &lt; ml) {\n        return;\n    }\n    if (ml &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= mr) {\n        root-&gt;sum = val * (root-&gt;r - root-&gt;l + 1);\n        root-&gt;chg = val;\n        return;\n    }\n    root-&gt;push();\n    update(root-&gt;lc, ml, mr, val);\n    update(root-&gt;rc, ml, mr, val);\n    root-&gt;pull();\n}\n\nint ask(Node* root, int ql, int qr) {\n    if (qr &lt; root-&gt;l || root-&gt;r &lt; ql) {\n        return 0;\n    }\n    if (ql &lt;= root-&gt;l &amp;&amp; root-&gt;r &lt;= qr) {\n        return root-&gt;sum;\n    }\n    root-&gt;push();\n    return ask(root-&gt;lc, ql, qr) + ask(root-&gt;rc, ql, qr);\n}\n\nconst int N = 2e5 + 5;\nint n, q;\nint a[N], pre[N], ans[N];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        pre[i] = pre[i - 1] + a[i];\n    }\n    vector&lt;Query&gt; query;\n    for (int i = 1; i &lt;= q; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        query.push_back({l, r, i});\n    }\n    sort(ALL(query));\n    Node* root = build(1, n);\n    stack&lt;int&gt; stk;\n    int l = n + 1;\n    for (auto &amp;i : query) {\n        while (i.l &lt; l) {\n            l--;\n            while (stk.size() &amp;&amp; a[stk.top()] &lt;= a[l]) {\n                int ml = stk.top();\n                stk.pop();\n                int mr;\n                if (stk.size()) {\n                    mr = stk.top() - 1;\n                } else {\n                    mr = n;\n                }\n                update(root, ml, mr, a[l]);\n            }\n            update(root, l, l, a[l]);\n            stk.push(l);\n        }\n        ans[i.id] = ask(root, i.l, i.r) - (pre[i.r] - pre[i.l - 1]);\n    }\n    for (int i = 1; i &lt;= q; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n} \n</code></pre> CSES - Polynomial Queries <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u6b21\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{update}(i):\\) \u5c07 \\(a_i\\) += 1, \\(a_{i+1}\\) += 2, ...</p> </li> <li> <p>\\(\\text{query}(l,r):\\) \u8f38\u51fa \\(a_l + \\ldots ,a_r\\)</p> </li> </ul> <p>\\(1\\le n,q \\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u958b\u5169\u9846 Segment Tree\uff0cSeg1 \u7dad\u8b77 \\(1\\times i_1, 2\\times i_2, 3\\times i_3, \\ldots\\)\uff0cSeg2 \u5c31\u662f\u4e00\u822c\u7684\u7dda\u6bb5\u6a39</p> <ul> <li> <p>update</p> <ul> <li> <p>Seg1 : \u5340\u9593\u6bcf\u9805\u90fd +1</p> </li> <li> <p>Seg2 : \u5340\u9593\u6bcf\u9805\u90fd -(l - 1)</p> </li> </ul> </li> <li> <p>query </p> <ul> <li>Seg1[l, r] + Seg2[l, r]</li> </ul> </li> </ul> \u5340\u9593\u958b\u6839\u865f LOJ #10128. \u300c\u4e00\u672c\u901a 4.3 \u7ec3\u4e60 2\u300d\u82b1\u795e\u6e38\u5386\u5404\u56fd <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u8ddf \\(q\\) \u500b\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u5169\u7a2e\uff1a</p> <ul> <li>\\(\\text{query}(l,r):\\) \u67e5\u8a62\u5e8f\u5217 \\(a\\) \u5728\u5340\u9593 \\([l, r]\\) \u7684\u548c\u3002</li> <li>\\(\\text{sqrt}(l,r):\\) \u628a \\(a_l,\\ldots ,a_r\\) \u7684\u503c\u500b\u5225\u958b\u6839\u865f\u5f8c\u53d6\u4e0b\u9ad8\u65af\u3002</li> </ul> <p>\\(n\\le 10^5,q\\le 2\\times 10^5,a_i\\le 10^9\\)</p> \u601d\u8def <p>\u8ddf\u5340\u9593\u9664\u6cd5\u4e00\u6a23 mx &gt; 0 \u518d\u8ddf\u65b0\uff0c\u5340\u9593\u548c\u5c31\u7528\u7dda\u6bb5\u6a39\u7684 pull \u7dad\u8b77\u5c31\u597d\u4e86</p> IOI 2014 - Wall <p>\u7d66\u5b9a\u9577\u5ea6\u70ba \\(n\\) \u7684\u521d\u59cb\u503c\u90fd\u70ba 0 \u7684\u5e8f\u5217\uff0c\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u554f \\(q\\) \u6b21\u64cd\u4f5c\u904e\u5f8c\u7684\u6574\u500b\u5e8f\u5217\u3002\u64cd\u4f5c\u6709\u4ee5\u4e0b\u5169\u7a2e\uff1a</p> <ol> <li>\u5c0d\u5340\u9593 \\([l,r]\\) \u4e2d\u7684\u6240\u6709\u5143\u7d20\u8207 \\(h\\) \u53d6\u6700\u5927\u503c\u3002</li> <li>\u5c0d\u5340\u9593 \\([l,r]\\) \u4e2d\u7684\u6240\u6709\u5143\u7d20\u8207 \\(h\\) \u53d6\u6700\u5c0f\u503c\u3002</li> </ol> <p>\\(n \\leq 2\\times 10^6, q \\leq 5\\times 10^5, 0\\le h\\le 10^5\\)</p> \u601d\u8def <p>\u7dda\u6bb5\u6a39\u7684\u6bcf\u4e00\u500b\u7bc0\u9ede\u7dad\u8b77\u8457\u5169\u500b\u9650\u5236\uff0c\u5373\u300c\u5df2\u7d93\u5c0d\u9019\u500b\u5340\u9593\u9032\u884c\uff0c\u4f46\u9084\u6c92\u6709\u5c0d\u9019\u500b\u5340\u9593\u7684\u5b69\u5b50\u61c9\u7528 (apply) \u7684\u9650\u5236\u300d\u3002\u5982\u679c\u6211\u5011\u628a\u6211\u5011\u7684\u6578\u60f3\u8c61\u6210\u4e00\u6392\u91d1\u5c6c\u7403\uff0c\u90a3\u9ebc\u53d6\u6700\u5927\u503c\u64cd\u4f5c\u53ef\u4ee5\u60f3\u8c61\u6210\u7528\u4e00\u584a\u92fc\u677f\u5f9e\u4e0b\u5f80\u4e0a\u63a8\u5340\u9593\u5167\u7684\u7403\uff0c\u4e00\u76f4\u63a8\u5230\u9ad8\u5ea6 \\(t\\)\uff0c\u4f7f\u4e4b\u4e0d\u4f4e\u65bc \\(t\\)\uff1b\u53d6\u6700\u5c0f\u503c\u64cd\u4f5c\u53ef\u4ee5\u60f3\u8c61\u6210\u7528\u4e00\u584a\u92fc\u677f\u5f9e\u4e0a\u5f80\u4e0b\u58d3\uff0c\u4e00\u76f4\u58d3\u5230\u9ad8\u5ea6 \\(t\\)\u3002\u65bc\u662f\u201c\u6bcf\u500b\u5340\u9593\u7684\u9650\u5236\u201d\u6709\u5169\u7a2e\uff0c\u4e00\u7a2e\u662f\u5411\u4e0b\u58d3\u7684\u677f\u5230\u9054\u7684\u6700\u5c0f\u9ad8\u5ea6\uff0c\u4e00\u7a2e\u662f\u5411\u4e0a\u63a8\u7684\u677f\u5230\u9054\u7684\u6700\u5927\u9ad8\u5ea6\u3002\u521d\u59cb\u6642\u9577\u5ea6\u5927\u65bc 1 \u7684\u5340\u9593\u90fd\u6c92\u6709\u9650\u5236\u2014\u2014\u5411\u4e0b\u58d3\u7684\u677f\u7684\u6700\u5c0f\u9ad8\u5ea6\uff08\u8a18\u70ba \\(l_n\\)\uff09\u70ba \\(\\infty\\)\uff0c\u5411\u4e0a\u63a8\u7684\u677f\u7684\u6700\u5927\u9ad8\u5ea6\uff08\u8a18\u70ba \\(l_m\\)\uff09\u70ba 0\uff1b\u53ef\u4ee5\u8a8d\u70ba\u521d\u59cb\u6642\u9577\u5ea6\u70ba 1 \u7684\u5340\u9593\u7684 \\(l_n\\) \u548c \\(l_m\\) \u90fd\u662f 0\u3002</p> <p>\u73fe\u5728\u8003\u616e\u5c0d\u4e00\u500b\u5340\u9593\u9032\u884c\u53d6\u6700\u5927\u503c\u64cd\u4f5c\u3002\u7528\u4e00\u584a\u81ea\u4e0b\u800c\u4e0a\u7684\u4e0a\u63a8\u92fc\u677f\u63a8\u9019\u500b\u5340\u9593\uff0c\u6703\u6709\u4ec0\u9ebc\u8b8a\u5316\u5462\uff1f\u5982\u679c\u539f\u4f86\u7684\u4e0b\u754c\u92fc\u677f\u4f4e\u65bc \\(t\\)\uff0c\u7576\u7136\u6703\u88ab\u63a8\u5230 \\(t\\) \u4f4d\u7f6e\uff0c\u5426\u5247\u4e0d\u8b8a\uff1b\u4e0a\u754c\u540c\u7406\u3002\u56e0\u6b64\uff0c\u9019\u500b\u64cd\u4f5c\u5c0d\u9019\u500b\u5340\u9593\u7684\u8b8a\u5316\u662f \\(l=\\max(l,t)\\)\uff0c\\(r=\\max(r,t)\\)\u3002</p> <p>\u518d\u8003\u616e\u53d6\u6700\u5c0f\u503c\u64cd\u4f5c\uff0c\u985e\u4f3c\u5730\uff0c\\(l=\\min(l,t)\\)\uff0c\\(r=\\min(r,t)\\)\u3002\u52a0\u4e0a lazy tag \u7dad\u8b77\u5373\u53ef\u3002</p> Atcoder abc342 G. Retroactive Range Chmax <p>\u7d66\u5b9a\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff1a</p> <ul> <li> <p>\\(\\max(l,r,x):\\) \u5c0d\u5340\u9593 \\([l,r]\\) \u4e2d\u7684\u6240\u6709\u5143\u7d20\u8207 \\(x\\) \u53d6\u6700\u5927\u503c\u3002</p> </li> <li> <p>\\(\\text{rollback}(i):\\) \u64a4\u92b7\u7b2c \\(i\\) \u6b21 max \u64cd\u4f5c</p> </li> <li> <p>\\(\\text{query}(i):\\) \u8f38\u51fa \\(a_i\\) \u7684\u503c</p> </li> </ul> <p>\\(n,q \\leq 2\\times 10^5, 1\\le x,a_i\\le 10^9\\)</p> \u601d\u8def <p>\u7dda\u6bb5\u6a39\u4e0a\u6bcf\u500b\u7bc0\u9ede\u7dad\u8b77\u4e00\u500b multiset\uff0c\u6bcf\u6b21\u5340\u9593 max \u6642\uff0c\u5c31\u5f80 multiset \u88e1\u52a0\u6578\uff0c\u6bcf\u6b21\u64a4\u92b7\u5c31\u662f\u522a\u9664\u6578\u3002\u6bcf\u6b21\u67e5\u8a62\u64cd\u4f5c\u5247\u662f\u5c0b\u627e\u6839\u5230\u8a72\u9ede\u8def\u5f91\u4e0a\u6240\u6709 multiset \u4e2d\u7684\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u3002</p>"},{"location":"ds/segment_tree/#_8","title":"\u53c3\u8003","text":"<ul> <li> <p>https://drive.google.com/file/d/1-X36kSojmhmMofC6zMLmLAt88j87ZJsn/view</p> </li> <li> <p>https://hackmd.io/@ouE8-gp2T7WkFQPps-mglA/HJNs5ohmN?print-pdf</p> </li> <li> <p>https://www.xht37.com/\u7ebf\u6bb5\u6811\u5206\u6cbb-\u5b66\u4e60\u7b14\u8bb0</p> </li> <li> <p>https://zhuanlan.zhihu.com/p/557382505?utm_id=0</p> </li> <li> <p>https://www.luogu.com.cn/blog/AlexWei/solution-p8097</p> </li> </ul>"},{"location":"ds/sparse_table/","title":"Sparse Table","text":""},{"location":"ds/sparse_table/#_1","title":"\u4ecb\u7d39","text":"<p>Sparse Tabel \u662f\u4e00\u7a2e\u652f\u63f4\u5728\u975c\u614b\u60c5\u6cc1\u4e0b O(1) \u67e5\u8a62\u4e00\u6bb5\u5340\u9593\u7684\u6700\u5927\u6216\u6700\u5c0f\u503c\u7684\u8cc7\u6599\u7d50\u69cb\u3002</p>"},{"location":"ds/sparse_table/#sparse-table","title":"\u5efa\u7acb Sparse Table","text":"CSES - Static Range Minimum Queries <p>\u7d66\u4e00\u500b\u9663\u5217\uff0cq \u6b21\u8a62\u554f:</p> <ul> <li>\\(\\text{query}(l, r):\\) \u67e5\u8a62 \\(a_l, ..., a_r\\) \u5167\u7684\u6700\u5c0f\u503c</li> </ul> <p>\\(n, q \\le 2 \\times 10^5, 1 \\le a_i \\le 10^9\\)</p> <p>\u6211\u5011\u4f7f\u7528\u500d\u589e\u6cd5\uff0c\u4ee4 st(i, j) = \u5f9e a[j] ~ a[j + 2<sup>i</sup> - 1] \u7684\u6700\u5c0f\u503c\u3002\u8ddf lca \u5f88\u50cf\uff0c\u6211\u5011\u53ef\u4ee5\u5217\u51fa\u8f49\u79fb\u5f0f</p> <ul> <li>st(0, j) = a[j]</li> <li>st(i, j) = min(st(i - 1, j), st(i - 1, j + 2<sup>i</sup>))</li> </ul> <p>\u4ee5\u4e0b\u662f Sparse Table \u7684\u5be6\u4f5c\u3002</p> code <pre><code>void build () {\n    int lg = std::__lg(n);\n    for (int i = 1; i &lt;= n; i++) par[0][i] = a[i];\n    for (int i = 1; (1 &lt;&lt; i) &lt;= n; i++) {\n        for (int j = 1; j + (1 &lt;&lt; i) - 1 &lt;= n; j++) {\n            par[i][j] = min (par[i - 1][j], par[i - 1][j + (1 &lt;&lt; (i - 1))]);\n        }\n    }\n}\n</code></pre>"},{"location":"ds/sparse_table/#_2","title":"\u67e5\u8a62\u6700\u5c0f\u503c","text":"<p>\u4ee4 i = log(r - l + 1)\uff0c\u5f9e l \u958b\u59cb\u5230\u5f8c\u9762\u9577\u5ea6\u70ba 2<sup>i</sup> \u7684\u8207\u5f9e r \u958b\u59cb\u5f80\u524d\u9577\u5ea6\u70ba 2<sup>i</sup> \u7684\u9019\u5169\u500b interval \u806f\u96c6\u8d77\u4f86\u7684\u6700\u5c0f\u5373\u70ba\u6240\u6c42\u3002\u56e0\u70ba\u5f9e\u5de6\u53f3\u5169\u7aef log(r - l + 1) \u7684\u9577\u5ea6\u5982\u679c\u6c92\u6709 overlap\uff0c\u4e00\u5b9a\u81f3\u5c11\u6703\u8986\u84cb\u6574\u500b\u5340\u9593\uff0c\u6240\u4ee5\u662f\u53ef\u884c\u7684\u3002</p> <p></p> <p>\u4f46\u82e5\u5acc\u6bcf\u6b21\u8a08\u7b97 log \u592a\u82b1\u6642\u9593\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u5c0d log \u4e5f\u9032\u884c\u7684\u9810\u8655\u7406\uff1a</p> code <pre><code>for (int i = 2; i &lt;= n; i++) {\n    log_value[i] = log_value[i / 2] + 1;\n}\n</code></pre> <p>query \u7684\u7a0b\u5f0f\u78bc\u5982\u4e0b\uff1a</p> code <pre><code>int query (int l, int r) {\n    int lg = std::__lg(r - l + 1);\n    return min (par[lg][l], par[lg][r - (1 &lt;&lt; lg) + 1]);\n}\n</code></pre>"},{"location":"ds/sparse_table/#_3","title":"\u6a21\u677f","text":"code <pre><code>int par[21][maxn];\nint a[maxn];\n\nvoid build () {\n    int lg = std::__lg(n);\n    for (int i = 1; i &lt;= n; i++) par[0][i] = a[i];\n    for (int i = 1; (1 &lt;&lt; i) &lt;= n; i++) {\n        for (int j = 1; j + (1 &lt;&lt; i) - 1 &lt;= n; j++) {\n            par[i][j] = min (par[i - 1][j], par[i - 1][j + (1 &lt;&lt; (i - 1))]);\n        }\n    }\n}\n\nint query (int l, int r) {\n    int lg = std::__lg(r - l + 1);\n    return min (par[lg][l], par[lg][r - (1 &lt;&lt; lg) + 1]);\n}\n</code></pre>"},{"location":"ds/sparse_table/#_4","title":"\u4f8b\u984c","text":"\u6a21\u677f\u6e2c\u8a66 CSES - Static Range Minimum Queries <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\\(q\\) \u6b21\u8a62\u554f :</p> <ul> <li>\\(\\text{min}(l,r):\\) \\(\\{a_l,\\ldots ,a_r\\}\\) \u7684\u6700\u5c0f\u503c</li> </ul> <p>\\(n,q\\le 2\\times 10^5,1\\le a_i\\le 10^9\\)</p> CF 1904 D2. Set To Max (Hard Version) <p>\u7d66\u5169\u500b\u5e8f\u5217 \\(a,b\\)\uff0c\u554f\u8981\u9032\u884c\u5e7e\u6b21\u4ee5\u4e0b\u64cd\u4f5c\u624d\u80fd\u8b93 \\(a=b\\):</p> <ul> <li>\\(\\text{update}(l,r):\\) \u8b93\u6240\u6709 \\(a_l,\\ldots ,a_r\\) \u90fd\u6539\u6210 \\(\\max\\{ a_l,\\ldots ,a_r\\}\\)</li> </ul> <p>\\(n\\le 2\\times 10^5, 1\\le a_i, b_i\\le n\\) </p> \u601d\u8def <p>\u8003\u616e\u80fd\u8b8a\u5f97 interval \u8981\u7b26\u5408\u4ec0\u9ebc\u689d\u4ef6\uff0c\u5047\u8a2d\u7576\u524d\u8981\u6539 \\(a_i\\)\uff0c\u5247\u6211\u5011\u8981\u627e\u5230\u6700\u8fd1\u7684 \\(j\\) \u6eff\u8db3 \\(b_i=a_j\\)\uff0c\u800c\u4e14\u5c0d\u65bc \\(i\\le k\\le j\\):</p> <ul> <li> <p>\u4e0d\u80fd\u5c07 interval \u5167\u7684\u9805\u6539\u7684\u6bd4\u4ed6\u7684 threshold \u9084\u5c0f\uff0c\u4e5f\u5c31\u662f \\(b_i\\le b_k\\) </p> </li> <li> <p>\\(a_j\\) \u8981\u662f interval \\([i,j]\\) \u5167\u7684\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u662f \\(a_k\\le b_i\\) </p> </li> </ul> <p>\u6240\u4ee5\u6211\u5011\u5f9e \\(i=1\\ldots n\\)\uff0c\u82e5\u7576\u524d \\(a_i\\neq b_i\\)\uff0c\u5247\u5c07\u4f9d\u7167\u4e0a\u9762\u6539\u5373\u53ef\uff0c\u512a\u5316\u7528 Sparse Table</p> 2021 \u9644\u4e2d\u6a21\u7af6 II pD. \u8abf\u8272\u76e4 (Palette) <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1 ,\\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f\u5982\u4e0b :</p> <ul> <li>\\(\\text{query}(l,r):\\) \u554f \\(a_l \\sim a_r\\) \u88e1\u6709\u5e7e\u500b subarray \u6eff\u8db3\u6700\u5927\u6700\u5c0f\u5dee \\(\\le k\\)</li> </ul> <p>\\(n,k\\le 10^6,c_i\\le 10^6,q\\le 10^6\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b i \u5b9a\u7fa9 last[i] = \u5f9e i \u958b\u59cb\u6700\u5927\u53ef\u4ee5\u5230\u54ea\u500b index \u6eff\u8db3\u5340\u9593 max - min &lt;= k</p> <p>\u9019\u53ef\u4ee5\u7528 two pointer + sparse table \u9810\u8655\u7406</p> <p>\u7136\u5f8c\u5c0d\u65bc query(l, r) \u5c31\u53ef\u4ee5\u4e8c\u5206\u641c\u6700\u5927\u7684\u5206\u754c\u9ede t\uff0c\u6eff\u8db3\u524d\u9762\u7684 last[i] \u90fd &lt;= r\uff0c\u5f8c\u9762\u7684\u90fd &gt; r\u3002\u524d\u9762\u7684\u53ef\u4ee5\u5c0d\u65bc last[ ] \u7dad\u8b77 prefix sum\uff0c\u5f8c\u9762\u7528\u6578\u5b78\u89e3 O(1) \u7b97\u5373\u53ef</p>"},{"location":"ds/sparse_table/#disjoint-sparse-table","title":"Disjoint Sparse Table","text":"<p>https://codeforces.com/blog/entry/87940</p> <p>query[l, r]</p> <p>\u5efa\u7acb log n \u500b level</p> <p>level[i] \u8655\u7406 l \u548c r \u6700\u9ad8\u4f4d\u76f8\u7570 bit \u662f i \u7684 query</p>"},{"location":"ds/treap/","title":"Treap","text":""},{"location":"ds/treap/#_1","title":"\u6027\u8cea","text":"<ul> <li>Key \u5177\u6709\u6a39\u6027\u8cea<ul> <li>\u5de6\u5b50\u6a39 &lt; \u6839</li> <li>\u53f3\u5b50\u6a39 &gt; \u6839</li> </ul> </li> <li>Priority \u5177\u6709\u5806\u6027\u8cea<ul> <li>\u7236\u7bc0\u9ede &gt; \u5b50\u7bc0\u9ede</li> </ul> </li> </ul> Treap \u7684\u9ad8\u5ea6\u5728\u671f\u671b\u4e0b\u662f \\(O(\\log n)\\) <p>\u5b9a\u7fa9 \\(H(n)\\) \u70ba \\(n\\) \u500b node \u7684\u5e73\u5747\u6a39\u9ad8\uff0c\u76ee\u524d Treap \u7684 key \u4e2d\u5e8f\u662f \\(k_1,\\ldots,k_n\\)</p> <p>\u6211\u5011\u5c07 \\(k_1,\\ldots,k_n\\) \u5229\u7528\u56db\u5206\u4f4d\u8ddd\u5207\u6210\u56db\u584a</p> <p></p> <p>\u5e73\u5747\u4e0a\u6709 \\(\\displaystyle \\frac{1}{2}\\) \u7684\u6a5f\u7387\uff0croot \u6703\u5207\u5728\u4e2d\u9593\u5169\u584a\uff0c\u9019\u6642 worst case \u6703\u662f\u5207\u5728\u6700\u908a\u908a\u7684\u5730\u65b9\uff08\u9019\u6a23\u5176\u4e2d\u4e00\u908a\u7684\u9ede\u6578\u6703\u7279\u5225\u591a\uff09\uff0c\u9ad8\u5ea6\u53ea\u9808\u9ad8\u5ea6\u770b\u6bd4\u8f03\u9ad8\u7684\u5b50\u6a39\uff0c\u6240\u4ee5 \\(\\displaystyle H(n)=H(\\frac{3}{4}n)+1\\)</p> <p></p> <p></p> <p>\u5e73\u5747\u4e0a\u6709 \\(\\displaystyle \\frac{1}{2}\\) \u7684\u6a5f\u7387\uff0croot \u6703\u5207\u5728\u6700\u524d\u9762\u8207\u6700\u5f8c\u9762\u5169\u584a\uff0c\u9019\u6642 worst case \u6703\u662f\u5207\u5728\u6700\u908a\u908a\u7684\u5730\u65b9\uff0c\u9ad8\u5ea6\u53ea\u9808\u9ad8\u5ea6\u770b\u6bd4\u8f03\u9ad8\u7684\u5b50\u6a39\uff0c\u6240\u4ee5 \\(H(n)=H(n-1)+1\\)</p> \\[ \\begin{align} &amp; H(n)=\\frac{1}{2}\\left(H(\\frac{3}{4}n)+1\\right)+\\frac{1}{2}\\left( H(n-1)+1 \\right) \\\\ &amp; \\Rightarrow H(n) \\le \\frac{1}{2} H(\\frac{3}{4}n)+1 + \\frac{1}{2}H(n) \\\\ &amp; \\Rightarrow \\frac{1}{2}H(n) \\le \\frac{1}{2} H(\\frac{3}{4}n)+1 \\\\ &amp; \\Rightarrow H(n)\\le H(\\frac{3}{4}n)+2 \\\\ &amp; \\Rightarrow H(n) = H(\\frac{3}{4}n)+2 \\\\ &amp; \\Rightarrow H(n) = O(2\\times \\log_{\\frac{4}{3}} n)\\end{align} \\] <p>\u63db\u5e95\u516c\u5f0f : \\(\\log_a n=\\log_a b \\times \\log_b n\\)</p> <p>\u6839\u64da\u63db\u5e95\u516c\u5f0f : \\(2\\log_{\\frac{4}{3}}n=2\\times \\log_{\\frac{4}{3}}2\\times \\log_2 n\\)</p> <p>\u6240\u4ee5 \\(H(n)=O(2\\times \\log_{\\frac{4}{3}}2\\times \\log_2 n)=O(\\log n)\\)</p> <p>\u6545\u6709 \\(n\\) \u500b\u9ede\u7684 Treap \u7684\u9ad8\u5ea6\u9ad8\u6a5f\u7387\u70ba \\(O(\\log n)\\)\uff08\u5931\u6557\u7387 \\(\\displaystyle &lt;\\frac{1}{n^c}\\)\uff09</p>"},{"location":"ds/treap/#_2","title":"\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"ds/treap/#struct","title":"struct","text":""},{"location":"ds/treap/#_3","title":"\u8b8a\u6578","text":"<ul> <li> <p>key\uff1a\u6bd4\u8f03\u7684\u4f9d\u64da\uff0c\u5728\u4e2d\u5e8f<sup>1</sup>\u8981\u7531\u5c0f\u5230\u5927</p> </li> <li> <p>priority \uff1a\u7dad\u6301 treap \u5f62\u72c0\u7684\u4f9d\u64da\uff0c\u6700\u5927\u503c\u5728 root</p> </li> <li> <p>val\uff1a\u8981\u5132\u5b58\u7684\u8cc7\u6599</p> </li> <li> <p>lc, rc\uff1a\u5de6\u53f3\u5b50\u6a39\u7684 pointer</p> </li> </ul>"},{"location":"ds/treap/#_4","title":"\u51fd\u5f0f","text":"<ul> <li> <p>push()\uff1a\u628a root \u7684\u8cc7\u8a0a\u50b3\u905e\u7d66\u5b50\u6a39\uff08\u547c\u53eb\u6642\u653e\u5728\u8981\u7528\u5230 lc, rc \u4e4b\u524d\uff09</p> </li> <li> <p>pull()\uff1a\u628a\u5b50\u6a39\u7684\u8cc7\u8a0a\u66f4\u65b0\u5230 root</p> </li> </ul> code <pre><code>struct Node {\n    int pri;\n    char val;\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int sz = 1;\n\n    Node (char val) : val(val), pri(rand()) {}\n\n    void pull() {\n        sz = 1;\n        if (lc) sz += lc-&gt;sz;\n        if (rc) sz += rc-&gt;sz;\n    }\n};\n</code></pre>"},{"location":"ds/treap/#merge","title":"Merge","text":"<p>merge(a, b)\uff1a\u628a\u5169\u500b treap a, b \u5408\u4f75\u6210\u4e00\u500b treap\uff0c\u7528\u4e2d\u5e8f\u770b a \u5728\u5de6\u908a\uff0cb \u5728\u53f3\u908a</p> <p>\u3010\u524d\u63d0\u3011: \u5047\u8a2d a \u7684 key \u90fd\u5c0f\u65bc b \u7684 key</p> code <pre><code>Node* Merge(Node* a, Node* b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) {\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n</code></pre>"},{"location":"ds/treap/#split","title":"Split","text":"<p>split(t, k)\uff1a\u628a treap \u6309\u7167 key \u5206\u6210\u5169\u9846\uff0c\u7b2c\u4e00\u9846\u7684 key \u90fd\u8981\u5c0f\u65bc\u7b49\u65bc k</p> <p>\u3010\u524d\u63d0\u3011: \u5de6\u908a treap \u7684 key &lt; \u53f3\u908a treap \u7684key</p> code <pre><code>pair&lt;Node*, Node*&gt; Split(Node* root, int val) {\n    if (!root) return {nullptr, nullptr};\n\n    if (root-&gt;key &lt;= val) {\n        auto [A, B] = Split(root-&gt;rc, val);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = Split(root-&gt;lc, val);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n</code></pre>"},{"location":"ds/treap/#split-by-size","title":"Split by size","text":"<p>splitBySize(t, k)\uff1a\u628a treap \u6309\u7167\u4e2d\u5e8f\u5206\u6210\u5169\u68f5\uff0c\u7b2c\u4e00\u68f5\u7684\u5305\u542b\u6070\u597d k \u500b node\uff0c\u7b2c\u4e8c\u68f5\u5305\u542b\u5269\u4e0b\u7684 n-k \u500b node</p> <p>\u3010\u524d\u63d0\u3011: \u5de6\u908a treap \u7684 key &lt; \u53f3\u908a treap \u7684 key</p> code <pre><code>// \u628a\u4e00\u500b treap split \u6210\u5169\u500b treap\uff0c\u6eff\u8db3\u5de6\u908a\u7684 treap \u525b\u597d\u6709 k \u500b\u7bc0\u9ede\uff0c\n// \u9019 k \u500b\u7bc0\u9ede\u662f\u672c\u4f86 treap \u4e2d\u5e8f\u8f38\u51fa\u7684\u524d k \u500b\u7bc0\u9ede\n//\n// \u5de6\u908a treap \u7684 key &lt; \u53f3\u908a treap \u7684key\npair&lt;Node*, Node*&gt; SplitBySize(Node* root, int k) {\n    if (!root) return {nullptr, nullptr};\n\n    int cntL;  // \u5de6\u5b50\u6a39\uff0broot \u7bc0\u9ede\n    if (root-&gt;lc) {\n        cntL = root-&gt;lc-&gt;sz + 1;\n    } else {\n        cntL = 1;\n    }\n\n    if (cntL &lt;= k) {  // root \u653e\u5de6\u908a\n        auto [A, B] = SplitBySize(root-&gt;rc, k - cntL);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = SplitBySize(root-&gt;lc, k);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n</code></pre>"},{"location":"ds/treap/#_5","title":"\u4f8b\u984c","text":"CSES - Cut and Paste <p>\u7d66\u4f60\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5b57\u6bcd\u4e32\uff0c\\(q\\) \u6b21\u5c07 \\((l, r)\\) \u526a\u4e0b\u8cbc\u5230\u5b57\u6bcd\u4e32\u7684\u5c3e\u7aef\uff0c\u554f\u6700\u5f8c\u7684\u5b57\u6bcd\u4e32</p> <p>\\(n,q\\le 2\\times 10^5\\)</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\nusing namespace std;\n\nstruct Node {\n    // int key;\n    char val;\n    int pri;\n    int sz = 1;\n    int h = 0;\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n\n    Node(char val) : val(val), pri(rand()) {\n    }\n    void pull() {\n        h = 0;\n        if (lc) h = max(h, lc-&gt;h + 1);\n        if (rc) h = max(h, rc-&gt;h + 1);\n        sz = 1;\n        if (lc) sz += lc-&gt;sz;\n        if (rc) sz += rc-&gt;sz;\n    }\n};\n\n// \u5047\u8a2d a \u7684 key \u90fd\u5c0f\u65bc b \u7684 key\nNode* Merge(Node* a, Node* b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) {\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n\n// \u628a\u4e00\u500b treap split \u6210\u5169\u500b treap\uff0c\u6eff\u8db3\u5de6\u908a\u7684 treap \u525b\u597d\u6709 k \u500b\u7bc0\u9ede\uff0c\n// \u9019 k \u500b\u7bc0\u9ede\u662f\u672c\u4f86 treap \u4e2d\u5e8f\u8f38\u51fa\u7684\u524d k \u500b\u7bc0\u9ede\n//\n// \u5de6\u908a treap \u7684 key &lt; \u53f3\u908a treap \u7684key\npair&lt;Node*, Node*&gt; SplitBySize(Node* root, int k) {\n    if (!root) return {nullptr, nullptr};\n\n    int cntL;  // \u5de6\u5b50\u6a39\uff0broot \u7bc0\u9ede\n    if (root-&gt;lc) {\n        cntL = root-&gt;lc-&gt;sz + 1;\n    } else {\n        cntL = 1;\n    }\n\n    if (cntL &lt;= k) {  // root \u653e\u5de6\u908a\n        auto [A, B] = SplitBySize(root-&gt;rc, k - cntL);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = SplitBySize(root-&gt;lc, k);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n\n/*\npair&lt;Node*, Node*&gt; Split(Node* root, int val) {\n    if (!root) return {nullptr, nullptr};\n\n    if (root-&gt;key &lt;= val) {\n        auto [A, B] = Split(root-&gt;rc, val);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = Split(root-&gt;lc, val);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n*/\n\nint main() {\n    int n, q;\n    string str;\n\n    cin &gt;&gt; n &gt;&gt; q;\n    cin &gt;&gt; str;\n\n    Node* root = nullptr;\n    for (int i = 0; i &lt; n; i++) {\n        Node* x = new Node(str[i]);\n        root = Merge(root, x);\n    }\n\n    while (q--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        auto [tmp, C] = SplitBySize(root, r);\n        auto [A, B] = SplitBySize(tmp, l - 1);\n        root = Merge(A, Merge(C, B));\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        auto [x, tmp] = SplitBySize(root, 1);\n        cout &lt;&lt; x-&gt;val;\n        root = tmp;\n    }\n\n    return 0;\n}\n</code></pre> CSES - Substring Reversals <p>\u7d66\u4f60\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5b57\u6bcd\u4e32\uff0c\\(q\\) \u6b21 reverse\\((l, r)\\)\uff0c\u554f\u6700\u5f8c\u7684\u5b57\u6bcd\u4e32</p> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u5be6\u4f5c\u7d30\u7bc0 <p>\u6ce8\u610f reverse \u61f6\u6a19\u518d\u66f4\u6539\u6642\u662f xor </p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\nusing namespace std;\n\nstruct Node {\n    // int key;\n    char val;\n    int pri;\n    int sz = 1;\n    int h = 0;\n    bool rev = false;  // \u662f\u5426\u8981\u53cd\u8f49\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n\n    Node(char val) : val(val), pri(rand()) {\n    }\n    void pull() {\n        h = 0;\n        if (lc) h = max(h, lc-&gt;h + 1);\n        if (rc) h = max(h, rc-&gt;h + 1);\n        sz = 1;\n        if (lc) sz += lc-&gt;sz;\n        if (rc) sz += rc-&gt;sz;\n    }\n    void push() {\n        if (rev) {\n            swap(lc, rc);\n            if (lc) lc-&gt;rev ^= 1;\n            if (rc) rc-&gt;rev ^= 1;\n            rev = false;\n        }\n    }\n};\n\n// \u5047\u8a2d a \u7684 key \u90fd\u5c0f\u65bc b \u7684 key\nNode* Merge(Node* a, Node* b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) {\n        a-&gt;push();\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b-&gt;push();\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n\n// \u628a\u4e00\u500b treap split \u6210\u5169\u500b treap\uff0c\u6eff\u8db3\u5de6\u908a\u7684 treap \u525b\u597d\u6709 k \u500b\u7bc0\u9ede\uff0c\n// \u9019 k \u500b\u7bc0\u9ede\u662f\u672c\u4f86 treap \u4e2d\u5e8f\u8f38\u51fa\u7684\u524d k \u500b\u7bc0\u9ede\n//\n// \u5de6\u908a treap \u7684 key &lt; \u53f3\u908a treap \u7684key\npair&lt;Node*, Node*&gt; SplitBySize(Node* root, int k) {\n    if (!root) return {nullptr, nullptr};\n\n    root-&gt;push();\n\n    int cntL;  // \u5de6\u5b50\u6a39\uff0broot \u7bc0\u9ede\n    if (root-&gt;lc) {\n        cntL = root-&gt;lc-&gt;sz + 1;\n    } else {\n        cntL = 1;\n    }\n\n    if (cntL &lt;= k) {  // root \u653e\u5de6\u908a\n        auto [A, B] = SplitBySize(root-&gt;rc, k - cntL);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = SplitBySize(root-&gt;lc, k);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n\n/*\npair&lt;Node*, Node*&gt; Split(Node* root, int val) {\n    if (!root) return {nullptr, nullptr};\n\n    if (root-&gt;key &lt;= val) {\n        auto [A, B] = Split(root-&gt;rc, val);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = Split(root-&gt;lc, val);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n*/\n\nint main() {\n    int n, q;\n    string str;\n\n    cin &gt;&gt; n &gt;&gt; q;\n    cin &gt;&gt; str;\n\n    Node* root = nullptr;\n    for (int i = 0; i &lt; n; i++) {\n        Node* x = new Node(str[i]);\n        root = Merge(root, x);\n    }\n\n    while (q--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        auto [tmp, C] = SplitBySize(root, r);\n        auto [A, B] = SplitBySize(tmp, l - 1);\n        B-&gt;rev ^= 1;\n        root = Merge(A, Merge(B, C));\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        auto [x, tmp] = SplitBySize(root, 1);\n        cout &lt;&lt; x-&gt;val;\n        root = tmp;\n    }\n\n    return 0;\n}\n</code></pre> CSES - Reversals and Sums <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots, a_n\\)\uff0c\\(q\\) \u6b21\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{reverse}(l,r)\\)</p> </li> <li> <p>\\(\\text{sum}(l,r):\\) \u8f38\u51fa \\(a_l+\\ldots+a_r\\) </p> </li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u5be6\u4f5c\u7d30\u7bc0 <p>\u5728 <code>Node (int val) : val(val), pri(rand()), sum(val) {}</code> \u88e1\u9762\u8981\u8a18\u5f97\u52a0 <code>sum(val)</code> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstruct Node {\n    int pri;\n    int val;\n    int sz = 1;\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int rev = 0;\n    int sum;\n\n    Node (int val) : val(val), pri(rand()), sum(val) {}\n\n    void pull () {\n        sum = val;\n        sz = 1;\n        if (lc) {\n            sz += lc-&gt;sz;\n            sum += lc-&gt;sum;\n        }\n        if (rc) {\n            sz += rc-&gt;sz;\n            sum += rc-&gt;sum;\n        }\n    }\n\n    void push () {\n        if (rev) {\n            swap (lc, rc);\n            if (lc) lc-&gt;rev ^= 1;\n            if (rc) rc-&gt;rev ^= 1;\n            rev = false;\n        }\n    }\n};\n\nNode* Merge(Node* a, Node* b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) {\n        a-&gt;push();\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b-&gt;push();\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n\npair&lt;Node*, Node*&gt; SplitBySize(Node* root, int k) {\n    if (!root) return {nullptr, nullptr};\n\n    root-&gt;push();\n\n    int cntL;\n    if (root-&gt;lc) cntL = root-&gt;lc-&gt;sz + 1;\n    else cntL = 1;\n\n    if (cntL &lt;= k) {\n        auto [A, B] = SplitBySize(root-&gt;rc, k - cntL);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = SplitBySize(root-&gt;lc, k);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n\nsigned main() {\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    Node* root = nullptr;\n    for (int i = 0; i &lt; n; i++) {\n        int x;\n        cin &gt;&gt; x; \n        Node* tmp = new Node(x);\n        root = Merge(root, tmp);\n    }\n\n    while(q--) {\n        int op, l, r;\n        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;\n        if (op == 1) {\n            auto [A, B] = SplitBySize(root, r);\n            auto [C, D] = SplitBySize(A, l - 1);\n            D-&gt;rev ^= 1;\n            root = Merge(Merge(C, D), B);\n        } else {\n            auto [A, B] = SplitBySize(root, r);\n            auto [C, D] = SplitBySize(A, l - 1);\n            cout &lt;&lt; D-&gt;sum &lt;&lt; '\\n';\n            root = Merge(Merge(C, D), B);\n        }\n    }\n} \n</code></pre> \u5e36\u65cb\u8f49\u5340\u9593\u9023\u7e8c\u6700\u5927\u548c <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots, a_n\\)\uff0c\\(q\\) \u6b21\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{reverse}(l,r)\\)</p> </li> <li> <p>\\(\\text{query}(l,r):\\) \u8f38\u51fa \\(a_l,\\ldots, a_r\\) \u7684\u6700\u5927\u9023\u7e8c\u548c</p> </li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5728 pull \u7684\u6642\u5019\u5c31\u7167\u7dda\u6bb5\u6a39\u90a3\u6a23\u64cd\u4f5c\u5c31\u597d\uff0c\u53ea\u662f\u5728 push \u7684\u6642\u5019\u5982\u4e0b</p> <p> lc, rc \u7684 pre, suf \u8981 swap\uff0c\u800c ans, sum \u4e0d\u7528\u8b8a </p> Treap - rank tree LOJ #104. \u666e\u901a\u5e73\u8861\u6811 <p>\u5be6\u4f5c Treap\uff0c\u7dad\u8b77\u652f\u63f4\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u63d2\u5165 \\(x\\)</li> <li>\u522a\u9664 \\(x\\)</li> <li>\u67e5\u8a62 \\(x\\) \u7684\u662f\u7b2c\u5e7e\u5c0f</li> <li>\u67e5\u8a62\u7b2c \\(k\\) \u5c0f\u7684\u6578</li> <li>\u6c42\u5c0f\u65bc \\(x\\)\uff0c\u6700\u5927\u7684\u6578</li> <li>\u6c42\u5927\u65bc \\(x\\)\uff0c\u6700\u5c0f\u7684\u6578</li> </ol> <p>\\(1 \\leq n \\leq 10^5,|x|\\le 10^7\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u5beb\u4e00\u500b find_kth() \u7684 function\uff0c\u4ee5\u65b9\u4fbf\u67e5\u627e\uff08\u56e0\u70ba\u662f multiset \u6240\u4ee5 SplitBySize \u6703\u58de\u6389\uff0c\u6240\u4ee5\u7528 find_kth() \u4ee3\u66ff\uff09</p> \u5be6\u4f5c\u7d30\u7bc0 <p>\u5728\u66f4\u52d5 cnt \u6642\u8a18\u5f97 sz \u4e5f\u8981\u4e00\u8d77\u6539\u8b8a</p> code <pre><code>#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Node {\n    int key, pri;\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int sz = 1;\n    int cnt = 1;\n\n    Node(int key) : key(key), pri(rand()) {\n    }\n\n    void pull() {\n        sz = cnt;\n        if (lc) sz += lc-&gt;sz;\n        if (rc) sz += rc-&gt;sz;\n    }\n};\n\nNode* Merge(Node* a, Node* b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) {\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n\n// [A, B] : A &lt;= val, B &gt; val\npair&lt;Node*, Node*&gt; Split(Node* root, int val) {\n    if (!root) return {nullptr, nullptr};\n\n    if (root-&gt;key &lt;= val) {\n        auto [A, B] = Split(root-&gt;rc, val);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = Split(root-&gt;lc, val);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n\nNode* find_kth(Node* root, int k) {\n    if (!root) return nullptr;\n\n    int cntL;\n    if (root-&gt;lc) {\n        cntL = root-&gt;lc-&gt;sz;\n    } else {\n        cntL = 0;\n    }\n\n    if (cntL &gt;= k) {  // in left\n        return find_kth(root-&gt;lc, k);\n    } else if (cntL + root-&gt;cnt &gt;= k) {\n        return root;\n    } else {\n        return find_kth(root-&gt;rc, k - cntL - root-&gt;cnt);\n    }\n}\n\nvoid DFS(Node* root) { // debug\n    if (root == nullptr) return;\n    if (root-&gt;lc) DFS(root-&gt;lc);\n    cerr &lt;&lt; root-&gt;key &lt;&lt; \" \";\n    if (root-&gt;rc) DFS(root-&gt;rc);\n}\nvoid print(Node* root) { // debug\n    cerr &lt;&lt; \"DFS: \";\n    DFS(root);\n    cerr &lt;&lt; '\\n';\n}\n\nstruct DS {\n    Node* root = nullptr;\n\n    void insert(int x) {\n        auto [A, B] = Split(root, x - 1);\n        auto [C, D] = Split(B, x);\n        if (C == nullptr) {\n            Node* tmp = new Node(x);\n            root = Merge(A, Merge(tmp, D));\n            return;\n        }\n        C-&gt;cnt++;\n        C-&gt;sz++;\n        root = Merge(A, Merge(C, D));\n    }\n\n    int erase(int x) {\n        auto [A, B] = Split(root, x - 1);\n        auto [C, D] = Split(B, x);\n        if (C == nullptr) {\n            root = Merge(A, D);\n            return -1;\n        }\n        C-&gt;cnt--;\n        C-&gt;sz--;\n        if (C-&gt;cnt == 0) {\n            delete C;\n            C = nullptr;\n        }\n        root = Merge(A, Merge(C, D));\n        return 1;\n    }\n\n    int find_rank(int x) {\n        auto [A, B] = Split(root, x - 1);\n        // cerr &lt;&lt; \"A :\";\n        // ::print(A);\n        // cerr &lt;&lt; \"B :\";\n        // ::print(B);\n        if (A == nullptr) {\n            root = Merge(A, B);\n            return 1;\n        }\n        int ans = A-&gt;sz + 1;\n        root = Merge(A, B);\n        return ans;\n    }\n\n    int find_by_order(int k) {\n        Node* x = find_kth(root, k);\n        if (x == nullptr) return -1;\n        return x-&gt;key;\n    }\n\n    int find_largest_less(int x) {\n        auto [A, B] = Split(root, x - 1);\n        if (A == nullptr) {\n            root = Merge(A, B);\n            return -1;\n        }\n        Node* tmp = find_kth(A, A-&gt;sz);\n        root = Merge(A, B);\n        if (tmp == nullptr) return -1;\n        return tmp-&gt;key;\n    }\n\n    int find_smallest_greater(int x) {\n        auto [A, B] = Split(root, x);\n        if (B == nullptr) {\n            root = Merge(A, B);\n            return -1;\n        }\n        Node* tmp = find_kth(B, 1);\n        root = Merge(A, B);\n        if (tmp == nullptr) return -1;\n        return tmp-&gt;key;\n    }\n\n    void print() { // debug\n        cerr &lt;&lt; \"DFS: \";\n        DFS(root);\n        cerr &lt;&lt; '\\n';\n    }\n};\n\nsigned main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    int q;\n    cin &gt;&gt; q;\n\n    DS rank_tree;\n\n    int op, x;\n    while (q--) {\n        cin &gt;&gt; op &gt;&gt; x;\n        if (op == 1) {\n            rank_tree.insert(x);\n        } else if (op == 2) {\n            rank_tree.erase(x);\n        } else if (op == 3) {\n            cout &lt;&lt; rank_tree.find_rank(x) &lt;&lt; '\\n';\n        } else if (op == 4) {\n            cout &lt;&lt; rank_tree.find_by_order(x) &lt;&lt; '\\n';\n        } else if (op == 5) {\n            cout &lt;&lt; rank_tree.find_largest_less(x) &lt;&lt; '\\n';\n        } else if (op == 6) {\n            cout &lt;&lt; rank_tree.find_smallest_greater(x) &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre> Treap - rank tree \u6578\u64da\u52a0\u5f37\u7248 LOJ #107. \u7ef4\u62a4\u5168\u5e8f\u96c6 <p>\u7dad\u8b77\u4e00\u500b multiset\uff0c\u652f\u63f4\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u63d2\u5165 \\(x\\)</li> <li>\u522a\u9664 \\(x\\)</li> <li>\u67e5\u8a62\u7b2c \\(k\\) \u5c0f\u7684\u6578</li> <li>\u67e5\u8a62\u6709\u5e7e\u500b\u6578\u5b57\u5c0f\u65bc \\(x\\) </li> <li>\u6c42\u5c0f\u65bc \\(x\\)\uff0c\u6700\u5927\u7684\u6578</li> <li>\u6c42\u5927\u65bc \\(x\\)\uff0c\u6700\u5c0f\u7684\u6578</li> </ol> <p>\\(1\\le n\\le 3\\times 10^5,0\\le x\\le 10^9\\)</p> code <pre><code>#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Node {\n    int key, pri;\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int sz = 1;\n    int cnt = 1;\n\n    Node(int key) : key(key), pri(rand()) {\n    }\n\n    void pull() {\n        sz = cnt;\n\n        if (lc)\n            sz += lc-&gt;sz;\n\n        if (rc)\n            sz += rc-&gt;sz;\n    }\n};\n\nNode *Merge(Node *a, Node *b) {\n    if (!a)\n        return b;\n\n    if (!b)\n        return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) {\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n\n// [A, B] : A &lt;= val, B &gt; val\npair&lt;Node *, Node *&gt; Split(Node *root, int val) {\n    if (!root)\n        return {nullptr, nullptr};\n\n    if (root-&gt;key &lt;= val) {\n        auto [A, B] = Split(root-&gt;rc, val);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = Split(root-&gt;lc, val);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n\nNode *find_kth(Node *root, int k) {\n    if (!root)\n        return nullptr;\n\n    int cntL;\n\n    if (root-&gt;lc) {\n        cntL = root-&gt;lc-&gt;sz;\n    } else {\n        cntL = 0;\n    }\n\n    if (cntL &gt;= k) {  // in left\n        return find_kth(root-&gt;lc, k);\n    } else if (cntL + root-&gt;cnt &gt;= k) {\n        return root;\n    } else {\n        return find_kth(root-&gt;rc, k - cntL - root-&gt;cnt);\n    }\n}\n\nvoid DFS(Node *root) { // debug\n    if (root == nullptr)\n        return;\n\n    if (root-&gt;lc)\n        DFS(root-&gt;lc);\n\n    cerr &lt;&lt; root-&gt;key &lt;&lt; \" \";\n\n    if (root-&gt;rc)\n        DFS(root-&gt;rc);\n}\nvoid print(Node *root) { // debug\n    cerr &lt;&lt; \"DFS: \";\n    DFS(root);\n    cerr &lt;&lt; '\\n';\n}\n\nstruct DS {\n    Node *root = nullptr;\n\n    void insert(int x) {\n        auto [A, B] = Split(root, x - 1);\n        auto [C, D] = Split(B, x);\n\n        if (C == nullptr) {\n            Node *tmp = new Node(x);\n            root = Merge(A, Merge(tmp, D));\n            return;\n        }\n\n        C-&gt;cnt++;\n        C-&gt;sz++;\n        root = Merge(A, Merge(C, D));\n    }\n\n    int erase(int x) {\n        auto [A, B] = Split(root, x - 1);\n        auto [C, D] = Split(B, x);\n\n        if (C == nullptr) {\n            root = Merge(A, D);\n            return -1;\n        }\n\n        C-&gt;cnt--;\n        C-&gt;sz--;\n\n        if (C-&gt;cnt == 0) {\n            delete C;\n            C = nullptr;\n        }\n\n        root = Merge(A, Merge(C, D));\n        return 1;\n    }\n\n    int find_rank(int x) {\n        auto [A, B] = Split(root, x - 1);\n\n        if (A == nullptr) {\n            root = Merge(A, B);\n            return 0;\n        }\n\n        int ans = A-&gt;sz;\n        root = Merge(A, B);\n        return ans;\n    }\n\n    int find_by_order(int k) {\n        Node *x = find_kth(root, k);\n\n        if (x == nullptr)\n            return -1;\n\n        return x-&gt;key;\n    }\n\n    int find_largest_less(int x) {\n        auto [A, B] = Split(root, x - 1);\n\n        if (A == nullptr) {\n            root = Merge(A, B);\n            return -1;\n        }\n\n        Node *tmp = find_kth(A, A-&gt;sz);\n        root = Merge(A, B);\n\n        if (tmp == nullptr)\n            return -1;\n\n        return tmp-&gt;key;\n    }\n\n    int find_smallest_greater(int x) {\n        auto [A, B] = Split(root, x);\n\n        if (B == nullptr) {\n            root = Merge(A, B);\n            return -1;\n        }\n\n        Node *tmp = find_kth(B, 1);\n        root = Merge(A, B);\n\n        if (tmp == nullptr)\n            return -1;\n\n        return tmp-&gt;key;\n    }\n\n    void print() { // debug\n        cerr &lt;&lt; \"DFS: \";\n        DFS(root);\n        cerr &lt;&lt; '\\n';\n    }\n};\n\nsigned main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    int q;\n    cin &gt;&gt; q;\n\n    DS rank_tree;\n\n    int op, x;\n\n    while (q--) {\n        cin &gt;&gt; op &gt;&gt; x;\n\n        if (op == 0) {\n            rank_tree.insert(x);\n        } else if (op == 1) {\n            rank_tree.erase(x);\n        } else if (op == 2) {\n            cout &lt;&lt; rank_tree.find_by_order(x) &lt;&lt; '\\n';\n        } else if (op == 3) {\n            cout &lt;&lt; rank_tree.find_rank(x) &lt;&lt; '\\n';\n        } else if (op == 4) {\n            cout &lt;&lt; rank_tree.find_largest_less(x) &lt;&lt; '\\n';\n        } else if (op == 5) {\n            cout &lt;&lt; rank_tree.find_smallest_greater(x) &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre> POJ-3580 SuperMemo <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 <code>A[]</code>\uff0c\\(m\\) \u500b\u4ee5\u4e0b\u64cd\u4f5c:</p> <ul> <li> <p><code>ADD l r k</code> : \u5c07 <code>A[l, r]</code> \u7684\u6bcf\u4e00\u9805\u90fd\u52a0\u4e0a <code>k</code></p> </li> <li> <p><code>REVERSE l r</code> : \u5c07 <code>A[l, r]</code> \u53cd\u8f49</p> </li> <li> <p><code>REVOLVE l r k</code> : \u5c07 <code>A[l, r]</code> \u53f3\u65cb <code>k</code> \u683c</p> </li> <li> <p><code>INSERT i x</code> : \u5c07 <code>x</code> \u63d2\u5165\u5230 <code>A[i]</code> \u9019\u4e00\u9805\u7684\u5f8c\u9762</p> </li> <li> <p><code>DELETE i</code> : \u522a\u9664 <code>A[i]</code> \u9019\u4e00\u9805</p> </li> <li> <p><code>MIN l r</code> : \u8f38\u51fa <code>A[l, r]</code> \u4e2d\u7684\u6700\u5c0f\u503c</p> </li> </ul> <p>\\(n,m\\le 10^6\\)</p> \u5be6\u4f5c\u7d30\u7bc0 <p>\u56e0\u70ba\u662f POJ \u7248\u672c\u820a\u7684\u95dc\u4fc2\u8981</p> <pre><code>#define nullptr NULL\n</code></pre> <p>\u4e5f\u4e0d\u80fd\u4f7f\u7528 auto\uff0c\u6240\u4ee5\u6539\u7528 <code>pair&lt;Node*, Node*&gt;</code> </p> <p>\u9084\u6709 struct \u88e1\u9762\u4e0d\u80fd\u76f4\u63a5 assign \u8b8a\u6578\u7684\u9810\u8a2d\u503c</p> <p>\u9084\u6709 Node \u4e0d\u8981\u7dad\u8b77\u591a\u9918\u7684\u8cc7\u8a0a\uff08\u4f8b\u5982 sum\uff09\uff0c\u4e0d\u7136\u6703 TLE\u3000</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n#define nullptr NULL\n\nusing namespace std;\n\nstruct Node {\n    int pri;\n    Node* lc;\n    Node* rc;\n    // lazy tag\n    int rev;\n    int add;\n    // original data\n    int sz;\n    // extra data\n    int val;\n    int mn;\n\n    Node (int val) : val(val), mn(val) , pri(rand()), \n                     lc(nullptr), rc(nullptr), sz(1), rev(0), add(0) {}\n\n    void push() {\n        if (rev) {\n            swap(lc, rc);\n            if (lc) lc-&gt;rev ^= 1;\n            if (rc) rc-&gt;rev ^= 1;\n            rev = 0;\n        }\n        if (add) {\n            if (lc) {\n                lc-&gt;add += add;\n                lc-&gt;val += add;\n                lc-&gt;mn += add;\n            }\n            if (rc) {\n                rc-&gt;add += add;\n                rc-&gt;val += add;\n                rc-&gt;mn += add;\n            }\n            add = 0;\n        }\n    }\n\n    void pull() {\n        mn = val;\n        sz = 1;\n        if (lc) {\n            mn = min(lc-&gt;mn, mn);\n            sz += lc-&gt;sz;\n        }\n        if (rc) {\n            mn = min(rc-&gt;mn, mn);\n            sz += rc-&gt;sz;\n        }\n    }\n};\n\nstruct DS {\n    void init(const vector&lt;int&gt; &amp;a) {\n        root = nullptr;\n        for (int i = 0; i &lt; (int)a.size(); i++) {\n            Node* tmp = new Node(a[i]);\n            root = Merge(root, tmp);\n        }\n    }\n\n    void insert(int k, int x) {\n        pair&lt;Node*, Node*&gt; p1 = SplitBySize(root, k);\n        Node* tmp = new Node(x);\n        root = Merge(p1.F, Merge(tmp, p1.S));\n    }\n\n    void erase(int k) {\n        pair&lt;Node*, Node*&gt; p1 = SplitBySize(root, k - 1);\n        pair&lt;Node*, Node*&gt; p2 = SplitBySize(p1.S, 1);\n        if (p2.F == nullptr) {\n            root = Merge(p1.F, p2.S);\n            return;\n        }\n        root = Merge(p1.F, p2.S);\n    }\n\n    void add(int l, int r, int k) {\n        pair&lt;Node*, Node*&gt; p1 = SplitBySize(root, r);\n        pair&lt;Node*, Node*&gt; p2 = SplitBySize(p1.F, l - 1);\n        if (p2.S == nullptr) {\n            root = Merge(p2.F, p1.S);\n            return;\n        }\n        p2.S-&gt;add += k;\n        p2.S-&gt;mn += k;\n        p2.S-&gt;val += k;\n        root = Merge(Merge(p2.F, p2.S), p1.S);\n    }\n\n    void reverse(int l, int r) {\n        pair&lt;Node*, Node*&gt; p1 = SplitBySize(root, r);\n        pair&lt;Node*, Node*&gt; p2 = SplitBySize(p1.F, l - 1);\n        if (p2.S == nullptr) {\n            root = Merge(p2.F, p1.S);\n            return;\n        }\n        p2.S-&gt;rev ^= 1;\n        root = Merge(Merge(p2.F, p2.S), p1.S);\n    }\n\n    int min(int l, int r) {\n        pair&lt;Node*, Node*&gt; p1 = SplitBySize(root, r);\n        pair&lt;Node*, Node*&gt; p2 = SplitBySize(p1.F, l - 1);\n        if (p2.S == nullptr) {\n            root = Merge(p2.F, p1.S);\n            return -1;\n        }\n        int ans = p2.S-&gt;mn;\n        root = Merge(Merge(p2.F, p2.S), p1.S);\n        return ans;\n    }\n\n    void revolve(int l, int r, int k) {\n        k %= (r - l + 1);\n        pair&lt;Node*, Node*&gt; p1 = SplitBySize(root, r);\n        pair&lt;Node*, Node*&gt; p2 = SplitBySize(p1.F, l - 1);\n        if (p2.S == nullptr) {\n            root = Merge(p2.F, p1.S);\n            return;\n        }\n        pair&lt;Node*, Node*&gt; p3 = SplitBySize(p2.S, (r - l + 1) - k);\n        root = Merge(Merge(p2.F, Merge(p3.S, p3.F)), p1.S);\n    }\n\n    int get_val(int k) { // debug\n        pair&lt;Node*, Node*&gt; p1 = SplitBySize(root, k - 1);\n        pair&lt;Node*, Node*&gt; p2 = SplitBySize(p1.S, 1);\n        if (p2.F == nullptr) {\n            root = Merge(p1.F, p2.S);\n            return -1;\n        }\n        int ans = p2.F-&gt;val;\n        root = Merge(p1.F, Merge(p2.F, p2.S));\n        return ans;\n    }\n\n    void print() { // debug\n        if (root == nullptr) {\n            cout &lt;&lt; \"print failed\\n\";\n            return;\n        }\n        int n = root-&gt;sz;\n        for (int i = 1; i &lt;= n; i++) {\n            cout &lt;&lt; \"i:\" &lt;&lt; i &lt;&lt; \",val:\" &lt;&lt; get_val(i) &lt;&lt; \"\\n\";\n        }\n    }\n\n    private:\n\n    Node* root;\n\n    Node* Merge(Node* a, Node* b) {\n        if (!a) return b;\n        if (!b) return a;\n\n        if (a-&gt;pri &gt; b-&gt;pri) {\n            a-&gt;push();\n            a-&gt;rc = Merge(a-&gt;rc, b);\n            a-&gt;pull();\n            return a;\n        } else {\n            b-&gt;push();\n            b-&gt;lc = Merge(a, b-&gt;lc);\n            b-&gt;pull();\n            return b;\n        }\n    }\n\n    pair&lt;Node*, Node*&gt; SplitBySize(Node* root, int k) {\n        if (!root) return {nullptr, nullptr};\n\n        root-&gt;push();\n        int cntL;\n        if (root-&gt;lc) {\n            cntL = root-&gt;lc-&gt;sz + 1;\n        } else {\n            cntL = 1;\n        }\n\n        if (cntL &lt;= k) {\n            pair&lt;Node*, Node*&gt; p = SplitBySize(root-&gt;rc, k - cntL);\n            root-&gt;rc = p.F;\n            root-&gt;pull();\n            return make_pair(root, p.S);\n        } else {\n            pair&lt;Node*, Node*&gt; p = SplitBySize(root-&gt;lc, k);\n            root-&gt;lc = p.S;\n            root-&gt;pull();\n            return make_pair(p.F, root);\n        }\n    }\n\n    void DFS(Node* root) { // debug\n        if (!root) return;\n        DFS(root-&gt;lc);\n        cout &lt;&lt; root-&gt;val &lt;&lt; '\\n';\n        DFS(root-&gt;rc);\n    }\n};\n\nint n, q;\n\nsigned main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i];\n\n    DS ds;\n    ds.init(a);\n\n    cin &gt;&gt; q;\n    while (q--) {\n        string s;\n        cin &gt;&gt; s;\n\n        if (s == \"ADD\") {\n            int l, r, k;\n            cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n            ds.add(l, r, k);\n        } else if (s == \"REVERSE\") {\n            int l, r;\n            cin &gt;&gt; l &gt;&gt; r;\n            ds.reverse(l, r);\n        } else if (s == \"REVOLVE\") {\n            int l, r, k;\n            cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n            ds.revolve(l, r, k);\n        } else if (s == \"INSERT\") {\n            int i, x;\n            cin &gt;&gt; i &gt;&gt; x;\n            ds.insert(i, x);\n        } else if (s == \"DELETE\") {\n            int i;\n            cin &gt;&gt; i;\n            ds.erase(i);\n        } else if (s == \"MIN\") {\n            int l, r;\n            cin &gt;&gt; l &gt;&gt; r;\n            cout &lt;&lt; ds.min(l, r) &lt;&lt; '\\n';\n        } else if (s == \"PRINT\") { // debug\n            ds.print();\n        }\n    }\n} \n</code></pre> \u6d1b\u8c37 P3834 - \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 2 <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\\(q\\) \u7b46\u8a62\u554f</p> <ul> <li>\\(\\text{query(}a_l\\sim a_r,k):\\) \u56de\u7b54 \\(a_l\\sim a_r\\) \u4e2d\u7b2c \\(k\\) \u5c0f\u7684\u6578\u503c\u662f\u591a\u5c11</li> </ul> <p>\\(n,q\\le 2\\times 10^5,|a_i|\\le 10^9\\)</p> \u601d\u8def <p>\u96e2\u7dda\u89e3\u6c7a\uff0c\u628a\u5340\u9593\u6392\u5e8f\u597d\uff0c\u5340\u9593\u79fb\u52d5\u6642\uff0c\u628a\u4e0d\u7528\u7684\u5143\u7d20\u522a\u6389\uff0c\u9084\u6c92\u52a0\u9032 Treap \u7684\u5143\u7d20\u52a0\u9032\u53bb</p> TIOJ 1169. \u6c23\u7403\u535a\u89bd\u6703 <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6709\u4ee5\u4e0b \\(q\\) \u7b46\u64cd\u4f5c :</p> <ul> <li> <p>\u55ae\u9ede\u4fee\u6539</p> </li> <li> <p>\u5340\u9593\u67e5\u8a62\u4e0d\u542b\u67d0\u6578\u7684\u6700\u9577\u9023\u7e8c\u5e8f\u5217</p> </li> </ul> <p>\\(n,q\\le 2\\times 10^5, a_i&lt;2^{24}\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u7a2e\u6578\u5b57\uff0c\u958b\u4e00\u500b Treap \u7d00\u9304\u51fa\u73fe\u7684 index\uff0cTreap Node \u88e1\u7dad\u8b77 :</p> <ul> <li> <p>index</p> </li> <li> <p>\u76f8\u9130\u5169\u500b\u8ddd\u96e2\u7684\u6700\u5927\u503c</p> </li> <li> <p>\u5b50\u6a39\u6700\u5c0f index</p> </li> <li> <p>\u5b50\u6a39\u6700\u5927 index</p> </li> </ul> <p>\u7576\u67e5\u8a62\u6642\u5c31 Treap[c].SplitByIndex(l, r)\uff0c\u5c07\u300c\u76f8\u9130\u5169\u500b\u8ddd\u96e2\u7684\u6700\u5927\u503c\u300d\u8207\u300cl - \u6700\u5c0f index - 1\u300d\u8207\u300cr - \u6700\u5927 index - 1\u300d\u53d6 max \u5c31\u662f\u7b54\u6848</p>"},{"location":"ds/treap/#treap","title":"\u6301\u4e45\u5316 Treap","text":""},{"location":"ds/treap/#_6","title":"\u57fa\u672c\u64cd\u4f5c","text":"<p>\u901a\u5247 : \u5728 push \u4e4b\u524d copy \u4e00\u4efd</p>"},{"location":"ds/treap/#struct_1","title":"struct","text":"<p>\u6ce8\u610f\u770b push() \u51fd\u5f0f\u88e1\u9762\u600e\u9ebc\u5beb\uff0c\u5c24\u5176\u662f\u66f4\u65b0\u9806\u5e8f</p> code <pre><code>struct Node {\n    // int key;\n    char val;\n    int pri;\n    int sz = 1;\n    int h = 0;\n    bool rev = false;  // \u662f\u5426\u8981\u53cd\u8f49\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n\n    Node(char val) : val(val), pri(rand()) {\n    }\n    void pull() {\n        h = 0;\n        if (lc) h = max(h, lc-&gt;h + 1);\n        if (rc) h = max(h, rc-&gt;h + 1);\n        sz = 1;\n        if (lc) sz += lc-&gt;sz;\n        if (rc) sz += rc-&gt;sz;\n    }\n    // x-&gt;push() \u7684\u524d\u63d0\u662f x \u5df2\u7d93\u662f\u65b0\u7684\u7bc0\u9ede\n    void push() {\n        if (rev) {\n            swap(lc, rc);\n\n            if (lc) lc = new Node(*lc);\n            if (rc) rc = new Node(*rc);\n\n            if (lc) lc-&gt;rev ^= 1;\n            if (rc) rc-&gt;rev ^= 1;\n            rev = false;\n        }\n    }\n};\n</code></pre>"},{"location":"ds/treap/#merge_1","title":"Merge","text":"code <pre><code>Node* Merge(Node* a, Node* b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) { \n        a = new Node(*a);\n        a-&gt;push();\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b = new Node(*b);\n        b-&gt;push();\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n</code></pre>"},{"location":"ds/treap/#split_1","title":"Split","text":"code <pre><code>pair&lt;Node*, Node*&gt; Split(Node* root, int val) {\n    if (!root) return {nullptr, nullptr};\n\n    root = new Node(*root);\n    root-&gt;push();\n\n    if (root-&gt;key &lt;= val) {\n        auto [A, B] = Split(root-&gt;rc, val);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = Split(root-&gt;lc, val);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n</code></pre>"},{"location":"ds/treap/#split-by-size_1","title":"Split by size","text":"code <pre><code>pair&lt;Node*, Node*&gt; SplitBySize(Node* root, int k) {\n    if (!root) return {nullptr, nullptr};\n\n    root = new Node(*root);\n    root-&gt;push();\n\n    int cntL;  // \u5de6\u5b50\u6a39\uff0broot \u7bc0\u9ede\n    if (root-&gt;lc) {\n        cntL = root-&gt;lc-&gt;sz + 1;\n    } else {\n        cntL = 1;\n    }\n\n    if (cntL &lt;= k) {  // root \u653e\u5de6\u908a\n        auto [A, B] = SplitBySize(root-&gt;rc, k - cntL);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = SplitBySize(root-&gt;lc, k);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n</code></pre>"},{"location":"ds/treap/#_7","title":"\u4f8b\u984c","text":"\u6301\u4e45\u5316 Treap NPSC 2014 pD <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u500b\u5b50\u6bcd\u4e32 \\(s_1,\\ldots ,s_n\\)\uff0c\u4ee5\u53ca \\(m\\) \u7b46\u64cd\u4f5c :</p> <ul> <li> <p>\u8f38\u51fa \\(s_l,\\ldots ,s_r\\)</p> </li> <li> <p>\u8907\u88fd \\(s_l,\\ldots ,s_r\\)\uff0c\u8cbc\u5230\u539f\u672c \\(s_r\\) \u4e4b\u5f8c</p> </li> <li> <p>reverse \\(s_l,\\ldots ,s_r\\)</p> </li> </ul> <p>\\(n,m\\le 4\\times 10^4\\)</p> \u601d\u8def <p>\u4e00\u822c\u7684 Treap \u6c92\u8fa6\u6cd5\u505a\u5230\u300c\u8907\u88fd\u300d\u3002\u5982\u4e0b\u5716</p> <p> </p> <p>\u5169\u500b\u300ccde\u300d\u4f7f\u7528\u7684\u8a18\u61b6\u9ad4\u662f\u4e00\u6a23\u7684\uff0c\u6240\u4ee5\u7576\u4f60\u8981 Merge(cde, cde) \u7684\u6642\u5019\uff0c\u5728\u6539\u52d5\u5176\u4e2d\u4e00\u5074\u6642\u6703\u76f4\u63a5\u6539\u52d5\u5230\u53e6\u4e00\u5074\u7bc0\u9ede\u7684\u8cc7\u8a0a\uff0c\u6240\u4ee5\u4e0d\u53ef\u884c\u3002</p> <p>\u8003\u616e\u4f7f\u7528\u6301\u4e45\u5316 Treap\uff0c\u6211\u5011\u5148\u628a [l, r] \u5207\u51fa\u4f86\u5f8c\uff0c\u76f4\u63a5 Merge \u5169\u6b21\u3002</p> <pre><code>[A, B, C] = Split();\nroot = Merge(A, B, B, C)\n</code></pre> <p>\u56e0\u70ba\u5728 Merge \u7684\u6642\u5019\uff0c\u5982\u679c\u8981\u66f4\u6539\u6307\u91dd\uff0c\u4ed6\u5c31\u6703\u81ea\u52d5\u8907\u88fd\u65b0\u7684\u8a18\u61b6\u9ad4\u51fa\u4f86\uff0c\u9019\u6a23\u5c31\u4e0d\u6703\u52d5\u5230\u539f\u672c\u8a18\u61b6\u9ad4\u7684\u8cc7\u8a0a\uff0c\u5169\u908a\u4e5f\u5c31\u4e0d\u6703\u4e92\u76f8\u5f71\u97ff</p> \u6301\u4e45\u5316 Treap - rank tree \u6d1b\u8c37 P3835 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811 <p>\u5be6\u4f5c\u6301\u4e45\u5316 Treap\uff0c\u652f\u63f4\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u63d2\u5165 \\(x\\)</li> <li>\u522a\u9664 \\(x\\)</li> <li>\u67e5\u8a62 \\(x\\) \u7684\u662f\u7b2c\u5e7e\u5c0f</li> <li>\u67e5\u8a62\u7b2c \\(k\\) \u5c0f\u7684\u6578</li> <li>\u6c42\u5c0f\u65bc \\(x\\)\uff0c\u6700\u5927\u7684\u6578</li> <li>\u6c42\u5927\u65bc \\(x\\)\uff0c\u6700\u5c0f\u7684\u6578</li> </ol> <p>\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fd\u662f\u57fa\u65bc\u67d0\u4e00\u500b\u6b77\u53f2\u7248\u672c\uff0c\u540c\u6642\u751f\u6210\u4e00\u500b\u65b0\u7684\u7248\u672c</p> <p>\\(1 \\leq n \\leq 5 \\times  10^5,|x_i| \\leq {10}^9\\)</p> \u601d\u8def <p>\u5728 Merge \u548c Split \u7684\u6642\u5019\uff0c\u90fd\u4e00\u5b9a\u8981\u7528 COW\uff0c\u4e0d\u80fd\u8ddf\u4e00\u822c\u6c92 COW \u7684 Merge \u8ddf Split \u6df7\u7684\u7528\uff0c\u4e0d\u7136\u6703\u76f4\u63a5\u6539\u52d5\u5230\u597d\u5e7e\u500b\u7248\u672c\u7684\u8cc7\u6599\u3002COW \u53ef\u4ee5\u8b93\u4f60\u5148\u628a\u4ee5\u524d\u7684\u8cc7\u6599 copy \u4e00\u4efd\u518d\u4f7f\u7528</p> \u5be6\u4f5c\u7d30\u7bc0 <p>\u6211\u7684\u8a71\u9700\u8981\u58d3\u5e38\u624d\u53ef\u4ee5\u904e</p> code <pre><code>#include&lt;bits/stdc++.h&gt;\n\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = (1 &lt;&lt; 31) - 1;\n\nstruct Node {\n    int key, pri;\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int sz = 1;\n    int cnt = 1;\n\n    Node(int key) : key(key), pri(rand()) {\n    }\n\n    void pull() {\n        sz = cnt;\n        if (lc) sz += lc-&gt;sz;\n        if (rc) sz += rc-&gt;sz;\n    }\n};\n\nNode* Merge(Node* a, Node* b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) {\n        a = new Node(*a);\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b = new Node(*b);\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n\n// [A, B] : A &lt;= val, B &gt; val\npair&lt;Node*, Node*&gt; Split(Node* root, int val) {\n    if (!root) return {nullptr, nullptr};\n\n    root = new Node(*root);\n\n    if (root-&gt;key &lt;= val) {\n        auto [A, B] = Split(root-&gt;rc, val);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = Split(root-&gt;lc, val);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n\nint find_kth(Node* root, int k) {\n    if (!root) return INF;\n\n    int cntL;\n    if (root-&gt;lc) {\n        cntL = root-&gt;lc-&gt;sz;\n    } else {\n        cntL = 0;\n    }\n\n    if (cntL &gt;= k) {  // in left\n        return find_kth(root-&gt;lc, k);\n    } else if (cntL + root-&gt;cnt &gt;= k) {\n        return root-&gt;key;\n    } else {\n        return find_kth(root-&gt;rc, k - cntL - root-&gt;cnt);\n    }\n}\n\nstruct DS {\n    vector&lt;Node*&gt; roots = {nullptr};\n\n    void insert(int pre, int x) {\n        auto [A, B] = Split(roots[pre], x - 1);\n        auto [C, D] = Split(B, x);\n        if (C == nullptr) {\n            Node* tmp = new Node(x);\n            roots.pb(Merge(A, Merge(tmp, D)));\n            return;\n        }\n        C-&gt;cnt++;\n        C-&gt;sz++;\n        roots.pb(Merge(A, Merge(C, D)));\n    }\n\n    void erase(int pre, int x) {\n        auto [A, B] = Split(roots[pre], x - 1);\n        auto [C, D] = Split(B, x);\n        if (C == nullptr) {\n            roots.pb(Merge(A, D));\n            return;\n        }\n        C-&gt;cnt--;\n        C-&gt;sz--;\n        if (C-&gt;cnt == 0) {\n            delete C;\n            C = nullptr;\n        }\n        roots.pb(Merge(A, Merge(C, D)));\n    }\n\n    int find_rank(int pre, int x) {\n        auto [A, B] = Split(roots[pre], x - 1);\n        if (A == nullptr) {\n            roots.pb(Merge(A, B));\n            return 1;\n        }\n        int ans = A-&gt;sz + 1;\n        roots.pb(Merge(A, B));\n        return ans;\n    }\n\n    int find_by_order(int pre, int k) {\n        int x = find_kth(roots[pre], k);\n        roots.pb(new Node(*roots[pre]));\n        return x;\n    }\n\n    int find_largest_less(int pre, int x) {\n        auto [A, B] = Split(roots[pre], x - 1);\n        if (A == nullptr) {\n            roots.pb(Merge(A, B));\n            return -1;\n        }\n        int tmp = find_kth(A, A-&gt;sz);\n        roots.pb(Merge(A, B));\n        if (tmp == INF) tmp = -tmp;\n        return tmp;\n    }\n\n    int find_smallest_greater(int pre, int x) {\n        auto [A, B] = Split(roots[pre], x);\n        if (B == nullptr) {\n            roots.pb(Merge(A, B));\n            return -1;\n        }\n        int tmp = find_kth(B, 1);\n        roots.pb(Merge(A, B));\n        return tmp;\n    }\n};\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    int q;\n    cin &gt;&gt; q;\n\n    DS rank_tree;\n\n    int v, op, x;\n    while (q--) {\n        cin &gt;&gt; v &gt;&gt; op &gt;&gt; x;\n        if (op == 1) {\n            rank_tree.insert(v, x);\n        } else if (op == 2) {\n            rank_tree.erase(v, x);\n        } else if (op == 3) {\n            cout &lt;&lt; rank_tree.find_rank(v, x) &lt;&lt; '\\n';\n        } else if (op == 4) {\n            cout &lt;&lt; rank_tree.find_by_order(v, x) &lt;&lt; '\\n';\n        } else if (op == 5) {\n            cout &lt;&lt; rank_tree.find_largest_less(v, x) &lt;&lt; '\\n';\n        } else if (op == 6) {\n            cout &lt;&lt; rank_tree.find_smallest_greater(v, x) &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre> \u6301\u4e45\u5316 Treap \u6d1b\u8c37 P5055 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811 <p>\u4f86\u7dad\u8b77\u4e00\u500b\u5e8f\u5217\uff0c\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c :</p> <ol> <li>\u5728\u7b2c \\(i\\) \u500b\u6578\u5f8c\u63d2\u5165\u6578\u5b57 \\(x\\) </li> <li>\u522a\u9664\u7b2c \\(i\\) \u500b\u6578</li> <li>reverse \u5340\u9593 \\(a_l,\\ldots ,a_r\\)</li> <li>\u8f38\u51fa \\(a_l+\\ldots +a_r\\)</li> </ol> <p>\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fd\u662f\u57fa\u65bc\u67d0\u4e00\u500b\u6b77\u53f2\u7248\u672c\uff0c\u540c\u6642\u751f\u6210\u4e00\u500b\u65b0\u7684\u7248\u672c</p> <p>\\(1 \\le n \\le 2 \\times {10}^5\\)\uff0c\\(|x_i| &lt; {10}^6\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Node {\n    int pri;\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int sz = 1;\n    int sum;\n    int val;\n    int rev = 0;\n\n    Node (int val) : val(val), sum(val), pri(rand()) {}\n\n    void push() {\n        if (rev) {\n            swap(lc, rc);\n\n            if (lc) lc = new Node(*lc);\n            if (rc) rc = new Node(*rc);\n\n            if (lc) lc-&gt;rev ^= 1;\n            if (rc) rc-&gt;rev ^= 1;\n            rev = 0;\n        }\n    }\n\n    void pull() {\n        sz = 1;\n        sum = val;\n        if (lc) {\n            sz += lc-&gt;sz;\n            sum += lc-&gt;sum;\n        }\n        if (rc) {\n            sz += rc-&gt;sz;\n            sum += rc-&gt;sum;\n        }\n    }\n};\n\nNode* Merge(Node* a, Node *b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    if (a-&gt;pri &gt; b-&gt;pri) {\n        a = new Node(*a);\n        a-&gt;push();\n        a-&gt;rc = Merge(a-&gt;rc, b);\n        a-&gt;pull();\n        return a;\n    } else {\n        b = new Node(*b);\n        b-&gt;push();\n        b-&gt;lc = Merge(a, b-&gt;lc);\n        b-&gt;pull();\n        return b;\n    }\n}\n\npair&lt;Node*, Node*&gt; SplitBySize(Node* root, int k) {\n    if (!root) return {nullptr, nullptr};\n\n    root = new Node(*root);\n\n    root-&gt;push();\n    int cntL = 0;\n    if (root-&gt;lc) cntL = root-&gt;lc-&gt;sz + 1;\n    else cntL = 1;\n\n\n    if (cntL &lt;= k) {\n        auto [A, B] = SplitBySize(root-&gt;rc, k - cntL);\n        root-&gt;rc = A;\n        root-&gt;pull();\n        return {root, B};\n    } else {\n        auto [A, B] = SplitBySize(root-&gt;lc, k);\n        root-&gt;lc = B;\n        root-&gt;pull();\n        return {A, root};\n    }\n}\n\nstruct DS {\n    vector&lt;Node*&gt; roots = {nullptr};\n\n    void insert(int pre, int k, int x) {\n        //cout &lt;&lt; \"insert\" &lt;&lt; \",pre:\" &lt;&lt; pre &lt;&lt; \",k:\" &lt;&lt; k &lt;&lt; \",x:\" &lt;&lt; x &lt;&lt; '\\n';\n        auto [A, B] = SplitBySize(roots[pre], k);\n        Node* tmp = new Node(x);\n        roots.pb(Merge(A, Merge(tmp, B)));\n    }\n\n    void erase(int pre, int k) {\n        //cout &lt;&lt; \"erase\" &lt;&lt; \",pre:\" &lt;&lt; pre &lt;&lt; \",k:\" &lt;&lt; k &lt;&lt; '\\n';\n        auto [A, B] = SplitBySize(roots[pre], k - 1);\n        auto [C, D] = SplitBySize(B, 1);\n        roots.pb(Merge(A, D));\n    }\n\n    void reverse(int pre, int l, int r) {\n        //cout &lt;&lt; \"reverse\" &lt;&lt; \",pre:\" &lt;&lt; pre &lt;&lt; \",l:\" &lt;&lt; l &lt;&lt; \",r:\" &lt;&lt; r &lt;&lt; '\\n';\n        auto [A, B] = SplitBySize(roots[pre], r);\n        auto [C, D] = SplitBySize(A, l - 1);\n        if (D == nullptr) {\n            roots.pb(Merge(C, B));\n            return;\n        }\n        D-&gt;rev ^= 1;\n        roots.pb(Merge(Merge(C, D), B));\n    }\n\n    int sum(int pre, int l, int r) {\n        //cout &lt;&lt; \"sum\" &lt;&lt; \",pre:\" &lt;&lt; pre &lt;&lt; \",l:\" &lt;&lt; l &lt;&lt; \",r:\" &lt;&lt; r &lt;&lt; '\\n';\n        auto [A, B] = SplitBySize(roots[pre], r);\n        auto [C, D] = SplitBySize(A, l - 1);\n        if (D == nullptr) {\n            roots.pb(Merge(C, B));\n            return -1;\n        }\n        int ans = D-&gt;sum;\n        roots.pb(Merge(Merge(C, D), B));\n        return ans;\n    }\n\n    int show(int pre, int k) { // debug\n        auto [A, B] = SplitBySize(roots[pre], k - 1);\n        auto [C, D] = SplitBySize(B, 1);\n        if (C == nullptr) {\n            roots[pre] = Merge(A, D);\n            return -1;\n        }\n        int ans = C-&gt;val;\n        roots[pre] = Merge(A, Merge(C, D));\n        return ans;\n    }\n\n    void print(int pre) { // debug\n        cout &lt;&lt; \"print:\\n---------\\n\"; \n        if (roots.size() &lt;= pre || roots[pre] == nullptr) {\n            cout &lt;&lt; \"failed print\\n\";\n            return;\n        }\n        int n = roots[pre]-&gt;sz;\n        for (int i = 1; i &lt;= n; i++) {\n            cout &lt;&lt; show(pre, i) &lt;&lt; '\\n';\n        }\n        cout &lt;&lt; \"-------\\n\";\n    }\n};\n\nsigned main() {\n    int q;\n    cin &gt;&gt; q;\n\n    DS ds;\n\n    int last = 0;\n    while (q--) {\n        int v, op;\n        cin &gt;&gt; v &gt;&gt; op;\n\n        if (op == 1) {\n            int k, x;\n            cin &gt;&gt; k &gt;&gt; x;\n            k ^= last;\n            x ^= last;\n            ds.insert(v, k, x);\n        } else if (op == 2) {\n            int k;\n            cin &gt;&gt; k;\n            k ^= last;\n            ds.erase(v, k);\n        } else if (op == 3) {\n            int l, r;\n            cin &gt;&gt; l &gt;&gt; r;\n            l ^= last;\n            r ^= last;\n            ds.reverse(v, l, r);\n        } else if (op == 4) {\n            int l, r;\n            cin &gt;&gt; l &gt;&gt; r;\n            l ^= last;\n            r ^= last;\n            last = ds.sum(v, l, r);\n            cout &lt;&lt; last &lt;&lt; '\\n';\n        }\n    }\n} \n</code></pre> <ol> <li> <p>\u4e2d\u5e8f = \u5c07 BST \u88e1\u9762\u7684\u5143\u7d20\u5f9e\u5c0f\u5230\u5927\u8f38\u51fa\u3002\u56e0\u70ba\u4e00\u5b9a\u662f\u4f9d\u5e8f\u52a0\u5165\u5143\u7d20\uff0cindex \u4e5f\u662f\u5f9e\u5c0f\u5230\u5927\u52a0\u5165\uff0c\u90a3\u9ebc\u4f60\u8981\u5c07\u4ed6\u4ee5 index \u5c0f\u5230\u5927\u8f38\u51fa\uff0c\u5c31\u662f\u4e2d\u5e8f\u00a0\u21a9</p> </li> </ol>"},{"location":"graph/bfs/","title":"Bfs","text":"2023 TOI \u6a21\u64ec\u8cfd \u6c7a\u8cfd pA \u601d\u8def <p>\u56e0\u70ba <code>#</code> \u5011\u662f\u9023\u901a\u7684\uff0c\u6211\u5011\u53ef\u4ee5\u60f3\u6210\u5f9e\u9019\u500b\u806f\u901a path\uff08\u4e0d\u53ef\u80fd\u662f\u9023\u901a\u584a\u56e0\u70ba\u984c\u76ee\u689d\u4ef6\uff09\u7684\u982d\u5c3e\u7aef\u9023\u51fa\u53bb\u627e\u4e00\u689d path\u3002\u8003\u616e\u4e00\u5b9a\u4e0d\u80fd\u653e <code>#</code> \u7684\u5730\u65b9\u3002\u300c\u975e\u982d\u5c3e\u300d\u7684 <code>#</code> \u8207\u5176\u56db\u5468\u901a\u901a\u4e00\u5b9a\u662f\u4e0d\u80fd\u8d70\u7684\uff0c\u9084\u6709\u539f\u672c\u653e <code>X</code> \u7684\u5730\u65b9\u4e5f\u4e0d\u80fd\u8d70\u3002\u9019\u6642\u5176\u5be6\u5c31\u7528 BFS \u627e\u982d\u5230\u5c3e\u7684\u6700\u77ed\u8def\u5c31\u6703\u662f\u7b54\u6848\u4e86\uff0c\u53ef\u4ee5\u60f3\u6210\u5728\u4e00\u500b\u9023\u901a\u7684\u969c\u7919\u7269\u8981\u5468\u570d\u8981\u7e5e\u4e00\u5708\u4e00\u5b9a\u4e0d\u6703\u6709 degree \u4e0d\u662f 2 \u7684\u3002</p>"},{"location":"graph/binary_tree/","title":"\u4e8c\u5143\u6a39","text":""},{"location":"graph/binary_tree/#binary-expression-tree","title":"Binary Expression Tree","text":"\u554f\u984c <p>\u7d66\u4e00\u500b\u904b\u7b97\u5f0f\uff0c\u5982\u4f55\u8f49\u4e58 Binary expression tree</p> <p> </p> <p>\u6709\u5b8c\u6574\u62ec\u865f\u7684\u7248\u672c\uff0c\u6211\u5011\u5c31\u7528\u905e\u8ff4\u7684\u65b9\u5f0f\u4f86\u8f38\u5165\uff0c\u5982\u4e0b\uff0c\u8907\u96dc\u5ea6 O(n)\u3002</p> <p></p> <p>\u82e5\u6c92\u6709\u5b8c\u6574\u7684\u62ec\u865f\uff0c\u4f5c\u6cd5\u5982\u4e0b\u3002\u958b\u5169\u500b stack\uff0c\u4e00\u500b\u662f number\uff0c\u4e00\u500b\u662f opt\u3002\u5148\u5c0d\u904b\u7b97\u5f0f\u5916\u570d\u52a0\u4e0a\u4e00\u5c64\u62ec\u865f\uff0c\u8b93\u4ed6\u6700\u5f8c\u6703\u628a stack \u4e2d\u7684\u6771\u897f\u904b\u7b97\u5b8c\uff0c\u63a5\u8457\u6211\u5011\u5f9e\u5de6\u5230\u53f3\u6383\u63cf\u904b\u7b97\u5f0f</p> <ul> <li> <p>\u82e5\u9047\u5230\u6578\u5b57\uff0c\u5c31\u5c07\u4ed6\u52a0\u5165 number \u4e2d</p> </li> <li> <p>\u82e5\u9047\u5230\u5de6\u62ec\u865f\uff0c\u5247\u5c07\u5176\u63a8\u5165 opt \u4e2d</p> </li> <li> <p>\u82e5\u9047\u5230\u53f3\u62ec\u865f\uff0c\u5247 pop \u6389 opt \u4e2d\u7684\u904b\u7b97\u7b26\u7136\u5f8c\u5c0d number \u4e2d\u7684\u6578\u5b57\u505a\u904b\u7b97\uff0c\u76f4\u5230 pop \u5230\u5de6\u62ec\u865f\u70ba\u6b62</p> </li> <li> <p>\u82e5\u9047\u5230\u904b\u7b97\u7b26\uff0c\u5247\u5148\u5c07 opt \u4e2d\u512a\u5148\u7d1a\u5927\u65bc\u7b49\u65bc\u4ed6\u7684 pop \u6389\uff08\u82e5\u767c\u73fe\u5de6\u62ec\u865f\u5247\u7acb\u523b\u505c\u6b62 pop\uff09\uff0c\u5c0d number \u4e2d\u7684\u6578\u5b57\u505a\u904b\u7b97\uff0c\u518d\u5c07\u81ea\u5df1\u63a8\u5165 opt \u4e2d</p> </li> </ul> <p>\u81f3\u65bc\u600e\u9ebc\u5c0d number \u505a\u904b\u7b97\uff0c\u6211\u5011\u6bcf\u6b21\u6311 number \u4e2d\u7684\u6700\u5f8c\u5169\u500b\u4f9d\u7167\u904b\u7b97\u7b26\u5408\u4f75\uff0c\u518d\u5c07\u904b\u7b97\u7d50\u679c\u63a8\u5165 number \u4e2d\u3002</p> <p> </p> number \u7684 stack \u985e\u4f3c\u7684\u6a23\u5b50 \u8209\u4f8b <p>\u4f8b\u5982 <code>(5 + 2) * 3 * (4 + 6) - 2 * 3</code>\uff0c\u5148\u52a0\u4e0a\u4e00\u5c64\u62ec\u865f <code>((5 + 2) * 3 * (4 + 6) - 2 * 3)</code></p> <ul> <li> <p>\u76ee\u524d\u9047\u5230: <code>(</code>\uff0c<code>number = [], opt = [(]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>(</code>\uff0c<code>number = [], opt = [(, (]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>5</code>\uff0c<code>number = [5], opt = [(, (]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>+</code>\uff0c<code>number = [5], opt = [(, (, +]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>2</code>\uff0c<code>number = [5, 2], opt = [(, (, +]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>)</code>\uff0c<code>number = [7], opt = [(, ]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>*</code>\uff0c<code>number = [7], opt = [(, *]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>3</code>\uff0c<code>number = [7, 3], opt = [(, *]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>*</code>\uff0c<code>number = [21], opt = [(, *]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>(</code>\uff0c<code>number = [21], opt = [(, *, (]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>4</code>\uff0c<code>number = [21, 4], opt = [(, *, (]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>+</code>\uff0c<code>number = [21, 4], opt = [(, *, (, +]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>6</code>\uff0c<code>number = [21, 4, 6], opt = [(, *, (, +]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>)</code>\uff0c<code>number = [21, 10], opt = [(, *]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>-</code>\uff0c<code>number = [210], opt = [(, -]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>2</code>\uff0c<code>number = [210, 2], opt = [(, -]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>*</code>\uff0c<code>number = [210, 2], opt = [(, -, *]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>3</code>\uff0c<code>number = [210, 2, 3], opt = [(, -, *]</code></p> </li> <li> <p>\u76ee\u524d\u9047\u5230: <code>)</code>\uff0c<code>number = [204], opt = []</code></p> </li> </ul>"},{"location":"graph/binary_tree/#_1","title":"\u524d\u5e8f\u4e2d\u5e8f\u8f49\u5f8c\u5e8f","text":"<p>https://www.tinytsunami.info/preorder-inorder-postorder/</p> Zerojudge m300. 12347 - Binary Search Tree <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684 Binary Tree \u7684\u524d\u5e8f \\(a_1, \\ldots ,a_n\\)\uff0c\u8f38\u51fa\u5f8c\u5e8f</p> <p>\\(n\\le 10^4, a_i\\le 10^6\\)</p> \u601d\u8def <p>\u4e2d\u5e8f\u5176\u5be6\u5c31\u662f\u5c07 \\(a\\) sort\u3002\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c\u524d\u5e8f\u7684\u7b2c\u4e00\u500b\u5b57\u6bcd\u4e00\u5b9a\u662f\u6839\u7bc0\u9ede\uff0c\u4e26\u7531\u4e2d\u5e8f\u4f86\u5224\u65b7\u5982\u4f55\u5340\u5206\u5169\u5b50\u6a39\u7684\u4f4d\u7f6e\uff08\u4e5f\u5c31\u662f\u5de6\u5b50\u6a39\u7684\u9577\u5ea6\uff09\uff0c\u4e26\u905e\u8ff4\u4e0b\u53bb\u5efa\u7acb\u6a39</p> code <pre><code>void dfs(string A, string B) {  // string A : \u524d\u5e8f\u5b57\u4e32, string B : \u4e2d\u5e8f\u5b57\u4e32\n    int n = A.size();\n    if (n == 0) return;                                   // \u5982\u679c A \u70ba\u7a7a\uff0c\u8868\u793a\u5df2\u7d93\u9054\u5230\u8449\u5b50\u7bc0\u9ede\uff0c\u905e\u8ff4\u7d42\u6b62\u689d\u4ef6\u3002\n    char x = A[0];                                        // \u53d6\u51fa\u524d\u5e8f\u5b57\u4e32\u7684\u7b2c\u4e00\u500b\u5b57\u5143\uff0c\u5373\u7576\u524d\u5b50\u6a39\u7684\u6839\u7bc0\u9ede\u3002\n    int pivot = find(B.begin(), B.end(), x) - B.begin();  // \u627e\u5230 x \u5728 B \u7684\u54ea\u500b index\n    // \u8655\u7406\u5de6\u5b50\u6a39\n    int lenL = pivot;\n    // \u5de6\u5b50\u6a39\u7684\u9577\u5ea6\n    string A_left = A.substr(1, lenL);  // \u5f9e\u524d\u5e8f\u5b57\u4e32\u4e2d\u622a\u53d6\u5de6\u5b50\u6a39\u90e8\u5206\n    string B_left = B.substr(0, lenL);  // \u5f9e\u4e2d\u5e8f\u5b57\u4e32\u4e2d\u622a\u53d6\u5de6\u5b50\u6a39\u90e8\u5206\n    dfs(A_left, B_left);                // \u905e\u8ff4\u8f38\u51fa\u5de6\u5b50\u6a39\n    // \u8655\u7406\u53f3\u5b50\u6a39\n\n    int lenR = n - lenL - 1;                    // \u53f3\u5b50\u6a39\u7684\u9577\u5ea6\n    string A_right = A.substr(lenL + 1, lenR);  // \u5f9e\u524d\u5e8f\u5b57\u4e32\u4e2d\u622a\u53d6\u53f3\u5b50\u6a39\u90e8\u5206\n    string B_right = B.substr(lenL + 1, lenR);  // \u5f9e\u4e2d\u5e8f\u5b57\u4e32\u4e2d\u622a\u53d6\u53f3\u5b50\u6a39\u90e8\u5206\n    dfs(A_right, B_right);                      // \u905e\u8ff4\u8f38\u51fa\u53f3\u5b50\u6a39\n    cout &lt;&lt; x;\n    // \u8f38\u51fa\u6839\u7bc0\u9ede\n}\n</code></pre>"},{"location":"graph/binary_tree/#binary-tree","title":"Binary Tree \u6027\u8cea","text":"<ul> <li>\u6bcf\u500b node \u6700\u591a\u53ea\u80fd\u6709 2 \u500b child node</li> <li>Level i \u6700\u5927\u7bc0\u9ede\u6578\uff1a 2^(i-1), i&gt;0\uff0c\u5982level 3\u7684Node\u6578\u6700\u591a\u70ba 2^(3-1) = 4\uff0c\u5982\u4e0a\u5716\u4e4b DEFG</li> <li>Depth k \u6700\u5927 node \u6578\uff1a 2^k -1, k&gt;0\uff0c\u5982\u4e0a\u4e0a\u9762 depth 4\u7684\u6578\u6700\u5927\u53ef\u80fd\u7684Node\u6578\u91cf\u70ba 2^4 -1 \uff1d15</li> </ul>"},{"location":"graph/bipartite/","title":"\u4e8c\u5206\u5716","text":""},{"location":"graph/bipartite/#_1","title":"\u57fa\u672c","text":"<ul> <li>\u4e8c\u5206\u5716\u5716\u8272\u65b9\u6cd5\u552f\u4e00</li> <li>\u67d3\u8272\u6cd5</li> <li>odd cycle</li> </ul>"},{"location":"graph/bipartite/#_2","title":"\u9032\u968e","text":"<ul> <li>tree \u662f\u4e8c\u5206\u5716</li> <li>\u7368\u7acb+\u8986\u84cb=n</li> <li>\u4e8c\u5206\u5716\u7e2e\u9ede</li> </ul> <ul> <li>https://www.luogu.com.cn/problem/P3430</li> </ul>"},{"location":"graph/connected_component/","title":"\u9023\u901a\u5143\u4ef6\u5716\u8ad6","text":""},{"location":"graph/connected_component/#dfs-tree","title":"DFS Tree","text":"<p>\u5728\u7121\u5411\u5716\u4e0a\uff0c\u53ea\u6703\u51fa\u73fe Tree Edge \u8207 Back Edge\u3002\u800c\u5728\u6709\u5411\u5716\u4e0a\uff0c\u6709\u4ee5\u4e0b\u56db\u7a2e :</p> <ul> <li> <p>Tree Edge\uff1a\u771f\u6b63\u5728 DFS Tree \u4e0a\u7684\u908a\uff0c\u5f9e\u7236\u89aa\u9023\u5f80\u5c0f\u5b69</p> </li> <li> <p>Back Edge\uff1a\u5f9e\u5b50\u5b6b\u9023\u56de\u7956\u5148\u7684\u908a</p> </li> <li> <p>Forward Edge\uff1a\u9023\u5411\u6c92\u6709\u76f4\u63a5\u89aa\u5b50\u95dc\u4fc2\u7684\u5b50\u5b6b\u7684\u908a</p> </li> <li> <p>Cross Edge\uff1a\u9023\u5411\u975e\u76f4\u7cfb\u8840\u89aa\u7684\u908a</p> </li> </ul> <p></p> \u7121\u5411\u5716 tree edge, back edge \u5224\u65b7\u5be6\u73fe <pre><code>void dfs(int u, int par) {\n    instk[u] = vis[u] = true;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (vis[v] == false) {\n            dfs(v, u);\n        } else if (instk[v]) {\n            // cycle: v \u2192 \u2026 \u2192 u\n        }\n    }\n    instk[u] = false;\n}\n</code></pre>"},{"location":"graph/connected_component/#low","title":"low \u51fd\u6578","text":"<p>low(u) : u \u7684\u5b50\u6a39\u5167\u7684 back edge \u53ef\u4ee5\u5230\u9054\u5230\u6700\u5c0f\u6642\u9593</p> <ul> <li> <p>case 1:  \u4ed6\u7684 Tree Edge \u9023\u5230\u7684\u9ede </p> <ul> <li>low(u) = min(low(u), low(v))</li> </ul> </li> <li> <p>case2: \u4ed6\u7684 Back Edge \u9023\u5230\u7684\u9ede</p> <ul> <li>low(u) = min(low(u), t(v))</li> </ul> </li> </ul> code <pre><code>int dfs(int u, int par) {\n    low[u] = dfn[u] = stamp++;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (dfn[v] == 0) {\n            dfs(v, u);\n            low[u] = min(low[u], low[v]);\n        } else {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n}\n</code></pre>"},{"location":"graph/connected_component/#_1","title":"\u6a4b","text":"<p>\u4e00\u5f35\u7121\u5411\u5716\u4e0a\uff0c\u628a\u67d0\u4e9b\u908a\u79fb\u9664\u6703\u5c0e\u81f4\u9023\u901a\u584a\u6578\u91cf\u8b8a\u591a\uff0c\u9019\u7a2e\u908a\u7a31\u70ba bridge\u3002</p> <p>(u, v) \u662f bridge \u7684\u689d\u4ef6\u662f :</p> <ul> <li>dfn[v] &lt;= low[v] <ul> <li>v\u7684\u5b50\u6a39\u4e2d\u6c92\u6709 back edge \u80fd\u8de8\u8d8a (u, v) \u9019\u689d\u908a</li> </ul> </li> </ul> code <pre><code>int dfs(int u, int par) {\n    low[u] = dfn[u] = stamp++;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (dfn[v] == 0) {\n            dfs(v, u);\n            low[u] = min(low[u], low[v]);\n            if (low[v] &gt;= dfn[v]) {\n                // is bridge\n            }\n        } else {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n}\n</code></pre> \u6d1b\u8c37 T103481 \u3010\u6a21\u677f\u3011\u5272\u8fb9 <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u7121\u5411\u5716\uff0c\u8f38\u51fa bridge \u7684\u6578\u91cf</p> <p>\\(n\\le 5\\times 10^4, m\\le 3\\times 10^5\\)</p> CS Academy - Simple Paths <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u6709 \\(q\\) \u7b46\u67e5\u8a62\uff0c\u554f\u5169\u9ede\u4e4b\u9593\u662f\u5426\u53ea\u5b58\u5728\u4e00\u689d\u7c21\u55ae\u8def\u5f91</p> <p>\\(n,m,q\\le 1000\\)</p> \u601d\u8def <p>\u53ea\u5b58\u5728\u4e00\u689d\u7c21\u55ae\u8def\u5f91 iff \u8def\u5f91\u4e0a\u7684\u908a\u90fd\u662f bridge</p> <p>\u6211\u5011\u53ef\u4ee5\u5148\u7528 tarjan \u627e\u51fa\u6240\u6709 bridge\uff0c\u7136\u5f8c\u7528\u4e00\u500b dsu \u5c07 bridge \u5169\u7aef\u7684\u9ede merge \u8d77\u4f86\uff0c\u9019\u6a23\u5728 query \u6642\u53ea\u8981\u770b\u5169\u9ede\u662f\u5426\u5728 dsu \u7684\u540c\u4e00\u7d44\u5373\u53ef\uff0c\u8907\u96dc\u5ea6 \\(O(n\\alpha (n))\\)</p>"},{"location":"graph/connected_component/#tarjan-bcc","title":"Tarjan \u908a BCC","text":"<p>\u5982\u679c\u628a\u6240\u6709\u7684 bridge \u79fb\u9664\uff0c\u90a3\u6bcf\u4e00\u500b\u9023\u901a\u584a\u5728\u539f\u5716\u4e0a\u5c31\u7a31\u70ba\u300c\u908a\u96d9\u9023\u901a\u5206\u91cf\u300d\uff08bridge-connected component\uff0c\u7c21\u7a31 BCC\uff09\u3002</p> <p></p> <p>\u5728\u5c0b\u627e bridge \u7684\u904e\u7a0b\u4e2d\u9806\u4fbf\u627e BCC\u3002\u5982\u679c u \u7684\u7236\u908a\u662f\u6a4b\uff0c\u5247 u \u5f80\u4e0b\u5f62\u6210\u4e00\u500bBCC\uff0c\u6211\u5011\u5229\u7528 stack \u7d00\u9304\u3002\u62dc\u8a2a\u4e00\u500b\u65b0\u7684\u9ede\u6642\uff0c\u5c07\u8a72\u9ede\u585e\u5165 stack \u82e5\u767c\u73fe u \u7236\u908a\u662f\u6a4b\uff0c\u5c07 stack \u88e1\u7684\u6771\u897f\u53d6\u51fa\u76f4\u5230 u \u4e5f\u88ab\u53d6\u51fa\u9019\u4e9b\u88ab\u53d6\u51fa\u7684\u9ede\u5373\u5f62\u6210 BCC\u3002</p> code <pre><code>//BCC \u6ce8\u610f: \u4ee5\u4e0b code \"\u6c92\u6709\" \u8003\u616e\u91cd\u908a\u7684\u60c5\u6cc1\nint dfs(int u, int par) {\n    low[u] = dfn[u] = stamp++;\n    stk.push(u);\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (dfn[v] == 0) {\n            dfs(v, u);\n            low[u] = min(low[u], low[v]);\n        } else {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if (low[u] == dfn[u]) {\n        int tmp;\n        bccID++;\n        do {\n            tmp = stk.top();\n            bcc[tmp] = bccID;\n            stk.pop();\n        } while (tmp != u);\n    }\n}\n</code></pre> TIOJ 1879 . \u6211\u50b3\u4e86\u4e00\u4efdcode\u7d50\u679c\u59b3\u5c31\u4f86\u4e86 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u6709\u91cd\u908a\uff0c\u8f38\u51fa\u6240\u6709\u96d9\u9023\u901a\u5206\u91cf</p> <p>\\(n\\le 10^4, m\\le 4\\times 10^4\\)</p> \u6d1b\u8c37 \u3010\u6a21\u677f\u3011\u8fb9\u53cc\u8fde\u901a\u5206\u91cf <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u8f38\u51fa\u908a\u96d9\u9023\u901a\u5206\u91cf\u7684\u500b\u6578\uff0c\u4e26\u4e14\u8f38\u51fa\u6bcf\u500b\u9ede\u908a\u9023\u901a\u5206\u91cf\u3002</p> <p>\\(1\\le n,m\\le 10^5\\)</p>"},{"location":"graph/connected_component/#_2","title":"\u7e2e\u9ede","text":"<p>\u82e5\u5c07\u6bcf\u500b BCC \u8996\u70ba\u4e00\u500b\u9ede\uff0c\u65b0\u7684\u5716\u5c07\u5f62\u6210\u4e00\u68f5\u6a39</p> <p></p>"},{"location":"graph/connected_component/#_3","title":"\u5272\u9ede","text":"<p>\u82e5\u4e00\u5f35\u7121\u5411\u5716\u79fb\u9664\u67d0\u9ede\u6703\u4f7f\u9023\u901a\u584a\u8b8a\u591a\uff0c\u8a72\u9ede\u5c31\u7a31\u70ba\u300c\u5272\u9ede\u300d\u3002</p> <p>u\u662f\u5272\u9ede\u7684\u689d\u4ef6\u662f\uff1a</p> <ul> <li> <p>dfn[u] &lt;= low[v] </p> <ul> <li>v \u7684\u5b50\u6a39\u4e2d\u6c92\u6709 back edge \u80fd\u8de8\u8d8a u \u9ede</li> </ul> </li> <li> <p>\u6709\u591a\u500b\u5152\u5b50\u7684 root</p> </li> </ul> code <pre><code>int dfs(int u, int par) {\n    low[u] = dfn[u] = stamp++;\n    int cnt = 0;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (dfn[v] == 0) {\n            dfs(v, u);\n            low[u] = min(low[u], low[v]);\n            if (low[v] &gt;= dfn[u]) {\n                if (par != 0 || cnt &gt;= 2) {\n                    // is AP\n                }\n            }\n        } else {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n}\n</code></pre> Neoj 737. \u5e73\u8861\u7684\u6280\u80fd\u6a39 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u5e36\u6b0a\u7121\u5411\u5716\uff0c\u554f\u81f3\u5c11\u8981\u4fee\u6539\u5e7e\u689d\u908a\u7684\u908a\u6b0a\u624d\u80fd\u4f7f\u5f97\u5716\u4e0a\u7684\u6700\u5927\u751f\u6210\u6a39\u8207\u6700\u5c0f\u751f\u6210\u6a39\u7684\u6b0a\u503c\u7e3d\u548c\u4e00\u6a23</p> <p>\\(n\\le 2\\times 10^5, m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc Bridge\uff0c\u6211\u5011\u4e00\u5b9a\u662f\u4e0d\u7528\u4fee\u6539\u7684</p> <p>\u4e0d\u662f Bridge\uff0c\u5c31\u4ee3\u8868\u662f\u5728\u4e00\u500b\u908a\u96d9\u9023\u901a\u5206\u91cf\u5167\uff0c\u908a\u96d9\u9023\u901a\u5206\u91cf\u662f\u7531\u591a\u500b\u74b0\u7d44\u6210\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5148\u60f3\u74b0\u7684 case\u3002\u82e5\u74b0\u4e0a\u6709\u5169\u7a2e\u4e0d\u540c\u7684\u6b0a\u91cd\uff0c\u90a3\u6700\u5927\u4e00\u5b9a\u6703\u9078 total - max\uff0c\u6700\u5c0f\u8cc4\u9078 total - min\uff0c\u6240\u4ee5\u53ef\u4ee5\u767c\u73fe iff \u74b0\u4e0a\u6b0a\u91cd\u90fd\u4e00\u6a23\u6700\u5927\u8207\u6700\u5c0f MST \u6b0a\u91cd\u624d\u6703\u76f8\u7b49\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u5c0d\u65bc\u6bcf\u500b BCC \u7528 unorder map \u7d00\u9304\u6bcf\u7a2e\u6b0a\u91cd\u51fa\u73fe\u7684\u6b21\u6578\uff0c\u6211\u5011\u5c31\u6311\u51fa\u73fe\u6700\u591a\u6b21\u7684\uff0c\u5c07 BCC \u5167\u5269\u4e0b\u5176\u4ed6\u7684\u908a\u90fd\u66ff\u63db\u6210\u9019\u500b\u6b0a\u91cd\u5373\u53ef</p> NPSC 2020 \u9ad8\u4e2d\u7d44\u6c7a\u8cfd pA. \u57ce\u5e02\u5206\u985e <p>\u6709\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u4efb\u5169\u9ede\u6700\u591a\u5171\u4e00\u500b\u74b0\uff0c\u6c42\u6700\u5c0f\u8457\u8272\u6578\u548c\u8457\u8272\u65b9\u6cd5\u3002</p> <p>\\(1\\le n\\le 5\\times 10^5\\)</p> \u601d\u8def <p>\\(n=1\\) \u6642\u7279\u5224\u3002\u7d66\u5b9a\u7684\u5716\u5176\u5be6\u5c31\u662f\u4ed9\u4eba\u638c\u5716\uff0c\u5c07\u6bcf BCC \u53ef\u4ee5\u7368\u7acb\u8003\u616e\uff0c\u53ea\u6709\u5b58\u5728 odd cycle \u624d\u9700\u8981\u5716 3 \u7a2e\u984f\u8272\uff0c\u5176\u9918\u60c5\u6cc1\u70ba\u4e8c\u5206\u5716\u5716 2 \u7a2e\u5373\u53ef\u3002\u5be6\u4f5c\u4e0a\u5148\u7528 tarjan \u5c07\u6bcf\u500b BCC \u627e\u51fa\u4f86\uff0c\u7136\u5f8c\u6211\u5011\u5c31\u53ef\u4ee5\u5148\u4ea4\u932f\u5716\u5169\u7a2e\u984f\u8272\uff0c\u82e5\u70ba odd cycle \u6700\u5f8c\u4e00\u683c\u518d\u5857\u7b2c\u4e09\u7a2e\u984f\u8272\u5373\u53ef</p> CF 555 E. Case of Computer Network <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u7d66 \\(q\\) \u7d44\u9650\u5236 \\((u,v)\\)\uff0c\u554f\u80fd\u5426\u7d66\u6bcf\u689d\u908a\u6a19\u4e0a\u65b9\u5411\uff0c\u4f7f\u4e2d\u6bcf\u4e00\u7d44\u9650\u5236\u4e2d\u7684 \\(u\\) \u90fd\u80fd\u5230\u9054 \\(v\\)\u3002</p> <p>\\(n,m,q \\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u9996\u5148\u8003\u616e\u5728\u540c\u4e00\u500b\u908a\u96d9\u9023\u901a\u5206\u91cf\u4e2d\uff0c\u5fc5\u7136\u53ef\u4ee5\u5efa\u69cb\u51fa\u4e00\u500b\u65b9\u6848\u4f7f\u5f97\u5176\u4e2d\u6240\u6709\u9ede\u5169\u5169\u4e4b\u9593\u53ef\u4ee5\u4e92\u76f8\u5230\u9054\u3002 \u800c\u5269\u9918\u7684\u5272\u908a\u6703\u69cb\u9020\u51fa\u4e00\u500b\u68ee\u6797\u7d50\u69cb\u3002 \u554f\u984c\u53ef\u7c21\u5316\u6210\u8003\u616e\u5728\u4e00\u68f5\u6a39\u4e2d\uff0c\u600e\u9ebc\u7d66\u6a39\u908a\u6a19\u65b9\u5411\u4f7f\u5f97\u5404\u9805\u4e0d\u885d\u7a81\uff0c\u4e0d\u540c\u6a39\u4e2d\u7684\u5169\u500b\u9ede\u986f\u7136\u662f\u4e0d\u53ef\u9054\u7684\u3002 \u90a3\u9ebc\u5728\u4e00\u9846\u6a39\u4e2d\uff0c\u5169\u9ede\u4e4b\u9593\u7684\u8def\u5f91\u4e00\u5b9a\u6709\u4e00\u90e8\u5206\u662f\u78ba\u5b9a\u7684\uff0c\u5373 u \u2192 lca(u,v) \u2192 v\u3002 \u90a3\u9ebc\u984c\u76ee\u5c31\u8b8a\u6210\u4e86\uff0c\u5982\u679c\u7dad\u8b77\u6bcf\u689d\u908a\u7684\u65b9\u5411\u3002 \u53ef\u4ee5\u8003\u616e\u7dad\u8b77\u6bcf\u689d\u89aa\u5b50\u95dc\u4fc2\u7684\u6a39\u93c8\u7684\u5dee\u5206\u95dc\u4fc2\uff0c\u5177\u9ad4\u4f86\u8aaa\uff0c\u7528 dp[i][0] \u8868\u793a i \u865f\u908a\uff08i \u7bc0\u9ede\u8868\u793a\u7684\u908a\u662f\u9023\u5411\u5b83\u7236\u89aa\u7684\u90a3\u4e00\u908a\uff09\u5411\u4e0b\u7684\u5dee\u5206\u95dc\u4fc2 dp[i][1] \u8868\u793a i \u7bc0\u9ede\u5411\u4e0a\u7684\u5dee\u95dc\u4fc2\uff0c\u5c0d\u65bc\u6bcf\u4e00\u500b\u689d\u4ef6(u,v)\uff0c\u5c07 dp[lca(u,v)][0] + 1\uff0cdp[u][0] - 1\uff0cdp[lca(u,v)][1] +1\uff0cdp[v][1] - 1\uff0c\u7136\u5f8c\u628a\u89aa\u5b50\u95dc\u4fc2\u7684\u503c\u7d2f\u52a0\u4e0a\u53bb\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u500b\u9ede\u7684 dp[i][0], dp[i][1]\u3002 dp[i][0] \u5982\u679c\u4e0d\u70ba 0 \u8868\u793a\u9019\u689d\u908a\u9700\u8981\u6709\u5411\u4e0b\u7684\u65b9\u5411\uff0cdp[i][1] \u4e0d\u70ba 0 \u8868\u793a\u5b83\u9700\u8981\u6709\u5411\u4e0a\u7684\u65b9\u5411\uff0c\u5169\u8005\u4e0d\u80fd\u540c\u6642\u5b58\u5728\u3002 </p> <p>\u53c3\u8003\u81ea : https://www.cnblogs.com/badcw/p/13142026.html</p>"},{"location":"graph/connected_component/#bcc","title":"\u52d5\u614b\u7dad\u8b77 BCC","text":"\u52d5\u614b\u7dad\u8b77 BCC <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6709 \\(q\\) \u6b21\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{add}(u,v):\\) \u5728 \\(u,v\\) \u4e4b\u9593\u52a0\u4e00\u689d\u908a</p> </li> <li> <p>\\(\\text{query}(u,v):\\) \u554f \\(u,v\\) \u4e4b\u9593\u662f\u5426\u6709\u81f3\u5c11\u5169\u689d\u908a\u4e0d\u76f8\u4ea4\u7684\u8def\u5f91</p> </li> </ul> <p>\u6bcf\u6b21\u6211\u5011\u90fd\u662f\u52a0\u4e00\u689d\u908a\u9032\u53bb\u6a39\u4e0a\u5f8c\uff0c\u5c07\u6a39\u4e0a\u8207\u5176\u5f62\u6210\u74b0\u7684\u8def\u5f91\u5168\u90e8\u7e2e\u6210\u4e00\u500b BCC\u3002\u6211\u5011\u63a1\u7528\u66b4\u529b\u8df3\u4e26\u67e5\u96c6\u7684\u65b9\u5f0f\u4f86\u9032\u884c\u7e2e\u9ede\u3002\u5c0d\u65bc\u6bcf\u500b\u7e2e\u9ede\u5f8c\u7684 BCC\uff0c\u8a18\u9304\u5728 BCC \u5167\u6df1\u5ea6\u6700\u6dfa\u7684\u9ede\uff0c\u6211\u5011\u4e5f\u6703\u8a18\u9304\u6bcf\u500b\u9ede\u5728\u7e2e\u9ede\u904e\u5f8c\u7684\u7236\u89aa\u3002\u52a0\u4e00\u689d\u908a \\((u,v)\\) \u6642\uff08\u4ee4 dfn[v] &gt; dfn[u]\uff09\uff0c\u6211\u5011\u5f9e \\(v\\) \u6162\u6162\u5f80\u4e0a\u722c\uff0c\u4e26\u5c07\u8def\u4e0a\u7684\u9ede\u8207 \\(v\\) \u5728\u4e26\u67e5\u96c6\u5167\u5408\u4f75\u3002\u7531\u65bc\u722c\u904e\u7684\u9ede\u90fd\u662f\u7e2e\u9ede\u904e\u5f8c\u7684\uff0c\u6bcf\u689d\u908a\u722c\u904e\u5f8c\u5c31\u6703\u6d88\u5931\uff0c\u6240\u4ee5\u6700\u591a\u5408\u4f75 \\(n-1\\) \u6b21\uff0c\u8907\u96dc\u5ea6 \\(O(n \\alpha (n))\\)</p> POJ - 3694 Network <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7121\u5411\u5716\uff0c\u6709 \\(q\\) \u6b21\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li>\\(\\text{add}(u,v):\\) \u5728 \\(u,v\\) \u4e4b\u9593\u52a0\u4e00\u689d\u908a\uff0c\u4e26\u8f38\u51fa bridge \u7684\u500b\u6578</li> </ul> <p>\\(n\\le 10^5, n-1\\le m\\le 2\\times 10^5, q\\le 1000\\)</p> \u601d\u8def <p>\u5148\u7528 tarjan \u5c07\u5716\u4e0a\u7684 bridge \u6578\u91cf\u7b97\u51fa\u4f86\uff0c\u904e\u7a0b\u4e2d\u7528\u4e26\u67e5\u96c6\u5c07\u975e bridge \u908a\u7684\u5169\u7aef union \u8d77\u4f86\u3002\u4e4b\u5f8c\u6bcf\u6b21\u52a0\u4e00\u689d\u908a\u6642\u5c31\u50cf\u4e0a\u9762\u66b4\u529b\u8df3\u4e26\u67e5\u96c6\u5373\u53ef\u3002</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n#include &lt;queue&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nconst int maxn = 1e5 + 5;\nint dfn[maxn], dep[maxn], low[maxn];\nint f[maxn], pa[maxn], sz[maxn], light[maxn];\nint n, m, ret, cnt;\nint stamp;\nvector&lt;int&gt; G[maxn];\n\nint find(int x) {\n    if (f[x] == x) {\n        return x;\n    } else {\n        return f[x] = find(f[x]);\n    }\n}\n\nbool merge(int u, int v) {\n    u = find(u), v = find(v);\n    if (u == v) return 0;\n    if (sz[v] &gt; sz[u]) swap(u, v);\n    sz[u] += sz[v];\n    if (dep[light[v]] &lt; dep[light[u]]) {\n        light[u] = light[v];\n    }\n    f[v] = u;\n    return 1;\n}\n\nvoid dfs(int u, int fa) {\n    pa[u] = fa;\n    low[u] = dfn[u] = ++stamp;\n    for (int i = 0; i &lt; G[u].size(); i++) {\n        int v = G[u][i];\n        if (v == fa) continue;\n        if (!dfn[v]) {\n            dep[v] = dep[u] + 1;\n            dfs(v, u);\n            low[u] = min(low[u], low[v]);\n            if (low[v] &gt; dfn[u]) {\n                ret++;\n            } else {\n                merge(u, v); \n            }\n        } else if (dfn[v] &lt; dfn[u]) {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n}\n\nint lca(int u, int v) {\n    u = find(u);\n    v = find(v);\n    while (u != v) {\n        if (dep[light[u]] &gt; dep[light[v]]) {\n            swap(u, v);\n        }\n        if (merge(v, pa[light[v]])) ret--;\n        u = find(u);\n        v = find(v);\n    }\n    return ret;\n}\n\nvoid init() {\n    memset(dfn, 0, sizeof(dfn));\n    memset(pa, 0, sizeof(pa));\n    memset(dep, 0, sizeof(dep));\n    memset(low, 0, sizeof(low));\n    for (int i = 1; i &lt;= n; i++) {\n        f[i] = i;\n        sz[i] = 1;\n        light[i] = i;\n        G[i].clear();\n    }\n    stamp = 0;\n    ret = 0;\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int kase = 0;\n    while (cin &gt;&gt; n &gt;&gt; m) {\n        if (n == 0 &amp;&amp; m == 0) break;\n        init();\n        for (int i = 0; i &lt; m; i++) {\n            int u, v;\n            cin &gt;&gt; u &gt;&gt; v; \n            G[u].push_back(v);\n            G[v].push_back(u);\n        }\n        dfs(1, 0);\n        int q;\n        cin &gt;&gt; q;\n        cout &lt;&lt; \"Case \" &lt;&lt; ++kase &lt;&lt; \":\\n\";\n        for (int i = 0; i &lt; q; i++) {\n            int u, v;\n            cin &gt;&gt; u &gt;&gt; v;\n            cout &lt;&lt; lca(u, v) &lt;&lt; '\\n';\n        }\n        cout &lt;&lt; '\\n';\n    }\n    return 0;\n}\n</code></pre> TOI 2023 pE. \u516c\u8def (road) <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u5e36\u6b0a\u7121\u5411\u5716\uff0c\u6709 \\(q\\) \u7b46\u67e5\u8a62 :</p> <ul> <li>\\(\\text{query}(u,v):\\) \u554f \\(u\\) \u5230 \\(v\\) \u4e4b\u9593\u5169\u689d\u300c\u4e0d\u76f8\u4ea4\u7684\u8def\u5f91\u300d\u5404\u81ea\u6b0a\u91cd\u548c\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11\uff0c\u6216\u4e0d\u5b58\u5728</li> </ul> <p>\\(2\\le n\\le 1000,n-1\\le m\\le \\frac{n \u00d7 (n \u2212 1)}{2},1\\le w_i\\le 10^9,q\\le 10^5\\)</p> \u601d\u8def <p>\u5148\u60f3\u7121\u89e3\u7684 case\uff0ciff u \u8ddf v \u4e0d\u5728\u76f8\u540c\u7684 BCC \u5167\u7121\u89e3\u3002</p> <p>\u8003\u616e\u8981\u6700\u5c0f\u5316\u7b54\u6848\uff0c\u6211\u5011\u63a1\u7528\u96e2\u7dda\u4f5c\u6cd5\uff0c\u5c07 \\(m\\) \u689d\u908a\u4f9d\u7167\u908a\u6b0a\u5c0f\u5230\u5927\u52a0\u5165\uff0c\u82e5\u9023\u63a5\u7684\u9ede\u5df2\u5728\u540c\u4e00 BCC \u5167\u5247 continue\uff0c\u5426\u5247\u5c31\u91cd\u8dd1\u4e00\u6b21 tarjan\uff0c\u9019\u6a23\u6700\u591a\u8dd1 \\(n-1\\) \u6b21\u3002\u5c0d\u65bc query\uff0c\u6211\u5011\u53ea\u8981\u4e8c\u5206\u54ea\u6642\u5019 \\(u,v\\) \u5728\u540c\u4e00\u500b BCC \u5167\u5373\u53ef\u3002</p> <p>\u53e6\u6cd5: From twpca</p> <p>\u6211\u5011\u767c\u73fe\u300c\u8b93\u5169\u500b\u9023\u901a\u584a\u5408\u4f75\u7684\u908a\u300d\u6703\u5f62\u6210\u4e00\u9846\u6700\u5c0f\u751f\u6210\u6a39\uff0c\u7136\u5f8c\u5c31\u53ef\u4ee5\u7528\u4e0a\u9762\u52d5\u614b\u7dad\u8b77 BCC \u7684\u65b9\u6cd5\u4f86\u7e7c\u7e8c\u52a0\u908a\u4e86\u3002\u8003\u616e\u7dad\u8b77 query \u7684\u7b54\u6848\uff0c\u5efa\u5b8c\u6700\u5c0f\u751f\u6210\u6a39\u5f8c\uff0c\u5f9e\u539f\u672c\u6b0a\u91cd\u7531\u5c0f\u5230\u5927\u52a0\u5165\u9084\u6c92\u52a0\u5165\u7684\u908a\uff0c\\((u,v,w)\\)\uff0c\u82e5\u4f7f\u4e0d\u540c BCC \u5408\u4f75\uff0c\u5c31\u5728\u65b0\u5716\u4e0a\u5efa\u7acb\u4e00\u689d\u6b0a\u91cd\u70ba \\(w\\) \u7684\u908a\uff0c\u9019\u500b\u5716\u6703\u5f62\u6210\u4e26\u67e5\u96c6\u751f\u6210\u6a39\u3002\u6700\u5f8c\u8b80\u53d6 query \u6211\u5011\u5c31\u53ef\u4ee5\u76f4\u63a5\u770b path \u4e0a\u6b0a\u91cd\u6700\u5927\u662f\u591a\u5c11\u5373\u53ef\uff0c\u9019\u500b\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u5728\u4e26\u67e5\u96c6\u4e0a\u4e00\u683c\u4e00\u683c\u8dd1\uff0c\u56e0\u70ba\u4e26\u67e5\u96c6\u9ad8\u5ea6\u53ea\u6709 \\(O(\\log n)\\)</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int MAXN = 1005;\nconst int MAXM = 500005;\n\nstruct Edge {\n    int a, b, l;\n    bool operator&lt;(const Edge &amp;e) const {\n        return l &lt; e.l;\n    }\n} edge[MAXM];\n\nvector&lt;int&gt; G[MAXN];\nbool used[MAXM];\nint djs_father[MAXN], sz[MAXN], light[MAXN], up[MAXN];\nint father[MAXN], deep[MAXN];\n\nint djs_find_root(int x) {\n    while (x != djs_father[x]) {\n        x = djs_father[x];\n    }\n    return x;\n}\n\nbool djs_union(int a, int b, int l) {\n    a = djs_find_root(a), b = djs_find_root(b);\n    if (a == b) {\n        return false;\n    }\n    if (sz[a] &lt; sz[b]) {\n        swap(a, b);\n    }\n    djs_father[b] = a;\n    up[b] = l;\n    sz[a] += sz[b];\n    if (deep[light[a]] &gt; deep[light[b]])\n        light[a] = light[b];\n    return true;\n}\n\nvoid dfs(int u, int f, int d) {\n    father[u] = f, deep[u] = d;\n    for (int v : G[u]) {\n        if (v != f) {\n            dfs(v, u, d + 1);\n        }\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0);\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; edge[i].a &gt;&gt; edge[i].b &gt;&gt; edge[i].l;\n    }\n    sort(edge + 1, edge + m + 1);\n    iota(djs_father + 1, djs_father + n + 1, 1);\n    fill(sz + 1, sz + n + 1, 1);\n    for (int i = 1; i &lt;= m; i++) {\n        used[i] = djs_union(edge[i].a, edge[i].b, edge[i].l);\n        if (used[i]) {\n            G[edge[i].a].push_back(edge[i].b);\n            G[edge[i].b].push_back(edge[i].a);\n        }\n    }\n    dfs(1, 1, 0);\n    iota(djs_father + 1, djs_father + n + 1, 1);\n    iota(light + 1, light + n + 1, 1);\n    fill(sz + 1, sz + n + 1, 1);\n    for (int i = 1; i &lt;= m; i++) {\n        if (!used[i]) {\n            int a = djs_find_root(edge[i].a);\n            int b = djs_find_root(edge[i].b);\n            while (a != b) {\n                if (deep[light[a]] &gt; deep[light[b]]) {\n                    swap(a, b);\n                }\n                djs_union(b, father[light[b]], edge[i].l);\n                a = djs_find_root(a), b = djs_find_root(b);\n            }\n        }\n    }\n    int q;\n    cin &gt;&gt; q;\n    while (q--) {\n        int u, v, ans = 0;\n        cin &gt;&gt; u &gt;&gt; v;\n        if (djs_find_root(u) != djs_find_root(v)) { \n            cout &lt;&lt; \"-1\\n\";\n        } else {\n            while (u != v) {\n                if (sz[u] &lt; sz[v]) {\n                    swap(u, v);\n                }\n                ans = max(ans, up[v]);\n                v = djs_father[v];\n            }\n            cout &lt;&lt; ans &lt;&lt; \"\\n\";\n        }\n    }\n}\n</code></pre> 2022 YTP \u521d\u8cfd p6 \u65e9\u4e0a\u597dYTP <p>\u7d66\u2f00\u5f35 \\(n\\) \u9ede\u7121\u5411\u5716\uff0c\u2f00\u958b\u59cb\u6c92\u6709\u4efb\u4f55\u908a\u3002\u4f9d\u5e8f\u52a0\u5165 \\(m\\) \u689d\u908a\uff0c\u6bcf\u52a0\u5b8c\u2f00\u689d\u908a\u8acb\u8f38\u51fa\u7576\u524d\u5716\u4e2d\u7684\u6a4b\u7684\u6578\u91cf</p> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u958b\u5169\u500b dsu\uff0c\u4e00\u500b\u7dad\u8b77\u9023\u901a\u6027\uff0c\u4e00\u500b\u7dad\u8b77\u540c\u4e00\u500b CC \u4e2d\u7e2e\u9ede\u7684\u52d5\u4f5c</p> <p>\u5728\u7dad\u8b77\u9023\u901a\u6027\u7684\u90e8\u5206\u4e0d\u8981\u9032\u884c\u8def\u5f91\u58d3\u7e2e</p>"},{"location":"graph/connected_component/#tarjan-bcc_1","title":"Tarjan \u9ede BCC","text":"<p>\u5982\u679c\u4e00\u500b\u9023\u901a\u5206\u91cf\u6c92\u6709\u5272\u9ede (\u8868\u793a\u4e5f\u6c92\u6709\u6a4b)\uff0c\u5247\u8a72\u5206\u91cf\u70ba\u96d9\u9023\u901a\u5206\u91cf</p> <p></p> <p>\u5c0d\u65bc\u6c42\u89e3\u5177\u9ad4\u7684\u9ede\u96d9\u9023\u901a\u5206\u91cf\uff0c\u6211\u5011\u53ef\u4ee5\u76f4\u63a5\u5728\u5224\u65b7\u5272\u9ede\u7684\u6642\u5019\u6c42\u89e3\u9ede\u96d9\u9023\u901a\u5206\u91cf\u3002\u5177\u9ad4\u4f86\u8b1b\uff0c\u6211\u5011\u53ea\u9700\u8981\u984d\u5916\u52a0\u4e00\u500b stack\uff0c\u8a18\u9304\u5b50\u6a39\u4e2d\u8a2a\u554f\u7684\u9ede\uff0c\u4e4b\u5f8c\u9047\u5230\u5224\u65b7\u5272\u9ede\u7684\u689d\u4ef6\u6210\u7acb\u7684\u6642\u5019\u8aaa\u660e\u6709\u9ede\u96d9\u9023\u901a\u5206\u91cf\uff0c\u76f4\u63a5\u50cf\u4e0b\u9762\u4ee3\u78bc\u4e00\u6a23\u653e\u5165\u5373\u53ef\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u9019\u500b\u9ede\u662f\u4e00\u500b\u5b64\u7acb\u9ede\u7684\u8a71\uff0c\u90a3\u9ebc\u5b83\u81ea\u5df1\u5c31\u662f\u4e00\u500b\u9ede\u96d9\u9023\u901a\u5206\u91cf\u4e86\uff0c\u9700\u8981\u518d\u7279\u5224\u4e00\u4e0b\u3002</p> <p>\u5be6\u4f5c\u4e0a\u6bcf\u6b21\u627e\u5230\u4e00\u500b BCC \u6642\u6703\u7559\u4e0b\u4e00\u500b\u9ede\u5728 stack \u88e1\u9762\uff0c\u82e5\u6709\u591a\u7b46\u8f38\u5165\u6642\u8981\u5c0f\u5fc3</p> code <pre><code>void dfs (int u, int par) {\n    dfn[u] = low[u] = ++stamp; \n    stk.push(u);\n    int cnt = 0; // \u5152\u5b50\u500b\u6578\n    for (auto v : G[u]) {\n        if (v == par) continue; \n        if (!dfn[v]) {\n            dfs(v, u);\n            low[u] = min(low[u], low[v]);\n            cnt++;\n            if (low[v] &gt;= dfn[u]) { // \u82e5 u \u70ba\u5272\u9ede\n                int now = 0;\n                bcc.push_back({});\n                do {\n                    now = stk.top();\n                    stk.pop();\n                    bcc.back().push_back(now);\n                } while (now != v);\n                bcc.back().push_back(u);\n            }\n        } else {\n            low[u] = min(low[u], dfn[v]); \n        }\n    }\n    // \u7279\u5224\u5b64\u7acb\u9ede\n    if (par == 0 &amp;&amp; cnt == 0) {\n        bcc.push_back({u});\n        return;\n    }\n}\n</code></pre> \u6d1b\u8c37 P8435 \u3010\u6a21\u677f\u3011\u70b9\u53cc\u8fde\u901a\u5206\u91cf <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u8f38\u51fa\u9ede\u96d9\u9023\u901a\u5206\u91cf\u7684\u500b\u6578\uff0c\u4e26\u4e14\u8f38\u51fa\u6bcf\u500b\u9ede\u96d9\u9023\u901a\u5206\u91cf\u3002</p> <p>\\(n\\le 5\\times 10^5, m\\le 2\\times 10^6,\\) \u53ef\u80fd\u6709\u5b64\u7acb\u9ede or \u81ea\u74b0</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int N = 5e5 + 5;\nint n, m, stamp;\nvector&lt;int&gt; G[N];\nint dfn[N], low[N]; \nvector&lt;vector&lt;int&gt;&gt; bcc;\nstack&lt;int&gt; stk;\n\nvoid dfs (int u, int par) {\n    dfn[u] = low[u] = ++stamp; \n    stk.push(u);\n    int cnt = 0; // \u5152\u5b50\u500b\u6578\n    for (auto v : G[u]) {\n        if (v == par) continue; \n        if (!dfn[v]) {\n            dfs(v, u);\n            low[u] = min(low[u], low[v]);\n            cnt++;\n            if (low[v] &gt;= dfn[u]) { // \u82e5 u \u70ba\u5272\u9ede\n                int now = 0;\n                bcc.push_back({});\n                do {\n                    now = stk.top();\n                    stk.pop();\n                    bcc.back().push_back(now);\n                } while (now != v);\n                bcc.back().push_back(u);\n            }\n        } else {\n            low[u] = min(low[u], dfn[v]); \n        }\n    }\n    // \u7279\u5224\u5b64\u7acb\u9ede\n    if (par == 0 &amp;&amp; cnt == 0) {\n        bcc.push_back({u});\n        return;\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        if (!dfn[i]) {\n            dfs(i, 0);\n        }\n    }\n    cout &lt;&lt; bcc.size() &lt;&lt; '\\n';\n    for (auto v : bcc) {\n        cout &lt;&lt; v.size() &lt;&lt; ' ';\n        for (auto it : v) {\n            cout &lt;&lt; it &lt;&lt; ' ';\n        }\n        cout &lt;&lt; '\\n';\n    }\n} \n</code></pre>"},{"location":"graph/connected_component/#_4","title":"\u7e2e\u9ede","text":"<p>\u53ef\u4ee5\u7e2e\u6210\u5712\u65b9\u6a39\uff0c\u8a73\u898b\u6b64 Blog</p> <p></p>"},{"location":"graph/connected_component/#scc","title":"SCC","text":"<p>\u7d66\u4e00\u500b\u6709\u5411\u5716\uff0c\u82e5\u4e00\u500b\u9023\u901a\u5206\u91cf\u5167\u7684\u4efb\u5169\u9ede\u5747\u53ef\u4ee5\u4e92\u76f8\u5230\u9054\uff0c\u5247\u7a31\u70ba\u5f37\u9023\u901a\u5206\u91cf\u3002</p> <p></p>"},{"location":"graph/connected_component/#tarjan","title":"Tarjan","text":"<p>\u6211\u5011\u7dad\u8b77\u4e00\u500b stack\uff0c\u7d00\u9304\u5b50\u6a39\u4e2d\u8a2a\u554f\u7684\u9ede\u6bcf\u7576\u767c\u73fe\u67d0\u4e00\u9ede\u6070\u662f\u6700\u9ad8\u7956\u5148\uff0c\u5373 low(u) = dfn(u)\uff0c\u5373\u8868\u793a u \u8207\u5b50\u5b6b\u5df2\u7d93\u5f62\u6210 SCC\uff0c\u800c\u4e14\u8d70\u4e0d\u4e0a\u53bb\u4e86\uff0c\u6211\u5011\u5c31\u5c07\u9019\u4e9b\u9ede\u5f9e stack \u4e2d\u62ff\u51fa\u4f86\u3002</p> <p>\u8981\u6ce8\u610f\u5728\u6709\u5411\u5716\u8a08\u7b97 Low \u51fd\u6578\u7684\u6642\u5019\uff0c\u6703\u51fa\u73fe\u7121\u5411\u5716\u4e0d\u5b58\u5728\u7684 Cross Edge \u8207 Forward Edge\uff0c\u53ef\u80fd\u9023\u5f80\u4e4b\u524d\u505a\u597d\u7684 SCC\uff0c\u4e0d\u5f97\u8a08\u7b97\uff0c\u9019\u500b\u53ef\u4ee5\u7528\u5224\u65b7\u9ede\u662f\u5426\u5728\u7576\u524d SCC \u5167\uff08\u4e5f\u5c31\u662f stack\uff09\u3002</p> <p> </p> cross edge \u6703\u5c0e\u81f4 low(u) \u58de\u6389 code <pre><code>void dfs(int u) {\n    low[u] = dfn[u] = ++stamp;\n    instk[u] = true;\n    stk.push(u);\n    for (auto v : G[u]) {\n        if (dfn[v] == 0) {\n            dfs(v);\n            low[u] = min(low[u], low[v]);\n        } else if (instk[v]) {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if (low[u] == dfn[u]) {\n        int x;\n        sccID++;\n        do {\n            x = stk.top();\n            stk.pop();\n            scc[x] = sccID;\n            instk[x] = false;\n        } while (x != u);\n    }\n}\n</code></pre>"},{"location":"graph/connected_component/#kosaraju","title":"Kosaraju","text":"<p>\u5728\u53cd\u5716\u4e0a\u6309\u7167\u96e2\u958b\u9806\u5e8f\u7531\u5927\u5230\u5c0f dfs<sup>1</sup>\uff0c\u82e5 u \u9084\u6c92\u88ab\u8d70\u8a2a\uff0c\u5247\u5728\u53cd\u5716\u4e0a\u5f9e u \u53bb dfs\uff0c\u8d70\u5230\u7684\u6240\u6709\u9ede\u5373\u662f\u540c\u4e00\u500b SCC\u3002</p> code <pre><code>//SCC\nconst int maxn = 1e6 + 5;\nint n;\nstack&lt;int&gt; stk;\nvector&lt;int&gt; G[maxn];\nvector&lt;int&gt; R[maxn];\nint vis[maxn];\nint scc[maxn];\nint sccID;\n\nint dfs1(int u, int par) {\n    vis[u] = true;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs1(v, u);\n    }\n    stk.push(u);\n}\n\nint dfs2(int u, int par) {\n    vis[u] = true;\n    scc[u] = sccID;\n    for (auto v : R[u]) {\n        if (v == par) continue;\n        dfs2(v, u);\n    }\n}\n\nvoid solve() {\n    memset(vis, 0, sizeof(vis));\n    for (int i = 1; i &lt;= n; i++) {\n        if (!vis[i]) dfs1(i, 0);\n    }\n    memset(vis, 0, sizeof(vis));\n    while(stk.size()) {\n        if (!vis[stk.top()]) {\n            sccID++;\n            dfs2(stk.top(), 0);\n        }\n        stk.pop();\n    }\n}\n</code></pre>"},{"location":"graph/connected_component/#_5","title":"\u7e2e\u9ede","text":"<p>\u5c07\u540c\u4e00\u500b\u5f37\u9023\u901a\u5206\u91cf\u7e2e\u6210\u4e00\u500b\u9ede\uff0c\u53ef\u4ee5\u5f97\u5230 DAG\u3002</p> <p></p> <p>\u5be6\u4f5c\u4e0a\u5728\u65b0\u5716\u5c07\u6bcf\u500b SCC \u8996\u70ba\u4e00\u500b\u9ede\uff0c\u8dd1\u904e\u539f\u5716\u7684\u6bcf\u4e00\u689d\u908a\uff0c\u82e5\u5169\u7aef\u5728\u4e0d\u540c\u7684 SCC \u4e0a\uff0c\u5c31\u5728\u65b0\u5716\u5efa\u908a\u3002</p> CSES - Planets and Kingdoms <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u8f38\u51fa\u6240\u6709\u5f37\u9023\u901a\u5206\u91cf</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5\\)</p> CSES - Coin Collector <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u6709\u5411\u5716\uff0c\u6bcf\u500b\u9ede\u4e0a\u6709 \\(w_i\\) \u500b\u91d1\u5e63\uff0c\u53ef\u4ee5\u81ea\u7531\u6c7a\u5b9a\u8d77\u9ede\u3001\u7d42\u9ede\uff0c\u554f\u6700\u591a\u53ef\u4ee5\u62ff\u5230\u591a\u5c11\u91d1\u5e63</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5, 1\\le w_i\\le 10^9\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e5 + 5;\nint n, m;\nint low[maxn], t[maxn], instk[maxn], stamp, sccID, scc[maxn], in[maxn], cost[maxn], dp[maxn], w[maxn];\nvector&lt;int&gt; G[maxn], W[maxn];\nvector&lt;int&gt; sc[maxn];\nstack&lt;int&gt; stk;\n\nvoid dfs(int u) {\n    low[u] = t[u] = ++stamp;\n    instk[u] = true;\n    stk.push(u);\n    for (auto v : G[u]) {\n        if (t[v] == 0) {\n            dfs(v);\n            low[u] = min(low[u], low[v]);\n        } else if (instk[v]) {\n            low[u] = min(low[u], t[v]);\n        }\n    }\n    if (low[u] == t[u]) {\n        int x;\n        sccID++;\n        do {\n            x = stk.top();\n            stk.pop();\n            scc[x] = sccID;\n            instk[x] = false;\n            sc[sccID].pb(x);\n            w[sccID] += cost[x];\n        } while (x != u);\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int u, v;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; cost[i];\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n    }\n}\n\nvoid topo() {\n    queue&lt;int&gt; q;\n    for (int i = 1; i &lt;= sccID; i++) {\n        if (in[i] == 0) q.push(i), dp[i] = w[i];\n    }\n\n    int res = 0;\n    while (q.size()) {\n        int u = q.front();\n        q.pop();\n        for (auto v : W[u]) {\n            dp[v] = max(dp[v], dp[u] + w[v]);\n            res = max(res, dp[v]);\n            in[v]--;\n            if (in[v] == 0) {\n                q.push(v);\n            }\n        }\n    }\n    cout &lt;&lt; res &lt;&lt; \"\\n\";\n}\n\nvoid solve () {\n    for (int i = 1; i &lt;= n; i++) {\n        if (t[i] == 0) {\n            dfs(i);\n        }\n    }\n    for (int i = 1; i &lt;= sccID; i++) {\n        for (auto u : sc[i]) {\n            for (auto v : G[u]) {\n                if (scc[u] != scc[v]) {\n                    W[scc[u]].pb(scc[v]);\n                    in[scc[v]]++;\n                }\n            }\n        }\n    }\n    topo();\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n}\n</code></pre> TIOJ  1451 . \u516b\u5366\u50b3\u64ad\u7cfb\u7d71 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u6c42\u6700\u5c11\u9700\u8981\u5f9e\u5e7e\u500b\u9ede\u958b\u59cb DFS \u624d\u80fd\u7d93\u904e\u6240\u6709\u9ede\u81f3\u5c11\u4e00\u6b21\u3002</p> <p>\\(n,m\\le 10^5\\)</p> \u601d\u8def <p>\u7e2e\u9ede\u5f8c\u770b\u6709\u5e7e\u500b in degree = 0 \u7684\u9ede\u5c31\u662f\u7b54\u6848</p> POJ 1515 - Street Directions <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u4fdd\u8b49\u5716\u9023\u901a\u3002\u9078\u4e00\u4e9b\u7121\u5411\u908a\u5b9a\u5411\uff0c\u4f7f\u5f97\u6700\u7d42\u5716\u4fdd\u6301\u5f37\u9023\u901a\u7684\u7279\u6027\u3002\u9078\u7684\u908a\u8981\u76e1\u91cf\u591a\uff0c\u8f38\u51fa\u6bcf\u500b\u908a\u7684\u65b9\u5411\uff08\u7121\u5411\u908a\u53ca\u8f38\u51fa\u5169\u6b21\uff0c\u65b9\u5411\u4e0d\u540c\uff09</p> <p>\\(n\\le 1000, m\\le 10^6\\)</p> \u601d\u8def <p>\u9996\u5148\uff0cbridge \u53ea\u80fd\u662f\u7121\u5411\u3002\u5176\u4ed6\u908a\u5c31\u6309\u7167 dfs tree \u7684\u65b9\u5411\u5c07\u5176\u5b9a\u5411\u5373\u53ef</p> code(from cnblog) <pre><code>#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1005 , M = N * N;\n\nstruct Edge {\n    int from, to, nxt,cut;\n} edge[M];\n\nint dfn[N],low[N],head[N]; \nint n, m,tot,cnt;\ninline void init(){\n    tot = cnt = 0;\n    memset(dfn, 0, sizeof dfn);\n    memset(head, -1, sizeof head);\n}\ninline void add(int u,int v){\n    edge[cnt]=(Edge){u,v,head[u],0};\n    head[u]=cnt++;\n}\nvoid Tarjan(int u, int pre){\n    dfn[u] = low[u] = ++tot;\n    for (int i=head[u];~i;i=edge[i].nxt){\n        int v=edge[i].to;\n        if (edge[i].cut) continue;    //\u5982\u679c\u8fd9\u4e2a\u8fb9\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86(\u6807\u8bb0\u4e3a-1\u4e5f\u662f\u88ab\u6807\u8bb0\u8fc7)\uff0c\u5219\u65e0\u9700\u6539\u53d8\u4e4b\u524d\u7684\u6807\u8bb0\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u627e\u5230\u4e00\u79cd\u53ef\u884c\u7684\u6807\u8bb0\u65b9\u6848\u5373\u53ef\n        edge[i].cut=1;edge[i^1].cut=-1;     //\u8d2a\u5fc3\u7684\u5c06\u4e00\u4e2a\u65b9\u5411\u7684\u8fb9\u6807\u8bb0\n        if (v == pre) continue;\n        if (!dfn[v]){\n            Tarjan(v, u);\n            low[u] = min(low[u], low[v]);\n            if (dfn[u] &lt; low[v])edge[i].cut=edge[i^1].cut=1;\n        } else low[u] = min(low[u], dfn[v]);\n    }\n} \ninline void Solve(){\n    for (int i = 0; i &lt; cnt; ++i) {\n        if (edge[i].cut==1) {\n            printf(\"%d %d\\n\", edge[i].from, edge[i].to);\n        }\n    }\n    printf(\"#\\n\");\n}\nint main(){\n    int ncase=0;\n    while(~scanf(\"%d%d\",&amp;n,&amp;m),n||m){\n        printf(\"%d\\n\\n\",++ncase);\n        init();\n        for(int i=1;i&lt;=m;i++){\n            int u,v;scanf(\"%d%d\", &amp;u, &amp;v);\n            add(u,v);add(v,u);\n        }\n        Tarjan(1, -1);\n        Solve(); \n    }\n}\n</code></pre>"},{"location":"graph/connected_component/#2-sat","title":"2-SAT","text":""},{"location":"graph/connected_component/#_6","title":"\u5224\u65b7\u662f\u5426\u6709\u89e3","text":"\u554f\u984c <p>\u7d66\u4e00\u500b boolean formula\uff0c\u4f8b\u5982 </p> \\[(x_1 \\vee x_2) \\wedge (\\neg x_1 \\vee x_3) \\wedge (\\neg x_2 \\vee \\neg x_5) \\wedge \\dots\\] <p>\u80fd\u5426\u8ce6\u4e88 \\(x_1, \\ldots ,x_n\\) True \u6216\u662f False\uff0c\u4f7f formula \u70ba True</p> <p>\u5c07\u6bcf\u500b\u9ede\u4ee3\u8868\u72c0\u614b\uff0c\u6bcf\u500b\u908a (u, v) \u4ee3\u8868\u82e5 u \u5247 v\u3002\u5c0d\u65bc\u6bcf\u4e00\u500b\u8b8a\u6578 \\(x\\)\uff0c\u6709\u72c0\u614b \\(x\\) \u8207 \\(\\neg x\\)\uff0c\u4ee3\u8868 \\(x\\) \u9078 True \u6216 \\(x\\) \u9078 False\u3002\u5047\u8a2d\u6709\u4e00\u500b \\(x \\vee y\\)\uff0c\u5247\u4ee3\u8868<sup>2</sup></p> <ul> <li> <p>\u82e5 \\(x\\) \u70ba false\uff0c\\(y\\) \u4e00\u5b9a\u8981\u70ba true</p> </li> <li> <p>\u82e5 \\(y\\) \u70ba false\uff0c\\(x\\) \u4e00\u5b9a\u8981\u70ba true</p> </li> </ul> <p>\u63a5\u8457\u6211\u5011\u8981\u4f86\u5224\u65b7\u662f\u5426\u6709\u89e3\u3002\u89c0\u5bdf\u5230 :</p> <ul> <li> <p>\\(x \\rightarrow \\neg x\\)\uff1a\u82e5 \\(x\\) \u70ba true\uff0c\u5247 \\(x\\) \u5fc5\u5b9a\u70ba false \\(\\Rightarrow\\) \\(x\\) \u4e0d\u80fd\u70ba\u771f true</p> </li> <li> <p>\\(\\neg x \\rightarrow x\\)\uff1a\u82e5 \\(x\\) \u70ba false\uff0c\u5247 \\(x\\) \u5fc5\u5b9a\u70ba true \\(\\Rightarrow\\) \\(x\\) \u4e0d\u80fd\u70ba false</p> </li> </ul> <p>\u9019\u4e9b\u90fd\u662f\u6709\u89e3\u7684\u60c5\u6cc1\u3002\u53ef\u4ee5\u767c\u73fe\uff0c\u7576 \\(x \\rightarrow \\neg x\\) \u548c \\(\\neg x \\rightarrow x\\) \u540c\u6642\u5b58\u5728\uff0c\u4ee3\u8868\u554f\u984c\u7121\u89e3\u3002\u9019\u4e5f\u5c31\u4ee3\u8868 \\(x\\) \u8207 \\(\\neg x\\) \u5728\u540c\u4e00\u500b SCC \u5167\u3002</p> <p>\u5be6\u4f5c\u4e0a\u5c0d\u65bc\u8b8a\u6578\u500b\u6578\u5efa\u9ede\uff0c\u5c0d\u65bc\u6bcf\u500b\u689d\u4ef6\u5efa\u7acb\u6709\u5411\u908a\uff0c\u5728\u5716\u4e0a\u505a SCC\uff0c\u6aa2\u67e5\u6bcf\u500b\u8b8a\u6578\u662f\u5426\u77db\u76fe\u3002</p> code <pre><code>struct TwoSAT {\n    static const int MAXv = 2 * MAXN;\n    vector&lt;int&gt; GO[MAXv], BK[MAXv], stk;\n    int vis[MAXv];\n    int SC[MAXv];\n    void imply(int u, int v) { // u imply v\n        GO[u].push_back(v);\n        BK[v].push_back(u);\n    }\n    void dfs(int u, vector&lt;int&gt; *G, int sc) {\n        vis[u] = 1, SC[u] = sc;\n        for (int v : G[u]) {\n            if (!vis[v]) dfs(v, G, sc);\n        }\n        if (G == GO) stk.push_back(u);\n    }\n    void scc(int n) {\n        memset(vis, 0, sizeof(vis));\n        for (int i = 0; i &lt; n; i++) {\n            if (!vis[i]) dfs(i, GO, -1);\n        }\n        memset(vis, 0, sizeof(vis));\n        int sc = 0;\n        while (!stk.empty()) {\n            if (!vis[stk.back()]) {\n                dfs(stk.back(), BK, sc++);\n            }\n            stk.pop_back();\n        }\n    }\n};\n\nsigned main() {\n    TwoSAT SAT;\n    SAT.scc(2 * n);\n\n    // todo\n    for (int i = 0; i &lt; n; i++) {\n        if (SAT.SC[2 * i] == SAT.SC[2 * i + 1])\n            flg = 1;\n\n        // 2*i (+), 2*i + 1 (-)\n    }\n\n    if (flg) cout &lt;&lt; \"BAD\\n\";\n    else cout &lt;&lt; \"GOOD\\n\";\n}\n</code></pre>"},{"location":"graph/connected_component/#_7","title":"\u5370\u51fa\u4e00\u7d44\u89e3","text":"<p>\u5148\u89c0\u5bdf\uff0c\u7576 \\(x \\rightarrow \\neg x\\) \u6642\uff0c\u5982\u679c\u6211\u9078 \\(x=\\)true \u7d50\u679c\u6703\u63a8\u5012\u5230 \\(x=\\)false \uff0c\u4f46\u5982\u679c\u6211\u9078 \\(x=\\)false \u90a3\u4e0d\u6703\u767c\u751f\u4efb\u4f55\u4e8b\u60c5\uff0c\u4ee3\u8868\u9078\u5f8c\u9762\u7684\u70ba\u6b63\u89e3\u3002</p> <p>\u540c\u4e00\u500b SCC \u5167\u7684\u9ede\u5fc5\u5b9a\u5168\u9078\u6216\u5168\u4e0d\u9078\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5148\u5c07\u5716\u7e2e\u6210 DAG\uff0c\u8dd1\u53cd\u5411\u7684 topo sort\uff0c\u5c07 SCC \u5167\u7684\u9ede\u8a2d\u5b9a\u89e3\u5373\u53ef\u3002</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint n, m, a, b, dfn[200005], stk[200005], low[200005], pa[200005], opp[200005], in[200005], pick[200005], scc, idx;\nchar c[2];\nvector &lt;int&gt; v[200005];\nvector &lt;int&gt; v2[200005];\nstack &lt;int&gt; st;\n\nvoid tarjan(int x){\n    idx++;\n    dfn[x] = low[x] = idx;\n    st.push(x);\n    stk[x] = 1;\n    for (auto i:v[x]){\n        if (!dfn[i]){\n            tarjan(i);\n            low[x] = min(low[x], low[i]);\n        }\n        else if (stk[i]){\n            low[x] = min(low[x], dfn[i]);\n        }\n    }\n    if (dfn[x] == low[x]){\n        scc++;\n        pa[x] = scc;\n        int nxt = -1;\n        while (nxt != x){\n            nxt = st.top();\n            st.pop();\n            pa[nxt] = scc;\n            stk[nxt] = 0;\n        }\n    }\n}\nint tr(int x){ // \u6b63\u8b8a\u8ca0, \u8ca0\u8b8a\u6b63\n    if (x &lt;= m) return x+m;\n    else return x-m;\n}\nbool check(){\n    for (int i = 1; i &lt;= m; i++){\n        if (pa[i] == pa[i+m]) return 0; // pa[i] \u7d00\u9304 i \u7684 scc\n        else{\n            opp[pa[i]] = pa[i+m];\n            opp[pa[i+m]] = pa[i]; // opp \u7d00\u9304 x \u8ddf ~x \u5c0d\u65b9\u5404\u81ea\u7684 scc\n            /*\n            \u5982\u679c opp[scc] \u6709\u88ab\u6539\u5230\u7684\u8a71, \u90a3\u5c31\u4ee3\u8868\u8aaa\n            \u524d\u4e00\u500b\u6539\u7684\u6578(x)\u8ddf\u5f8c\u4e00\u500b\u6539\u7684\u6578(y) \u4ed6\u5011\u662f\u4e92\u76f8\u9023\u901a\u7684 (\u4f8b\u5982 ~x -&gt; y \u4e4b\u985e\u7684)\n            \u90a3\u9ebc\u56e0\u70ba\u5982\u679c\u6709 (~x -&gt; y) \u7684\u908a\u90a3\u4e5f\u5c31\u4ee3\u8868\u6709 (~y -&gt; x) \u7684\u908a \n            (\u4e5f\u4e0d\u4e00\u5b9a\u662f\u908a\u4f46\u9019\u5169\u500b\u6703\u4e92\u76f8\u6210\u7acb\uff0c\u56e0\u70ba\u5728\u52a0\u51652SAT\u7684\u6642\u5019\u90fd\u662f\u5169\u500b\u6210\u5c0d\u7684\u908a\u4e00\u8d77\u52a0\u5165)\n            \u6240\u4ee5\u4e00\u65e6 opp[scc] \u4e00\u88ab\u6539\u904e\u5f8c\u5c31\u662f\u90a3\u500b\u7b54\u6848\u4e86, \u6709\u5176\u4ed6\u4eba\u60f3\u518d\u6539\u4ed6\u7684\u8a71\u4e5f\u53ea\u662f\u505a opp[scc] = opp[scc]\n            */\n        }\n    }\n    return 1;\n}\nvoid build(){\n    for (int i = 1; i &lt;= m * 2; i++){\n        for (int j:v[i]){\n            if (pa[i] != pa[j]){\n                v2[pa[j]].push_back(pa[i]); // \u52a0\u5165\u7684\u908a\u662ftopo\u6392\u5e8f\u7684\"\u53cd\u5411\"\n                in[pa[i]]++;\n            }\n        }\n    }\n}\nvoid topo(){\n    queue &lt;int&gt; q;\n    for (int i = 1; i &lt;= scc; i++){\n        if (in[i] == 0) q.push(i);\n    }\n    while (!q.empty()){\n        int now = q.front();\n        q.pop();\n        if (!pick[now]){\n            pick[now] = 1;\n            pick[opp[now]] = 2;\n        }\n        for (auto i:v2[now]){\n            in[i]--;\n            if (!in[i]) q.push(i);\n        }\n    }\n    for (int i = 1; i &lt;= m; i++){\n        if (pick[pa[i]] == 1) cout &lt;&lt; \"+ \";\n        else cout &lt;&lt; \"- \";\n    }\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m; // n \u500b\u5f0f\u5b50, m \u500b\u8b8a\u6578\n    for (int i = 0; i &lt; n; i++){\n        cin &gt;&gt; c[0] &gt;&gt; a &gt;&gt; c[1] &gt;&gt; b;\n        /*\n        x + m (-)\n        x (+)\n        */\n        if (c[0] == '-') a += m;\n        if (c[1] == '-') b += m;\n        v[tr(a)].push_back(b);\n        v[tr(b)].push_back(a);\n    }\n    for (int i = 1; i &lt;= m*2; i++){\n        if (!dfn[i]) tarjan(i);\n    }\n    if (check()){\n        build();\n        topo();\n    }\n    else cout &lt;&lt; \"IMPOSSIBLE\\n\";\n}\n</code></pre>"},{"location":"graph/connected_component/#_8","title":"\u984c\u76ee","text":"CSES - Giant Pizza <p>\u5171\u6709 \\(n\\) \u500b boolean\uff0c\u7d66 \\(m\\) \u7d44\u9650\u5236\uff0c\u69cb\u9020\u51fa\u4e00\u7d44 2-SAT \u7684\u89e3</p> <p>\\(n,m\\le 10^5\\)</p>"},{"location":"graph/connected_component/#_9","title":"\u8cc7\u6599","text":"<ul> <li> <p>https://cp-algorithms.com/graph/bridge-searching-online.html</p> </li> <li> <p>https://oi-wiki.org/topic/dsu-app</p> </li> <li> <p>https://sprout.tw/algo2023/ppt_pdf/week14/tp-Graph2-2023.pdf</p> </li> <li> <p>https://zhuanlan.zhihu.com/p/562961398?utm_id=0</p> </li> <li> <p>https://web.ntnu.edu.tw/~algo/ConnectedComponent.html#2</p> </li> <li> <p>https://hackmd.io/@Ccucumber12/HylySg2xF#</p> </li> <li> <p>https://slides.com/sylveon/graph-7</p> </li> <li> <p>https://slides.com/fhvirus/advanced_graph_theory</p> </li> </ul> <ol> <li> <p>\u898b\u6b64\u8655\u6b64\u8655 \u21a9</p> </li> <li> <p>\\(x\\) \u70ba true \u7684\u72c0\u614b\u5c31\u4e0d\u7528\u8003\u616e\u4e86\uff0c\u56e0\u70ba \\(y\\) \u4e0d\u7ba1\u9078\u4ec0\u9ebc\u90fd\u53ef\u4ee5\uff0c\u8a18\u5f97\u6211\u5011\u908a\u4ee3\u8868\u7684\u662f\u300c\u82e5 u \u5247 v\u300d\u00a0\u21a9</p> </li> </ol>"},{"location":"graph/cycle/","title":"Cycle","text":""},{"location":"graph/cycle/#_1","title":"\u5224\u65b7\u74b0","text":"<ul> <li>\u5224\u65b7\u6709\u5411\u5716\u6709\u6c92\u6709\u74b0</li> <li>DSU \u5224\u65b7\u662f\u5426\u5728\u540c\u7d44</li> <li>\u5224\u65b7 DAG</li> <li>topological sort / DFS</li> <li>\u5224\u65b7\u6709\u5411\u5716\u6709\u6c92\u6709\u8ca0\u74b0</li> <li>Bellman-Ford</li> <li>\u5224\u65b7\u6709\u6c92\u6709 odd cycle<ul> <li>\u662f\u4e8c\u5206\u5716 \u21d2 \u6709 odd cycle</li> </ul> </li> <li>\u6700\u5c0f\u5e73\u5747\u74b0</li> <li>\u7528 Bellman-Ford \u5224\u8ca0\u74b0\u7576\u9ed1\u76d2\u5b50 \\(O(nm \\log C)\\)</li> <li>DP \\(O(nm)\\)</li> <li>https://drive.google.com/drive/folders/1afCpSerITOFODnY-0F-5TIRggXWerT0Q</li> <li>cses cycle finding <ul> <li>print \u8ca0\u74b0</li> </ul> </li> <li>\u6700\u77ed\u908a\u6578\u74b0</li> <li>CSES Graph Girth<ul> <li>\u6700\u5c0f\u74b0</li> <li>BFS</li> </ul> </li> <li>TIOJ \u5716\u8ad6\u6700\u5c0f\u5708\u4e4b\u6e2c\u8a66<ul> <li>Floyd-Warshall</li> </ul> </li> <li>DFS \u66b4\u529b\u627e\u6700\u5927\u74b0</li> <li>\u8a73\u89e3</li> <li>\u6b63\u74b0\u6027\u8cea : \u5b58\u5728\u9ede\u7e5e\u4e00\u5708\u8def\u5f91\u6b0a\u91cd\u548c\u7686\u70ba\u6b63 nhspc 2021 pC</li> </ul> <p>Floyd cycle detection</p> <p>O(1) \u984d\u5916\u7a7a\u9593\u627e\u74b0</p> <p>\u5c31\u662f\u4e00\u500b\u4eba\u6bcf\u6b21\u8d70\u4e00\u6b65\uff0c\u4e00\u500b\u4eba\u6bcf\u6b21\u8d70\u5169\u6b65\uff0c\u505c\u5728\u540c\u4e00\u500b\u4f4d\u7f6e\u5c31\u8868\u793a\u627e\u5230\u74b0\u4e86</p> DFS \u627e\u74b0 <pre><code>void find_cycle(int u, int par) {\n    dfn[u] = instk[u] = true;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (!dfn[v]) {\n            from[v] = u;\n            find_cycle(v, u);\n        } else if (instk[v]) {\n            get_cycle(v, u);\n        }\n    }\n    instk[u] = false;\n}\n</code></pre>"},{"location":"graph/dc_on_trees/","title":"Dc on trees","text":""},{"location":"graph/dc_on_trees/#_1","title":"\u82bd\u82bd\u570b\u6700\u77ed\u8def\u5f91\u554f\u984c","text":"2022\u7b97\u6cd5\u73ed\u7b2c\u4e00\u968e\u6bb5\u8a8d\u8b49\u8003_pE <p>\u7d66\u4e00\u5f35 \\(N\\) \u9ede \\(M\\) \u908a\u7684\u7121\u5411\u5716\uff0c\u9019\u5f35\u5716\u662f\u4e00\u5f35\u300c\u597d\u5716\u300d</p> <p>\u300c\u597d\u5716\u300d\u6709\u4ee5\u4e0b\u6027\u8cea</p> <ul> <li> <p>\\(N=1\\)</p> </li> <li> <p>\u6216\u662f</p> <ul> <li>\u6574\u5f35\u5716\u9023\u901a</li> <li>\u5b58\u5728\u552f\u4e00\u4e00\u500b\u5ea6\u6578\u6700\u5927\u7684\u9ede\uff0c\u7a31\u70ba\u300c\u95dc\u9375\u9ede\u300d</li> <li>\u5c07\u300c\u95dc\u9375\u9ede\u300d\u79fb\u9664\u5f8c\uff0c\u5269\u4e0b\u7684\u5716\u4e5f\u662f\u300c\u597d\u5716\u300d\uff0c\u4e14\u6703\u5269\u5169\u500b\u9ede\u6578\u76f8\u5dee\u4e0d\u8d85\u904e \\(2\\) \u7684\u9023\u901a\u584a</li> </ul> </li> </ul> <p>\u7d66\u5b9a \\(Q\\) \u7b46\u8a62\u554f\uff0c\u6bcf\u6b21\u7d66 \\(s,t\\) \u554f \\(dis(s,t)\\)</p> <p>\\(N\\le 10^5,M,Q\\le 3\\times 10^5\\)</p>"},{"location":"graph/dfs_order/","title":"\u5229\u7528 dfs \u5e8f","text":""},{"location":"graph/dfs_order/#dfs","title":"\u5229\u7528 dfs \u5e8f","text":"CSES - Network Renovation <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u554f\u6700\u5c11\u52a0\u5e7e\u689d\u908a\u53ef\u4f7f\u5716\u4e0a\u6c92\u6709\u908a\u662f bridge (\u96d9\u9023\u901a)</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u53c3\u8003 : https://www.youtube.com/watch?v=tRTezLvPZ3k</p> <p>\u89c0\u5bdf\u5230\u8981\u9023\u63a5\u7684\u662f leaf \u8ddf leaf</p> <p>\u82e5\u4e0d\u662f\u7684\u8a71\u5f80 leaf \u7684\u65b9\u5411\u90a3\u6bb5\u6703\u65b7\u6389</p> <p> </p> <p>\u6240\u4ee5\u6211\u5011\u81f3\u5c11\u9700\u8981 \\(P_T/2\\) \u500b\u624d\u80fd\u5c07\u5716\u7d66\u8986\u84cb\uff0c\u5176\u4e2d \\(P_T\\) \u70ba leaf \u7684\u6578\u91cf</p> <p>\u56e0\u70ba\u5982\u679c hooked \u7684\u5730\u65b9\u4e0d\u662f leaf\uff0c\u90a3\u4e0b\u9762\u7684 edge \u5c31\u4e0d\u6703\u88ab\u8986\u84cb\u5230</p> <p>\u5b58\u5728\u4e00\u500b pedant centriod\uff0c\u82e5\u5c07\u6a39 rerooted as the pendant centriod</p> <p>\u6bcf\u500b subtree \u4e2d\u7684 leaf \u7684\u6578\u91cf\u5c07\u6703 &lt;= \\(P_T /2\\)\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5 greedy \u7684\u6bcf\u6b21\u914d\u7576\u524d\u6700\u5927\u7684\u5169\u500b subtree\uff0c\u7528 prioiryt_queue \u53ef\u4ee5\u505a\u5230\uff0c\u9019\u500b\u662f \\(O(n\\log P)\\) \u7684\u89e3\u6cd5\u3002</p> <p>\u5176\u5be6\u53ef\u4ee5\u7528 i \u8ddf i + \\(P_T/2\\) \u914d\u5c31\u4e00\u5b9a\u53ef\u4ee5\u914d\u5230\u300c\u540c\u4e00\u500b\u5b50\u6a39\u4e4b\u5916\u300d\u3002\u90a3\u5047\u5982\u6211\u5011\u7684 root \u5b9a\u5728\u4efb\u610f\u9ede\uff0c\u56e0\u70ba euler \u5e8f\u5217\u7684\u9806\u5e8f\u4e0d\u6703\u56e0\u70ba root \u7684\u6539\u8b8a\u800c\u6539\u8b8a\uff0c\u6240\u4ee5\u4f9d\u7136\u53ef\u4ee5\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u5c07 i \u8ddf i + \\(P_T/2\\) \u914d\uff0c\u9019\u500b\u89e3\u6cd5\u662f\u7dda\u6027\u6642\u9593\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nvector&lt;int&gt; G[maxn];\nint n;\nvector&lt;int&gt; leaf;\n\nvoid dfs (int u, int par) {\n    if (G[u].size() == 1) leaf.pb(u);\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs (v, u);\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n    int u, v;\n    for (int i = 0; i &lt; n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n}\n\nvoid solve() {\n    dfs (1, 0);\n    if (leaf.size() &amp; 1) leaf.pb(leaf[0]); // \u4f7f\u6700\u5f8c\u4e00\u500b\u9023\u5230\u7b2c\u4e00\u500b\n\n    cout &lt;&lt; leaf.size()/2 &lt;&lt; \"\\n\";\n\n    for (int i = 0; i &lt; leaf.size()/2; i++) {\n        cout &lt;&lt; leaf[i] &lt;&lt; \" \" &lt;&lt; leaf[i + leaf.size()/2] &lt;&lt; \"\\n\";\n    }\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> 2021 \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd pF. \u5730\u6d1e\u904a\u6232 <p>\u7d66\u5b9a\u4e00\u68f5 \\(N\\) \u9ede\u7684\u6709\u6839\u6a39\uff0c\u908a\u662f\u7531\u6839\u5f80\u5e95\u4e0b\u9023\u7684</p> <p>\u8449\u7bc0\u9ede\u90fd\u6709\u4e00\u689d\u65b0\u7684\u6709\u5411\u908a\u9023\u63a5 \\(u\\to a_u\\)\uff0c\u5176\u4e2d \\(a_u\\) \u4e00\u5b9a\u662f \\(1\\to \\ldots \\to u\\) \u4e2d\u7684\u4e00\u9ede</p> <p>\u540c\u4e00\u500b\u8449\u7bc0\u9ede\u4e0d\u80fd visit \u8d85\u904e\u4e00\u6b21</p> <p>\u5f9e\u7bc0\u9ede \\(1\\) \u51fa\u767c\uff0c\u554f\u662f\u5426\u80fd visit \u6240\u6709\u8449\u7bc0\u9ede\uff0c\u69cb\u9020\u4efb\u610f\u4e00\u7d44\u8449\u7bc0\u9ede\u7684 visit \u9806\u5e8f</p> <p>\\(N \\le 3\\times 10^5\\)</p> <p> \u4f8b\u5982\u6b64\u5716\u7684\u9806\u5e8f\u5c31\u662f \\(5\\to 4\\to 2\\) </p> \u601d\u8def <p>[\u91cd\u8981\u6027\u8cea] : \u82e5\u5b58\u5728\u81f3\u5c11\u4e00\u7d44\u5408\u6cd5\u89e3\uff0c\u5247\u5fc5\u5b58\u5728\u4e00\u7d44\u5408\u6cd5\u89e3\u4f7f\u7684\u4ed6\u662f\u67d0\u500bdfs\u5e8f</p> <p>[\u5f15\u7406] : \u53ef\u4ee5\u767c\u73fe\u5c0d\u65bc\u5b9a\u6839 \\(u\\) \u4f86\u8aaa\uff0c\u6700\u591a\u53ea\u6709\u4e00\u500b\u5b50\u6a39\uff0c\u4ed6\u7684\u6240\u6709\u8449\u5b50\u8d70\u5b8c\u4ee5\u5f8c\u7121\u6cd5\u56de\u5230 \\(u\\) \u6216\u4ed6\u7684\u7956\u5148</p> <p>\u4f7f\u7528\u6a39 DP\u3002\u4ee4 \\(depth_v\\) \u70ba \\(v\\) \u7684\u6df1\u5ea6\uff0c\u4e14\u4ee4 \\(dp_u\\) \u70ba\u7e5e\u5b8c\u9019\u68f5\u5b50\u6a39\u5f8c\u53ef\u4ee5\u56de\u5230\u7684\u6700\u6dfa\u6df1\u5ea6\u3002\u8f49\u79fb\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u5982\u679c\u5b50\u6a39\u4e2d\u6709\u81f3\u5c11\u5169\u500b \\(dp_{son}\\) \u90fd\u5927\u65bc \\(depth_u\\)\uff0c\u5247\u5176\u4e2d\u4e00\u500b\u7e5e\u5b8c\u4ee5\u5f8c\u5c31\u56de\u4e0d\u4e86\u53e6\u4e00\u500b\u4e86\uff0c\u5fc5\u5b9a\u7121\u89e3\u3002</p> </li> <li> <p>\u5982\u679c\u5b50\u6a39\u4e2d\u6070\u6709\u4e00\u500b \\(dp_{son}\\) \u5927\u65bc \\(depth_u\\)\uff0c\u5247\u9019\u500b\u5b50\u6a39\u8981\u653e\u5230\u6700\u5f8c\u624d\u8d70\uff0c\\(dp_u = dp_{son}\\)</p> </li> <li> <p>\u5982\u679c\u5b50\u6a39\u4e2d\u6c92\u6709 \\(dp_{son}\\) \u5927\u65bc \\(depth_u\\)\uff0c\u5247\u4efb\u610f\u4e00\u500b\u5b50\u6a39\u90fd\u80fd\u7576\u6700\u5f8c\u4e00\u500b\u8d70\u5230\u7684\uff0c\u7531\u65bc\u6211\u5011\u8981\u6df1\u5ea6\u6700\u6dfa\u7684\uff0c\u56e0\u6b64 \\(dp_u\\) \u5c31\u662f\u6240\u6709 \\(dp_{son}\\) \u7684\u6700\u5c0f\u503c</p> </li> </ul> <p>\u69cb\u9020\u7684\u8a71\u627e\u51fa\u5c31\u76f4\u63a5\u53bb dfs\uff0c\u5728\u904e\u7a0b\u4e2d\u5148\u53bb dfs \u5408\u6cd5\u7684\u5b50\u6a39\uff0c\u518d\u53bb dfs \u4e0d\u5408\u6cd5\u7684</p> <p>\u5408\u6cd5\u7684\u5b50\u6a39\u5167\u7684\u9806\u5e8f\u53ef\u4ee5\u4efb\u610f</p> <pre><code>void dfs (int u) {\n    if (u is leaf) print (u);\n\n    int last = -1;\n    for (auto v : G[u]) {\n        if (v is legal) dfs (v);\n        else last = v;\n    }\n\n    if (last == -1) continue;\n\n    dfs (last);\n}\n</code></pre> CF 1528 C. Trees of Tranquility <p>\u7d66\u51fa\u5169\u68f5 root \u70ba 1 \u7684\u6a39\uff0c\u5206\u5225\u7a31\u70ba A \u6a39\u548c B \u6a39\uff0c\u73fe\u5728\u900f\u904e\u5169\u68f5\u6a39\u53ef\u4ee5\u69cb\u9020\u51fa\u4e00\u500b\u7121\u5411\u5716\uff0c\u7576\u4e14\u50c5\u7576\u9ede\u5c0d (u, v) \u540c\u6642\u6eff\u8db3\u4e0b\u5217\u5169\u500b\u689d\u4ef6\u6642\uff0c\u53ef\u5728\u5716\u4e2d\u5efa\u908a\uff1a </p> <ul> <li> <p>\u5728 A \u6a39\u4e2d\uff0cu \u662f v \u7684\u7956\u5148\u6216 u \u662f v \u7684\u7956\u5148</p> </li> <li> <p>\u5728 B \u6a39\u4e2d\uff0cu \u4e0d\u80fd\u662f v \u7684\u7956\u5148\u540c\u6642 u \u4e0d\u80fd\u662f v \u7684\u7956\u5148</p> </li> </ul> <p>\u554f\u69cb\u9020\u51fa\u7684\u7121\u5411\u5716\u7684 maximum clique \u7684\u5927\u5c0f\u662f\u591a\u5c11</p> <p>\\(2\\le n\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u6ce8\u610f\u5230\u5728\u4e00\u500b clique \u5167\u7684\u9ede\u4e00\u5b9a\u662f\u5728 A \u6a39\u7684\u4e00\u689d chain \u4e0a\uff0c\u5728 B \u6a39\u5167\u7684\u300cdfs \u5e8f\u300d\u4e0d\u80fd\u6709\u4ea4\u96c6\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5c07\u554f\u984c\u8f49\u63db\u6210\u7d66\u4e00\u4e9b interval\uff0c\u554f maximum independent set \u5927\u5c0f\uff0c\u6211\u5011\u53ef\u4ee5\u7528\u4e00\u500b set \u8868\u793a\u7576\u524d\u6709\u9078\u5728 maximum clique \u5167\u7684\u9ede\u5728 B \u4e2d\u7684 interval\uff0c\u7576\u52a0\u5165\u4e00\u500b interval [l, r] \u6642 :</p> <ul> <li> <p>\u82e5 [l, r] \u6c92\u6709 overlap \u4efb\u4f55 interval\uff0c\u76f4\u63a5 insert\uff0cans++</p> </li> <li> <p>\u82e5\u6709\u4e00\u500b\u66f4\u5927\u7684 interval [tl, tr] \u5305\u542b [l, r]\uff0c\u5c07 [tl, tr] erase\uff0cinsert [l, r]</p> </li> <li> <p>\u82e5 [l, r] \u5305\u542b\u4e86\u4e00\u500b interval [tl, tr]\uff0c\u4e0d\u505a\u4efb\u4f55\u52d5\u4f5c\u6700\u597d</p> </li> </ul> <p>\u7576 dfs \u56de\u6eaf\u7684\u6642\u5019\u518d\u5c07 insert \u7684 erase \u6389\uff0c\u6709 erase \u7684 insert \u56de\u53bb\u5373\u53ef</p>"},{"location":"graph/dsu/","title":"\u4e26\u67e5\u96c6","text":""},{"location":"graph/dsu/#_1","title":"\u4e00\u822c\u7684\u4e26\u67e5\u96c6","text":"\u6a21\u677f CF EDU A. Disjoint Sets Union <p>\u7dad\u8b77\u4e00\u500b DSU\uff0c\u652f\u6301\uff1a </p> <ul> <li> <p>\\(\\text{union}(u,v):\\) \u5408\u4f75 \\(u\\) \u548c \\(v\\) \u6240\u5728\u7684\u96c6\u5408</p> </li> <li> <p>\\(\\text{get}(u,v):\\) \u67e5\u8a62 \\(u\\) \u548c \\(v\\) \u662f\u5426\u5728\u540c\u4e00\u500b\u96c6\u5408</p> </li> </ul> <p>\\(n,m\\le 10^5\\)</p>"},{"location":"graph/dsu/#_2","title":"\u6a21\u677f","text":"\u53ea\u505a\u555f\u767c\u5f0f\u5408\u4f75 <pre><code>struct DSU {\n    vector&lt;int&gt; par, sz;\n\n    DSU(int n = 0) : par(n), sz(n, 1) {\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    int find(int x) {\n        if (par[x] == x) return x;\n        return find(par[x]);\n    }\n    bool merge(int u, int v) {\n        u = find(u), v = find(v);\n        if (u == v) return false;\n        if (sz[u] &lt; sz[v]) swap(u, v);\n        par[v] = u;\n        sz[u] += sz[v];\n        return true;\n    }\n};\n</code></pre> \u8def\u5f91\u58d3\u7e2e + \u555f\u767c\u5f0f\u5408\u4f75 <pre><code>struct DSU {\n    vector&lt;int&gt; par, sz;\n\n    DSU(int n = 0) : par(n), sz(n, 1) {\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n    bool merge(int u, int v) {\n        u = find(u), v = find(v);\n        if (u == v) return false;\n        if (sz[u] &lt; sz[v]) swap(u, v);\n        par[v] = u;\n        sz[u] += sz[v];\n        return true;\n    }\n};\n</code></pre>"},{"location":"graph/dsu/#_3","title":"\u8907\u96dc\u5ea6","text":""},{"location":"graph/dsu/#_4","title":"\u555f\u767c\u5f0f\u5408\u4f75","text":"\u4e26\u67e5\u96c6\u4e2d\u7bc0\u9ede\u6578\u70ba \\(n\\) \u7684\u6a39\uff0c\u9ad8\u5ea6\u81f3\u591a\u70ba \\(\\lfloor \\log n \\rfloor\\) <p>\u8aaa\u660e</p> <p>\u56e0\u70ba\u5408\u4f75\u7684\u6642\u5019\u662f\u555f\u767c\u5f0f\u5408\u4f75\uff0c\u5b50\u6a39\u5927\u5c0f\u6bd4\u8f03\u5c0f\u7684\u653e\u5728\u6bd4\u8f03\u5927\u7684\u4e0b\u9762\u3002\u9019\u6a23\u5408\u4f75\u51fa\u4f86\u7684\u6a39\uff0c\u6bcf\u6b21\u5f80\u4e0a\u8d70\u4e00\u5c64\uff0c\u5b50\u6a39\u5927\u5c0f\u90fd\u6703\u8b8a\u81f3\u5c11\u5169\u500d\uff0c\u6240\u4ee5\u9ad8\u5ea6\u6700\u591a \\(O(\\log n)\\)</p> <p>\u5982\u679c\u4e0a\u9762\u770b\u4e0d\u61c2\u7684\u8a71\uff0c\u5047\u8a2d\u76ee\u524d\u7684\u5b50\u6a39\u7684\u6839\u70ba \\(u\\)\uff0c\u8981\u5408\u4f75\u9032\u4f86\u7684\u5b50\u6a39\u7684\u6839\u70ba \\(v\\)\u3002\u6211\u5011\u5206\u5169\u7a2e case \u8a0e\u8ad6\u3002\u5047\u8a2d \\(u,v\\) \u7684\u5b50\u6a39\u90fd\u7b26\u5408 \u300c\u9ad8\u5ea6\u81f3\u591a\u70ba \\(\\log n\\)\u300d\u9019\u500b\u689d\u4ef6</p> <ol> <li> <p>\\(size_u\\ge size_v\\)</p> </li> <li> <p>\\(size_u&lt; size_v\\)</p> </li> </ol> <p>\u5c0d\u65bc\u7b2c\u4e00\u7a2e case\uff0c\u56e0\u70ba \\(size_u\\ge size_v\\)\uff0c\u6240\u4ee5 \\(v\\) \u6703\u63a5\u5728 \\(u\\) \u4e0a\u3002\u986f\u7136 \\(v\\) \u7684\u9ad8\u5ea6\u4e00\u5b9a \\(\\le u\\) \u7684\u9ad8\u5ea6\uff0c\u6240\u4ee5 \\(v\\) \u63a5\u5728 \\(u\\) \u4e0a\u4e26\u4e0d\u6703\u589e\u52a0 \\(u\\) \u7684\u5b50\u6a39\u7684\u9ad8\u5ea6</p> <p>\u5c0d\u65bc\u7b2c\u4e8c\u7a2e case\uff0c\u56e0\u70ba \\(size_u&lt; size_v\\)\uff0c\u6240\u4ee5 \\(u\\) \u6703\u63a5\u5728 \\(v\\) \u4e0a\u3002\u986f\u7136 \\(v\\) \u7684\u9ad8\u5ea6\u4e00\u5b9a \\(\\ge u\\) \u7684\u9ad8\u5ea6\uff0c\u6240\u4ee5 \\(u\\) \u63a5\u5728 \\(v\\) \u4e0a\u5c0d\u65bc\u539f\u672c \\(u\\) \u7684\u5b50\u6a39\u4f86\u8aaa \\(size\\) \u8b8a\u6210\u4e86\u5169\u500d\u4e4b\u591a\uff0c\u800c \\(u\\) \u4e0a\u9762\u591a\u4e86\u4e00\u5c64</p> <p>\u6240\u4ee5\u6bcf\u6b21\u5f80\u4e0a\u8d70\u4e00\u5c64\uff0c\\(size\\) \u90fd\u81f3\u5c11\u8b8a\u5169\u500d\uff0c\u56e0\u70ba\u9ede\u6578\u53ea\u6709 \\(n\\) \u500b\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u6703\u6709 \\(\\log n\\) \u5c64\uff0c\u4e5f\u5c31\u662f\u9ad8\u5ea6\u81f3\u591a\u70ba \\(\\log n\\)</p> <p>\u56b4\u8b39\u4e00\u9ede\u7684\u8b49\u660e</p> <p>\u3010\u5f15\u7406\u3011\uff1a\u5728\u4e26\u67e5\u96c6\u4e2d\u9ad8\u5ea6\u70ba \\(k\\) \u7684\u6a39\uff0c\u7bc0\u9ede\u6578\u81f3\u5c11\u70ba \\(2^k\\)\u3002</p> <p>\u4f7f\u7528\u6b78\u7d0d\u6cd5\u8b49\u660e\u9019\u500b\u5f15\u7406</p> <p>basecase :  \\(k = 0\\) \u6642\uff0c\u6210\u7acb</p> <p>\u5047\u8a2d \\(k \\le L - 1\\) \u6642\u6210\u7acb\u3002\u7576 \\(k = L\\) \u6642\uff0c\u5b58\u5728\u4e00\u6b21\u4f7f\u5f97\u6a39\u5f9e\u9ad8\u5ea6 \\(L - 1\\) \u8b8a\u6210\u9ad8\u5ea6 \\(L\\) \u7684\u64cd\u4f5c\u3002\u5728\u9019\u6b21\u64cd\u4f5c\u524d\uff0c\u5169\u68f5\u6a39\u7684\u9ad8\u5ea6\u5fc5\u7136\u70ba \\(L - 1\\)\uff0c\u56e0\u6b64\u5b83\u5011\u7684\u7bc0\u9ede\u6578\u7e3d\u6578\u81f3\u5c11\u70ba \\(2\\times 2^{L-1}=2^L\\)\u3002</p> <p>\u8a2d\u4e00\u500b\u4e26\u67e5\u96c6\u5167\u7684\u6a39\u7684\u7bc0\u9ede\u6709 \\(n\\) \u500b\uff0c\u9ad8\u5ea6\u662f \\(h\\)\u3002\u6839\u64da\u5f15\u7406\uff0c\\(n \\ge 2^h\\)\uff0c\u5247 \\(\\log  n \\ge h\\)\u3002\u6545\u4e26\u67e5\u96c6\u4e2d\u7bc0\u9ede\u6578\u70ba \\(n\\) \u7684\u6a39\uff0c\u9ad8\u5ea6\u81f3\u591a\u70ba \\(\\lfloor \\log n \\rfloor\\)</p> <p>\u4f9d\u7167\u4e0a\u9762\u7684\u6027\u8cea\uff0c<code>find(x)</code> \u7684\u8907\u96dc\u5ea6\u662f \\(O(\\log n)\\)\u3002<code>merge(u, v)</code> \u7684\u8907\u96dc\u5ea6\u662f\u5169\u500b <code>find</code> \u4e5f\u662f \\(O(\\log n)\\)\uff0c\u6240\u4ee5\u6574\u9ad4\u7684\u8907\u96dc\u5ea6\u662f \\(O(\\log n)\\)</p>"},{"location":"graph/dsu/#_5","title":"\u8def\u5f91\u58d3\u7e2e","text":"<p>\u82e5\u5c07\u300c\u8def\u5f91\u58d3\u7e2e\u300d\u548c\u300c\u555f\u767c\u5f0f\u5408\u4f75\u300d\u90fd\u7528\u4e0a\u7684\u8a71\u8907\u96dc\u5ea6\u662f \\(\\Theta(\\alpha (n))\\)<sup>1</sup></p> <p>\u82e5\u4e0d\u4f7f\u7528\u300c\u555f\u767c\u5f0f\u5408\u4f75\u300d\uff0c\u5e73\u5747\u8907\u96dc\u5ea6\u662f \\(O(\\log^* n)\\)</p>"},{"location":"graph/dsu/#_6","title":"\u79fb\u52d5","text":"zerojudge f292. 11987 - Almost Union-Find <p>\u6709\u500b \\(n\\) \u7269\u54c1\uff0c\u6bcf\u500b\u7269\u54c1\u4e00\u958b\u59cb\u90fd\u662f\u81ea\u5df1\u4e00\u7d44</p> <p>\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6703\u662f\u5176\u4e2d\u4e00\u7a2e</p> <ul> <li> <p>\\(\\text{Merge}(x,y):\\) \u5c07 \\(x,y\\) \u6240\u5728\u7684\u5169\u500b\u7fa4\u9ad4\u5408\u4f75\u70ba\u540c\u4e00\u500b</p> </li> <li> <p>\\(\\text{MoveGroup}(x,y):\\) \u5c07 \\(x\\) \u5f9e\u4ed6\u6240\u5728\u7684\u7fa4\u9ad4\u7576\u4e2d\u79fb\u9664\u4e26\u4e14\u52a0\u5165 \\(y\\) \u6240\u5728\u7684\u7fa4\u9ad4</p> </li> <li> <p>\\(\\text{Sum}(x):\\) \u5370\u51fa \\(x\\) \u6240\u5728\u7684\u7fa4\u9ad4\u5305\u542b\u7684\u6210\u54e1\u500b\u6578\u548c\u6210\u54e1\u7de8\u865f\u7e3d\u5408</p> </li> </ul> \u601d\u8def <p>\u6211\u5011\u5148\u4f86\u601d\u8003\u300c\u5c07 \\(x\\) \u5f9e\u4ed6\u6240\u5728\u7684\u7fa4\u9ad4\u7576\u4e2d\u79fb\u9664\u300d</p> <p>\u6211\u5011\u76f4\u63a5\u5c07 \\(x\\) \u7684\u8ca2\u737b\u7d66\u6263\u6389\uff0c\u4e5f\u4e0d\u5fc5\u771f\u6b63\u5728 DSU \u88e1\u5c07\u5176\u522a\u9664</p> <p>\u63a5\u4e0b\u4f86\u601d\u8003 \u300c\u4e26\u4e14\u52a0\u5165 \\(y\\) \u6240\u5728\u7684\u7fa4\u9ad4\u300d</p> <p>\u6211\u5011\u53ef\u4ee5\u5c0d\u65bc \\(i=1\\sim n\\) \u7dad\u8b77 \\(t_i\\) \u4ee3\u8868\u76ee\u524d \\(i\\) \u771f\u6b63\u7684\u7de8\u865f</p> <p>\u52a0\u5165\u65b0\u7684 group \u7684\u6642\u5019\u53ea\u9700\u5c07 \\(t_i\\) \u8b8a\u6210\u7576\u524d\u6c92\u7528\u904e\u7684\u7de8\u865f\u5373\u53ef\uff0c\u4e26\u4e14\u53ef\u4ee5\u7576\u6210\u662f\u4e00\u500b\u65b0\u7684\u9ede\uff0c\u53bb\u57f7\u884c merge</p> <p>\u8a73\u898b\u4ee3\u78bc</p> code <pre><code>void init() {\n    for (int i = 1; i &lt;= n; i++) {\n        f[i] = i;\n        t[i] = i;\n        sum[i] = i;\n        num[i] = 1;\n    }\n    cnt = n;\n}\n\nvoid delete(int x) {\n    sum[find(t[x])] -= x;\n    num[find(t[x])] -= 1;\n\n    t[x] = ++cnt;\n    sum[t[x]] = x;\n    num[t[x]] = 1;\n    f[t[x]] = t[x];\n}\n\nvoid merge(int x, int y) {\n    int tx = find(t[x]);\n    int ty = find(t[y]);\n    if (tx != ty) f[ty] = tx;\n    num[tx] += num[ty];\n    sum[tx] += sum[ty];\n}\n\nvoid solve(int x, int y) {\n    delete(x);\n    merge(x, y);\n}\n</code></pre> <p>\u53c3\u8003\u81ea : CSDN</p> \u4f8b\u984c <p>\u6709\u500b \\(n\\) \u7269\u54c1\u7de8\u865f\u4f9d\u5e8f\u662f \\(1,2,3,...,n\\)\uff0c\u6bcf\u500b\u7269\u54c1\u4e00\u958b\u59cb\u90fd\u662f\u81ea\u5df1\u4e00\u7d44</p> <p>\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6703\u662f\u5176\u4e2d\u4e00\u7a2e</p> <ul> <li> <p>\\(\\text{Merge}(x,y):\\) \u5c07 \\(x,y\\) \u6240\u5728\u7684\u5169\u500b\u7fa4\u9ad4\u5408\u4f75\u70ba\u540c\u4e00\u500b</p> </li> <li> <p>\\(\\text{MoveGroup}(x,y):\\) \u628a\u5305\u542b\u7269\u54c1 \\(x\\) \u8207\u7269\u54c1 \\(y\\) \u7684\u5169\u500b\u7d44\u5225\u5408\u4f75\u6210\u4e00\u500b</p> </li> <li> <p>\\(\\text{GroupMax}(x):\\) \u6c42\u8ddf\u7269\u54c1 \\(x\\) \u540c\u4e00\u7d44\u7684\u7269\u54c1\u4e2d\uff0c\u7de8\u865f\u6700\u5927\u7684\u7269\u54c1\u7de8\u865f</p> </li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u7dad\u8b77\u5f88\u591a\u500b priority_queue</p> <p>\u6bcf\u500b pq \u88e1\u9762\u5b58\u5f88\u591a \\(\\texttt{pair}(x, t)\\)\uff0c\\(x\\) \u5c31\u662f\u6709\u7684\u5143\u7d20\uff0c\\(t\\) \u662f\u6642\u9593\u6233\u8a18</p> <p>\u6bcf\u6b21 Move \u4e0d\u8981\u771f\u7684\u628a\u6771\u897f\u642c\u5230\u5225\u7684 Group, \u800c\u662f\u76f4\u63a5\u65b0\u589e\u4e00\u500b\u6642\u9593\u6233\u8a18\u6bd4\u8f03\u5927\u7684 \\((x, t')\\)</p> <p>\u627e\u6700\u5927\u503c\u7684\u6642\u5019\uff0c\u4e00\u76f4\u770b\u9019\u500b pq \u7684 \\(\\max\\)</p> <p>\u5982\u679c\u6642\u9593\u6233\u8a18\u5df2\u7d93\u904e\u671f\u4e86\u5c31\u4e1f\u6389\u5143\u7d20\uff0c\u4e00\u76f4\u5230\u627e\u5230\u4e00\u500b\u4e0d\u662f\u904e\u671f\u7684\u5143\u7d20</p>"},{"location":"graph/dsu/#rollback-dsu","title":"rollback DSU","text":""},{"location":"graph/dsu/#_7","title":"\u6a21\u677f","text":"\u6a21\u677f CF EDU DSU A. DSU with rollback <p>\u6709 \\(n\\) \u500b\u9ede\u8207 \\(m\\) \u500b\u4ee5\u4e0b\u64cd\u4f5c : </p> <ul> <li> <p>\\(\\text{union}(u,v):\\) \u5c07 \\(u,v\\) \u6240\u5728\u7684\u9023\u901a\u584a\u5408\u4f75\u6210\u540c\u4e00\u500b\u9023\u901a\u584a</p> </li> <li> <p>\\(\\text{persist}:\\) \u65b0\u589e\u4e00\u500b checkpoint</p> </li> <li> <p>\\(\\text{rollback:}\\) \u56de\u5230\u4e0a\u4e00\u500b\u9084\u6c92\u88ab rollback \u7684 checkpoint</p> </li> </ul> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u6a21\u677f <pre><code>struct Graph {\n    Graph(int n) : n(n) {\n        sz = vector&lt;int&gt;(n, 1);\n        par = vector&lt;int&gt;(n);\n        cnt = n;\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    void add_edge(int u, int v) {\n        int x = find (u), y = find (v);\n        if (x == y) {\n            stk.push ({x, x});\n            return;\n        }\n\n        if (sz[x] &lt; sz[y]) swap(x, y);\n        sz[x] += sz[y]; par[y] = x;\n        cnt--;\n        stk.push({x, y});\n    }\n    void undo() {\n        auto [x, y] = stk.top ();\n        stk.pop ();\n        if (x == y) return;\n        sz[x] -= sz[y]; par[y] = y;\n        cnt++;\n    }\n    int size() {\n        return cnt;\n    }\n\nprivate :\n    int n, cnt;\n    vector&lt;int&gt; sz;\n    vector&lt;int&gt; par;\n    stack&lt;pii&gt; stk;\n\n    int find(int x) {\n        if (par[x] == x) return x;\n        else return find (par[x]);\n    }\n};\n</code></pre> rollback dsu \u652f\u63f4\u5224\u4e8c\u5206\u5716 <pre><code>struct Graph {\n    Graph(int n) : n(n) {\n        sz = vector&lt;int&gt;(n, 1);\n        par = vector&lt;int&gt;(n);\n        dis = vector&lt;int&gt;(n);\n        cnt = 0;\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    void add_edge(const Edge &amp;e) {\n        auto [x, disx] = find(e.u);\n        auto [y, disy] = find(e.v);\n        if (x == y) {\n            // if (disx == disy) =&gt; odd cycle\n            cnt += (disx == disy);\n            stk.push ({-1, (disx == disy)});\n            return;\n        }\n\n        if (sz[x] &lt; sz[y]) swap(x, y);\n        sz[x] += sz[y]; par[y] = x; dis[y] = disx ^ disy ^ 1;\n        stk.push({x, y});\n    }\n    void undo() {\n        auto [x, y] = stk.top();\n        stk.pop();\n        if (x == -1) {\n            cnt -= y;\n            return;\n        }\n        sz[x] -= sz[y]; par[y] = y; dis[y] = 0;\n    }\n    bool check() {\n        // return : \u6709\u6c92\u6709 odd cycle\n        return (cnt &gt; 0);\n    }\n\nprivate :\n    int n, cnt;\n    vector&lt;int&gt; sz;\n    vector&lt;int&gt; par;\n    vector&lt;int&gt; dis;\n    stack&lt;pii&gt; stk;\n\n    pii find(int x) {\n        if (par[x] == x) return {x, 0};\n        else {\n            auto [fa, d] = find(par[x]);\n            return {fa, d ^ dis[x]};\n        } \n    }\n};\n</code></pre>"},{"location":"graph/dsu/#_8","title":"\u8907\u96dc\u5ea6","text":"<p>\u4e0d\u80fd\u4f7f\u7528\u8def\u5f91\u58d3\u7e2e\uff08\u4f46\u9084\u662f\u53ef\u4ee5\u555f\u767c\u5f0f\u5408\u4f75\uff09\uff0c\u6545\u8907\u96dc\u5ea6 \\(O(\\log n)\\)</p>"},{"location":"graph/dsu/#_9","title":"\u5e36\u6b0a\u4e26\u67e5\u96c6","text":"CF 1594 D. The Number of Imposters <p>\u7d66\u5b9a \\(n\\) \u500b\u9ede\uff0c\u6bcf\u500b\u9ede\u6709\u4e00\u500b\u672a\u77e5\u7684 \\(w_i\\in \\{0,1\\}\\)\uff0c\u518d\u7d66 \\(m\\) \u500b\u95dc\u4fc2</p> <ul> <li>\\((x,y,0):\\) \\(w_x = w_y\\)</li> <li>\\((x,y,1):\\) \\(w_x \\neq w_y\\)</li> </ul> <p>\u5224\u65b7\u6700\u591a\u6709\u591a\u5c11\u500b\u9ede\u7684 \\(w_i=1\\)</p> \u601d\u8def 1 <p>\u8003\u616e\u4e8c\u5206\u5716\u67d3\u8272\u6cd5\u5224\u65b7\uff0c\u5169\u500b\u9ede\u4e4b\u9593\u6709\u908a\u4ee3\u8868\u5169\u9ede\u7684\u984f\u8272\u4e0d\u540c</p> <ul> <li>\\((x,y,0):\\) \u5728 \\(x,y\\) \u4e4b\u9593\u5efa\u4e00\u689d\u908a</li> <li>\\((x,y,1):\\) \u5efa\u7acb\u4e00\u500b \\(z\\) \u9ede\u5206\u5225\u9023\u63a5 \\(x,y\\)</li> </ul> <p>\u9019\u6a23\u4e0b\u53bb\u8dd1\u4e8c\u5206\u5716\u67d3\u8272\u6cd5\u5373\u53ef\uff0c\u6bcf\u500b\u9023\u901a\u584a\u7b54\u6848\u53d6\u5169\u7a2e\u984f\u8272\u7684 \\(\\max\\)\uff0c\u518d\u52a0\u8d77\u4f86 \u6ce8\u610f\u5728\u8dd1\u4e8c\u5206\u5716\u67d3\u8272\u6cd5\u6642\u4e0d\u80fd\u5c07\u591a\u9918\u7684 \\(z\\) \u9ede\u7b97\u9032\u53bb</p> code(from acwing) <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\ntypedef pair&lt;ll, ll&gt; pii;\nconst int N = 7e5 + 10;\nconst int M = 2e6 + 8e5 + 10;\nint c[2];\nint n, z;\nint e[M], ne[M], h[N], idx;\nint st[N];\n\nvoid add(int a, int b) {\n    e[idx] = b, ne[idx] = h[a], h[a] = idx++;\n}\n\nvoid init() {\n    idx = 0;\n    for (int i = 1; i &lt;= z; i++)\n    {\n        h[i] = -1;\n        st[i] = 0;\n    }\n}\nbool dfs(int u, int color) {\n    st[u] = color;\n    if (u &lt;= n) // \u4e0d\u7b97\u5165 z \u9ede\n        c[2 - color]++;\n\n    for (int i = h[u]; i != -1; i = ne[i]) {\n        int j = e[i];\n        if (!st[j]) {\n            if (!dfs(j, 3 - color))\n                return false;\n        }\n        else if (st[j] == color)\n            return false;\n    }\n    return true;\n}\n\nvoid slove() {\n    int m;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    z = n + 1;\n    for (int i = 1; i &lt;= m; i++) {\n        int a, b;\n        char c[10];\n        scanf(\"%d %d %s\", &amp;a, &amp;b, c);\n\n        if (c[0] == 'c') {\n            add(a, z);\n            add(z, a);\n            add(b, z);\n            add(z, b);\n            z++;\n        }\n        else {\n            add(a, b);\n            add(b, a);\n        }\n    }\n    int ans = 0;\n    int ok = true;\n    for (int i = 1; i &lt;= n; i++) {\n        if (!st[i]) {\n            c[0] = 0;\n            c[1] = 0;\n            bool flag = dfs(i, 1);\n\n            if (!flag) {\n                ok = false;\n                break;\n            }\n\n            ans += max(c[0], c[1]);\n        }\n    }\n    if (!ok)\n        ans = -1;\n\n    cout &lt;&lt; ans &lt;&lt; endl;\n    init ();\n}\n\nint main() {\n    int Q;\n    cin &gt;&gt; Q;\n    memset(h, -1, sizeof h);\n    while (Q--) {\n        slove();\n    }\n    return 0;\n}\n</code></pre> \u601d\u8def 2 <p>\u8003\u616e\u5e36\u6b0a\u4e26\u67e5\u96c6</p> <p>\u5c0d\u65bc\u6bcf\u500b\u4e26\u67e5\u96c6\u7dad\u8b77\u4e26\u67e5\u96c6\u5167\u6bcf\u500b\u9ede\u8207 root \u7684\u8ddd\u96e2\u662f \\(0\\) \u6216\u662f \\(1\\)</p> <p>\u6700\u5f8c\u6bcf\u500b\u4e26\u67e5\u96c6 \\(\\max(\\)\u8207 root \u7684\u8ddd\u96e2\u662f \\(0\\) \u7684\u6578\u91cf \\(,\\) \u8207 root \u7684\u8ddd\u96e2\u662f \\(1\\) \u7684\u6578\u91cf\\()\\) </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nconst int INF = 9e18;\nconst int maxn = 2e5 + 5;\nint n, m;\nint dis[maxn], par[maxn], cnt[maxn][2];\n\nint find(int x) {\n    if (par[x] == x) return x;\n    else {\n        int root = find(par[x]);\n        dis[x] ^= dis[par[x]];\n        par[x] = root;\n        return root;\n    }\n}\n\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) dis[i] = 0, par[i] = i, cnt[i][0] = 1, cnt[i][1] = 0;\n\n    string s;\n    int fg = 0;\n\n    for (int i = 1, u, v; i &lt;= m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; s;\n\n        int dif;\n        if (s[0] == 'i') dif = 1; \n        else dif = 0; // same\n\n        int x = find(u), y = find(v);\n        if (x == y) {\n            if ((dis[u] ^ dis[v]) != dif) fg = 1;\n        }\n        else {\n            dis[y] = dis[u] ^ dis[v] ^ dif;\n            par[y] = x;\n            cnt[x][0] += cnt[y][dis[y]];\n            cnt[x][1] += cnt[y][dis[y] ^ 1];\n        }\n    }\n\n    if (fg == 1) {\n        cout &lt;&lt; -1 &lt;&lt; \"\\n\";\n        return;\n    }\n\n    int res = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (find(i) == i) {\n            res += max (cnt[i][0], cnt[i][1]);\n        }\n    }\n    cout &lt;&lt; res &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre>"},{"location":"graph/dsu/#_10","title":"\u6301\u4e45\u5316\u4e26\u67e5\u96c6","text":"<p>\u5148\u5099\u77e5\u8b58 : \u6301\u4e45\u5316\u8cc7\u6599\u7d50\u69cb</p> \u6d1b\u8c37 P3402 \u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6 <p>\u7d66\u5b9a \\(n\\) \u500b\u96c6\u5408\uff0c\u7b2c \\(i\\) \u500b\u96c6\u5408\u5167\u521d\u59cb\u72c0\u614b\u4e0b\u53ea\u6709\u4e00\u500b\u6578\uff0c\u70ba \\(i\\)\u3002</p> <p>\u6709 \\(m\\) \u6b21\u64cd\u4f5c\u3002\u64cd\u4f5c\u5206\u70ba \\(3\\) \u7a2e\uff1a</p> <ul> <li> <p>\\(1\\space a\\space b:\\) \u5408\u4f75 \\(a,b\\) \u6240\u5728\u96c6\u5408</p> </li> <li> <p>\\(2\\space k:\\) \u56de\u5230\u7b2c \\(k\\) \u6b21\u64cd\u4f5c\u4e4b\u5f8c\u7684\u72c0\u614b</p> </li> <li> <p>\\(3 \\space a\\space b:\\) \u8a62\u554f \\(a,b\\) \u662f\u5426\u5c6c\u65bc\u540c\u4e00\u96c6\u5408</p> </li> </ul> <p>\u8a3b : \u57f7\u884c\u4e09\u7a2e\u64cd\u4f5c\u4e2d\u7684\u4efb\u610f\u4e00\u7a2e\u90fd\u8a18\u70ba\u4e00\u6b21\u64cd\u4f5c</p> <p>\\(n\\le 10^5,m\\le 2\\times 10^5\\)</p> \u5be6\u4f5c\u7d30\u7bc0 <p>size \u8981\u7dad\u8b77\u597d\uff0c\u4e0d\u7136\u53ef\u80fd\u6703\u5403 TLE\uff08\u555f\u767c\u5f0f\u5408\u4f75\u58de\u6389\uff09</p> <p>\u8a18\u5f97\u6bcf\u6b21\u64cd\u4f5c\u5f8c\u8981\u8a18\u5f97 clone\uff0c\u4e0d\u7136\u6703\u5403 RE\uff08\u6233\u5230 roots[] \u9663\u5217\u5916\u9762\uff09</p> <p>\u4e0d\u80fd\u5728 Node \u88e1\u9762\u5b58 l, r\uff0c\u907f\u514d MLE </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int val, sz;\n\n    Node() {}\n};\n\nstruct DSU {\n    int n;\n\n    DSU(int n) : n(n) {\n        roots[0] = build(0, n - 1);\n    }\n\n    int check(int x, int y) {\n        int ver = roots.size() - 1;\n        int Fx = find(ver, x);\n        int Fy = find(ver, y);\n        roots.pb(new Node(*roots[ver]));\n        if (Fx == Fy) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    void merge(int x, int y) {\n        int ver = roots.size() - 1;\n        int Fx = find(ver, x);\n        int Fy = find(ver, y);\n        int Sx = query_sz(roots[ver], 0, n - 1, Fx), Sy = query_sz(roots[ver], 0, n - 1, Fy);\n        if (Fx == Fy) {\n            roots.pb(new Node(*roots[ver]));\n            return;\n        }\n        if (Sx &lt; Sy) swap(x, y), swap(Sx, Sy), swap(Fx, Fy);\n        // fx-&gt;sz &gt; fy-&gt;sz\n\n        // sz[Fx] += sz[Fy]\n        Node* tmp = update_sz(roots[ver], 0, n - 1, Fx, Sy);\n        // par[Fy] = Fx\n        roots.pb(update_val(tmp, 0, n - 1, Fy, Fx));\n    }\n\n    void rollback(int ver) {\n        //assert(ver &lt; roots.size());\n        roots.pb(new Node(*roots[ver]));\n    }\n\n    private:\n    // \u55ae\u9ede\u6539\u503c, \u55ae\u9ede\u52a0\u503c, \u55ae\u9ede\u67e5\u8a62\n    vector&lt;Node*&gt; roots = {nullptr};\n\n    int find(int ver, int x) {\n        int Fx = query_val(roots[ver], 0, n - 1, x);\n        if (Fx == x) return Fx;\n        else return find(ver, Fx);\n    }\n\n    Node* build(int l, int r) {\n        Node* root = new Node();\n        if (l == r) {\n            root-&gt;val = l;\n            root-&gt;sz = 1;\n            return root;\n        }\n\n        int mid = (l + r) / 2;\n        root-&gt;lc = build(l, mid);\n        root-&gt;rc = build(mid + 1, r);\n        return root;\n    }\n\n    Node* update_val(const Node* root, int l, int r, int pos, int val) {\n        Node* now = new Node(*root);\n        if (l == r) {\n            now-&gt;val = val;\n            return now;\n        }\n\n        int mid = (l + r) / 2;\n        if (pos &lt;= mid) {\n            now-&gt;lc = update_val(now-&gt;lc, l, mid, pos, val);\n        } else {\n            now-&gt;rc = update_val(now-&gt;rc, mid + 1, r, pos, val);\n        }\n\n        return now;\n    }\n\n    Node* update_sz(const Node* root, int l, int r, int pos, int val) {\n        Node* now = new Node(*root);\n        if (l == r) {\n            now-&gt;sz += val;\n            return now;\n        }\n\n        int mid = (l + r) / 2;\n        if (pos &lt;= mid) {\n            now-&gt;lc = update_sz(now-&gt;lc, l, mid, pos, val);\n        } else {\n            now-&gt;rc = update_sz(now-&gt;rc, mid + 1, r, pos, val);\n        }\n\n        return now;\n    }\n\n    int query_val(Node* root, int l, int r, int pos) {\n        if (l == r) {\n            return root-&gt;val;\n        } \n        int mid = (l + r) / 2;\n        if (pos &lt;= mid) {\n            return query_val(root-&gt;lc, l, mid, pos);\n        } else {\n            return query_val(root-&gt;rc, mid + 1, r, pos);\n        }\n    }\n\n    int query_sz(Node* root, int l, int r, int pos) {\n        if (l == r) {\n            return root-&gt;sz;\n        } \n        int mid = (l + r) / 2;\n        if (pos &lt;= mid) {\n            return query_sz(root-&gt;lc, l, mid, pos);\n        } else {\n            return query_sz(root-&gt;rc, mid + 1, r, pos);\n        }\n    }\n};\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    DSU dsu(n);\n\n    int op, a, b, k;\n    while(q--) {\n        cin &gt;&gt; op;\n\n        if (op == 1) {\n            cin &gt;&gt; a &gt;&gt; b;\n            a--, b--;\n            dsu.merge(a, b);\n        } else if (op == 2) {\n            cin &gt;&gt; k;\n            dsu.rollback(k);\n        } else if (op == 3) {\n            cin &gt;&gt; a &gt;&gt; b;\n            a--, b--;\n            cout &lt;&lt; dsu.check(a, b) &lt;&lt; '\\n';\n        }\n    }\n} \n</code></pre> <p>\u60f3\u6cd5\u4e0a\u662f\u5229\u7528 DSU \u7684 par, size \u5176\u5be6\u662f\u9663\u5217\uff0c\u5c07\u9019\u5169\u500b\u9663\u5217\u90fd\u5957\u4e0a\u6301\u4e45\u5316\u7dda\u6bb5\u6a39\u7684\u6a21\u677f\u5f8c\uff0c\u5373\u53ef\u4f7f\u7528\uff0c\u529f\u80fd\u662f\u55ae\u9ede\u67e5\u8a62\uff08par, size\uff09\uff0c\u55ae\u9ede\u52a0\u503c\uff08size\uff09\uff0c\u55ae\u9ede\u6539\u503c\uff08par\uff09</p> \u6a21\u677f <pre><code>struct Node {\n    Node* lc = nullptr;\n    Node* rc = nullptr;\n    int val, sz;\n\n    Node() {}\n};\n\nstruct DSU {\n    int n;\n\n    DSU(int n) : n(n) {\n        roots[0] = build(0, n - 1);\n    }\n\n    int check(int x, int y) {\n        int ver = roots.size() - 1;\n        int Fx = find(ver, x);\n        int Fy = find(ver, y);\n        roots.pb(new Node(*roots[ver]));\n        if (Fx == Fy) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    void merge(int x, int y) {\n        int ver = roots.size() - 1;\n        int Fx = find(ver, x);\n        int Fy = find(ver, y);\n        int Sx = query_sz(roots[ver], 0, n - 1, Fx), Sy = query_sz(roots[ver], 0, n - 1, Fy);\n        if (Fx == Fy) {\n            roots.pb(new Node(*roots[ver]));\n            return;\n        }\n        if (Sx &lt; Sy) swap(x, y), swap(Sx, Sy), swap(Fx, Fy);\n        // fx-&gt;sz &gt; fy-&gt;sz\n\n        // sz[Fx] += sz[Fy]\n        Node* tmp = update_sz(roots[ver], 0, n - 1, Fx, Sy);\n        // par[Fy] = Fx\n        roots.pb(update_val(tmp, 0, n - 1, Fy, Fx));\n    }\n\n    void rollback(int ver) {\n        //assert(ver &lt; roots.size());\n        roots.pb(new Node(*roots[ver]));\n    }\n\n    private:\n    // \u55ae\u9ede\u6539\u503c, \u55ae\u9ede\u52a0\u503c, \u55ae\u9ede\u67e5\u8a62\n    vector&lt;Node*&gt; roots = {nullptr};\n\n    int find(int ver, int x) {\n        int Fx = query_val(roots[ver], 0, n - 1, x);\n        if (Fx == x) return Fx;\n        else return find(ver, Fx);\n    }\n\n    Node* build(int l, int r) {\n        Node* root = new Node();\n        if (l == r) {\n            root-&gt;val = l;\n            root-&gt;sz = 1;\n            return root;\n        }\n\n        int mid = (l + r) / 2;\n        root-&gt;lc = build(l, mid);\n        root-&gt;rc = build(mid + 1, r);\n        return root;\n    }\n\n    Node* update_val(const Node* root, int l, int r, int pos, int val) {\n        Node* now = new Node(*root);\n        if (l == r) {\n            now-&gt;val = val;\n            return now;\n        }\n\n        int mid = (l + r) / 2;\n        if (pos &lt;= mid) {\n            now-&gt;lc = update_val(now-&gt;lc, l, mid, pos, val);\n        } else {\n            now-&gt;rc = update_val(now-&gt;rc, mid + 1, r, pos, val);\n        }\n\n        return now;\n    }\n\n    Node* update_sz(const Node* root, int l, int r, int pos, int val) {\n        Node* now = new Node(*root);\n        if (l == r) {\n            now-&gt;sz += val;\n            return now;\n        }\n\n        int mid = (l + r) / 2;\n        if (pos &lt;= mid) {\n            now-&gt;lc = update_sz(now-&gt;lc, l, mid, pos, val);\n        } else {\n            now-&gt;rc = update_sz(now-&gt;rc, mid + 1, r, pos, val);\n        }\n\n        return now;\n    }\n\n    int query_val(Node* root, int l, int r, int pos) {\n        if (l == r) {\n            return root-&gt;val;\n        } \n        int mid = (l + r) / 2;\n        if (pos &lt;= mid) {\n            return query_val(root-&gt;lc, l, mid, pos);\n        } else {\n            return query_val(root-&gt;rc, mid + 1, r, pos);\n        }\n    }\n\n    int query_sz(Node* root, int l, int r, int pos) {\n        if (l == r) {\n            return root-&gt;sz;\n        } \n        int mid = (l + r) / 2;\n        if (pos &lt;= mid) {\n            return query_sz(root-&gt;lc, l, mid, pos);\n        } else {\n            return query_sz(root-&gt;rc, mid + 1, r, pos);\n        }\n    }\n};\n</code></pre>"},{"location":"graph/dsu/#_11","title":"\u8907\u96dc\u5ea6","text":"<p>\u8ddf rollback DSU \u4e00\u6a23\uff0c\u4e0d\u505a\u8def\u5f91\u58d3\u7e2e\uff0c\u505a\u555f\u767c\u5f0f\u5408\u4f75</p> <p>\u56e0\u70ba <code>find(x)</code> \u7684\u6642\u5019\u81f3\u591a\u9700\u8981\u505a \\(\\log n\\) \u6b21\u55ae\u9ede\u67e5\u8a62\uff0c\u6545 <code>find(x)</code> \u8907\u96dc\u5ea6 \\(O(\\log^2 n)\\)</p>"},{"location":"graph/dsu/#_12","title":"\u7a2e\u985e\u4e26\u67e5\u96c6","text":"<p>\u7a2e\u985e\u4e26\u67e5\u96c6\u4e5f\u53eb\u64f4\u5c55\u57df\u4e26\u67e5\u96c6\u3002\u9019\u5176\u5be6\u4e0d\u80fd\u7b97\u505a\u4e00\u7a2e\u7279\u6b8a\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5b83\u5be6\u969b\u4e0a\u662f\u4f7f\u7528\u4e26\u67e5\u96c6\u4f86\u89e3\u6c7a\u4e00\u985e\u5faa\u74b0\u4f9d\u8cf4\u7684\u985e\u5225\u5224\u5b9a\u554f\u984c</p> \u4e26\u67e5\u96c6\u505a\u4e8c\u5206\u5716 TIOJ  1209 . \u5716\u8ad6 \u4e4b \u4e8c\u5206\u5716\u6e2c\u8a66 <p>\u6709 \\(n\\) \u500b\u9ede\uff0c\u7d66 \\(m\\) \u500b \\((u,v)\\) \u4ee3\u8868 \\(u,v\\) \u4e0d\u540c\u7d44\uff0c\u554f\u6709\u6c92\u6709\u8fa6\u6cd5\u5c07\u9019\u4e9b\u9ede\u6210\u5169\u7d44 </p> <p>\\(n \\le 4\\times 10^4, m\\le 5\\times 10^5\\)</p> \u601d\u8def <p>\u6bcf\u500b\u9ede\u958b\u5169\u500b\u9ede x, x + n \u4ee3\u8868\u6b63\uff0c\u53cd\u3002\u5728\u540c\u4e00\u500b\u96c6\u5408\u5167\u4ee3\u8868\u8981\u5716\u540c\u4e00\u7a2e\u984f\u8272\uff0c\u904d\u6b77 m \u5c0d\u95dc\u4fc2\uff0c\u5c0d\u6bcf\u5c0d (u, v)\uff0c\u82e5\u5728\u540c\u4e00\u500b\u96c6\u5408\u5167\u5247\u8868\u793a (u, v) \u7684\u95dc\u4fc2\u8207\u4e4b\u524d\u7684\u95dc\u4fc2\u6709\u885d\u7a81\uff0c\u4e0d\u80fd\u540c\u6642\u89e3\u6c7a\uff0c\u76f4\u63a5 break \u6389\uff0c\u5426\u5247\uff0c\u57f7\u884c merge(u, v + n), merge(v, u + n)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 5e5 + 5;\nint n, m;\nint par[MAXN];\n\nvoid dsu_init() {\n    for (int i = 1; i &lt;= 2 * n; i++) {\n        par[i] = i;\n    }\n}\n\nint find(int x) {\n    if (par[x] == x) {\n        return x;\n    } else {\n        return par[x] = find(par[x]);\n    }\n}\n\nvoid merge(int a, int b) {\n    int x = find(a);\n    int y = find(b);\n    if (x == y) return;\n    par[x] = y;\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    while (cin &gt;&gt; n &gt;&gt; m) {\n        if (n == 0 &amp;&amp; m == 0) {\n            break;\n        }\n        dsu_init();\n        vector&lt;pair&lt;int, int&gt;&gt; edges;\n        int u, v;\n        for (int i = 0; i &lt; m; i++) {\n            cin &gt;&gt; u &gt;&gt; v;\n            edges.push_back({u, v});\n        }\n        bool flag = true;\n        for (auto [u, v] : edges) {\n            if (find(u) == find(v)) {\n                cout &lt;&lt; \"No\\n\";\n                flag = false;\n                break;\n            } else {\n                merge(u, v + n);\n                merge(v, u + n);\n            }\n        }\n        if (flag) {\n            cout &lt;&lt; \"Yes\\n\";\n        }\n    }\n}\n</code></pre> \u6d1b\u8c37 P2024 [NOI2001] \u98df\u7269\u94fe <p>\u6709\u4e09\u985e\u52d5\u7269 \\(A,B,C\\)\uff0c\u9019\u4e09\u985e\u52d5\u7269\u7684\u2fb7\u7269\u93c8\u69cb\u6210\u5982\u4e0b\uff1a\\(A\\) \u5403 \\(B\\)\uff0c \\(B\\) \u5403 \\(C\\)\uff0c\\(C\\) \u5403 \\(A\\)\u3002</p> <p>\u73fe\u6709 \\(N\\) \u500b\u52d5\u7269\uff0c\u7de8\u865f \\(1,2,...,N\\)\u3002\u6bcf\u500b\u52d5\u7269\u90fd\u662f \\(A,B,C\\) \u4e2d\u7684\u2f00\u7a2e\uff0c\u4f46\u4e26\u4e0d\u77e5\u9053\u662f\u54ea\u2f00\u7a2e\u3002\u4f9d\u5e8f\u7d66 \\(K\\) \u689d\u5c6c \u65bc\u4ee5\u4e0b\u5169\u7a2e\u7684\u6558\u8ff0\uff1a</p> <ul> <li> <p>\\(1\\space X\\space Y\\)\uff0c\u8868\u2f70 \\(X\\) \u548c \\(Y\\) \u662f\u540c\u985e</p> </li> <li> <p>\\(2\\space X\\space Y\\)\uff0c\u8868\u2f70 \\(X\\) \u5403 \\(Y\\)</p> </li> </ul> <p>\u7136\u2f7d\uff0c\u4e26\u4e0d\u662f\u6bcf\u689d\u63cf\u8ff0\u90fd\u662f\u6b63\u78ba\u7684\uff0c\u6709\u4e9b\u662f\u771f\u8a71\uff0c\u6709\u4e9b\u662f\u5047\u8a71\u3002 \u5982\u679c\u7576\u524d\u7684\u8a71\u8207\u524d\u2faf\u7684\u67d0\u4e9b\u771f\u8a71\u885d\u7a81\uff0c\u5c31\u662f\u5047\u8a71\u8acb\u5224\u65b7\u54ea\u4e9b\u8a71\u662f\u771f\u8a71\uff0c\u54ea\u4e9b\u8a71\u662f\u5047\u8a71\u3002</p> <p>\\(N\\le 5\\times 10^4, K\\le 10^5\\)</p> \u601d\u8def <ul> <li> <p>\u6211\u5011\u53ef\u4ee5\u2f64\u4e26\u67e5\u96c6\u7dad\u8b77\u8cc7\u8a0a\u9593\u7684\u56e0\u679c\u95dc\u4fc2</p> </li> <li> <p>\u2f00\u500b\u96c6\u5408\u88e1\u2faf\u7684\u8cc7\u8a0a\u4ee3\u8868\u300c\u9019\u4e9b\u8cc7\u8a0a\u5fc5\u9808\u540c\u6642\u767c\u2f63\u300d</p> </li> <li> <p>\u2f50\u5982\u8aaa\uff0c\u5047\u8a2d \\((x,y)\\) \u7b26\u5408\u7b2c\u2f00\u7a2e\u8cc7\u8a0a</p> </li> <li> <p>\u90a3\u5c31\u4ee3\u8868\uff1a\u5982\u679c \\(x\\) \u662f \\(A\\) \u985e\uff0c\u90a3 \\(y\\) \u5fc5\u9808\u662f \\(A\\) \u985e\uff0c\u53cd\u4e4b\u4ea6\u7136 \uff08\\(B,C\\) \u985e\u540c\u6a23\u53ef\u4ee5\u5957\u2f64\uff09</p> </li> <li> <p>\u7ffb\u8b6f\u2f00\u4e0b\uff1a\u5982\u679c \\(x_A\\) \u767c\u2f63\u7684\u8a71\uff0c\u90a3 \\(y_A\\) \u4e5f\u2f00\u5b9a\u8981\u767c\u2f63\uff08\\(B,C\\) \u985e\u540c\u6a23\u53ef\u4ee5\u5957\u2f64\uff09</p> </li> <li> <p>\\(\\text{merge}(x_A, y_A),\\text{merge}(x_B, y_B), \\text{merge}(x_C,y_C)\\)</p> </li> </ul> <ul> <li> <p>\u2f50\u5982\u8aaa\uff0c\u5047\u8a2d \\((x, y)\\) \u7b26\u5408\u7b2c\u2f06\u7a2e\u8cc7\u8a0a</p> </li> <li> <p>\u90a3\u5c31\u4ee3\u8868\uff1a</p> <ul> <li>\u5982\u679c \\(x\\) \u662f \\(A\\) \u985e\uff0c\u90a3 \\(y\\) \u5fc5\u9808\u662f \\(B\\) \u985e\uff0c\u53cd\u4e4b\u4ea6\u7136</li> <li>\u5982\u679c \\(x\\) \u662f \\(B\\) \u985e\uff0c\u90a3 \\(y\\) \u5fc5\u9808\u662f \\(C\\) \u985e\uff0c\u53cd\u4e4b\u4ea6\u7136</li> </ul> </li> <li> <p>\u5982\u679c \\(x\\) \u662f \\(C\\) \u985e\uff0c\u90a3 \\(y\\) \u5fc5\u9808\u662f \\(A\\) \u985e\uff0c\u53cd\u4e4b\u4ea6\u7136</p> </li> <li> <p>\\(\\text{merge}(x_A, y_B),\\text{merge}(x_B, y_C), \\text{merge}(x_C,y_A)\\) </p> </li> </ul> <ul> <li>\u77db\u76fe\u7684\u60c5\u6cc1\u5462 ?</li> <li>\u5047\u5982 \\((x, y)\\) \u7b26\u5408\u7b2c\u2f06\u7a2e\u8cc7\u8a0a</li> <li>\u5982\u679c \\(\\text{find}(x_A)=\\text{find}(y_C)\\) \u6216 \\(\\text{find}(x_A)=\\text{find}(y_A)\\) \u5247\u77db\u76fe</li> </ul> <p>\u4ed6\u5011\u6bcf\u500b col \u5c07\u6703\u4ee5 \\(A \\rightarrow B \\rightarrow C\\) \u7684\u9806\u5e8f\u65cb\u8f49 \u6240\u4ee5\u7576\u4f60\u77e5\u9053\u5176\u4e2d\u4e00\u500b\u95dc\u4fc2\u7684\u6642\u5019\u5176\u5be6\u5c31\u80fd\u63a8\u5f97\u5176\u9918\u7684\u95dc\u4fc2</p> <p>\u4f8b\u5982\u4eca\u5929 \\(1\\) \u5403 \\(2\\)\uff0c\\(2\\) \u5403 \\(3\\) \u95dc\u897f\u5982\u4e0b\u5716</p> <p> \u540c\u4e00 row \u5c6c\u65bc\u540c\u4e00\u9023\u901a\u584a\uff0c\u5fc5\u540c\u6642\u767c\u751f </p> <p> \u5716(\u4e00) </p> <p>\u56e0\u70ba \\(1\\) \u5403 \\(2\\)\uff0c\u90a3\u9ebc\u4ee5\u5716(\u4e00)\u4f86\u770b\u5c31\u662f \\(1\\) \u662f \\(A\\) \u6642\uff0c\\(2\\) \u5c31\u662f \\(B\\)</p> <p>\u53ef\u4ee5\u770b\u505a \\(1,2\\) \u5206\u5225\u4ee5 \\(A,B\\) \u70ba\u8d77\u9ede\uff0c\u7e5e\u8457\u95dc\u4fc2\u5716\u8f49\u4e00\u5708</p> <ul> <li> <p>\u7576 \\(1\\) \u5728 \\(A\\) \u6642\uff0c\\(2\\) \u5728 \\(B\\)</p> </li> <li> <p>\u7576 \\(1\\) \u5728 \\(B\\) \u6642\uff0c\\(2\\) \u5728 \\(C\\)</p> </li> <li> <p>\u7576 \\(1\\) \u5728 \\(C\\) \u6642\uff0c\\(2\\) \u5728 \\(A\\)</p> </li> </ul> <p>\u53ef\u4ee5\u770b\u5230 \\(2\\) \u4e5f\u662f\u7e5e\u8457\u95dc\u4fc2\u5716\u8d70\u4e00\u5708\u7684\uff0c\u6240\u4ee5\u7576\u4f60\u78ba\u5b9a\u4ed6\u5176\u4e2d\u4e00\u6b65\u6642\uff0c\u5c31\u80fd\u78ba\u5b9a\u5176\u4ed6\u6b65</p> <pre><code>if (flag == 1) {\n    if (check(a, b + n) || check(a, b + 2 * n)) {\n        ans++;\n    } else {\n        merge(a, b), merge(a + n, b + n), merge(a + 2 * n, b + 2 * n);\n    }\n} else {\n    if (check(a, b) || check(a, b + 2 * n)) {\n        ans++;\n    } else {\n        merge(a, b + n), merge(a + n, b + 2 * n), merge(a + 2 * n, b);\n    }\n}\n</code></pre>"},{"location":"graph/dsu/#_13","title":"\u7528\u9014","text":""},{"location":"graph/dsu/#_14","title":"\u4e26\u67e5\u96c6\u5224\u74b0","text":"\u4e26\u67e5\u96c6\u5224\u74b0 <p>\u7d66\u4e00\u5f35\u5716\uff0c\u554f\u662f\u5426\u5b58\u5728\u74b0</p> \u601d\u8def <p>\u82e5\u51fa\u73fe\u4e00\u689d\u908a\u7684\u9130\u63a5\u9ede\u5728\u540c\u4e00\u500b\u96c6\u5408\u88e1\uff0c\u5247\u53ef\u8b49\u660e\u6709\u74b0\u5b58\u5728</p>"},{"location":"graph/dsu/#_15","title":"\u4e26\u67e5\u96c6\u751f\u6210\u6a39","text":"\u4e26\u67e5\u96c6\u751f\u6210\u6a39 CSES - New Roads Queries <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u4f9d\u5e8f\u52a0\u5165 \\(m\\) \u689d\u908a\uff0c\u56de\u7b54 \\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\\(a,b\\) \u5728\u52a0\u5165\u7b2c\u5e7e\u689d\u908a\u6642\u9023\u901a\uff0c\u6216\u6c92\u6709\u9023\u901a</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u4e26\u67e5\u96c6\u751f\u6210\u6a39\u7684\u89e3\u6cd5: \u9ede\u6b64\u8655</p>"},{"location":"graph/dsu/#dsu","title":"\u5e8f\u5217\u4e0a\u7684 DSU","text":"OI Wiki \u5e76\u67e5\u96c6\u5e94\u7528 - pD <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684 01 \u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4e00\u958b\u59cb\u5168\u662f 0\uff0c\u63a5\u4e0b\u4f86\u6709 \\(m\\) \u500b\u64cd\u4f5c:</p> <ul> <li> <p>\u4ee4 \\(a_x=1\\)</p> </li> <li> <p>\u6c42 \\(a_x, a_{x+1}, \\ldots ,a_n\\) \u4e2d\u5de6\u6578\u7b2c\u4e00\u500b 0 \u7684\u4f4d\u7f6e</p> </li> </ul> \u601d\u8def <p>\u6211\u5011\u7684\u60f3\u6cd5\u662f\u5efa\u7acb\u4e00\u500b\u4e26\u67e5\u96c6\uff0c\u5c0d\u65bc\u6bcf\u4e00\u9805\uff0c\u7dad\u8b77\u4e00\u500b \\(f_i\\) \u6307\u5411\u53f3\u908a\u6700\u8fd1\u7684\u90a3\u500b 0 \u7684\u4f4d\u7f6e\u3002\u521d\u59cb\u5316 \\(f_i=i\\)\uff0c\u5c0d\u65bc \\(a_x=1\\)\uff0c\u82e5 \\(a_x\\) \u539f\u672c\u5c31\u662f 1 \u90a3\u5c31\u4e0d\u7ba1\uff0c\u5426\u5247\uff0c\u5c07 \\(f_x=f_{x+1}\\)\u3002\u4f7f\u7528\u8def\u5f91\u58d3\u7e2e\u53ef\u4ee5\u505a\u5230 \\(O(n \\log^* n)\\)</p> OI Wiki \u5e76\u67e5\u96c6\u5e94\u7528 - pE <p>\u7d66\u4e09\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a, b, c\\)\uff0c\u679a\u8209 \\(1\\le i &lt; j \\le n\\)\uff0c\u6c42</p> \\[a_i\\cdot b_j \\cdot \\min_{i\\le k\\le j}c_k\\] <p>\u7684\u6700\u5927\u503c</p> \u601d\u8def <p>\u5f9e\u6b0a\u503c\u5927\u5230\u5c0f\u8003\u616e \\(c_k\\)\uff0c\u5728 \\(k\\) \u4e0a\u52a0\u5165\u4e00\u500b\u9ede\uff0c\u7136\u5f8c\u5c07 \\(k-1\\) \u548c \\(k+1\\) \u4f4d\u7f6e\u4e0a\u7684\u9ede\u6240\u5728\u7684\u9023\u901a\u584a\u8207\u4e4b\u5408\u4f75\uff08\u5982\u679c\u9019\u5169\u500b\u4f4d\u7f6e\u4e0a\u6709\u9ede\u7684\u8a71\uff09\uff0c\u9023\u901a\u584a\u4e0a\u7d00\u9304 \\(a\\) \u7684\u6700\u5927\u503c\u8207 \\(b\\) \u7684\u6700\u5927\u503c\uff0c\u5373\u5728\u5408\u4f75\u6642\u66f4\u65b0\u7b54\u6848\uff0c\u6642\u9593\u8907\u96dc\u5ea6 \\(O(n \\log n)\\)</p> \u5e8f\u5217\u4e0a\u7684 DSU CF 982 D. Shark <p>\u7d66\u5927\u5c0f\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1,\\ldots, a_n\\)\u3002\u522a\u9664\u5927\u65bc\u7b49\u65bc \\(k\\) \u7684\u6578\u5b57\uff0c\u4f7f\u5f97\u5176\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6\uff1a </p> <ol> <li> <p>\u5269\u9918\u7684\u9023\u7e8c\u7684\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u9577\u5ea6\u76f8\u7b49</p> </li> <li> <p>\u5728\u6eff\u8db3\u7b2c\u4e00\u500b\u689d\u4ef6\u7684\u60c5\u6cc1\u4e0b\uff0c\u6bb5\u6578\u76e1\u53ef\u80fd\u591a</p> </li> </ol> <p>\u554f \\(k\\) \u6700\u5c0f\u80fd\u662f\u591a\u5c11</p> <p>\\(n\\le 10^5, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u679a\u8209 threshold\uff0c\u7528 DSU \u7dad\u8b77\u7d44\u5225\u3002</p> <p>\u5c07 \\(a_i\\) \u5f9e\u5c0f\u5230\u5927\u679a\u8209\u3002\u5982\u679c\u5728 \\(a_i\\) \u539f\u672c\u5e8f\u5217\u7684\u5de6\u53f3\uff08\\(a_{i-1}\\) \u8207 \\(a_{i+1}\\)\uff09\u6709\u6bd4\u5b83\u5c0f\u7684\u6578\uff0c\u5c31\u53ef\u4ee5\u5404\u81ea\u5c07\u4ed6\u5011 merge \u9032\u53bb \\(a_i\\) \u7684\u9023\u901a\u584a\u3002\u540c\u6642\u7dad\u8b77\u597d\u4e26\u67e5\u96c6\u7684\u5927\u5c0f\u3002\u5982\u679c\u6eff\u8db3\u7576\u524d\u6bcf\u500b\u9023\u901a\u584a\u7684 size \u90fd\u662f\u4e00\u6a23\u7684\uff0c\u5c31\u4ee3\u8868\u662f\u5408\u6cd5\u7684\uff0c\u5617\u8a66\u66f4\u65b0\u7b54\u6848</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int MAXN = 3e5 + 5;\nint n;\nset&lt;pii&gt; S;\n\nint par[MAXN], sz[MAXN];\n\nint find(int x) {\n    if (par[x] == x) return x;\n    return par[x] = find(par[x]);\n}\n\nvoid merge(int u, int v) {\n    u = find(u), v = find(v);\n    S.erase({sz[u], u});\n    S.erase({sz[v], v});\n    par[v] = u;\n    sz[u] += sz[v];\n    S.insert({sz[u], u});\n}\n\nbool check() {  // \u6aa2\u67e5\u6bcf\u4e00\u7d44\u7684\u500b\u6578\u662f\u5426\u90fd\u662f\u76f8\u540c\u7684\n    int l = S.begin()-&gt;first;\n    int r = S.rbegin()-&gt;first;\n    return l == r;\n}\n\nsigned main() {\n    vector&lt;pii&gt; v;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        v.pb({x, i});\n    }\n    sort(ALL(v));\n\n    for (int i = 1; i &lt;= n; i++) {\n        par[i] = -1;\n        sz[i] = 0;\n    }\n\n    // k = max(a[i]) + 1 \u6642, \u5927\u5bb6\u90fd\u88ab\u522a\u6389, \u6c92\u6709\u4efb\u4f55\u7d44\u5225\n    int mx = 0;\n    int ans = v.back().first + 1;\n\n    for (auto &amp;p : v) {\n        int x = p.second;\n        par[x] = x, sz[x] = 1;\n        S.insert({1, x});                                // \u7dad\u8b77\u7576\u524d\u6bcf\u500b\u5b58\u5728\u7684\u9023\u901a\u584a\u7684 {\u5927\u5c0f, parent}\n        if (x &gt; 1 &amp;&amp; par[x - 1] != -1) merge(x - 1, x);  // a[x - 1] &lt; a[x]\n        if (x &lt; n &amp;&amp; par[x + 1] != -1) merge(x, x + 1);  // a[x + 1] &lt; a[x]\n        if (check() &amp;&amp; S.size() &gt; mx) {                  // \u5408\u6cd5 &amp; \u64c1\u6709\u66f4\u591a\u7d44\u5225\n            ans = p.first + 1;\n            mx = S.size();\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> USACO 2018 FEB Snow Boots G <p>\u6709 \\(n\\) \u584a\u96ea\u5806\uff0c\u7b2c \\(i\\) \u584a\u4e0a\u6709\u9ad8\u5ea6\u70ba \\(f_i\\) \u7684\u96ea\uff0c\u5176\u4e2d \\(f_1\\) \u548c \\(f_n=0\\)\u3002\u6709 \\(q\\) \u7b46\u67e5\u8a62\uff1a</p> <ul> <li>\\(\\text{query}(s,d):\\) \u978b\u5b50\u4e00\u6b21\u6700\u5927\u80fd\u8de8 \\(d\\) \u683c\uff0c\u53ea\u80fd\u5728\u9ad8\u5ea6\u70ba \\(s\\) \u4ee5\u4e0b\u7684\u96ea\u5806\u8457\u5730\uff0c\u80fd\u5426\u5f9e \\(1\\) \u5230 \\(n\\)</li> </ul> <p>\\(n,q\\le 10^5, 0\\le f_i,s\\le 10^9, 1\\le d\\le n - 1\\)</p> \u601d\u8def <p>\u3010\u4e26\u67e5\u96c6\u3011</p> <p>\u9996\u5148\u8003\u616e\u554f\u984c\u672c\u8cea\u3002\u554f\u984c\u662f\u4e00\u96d9\u9774\u5b50\u80fd\u4e0d\u80fd\u8d70\u5230\u7d42\u9ede\uff0c\u9019\u96d9\u9774\u5b50\u6700\u5927\u8de8\u5ea6\u70ba \\(d\\)\uff0c\u6700\u5927\u9ad8\u5ea6\u70ba \\(s\\)\u3002\u56e0\u70ba\u8de8\u5ea6\u6700\u591a\u70ba \\(d\\)\uff0c\u5982\u679c\u9ad8\u5ea6\u6bd4 \\(s\\) \u5927\u7684\u96ea\u5806\u9023\u7e8c\u6709 \\(d\\) \u5806\uff0c\u90a3\u9ebc\u6211\u7684\u9774\u5b50\u5c31\u8de8\u4e0d\u904e\u53bb\uff0c\u4e5f\u5c31\u5230\u9054\u4e0d\u4e86\u7d42\u9ede\u3002\u9019\u9ebc\u4e00\u5206\u6790\uff0c\u554f\u984c\u8b8a\u6210\u4e86\u9023\u7e8c\u7684\u9ad8\u5ea6\u6bd4 \\(s\\) \u5927\u7684\u96ea\u5806\u7684\u6578\u91cf\u662f\u4e0d\u662f\u6bd4 \\(d\\) \u5c0f\uff0c\u5982\u679c\u6bd4 \\(d\\) \u5c0f\uff0c\u9774\u5b50\u5c31\u80fd\u8d70\u904e\u53bb\uff0c\u5426\u5247\u5c31\u4e0d\u80fd\u3002\u518d\u4f86\u770b\u4e00\u500b\u554f\u984c\uff1a</p> <p>\u73fe\u5728\u6709 \\(a\\)\uff0c\\(b\\) \u5169\u96d9\u9774\u5b50\uff0c\\(s_a\\) \u6bd4 \\(s_b\\) \u5927\uff0c\u90a3\u9ebc\u662f\u9774\u5b50 \\(a\\) \u4e0d\u80fd\u8d70\u7684\u96ea\u5806\u591a\uff0c\u9084\u662f\u9774\u5b50 \\(b\\) \u4e0d\u80fd\u8d70\u7684\u96ea\u5806\u591a\uff1f</p> <p>\u7b54\u6848\u662f\u9774\u5b50 \\(b\\) \u4e0d\u80fd\u8d70\u7684\u96ea\u5806\u591a\u3002\u90a3\u9ebc\u6211\u5011\u53ef\u4ee5\u628a\u9774\u5b50\u6309\u7167 \\(s\\) \u5f9e\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u9019\u6a23\u524d\u9762\u7684\u9774\u5b50\u8d70\u4e0d\u904e\u7684\u8def\uff0c\u5f8c\u9762\u7684\u9774\u5b50\u4e5f\u90fd\u4e0d\u80fd\u8d70\u3002\u540c\u6a23\u7684\uff0c\u56e0\u70ba\u9ad8\u5ea6\u5927\u7684\u96ea\u5806\u6703\u5f71\u97ff\u5230\u7684\u978b\u5b50\u53ea\u6703\u8d8a\u4f86\u8d8a\u591a\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u628a\u96ea\u5806\u6309\u7167\u9ad8\u5ea6\u5f9e\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u4f46\u662f\u6709\u7684\u4eba\u5c31\u554f\u4e86\uff1a\u6392\u4e86\u5e8f\u6211\u5011\u600e\u9ebc\u7d71\u8a08\u9023\u7e8c\u7684\u500b\u6578\u5462\uff1f\u6211\u5011\u6bcf\u6b21\u52a0\u5165\u4e00\u500b\u96ea\u5806\u53ef\u4ee5\u70ba\u4ed6\u6253\u4e0a\u6a19\u8a18\uff0c\u8868\u793a\u4ed6\u5df2\u7d93\u9032\u4f86\u4e86\u3002\u800c\u4ed6\u6bcf\u6b21\u9032\u4f86\u90fd\u8981\u6aa2\u67e5\u4ed6\u7684\u5169\u908a\uff0c\u5982\u679c\u6709\u54ea\u500b\u96ea\u5806\u6709\u6a19\u8a18\uff0c\u90a3\u9ebc\u4ed6\u5011\u9023\u8d77\u4f86\u8b8a\u6210\u4e00\u4e32\u5927\u96ea\u5806\u3002\u4ed6\u5011\u6bcf\u6b21\u8981\u5408\u4e26\uff0c\u5408\u4e26\u7684\u8a71\u4ec0\u9ebc\u6700\u5feb\u5462\uff1f\u4e26\u67e5\u96c6\u3002\u6211\u5011\u8981\u6c42\u7684\u5c31\u662f\u76ee\u524d\u5728\u4e26\u67e5\u96c6\u5167\uff0c\u9023\u7e8c\u7684\u96ea\u5806\u7684\u6700\u5927\u7684\u5927\u5c0f\u3002\u6bcf\u6b21\u5408\u4f75\u5169\u500b\u96ea\u5806\uff0c\u6211\u5011\u90fd\u8981\u7d71\u8a08\u9023\u901a\u584a\u5927\u5c0f\u7684\u6700\u5927\u503c\uff0c\u7136\u5f8c\u62ff\u6700\u5927\u503c\u8207\u9774\u5b50\u7684\u8de8\u5ea6 \\(d\\) \u6bd4\u8f03\u5c31\u884c\u4e86\u3002</p> <p>\u3010\u93c8\u8868\u3011</p> <p>\u5047\u8a2d\u76ee\u524d\u7684\u9774\u5b50\u9ad8\u5ea6\u70ba \\(h\\)\uff0c\u5148\u9810\u8655\u7406\u51fa\u53ea\u7d93\u904e \\(f_i\\leq h\\) \u7684\u9ede\uff0c\u81f3\u5c11\u6bcf\u4e00\u6b65\u9700\u8981\u8de8\u591a\u5927\u8ddd\u96e2\u3002\u628a\u6240\u6709 \\(f_i\\) \u5f9e\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4f9d\u6b21\u52a0\u5165\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u4e2d\uff0c\u9700\u8981\u67e5\u8a62\u76f8\u9130\u5169\u9ede\u8ddd\u96e2\u7684\u6700\u5927\u503c\u3002\u7528\u5169\u500b set \u5c31\u53ef\u4ee5\u7dad\u8b77\uff08\u6216\u8005\u4e00\u500b set \u4e00\u500b\u53ef\u522a\u9664\u5806\uff09\uff0c\u5148\u5728\u7b2c\u4e00\u500b set \u4e2d\u627e\u5230\u5de6\u908a\u53f3\u908a\u7684\u9ede\uff0c\u522a\u9664\u9019\u5169\u9ede\u9593\u8ddd\u96e2\uff0c\u52a0\u5165\u65b0\u9ede\u5230\u5de6\u908a\u53f3\u908a\u7684\u9ede\u7684\u8ddd\u96e2\uff0c\u518d\u67e5\u8a62\u6700\u5927\u503c\u3002\u5c0d\u6bcf\u500b\u8a62\u554f\uff0c\u5047\u5982\u80fd\u8d70\u7684\u8ddd\u96e2 \\(d\\) \u5927\u65bc\u7b49\u65bc\u53ea\u8d70 \\(\\leq s\\) \u7684\u6700\u5c0f\u8ddd\u96e2\u5c31\u53ef\u884c\uff0c\u5426\u5247\u4e0d\u53ef\u884c\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, b, num[100010], mx;\nbool vis[100010];\nint ans[100010];\n\nstruct Node {\n    int h, id;\n} nodes[100005];\n\nstruct point {\n    int h, w, id;\n} q[100005];\n\nbool cmp1(const Node &amp;a, const Node &amp;b) { \n    return a.h &gt; b.h;\n}\n\nbool cmp2(const point &amp;a, const point &amp;b) { \n    return a.h &gt; b.h;\n}\n\nint fa[100005];\n\nint find(int x) {\n    if (fa[x] == x) {\n        return x;\n    }\n    return fa[x] = find(fa[x]);\n}\n\nvoid merge(int x, int y) {\n    int fx = find(x);\n    int fy = find(y);\n    if (fx == fy) {\n        return;\n    }\n    fa[fx] = fy;            \n    num[fy] += num[fx];     \n    mx = max(mx, num[fy]); \n    return;\n}\n\nint main() {\n    scanf(\"%d%d\", &amp;n, &amp;b);\n    for (int i = 1; i &lt;= n; i++) {\n        fa[i] = i; \n        nodes[i].id = i;\n        scanf(\"%d\", &amp;nodes[i].h);\n    }\n    for (int i = 1; i &lt;= b; i++) {\n        q[i].id = i;\n        scanf(\"%d%d\", &amp;q[i].h, &amp;q[i].w);\n    }\n    sort(nodes + 2, nodes + n, cmp1);  // \u6309\u7167\u9ad8\u5ea6\u5f9e\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u9019\u88e1\u6ce8\u610f\uff0c\u9996\u5c3e\u96ea\u5806\u4e0d\u9700\u8981\u6392\u5e8f\uff01\n    sort(q + 1, q + 1 + b, cmp2);\n    int j = 2;                                \n    for (int i = 1; i &lt;= b; i++) {            \n        while (q[i].h &lt; nodes[j].h) {  // \u5224\u65b7\u9019\u96d9\u9774\u5b50\u662f\u4e0d\u662f\u4e0d\u80fd\u8d70\u904e\u76ee\u524d\u7684\u96ea\u5806\n            vis[nodes[j].id] = true;            \n            num[nodes[j].id] = 1;                  \n            if (vis[nodes[j].id - 1]) {            \n                merge(nodes[j].id - 1, nodes[j].id); \n            }\n            if (vis[nodes[j].id + 1]) {          \n                merge(nodes[j].id + 1, nodes[j].id);\n            }\n            j++; // \u76ee\u524d\u96ea\u5806\u9774\u8d70\u4e0d\u904e\u53bb\u4e86\uff0c\u679a\u8209\u4e0b\u4e00\u500b\u96ea\u5806\n            mx = max(mx, 1);  // \u5982\u679c\u66ab\u6642\u6c92\u6709\u5408\u4f75\uff0cMAX\u5c31\u662f1\u500b\u7bc0\u9ede\n        }\n        ans[q[i].id] = (q[i].w &gt; mx); \n    }\n    for (int i = 1; i &lt;= b; i++) {\n        printf(\"%d\\n\", ans[i]);\n    }\n    return 0;\n} \n</code></pre>"},{"location":"graph/dsu/#_16","title":"\u7dda\u6bb5\u6a39\u5206\u6cbb","text":"\u52d5\u614b\u7dad\u8b77\u9023\u901a\u6027 <p>\u7d66\u4f60\u4e00\u5f35\u6709 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u4e00\u958b\u59cb\u6c92\u4efb\u4f55\u908a\uff0c\u6709 \\(q\\) \u7b46\u4ee5\u4e0b\u67e5\u8a62 :</p> <ul> <li> <p>\\(\\text{add}(u,v):\\) \u5728 \\(u\\) \u8ddf \\(v\\) \u4e4b\u9593\u52a0\u4e00\u689d\u908a</p> </li> <li> <p>\\(\\text{del}(u,v):\\) \u62d4\u6389\u908a \\((u,v)\\)</p> </li> <li> <p>\\(\\text{query}:\\) \u554f\u6709\u5e7e\u500b CC</p> </li> </ul> <p>\\(n\\le 3\\times 10^5,m\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u60f3\u6210\u6709\u4e00\u500b\u6642\u9593\u8ef8\uff0cedge(u, v) \u5b58\u5728\u7684\u6642\u9593\u5c31\u662f [add, del]\u3002</p> <p>\u8003\u616e D&amp;C\uff0c\u6bcf\u584a\u6211\u5011\u6703\u8a18\u9304\u7576\u524d\u672a\u5168\u90e8\u6db5\u84cb time [l, r] \u7684 queries\uff0c\u5b8c\u6574\u5305\u542b\u7684 [l, r] \u7684\u5c07\u6703\u76f4\u63a5\u52a0\u5165 graph \u4e0a\uff0c\u985e\u4f3c\u6574\u9ad4\u4e8c\u5206\u5c07 queries \u5206\u5230 qleft, qright\uff0c\u6216\u5169\u500b\u90fd\u8981\u3002</p> <p>\u53c3\u8003 : https://codeforces.com/edu/course/2/lesson/7/3</p> \u6d1b\u8c37 P5787 \u4e8c\u5206\u56fe /\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811\u5206\u6cbb <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u6709 \\(m\\) \u689d\u908a\u8207 \\(k\\) \u500b\u6642\u9593\u9ede\uff0c\u6bcf\u689d\u908a\u53ea\u5b58\u5728\u65bc \\([l_i, r_i)\\) \u9019\u4e9b\u6642\u9593\u9ede\uff0c\u6c42\u6bcf\u500b\u6642\u9593\u9ede\u6642\u9019\u5f35\u5716\u662f\u5426\u70ba\u4e8c\u5206\u5716\u3002</p> <p>\\(n\\le 10^5, m,k\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u9996\u5148\uff0c\u5716\u662f\u4e8c\u5206\u5716\u7684\u5145\u8981\u689d\u4ef6\u662f\u4e0d\u5b58\u5728\u5947\u74b0\uff0c\u9019\u500b\u53ef\u4ee5\u7528\u5e36\u6b0a\u4e26\u67e5\u96c6\u7dad\u8b77\u3002\u4f9d\u7167\u4e0a\u8ff0\u601d\u60f3\u5efa\u4e00\u68f5\u7dda\u6bb5\u6a39\uff0c\u5c0d\u65bc\u6bcf\u689d\u908a\uff0c\u5c07\u5b83\u4f9d\u7167\u7dda\u6bb5\u6a39\u5340\u9593\u64cd\u4f5c\u7684\u65b9\u5f0f\u5206\u6210 \\(O(\\log k)\\) \u6bb5\uff0c\u7528 vector \u639b\u5728\u7dda\u4e0a\u6bb5\u6a39\u7684\u7bc0\u9ede\u4e0a\u3002\u904d\u6b77\u6642\uff0c\u5f9e\u6839\u7bc0\u9ede\u51fa\u767c\uff0c\u6bcf\u5230\u4e00\u500b\u7bc0\u9ede\uff0c\u5c07\u639b\u5728\u8a72\u7bc0\u9ede\u4e0a\u7684\u6240\u6709\u908a\u5408\u4f75\uff0c\u7136\u5f8c\u905e\u6b78\u8655\u7406\u5de6\u5152\u5b50\u548c\u53f3\u5152\u5b50\u3002\u5982\u679c\u767c\u73fe\u6709\u67d0\u908a\u5408\u4f75\u6703\u51fa\u73fe\u5947\u74b0\uff0c\u90a3\u9ebc\u76ee\u524d\u7dda\u6bb5\u6a39\u7bc0\u9ede\u6240\u5c0d\u61c9\u7684\u6642\u9593\u5340\u9593\u90fd\u4e0d\u6703\u5f62\u6210\u4e8c\u5206\u5716\u3002\u7576\u5230\u9054\u8449\u5b50\u7bc0\u9ede\u6642\uff0c\u5982\u679c\u5408\u4f75\u4e86\u6240\u6709\u639b\u5728\u7576\u524d\u7bc0\u9ede\u4e0a\u7684\u908a\uff0c\u4f9d\u820a\u6eff\u8db3\u4e8c\u5206\u5716\u7684\u6027\u8cea\uff0c\u90a3\u9ebc\u53ef\u4ee5\u76f4\u63a5\u8f38\u51fa Yes\u3002\u56de\u6eaf\u6642\uff0c\u7531\u65bc\u4e26\u67e5\u96c6\u4e0d\u652f\u63f4\u522a\u908a\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u53efrollback dsu\u3002</p> <p>\u6bcf\u689d\u908a\u6703\u8dd1 \\(O(\\log k)\\) \u6b21\uff0c\u5171 \\(m\\) \u689d\uff0c\u5728\u4e58\u4e0a rollback dsu \u7684\u8907\u96dc\u5ea6\u662f \\(O(m \\log n \\log k)\\)</p> code <pre><code>const int N = 1e5 + 7, M = 2e5 + 7;\nint n, m, k, u[M], v[M], f[N&lt;&lt;1], d[N&lt;&lt;1];\nstruct T {\n    int l, r;\n    vi e;\n} t[N&lt;&lt;2];\nstack&lt; pi &gt; s;\n\nvoid build(int p, int l, int r) {\n    t[p].l = l, t[p].r = r;\n    if (l == r) return;\n    build(ls, l, md), build(rs, md + 1, r);\n}\n\nvoid ins(int p, int l, int r, int x) {\n    if (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) return t[p].e.pb(x), void();\n    if (l &lt;= md) ins(ls, l, r, x);\n    if (r &gt; md) ins(rs, l, r, x);\n}\n\ninline int get(int x) {\n    while (x ^ f[x]) x = f[x];\n    return x;\n}\n\ninline void merge(int x, int y) {\n    if (x == y) return;\n    if (d[x] &gt; d[y]) swap(x, y);\n    s.push(mp(x, d[x] == d[y])), f[x] = y, d[y] += d[x] == d[y];\n}\n\nvoid dfs(int p, int l, int r) {\n    bool ok = 1;\n    ui o = s.size();\n    for (ui i = 0; i &lt; t[p].e.size(); i++) {\n        int x = t[p].e[i], u = get(::u[x]), v = get(::v[x]);\n        if (u == v) {\n            for (int j = l; j &lt;= r; j++) prints(\"No\");\n            ok = 0;\n            break;\n        }\n        merge(get(::u[x] + N), v), merge(get(::v[x] + N), u);\n    }\n    if (ok) {\n        if (l == r) prints(\"Yes\");\n        else dfs(ls, l, md), dfs(rs, md + 1, r);\n    }\n    while (s.size() &gt; o) d[f[s.top().fi]] -= s.top().se, f[s.top().fi] = s.top().fi, s.pop();\n}\n\nint main() {\n    rd(n), rd(m), rd(k), build(1, 1, k);\n    for (int i = 1, l, r; i &lt;= m; i++) {\n        rd(u[i]), rd(v[i]), rd(l), rd(r);\n        if (l ^ r) ins(1, l + 1, r, i);\n    }\n    for (int i = 1; i &lt;= n; i++) f[i] = i, f[i+N] = i + N;\n    dfs(1, 1, k);\n    return 0;\n}\n</code></pre>"},{"location":"graph/dsu/#_17","title":"\u555f\u767c\u5f0f\u5408\u4f75","text":"<p>\u898b\u6b64\u8655</p>"},{"location":"graph/dsu/#_18","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>https://zhuanlan.zhihu.com/p/553192435</li> <li>Codeforces Edu DSU (\u9700\u52a0\u5165 group)</li> <li>https://blog.csdn.net/boliu147258/article/details/92778897</li> </ul> <ol> <li> <p>\u8a73\u898b oiwiki \u21a9</p> </li> </ol>"},{"location":"graph/euler_path/","title":"\u6b50\u62c9\u8ff4\u8def","text":""},{"location":"graph/euler_path/#_1","title":"\u6b50\u62c9\u8ff4\u8def","text":""},{"location":"graph/euler_path/#_2","title":"\u554f\u984c","text":"\u4e00\u7b46\u756b\u554f\u984c <p>\u7d66\u4e00\u5f35\u7121\u5411\u5716\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u689d\u8def\u5f91\u300c\u7d93\u904e\u6bcf\u689d\u908a\u6070\u597d\u4e00\u6b21\u300d</p>"},{"location":"graph/euler_path/#_3","title":"\u6709\u89e3\u689d\u4ef6","text":"\u5716\u985e\u578b \u6b50\u62c9\u8def\u5f91 \u6b50\u62c9\u8ff4\u8def \u6709\u5411\u5716 \u5169\u500b\u9802\u9ede\u7684 in degree \u548c out degree \u5206\u5225\u5dee 1\uff0c\u5176\u9918\u9802\u9ede in degree \u7b49\u65bc out degree \u6bcf\u500b\u9802\u9ede\u7684 in degree \u7b49\u65bc out degree \u7121\u5411\u5716 \u6240\u6709\u9802\u9ede\u7684\u5ea6\u6578\u90fd\u662f\u5076\u6578\uff0c\u6216\u8005\u53ea\u6709\u5169\u500b\u9802\u9ede\u7684\u5ea6\u6578\u662f\u5947\u6578\uff0c\u5176\u9918\u9802\u9ede\u7684\u5ea6\u6578\u662f\u5076\u6578 \u6240\u6709\u9802\u9ede\u7684\u5ea6\u6578\u90fd\u662f\u5076\u6578"},{"location":"graph/euler_path/#hierholzers-algorithm","title":"Hierholzer\u2019s Algorithm","text":"\u554f\u984c <p>\u7d66\u4e00\u5f35\u7121\u5411\u5716\uff0c\u8f38\u51fa\u6b50\u62c9\u8ff4\u8def\u5e8f\u5217</p> <p>\u6211\u5011\u53ef\u4ee5\u5148\u627e\u4e00\u500b\u74b0\uff0c\u518d\u627e\u4ee4\u4e00\u500b\u74b0\uff0c\u5c07\u5176\u5408\u4f75\uff0c\u4e00\u76f4\u505a\u4e0b\u53bb\u3002\u9019\u908a\u6709\u4e00\u500b\u6027\u8cea\uff0c\u4ee4\u7b2c\u4e00\u500b\u74b0\u7684\u6b50\u62c9\u8ff4\u8def\u5e8f\u5217\u70ba c1\uff0c\u53e6\u4e00\u500b\u70ba c2\uff0c\u5408\u4f75\u5f8c\u6703\u8b8a\u6210 \u300cc1 \u7684\u67d0\u500b\u524d\u7db4 + c2 + c1 \u5269\u4e0b\u7684\u5f8c\u7db4\u300d\uff0c\u53ef\u4ee5\u60f3\u6210\u6703\u5728 c1 \u4e0a\u5f9e\u5f8c\u5f80\u524d\u4e00\u76f4\u63d2\u5165\u65b0\u7684\u6b50\u62c9\u8ff4\u8def\u5e8f\u5217 ci<sup>1</sup>\u3002</p> <p></p> <p>\u4f46\u4e0a\u9762\u5408\u4f75 cycle \u7684\u65b9\u5f0f\u5728\u5be6\u4f5c\u6703\u76f8\u5c0d\u8907\u96dc\u3002Hierholzer\u2019s Algorithm \u7684\u60f3\u6cd5\u662f\u4e00\u76f4 dfs \u4e0b\u53bb\u76f4\u5230 get stucked\uff08stucked \u7684\u9ede\u4e00\u5b9a\u662f\u958b\u59cb\u7684\u9ede\uff0c\u4e5f\u5c31\u662f\u6703\u5f62\u6210\u4e00\u500b\u74b0\uff0c\u56e0\u70ba for all degree = even\uff09\uff0c\u7136\u5f8c backtracking \u5230\u4e0a\u4e00\u500b\u9084\u53ef\u4ee5\u8d70\u7684\u9ede\u7e7c\u7e8c dfs\u3002backtracking \u7684\u9019\u4e9b\u9ede\u5c31\u4ee3\u8868\u5df2\u7d93\u6c92\u6709 degree \u53ef\u4ee5\u8d70\u4e86\uff0c\u53ef\u4ee5 push back \u5230\u7b54\u6848\u88e1\u9762</p> <p>\u81f3\u65bc\u6211\u5011\u8981\u600e\u9ebc\u5be6\u4f5c\u5462\uff0c\u6211\u5011\u53ef\u4ee5\u53bb\u9032\u884c\u300c\u5f8c\u5e8f dfs\u300d\uff0c\u56e0\u70ba\u5f8c\u5e8f\u7684\u6027\u8cea\u662f\u5c07\u6240\u6709\u5c0f\u5b69\u90fd\u8d70\u5b8c\u5f8c\uff0c\u624d\u5c07\u81ea\u5df1 push back \u5230\u7b54\u6848\u88e1\u9762\uff0c\u6700\u5f8c\u82e5\u8981\u8f38\u51fa\u7b54\u6848\u8a18\u5f97\u8981\u5012\u8457\u8f38\u51fa\u3002\u4ee5\u4e0b\u662f pseudocode</p> Euler CirCuit Finding - Pseudo Code<pre><code>void dfs(int u) {\n    for (v in \u9084\u6c92 visit \u904e\u7684 G[u]) {\n        dfs(v);\n        ans.pb({u, v});\n    }\n}\n</code></pre> <p>\u9019\u662f\u7121\u5411\u5716\u8ff4\u8def\u7684\u505a\u6cd5\uff0c\u82e5\u70ba\u6709\u5411\u5716\u6216\u6b50\u62c9\u8def\u5f91\u7684\u8a71\u4e5f\u662f\u53ef\u4ee5\u9019\u6a23\u505a\u7684</p> code <pre><code>void dfs(int u) {\n    while(G[u].size()) {\n        auto [v, eid] = G[u].back();\n        G[u].pop_back();\n\n        if (vis[eid]) continue;\n\n        vis[eid] = 1;\n        dfs(v);\n        ans.pb(id);\n    }\n}\n</code></pre>"},{"location":"graph/euler_path/#_4","title":"\u4f8b\u984c","text":""},{"location":"graph/euler_path/#_5","title":"\u6a21\u677f\u984c","text":"\u6a21\u677f LOJ #10105. \u300c\u4e00\u672c\u901a 3.7 \u4f8b 1\u300d\u6b27\u62c9\u56de\u8def <p>\u7d66\u4e00\u5f35\u5716\uff0c\u627e\u51fa\u6b50\u62c9\u8ff4\u8def\uff0c\u5373\u5728\u5716\u4e2d\u627e\u4e00\u500b\u74b0\u4f7f\u5f97\u6bcf\u689d\u908a\u90fd\u5728\u74b0\u4e0a\u51fa\u73fe\u6070\u597d\u4e00\u6b21\uff0c\u6709\u5169\u500b\u5b50\u4efb\u52d9</p> <ul> <li> <p>\u9019\u5f35\u5716\u662f\u7121\u5411\u5716</p> </li> <li> <p>\u9019\u5f35\u5716\u662f\u6709\u5411\u5716</p> </li> </ul> <p>\\(n\\le 10^5,m\\le 2\\times 10^5\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int N = 1e6, M = 1e6;\nint t, n, m, in[N], out[N], ans[M], vis[M], top;\nvector&lt;pii&gt; G[N];\n\nvoid dfs(int u) {\n    while(G[u].size()) {\n        auto [v, id] = G[u].back();\n        G[u].pop_back();\n\n        if (vis[abs(id)]) continue;\n\n        vis[abs(id)] = 1;\n        dfs(v);\n        ans[++top] = id;\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; t &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 1; i &lt;= m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb({v, i});\n\n        if (t == 1) {\n            G[v].pb({u, -i});\n        }\n\n        out[u]++, in[v]++;\n    }\n\n    if (t == 1) {\n        for (int i = 1; i &lt;= n; i++) {\n            if ((in[i] + out[i]) % 2) {\n                cout &lt;&lt; \"NO\\n\";\n                return 0;\n            }\n        }\n    }\n\n    if (t == 2) {\n        for (int i = 1; i &lt;= n; i++) {\n            if (in[i] != out[i]) {\n                cout &lt;&lt; \"NO\\n\";\n                return 0;\n            }\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (G[i].size()) {\n            dfs(i);\n            break;\n        }\n    }\n\n    if (top != m) {\n        cout &lt;&lt; \"NO\\n\";\n        return 0;\n    }\n\n    cout &lt;&lt; \"YES\\n\";\n\n    for (int i = top; i &gt;= 1; i--) {\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n    return 0;\n}\n</code></pre> TIOJ 1084 . \u4e00\u7b46\u756b\u554f\u984c <p>\u7d66 n \u9ede m \u908a\u7121\u5411\u5716\uff0c\u8f38\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6b50\u62c9\u8def\u5f91</p> \u601d\u8def <p>\u4e00\u6a23\u7528 circuit \u7684 code \u4e0b\u53bb\u505a\u5373\u53ef\uff0c\u53ea\u662f\u7528 set \u53bb\u7dad\u8b77 adjacency list</p> <p>\u6309\u7167\u300c\u5148\u5f80\u7de8\u865f\u5c0f\u7684\u7bc0\u9ede\u8d70\u300d\u7684\u7b56\u7565 DFS</p> <p> </p>"},{"location":"graph/euler_path/#_6","title":"\u6709\u89e3\u689d\u4ef6\u5206\u6790","text":"2023 IOIC  511 . \u627e\u9322\u5305 <p>\u7d66 n \u9ede m \u908a\u7684\u5716\uff0c\u6709 k \u689d\u7279\u6b8a\u908a\uff0c\u554f\u662f\u5426\u80fd\u5728\u6bcf\u689d\u908a\u8d70\u4e0d\u8d85\u904e\u4e00\u6b21\u4e0b\uff0c\u8d70\u904e\u6240\u6709\u7279\u6b8a\u908a\uff0c\u4e14\u8981\u5f9e 1 \u8d70\u5230 n</p> <p>\\(2\\le n\\le 2\\times 10^5,1\\le m\\le 4\\times 10^4\\)</p> \u601d\u8def <p>\u5148\u5c07 1 \u2192 n \u5efa\u4e00\u689d\u908a\uff0c\u9019\u6a23\u5c31\u8b8a\u8ff4\u8def\u7684 case\uff0c\u66f4\u55ae\u7d14\uff08for all degree = even\uff09</p> <p>k = m: \u6b50\u62c9\u8ff4\u8def</p> <p>k &lt; m: \u6b50\u62c9\u8ff4\u8def\uff0c\u53ea\u662f\u53ef\u4ee5\u5229\u7528\u9078\u975e\u7279\u6b8a\u908a\uff0c\u4f86\u5c07\u9ede\u7684 degree \u6539\u8b8a\u3002\u8003\u616e\u53ea\u6709\u975e\u7279\u6b8a\u908a\u7684\u5716\uff0c\u540c\u4e00\u500b\u9023\u901a\u584a\u5167\u7684\u624d\u80fd\u5169\u5169\u914d\uff0c\u4e92\u76f8\u62b5\u6d88\uff0c\u6240\u4ee5\u4e00\u500b\u9023\u901a\u584a\u5167\u7684\u5947\u9ede\u6578\u91cf\u4e00\u5b9a\u8981\u662f\u5076\u6578\u624d\u5408\u6cd5\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int N = 4e5 + 5;\n\nint n, m, k, cnt;\nint deg[N];\nbool vis[N];\nvector&lt;int&gt; G[N];\n\nvoid dfs(int u) {\n    vis[u] = 1;\n    cnt += deg[u];\n    for (int v : G[u]) {\n        if (vis[v]) continue;\n        dfs(v);\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    m -= k;\n    for (int i = 1; i &lt;= k; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        deg[u] ^= 1, deg[v] ^= 1;\n    }\n    deg[1] ^= 1, deg[n] ^= 1;\n    for (int i = 1; i &lt;= m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (!vis[i]) {\n            cnt = 0;\n            dfs(i);\n            if (cnt &amp; 1) {\n                cout &lt;&lt; \"No\\n\";\n                exit(0);\n            }\n        }\n    }\n    cout &lt;&lt; \"Yes\\n\";\n}\n</code></pre> CF 788 B. Weird journey <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7684\u7121\u5411\u5716\uff0c\u554f\u6709\u591a\u5c11\u5c0d\u908a\u7684 pair\\((e_i, e_j)\\) \u6eff\u8db3\u5b58\u5728\u4e00\u689d\u8def\u5f91\u7d93\u904e\u9019\u5169\u689d\u908a\u6070\u597d\u4e00\u6b21\u4e14\u7d93\u904e\u5269\u9918\u7684\u6bcf\u689d\u908a\u6070\u5169\u6b21</p> <p>\\(n,m\\le 10^6\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u60f3\u6210\u5c07\u6bcf\u689d\u908a\u90fd\u8907\u88fd\u4e00\u689d\uff0c\u7531\u65bc\u8907\u88fd\u5f8c\u6bcf\u500b\u9ede\u7684 degree \u5747\u70ba\u5076\u6578\uff0c\u53ea\u8981\u6240\u6709\u7684\u908a\u90fd\u9023\u901a\uff0c\u6b50\u62c9\u8def\u5f91\u5c31\u4e00\u5b9a\u5b58\u5728\u3002\u6211\u5011\u53ea\u9700\u8003\u616e\u522a\u53bb\u5169\u689d\u908a\u5f8c\u6b50\u62c9\u8def\u5f91\u662f\u5426\u9084\u5b58\u5728</p> <ol> <li>\u5982\u679c\u522a\u7684\u662f\u5169\u689d\u4e0d\u76f8\u4ea4\u7684\u975e\u81ea\u74b0\u908a\uff0c\u90a3\u9ebc\u6703\u7522\u751f\u56db\u500b\u5ea6\u70ba\u5947\u6578\u7684\u9ede \u21d2 \u4e0d\u5b58\u5728\u6b50\u62c9\u8def\u5f91</li> <li>\u5982\u679c\u522a\u7684\u662f\u5169\u689d\u76f8\u4ea4\u7684\u975e\u81ea\u74b0\u908a\uff0c\u90a3\u9ebc\u6703\u7522\u751f\u5169\u500b\u5ea6\u70ba\u5947\u6578\u7684\u9ede \u21d2 \u5b58\u5728\u6b50\u62c9\u8def\u5f91</li> <li>\u5982\u679c\u522a\u7684\u662f\u5169\u500b\u81ea\u74b0\u908a\uff0c\u90a3\u9ebc\u6240\u6709\u9ede\u5ea6\u4f9d\u820a\u70ba\u5076\u6578 \u21d2 \u5b58\u5728\u6b50\u62c9\u8def\u5f91</li> <li>\u5982\u679c\u522a\u7684\u662f\u4e00\u689d\u975e\u81ea\u74b0\u908a\u548c\u4e00\u500b\u81ea\u74b0\u908a\uff0c\u90a3\u9ebc\u6703\u7522\u751f\u5169\u500b\u5ea6\u70ba\u5947\u6578\u7684\u9ede \u21d2 \u5b58\u5728\u6b50\u62c9\u8def\u5f91</li> </ol> <p>\u7d9c\u4e0a\uff0c\u5c0d\u65bc\u4e00\u689d\u908a (u, v) \uff0c\u5982\u679c\u662f\u81ea\u74b0\uff0c\u90a3\u9ebc\u8a72\u81ea\u74b0\u914d\u4e0a\u4efb\u610f\u4e00\u689d\u5176\u4ed6\u908a\u5747\u53ef\uff0c\u65b9\u6848\u6578 m - 1\u3002\u5982\u679c\u662f\u975e\u81ea\u74b0\uff0c\u90a3\u9ebc\u8a72\u975e\u81ea\u74b0\u908a\u914d\u4e0a\u4efb\u610f\u4e00\u500b\u81ea\u74b0\u6216\u8005\u914d\u4e0a\u4e00\u689d\u8207\u81ea\u5df1\u76f8\u4ea4\u7684\u908a\u5747\u53ef\uff0c\u65b9\u6848\u6578 (deg[u] - 1) + (deg[v] - 1) + (\u81ea\u74b0\u6578\u91cf) \uff0c\u6ce8\u610f\u9019\u6a23\u4ee5\u4f86\u6bcf\u500b\u65b9\u6848\u6703\u88ab\u7b97\u5169\u6b21\uff0c\u6545\u6c42\u51fa\u7b54\u6848\u5f8c\u9664 2</p> <p>\u53c3\u8003\u81ea : https://blog.csdn.net/V5ZSQ/article/details/79055623</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\n\nstruct DSU {\n    vector&lt;int&gt; par, sz;\n\n    DSU (int n = 0) : par(n), sz(n, 1) {\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n    bool merge(int u, int v) {\n        u = find(u), v = find(v);\n        if (u == v) return false;\n        if (sz[u] &lt; sz[v]) swap(u, v);\n        par[v] = u;\n        sz[u] += sz[v];\n        return true;\n    }\n};\n\nint n, m;\nvector&lt;pii&gt; edges;\nint deg[maxn];\nbool vis[maxn];\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; m;\n    DSU dsu(n);\n    int cnt = 0;\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        u--, v--;\n        edges.pb({u, v});\n        vis[u] = vis[v] = true;\n        if (u != v) {\n            deg[u]++;\n            deg[v]++;\n            dsu.merge(u, v);\n        } else {\n            cnt++;\n        }\n    }\n    int num = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (vis[i] &amp;&amp; dsu.find(i) == i) {\n            num++;\n        }\n    }\n    if (num != 1) {\n        cout &lt;&lt; '0' &lt;&lt; '\\n';\n        exit(0);\n    }\n    int ans = 0;\n    for (auto [u, v] : edges) {\n        if (u == v) ans += m - 1;\n        else ans += (deg[u] - 1) + (deg[v] - 1) + cnt;\n    }\n    cout &lt;&lt; ans / 2 &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"graph/euler_path/#_7","title":"\u5efa\u5716","text":"CF 1634 E. Fair Share <p>\u7d66 m \u500b\u9577\u5ea6\u70ba\u5076\u6578\u7684\u9663\u5217\uff0c\u5c07\u6bcf\u500b\u9663\u5217\u4e2d\u4e00\u534a\u7684\u5143\u7d20\u4e1f\u5230 multiset L \u88e1\u9762\uff0c\u53e6\u4e00\u534a\u4e1f\u5230 multiset R \u88e1\u9762\uff0c\u6700\u5f8c L \u548c R \u88e1\u9762\u6bcf\u4e00\u7a2e\u6578\u503c\u51fa\u73fe\u7684\u6b21\u6578\u8981\u4e00\u6a23\u3002\u8f38\u51fa\u6bcf\u500b\u5143\u7d20\u662f\u5c6c\u65bc L \u6216 R</p> <p>\u7e3d\u5143\u7d20\u500b\u6578 \\(\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5982\u679c\u6709\u4e00\u7a2e\u6578\u5b57\u51fa\u73fe\u5947\u6578\u6b21\uff0c\u90a3\u5c31\u7121\u89e3\u3002\u5426\u5247\uff0c\u6211\u5011\u8a66\u8457\u628a\u5143\u7d20\u653e\u5230\u5716\u4e0a\u9762\uff0c\u6bcf\u500b\u5143\u7d20\u90fd\u6709\u5169\u500b\u5c6c\u6027 : \u6578\u503c\u548c\u6240\u5728\u7684\u9663\u5217\uff0c\u6240\u4ee5\u5c31\u5e6b\u6bcf\u500b\u9663\u5217\u548c\u6bcf\u7a2e\u6578\u503c\u5404\u958b\u4e00\u500b\u7bc0\u9ede\uff0c\u5c0d\u65bc\u6bcf\u500b\u5143\u7d20\uff0c\u5728\u5b83\u7684\u6578\u503c\u548c\u9663\u5217\u5c0d\u61c9\u7684\u7bc0\u9ede\u9593\u52a0\u4e00\u689d\u908a\u3002</p> <p>\u53ef\u4ee5\u767c\u73fe\u5230\u6240\u6709\u7bc0\u9ede\u7684\u5ea6\u6578\u90fd\u662f\u5076\u6578\uff0c\u7b26\u5408\u6709\u6b50\u62c9\u8ff4\u8def\u7684\u689d\u4ef6\u3002\u627e\u51fa\u6b50\u62c9\u8ff4\u8def\uff0c\u7136\u5f8c\u8b93\u7b2c\u5947\u6578\u689d\u908a\u5728 L\u3001\u7b2c\u5076\u6578\u689d\u5728 R\uff0c\u56e0\u70ba\u76f8\u9130\u5169\u689d\u908a\u662f\u5171\u9ede\u7684\uff0c\u56e0\u6b64\u6bcf\u500b\u9ede\u76f8\u9130\u7684\u908a\u4e2d\uff0c\u5728 L \u7684\u6578\u91cf\u548c\u5728 R \u7684\u6578\u91cf\u662f\u4e00\u6a23\u7684\uff0c\u7b26\u5408\u984c\u76ee\u8981\u7684\u689d\u4ef6\u3002</p> <p>\u5be6\u4f5c\u4e0a\u5148\u5224\u6709\u6c92\u6709\u6578\u5b57\u51fa\u73fe\u5947\u6578\u6b21\u3002\u5c0d\u65bc\u6bcf\u500b\u9023\u901a\u584a\u53bb\u627e\u6b50\u62c9\u8ff4\u8def\uff0c\u8b93\u7b2c\u5947\u6578\u689d\u908a\u5728 L\u3001\u7b2c\u5076\u6578\u689d\u5728 R \u5373\u53ef\u3002</p> <p>\u53c3\u8003\u81ea : \u5e2b\u5927\u9644\u4e2d\u5ef6\u5e73\u4e2d\u5b78\u7af6\u6280\u7a0b\u5f0f\u8b80\u66f8\u6703\u8b49\u660e\u8207\u7d9c\u5408\u7df4\u7fd2</p> TOI 2022 \u4e8c\u6a21 pC. \u71c8\u5149\u8a2d\u8a08\uff08Lantern\uff09 <p>\u7d66\u4f60 \\(4n\\) \u500b\u6578\u5b57\uff0c\u7de8\u865f \\(1, 2,..., 4n\\)\u3002\u7b2c \\(i\\) \u500b\u71c8\u7684\u984f\u8272\u662f \\(c_i\\)\uff0c\u984f\u8272\u5728 \\(0, 1, ..., n-1\\) \u4e4b\u9593\uff0c\u6bcf\u7a2e\u984f\u8272\u6070\u51fa\u73fe \\(4\\) \u6b21\u3002\u9078 \\(2n\\) \u500b\u6578\u5b57\uff0c\u4f7f\u6bcf\u500b\u984f\u8272\u6070\u51fa\u73fe\u5169\u6b21\uff0c\u4e14\u7e3d\u548c\u8207\u6c92\u9078\u7684\u6578\u5b57\u7e3d\u548c\u4e00\u6a23\u3002\u63a5\u8457\u628a\u9019\u4e9b\u6578\u5b57\u5169\u5169\u914d\u5c0d\u4e26\u52a0\u7e3d\uff0c\u76ee\u6a19\u662f\u8b93\u7e3d\u548c\u6700\u5927\u7684\u4e00\u5c0d\u548c\u7e3d\u548c\u6700\u5c0f\u7684\u4e00\u5c0d\u76f8\u5dee\u76e1\u91cf\u5c0f\u3002\u7121\u89e3\u8f38\u51fa -1\uff0c\u6216\u8f38\u51fa\u914d\u5c0d\u7684\u7d50\u679c</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u4ee4 \\(N = 4n + 1\\)\uff0c\u89c0\u5bdf\u7bc4\u4f8b\u53ef\u4ee5\u767c\u73fe\u6bcf\u500b\u6709\u9078\u7684 pair\\((i, j)\\) \u90fd\u662f \\(i + j = N\\)\uff0c\u53ef\u4ee5\u5beb\u6210 pair\\((i, N - i)\\)\uff0c\u6240\u4ee5\u6211\u5011\u7684\u76ee\u6a19\u662f\u8981\u9078\u4e00\u4e9b pair\\((i, N - i)\\) \u4f7f\u6bcf\u7a2e\u984f\u8272\u6070\u51fa\u73fe\u5169\u6b21\u3002\u6211\u5011\u53ef\u4ee5\u4ee5\u984f\u8272\u70ba\u9ede\uff0c\u5c07 \\(c_i\\) \u8207 \\(c_{N - i}\\) \u9023\u908a\uff0c\u8dd1\u6b50\u62c9\u8ff4\u8def\uff0c\u5947\u6578\u908a\u9078\uff0c\u5076\u6578\u908a\u4e0d\u9078\u3002\u53ef\u4ee5\u767c\u73fe\uff0c\u6bcf\u500b\u9ede\u7684 degree \u90fd\u662f\u5076\u6578\uff0c\u6240\u4ee5\u662f\u4e0d\u6703\u6709\u7121\u89e3\u7684 case \u7684\u3002</p> <p>\u53c3\u8003\u81ea : \u5e2b\u5927\u9644\u4e2d\u5ef6\u5e73\u4e2d\u5b78\u7af6\u6280\u7a0b\u5f0f\u8b80\u66f8\u6703\u8b49\u660e\u8207\u7d9c\u5408\u7df4\u7fd2</p>"},{"location":"graph/euler_path/#k-","title":"K-\u7b46\u756b\u554f\u984c","text":"<p>\u3010\u5b9a\u7406\u3011 : \u5982\u679c\u9023\u901a\u7121\u5411\u5716 G \u6709 2k \u500b\u5947\u9802\u9ede\uff0c\u81f3\u5c11\u8981\u7528 k \u7b46\u756b\u6210</p> \u4efb\u610f\u4e00\u5f35\u7121\u5411\u5716\u7684\u5947\u9ede\u6578\u91cf\u53ea\u6703\u6709\u5076\u6578\u500b <p>total degree = sum(even degree) + sum(odd degree)</p> <p>\u21d2 total degree - sum(even degree) = sum(odd degree)</p> <p>\u56e0\u70ba total degree \u548c sum(even degree) \u4e00\u5b9a\u90fd\u662f even</p> <p>\u21d2 even = sum(odd degree)</p>"},{"location":"graph/euler_path/#_8","title":"\u4e2d\u570b\u90f5\u5dee\u554f\u984c","text":"HIT 2739 The Chinese Postman Problem <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7121\u5411\u5716\uff0c\u8981\u7d93\u904e\u6bcf\u689d\u908a\u81f3\u5c11\u4e00\u6b21\uff0c\u6700\u5f8c\u56de\u5230\u8d77\u9ede\uff0c\u554f\u6700\u5c0f\u7e3d\u6b0a\u503c\u662f\u591a\u5c11\u3002</p> <p>\\(2 \\le n \\le 100, 1 \\le m \\le 2000,0&lt;w_i\\le 1000\\)</p> <p>\u82e5 degree \u90fd\u662f even \u21d2 \u6bcf\u689d edge \u90fd\u7d93\u904e\u4e00\u6b21\u3002</p> <p>\u8003\u616e\u53ea\u6709\u5169\u500b\u5947\u9ede\u7684 case\uff0c\u9700\u8981\u591a\u8d70\u4e00\u8d9f\u628a\u982d\u5c3e\u7684 degree \u8b8a\u6210\u5076\u6578\uff0c\u6240\u4ee5\u7b54\u6848\u6703\u662f sum(w) + dis(u \u2192 v) </p> <p>\u82e5\u6709 2k \u500b\u5947\u9ede\uff0c\u90a3\u5c31\u662f\u627e\u4e8c\u5206\u5716\u6700\u5c0f\u6b0a\u91cd\u5b8c\u7f8e\u5339\u914d</p>"},{"location":"graph/euler_path/#_9","title":"\u7fd2\u984c","text":"CF 21 D. Traveling Graph <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7684\u5e36\u6b0a\u7121\u5411\u5716\uff0c\u627e\u4e00\u500b\u5305\u542b node 1 \u7684\u6700\u77ed\u8ff4\u8def\uff0c\u4f7f\u6bcf\u689d\u908a\u90fd\u88ab\u7528\u81f3\u5c11\u4e00\u6b21</p> <p>\\(n\\le 15,m\\le 2000,1\\le w_i\\le 10^4\\)</p> \u601d\u8def <p>\u56e0\u70ba\u9ede\u53ea\u6709 15 \u500b\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 bitmask dp</p>"},{"location":"graph/euler_path/#de-bruijn-sequences","title":"De Bruijn sequences","text":"<p>De Bruijn sequence \u662f\u7531 k \u7a2e\u4e0d\u540c\u7b26\u865f\u7d44\u6210\uff0c\u4e14\u5176\u6240\u6709\u9577\u5ea6\u70ba n \u4e4b\u9023\u7e8c\u5b50\u5e8f\u5217\u6070\u70ba k \u7a2e\u7b26\u865f\u7d44\u6210\u9577\u5ea6\u70ba n \u7684\u6240\u6709\u6392\u5217\u3002</p> <p>\u9019\u500b\u554f\u984c\u7684\u7cbe\u795e\u662f\u5728\u65bc\u5c07\u672c\u4f86\u8981\u7528\u6f22\u7c73\u9813\u8def\u5f91\u8dd1\u7684\u5716\uff0c\u8f49\u63db\u6210\u7528\u6b50\u62c9\u8def\u5f91\u8dd1\u7684\u5716\uff0c\u8b93\u6548\u7387\u589e\u5feb\u4e86\u8a31\u591a\u3002\u6211\u5011\u53ef\u4ee5\u5c07\u5176\u5efa\u5716\uff0c\u5c07\u6bcf\u500b\u9577\u5ea6\u70ba n - 1 \u7684\u982d\u522a\u6389\u5f8c\uff0c\u5c07\u5c3e\u63a5\u4e0a\uff0c\u9023\u5230\u5176\u4ed6\u9ede\u53bb\uff0c\u9019\u5f35\u5716\u6703\u6709\u6070 \\(k^n\\) \u689d\u908a\uff0c\u6bcf\u500b\u9ede\u7684 in degree \u8207 out degree \u7686\u70ba k - 1\uff0c\u7b26\u5408\u6b50\u62c9\u8ff4\u8def\u7684\u689d\u4ef6\u3002\u4f8b\u5982 n = 3, k = 2 \u6642\uff0c000 \u5c07\u982d\u522a\u9664\uff0c\u5f8c\u9762\u63a5\u4e0a 1 \u5f8c\u8b8a 001\uff0c\u6545 00 \u6703\u9023\u63a5\u5230 01\uff0c\u908a\u4e0a\u7684\u6578\u5b57\u70ba 1 :</p> <p> </p> <p>\u53ef\u4ee5\u770b\u5230\u6070\u53ef\u5f62\u6210\u4e00\u500b\u6b50\u62c9\u8def\u5f91</p> <p>\u8a73\u7d30\u53ef\u4ee5\u53c3\u8003 : CSES Hand Book</p> CSES - De Bruijn Sequence <p>\u7d66 n\uff0c\u8f38\u51fa k = 2 \u6642\u7684 De Bruijn Sequence</p> <p>\\(1\\le n\\le 15\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int maxn = 3e5 + 5;\n\nstruct Edge {\n    int v, w, eid;\n};\n\nint m;\nvector&lt;Edge&gt; G[maxn];\nvector&lt;int&gt; ans;\n\nvoid dfs(int u) {\n    while (G[u].size()) {\n        auto [v, w, eid] = G[u].back();\n        G[u].pop_back();\n        dfs(v);\n        ans.pb(w);\n    }\n}\n\nvoid add_edge(int u, int v, int w) {\n    G[u].pb({v, w, m++});\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    if (n == 1) {\n        cout &lt;&lt; \"01\\n\";\n        exit(0);\n    }\n\n    for (int i = 0; i &lt; (1 &lt;&lt; n); i++) {\n        int tmp = i - (i &amp; (1 &lt;&lt; (n - 2)));\n        tmp &lt;&lt;= 1;\n        add_edge(i, tmp + 1, 1);\n        add_edge(i, tmp, 0);\n    }\n    dfs(0);\n    for (int i = 0; i &lt; n - 1; i++) {\n        cout &lt;&lt; \"0\";\n    }\n    reverse(ALL(ans));\n    for (int it : ans) cout &lt;&lt; it;\n} \n</code></pre> CF 508 D. Tanya and Password <p>\u6709\u4e00\u500b\u9577\u5ea6 n + 2 \u7684\u5b57\u4e32 s\uff0c\u7d66\u4f60\u5b83\u6bcf\u500b\u9577\u5ea6\u70ba 3 \u7684\u5b50\u5b57\u4e32\uff0c\u8acb\u8f38\u51fa\u4efb\u610f\u4e00\u7a2e s\u3002</p> <p>\\(1\\le n\\le 2\\times 10^5,s\\in \\{\\texttt{a}\\ldots \\texttt{z}, \\texttt{A}\\ldots \\texttt{Z}, \\texttt{1}\\ldots \\texttt{9}\\}\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u9762\u7684\u4e00\u6a23\uff0c\u4f8b\u5982\u6709\u5169\u500b substring aba, bac\uff0c\u90a3\u5c31\u5efa\u7acb ba \u2192 ac\uff0c\u908a\u4e0a\u7684\u6578\u5b57\u70ba c</p> <p>\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f (\u958b\u982d\u7684 substring) + (\u6b50\u62c9\u8ff4\u8def\u908a\u4e0a\u5b57\u5143\u6240\u7d44\u6210\u7684\u5e8f\u5217)</p> <p>\u4ee4 a\u2026z, A\u2026z, 1\u20269 \u5171\u662f m \u7a2e\u6578\u5b57\u3002\u6bcf\u500b\u9ede\u7684 degree \u6700\u591a\u662f m\uff0c\u6240\u4ee5 edge \u6700\u591a n * m \u689d\u3002\u9ede\u662f\u7531\u5169\u500b\u6578\u5b57\u63a5\u8d77\u4f86\uff0c\u6240\u4ee5\u6700\u591a m * m \u500b\u3002\u7e3d\u8907\u96dc\u5ea6 O(n * m) = O(61 * n)</p> 2024 TOI \u6a21\u64ec\u8cfd\u7b2c\u4e00\u5834 pE. \u86af\u8693\u4e82\u5e8f\u91cd\u6392 <p>\u7d66 n \u5f35 8 * 8 \u7684 grid\uff0c\u6bcf\u500b grid \u4e0a\u6709 d \u683c\u5206\u5225\u662f 0, 1, ..., d - 1\uff0c\u5dee 1 \u76f8\u9130\u7684\u6578\u5b57\u5fc5\u76f8\u9130\uff0c\u4ee3\u8868\u4e00\u96bb\u86af\u8693\u5728\u67d0\u500b\u6642\u523b\u7684\u4f4d\u7f6e\u3002\u76f8\u9130\u6642\u523b\u7684\u5169\u500b grid \u6703\u6eff\u8db3 0 \u662f\u76f8\u9130\u7684\uff0c\u800c i \u5c0d\u61c9\u5230 i - 1 \u7684\u4f4d\u7f6e\u3002\u5c07\u9019\u4e9b grid \u91cd\u65b0\u6392\u5217\u4f7f\u5f97\u6574\u9ad4\u770b\u8d77\u4f86\u662f\u9023\u8cab\u7684</p> <p>\\(n\\le 10^5, 3\\le d \\le 10\\)</p> \u601d\u8def <p>\u5047\u8a2d\u73fe\u5728\u7684\u6578\u5b57\u662f 0~9\uff0c\u4f9d\u7167\u4e0a\u9762 De Bruijn sequences \u7684\u60f3\u6cd5\uff0c\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u9ede\uff0c\u4ee3\u8868\u73fe\u5728 1~9 \u7684\u4f4d\u7f6e\uff0c\u800c\u6211\u5011\u9023\u51fa\u53bb\u7684\u908a\u5c31\u4ee3\u8868\u73fe\u5728 0 \u8981\u653e\u5728\u54ea\u88e1\u3002\u9019\u6a23\u7684\u610f\u7fa9\u662f\u7576\u6211\u5011\u5f9e\u67d0\u500b\u7bc0\u9ede\u5f80\u4e00\u689d\u908a\u8d70\u7684\u6642\u5019\uff0c\u76f8\u7576\u65bc\u8b8a\u6210\u8a72\u500b\u72c0\u614b\uff0c\u9019\u6a23\u6211\u5011\u7684\u76ee\u6a19\u5c31\u662f\u5c07\u6240\u6709\u908a\u90fd\u7e5e\u904e\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u6b50\u62c9\u8def\u5f91\u3002</p> <p> </p>"},{"location":"graph/euler_path/#_10","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://liuzhenglaichn.gitbook.io/algorithm/graph/eulerian-path</p> </li> <li> <p>http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&amp;file=f0b00e42978035a90f533cc2421cff2c19e41bb55</p> </li> <li> <p>https://blog.csdn.net/kdazhe/article/details/122160401</p> </li> <li> <p>https://drive.google.com/file/d/1q2mP9uHYAauroE2mjtYKti9khs0H9qaJ/view</p> </li> </ul> <ol> <li> <p>\u898b\u6b64\u5716\uff0c(\u756b\u5e95\u7dda\u7684\u5b57\u4ee3\u8868\u9084\u6709 degree \u53ef\u4ee5\u8d70\uff0c\u85cd\u8272\u4ee3\u8868\u65b0\u63d2\u5165\u7684\u6b50\u62c9\u8ff4\u8def\u5e8f\u5217)\u00a0\u21a9</p> </li> </ol>"},{"location":"graph/euler_tour/","title":"\u6a39\u58d3\u5e73","text":""},{"location":"graph/euler_tour/#dfs","title":"DFS \u5e8f","text":"<p>\u9996\u5148\u662f DFS \u5e8f\uff08Depth-First Search Order\uff09\u3002DFS \u5e8f\u662f\u5728\u6df1\u5ea6\u512a\u5148\u641c\u7d22\u904e\u7a0b\u4e2d\uff0c\u8a18\u9304\u7bc0\u9ede\u8a2a\u554f\u7684\u9806\u5e8f\u3002\u5177\u9ad4\u4f86\u8aaa\uff0cDFS \u5e8f\u662f\u5728\u9032\u5165 dfs \u7684\u6642\u5019\u8207\u51fa\u53bb dfs \u7684\u6642\u5019\u6703\u5c07\u9ede\u5206\u5225\u52a0\u5165 stack \u4e2d\u3002</p> <p>\u8b93\u6211\u5011\u901a\u904e\u4e00\u500b\u793a\u4f8b\u4f86\u7406\u89e3 DFS \u5e8f\u3002\u8003\u616e\u4e0b\u9762\u7684\u6a39\u7d50\u69cb\uff1a</p> <pre><code>graph TD;\n    center[ ]\n    A(1)\n    B(2)\n    C(3)\n    D(4)\n    E(5)\n    F(6)\n    A --- B\n    A --- E\n    B --- C\n    B --- D\n    E --- F\n    style center fill:transparent,stroke:none;</code></pre>  dfs \u5e8f = [1, 2, 3, 3, 4, 4, 2, 5, 6, 6, 5, 1]"},{"location":"graph/euler_tour/#_1","title":"\u6b50\u62c9\u5e8f","text":"<p>\u6b50\u62c9\u5e8f\u662f\u901a\u904e\u5f9e\u6a39\u7684\u6839\u7bc0\u9ede\u958b\u59cb\uff0c\u6309\u7167 DFS \u904d\u6b77\u7684\u9806\u5e8f\u8a2a\u554f\u6bcf\u500b\u7bc0\u9ede\u7684\u65b9\u5f0f\u5f97\u5230\u7684\u5e8f\u5217\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u7576\u6211\u5011\u9047\u5230\u4e00\u500b\u7bc0\u9ede\u6642\uff0c\u5c07\u5176\u52a0\u5165\u5230\u5e8f\u5217\u4e2d\uff1b\u7576\u6211\u5011\u8fd4\u56de\u53f3\u518d\u6b21\u9047\u5230\u9019\u500b\u7bc0\u9ede\u6642\uff0c\u4e5f\u5c07\u5176\u52a0\u5165\u5230\u5e8f\u5217\u4e2d\uff0c\u800c dfs order \u662f\u53ea\u6709\u5728\u8981\u96e2\u958b\u4e00\u500b\u9ede\u6642\u624d\u52a0\u5165\u3002</p> <p> </p>  euler tour = [A, B, C, B, D, E, D, F, D, B, G, B, A, H, I, H, A] <p>\u6b50\u62c9\u5e8f\u53c8\u7a31 euler tour\uff0c\u5c07 dfs \u4f9d\u5e8f\u78b0\u5230\u7684\u9ede\u90fd\u5217\u51fa\u4f86\u3002\u6bcf\u689d\u908a\u8d70\u904e\u4e00\u6b21\u6703\u6070\u8ca2\u737b\u4e00\u500b\u9ede\uff0c\u800c\u6bcf\u689d\u908a\u6703\u8d70\u904e\u5169\u6b21\uff0c\u6240\u4ee5\u76f8\u7576\u65bc \\(2n-2\\) \u500b\u9ede\uff0c\u4f46\u9084\u8981\u52a0\u4e0a\u8d77\u9ede\uff0c\u6240\u4ee5\u6b50\u62c9\u5e8f\u7684\u9577\u5ea6\u662f \\(2n-1\\)</p> \u63db\u6839\u5f8c euler tour \u5e8f\u5217 order \u4e0d\u8b8a <p> </p> <p>\u4e0a\u5716\u7684\u6b50\u62c9\u5e8f\u5217\u70ba </p> \\[[1,2,3,2,1,5,6,5,1,4,1]\\] <p>\u6211\u5011\u5c07\u6b50\u62c9\u5e8f\u5217\u5ef6\u4f38\u4e00\u500d\uff0c\u76f8\u7576\u65bc\u8868\u793a\u6210\u4e00\u500b\u74b0 </p> \\[[1,2,3,2,1,5,6,5,1,4,1,1,2,3,2,1,5,6,5,1,4,1]\\] <p>\u90a3\u63db\u4ee5 \\(5\\) \u70ba\u6839\u5462 ?</p> \\[[1,2,3,2,1,5,6,\\underbrace{5,1,4,1,1,2,3,2,1,5,6,5},1,4,1]\\]"},{"location":"graph/euler_tour/#_2","title":"\u4f8b\u984c","text":"CSES - path queries <p>\u7d66\u5b9a\u4e00\u500b\u6709\u6839\u6a39\uff0c\u9ede\u7de8\u865f \\(1,2,\\ldots, n\\)\uff0c\\(1\\) \u662f root</p> <p>\u6bcf\u500b\u7bc0\u9ede\u4e00\u958b\u59cb\u90fd\u6709\u4e00\u500b value</p> <p>\\(q\\) \u500b\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6703\u662f\u4ee5\u4e0b\u4e00\u7a2e :</p> <ul> <li>\\(\\text{modify}(x,v):\\) \u628a\u7bc0\u9ede \\(x\\) \u7684 value \u8b8a\u6210 \\(v\\) </li> <li>\\(\\text{sum}(rt,x):\\) \u6c42 \\(\\texttt{root} \\to \\ldots \\to x\\) \u7684 value \u7e3d\u548c</li> </ul> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5efa\u7acb DFS \u5e8f</p> <p>\u6bcf\u6b21\u8981 query \u6642\u8a08\u7b97 \\(1\\sim \\texttt{in}[x]\\)</p> <p>\u8981\u4fee\u6539\u67d0\u500b\u9ede\u503c\u5c31\u5c07 \\(\\texttt{in}[x],\\texttt{out}[x]\\) \u90fd\u4fee\u6539\u6210\u8a72\u503c</p> CSES - Subtree Queries <p>\u7d66\u5b9a\u4e00\u500b\u6709\u6839\u6a39\uff0c\u9ede\u7de8\u865f \\(1,2,\\ldots, n\\)\uff0c\\(1\\) \u662f root</p> <p>\u6bcf\u500b\u7bc0\u9ede\u4e00\u958b\u59cb\u90fd\u6709\u4e00\u500b value</p> <p>\\(q\\) \u500b\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6703\u662f\u4ee5\u4e0b\u4e00\u7a2e :</p> <ul> <li>\\(\\text{modify}(x,v):\\) \u628a\u7bc0\u9ede \\(x\\) \u7684 value \u8b8a\u6210 \\(v\\) </li> <li>\\(\\text{SubtreeSum}(x):\\) \u6c42 \\(x\\) \u7684\u5b50\u6a39\u7684 value \u7e3d\u548c</li> </ul> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5efa\u7acb DFS \u5e8f</p> <p>\u6bcf\u6b21\u8981 query \u6642\u8a08\u7b97 \\(\\texttt{in}[x]\\sim \\texttt{out}[x]-1\\)</p> <p>\u8981\u4fee\u6539\u67d0\u500b\u9ede\u503c\u5c31\u5c07 \\(\\texttt{in}[x]\\) \u4fee\u6539\u6210\u8a72\u503c</p> \u5168\u570b\u8cfd 2021 pG <p>\u7d66\u5b9a\u4e00\u68f5 \\(n\\) \u9ede\u6709\u6839\u6a39\uff0c\u4e00\u958b\u59cb\u6bcf\u689d\u908a\u6b0a\u91cd\u90fd\u662f \\(1\\)</p> <p>\\(q\\) \u500b\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6703\u662f\u4ee5\u4e0b\u4e00\u7a2e :</p> <ul> <li> <p>\u628a\u67d0\u689d\u908a\u7684\u6b0a\u91cd\u8b8a \\(0\\)</p> </li> <li> <p>\u8a62\u554f\u6839\u7bc0\u9ede\u5230\u67d0\u4e00\u7bc0\u9ede\u7684\u6b0a\u91cd\u548c</p> </li> </ul> <p>\\(n,q\\le 10^5\\)</p> \u601d\u8def <p>\u5efa\u7acb DFS \u5e8f</p> <p>\u6bcf\u6b21\u8981 query \u6642\u8a08\u7b97 \\(1\\sim \\texttt{in}[x]\\)</p> <p>\u4fee\u6539 \\(\\texttt{edge}(u,v):\\) \u5c07 \\(\\texttt{in}[v]+x,\\texttt{out}[u]-x\\)</p>"},{"location":"graph/flow/","title":"\u7db2\u8def\u6d41","text":""},{"location":"graph/flow/#flow","title":"Flow \u554f\u984c\u4ecb\u7d39","text":"s-t Flow Network <p>\u7d66\u4e00\u500b\u6709\u5411\u5716\uff0c\u6bcf\u689d\u908a (u, v) \u90fd\u6709\u4e00\u500b\u908a\u6b0a c(u, v) \u4ee3\u8868\u5bb9\u91cf\u4e0a\u9650\u3002\u6709\u5169\u500b\u7279\u6b8a\u7684\u9ede\uff0c\u6e90\u9ede\u548c\u532f\u9ede\uff0c\u5728\u6240\u6709\u7a2e\u6d41\u91cf\u4e2d\u6700\u5927\u7684\u7a31\u70ba\u6700\u5927\u6d41</p> <ul> <li> <p>\u7db2\u8def(Network)\uff1a\u5716 G = (V, A) \u70ba\u4e00\u6709\u5411\u5716\uff0c\u7a31\u70ba\u7db2\u8def\u3002</p> </li> <li> <p>\u6e90\u9ede\u8207\u532f\u9ede(Source and Sink)\uff1a\u4ee4\u4e00\u9ede s \u70ba\u6e90\u9ede\u3001\u4e00\u9ede t \u70ba\u532f\u9ede\uff0c\u5176\u9918\u9ede\u5247\u70ba\u4e2d\u9593\u9ede\u3002</p> </li> <li> <p>\u5bb9\u91cf(Capacity)\uff1a\u6bcf\u689d\u908a\u4e0a\u5b9a\u7fa9\u4e00\u500b\u975e\u8ca0\u6578 c(u, v) \u70ba\u8a72\u908a\u7684\u5bb9\u91cf</p> </li> <li> <p>\u6d41\u91cf(Flow)\uff1a\u6bcf\u689d\u908a\u4e0a\u5b9a\u7fa9\u4e00\u500b\u975e\u8ca0\u6578 f(u, v) \u70ba\u6d41\u91cf</p> </li> <li> <p>\u7db2\u8def\u7684\u6d41\u91cf(Flow of Network)\uff1a\u7531\u6e90\u9ede\u767c\u51fa\uff0c\u532f\u9ede\u532f\u96c6\u7684\u7e3d\u6d41\u91cf \uff0c\u532f\u9ede\u532f\u96c6\u7684\u7e3d\u6d41\u91cf\uff0c\u82e5\u5176\u70ba\u8a72\u7db2\u8def\u80fd\u7522\u751f\u7684\u6700\u5927\u6d41\u91cf\uff0c\u5247\u7a31\u5176\u70ba\u6700\u5927\u6d41(Maximum Flow)\u3002</p> </li> </ul> <p></p>"},{"location":"graph/flow/#flow_1","title":"Flow \u6027\u8cea","text":"<ul> <li> <p>\u5bb9\u91cf\u9650\u5236(Capacity Constraints): \u6bcf\u689d\u908a (u, v) \u6240\u7d93\u904e\u7684\u6d41\u91cf f(u, v) &lt;= c(u, v)</p> </li> <li> <p>\u6d41\u91cf\u5b88\u6046(Flow Conservation): \u9664\u4e86\u6e90\u9ede\u548c\u532f\u9ede\uff0c\u6bcf\u500b\u9ede u \u6240\u6d41\u5165\u7684\u6d41\u91cf = \u6d41\u51fa\u7684\u6d41\u91cf</p> </li> <li> <p>\u659c\u5c0d\u7a31(Skew Symmetry): \u5c0d\u65bc\u6240\u6709\u7684 f(u, v) + f(v, u) = 0\uff0c\u7531 u \u5230 v \u6de8\u6d41\u91cf\u52a0\u4e0a\u7531 v \u5230 u \u7684\u6de8\u6d41\u91cf\u5fc5\u9808\u70ba\u96f6</p> </li> <li> <p>\u53ef\u884c\u6d41(Positive Flow)\uff1a\u82e5\u4e00\u500b\u6d41\u7b26\u5408\u4e0a\u8ff0\u4e09\u9ede\u9650\u5236\uff0c\u5247\u7a31\u5176\u70ba\u53ef\u884c\u6d41</p> </li> </ul>"},{"location":"graph/flow/#_1","title":"\u4e00\u4e9b\u5b9a\u7fa9","text":""},{"location":"graph/flow/#residual-network","title":"\u5269\u9918\u7db2\u8def (Residual Network)","text":"<p>\u5c07\u6bcf\u689d\u908a\u7684\u6700\u5927\u5bb9\u91cf\u6263\u6389\u5df2\u7d93\u6d41\u904e\u7684\u6d41\u91cf\uff0c\u5373\u5f97\u5230\u5269\u9918\u7db2\u8def\u3002\u4e5f\u5c31\u662f\u5269\u9918\u5bb9\u91cf \\(c_f(u, v)=c(u, v)-f(u, v)\\) </p> <p></p>"},{"location":"graph/flow/#augmenting-path","title":"\u589e\u5ee3\u8def\u5f91(Augmenting Path)","text":"<p>\u4e00\u689d\u5f9e\u8d77\u9ede\uff0c\u5230\u7d42\u9ede\u7684\u8def\u5f91\uff0c\u5176\u4e2d\u6bcf\u689d\u908a\u7684\u5269\u9918\u5bb9\u91cf\u90fd &gt; 0</p> <p> </p> \u7d05\u8272\u7684\u8def\u5f91\u5373\u70ba\u4e00\u689d\u589e\u5ee3\u8def\u5f91"},{"location":"graph/flow/#maximum-s-t-flow","title":"Maximum s-t flow \u6f14\u7b97\u6cd5","text":"\u6a21\u677f\u6e2c\u8a66 Kattis - Max flow <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u6bcf\u689d\u908a\u7d66\u5b9a\u5bb9\u91cf c(u, v)\uff0c\u554f \\(s\\) \u5230 \\(t\\) \u7684\u6700\u5927\u6d41\uff0c\u4e26\u8f38\u51fa\u6bcf\u689d\u908a\u7684\u6d41\u91cf</p> <p>\\(2\\le n\\le 500, 0\\le m\\le 10^4, 1\\le c(u, v) \\le 10^8\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n\nusing namespace std;\n\nconst int INF = 2e18;\n\nstruct dinic {\n    int n, m, s, t;\n    struct Edge {\n        int u, v, cap;  \n    };\n    vector&lt;Edge&gt; edges;\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;int&gt; lv;\n    vector&lt;int&gt; cur;\n    void init() {\n        n = m = 0;\n        edges = vector&lt;Edge&gt;();\n        G = vector&lt;vector&lt;int&gt;&gt;();\n    }\n    void add_node() {\n        n++;\n        G.push_back({});\n    }\n    void add_edge(int u, int v, int cap) {\n        edges.push_back({u, v, cap});\n        G[u].push_back(m++);\n        edges.push_back({v, u, 0LL});\n        G[v].push_back(m++);\n    }\n    bool bfs() {\n        lv = vector&lt;int&gt;(n, -1);\n        queue&lt;int&gt; q;\n        q.push(s);\n        lv[s] = 0;\n        while (q.size()) {\n            int u = q.front();\n            q.pop();\n            for (auto id : G[u]) {\n                Edge &amp;e = edges[id];\n                if (e.cap &gt; 0 &amp;&amp; lv[e.v] &lt; 0) {\n                    lv[e.v] = lv[u] + 1;\n                    q.push(e.v);\n                }\n            }\n        }\n        return lv[t] &gt;= 0;\n    }\n    int dfs(int u, int f) {\n        if (u == t || f == 0) {\n            return f;\n        }\n        int res = 0;\n        for (int &amp;i = cur[u]; i &lt; G[u].size(); i++) {\n            Edge &amp;e = edges[G[u][i]];\n            Edge &amp;rev = edges[G[u][i] ^ 1];\n            if (e.cap &gt; 0 &amp;&amp; lv[e.v] == lv[u] + 1) {\n                int a = dfs(e.v, min(f, e.cap));\n                if (a &gt; 0) {\n                    e.cap -= a;\n                    rev.cap += a;\n                    res += a;\n                    f -= a;\n                    if (f == 0) {\n                        break;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    int max_flow(int _s, int _t) {\n        s = _s, t = _t;\n        int res = 0;\n        while (bfs()) {\n            cur = vector&lt;int&gt;(n, 0);\n            while (true) {\n                int f = dfs(s, INF);\n                res += f;\n                if (f == 0) break;\n            }\n        }\n        return res;\n    }\n    void print(int flow) {\n        vector&lt;Edge&gt; ans;\n        for (int i = 1; i &lt; edges.size(); i += 2) {\n            auto [u, v, cap] = edges[i];\n            if (cap == 0) continue;\n            ans.push_back({u, v, cap});\n            // cout &lt;&lt; \"u:\" &lt;&lt; v &lt;&lt; \",v:\" &lt;&lt; u &lt;&lt; \",cap:\" &lt;&lt; cap &lt;&lt; \"\\n\";\n        }\n        cout &lt;&lt; n &lt;&lt; \" \" &lt;&lt; flow &lt;&lt; \" \" &lt;&lt; ans.size() &lt;&lt; \"\\n\";\n        for (auto [u, v, cap] : ans) {\n            cout &lt;&lt; v &lt;&lt; \" \" &lt;&lt; u &lt;&lt; \" \" &lt;&lt; cap &lt;&lt; \"\\n\";\n        }\n    }\n} flow;\n\nint n, m, s, t;\n\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;\n    flow.init();\n    for (int i = 0; i &lt; n; i++) flow.add_node();\n\n    int u, v, cap;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; cap;\n        flow.add_edge(u, v, cap);\n    }\n    int f = flow.max_flow(s, t);\n    flow.print(f);\n}\n\nsigned main() {\n    // ios::sync_with_stdio (0);\n    // cin.tie (0);\n    int t = 1;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre>"},{"location":"graph/flow/#fordfulkerson","title":"Ford\u2013Fulkerson","text":"\u7b97\u6cd5\u6982\u8981 <ol> <li>\u6bcf\u6b21\u5f9e s \u958b\u59cb dfs \u627e\u5230\u4e00\u689d\u589e\u5ee3\u8def\u5f91</li> <li>\u627e\u5230\u8def\u5f91\u4e2d\u6d41\u91cf\u6700\u5c0f\u7684\u908a\uff0c\u4e26\u66f4\u65b0\u5269\u9918\u7db2\u8def\uff08\u4ea6\u5c0d\u9006\u5411\u908a\u505a\u66f4\u65b0\uff09</li> <li>\u505a 1. 2. \u76f4\u5230\u627e\u4e0d\u5230\u589e\u5ee3\u8def\u5f91\u70ba\u6b62</li> </ol> <p>Ford\u2013Fulkerson \u96d6\u7136\u8907\u96dc\u5ea6\u4e0d\u4f73\uff0c\u4f46\u4ed6\u7684\u7cbe\u795e\u5728\u5f8c\u7e8c\u63d0\u5230\u7684\u6f14\u7b97\u6cd5\u4e2d\u90fd\u6703\u7528\u5230\u3002</p> <p>\u6bcf\u6b21\u5f9e s \u958b\u59cb dfs \u627e\u5230\u4e00\u689d\u589e\u5ee3\u8def\u5f91\uff0c\u627e\u5230\u8def\u5f91\u4e2d\u6d41\u91cf\u6700\u5c0f\u7684\u908a\uff0c\u4e26\u5c07\u6574\u689d\u8def\u5f91\u586b\u6eff\uff0c\u76f4\u5230\u627e\u4e0d\u5230 s \u5230 t \u7684\u589e\u5ee3\u8def\u5f91\u5373\u7d50\u675f\u3002</p> <p>\u4f46\u9019\u6a23\u662f\u5426\u5c31\u627e\u5230\u4e86\u6700\u5927\u6d41 ? \u6211\u5011\u89c0\u5bdf\u4ee5\u4e0b\u7684\u5269\u9918\u7db2\u8def\uff1a</p> <p></p> <p>\u82e5\u6211\u5011\u7b2c\u4e00\u6b21\u9078\u64c7\u6d41 A \u2192 B \u2192 C \u2192 D \u5f8c\uff0c\u5c31\u6703\u518d\u4e5f\u627e\u4e0d\u5230\u4efb\u4f55\u589e\u5ee3\u8def\u5f91</p> <p></p> <p>\u4f46\u6700\u5927\u6d41\u660e\u986f\u662f A \u2192 B \u2192 D,  A \u2192 C \u2192 D \u9019\u5169\u689d\u3002</p> <p>\u56e0\u70ba\u6211\u5011\u6c92\u6709\u7d66\u4e88\u8fd4\u56de\u7684\u6a5f\u6703\uff0c\u4e5f\u5c31\u662f\u76f8\u7576\u65bc\u7b2c\u4e00\u6b21\u627e\u5230\u7684\u4e0d\u662f\u6700\u512a\u89e3\uff0c\u90a3\u600e\u9ebc\u8fa6 ?</p> <p>\u6240\u4ee5\uff0c\u6211\u5011\u8981\u6709\u4e00\u500b\u53cd\u5411\u908a\uff0c\u4f86\u7d66\u7a0b\u5f0f\u53cd\u6094\u7684\u6a5f\u6703\uff0c\u6bcf\u689d\u908a\u90fd\u5275\u9020\u4e00\u689d\u53cd\u5411\u908a\uff0c\u53cd\u5411\u908a\u7684\u521d\u59cb\u5bb9\u91cf\u662f 0\u3002</p> <p></p> <p>\u7576\u6709 f \u7684\u6d41\u91cf\u5f9e (u, v) \u6d41\u904e\u6642\uff0c\u53cd\u5411\u908a (v, u) \u7684\u5269\u9918\u6d41\u91cf\u5c31\u52a0 f</p> <p></p> <p>\u53ef\u4ee5\u767c\u73fe\u6211\u5011\u5c31\u6703\u6d41\u904e A \u2192 B \u2192 C \u2192 D \u5f8c\uff0c\u9084\u80fd\u518d\u6d41 A \u2192 C \u2192 B \u2192 D\uff0c\u4e2d\u9593\u88ab\u6d41\u904e\u53bb\u4e00\u6b21\uff0c\u53c8\u6d41\u56de\u4f86\u4e00\u6b21\uff0c\u525b\u597d\u62b5\u92b7\u6389\u3002\u7b2c\u4e00\u6b21\u6211\u5011\u6d41\u4e86 1 \u7684\u6d41\u91cf\uff0c\u7b2c\u4e8c\u6b21\u6211\u5011\u4e5f\u662f\u6d41\u4e86 1 \u7684\u6d41\u91cf\uff0c\u6240\u4ee5\u6c42\u51fa\u6700\u5927\u6d41\u5c31\u662f 1 + 1 = 2</p> <p>\u6700\u5dee\u6703\u9700\u8981\u8dd1 O(F) \u56de\u5408\uff0c\u6bcf\u56de\u5408\u505a\u4e00\u6b21 DFS O(E)\u3002</p> \u8907\u96dc\u5ea6 worst case \u8aaa\u660e <p> </p> <p>\u8003\u616e\u4e0a\u9762\u9019\u5f35\u5716\u8dd1 Ford\u2013Fulkerson\uff0cA \u70ba\u6e90\u9ede\uff0cF \u70ba\u532f\u9ede</p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p>\u6703\u767c\u73fe\u5982\u679c\u6211\u5011\u9019\u6a23\u627e\u589e\u5ee3\u8def\u5f91 worst case \u6bcf\u6b21\u90fd\u53ea\u6703\u5c07\u5269\u9918\u6d41\u91cf\u6700\u5927\u7684\u908a\u6d41\u6389\u4e00\u55ae\u4f4d\u7684\u6d41\u91cf\uff0c\u6240\u4ee5\u6700\u5dee\u6703\u627e O(F) \u6b21\u589e\u5ee3\u8def\u5f91</p> code <pre><code>struct FordFulkson {\n    struct Edge {\n        int u, v;\n        long long cap;\n    };\n\n    int n, m, s, t;\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;Edge&gt; edges;\n    vector&lt;bool&gt; vis;\n    void init() {\n        n = 0;\n        m = 0;\n        G.clear();\n        edges.clear();\n    }\n    int add_node() {\n        n++;\n        G.push_back({});\n        return n - 1;\n    }\n    void add_edge(int u, int v, long long cap) {\n        edges.push_back({u, v, cap});\n        G[u].push_back(m++);\n        edges.push_back({v, u, 0ll});\n        G[v].push_back(m++);\n    }\n    long long dfs(int u, long long f) {\n        if (vis[u] || f == 0) return 0;\n        vis[u] = true;\n        if (u == t) return f;\n        for (int ei : G[u]) {\n            Edge&amp; e = edges[ei];\n            Edge&amp; rev = edges[ei ^ 1];\n            long long a = dfs(e.v, min(f, e.cap));\n            if (a &gt; 0) {\n                e.cap -= a;\n                rev.cap += a;\n                return a;\n            }\n        }\n        return 0;\n    }\n    long long max_flow(int _s, int _t) {\n        s = _s, t = _t;\n        long long res = 0;\n        while (true) {\n            vis = vector&lt;bool&gt;(n, false);\n            long long f = dfs(s, LLONG_MAX);\n            if (f == 0) break;\n            res += f;\n        }\n        return res;\n    }\n} flow;\n</code></pre> \u5982\u679c\u662f\u7121\u5411\u5716\u600e\u9ebc\u8655\u7406 ? <p>\u8ddf dijkstra \u4e00\u6a23\uff0c\u5c07\u7121\u5411\u908a\u770b\u6210\u5169\u689d\u7368\u7acb\u7684\u6709\u5411\u908a\u3002\u56e0\u70ba\u6700\u5f8c\u53ea\u6703\u4f7f\u7528\u4f86\u3001\u56de\u5176\u4e2d\u4e00\u5074\uff08\u82e5\u5169\u5074\u90fd\u4f7f\u7528\u53ef\u4ee5\u4e92\u76f8\u6d88\u6389\uff09\uff0c\u5982\u5716</p> <p> </p> <p>\u90a3\u8981\u600e\u9ebc\u5be6\u4f5c ? \u6211\u5011\u5c0d\u65bc\u4f86\u3001\u56de\u9019\u5169\u500b\u6709\u5411\u908a\uff0c\u4f9d\u7167 Ford\u2013Fulkerson\uff0c\u9664\u4e86\u539f\u672c\u7684\u65b9\u5411\u5916\uff0c\u90fd\u5404\u81ea\u5efa\u7acb\u4e00\u689d\u9006\u5411\u908a\uff0c\u9006\u5411\u908a\u7684\u6d41\u91cf\u90fd\u6703\u662f 0\uff0c\u4e5f\u5c31\u662f u \u8207 v \u4e4b\u9593\u5c31\u6703\u7522\u751f 4 \u689d\u908a\u3002\u8f38\u51fa\u7b54\u6848\u5c31\u770b\u54ea\u4e00\u5074\u6d41\u904e\u53bb\u7684\u6bd4\u8f03\u591a\uff0c\u5c31\u8f38\u51fa\u90a3\u500b\u65b9\u5411\uff0c\u4e5f\u5c31\u662f\u770b\u4f86\u3001\u56de\u5206\u5225\u7684\u300c\u9006\u5411\u908a\u300d\u7684\u5269\u9918\u6d41\u91cf\u3002\u5982\u4e0b\u5716</p> <p> </p> <p>(v, u) \u7684\u9006\u5411\u908a\u5269\u9918\u6d41\u91cf\u70ba 2\uff0c(u, v) \u7684\u9006\u5411\u908a\u5269\u9918\u6d41\u91cf\u70ba 1\uff0c\u56e0\u70ba 2 - 1 = 1\uff0c\u6240\u4ee5\u6700\u5f8c\u5c31\u662f\u8f38\u51fa\u5f9e (v, u) \u6d41\u904e\u53bb 1 \u55ae\u4f4d</p>"},{"location":"graph/flow/#edmond-karp","title":"Edmond-Karp","text":"\u7b97\u6cd5\u6982\u8981 <ol> <li>\u6bcf\u6b21\u5f9e s \u958b\u59cb bfs \u627e\u5230\u4e00\u689d\u6700\u77ed\u7684\u589e\u5ee3\u8def\u5f91</li> <li>\u627e\u5230\u8def\u5f91\u4e2d\u6d41\u91cf\u6700\u5c0f\u7684\u908a\uff0c\u4e26\u66f4\u65b0\u5269\u9918\u7db2\u8def\uff08\u4ea6\u5c0d\u9006\u5411\u908a\u505a\u66f4\u65b0\uff09</li> <li>\u505a 1. 2. \u76f4\u5230\u627e\u4e0d\u5230\u589e\u5ee3\u8def\u5f91\u70ba\u6b62</li> </ol> <p>Edmonds-Karp \u8ddf Ford\u2013Fulkerson \u53ea\u5dee\u5728\u6bcf\u6b21\u627e\u7684\u662f\u6700\u77ed\u7684\u4e00\u689d\u589e\u5ee3\u8def\u5f91\u3002</p> <p>\u4e00\u500b\u7db2\u8def\u6700\u591a\u53ea\u6709 O(VE) \u689d\u589e\u5ee3\u8def\u5f91\uff0c\u800c\u627e\u4e00\u689d\u589e\u5ee3\u8def\u5f91\u9700\u8981 O(E) bfs\uff0c\u6240\u4ee5\u7e3d\u8907\u96dc\u5ea6\u70ba O(min(VE<sup>2</sup>, FE))</p> \u8b49\u660e: \u6700\u77ed\u589e\u5ee3\u8def\u7684\u8ddd\u96e2\u975e\u905e\u6e1b <p>\u5148\u5047\u8a2d\u4e00\u4e9b\u8b8a\u6578</p> <ul> <li> <p>\u8a2d \\(\\delta_f(s,x)\\) \u70ba\u589e\u5ee3\u524d\u7684\u5269\u9918\u7db2\u8def\u4e2d\uff0c\u6e90\u9ede\u5230 \\(x\\) \u7684\u6700\u77ed\u8ddd\u96e2\u3002</p> </li> <li> <p>\u4ee4 \\(v\\) \u662f\u5728\u67d0\u6b21\u589e\u5ee3\u5f8c \\(\\delta_f(s,v)\\) \u8b8a\u5c0f\u7684\u9ede\u4e2d\u8ddd\u96e2\u6e90\u9ede\u6700\u8fd1\u7684\u9ede</p> </li> <li> <p>\u8a2d \\(\\delta_{f'}(s,x)\\) \u70ba\u589e\u5ee3\u5f8c\u7684\u5269\u9918\u7db2\u8def\u4e2d\uff0c\u6e90\u9ede\u5230 \\(x\\) \u7684\u6700\u77ed\u8ddd\u96e2\u3002 \u5247\u53ef\u4ee5\u5f97\u5230 \\(\\delta_{f'}(s,v)&lt;\\delta_f(s,v)\\)</p> </li> <li> <p>\u4ee4 \\(u\\) \u662f\u5728\u589e\u5ee3\u5f8c\u7684\u5269\u9918\u7db2\u8def\u4e2d\uff0c\u5f9e\u6e90\u9ede\u5230 \\(v\\) \u4e4b\u6700\u77ed\u8def\u5f91\u7684\u524d\u4e00\u500b\u7bc0\u9ede\uff0c\u5247 \\(\\delta_{f'}(s,v)=\\delta_{f'}(s,u)+1\\)</p> </li> </ul> <p>\u53c8\u56e0\u70ba\u6211\u5011\u9078\u64c7 \\(v\\) \u7684\u65b9\u5f0f\uff0c\u56e0\u6b64</p> <p>\\(\\delta_{f}(s,u) \\le\\delta_{f'}(s,u)\\)</p> <p>\\(\\Rightarrow \\delta_{f}(s,u) +1\\le\\delta_{f'}(s,u)+1\\)</p> <p>\u53c8 \\(\\delta_{f'}(s,v)=\\delta_{f'}(s,u)+1\\)\uff0c\u6240\u4ee5 \\(\\delta_f(s,u)+1&lt;\\delta_{f'}(s,v)\\)</p> <p>\u800c \\(\\delta_{f'}(s,v)&lt;\\delta_f(s,v)\\)\uff0c\u5f97 \\(\\delta_f(s,u)+1&lt;\\delta_{f}(s,v)\\)</p> <p>\u4e5f\u5c31\u662f\u8aaa \\((u,v)\\) \u908a\u6c92\u6709\u5269\u9918\u6d41\u91cf\uff0c\u56e0\u70ba\u5982\u679c \\((u,v)\\) \u908a\u9084\u6709\u5269\u9918\u6d41\u91cf\u7684\u8a71\u4ee3\u8868 \\(\\delta_f(s,v)\\le \\delta_{f}(s,u)+1\\)</p> <p>\\((u,v)\\) \u908a\u5728\u589e\u5ee3\u524d\u6c92\u6709\u5269\u9918\u6d41\u91cf\uff0c\u4f46\u589e\u5ee3\u5f8c\u6709\u5269\u9918\u6d41\u91cf\uff0c \u4ee3\u8868\u5728\u9019\u6b21\u589e\u5ee3\u6642\u6709\u901a\u904e \\((v,u)\\) \u908a\uff0c\u6240\u4ee5 \\(\\delta_f(s,v)+1=\\delta_f(s,u)\\) \uff0c\u4f46\u662f\u9019\u8207 \\(\\delta_f(s,u)+1&lt;\\delta_{f}(s,v)\\) \u77db\u76fe\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728\u9019\u6a23\u7684 \\(v\\) \u9ede \u21d2 \u6700\u77ed\u589e\u5ee3\u8def\u7684\u8ddd\u96e2\u975e\u905e\u6e1b</p> Edmonds-Karp \u904e\u7a0b - \u7bc4\u4f8b <p> </p> <p>\u8003\u616e\u4e0a\u9762\u9019\u5f35\u5716\u8dd1 Edmonds-Karp\uff0cA \u70ba\u6e90\u9ede\uff0cF \u70ba\u532f\u9ede</p> <p> </p> <p>\u627e\u5230 A \u2192 B \u2192 E \u2192 F\uff0c\u6d41\u91cf\u70ba 1</p> <p> </p> <p>\u627e\u5230 A \u2192 B \u2192 C \u2192 F\uff0c\u6d41\u91cf\u70ba 99</p> <p> </p> <p>\u627e\u5230 A \u2192 D \u2192 E \u2192 F\uff0c\u6d41\u91cf\u70ba 99</p> <p> </p> <p>\u627e\u5230 A \u2192 D \u2192 E \u2192 B \u2192 C \u2192 F\uff0c\u6d41\u91cf\u70ba 1</p> <p> </p> <p>A \u7121\u6cd5\u8d70\u5230 F\uff0c\u7e3d\u6d41\u91cf\u70ba 200\uff0c\u53ef\u4ee5\u767c\u73fe\u56e0\u70ba\u6211\u5011\u6bcf\u6b21\u90fd\u6311\u6700\u77ed\u7684\u8d70\uff0c\u6bd4\u4e0a\u9762 Ford\u2013Fulkerson \u8981\u5c11\u8dd1\u4e86\u597d\u5e7e\u8f2a</p> code <pre><code>struct EdmondsKarp {\n    struct Edge {\n        int u, v;\n        long long cap;\n    };\n\n    int n, m, s, t;\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;Edge&gt; edges;\n    void init() {\n        n = 0;\n        m = 0;\n        G.clear();\n        edges.clear();\n    }\n    int add_node() {\n        n++;\n        G.push_back({});\n        return n - 1;\n    }\n    void add_edge(int u, int v, long long cap) {\n        edges.push_back({u, v, cap});\n        G[u].push_back(m++);\n        edges.push_back({v, u, 0ll});\n        G[v].push_back(m++);\n    }\n    long long bfs() {\n        vector&lt;pair&lt;int, long long&gt;&gt; pre(n, {-1, 0});\n        queue&lt;int&gt; que;\n        que.push(s);\n        pre[s] = {0, LLONG_MAX};\n        while (que.size()) {\n            int u = que.front();\n            que.pop();\n            for (int ei : G[u]) {\n                Edge&amp; e = edges[ei];\n                if (e.cap &gt; 0 &amp;&amp; pre[e.v].first == -1) {\n                    pre[e.v] = {ei, min(pre[u].second, e.cap)};\n                    que.push(e.v);\n                }\n            }\n        }\n        if (pre[t].first == -1) return 0;\n        long long f = pre[t].second;\n        int w = t;\n        while (w != s) {\n            int ei = pre[w].first;\n            edges[ei].cap -= f;\n            edges[ei ^ 1].cap += f;\n            w = edges[ei].u;\n        }\n        return f;\n    }\n    long long max_flow(int _s, int _t) {\n        s = _s, t = _t;\n        long long res = 0;\n        while (true) {\n            long long f = bfs();\n            if (f == 0) break;\n            res += f;\n        }\n        return res;\n    }\n} flow;\n</code></pre>"},{"location":"graph/flow/#dinic","title":"Dinic","text":"\u7b97\u6cd5\u6982\u8981 <ol> <li>\u6bcf\u6b21\u5f9e s \u958b\u59cb bfs \u5efa\u7acb\u6700\u77ed\u8def\u5f91\u5716</li> <li>\u5728\u9019\u500b\u300c\u6700\u77ed\u8def\u5f91\u5716\u300d\u4e0a dfs \u627e\u589e\u5ee3\u8def\u5f91\uff0c\u76f4\u5230\u627e\u4e0d\u5230\u70ba\u6b62</li> <li>\u91cd\u8907 1. 2. \u76f4\u5230\u627e\u4e0d\u5230\u589e\u5ee3\u8def\u5f91</li> </ol> <p>Dinic \u6f14\u7b97\u6cd5\u8ddf Edmond-Karp \u4e0d\u540c\u7684\u662f\uff0c\u6bcf\u6b21\u628a\u6240\u6709\u9577\u5ea6\u70ba k \u7684\u589e\u5ee3\u8def\u627e\u51fa\u4f86\u5f8c\uff0c\u4e00\u76f4\u9032\u884c\u589e\u5ee3\u3002\u5f9e s \u5230 t \u8ddd\u96e2\u70ba k \u7684\u9ede\u6703\u5f62\u6210\u6700\u77ed\u8def\u5f91 DAG\uff0c\u7db2\u8def\u4e0a\u4e5f\u6709\u4eba\u7a31\u9019\u500b\u53eb\u5c64\u6b21\u5716(level graph)\u3002Dinic \u7b97\u6cd5\u6bcf\u6b21\u6703\u5148\u7528 bfs \u5efa\u7acb\u6700\u77ed\u8def\u5f91 DAG\uff0c\u518d\u7528 dfs \u5728 DAG \u4e0a\u4e0d\u65b7\u7684\u627e\u589e\u5ee3\u8def\uff0c\u76f4\u5230\u627e\u4e0d\u5230\uff0c\u7136\u5f8c\u518d\u7528 bfs \u518d\u5efa\u7acb\u4e00\u5f35\u6700\u77ed\u8def\u5f91 DAG\uff0c\u7136\u5f8c\u518d\u7528 dfs \u5728 DAG \u4e0a\u9762\u4e0d\u65b7\u7684\u627e\u589e\u5ee3\u8def\uff0c\u4e00\u76f4\u505a\u4e0b\u53bb\u3002</p> <p>\u5728\u6700\u77ed\u8def\u5f91 DAG \u4e0a\u7684\u589e\u5ee3\u8def\u9577\u5ea6\u6700\u591a O(V)\uff0c\u6bcf\u6b21\u505a\u5b8c\u4e00\u689d\u908a\u5c31\u6703\u5f9e\u6700\u77ed\u8def\u5f91 DAG \u6d88\u5931\uff0c\u6700\u591a\u6d88\u5931 m \u689d\u908a\uff0c\u6240\u4ee5\u627e\u5230 blocking flow \u6703\u82b1\u8cbb O(VE)\u3002\u6bcf\u6b21 BFS s-t \u8ddd\u96e2\u81f3\u5c11\u589e\u52a0 1\uff0c\u81f3\u591a\u505a V \u6b21 BFS\uff0c\u7e3d\u6642\u9593\u70ba O(min(V<sup>2</sup>E, FE))</p> <p>dinic Matching \u8907\u96dc\u5ea6\u70ba O(E * sqrt(V))</p> code <pre><code>struct Dinic {\n    struct Edge {\n        int u, v;\n        long long cap;\n    };\n    int n, m, s, t;\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;Edge&gt; edges;\n    vector&lt;int&gt; lv;\n    vector&lt;int&gt; cur;\n    void init() {\n        n = 0;\n        m = 0;\n        G.clear();\n        edges.clear();\n    }\n    int add_node() {\n        n++;\n        G.push_back({});\n        return n - 1;\n    }\n    void add_edge(int u, int v, long long cap) {\n        edges.push_back({u, v, cap});\n        G[u].push_back(m++);\n        edges.push_back({v, u, 0});\n        G[v].push_back(m++);\n    }\n    bool bfs() {\n        lv = vector&lt;int&gt;(n, -1);\n        queue&lt;int&gt; que;\n        que.push(s);\n        lv[s] = 0;\n        while (!que.empty()) {\n            int u = que.front();\n            que.pop();\n            for (int ei : G[u]) {\n                Edge &amp;e = edges[ei];\n                if (lv[e.v] &lt; 0 &amp;&amp; e.cap &gt; 0) {\n                    lv[e.v] = lv[u] + 1;\n                    que.push(e.v);\n                }\n            }\n        }\n        return lv[t] &gt;= 0;\n    }\n    long long dfs(int u, long long f) {\n        if (u == t || f == 0) return f;\n        long long res = 0;\n        for (int &amp;i = cur[u]; i &lt; (int)G[u].size(); i++) {\n            int ei = G[u][i];\n            Edge &amp;e = edges[ei];\n            Edge &amp;rev = edges[ei ^ 1];\n            if (e.cap &gt; 0 &amp;&amp; lv[e.v] == lv[u] + 1) {\n                long long a = dfs(e.v, min(f, e.cap));\n                if (a &gt; 0) {\n                    e.cap -= a;\n                    rev.cap += a;\n                    res += a;\n                    f -= a;\n                    if (f == 0) break;\n                }\n            }\n        }\n        return res;\n    }\n    long long max_flow(int _s, int _t) {\n        s = _s, t = _t;\n        long long res = 0;\n        while (bfs()) {\n            cur = vector&lt;int&gt;(n, 0);\n            while (true) {\n                long long f = dfs(s, LLONG_MAX);\n                if (f == 0) break;\n                res += f;\n            }\n        }\n        return res;\n    }\n} flow;\n</code></pre>"},{"location":"graph/flow/#_2","title":"\u8907\u96dc\u5ea6\u6bd4\u8f03","text":"Flow Matching Ford-Fulkerson O(EF) O(VE) Edmond-Karp O(min(VE<sup>2</sup>, FE)) Dinic\uff08\u5e38\u6578\u7d1a\u5c0f\uff09 O(min(V<sup>2</sup>E, FE)) O(E * sqrt(V))"},{"location":"graph/flow/#min-cut","title":"\u6700\u5c0f\u5272(Min Cut)","text":"<p>\u5b9a\u7fa9\u4e00\u500b s-t cut \\(C = (S \\text{-component}, T\\text{-component})\\) \u662f\u5c07\u9ede\u5206\u6210\u8207 s \u540c\u4e00\u584a\u6216\u8207 t \u540c\u4e00\u584a\u3002\u5b9a\u7fa9 \\(C\\) \u7684 cut-set \u70ba \\(\\{(u, v) \\in E \\mid u \\in S\\text{-component}, v \\in T\\text{-component}\\}\\)\uff0c\u4f7f\u5f97\u5728 cut-set \u7684\u908a\u90fd\u88ab\u522a\u6389\u5f8c\uff0cs \u5230 t \u7684 Max Flow \u662f 0\uff08i.e. s \u548c t \u4e0d\u9023\u901a\uff09\u3002</p> <p>s-t cut \u7684 cost \u70ba cut-set \u5167\u7684\u908a\u7684 capacity \u7e3d\u548c\uff0cmin cut \u5c31\u662f\u8981\u6700\u5c0f\u5316\u9019\u500b cost\u3002\u7c21\u55ae\u4f86\u8aaa\u5c31 Min Cut \u662f\u9078\u4e00\u4e9b\u908a\uff0c\u4f7f\u5f97\u522a\u6389\u5f8c s, t \u4e0d\u9023\u901a\uff0c\u4e26\u4e14 capacity \u6700\u5c0f</p> <p></p> <p>\u4ee5\u9019\u500b\u4f8b\u5b50\u4f86\u8aaa\uff0cmin cut \u5c31\u662f 2 + 2 = 4\uff08\u5f9e t \u5230 s \u7684\u908a\u96d6\u6709\u88ab\u5207\u5230\uff0c\u4f46\u4e0d\u8a08\u7b97\u5728 s-t \u5272\uff0c\u56e0\u70ba\u5c0d s \u80fd\u4e0d\u80fd\u8d70\u5230 t \u7684\u9023\u901a\u6027\u6c92\u6709\u5f71\u97ff\uff09</p> <p>min cut \u70ba\u4ec0\u9ebc\u5f88\u591a\u5716\u7247\u90fd\u6703\u7528\u4e00\u689d\u7dda\u4f86\u5207\u5272\uff0c\u56e0\u70ba\u6211\u5011\u53ef\u4ee5\u60f3\u6210\u628a S-component \u8207 T-component \u62d4\u958b\uff0c\u4e2d\u9593\u5c31\u6703\u7522\u751f\u597d\u5e7e\u689d\u9023\u901a\u5169\u5074\u7684\u908a\uff0c\u9019\u689d\u7dda\u5c31\u4ee3\u8868\u8457 min cut \u6703\u5207\u5272\u9019\u4e9b\u908a</p> \u3010Max Flow Min Cut Theorm\u3011: max flow = min cut <p>max flow &lt;= cut</p> <p>Max Flow \u53ef\u4ee5\u60f3\u6210\u5f88\u591a\u500b disjoint path\uff0c\u4efb\u4f55\u7684 cut \u4e00\u5b9a\u90fd\u6703\u5207\u5230\u9019\u4e9b path\uff0c\u6240\u4ee5\u4efb\u4f55 cut \u4e0d\u6703\u6bd4\u4efb\u4f55 flow \u5c0f\u3002</p> <p>\u611f\u6027\u7684\u7406\u89e3\uff0cs-t \u82e5\u60f3\u8981\u6d41\u51fa\u6700\u5927\u6d41\u91cf\uff0c\u5fc5\u5b9a\u6703\u6709\u74f6\u9838\u8655\u5f62\u6210 s-t \u6700\u5c0f\u5272</p> <p>\u5c0d\u5076\u6027 Duality(from IOIC 2016)</p> <p>\u554f\u984c\u5e38\u5e38\u662f\u4e00\u9ad4\u5169\u9762\uff0c\u67d0\u500b\u6c42\u6700\u5927\u503c\u7684\u554f\u984c\u5e38\u5e38\u7b49\u50f9\u65bc\u53e6\u4e00\u500b\u6c42\u6700\u5c0f\u503c\u7684\u554f\u984c\uff0c\u4f8b\u5982\u8aaa:</p> <ul> <li> <p>\u300c\u4f60\u6703\u7684\u554f\u984c\u88e1\u6700\u96e3\u7684\u4e00\u500b\u300d\u5dee\u4e0d\u591a\u5c31\u662f \u300c\u4f60\u4e0d\u6703\u7684\u554f\u984c\u88e1\u6700\u7c21\u55ae\u7684\u4e00\u500b\u300d</p> </li> <li> <p>\u300c\u7d66\u4f60 1000 \u5143\u4f60\u6700\u591a\u53ef\u4ee5\u6d3b\u591a\u4e45\u300d\u8ddf \u300c\u4f60\u8981\u6d3b\u4e00\u500b\u6708\u81f3\u5c11\u9700\u8981\u591a\u5c11\u9322\uff1f\u300d\u5dee\u4e0d\u591a</p> </li> </ul> <p>\u90a3\u6700\u5927\u6d41\u7684\u5c0d\u5076\u662f\u4ec0\u9ebc\u5462 ? \u4e00\u500b\u7db2\u8def\u7684\u6700\u5927\u6d41\uff0c\u5c31\u662f\u90a3\u4e9b\u88ab\u300c\u5835\u4f4f\u300d\u7684\u6c34\u7ba1\u7684\u6de8\u6d41\u91cf\uff0c\u9019\u4e9b\u5835\u4f4f\u7684\u6c34\u7ba1\u6703\u628a\u9ede\u5206\u6210\u5169\u7fa4\u3002</p>"},{"location":"graph/flow/#mincut","title":"\u5982\u4f55\u8f38\u51fa\u4e00\u500b mincut","text":"<p>min-cut \u5c31\u662f\u505a max-flow \u5f8c\uff0c\u5f9e s \u534a\u908a\u6307\u5230 t \u534a\u908a\u7684\u90a3\u4e9b\u908a\u3002\u505a\u5b8c max-flow \u5f8c\u505a\u4e00\u6b21 bfs / dfs\uff0c\u4e26\u53ea\u8d70\u9084\u6c92\u6d41\u6eff\u7684\u908a\uff0c\u53ef\u4ee5\u8d70\u5230\u7684\u9ede\u5373\u70ba s \u534a\u908a\uff0c\u4e0d\u80fd\u8d70\u5230\u7684\u9ede\u5373\u70ba t \u534a\u908a\u7684\u9ede\uff0c\u6383\u904e\u6240\u6709\u7684\u908a\u6aa2\u67e5\u5169\u7aef\u9ede\u7684\u72c0\u6cc1\uff0c\u8f38\u51fa\u7b26\u5408\u689d\u4ef6\u7684\u5373\u70ba\u6240\u6c42\u3002</p> <p>\u611f\u6027\u7684\u7406\u89e3\uff0c\u70ba\u4ec0\u9ebc\u53ef\u4ee5\u9019\u6a23\u505a\uff0c\u5176\u5be6\u53ef\u4ee5\u628a s \u958b\u59cb\u8d70\u9084\u6c92\u6d41\u6eff\u7684\u908a\u8996\u70ba\u7121\u95dc\u7dca\u8981\u7684\u908a\uff0c\u82e5\u78b0\u5230\u4e00\u500b\u6703\u6d41\u6eff\u7684\u5730\u65b9\u5c31\u6703\u662f\u74f6\u9838\u8655</p> code <pre><code>bool side[MAXN];\nvoid cut(int u) {\n    side[u] = 1;\n    for (int i : G[u]) {\n        if (!side[edges[i].v] &amp;&amp; edges[i].cap) {\n            cut(edges[i].v);\n        }\n    }\n}\n</code></pre> \u6c42 S-component \u9ede\u6578\u6700\u5c11/\u6700\u591a\u7684 mincut <p>\u6700\u5c11: \u5f9e s \u958b\u59cb\u8d70\u6c92\u6709\u6d41\u6eff\u7684 edges\uff0c\u8d70\u5230\u7684\u9ede\u5c31\u662f\u7b54\u6848</p> <p>\u6700\u591a: \u5f9e t \u958b\u59cb\u8d70\u6c92\u6709\u6d41\u6eff\u7684 edges\uff0c\u6c92\u8d70\u5230\u7684\u9ede\u5c31\u662f\u7b54\u6848</p> \u6a21\u677f\u6e2c\u8a66 Kattis - Min Cut <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u6bcf\u689d\u908a\u7d66\u5b9a\u5bb9\u91cf c(u, v)\uff0c\u554f \\(s\\) \u5230 \\(t\\) \u7684 min cut\uff0c\u4e26\u8f38\u51fa S-component \u5167\u7684\u9ede</p> <p>\\(2\\le n\\le 500, 0\\le m\\le 10^4, 1\\le c(u, v) \\le 10^8\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define ALL(x) x.begin(), x.end()\n#define pb push_back\n\nusing namespace std;\n\nconst int INF = 2e18;\n\nstruct dinic {\n    int n, m, s, t;\n    struct Edge {\n        int u, v, cap, w;\n    };\n\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;Edge&gt; edge;\n    vector&lt;int&gt; cur;\n    vector&lt;int&gt; lv;\n    vector&lt;int&gt; slide;\n    vector&lt;int&gt; ans;\n\n    void init() {\n        n = m = 0;\n        edge.clear();\n        G.clear();\n        cur.clear();\n        lv.clear();\n        slide.clear();\n        ans.clear();\n    }\n\n    void add_node() {\n        n++;\n        G.pb({});\n    }\n\n    void add_edge(int u, int v, int cap) {\n        G[u].pb(m++);\n        edge.pb({u, v, cap});\n        G[v].pb(m++);\n        edge.pb({v, u, 0LL});\n    }\n\n    int bfs() {\n        lv = vector&lt;int&gt;(n, -1);\n        queue&lt;int&gt; q;\n        q.push(s);\n        lv[s] = 0;\n\n        while (q.size()) {\n            int u = q.front();\n            q.pop();\n\n            for (auto id : G[u]) {\n                Edge &amp;e = edge[id];\n\n                if (e.cap &gt; 0 &amp;&amp; lv[e.v] == -1) {\n                    lv[e.v] = lv[e.u] + 1;\n                    q.push(e.v);\n                }\n            }\n        }\n        return lv[t] &gt;= 0;\n    }\n\n    int dfs(int u, int f) {\n        if (u == t || f == 0) return f;\n        int res = 0;\n\n        for (int &amp;i = cur[u]; i &lt; G[u].size(); i++) {\n            Edge &amp;e = edge[G[u][i]];\n            Edge &amp;rev = edge[G[u][i] ^ 1];\n\n            if (e.cap &gt; 0 &amp;&amp; lv[e.v] == lv[e.u] + 1) {\n                int x = dfs(e.v, min(f, e.cap));\n\n                if (x &gt; 0) {\n                    res += x;\n                    f -= x;\n                    e.cap -= x;\n                    rev.cap += x;\n                    if (f == 0) break;\n                }\n            }\n        }\n\n        return res;\n    }\n\n    void cut(int u) {\n        slide[u] = 1;\n        ans.pb(u);\n        for (auto id : G[u]) {\n            Edge &amp;e = edge[id];\n\n            if (slide[e.v] == -1 &amp;&amp; e.cap &gt; 0) {\n                cut(e.v);\n            }\n        }\n    }\n\n    void min_cut() {\n        slide = vector&lt;int&gt;(n, -1);\n        cut(s);\n\n        cout &lt;&lt; ans.size() &lt;&lt; \"\\n\";\n        for (int it : ans) cout &lt;&lt; it &lt;&lt; \"\\n\";\n    }\n\n    int max_flow(int _s, int _t) {\n        s = _s, t = _t;\n\n        int ans = 0;\n        while (bfs()) {\n            cur = vector&lt;int&gt;(n, 0);\n            while (true) {\n                int f = dfs(s, INF);\n                if (f == 0) break;\n                ans += f;\n            }\n        }\n        return ans;\n    }\n} flow;\n\nvoid solve() {\n    int n, m, s, t;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;\n    flow.init();\n    for (int i = 0; i &lt; n; i++) flow.add_node();\n\n    int u, v, cap;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; cap;\n        flow.add_edge(u, v, cap);\n    }\n    int f = flow.max_flow(s, t);\n    flow.min_cut();\n}\n\nsigned main() {\n    // ios::sync_with_stdio (0);\n    // cin.tie (0);\n    int t = 1;\n    while (t--) {\n        // init ();\n        solve();\n    }\n}\n</code></pre>"},{"location":"graph/flow/#min-cut_1","title":"min cut \u61c9\u7528","text":"\u751f\u7522\u7522\u54c1\u554f\u984c NCTUOJ 1138. \u6210\u672c\u5229\u6f64\u554f\u984c (Group 31) <p>\u6709 \\(n\\) \u7a2e\u5de5\u5177\u548c \\(m\\) \u7a2e\u5de5\u4f5c\uff0c\u6bcf\u7a2e\u5de5\u4f5c\u9700\u8981\u82e5\u5e72\u7a2e\u5de5\u5177\u3002\u7b2c \\(i\\) \u7a2e\u5de5\u5177\u9700\u8981\u82b1 \\(c_i\\) \u5143\u8cb7\u4e0b\u4f86\uff0c\u7b2c \\(i\\) \u7a2e\u5de5\u4f5c\u7684\u5831\u916c\u70ba \\(p_i\\)\uff0c\u6c42\u6700\u5927\u5229\u6f64</p> <p> </p> <p>\\(1 \\le n, m \\le 500,\\) \u7269\u54c1\u9700\u6c42\u95dc\u4fc2\u6578\u91cf \\(\\le 2\\times 10^4\\)</p> \u601d\u8def <p>\u5148\u5efa\u5716\uff0c\u5de6\u534a\u6392\u64fa\u5de5\u5177\uff0c\u53f3\u534a\u6392\u64fa\u5de5\u4f5c\uff0c\u6210\u672c\u548c\u5831\u916c\u70ba\u908a\u6b0a\uff0c\u82e5\u65b9\u6848 i \u9700\u8981\u5de5\u5177 j\uff0c\u5247\u9023\u908a (j, i)</p> <p> </p> <p>\u56e0\u70ba min cut \u8981\u6700\u5c0f\u5316\uff0c\u5207\u5230\u7684\u5c31\u6703\u662f\u8981\u8cb7\u7684\u5de5\u5177 C \u548c\u4e0d\u8cfa\u7684\u5de5\u4f5c P'\u3002\u82e5\u9078\u5b8c maximum flow &gt; 0</p> <p> </p> <p>\u6700\u5f8c\u7b54\u6848\u5c31\u662f \\(\\sum P\\) - (C + P')</p> <p>\u6211\u5011\u4f86\u9a57\u8b49\u70ba\u4ec0\u9ebc\u9019\u500b\u554f\u984c\u53ef\u4ee5\u8f49\u63db\u6210 min cut\uff0c\u4ee5\u4e0a\u5716\u7684\u5de5\u4f5c p1 \u4f86\u8aaa:</p> <ul> <li> <p>\u4e0d\u505a p1 \u2192 c1, c3 \u9078\u4e0d\u9078\u90fd\u7121\u6240\u8b02</p> <ul> <li>min cut \u7684\u89d2\u5ea6: \u5207 p1 \u2192 c1, c3 \u5207\u4e0d\u5207\u90fd\u7121\u6240\u8b02</li> </ul> </li> <li> <p>\u505a p1 \u2192 c1, c3 \u4e00\u5b9a\u8981\u9078</p> <ul> <li>min cut \u7684\u89d2\u5ea6: \u4e0d\u5207 p1 \u2192 c1, c3 \u90fd\u4e00\u5b9a\u8981\u88ab\u5207</li> </ul> </li> </ul> \u6700\u5927\u6b0a\u9589\u5305\u554f\u984c NCTUOJ 731. \u6700\u5927\u6b0a\u9589\u5305\u554f\u984c (Group 19) <p>\u7d66 n \u500b\u4eba\u7684\u53d7\u6b61\u8fce\u7a0b\u5ea6\u548c\u6bcf\u500b\u4eba\u7684\u597d\u53cb\u5217\u8868 (\u597d\u53cb\u4e26\u975e\u96d9\u5411\u95dc\u4fc2)\uff0c\u82e5\u7b2c i \u500b\u4eba\u8981\u53c3\u52a0\u805a\u6703\u7684\u8a71\u5247\u4ed6\u7684\u6240\u6709\u597d\u53cb\u90fd\u8981\u53c3\u52a0\u805a\u6703\uff0c\u8981\u9080\u8acb\u82e5\u5e72\u500b\u4eba\u4f7f\u5f97\u53d7\u6b61\u8fce\u7a0b\u5ea6\u7e3d\u548c\u6700\u5927</p> <p>1 \u2264 n \u2264 100, 1 \u2264 m \u2264 1000</p> \u601d\u8def <p>\u5c07\u53d7\u6b61\u8fce\u7a0b\u5ea6\u70ba\u8ca0\u7684\u7576\u6210\u8981\u4ed8\u51fa\u6210\u672c\u7684\u5de5\u5177\uff0c\u5c07\u53d7\u6b61\u8fce\u7a0b\u5ea6\u70ba\u6b63\u7684\u7576\u6210\u53ef\u4ee5\u8cfa\u9322\u7684\u65b9\u6848\uff0cA \u8981\u4f86\u7684\u8a71 B \u5c31\u8981\u4f86\uff0c\u5c31\u5f88\u50cf\u8981\u7528 A \u65b9\u6848\u8cfa\u9322\uff0c\u5c31\u8981\u8cb7 B \u5de5\u5177\uff0c\u56e0\u6b64\u82e5\u6709\u95dc\u4fc2 A \u4f86\u7684\u8a71 B \u4e00\u5b9a\u8981\u4f86\uff0c\u5247\u8981\u9023\u7d50\u908a (B, A)</p> <p> </p> <p>\u5f97\u5230\u7684\u6700\u5c0f\u5272\u70ba\u8981\u4f86\u7684\u8ca0\u53d7\u6b61\u7a0b\u5ea6\u7684\u4eba\u548c\u4e0d\u4f86\u7684\u6b63\u53d7\u6b61\u8fce\u7a0b\u5ea6\u7684\u4eba\uff0c\u5982\u540c\u6210\u672c\u5229\u6f64\u554f\u984c\uff0c\u7528\u6b63\u53d7\u6b61\u8fce\u7a0b\u5ea6\u7684\u4eba\u7684\u7e3d\u548c\u6263\u6389\u6700\u5c0f\u5272\u5373\u70ba\u7b54\u6848</p> <p>\u6211\u5011\u4f86\u9a57\u8b49\u70ba\u4ec0\u9ebc\u9019\u500b\u554f\u984c\u53ef\u4ee5\u8f49\u63db\u6210 min cut\uff0c\u5047\u8a2d\u5982\u679c u \u8981\u9078 v \u5c31\u8981\u9078\uff0c\u6211\u5011\u6709 edge(v, u):</p> <ul> <li> <p>\u4e0d\u9078 u \u2192 v \u9078\u4e0d\u9078\u90fd\u7121\u6240\u8b02</p> <ul> <li>min cut \u7684\u89d2\u5ea6: \u5207 u \u2192 v \u5207\u4e0d\u5207\u90fd\u7121\u6240\u8b02</li> </ul> </li> <li> <p>\u9078 u \u2192 v \u4e00\u5b9a\u8981\u9078</p> <ul> <li>min cut \u7684\u89d2\u5ea6: \u4e0d\u5207 u \u2192 v \u90fd\u4e00\u5b9a\u8981\u88ab\u5207</li> </ul> </li> </ul> <p>\u518d\u4f86\u8aaa\u660e\u70ba\u4f55 edge \u6703\u5f9e\u5de6\u5230\u53f3\u3002\u5047\u8a2d\u5982\u679c u \u8981\u9078 v \u5c31\u8981\u9078\uff0c\u6211\u5011\u6709 edge(v, u)\uff0c\u70ba\u5de6\u5230\u53f3\u7684 edge\uff0c\u4e14 weight = INF\uff0c\u4f7f\u5f97 min cut \u4e0d\u53ef\u80fd\u6703\u5207\u9019\u689d\u908a\uff0c\u6240\u4ee5\u4e0d\u6703\u767c\u751f u \u6709\u9078 v \u6c92\u6709\u9078\u7684\u60c5\u6cc1</p> \u96d9\u6a5f\u5de5\u4f5c\u5206\u914d <p>\u6709\u5169\u53f0\u4e3b\u6a5f A, B\uff0c\u6709 n \u500b\u5de5\u4f5c\u88ab\u57f7\u884c\uff0c\u7b2c i \u500b\u5de5\u4f5c\u5728 A \u4e3b\u6a5f\u57f7\u884c\u9700\u8981\u8017\u96fb a[i] \u55ae\u4f4d\uff0c\u5728 B \u4e3b\u6a5f\u57f7\u884c\u9700\u8981\u8017\u96fb b[i] \u55ae\u4f4d\uff0c\u6709 m \u7d44\u5de5\u4f5c\u4e4b\u9593\u6709\u76f8\u4f9d\u95dc\u4fc2\uff0c\u5de5\u4f5c i \u8207\u5de5\u4f5c j \u82e5\u5728\u4e0d\u540c\u4e3b\u6a5f\u57f7\u884c\uff0c\u9700\u8981\u984d\u5916 p(i, j) \u55ae\u4f4d\u96fb\u529b\uff0c\u6c7a\u5b9a\u6bcf\u500b\u5de5\u4f5c\u4f9d\u5e8f\u8981\u5728\u54ea\u500b\u4e3b\u6a5f\u57f7\u884c\uff0c\u6700\u5c0f\u5316\u8017\u96fb</p> <p>1 \u2264 n \u2264 500, 1 \u2264 m \u2264 10000</p> \u601d\u8def <p>mincut \u6703\u5c07\u9ede\u5206\u6210\u5169\u7fa4\uff0c\u4e0d\u540c\u7fa4\u7684\u9ede\u4e4b\u9593\u7684 cost \u6703\u88ab cut \u5230</p> <p> </p> <p>S-component \u7d66\u6a5f\u5668 B, T-component \u7d66\u6a5f\u5668 A</p> <p>\u6211\u5011\u4f86\u9a57\u8b49\u8f49\u63db\u6210 min cut \u7684\u6b63\u78ba\u6027\uff0c\u5047\u8a2d\u6bcf\u500b\u5de5\u4f5c\u90fd\u5df2\u7d93\u78ba\u5b9a\u597d\u662f\u6a5f\u5668 A \u9084\u662f\u6a5f\u5668 B \u4e86:</p> <ul> <li> <p>\u82e5\u70ba\u6a5f\u5668 A\uff0c\u5fc5\u9808\u7522\u751f a[i] \u7684 cost</p> <ul> <li>i \u5728 T-component \u5167\uff0c\u6240\u4ee5\u5728 edge(s, i) \u4e0a\u6709 cost = a[i] \u7684 cut</li> </ul> </li> <li> <p>\u82e5\u70ba\u6a5f\u5668 B\uff0c\u5fc5\u9808\u7522\u751f b[i] \u7684 cost</p> <ul> <li>i \u5728 S-component \u5167\uff0c\u6240\u4ee5\u5728 edge(i, t) \u4e0a\u6709 cost = b[i] \u7684 cut</li> </ul> </li> <li> <p>i \u5728 B \u57f7\u884c j \u5728 A \u57f7\u884c\uff0c\u5fc5\u9808\u7522\u751f p(i, j) \u7684 cost</p> <ul> <li>i \u5728 S-component \u5167\uff0cj \u5728 T-component \u5167\uff0c\u6240\u4ee5\u6709 cost(i, j)</li> </ul> </li> </ul> TOI 2019 pE. \u50b3\u771f\u4fee\u5fa9 (fixing) <p>\u7d66\u4e00\u500b n * m \u7684 grid\uff0c\u6bcf\u500b\u683c\u5b50\u4e0a\u90fd\u6709\u5716\u9ed1\u8272\u6216\u767d\u8272\u3002\u554f\u82b1\u8cbb\u6700\u5c11\u591a\u5c11:</p> <ul> <li> <p>\u82e5\u76f8\u9130\u7684\u683c\u5b50\u4e0d\u540c\u984f\u8272\uff0c\u6703\u7522\u751f 1 \u55ae\u4f4d\u7684\u82b1\u8cbb</p> </li> <li> <p>\u6539\u8b8a\u4e00\u500b\u683c\u5b50\u7684\u984f\u8272\uff0c\u6703\u7522\u751f 2 \u55ae\u4f4d\u7684\u82b1\u8cbb</p> </li> </ul> <p>\\(n\\le 30, m\\le 30\\)</p> \u601d\u8def <p>\u5efa\u5716\uff0c\u683c\u5b50\u7576\u9ede\uff0c\u683c\u5b50\u8207\u683c\u5b50\u9593\u5efa\u7acb\u7121\u5411\u908a\uff0ccost = 1\uff0c\u8d77\u9ede\u5230\u767d\u9ede\u5efa\u7acb\u6709\u5411\u908a\uff0ccost = 2\uff0c\u9ed1\u9ede\u5230\u7d42\u9ede\u5efa\u7acb cost = 1 \u7684\u6709\u5411\u908a</p> <p> </p> <p>\u8ddf\u4e0a\u4e00\u984c\u4e00\u6a23\uff0c\u8981\u5c07\u9ede\u5206\u5169\u7fa4\uff0c\u8b8a S-component \u8207 T-component\u3002\uff0cS-component \u4ee3\u8868\u662f\u767d\u8272\uff0cT-component \u4ee3\u8868\u662f\u9ed1\u8272</p> <p>\u6211\u5011\u4f86\u9a57\u8b49\u70ba\u8f49\u63db\u6210 min cut \u7684\u6b63\u78ba\u6027\uff0c\u5047\u8a2d\u6bcf\u500b\u683c\u5b50\u90fd\u5df2\u7d93\u78ba\u5b9a\u597d\u662f\u767d\u8272\u6216\u9ed1\u8272:</p> <ul> <li> <p>\u82e5 i \u5f9e\u767d\u8b8a\u9ed1\uff0c\u7522\u751f 2 \u7684 cost</p> <ul> <li>i \u5728 T-component \u5167\uff0c\u6240\u4ee5\u5728 edge(s, i) \u4e0a\u6709 cost = 2 \u7684 cut</li> </ul> </li> <li> <p>\u82e5 i \u5f9e\u9ed1\u8b8a\u767d\uff0c\u7522\u751f 2 \u7684 cost</p> <ul> <li>i \u5728 S-component \u5167\uff0c\u6240\u4ee5\u5728 edge(i, t) \u4e0a\u6709 cost = 2 \u7684 cut</li> </ul> </li> <li> <p>i \u662f\u767d\uff0cj \u662f\u9ed1\uff0c\u7522\u751f 1 \u7684 cost</p> <ul> <li>i \u5728 S-component \u5167\uff0cj \u5728 T-component \u5167\uff0c\u6240\u4ee5\u6709 cost = 1</li> </ul> </li> </ul>"},{"location":"graph/flow/#_3","title":"\u4e8c\u5206\u5716\u7cfb\u5217","text":""},{"location":"graph/flow/#_4","title":"\u4e8c\u5206\u5716\u6700\u5927\u5339\u914d","text":"\u554f\u984c <p>\u7d66\u4e00\u500b\u4e8c\u5206\u5716\uff0c\u9078\u4e00\u4e9b\u908a\u4f7f\u4efb\u610f\u5169\u689d\u908a\u90fd\u6c92\u6709\u516c\u5171\u7684\u9802\u9ede\uff0c\u4e14\u6578\u91cf\u8d8a\u5927\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u5339\u914d\uff0c\u4e26\u8f38\u51fa\u4e00\u7d44\u7b54\u6848</p> <p>\u5275\u5169\u500b\u8d85\u7d1a\u6e90\u9ede\u548c\u8d85\u7d1a\u532f\u9ede\uff0c\u6240\u6709\u908a\u6b0a\u90fd\u662f 1\uff0c\u6c42 max flow \u5c31\u662f\u7b54\u6848\u3002\u8f38\u51fa\u7b54\u6848\u5373\u770b\u4f4d\u65bc\u5169\u6392\u4e2d\u592e\u6d41\u6eff\u7684\u908a\uff0c\u6975\u70ba\u6240\u6c42\u3002</p> <p></p>"},{"location":"graph/flow/#dag","title":"DAG \u6700\u5c0f\u8def\u5f91\u8986\u84cb","text":"\u554f\u984c <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7684 DAG\uff0c\u6700\u5c11\u9078\u5e7e\u689d\u8def\u5f91\u624d\u53ef\u4ee5\u84cb\u4f4f\u6240\u6709\u7684\u9ede\uff0c\u4e14\u4efb\u5169\u689d\u8def\u5f91\u4e0d\u80fd\u6709\u5171\u901a\u7684\u9ede\uff0c\u4e5f\u5c31\u662f\u554f disjoint path \u6578\u91cf</p> <p> </p> \u4e0d\u91cd\u758a\u8def\u5f91\u6578  + \u8def\u5f91\u9577\u7e3d\u548c = n <p>\u5c0d\u65bc\u6bcf\u500b\u9ede\uff0c\u6709\u88ab\u8986\u84cb\u5230 iff </p> <ul> <li> <p>\u524d\u9762\u6709\u4e00\u689d\u908a\u9023\u63a5</p> </li> <li> <p>\u70ba disjoint path \u7684\u958b\u982d</p> </li> </ul> <p>\u56e0\u6b64\u6bcf\u500b\u9ede\u90fd\u8ca2\u737b\u90fd\u53ef\u4ee5\u5206\u6210\u4e0a\u8ff0\u5169\u7a2e case\uff0c\u800c\u9ede\u7684\u6578\u91cf\u70ba n\uff0c\u4e0d\u91cd\u758a\u8def\u5f91\u6578 + \u8def\u5f91\u9577\u7e3d\u548c\u81ea\u7136\u5c31\u662f n</p> <p> </p> <p>\u8def\u5f91\u4e0a\u6703\u6eff\u8db3\u6bcf\u500b\u9ede\u7684 in-degree \u548c out-degree \u81f3\u591a\u90fd\u662f 1\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5c07\u6bcf\u500b\u9ede\u62c6\u6210\u5165\u9ede\u8ddf\u51fa\u9ede\uff0c\u9032\u884c\u4e8c\u5206\u5716\u6700\u5927\u5339\u914d</p> <p></p>"},{"location":"graph/flow/#_5","title":"\u4e8c\u5206\u5716\u6700\u5c0f\u9ede\u8986\u84cb","text":"\u554f\u984c <p>\u7d66\u4e00\u500b\u4e8c\u5206\u5716\uff0c\u9078\u64c7\u6700\u5c11\u7684\u9ede\u4f86\u8986\u84cb\u6240\u6709\u7684\u908a\uff0c\u4e14\u6578\u91cf\u8d8a\u5c0f\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u9ede\u8986\u84cb\uff0c\u4e26\u8f38\u51fa\u4e00\u7d44\u7b54\u6848</p> \u3010K\u0151nig's theorem\u3011: \u5728\u4e8c\u5206\u5716\u4e2d\uff0c|\u6700\u5c0f\u9ede\u8986\u84cb| = |\u6700\u5927\u5339\u914d| <p>\u9019\u908a\u7d66\u51fa K\u0151nig's theorem \u7684\u69cb\u9020\u6cd5\u8b49\u660e\uff0c\u4e5f\u5c31\u662f\u300c\u70ba\u4f55\u4e00\u5b9a\u627e\u7684\u5230\u4e00\u7d44\u6700\u5c0f\u9ede\u8986\u84cb\uff0c\u5176\u6578\u91cf\u6070\u70ba max flow\u300d\u3002</p> <p>\u6700\u5c0f\u9ede\u8986\u84cb\u9867\u540d\u601d\u7fa9\u5c31\u662f\u8981\u627e\u5230\u4e00\u4e9b\u91cd\u8981\u7684\u9ede\uff0c\u4e26\u4e14\u9019\u4e9b\u9ede\u8981\u8d8a\u5c11\u8d8a\u597d\uff0c\u8003\u616e min cut\uff0cmin cut \u53ef\u4ee5\u627e\u5230\u91cd\u8981\u7684\u908a\uff0c\u4f7f s \u8ddf t \u7684 max flow = 0\uff0c\u800c\u4e14\u6578\u91cf\u6700\u5c0f\u5316\uff0c\u6211\u5011\u4f7f\u7528\u627e\u4e00\u7d44 min cut \u7684\u65b9\u6cd5\uff0c\u5f9e s \u958b\u59cb\u8d70\u9084\u6c92\u6d41\u6eff\u7684\u908a\uff0c\u627e\u51fa S-component, T-component</p> <p> \u7da0\u8272\u5373\u70ba S-component, \u7d2b\u8272\u5373\u70ba T-component </p> <p>\u4ee5\u4e0a\u5716\u4f86\u8aaa\uff0c\u6211\u5011\u7528 dfs \u5f9e s \u2192 4 \u2192 6 \u2192 1 \u627e\u51fa S-component\uff0c\u5176\u9918\u7684\u5247\u662f T-component</p> <p> </p> <p>\u5c07 (u \u2208 S, v \u2208 T) \u7684\u7528\u6a58\u8272\u6a19\u8a18\u51fa\u4f86\uff0c\u5373\u70ba min cut</p> <p>\u56e0\u70ba\u4f9d\u7167 min cut \u7684\u5b9a\u7fa9\uff0c\u5c07\u6a58\u8272\u9019\u4e9b\u908a\u522a\u9664\u5f8c s \u5230 t \u7684 max flow = 0\uff0c\u4ee3\u8868\u6a58\u8272\u9019\u4e9b\u908a\u76f8\u9130\u4e14\u5728\u4e2d\u9593\u7684\u9ede\u8db3\u4ee5\u652f\u914d\u4e2d\u9593\u7684\u6bcf\u4e00\u689d\u908a\uff0c\u800c\u53c8 min cut = max flow\uff0c\u6240\u4ee5\u6700\u5c0f\u9ede\u8986\u84cb\u6578\u91cf = min cut = max flow\u3002\u5177\u9ad4\u8981\u9078\u54ea\u4e9b\u4e2d\u9593\u7684\u9ede\uff0c\u5982\u4e0b:</p> <ul> <li> <p>\u5de6\u908a\u4e14\u5728 T-component \u4e2d</p> </li> <li> <p>\u53f3\u908a\u4e14\u5728 S-component \u4e2d</p> </li> </ul> <p> \u7c97\u6846\u7684\u9ede\u5c31\u662f\u6700\u5c0f\u9ede\u8986\u84cb </p> <p>\u6839\u64da K\u0151nig's theorem\uff0c\u6211\u5011\u5f97\u77e5\u6700\u5c0f\u9ede\u8986\u84cb\u6578\u91cf\u8ddf\u6700\u5927\u5339\u914d\u7684\u6578\u91cf\u662f\u4e00\u6a23\u7684\uff0c\u4e5f\u5c31\u662f max flow\u3002\u82e5\u8981\u8f38\u51fa\u7b54\u6848\uff0c\u90a3\u6211\u5011\u5c31\u9078\u4ee5\u4e0b\u9019\u4e9b\u9ede\u5373\u53ef</p> <ul> <li> <p>\u5de6\u908a\u8ddf mincut \u540c t \u5074\u7684\u7684\u9ede</p> </li> <li> <p>\u53f3\u908a\u8ddf mincut \u540c s \u5074\u7684\u7684\u9ede</p> </li> </ul> <p>\u5177\u9ad4\u70ba\u4ec0\u9ebc\u53ef\u4ee5\u9019\u6a23\u505a\u5728\u4e0a\u9762 K\u0151nig's theorem \u7684\u69cb\u9020\u6cd5\u8b49\u660e\u4e2d\u6709\u63d0\u5230</p> CSES - Coin Grid <p>\u7d66\u4e00\u500b \\(n\\times n\\) \u7684 Grid\uff0c\u6709\u4e9b\u683c\u5b50\u4e0a\u6709\u9322\u5e63\u3002\u6bcf\u6b21\u53ef\u4ee5\u79fb\u9664\u4e00\u500b row \u6216\u4e00\u500b col \u7684\u6240\u6709\u9322\u5e63\uff0c\u554f\u6700\u5c11\u8981\u5e7e\u6b21\u64cd\u4f5c</p>"},{"location":"graph/flow/#_6","title":"\u4e8c\u5206\u5716\u6700\u5927\u7368\u7acb\u96c6","text":"\u554f\u984c <p>\u7d66\u4e00\u500b\u4e8c\u5206\u5716\uff0c\u9078\u4e00\u4e9b\u9ede\u4f7f\u9078\u7684\u9ede\u5169\u5169\u4e0d\u76f8\u9130\uff0c\u4e14\u6578\u91cf\u8d8a\u5927\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u7368\u7acb\u96c6\uff0c\u4e26\u8f38\u51fa\u4e00\u7d44\u7b54\u6848</p> \u5b9a\u7406: \u5728\u4e00\u822c\u5716\u4e0a\uff0c|\u6700\u5c0f\u9ede\u8986\u84cb| + |\u6700\u5927\u7368\u96c6| = n <p>\u3010\u8b49\u660e\u3011: \u6700\u5c0f\u9ede\u8986\u84cb\u4ee5\u5916\u90fd\u662f\u6700\u5927\u7368\u7acb\u96c6</p> <p>\u6bcf\u689d\u908a\u90fd\u6703\u88ab\u6700\u5c0f\u8986\u84cb\u652f\u914d\uff08\u6bcf\u689d\u908a\u81f3\u5c11\u6703\u6709\u4e00\u500b\u9ede\u88ab\u6700\u5c0f\u9ede\u8986\u84cb\u9078\u5230\uff09\uff0c\u6240\u4ee5\u5269\u9918\u7684\u9ede\u8ddf\u9ede\u4e4b\u9593\u4e0d\u53ef\u80fd\u6703\u6709\u4e00\u689d\u908a\uff08\u6709\u7684\u8a71\u4ee3\u8868\u6c92\u88ab\u652f\u914d\uff09\uff0c\u7b26\u5408\u6700\u5927\u7368\u7acb\u96c6\u5b9a\u7fa9</p> <p>\u6240\u4ee5\u7b54\u6848\u5c31\u662f n - max flow\u3002\u8f38\u51fa\u7b54\u6848\u7684\u8a71\uff0c\u5c31\u628a\u6700\u5c0f\u9ede\u8986\u84cb\u6c92\u9078\u5230\u7684\u9ede\u90fd\u9078\u8d77\u4f86</p> <p> </p> \u85cd\u8272\u70ba\u6700\u5c0f\u9ede\u8986\u84cb, \u7d05\u8272\u70ba\u6700\u5927\u7368\u96c6"},{"location":"graph/flow/#_7","title":"\u6bd4\u8f03","text":"<ul> <li> <p>\u5728\u4e8c\u5206\u5716\u4e0b</p> <ul> <li>\u6700\u5927\u5339\u914d (MM) = \u6700\u5c0f\u9ede\u8986\u84cb (MVC)</li> <li>\u6700\u5927\u7368\u7acb\u96c6 (MIS) + \u6700\u5c0f\u9ede\u8986\u84cb (MVC) = n</li> <li>\u90fd\u53ef\u4ee5\u7528 max flow \u5728\u591a\u9805\u5f0f\u6642\u9593\u89e3\u51fa</li> </ul> </li> <li> <p>\u5728\u4e00\u822c\u5716\u4e0b</p> <ul> <li>\u6700\u5927\u7368\u7acb\u96c6 (MIS) + \u6700\u5c0f\u9ede\u8986\u84cb (MVC) = n</li> <li>\u6700\u5927\u7368\u7acb\u96c6,\u6700\u5c0f\u9ede\u8986\u84cb : NP-hard \u554f\u984c (\u76ee\u524d\u5df2\u77e5\u7684\u6f14\u7b97\u6cd5\u53ea\u80fd\u6307\u6578\u6642\u9593\u89e3\u51fa)</li> <li>\u6700\u5927\u5339\u914d : P \u554f\u984c</li> </ul> </li> </ul>"},{"location":"graph/flow/#min-cost-max-flow","title":"min cost max flow","text":"\u984c\u76ee <p>\u7d66\u4e00\u500b\u6709\u5411\u5716\uff0c\u6bcf\u689d\u908a (u, v) \u90fd\u6709\u4e00\u500b\u908a\u6b0a c(u, v) \u4ee3\u8868\u5bb9\u91cf\u4e0a\u9650\uff0c\u6709 cost(u, v)\u4ee3\u8868\u5728\u9019\u689d\u908a\u6d41\u904e\u4e00\u55ae\u4f4d\u7684\u6d41\u6240\u9700\u8981\u7684\u6210\u672c\uff0c\u627e\u4e00\u500b flow \u4f7f \\(\\sum f(u,v)\\times cost(u,v)\\) \u6700\u5c0f</p> <p>\u6982\u5ff5\u548c Ford-Fulkson \u4e00\u6a23\u627e\u589e\u5ee3\u8def\u5f91\uff0c\u4f46\u662f\u6bcf\u6b21\u8981\u627e\u6700\u4fbf\u5b9c\u7684\u3002\u6bcf\u689d\u908a\u6211\u5011\u6703\u591a\u7d00\u9304\u4e00\u500b\u6210\u672c  cost(u, v)\uff0c\u5c0d\u65bc\u53cd\u5411\u908a\u7684\u6210\u672c\u70ba\u8ca0\u7684\u6b63\u5411\u908a\u6210\u672c\uff0c\u9000\u6d41\u7684\u6642\u5019\u7b49\u50f9\u65bc\u62b5\u92b7\u6210\u672c\u3002\u56e0\u70ba\u5716\u4e0a\u6709\u8ca0\u908a\uff0c\u6240\u4ee5\u5fc5\u9808\u7528 Bellman-Ford \u6216\u662f SPFA \u4f86\u627e\u6700\u77ed\u8def\u5f91</p> <p>\u8907\u96dc\u5ea6\u8ddf Fulk-Fulkerson \u5c31\u5dee\u5728\u4e00\u500b\u662f dfs\uff0c\u4e00\u500b\u662f Bellman-Ford\uff0c\u800c Bellman-Ford \u662f O(VE)\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u5c31\u662f O(F * VE)</p> code <pre><code>const int INF = (1LL &lt;&lt; 60);\nstruct dinic {\n    int n, m, s, t;\n    struct Edge {\n        int u, v, w, cap;\n    };\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;Edge&gt; edges;\n    void init() {\n        n = m = 0;\n        G = vector&lt;vector&lt;int&gt;&gt;();\n        edges = vector&lt;Edge&gt;();\n    }\n    void add_node() {\n        n++;\n        G.push_back({});\n    }\n    void add_edge(int u, int v, int cap, int w) {\n        edges.push_back({u, v, w, cap});\n        G[u].push_back(m++);\n        edges.push_back({v, u, -w, 0LL});\n        G[v].push_back(m++);\n    }\n    pair&lt;int, int&gt; flow(int _s, int _t) {\n        s = _s, t = _t;\n        int cost = 0, fl = 0;\n        while (true) {\n            vector&lt;bool&gt; inq(n, 0);\n            vector&lt;int&gt; dis(n, INF);\n            vector&lt;int&gt; pre_node(n, -1);\n            vector&lt;int&gt; pre_eid(n, -1);\n            queue&lt;int&gt; q;\n            q.push(s);\n            dis[s] = 0;\n            while (q.size()) {\n                int u = q.front();\n                q.pop();\n                if (inq[u]) {\n                    inq[u] = false;\n                }\n                for (auto id : G[u]) {\n                    Edge &amp;e = edges[id];\n                    if (e.cap &gt; 0 &amp;&amp; dis[u] + e.w &lt; dis[e.v]) {\n                        dis[e.v] = dis[u] + e.w;\n                        pre_node[e.v] = u;\n                        pre_eid[e.v] = id;\n                        if (!inq[e.v]) {\n                            inq[e.v] = true;\n                            q.push(e.v);\n                        }\n                    }\n                }\n            }\n            if (dis[t] == INF) {\n                break;\n            }\n            int tf = INF;\n            for (int u, v = t, eid; v != s; v = u) {\n                u = pre_node[v];\n                eid = pre_eid[v];\n                tf = min(tf, edges[eid].cap);\n            }\n            for (int u, v = t, eid; v != s; v = u) {\n                u = pre_node[v];\n                eid = pre_eid[v];\n                edges[eid].cap -= tf;\n                edges[eid ^ 1].cap += tf;\n            }\n            cost += tf * dis[t];\n            fl += tf;\n        }\n        return {fl, cost};\n    }\n} flow;\n</code></pre> \u6a21\u677f\u6e2c\u8a66 Kattis - Minimum Cost Maximum Flow <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u6bcf\u689d\u908a\u7d66\u5b9a\u5bb9\u91cf c(u, v) \u8207 w(u, v)\uff0c\u554f \\(s\\) \u5230 \\(t\\) \u7684\u6700\u5927\u6d41\uff0c\u548c min cost</p> <p>\\(2\\le n\\le 250, 0\\le m\\le 10^5, 1\\le c(u, v) \\le 10^8\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int INF = (1LL &lt;&lt; 60);\nconst int M = 1e9 + 7;\n\nstruct dinic {\n    int n, m, s, t;\n    struct Edge {\n        int u, v, w, cap;\n    };\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;Edge&gt; edges;\n    void init() {\n        n = m = 0;\n        G = vector&lt;vector&lt;int&gt;&gt;();\n        edges = vector&lt;Edge&gt;();\n    }\n    void add_node() {\n        n++;\n        G.push_back({});\n    }\n    void add_edge(int u, int v, int cap, int w) {\n        edges.push_back({u, v, w, cap});\n        G[u].push_back(m++);\n        edges.push_back({v, u, -w, 0LL});\n        G[v].push_back(m++);\n    }\n    pair&lt;int, int&gt; flow(int _s, int _t) {\n        s = _s, t = _t;\n        int cost = 0, fl = 0;\n        while (true) {\n            vector&lt;bool&gt; inq(n, 0);\n            vector&lt;int&gt; dis(n, INF);\n            vector&lt;int&gt; pre_node(n, -1);\n            vector&lt;int&gt; pre_eid(n, -1);\n            queue&lt;int&gt; q;\n            q.push(s);\n            dis[s] = 0;\n            while (q.size()) {\n                int u = q.front();\n                q.pop();\n                if (inq[u]) {\n                    inq[u] = false;\n                }\n                for (auto id : G[u]) {\n                    Edge &amp;e = edges[id];\n                    if (e.cap &gt; 0 &amp;&amp; dis[u] + e.w &lt; dis[e.v]) {\n                        dis[e.v] = dis[u] + e.w;\n                        pre_node[e.v] = u;\n                        pre_eid[e.v] = id;\n                        if (!inq[e.v]) {\n                            inq[e.v] = true;\n                            q.push(e.v);\n                        }\n                    }\n                }\n            }\n            if (dis[t] == INF) {\n                break;\n            }\n            int tf = INF;\n            for (int u, v = t, eid; v != s; v = u) {\n                u = pre_node[v];\n                eid = pre_eid[v];\n                tf = min(tf, edges[eid].cap);\n            }\n            for (int u, v = t, eid; v != s; v = u) {\n                u = pre_node[v];\n                eid = pre_eid[v];\n                edges[eid].cap -= tf;\n                edges[eid ^ 1].cap += tf;\n            }\n            cost += tf * dis[t];\n            fl += tf;\n        }\n        return {fl, cost};\n    }\n} flow;\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    int n, m, s, t;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;\n    flow.init();\n    for (int i = 1; i &lt;= n; i++) flow.add_node();\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, cap, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; cap &gt;&gt; w;\n        flow.add_edge(u, v, cap, w);\n    }\n    auto [f, cost] = flow.flow(s, t);\n    cout &lt;&lt; f &lt;&lt; \" \" &lt;&lt; cost &lt;&lt; \"\\n\";\n}\n</code></pre> CSES - Distinct Routes II <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u6709\u5411\u5716\uff0c\u6709\u6e90\u9ede 1 \u8d70\u5230\u532f\u9ede n\uff0c\u6bcf\u689d\u908a (u, v) \u6700\u591a\u53ea\u80fd\u8d70 c(u, v) \u6b21\uff0c\u4e14\u7d93\u904e\u7684 cost \u90fd\u662f 1\uff0c\u6700\u5c11\u9700\u8981\u82b1\u591a\u5c11 cost \u624d\u80fd\u8d70\u51fa k \u689d disjoint path</p> <p>\\(n\\le 10^5, m\\le 10^5, 1\\le k\\le n - 1\\)</p> \u601d\u8def <p>\u82e5\u908a\u7684\u8cbb\u7528\u90fd\u662f 0\uff0c\u53ea\u9700\u8981\u5224\u65b7 s-t maximum flow \u662f\u5426\u5927\u65bc\u7b49\u65bc k</p> <p>\u908a\u6709\u8cbb\u7528\uff0c\u6b0a\u91cd\u90fd\u662f 1 or -1\uff0c\u53ef\u4ee5\u6bcf\u6b21\u7528 Bellman-Ford O(nm) \u627e\u5230\u8d77\u9ede\u7d42\u9ede\u6700\u4fbf\u5b9c\u589e\u5ee3\u8def\u5f91\uff0c\u5171\u6703\u8dd1 k \u6b21\uff0c\u6240\u4ee5\u662f O(n * m * k)</p> LOJ #6011. \u300c\u7f51\u7edc\u6d41 24 \u9898\u300d\u8fd0\u8f93\u95ee\u9898 <p>\u6709 \\(m\\) \u500b\u5009\u5eab\u548c \\(n\\) \u500b\u96f6\u552e\u5e97\uff0c\u7b2c \\(i\\) \u500b\u5009\u5eab\u6709 \\(a_i\\) \u7684\u8ca8\u7269\uff0c\u7b2c \\(j\\) \u500b\u96f6\u552e\u5e97\u9700\u8981 \\(b_j\\) \u7684\u8ca8\u7269\uff0c\u4f9b\u9700\u5e73\u8861\u3002\u5f9e\u7b2c \\(i\\) \u500b\u5009\u5eab\u904b\u9001\u4e00\u55ae\u4f4d\u8ca8\u7269\u5230\u7b2c \\(j\\) \u500b\u96f6\u552e\u5e97\u9700\u8981 \\(c_{i,j}\\) \u7684\u8cbb\u7528\uff0c\u6c42\u6eff\u8db3\u4f9b\u9700\u7684\u6700\u5c11\u8cbb\u7528\u3002</p> <p>\\(n, m\\le 100\\)</p> \u601d\u8def <p>\u4f7f\u7528 MCMF</p> <ul> <li> <p>\u5c07 s \u5411 m \u500b\u5009\u5eab\u9023\u908a\uff0ccapacity = a[i], cost = 0</p> </li> <li> <p>\u5c07\u7b2c i \u500b\u5009\u5eab\u8207\u7b2c j \u500b\u96f6\u552e\u5e97\u9023\u908a\uff0ccapacity = INF, cost = c[i][j]</p> </li> <li> <p>n \u500b\u96f6\u552e\u5e97\u5411 t \u9023\u908a\uff0ccapacity = c[i], cost = 0</p> </li> </ul> \u4e8c\u5206\u5716\u5e36\u6b0a\u6700\u5927\u5339\u914d CSES - Task Assignment <p>\u6709 n \u500b\u4eba\u548c n \u500b\u5de5\u4f5c\uff0c\u7de8\u865f i \u7684\u4eba\u505a\u5de5\u4f5c j \u8981 cost(i, j) \u7684\u8cbb\u7528\uff0c\u6bcf\u500b\u5de5\u4f5c\u5206\u914d\u7d66\u4e00\u500b\u4eba\u505a\uff0c\u6bcf\u500b\u4eba\u53ea\u80fd\u505a\u4e00\u500b\u5de5\u4f5c\uff0c\u6700\u5c0f\u5316\u7e3d\u5171\u7684\u8cbb\u7528</p> <p>\\(n\\le 200, 1\\le c_{i, j}\\le 1000\\)</p> \u601d\u8def <p>\u7528 MCMF\uff0c\u5c07\u4eba\u8207\u5de5\u4f5c\u500b\u64fa\u5169\u908a\uff0c\u4e2d\u9593\u7528 capactity = 1, cost = cost(i, j) \u7684\u908a\u9023\u63a5\uff0cs \u9023\u63a5\u6240\u6709\u4eba\uff0ccapacity = 1, cost = 0\uff0c\u6240\u6709\u5de5\u4f5c\u9023\u63a5 t\uff0ccapacity = 1, cost = 0</p> <p>\u8907\u96dc\u5ea6\u70ba O(n) \u6b21 SPFA\uff0cSPFA \u8907\u96dc\u5ea6 O(V * E) = O(n * n^2)\uff0c\u6240\u4ee5\u662f O(n^4)</p>"},{"location":"graph/flow/#flow-graph-modeling","title":"\u5efa\u6a21\u6280\u5de7(Flow Graph Modeling)","text":""},{"location":"graph/flow/#_8","title":"\u591a\u6e90\u9ede\u591a\u532f\u9ede","text":"<p>\u5efa\u7acb\u4e00\u500b\u8d85\u7d1a\u6e90\u9ede\u548c\u8d85\u7d1a\u532f\u9ede\uff0c\u548c\u539f\u672c\u7684\u6e90\u9ede\u8207\u532f\u9ede\u9023\u63a5\uff0ccapacity \u8a2d\u70ba\u7121\u9650\u5927</p> <p></p>"},{"location":"graph/flow/#_9","title":"\u9ede\u6709\u6d41\u91cf\u9650\u5236","text":"<p>\u5c07\u6bcf\u500b\u9ede\u62c6\u6210\u5169\u500b\u9ede\uff0c\u4e2d\u9593\u7528\u5c0d\u61c9\u7684\u6d41\u91cf\u9650\u5236\u7576\u908a\u7684 capacity</p> <p></p>"},{"location":"graph/flow/#_10","title":"\u984c\u76ee","text":"CSES - Distinct Routes <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7684\u5716\uff0c\u6700\u591a\u627e\u5230\u5e7e\u689d disjoint path </p> <p>\\(2\\le n\\le 500, 1\\le m\\le 1000\\)</p> \u601d\u8def <p>edges capacity \u8a2d\u70ba 1\uff0c\u8dd1 max flow</p> <ul> <li>LOJ \u7db2\u8def\u6d41 24 \u984c</li> </ul>"},{"location":"graph/flow/#_11","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://www.cnblogs.com/dijkstra2003/p/7598931.html</p> </li> <li> <p>https://www.mropengate.com/2015/01/algorithm-ch4-network-flow.html?m=1</p> </li> <li> <p>http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&amp;file=f3cec71910d4a0106624e839f2891b17198ef58be</p> </li> <li> <p>https://github.com/NCTU-PCCA/NCTU_Fox/tree/master/codebook/Graph/Flow</p> </li> <li> <p>https://web.ntnu.edu.tw/~algo/Matching.html</p> </li> <li> <p>https://nckuacm.github.io/2020/slides/week13_1.pdf</p> </li> <li> <p>https://chmnchiang.github.io/ioi-camp-2016-flow-slides/#/</p> </li> </ul>"},{"location":"graph/functional_graph/","title":"\u6c34\u6bcd\u5716","text":"<p>\u53c8\u7a31\u9802\u74b0\u6a39\uff0c\u6c34\u6bcd\u5716\u3002\u4e2d\u570b\u7a31\u57fa\u74b0\u6a39\u3002\u82f1\u6587\u53eb\u505a functional graph\u3002</p>"},{"location":"graph/functional_graph/#_1","title":"\u6027\u8cea","text":"<p>\u5167\u5411\u57fa\u74b0\u6a39\u7b26\u5408\u4ee5\u4e0b\u6027\u8cea</p> <ol> <li>\u6bcf\u500b\u9ede\u7684 out degree \u90fd\u662f 1</li> <li>\u6070\u6709 \\(n\\) \u689d\u908a</li> </ol> <p></p>"},{"location":"graph/functional_graph/#_2","title":"\u627e\u74b0\u5beb\u6cd5","text":"\u70ba\u4ec0\u9ebc\u4e0d\u80fd\u7528\u4e00\u822c\u7684 dfs ? <p>\u4e00\u822c\u7684 dfs \u5728\u627e\u9084\u5f97\u5f8c\u53ef\u80fd\u767c\u751f\u4ee5\u4e0b\u554f\u984c</p> <p> </p> <p>\u4f8b\u5982\u8981\u8f38\u51fa\u6bcf\u500b\u57fa\u74b0\u6a39\u4e0a\u7684 cycle size\uff0c\u90a3\u4f60\u6709\u53ef\u80fd\u7b2c\u4e8c\u6b21\u5728\u8d70\u7684\u6642\u5019\uff0c\u78b0\u5230\u5df2 visited \u7684\u9ede\u5c31\u4ee5\u70ba\u627e\u5230\u74b0\u4e86\uff0c\u5be6\u5247\u4e0d\u662f</p> <p>\u627e\u5230\u74b0\u5c31\u662f\u5728\u76ee\u524d\u9019\u6b21\u7684 dfs \u4e2d\uff0c\u6211\u78b0\u5230\u4e86\u6211\u4e4b\u524d\uff08\u9084\u662f\u9019\u4e00\u8f2a\uff09\u8d70\u904e\u7684\u9ede\u3002</p>"},{"location":"graph/functional_graph/#_3","title":"\u6709\u5411\u5716","text":"code <pre><code>void dfs(int u) {\n    instk[u] = vis[u] = true;\n    for (auto v : G[u]) {\n        if (vis[v] == false) {\n            dfs(v);\n        } else if (instk[v]) {\n            // cycle: v \u2192 \u2026 \u2192 u\n        }\n    }\n    instk[u] = false;\n}\n</code></pre>"},{"location":"graph/functional_graph/#_4","title":"\u7121\u5411\u5716","text":"\u7121\u91cd\u908a <pre><code>void dfs(int u, int par) {\n    instk[u] = vis[u] = true;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (vis[v] == false) {\n            dfs(v, u);\n        } else if (instk[v]) {\n            // cycle: v \u2192 \u2026 \u2192 u\n        }\n    }\n    instk[u] = false;\n}\n</code></pre> \u6709\u91cd\u908a <pre><code>void dfs(int u, int pre_eid) {\n    vis[u] = instk[u] = true;\n    for (auto eid : G[u]) {\n        if ((eid ^ 1) == pre_eid) continue;\n        auto [u, v] = edges[eid];\n\n        if (!vis[v]) {\n            from[v] = eid;\n            dfs(v, eid);\n        } else if (instk[v]) {\n            // cycle: v \u2192 \u2026 \u2192 u\n        }\n    }\n    instk[u] = false;\n}\n</code></pre> CSES - Round Trip II <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u8f38\u51fa\u74b0\u4e0a\u7684\u9ede</p> <p>\\(n\\le 10^5,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684 dfs \u65b9\u5f0f\u4f86\u505a\u5373\u53ef</p> <p>\u53e6\u6cd5 :</p> <p>\u6211\u5011\u60f3\u6cd5\u662f\u5148\u628a\u9019\u5f35\u5716\u8b8a\u6210\u4e00\u5f35\u57fa\u74b0\u6a39\u3002\u627e cycle \u53ea\u9700\u8981\u7528 topo sort \u628a  in degree = 0 \u7684\u9ede\u522a\u6389\u8b93\u5716\u4e0a\u53ea\u5269\u74b0\u5373\u53ef</p> <p>\u6240\u6709 outdegree \u662f 0 \u7684\u9ede\u4e00\u76f4\u79fb\u9664\uff0c\u505a\u5b8c\u4e4b\u5f8c\uff0c\u6240\u6709\u4eba\u7684 outdegree \u90fd\u81f3\u5c11 1\u3002\u5c0d\u65bc\u6bcf\u500b\u5269\u4e0b\u7684\u9ede\uff0c\u628a\u6307\u51fa\u53bb\u7684\u908a \uff08out-going edge\uff09 \u53ea\u4fdd\u7559\u4e00\u689d\uff0c\u5c31\u6703\u8b8a\u6210\u57fa\u74b0\u6a39\u4e86</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 1e5 + 5;\n\nint n, m;\nvector&lt;int&gt; G[maxn];\nint from[maxn];\nbool vis[maxn], instk[maxn];\nstack&lt;int&gt; cycle;\n\nvoid get_cycle(int s, int t) {\n    int x = t;\n    cycle.push(s);\n    while (x != s) {\n        cycle.push(x);\n        x = from[x];\n    }\n    cycle.push(s);\n}\n\nbool dfs(int u) {\n    instk[u] = vis[u] = true;\n    for (auto v : G[u]) {\n        if (vis[v] == false) {\n            from[v] = u;\n            if (dfs(v)) return true;\n        } else if (instk[v]) {\n            get_cycle(v, u);\n            return true;\n        }\n    }\n    instk[u] = false;\n    return false;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        if (vis[i] == false) {\n            if (dfs(i)) {\n                cout &lt;&lt; cycle.size() &lt;&lt; '\\n';\n                while (cycle.size()) {\n                    cout &lt;&lt; cycle.top() &lt;&lt; ' ';\n                    cycle.pop();\n                }\n                exit(0);\n            }\n        }\n    }\n    cout &lt;&lt; \"IMPOSSIBLE\\n\";\n} \n</code></pre> \u57fa\u74b0\u6a39\u74b0\u5927\u5c0f CF 1867 D. Cyclic Operations <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a\\)\uff0c\u4e00\u958b\u59cb\u88e1\u9762\u90fd\u662f \\(0\\)\u3002\u7d66 \\(k\\)\uff0c\u7d66\u9663\u5217 \\(b\\)\uff0c\u4f60\u53ef\u5c0d \\(a\\) \u505a\u597d\u5e7e\u6b21\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u554f\u4f60\u662f\u5426\u80fd\u5c07 \\(a\\) \u8b8a\u6210 \\(b\\)\u3002</p> <ul> <li>\\(\\text{change}(l):\\) \u5c07 \\(a_{l_i}\\) \u8b8a\u6210 \\(l_{(i \\% k) + 1}\\)</li> </ul> <p>\\(1\\le k\\le n\\le 10^5, 1\\le b_i\\le n, 1\\le l_i\\le n, l\\) \u7684\u9577\u5ea6\u70ba \\(k\\) \u4e14\u88e1\u9762\u7684\u5143\u7d20 distinct</p> \u601d\u8def <p>i \u2192 b[i] \u5efa\u5716\uff0c\u770b\u6bcf\u500b\u9023\u901a\u584a\uff08\u57fa\u74b0\u6a39\uff09\u7684\u74b0\u5927\u5c0f\u662f\u5426\u6070\u70ba k </p> <p>k = 1 \u7279\u5224</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, k, fg;\nvector&lt;int&gt; G[maxn];\nint a[maxn], dis[maxn], instk[maxn];\n\nvoid dfs(int u) {\n    instk[u] = true;\n    for (auto v : G[u]) {\n        if (dis[v] == 0) {\n            dis[v] = dis[u] + 1;\n            dfs(v);\n        } else if (instk[v]) {\n            if (dis[u] - dis[v] + 1 != k) {\n                fg = false;\n            }\n        }\n    }\n    instk[u] = false;\n}\n\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; k;\n    fg = true;\n    for (int i = 1; i &lt;= n; i++) {\n        dis[i] = 0;\n        instk[i] = 0;\n        G[i].clear();\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        G[i].pb(a[i]);\n    }\n    if (k == 1) {\n        for (int i = 1; i &lt;= n; i++) {\n            if (a[i] != i) {\n                cout &lt;&lt; \"NO\\n\";\n                return;\n            }\n        }\n        cout &lt;&lt; \"YES\\n\";\n        return;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        if (dis[i] == 0) {\n            dis[i] = 1;\n            dfs(i);\n            if (fg == false) {\n                cout &lt;&lt; \"NO\\n\";\n                return;\n            }\n        }\n    }\n    cout &lt;&lt; \"YES\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n} \n</code></pre>"},{"location":"graph/functional_graph/#_5","title":"\u4f8b\u984c","text":""},{"location":"graph/functional_graph/#dp","title":"\u57fa\u74b0\u6a39 dp","text":"\u6c34\u6bcd\u5716\u6700\u9577\u8def Zerojudge k186. pC. \u95dc\u5361\u5730\u5716 (game) <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u554f\u6700\u9577\u6b0a\u91cd\u548c\u7684 path \u6b0a\u91cd\u548c\u662f\u591a\u5c11</p> <p>\\(n\\le 10^5,m=n-1\\) \u6216 \\(n\\)</p> \u601d\u8def <p>\u5c07\u74b0\u4e0a\u7684\u9ede\u7de8\u865f\uff0c\u4ee4 sum[i] \u70ba\u74b0\u4e0a\u524d i \u500b\u9ede\u7684 a[i] \u7684\u7e3d\u548c\uff0cd[i] \u70ba i \u5f80\u4e0b \u9023\u6700\u9577\u7684 path\uff0c\u82e5\u5f9e\u7b2c i \u548c\u7b2c j \u500b\u9ede\u9023\u4e0b\u53bb\uff0c\u90a3\u7b54\u6848\u5c31\u662f </p> <p>sum[i] - sum[j - 1] + d[cycle[i]] + d[cycle[j]] - a[cycle[i]] - a[cycle[j]]</p> <p>\u6240\u4ee5\u6211\u5011\u8981\u7528\u55ae\u8abf\u5c0d\u5217\u7dad\u8b77 - sum[j - 1] + d[cycle[j]] - a[cycle[j]] \u8d8a\u5927\u8d8a\u597d\u7684</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 2e6 + 10;\nconst int M = 1e9 + 7;\n\nint n, m, ans, sz;\nint instk[maxn], dfn[maxn], vis[maxn], q[maxn], from[maxn], d[maxn];\nint cycle[maxn],sum[maxn], a[maxn];\nvector&lt;int&gt; G[maxn];\n\nvoid get_cycle(int x, int y) {\n    while (y != x) {\n        cycle[++sz] = y;\n        sum[sz] = a[y];\n        y = from[y];\n    }\n    cycle[++sz] = x;\n    sum[sz] = a[x];\n    for (int i = 1; i &lt;= sz; i++) {\n        vis[cycle[i]] = true;\n        cycle[sz + i] = cycle[i];\n        sum[sz + i] = sum[i];\n    }\n    for (int i = 1; i &lt;= 2 * sz; i++) sum[i] += sum[i - 1];\n}\n\nvoid find_cycle(int u, int par) {\n    dfn[u] = instk[u] = true;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (!dfn[v]) {\n            from[v] = u;\n            find_cycle(v, u);\n        } else if (instk[v]) {\n            get_cycle(v, u);\n        }\n    }\n    instk[u] = false;\n}\n\nvoid cal_tree(int u) {\n    vis[u] = true;\n    d[u] = a[u];\n    for (auto v : G[u]) {\n        if (vis[v]) continue;\n\n        cal_tree(v);\n        ans = max({ans, d[u] + d[v], d[v] + a[u], a[u]});\n        d[u] = max(d[u], d[v] + a[u]);\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int u, v;\n    for(int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n}\n\nvoid work() {\n    ans = -INF;\n    if (m == n) {\n        find_cycle(1, -1);\n        for (int i = 1; i &lt;= sz; i++) cal_tree(cycle[i]);\n        int l = 1, r = 0;\n        for (int i = 1; i &lt;= 2 * sz; i++) {\n            while (l &lt;= r &amp;&amp; q[l] &lt;= i - sz) l++;\n            if (l &lt;= r) ans = max(ans, d[cycle[i]] + d[cycle[q[l]]] + sum[i] - sum[q[l] - 1] - a[cycle[i]] - a[cycle[q[l]]]);\n            while (l &lt;= r &amp;&amp; d[cycle[q[r]]] - sum[q[r] - 1] - a[cycle[q[r]]] &lt;= d[cycle[i]] - sum[i - 1] - a[cycle[i] - 1]) r--;\n            q[++r] = i;\n        }\n    } else {\n        cal_tree(1);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    init();\n    work();\n} \n</code></pre> \u6c34\u6bcd\u5716\u6700\u9577\u8def \u6d1b\u8c37 P4381 [IOI2008] Island <p>\u7d66 \\(n\\) \u500b\u9ede\uff0c\u5f62\u6210\u6c34\u6bcd\u5716\u68ee\u6797\uff0c\u908a\u6709\u908a\u6b0a\u3002\u554f\u6bcf\u500b\u6c34\u6bcd\u5716\u6700\u9577\u8def\u7684\u7e3d\u548c\uff08\u53ef\u4ee5\u4e0d\u9078\uff09</p> <p>\\(n\\le 10^6,-10^9 \\le w_i \\le 10^9\\)</p> \u601d\u8def <p>\u56e0\u70ba\u6709\u91cd\u908a\uff0c\u6240\u4ee5\u8981\u6539\u4e00\u4e0b\u5b58 Graph \u7684\u65b9\u5f0f\uff0c\u74b0\u4e0a\u7b2c i, j \u500b\u9ede\u9023\u63a5\u4e26\u9023\u4e0b\u53bb\u7684\u6700\u9577\u8def\u662f sum[i] - sum[j] + d[cycle[i]] + d[cycle[j]]\uff0c\u6240\u4ee5\u6211\u5011\u7528\u55ae\u8abf\u968a\u5217\u70ba\u6236 -sum[j] + d[cycle[j]] \u8d8a\u5927\u8d8a\u597d\u7684</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 2e6 + 10;\nconst int M = 1e9 + 7;\n\nstruct Edge {\n    int u, to, w;\n};\n\nint n, m, ans, sz;\nint instk[maxn], dfn[maxn], vis[maxn], q[maxn], from[maxn], d[maxn];\nEdge edges[maxn];\nint cycle[maxn],sum[maxn];\nvector&lt;int&gt; G[maxn];\n\nvoid get_cycle(int x, int y, int weight) {\n    sum[1] = weight;\n    while (y != x) {\n        cycle[++sz] = y;\n        sum[sz + 1] = edges[from[y]].w;\n        y = edges[from[y] ^ 1].to;\n    }\n    cycle[++sz] = x;\n    for (int i = 1; i &lt;= sz; i++) {\n        vis[cycle[i]] = true;\n        cycle[sz + i] = cycle[i];\n        sum[sz + i] = sum[i];\n    }\n    for (int i = 1; i &lt;= 2 * sz; i++) sum[i] += sum[i - 1];\n}\n\nvoid find_cycle(int u, int pre_eid) {\n    dfn[u] = instk[u] = true;\n    for (auto eid : G[u]) {\n        if ((eid ^ 1) == pre_eid) continue;\n        auto [u, v, w] = edges[eid];\n        from[v] = eid;\n        if (!dfn[v]) {\n            find_cycle(v, eid);\n        } else if (instk[v]) {\n            get_cycle(v, u, w);\n        }\n    }\n    instk[u] = false;\n}\n\nvoid cal_tree(int u) {\n    vis[u] = true;\n    for (auto eid : G[u]) {\n        auto [u, v, w] = edges[eid];\n        if (vis[v]) continue;\n\n        cal_tree(v);\n        ans = max(ans, d[u] + d[v] + w);\n        d[u] = max(d[u], d[v] + w);\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n    int u, v, w;\n    m = 1;\n    for(int i = 1; i &lt;= n; i++) {\n        u = i;\n        cin &gt;&gt; v &gt;&gt; w;\n        edges[++m] = {u, v, w};\n        G[u].pb(m);\n        edges[++m] = {v, u, w};\n        G[v].pb(m);\n    }\n}\n\nvoid work() {\n    int res = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (dfn[i]) continue;\n        sz = ans = 0;\n\n        find_cycle(i, -1);\n        for (int i = 1; i &lt;= sz; i++) cal_tree(cycle[i]);\n        int l = 1, r = 0;\n        for (int i = 1; i &lt;= 2 * sz; i++) {\n            while (l &lt;= r &amp;&amp; q[l] &lt;= i - sz) l++;\n            if (l &lt;= r) ans = max(ans, d[cycle[i]] + d[cycle[q[l]]] + sum[i] - sum[q[l]]);\n            while (l &lt;= r &amp;&amp; d[cycle[q[r]]] - d[cycle[i]] &lt;= sum[q[r]] - sum[i]) r--;\n            q[++r] = i;\n        }\n        res += ans;\n    }\n    cout &lt;&lt; res &lt;&lt; '\\n';\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    init();\n    work();\n} \n</code></pre> \u6c34\u6bcd\u5716\u6700\u5927\u7368\u7acb\u96c6 \u6d1b\u8c37P2607 [ZJOI2008] \u9a91\u58eb <p>\u7d66 \\(n\\) \u500b\u9ede\uff0c\u6703\u69cb\u6210\u57fa\u74b0\u6a39\u68ee\u6797\uff0c\u554f\u6700\u5927\u7368\u7acb\u96c6\u6b0a\u503c\u7e3d\u548c</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u8003\u616e\u74b0\u4e0a\u7684\u4efb\u610f\u4e00\u689d\u908a \\((s,t)\\)\uff0c\u9019\u689d\u908a\u4e0a\u7684\u5169\u9ede\u53ea\u6703\u662f</p> <ul> <li> <p>\u4e0d\u9078, \u9078</p> </li> <li> <p>\u9078, \u4e0d\u9078</p> </li> <li> <p>\u4e0d\u9078, \u4e0d\u9078</p> </li> </ul> <p>\u6211\u5011\u53ef\u4ee5\u5c07\u9019\u689d\u908a\u62d4\u6389\uff0c\u5206\u5169\u7a2e\u6210 \\(s\\) \u4e0d\u9078\u8207 \\(t\\) \u4e0d\u9078\u7684\u60c5\u6cc1\u505a\u6a39\u4e0a\u6700\u5927\u7368\u7acb\u96c6</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\n\nstruct Edge {\n    int u, to;\n};\n\nint n, m, cycle_eid;\nint instk[maxn], dfn[maxn], a[maxn];\nlong long dp[maxn][2];\nvector&lt;int&gt; G[maxn];\nEdge edges[2 * maxn];\n\nvoid find_cycle(int u, int pre_eid) {\n    dfn[u] = instk[u] = 1;\n    for (auto eid : G[u]) {\n        auto [u, v] = edges[eid];\n        if ((eid ^ 1) == pre_eid) continue;\n\n        if (!dfn[v]) {\n            find_cycle(v, eid);\n        } else if (instk[v]) {\n            cycle_eid = eid;\n        }\n    }\n} \n\nvoid tree_dp(int u, int pre_eid) {\n    dp[u][1] = a[u], dp[u][0] = 0;\n    for (auto eid : G[u]) {\n        auto [u, v] = edges[eid];\n        if ((eid ^ 1) == pre_eid) continue;\n        if (eid == cycle_eid || (eid ^ 1) == cycle_eid) continue;\n\n        tree_dp(v, eid);\n        dp[u][0] += (long long)max(dp[v][0], dp[v][1]);\n        dp[u][1] += (long long)dp[v][0];\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n    m = 1;\n    int x;\n    for(int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i] &gt;&gt; x;\n        edges[++m] = {i, x};\n        G[i].pb(m);\n        edges[++m] = {x, i};\n        G[x].pb(m);\n    }\n}\n\nvoid solve() {\n    long long res = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (dfn[i]) continue;\n        long long ans = 0;\n        find_cycle(i, 0);\n\n        int s = edges[cycle_eid].u, t = edges[cycle_eid].to;\n        tree_dp(s, 0);\n        ans = dp[s][0];\n        tree_dp(t, 0); // \u8981\u518d\u505a\u4e00\u6b21\u4e0d\u7136 dp[t][0] \u662f\u4ee5 s \u70ba\u6839 t \u7684 subtree \u7684\u7b54\u6848\n        ans = (long long)max(ans, dp[t][0]);\n\n        res += ans;\n    }\n\n    cout &lt;&lt; res &lt;&lt; '\\n';\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    init();\n    solve();\n} \n</code></pre> AcWing 359. \u521b\u4e16\u7eaa <p>\u7d66 \\(n\\) \u9ede\u5167\u5411\u57fa\u74b0\u6a39\uff0c\u9078\u4e00\u4e9b\u9ede\u4f7f\u5f97\u6bcf\u500b\u6709\u9078\u7684\u9ede\u81f3\u5c11\u6709 \\(1\\) \u500b in degree \u6c92\u88ab\u9078\u5230\uff0c\u554f\u6700\u591a\u53ef\u4ee5\u9078\u5e7e\u500b\u9ede</p> <p>\\(n\\le 10^6\\)</p> \u601d\u8def <p>\u4e00\u6a23\u62d4\u74b0\u4e0a\u7684\u908a\u9032\u884c\u8655\u7406\uff0c\u82e5\u74b0\u4e0a\u7684\u908a\u5f37\u5236\u8981\u9650\u5236\uff0c\u90a3 dp[t][1] \u5c31\u53ef\u4ee5\u76f4\u63a5\u662f dp[t][0] + 1\uff0c\u82e5\u5f37\u5236\u4e0d\u9650\u5236\u90a3\u5c31\u7576\u6210 Tree \u4f86\u8655\u7406\u5373\u53ef</p> <p>\u82e5\u5168\u90e8\u90fd\u9078 dp[v][1]\uff0c\u6211\u5011\u9700\u8981\u5c07\u4e00\u500b dp[v][1] \u4ee3\u66ff\u6210 dp[v][0]\uff0c\u4e14 dp[v][1] - dp[v][0] \u8981\u6700\u5c0f\uff0c\u82e5\u6700\u597d\u7684\u60c5\u6cc1\u6709\u9078\u5230 dp[v][0]\uff0c\u90a3\u5c31\u6c92\u4e8b\uff0c\u6709\u4e00\u500b\u5de7\u5999\u7684\u5beb\u6cd5\u662f <code>del = min(del, max(dp[v][0], dp[v][1]) - dp[v][0])</code> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing ll = long long;\n\nconst ll INF = 2e18;\nconst int maxn = 1e6 + 5;\n\nint n, m, s, t, fg;\nint instk[maxn], dfn[maxn], G[maxn];\nll dp[maxn][2];\nvector&lt;int&gt; R[maxn];\n\nvoid find_cycle(int u) {\n    dfn[u] = instk[u] = 1;\n    int v = G[u];\n    if (!dfn[v]) {\n        find_cycle(v);\n    } else if (instk[v]) {\n        s = u, t = v;\n    }\n    instk[u] = 0;\n} \n\nvoid tree_dp(int u) {\n    dp[u][1] = 0, dp[u][0] = 0;\n    ll del = INF;\n    for (auto v : R[u]) {\n        if (t == u &amp;&amp; s == v) continue;\n\n        tree_dp(v);\n        dp[u][0] += max(dp[v][0], dp[v][1]);\n        del = min(del, max(dp[v][0], dp[v][1]) - dp[v][0]);\n    }\n    dp[u][1] = dp[u][0] - del + 1;\n    if (fg &amp;&amp; u == t) {\n        dp[u][1] = dp[u][0] + 1;\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n    int x;\n    for(int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; x;\n        G[i] = x;\n        R[x].pb(i);\n    }\n}\n\nvoid solve() {\n   ll res = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (dfn[i]) continue;\n        ll ans = 0;\n        s = 0, t = 0;\n        find_cycle(i);\n        if (s == 0) continue; \n\n        fg = 0;\n        tree_dp(s);\n        ans = max(dp[s][0], dp[s][1]);\n        fg = 1;\n        tree_dp(s);\n        ans = max(ans, dp[s][0]);\n        res += ans;\n    }\n\n    cout &lt;&lt; res &lt;&lt; '\\n';\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    init();\n    solve();\n} \n</code></pre>"},{"location":"graph/functional_graph/#_6","title":"\u5176\u4ed6","text":"Atcoder abc256 E. Takahashi's Anguish <p>\u4f60\u8981\u7d66 \\(n\\) \u500b\u4eba\u5206\u7cd6\u679c\uff0c\u7b2c \\(i\\) \u500b\u4eba\u90fd\u6709\u4e00\u500b\u5ac9\u5992\u7684\u4eba \\(X_i\\)\uff0c\u82e5 \\(X_i\\) \u6bd4 \\(i\\) \u5148\u62ff\u5230\u7cd6\u679c\u90a3\u6703\u7522\u751f\u5ac9\u5992\u503c \\(C_i\\)\u3002\u5728\u6240\u6709\u53ef\u80fd\u7684\u9806\u5e8f\u88e1\u9762\uff0c\u8f38\u51fa\u5ac9\u5992\u503c\u4e4b\u548c\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u985e\u4f3c CSES - Course Schedule\uff0c\u6211\u5011\u5efa\u908a \\(i\\to X_i\\)\uff0c\u53ef\u4ee5\u767c\u73fe\u6bcf\u500b\u9ede\u7684 out degree \u90fd\u662f 1\uff0c\u6703\u5f62\u6210\u5167\u5411\u57fa\u74b0\u6a39\u3002\u7528 CSES \u90a3\u984c\u7684\u60f3\u6cd5\u4e00\u6a23\uff0c\u7528 topo sort \u62d4\u9ede\uff0c\u6700\u5f8c\u6703\u5269\u74b0\uff0c\u4ee3\u8868\u6211\u5011\u9700\u8981\u6368\u68c4\u6389\u74b0\u4e0a\u7684\u4e00\u689d\u908a\uff0c\u8b93 topo sort \u5f97\u4ee5\u9032\u884c\uff0c\u90a3\u6211\u5011\u7576\u7136\u662f\u62d4\u908a\u6b0a\u6700\u5c0f\u7684\u908a\u5373\u53ef\u3002\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u6bcf\u500b\u5167\u5411\u57fa\u74b0\u6a39\u4e0a\u7684\u74b0\u4e0a\u7684\u6700\u5c0f\u503c\u7e3d\u548c</p> CF 1270 G. Subset with Zero Sum <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u9078\u4e00\u4e9b\u6578\u4f7f\u5f97\u7e3d\u5408\u70ba \\(0\\)\uff0c\u5370\u51fa\u9019\u4e9b\u6578\u7684 index\uff0c\u4fdd\u8b49\u6709\u89e3</p> <p>\\(n\\le 10^6,i-n\\le a_i\\le n-1\\)</p> \u601d\u8def <p>\u901a\u9748\u89e3\u3002</p> <p>\u8f49\u8b8a\u4e00\u4e0b\u5f0f\u5b50\u5f97\u5230\uff1a\\(1\\le i-a_i \\le n\\)\uff0c\u5c0d\u6bcf\u500b \\(a_i\\) \uff0c\u5efa\u4e00\u689d\u5f9e \\(i\\) \u5230 \\(i-a_i\\) \u7684\u908a\uff0c\u7531\u65bc\u6bcf\u500b\u9ede\u90fd\u6709\u51fa\u5ea6\uff0c\u6574\u500b\u5716\u5fc5\u5b9a\u6709\u74b0\u3002\u5c0d\u65bc\u74b0\u53ef\u4ee5\u5f97\u5230\uff1a</p> \\[\\begin{align}&amp; i_1 - a_1=i_2 \\\\ &amp; i_2 - a_2=i_3 \\\\ &amp; i_3 - a_3 = i_4 \\\\ &amp;\\cdots \\\\ &amp; i_n - a_n = i_1\\end{align}\\] <p>\u6c42\u548c\u5f97\u5230 \\(a_1+a_2+\\ldots +a_n=0\\)\uff0c\u56e0\u6b64\u74b0\u4e0a\u6240\u6709\u9ede\u5373\u662f\u89e3\uff0c\u5728\u9019\u500b\u9650\u5236\u689d\u4ef6\u4e0b\u5fc5\u5b9a\u6709\u89e3</p> code (by rahlin) <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int,int&gt;\n#define pb push_back\n#define f first\n#define s second\nusing namespace std;\n\nconst int INF=1e18, MAXN=1e6+100;\nint t,n;\nvector&lt;int&gt; a(MAXN),in(MAXN),vis(MAXN);\n\nsigned main(){\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cin&gt;&gt;t;\n    while(t--){\n        cin&gt;&gt;n;\n        for(int i=1;i&lt;=n;i++){\n            in[i]=0,vis[i]=0;\n        }\n        for(int i=1;i&lt;=n;i++){\n            cin&gt;&gt;a[i];\n            a[i]=i-a[i];\n            in[a[i]]++;\n        }\n        queue&lt;int&gt; q;\n        for(int i=1;i&lt;=n;i++) {\n            if(in[i]==0) q.push(i);\n        }\n        while(q.size()){\n            int u=q.front();\n            q.pop();\n            vis[u]=1;\n            int v=a[u];\n            if(!vis[v]){\n                in[v]--;\n                if(in[v]==0) q.push(v);\n            }  \n        }\n        int sum=0;\n        for(int i=1;i&lt;=n;i++){\n            if(!vis[i]) sum++;\n        }\n        cout&lt;&lt;sum&lt;&lt;\"\\n\";\n        for(int i=1;i&lt;=n;i++){\n            if(!vis[i]) cout&lt;&lt;i&lt;&lt;\" \";\n        }\n        cout&lt;&lt;\"\\n\";\n    }\n}\n</code></pre> 2022 TOI  \u6a21\u64ec\u8cfd\u7b2c\u4e00\u5834 pA. Functional Graph <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u57fa\u74b0\u6a39\uff0c\u5c07\u908a\u5b9a\u5411\uff0c\u4f7f\u5716\u6210\u70ba\u5167\u5411\u57fa\u74b0\u6a39\uff0c\u4e26\u8f38\u51fa\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u65b9\u5411\u5e8f\u5217\uff08\u898b\u539f\u984c\uff09</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u57fa\u74b0\u6a39\u9023\u63a5\u7684 subtree \u65b9\u5411\u5df2\u5b9a\uff0c\u5c31\u5dee\u74b0\u4e0a\u53ef\u4ee5\u662f\u9806\u6642\u91dd\u6216\u9006\u6642\u91dd\u3002\u6211\u5011\u5f9e\u7de8\u865f\u5c0f\u5230\u7de8\u865f\u5927\u679a\u8209\u908a\uff0c\u770b\u4ed6\u662f\u5426\u5df2\u88ab visited\uff0c\u5982\u679c\u6c92\u6709\u7684\u8a71\u6211\u5011\u5c31\u7528 ''&lt;'' \u56fa\u5b9a\u9019\u689d\u908a\uff0c\u7136\u5f8c\u53bb dfs \u74b0\u4e0a\u7684\u5176\u4ed6\u908a\u5c07\u4ed6\u5011\u4e5f\u56fa\u5b9a</p> code <pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\n#include&lt;set&gt;\n#define SZ(X) ((int)(X).size())\nusing namespace std;\nconst int SIZE = 100'000;\nmultiset&lt;pair&lt;int, int&gt;&gt; e[SIZE + 1];\nint x[SIZE], y[SIZE];\nvoid del(int eid) {\n    int me = x[eid];\n    int you = y[eid];\n    e[me].erase(e[me].find({you, eid}));\n    e[you].erase(e[you].find({me, eid}));\n}\nstring an;\nbool go(int eid) {\n    an[eid] = '&lt;';\n    int me = x[eid];\n    if(SZ(e[me]) != 2) return 0;\n    del(eid);\n    while(SZ(e[me])) {\n        if(SZ(e[me]) != 1) return 0;\n        int you = e[me].begin()-&gt;first;\n        int eid = e[me].begin()-&gt;second;\n        if(x[eid] == me) an[eid] = '&gt;';\n        else an[eid] = '&lt;';\n        del(eid);\n        me = you;\n    }\n    return 1;\n}\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    an.assign(n, 0);\n    for(int i = 1; i &lt;= n; i++) {\n        e[i].clear();\n    }\n    for(int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; x[i] &gt;&gt; y[i];\n        e[x[i]].insert({y[i], i});\n        e[y[i]].insert({x[i], i});\n    }\n    set&lt;int&gt; qq;\n    for(int i = 1; i &lt;= n; i++) {\n        if(SZ(e[i]) == 1) {\n            qq.insert(i);\n        }\n    }\n    while(!qq.empty()) {\n        int me = *qq.begin();\n        if(SZ(e[me]) == 0) {\n            cout &lt;&lt; \"Impossible\\n\";\n            return;\n        }\n        qq.erase(qq.begin());\n        int you = e[me].begin()-&gt;first;\n        int eid = e[me].begin()-&gt;second;\n        if(x[eid] == me) an[eid] = '&gt;';\n        else an[eid] = '&lt;';\n        del(eid);\n        if(SZ(e[you]) == 1) qq.insert(you);\n    }\n    for(int i = 0; i &lt; n; i++) {\n        if(!an[i]) {\n            if(!go(i)) {\n                cout &lt;&lt; \"Impossible\\n\";\n                return;\n            }\n        }\n    }\n    cout &lt;&lt; an &lt;&lt; '\\n';\n}\nint main() {\n    cin.tie(0);\n    ios_base::sync_with_stdio(false);\n    int T;\n    cin &gt;&gt; T;\n    while(T--) solve();\n    return 0;\n}\n</code></pre> BOI 2015 Tug of War <p>\u6709 \\(2n\\) \u500b\u9078\u624b\uff0c\u8981\u5c07\u4ed6\u5011\u5206\u6210\u5de6\u53f3\u5169\u7d44\u73a9\u62d4\u6cb3\uff0c\u7b2c \\(i\\) \u500b\u9078\u624b\u8981\u7ad9\u5de6\u908a\u7684\u7b2c \\(l_i\\) \u500b\u4f4d\u7f6e\u6216\u53f3\u908a\u7684\u7b2c \\(r_i\\) \u500b\u4f4d\u7f6e\uff0c\u7ad9\u7684\u90a3\u4e00\u5074\u7684\u529b\u91cf\u503c\u5c07\u6703 +\\(s_i\\)\u3002\u554f\u662f\u5426\u80fd\u5206\u6210\u5169\u7d44\u4f7f\u5de6\u53f3\u529b\u91cf\u503c\u5dee \\(\\le k\\)</p> <p>\\(n\\le 3\\times 10^4,k\\le 20n,s_i\\le 20\\)</p> \u601d\u8def <p>\u9019\u984c\u7684\u91cd\u9ede\u662f\uff0c\u5982\u4f55\u628a\u5b83\u8f49\u5316\u6210\u4e00\u500b\u6070\u7576\u7684\u5716\u8ad6\u6a21\u578b\u3002\u6211\u5011\u628a\u9078\u624b\u8f49\u5316\u6210\u908a\uff0c\u9023\u901a\u584a\u7684\u908a\u6578\u525b\u597d\u7b49\u65bc\u9ede\u6578\uff0c\u5c31\u662f\u4e00\u500b\u57fa\u74b0\u5167\u5411\u68ee\u6797\u3002\u6211\u5011\u6b64\u6642\u8981\u505a\u7684\u662f\u300c\u908a \\(\\rightarrow\\) \u9ede\u300d\u5339\u914d\u3002\u5982\u679c\u51fa\u73fe\u6709\u9023\u901a\u584a\u7684\u9ede\u6578\u4e0d\u7b49\u65bc\u908a\u6578\u6642\uff0c\u8981\u5224\u4e0d\u5408\u6cd5\u3002\u5c0d\u65bc\u6a39\u7684\u90e8\u5206\uff0c\u76f4\u63a5\u8b93\u6bcf\u500b\u9ede\u548c\u9023\u5411\u7236\u89aa\u7684\u908a\u5339\u914d\uff0c\u5c0d\u65bc\u6bcf\u500b\u74b0\uff0c\u6709\u5169\u7a2e\u60c5\u6cc1\uff0c\u5148\u9ed8\u8a8d\u4e00\u500b\u65b9\u5411\uff0c\u9810\u8655\u7406\u63db\u65b9\u6848\u7684\u8ca2\u737b\u3002\u9019\u6a23\u554f\u984c\u5c31\u8b8a\u6210 : </p> <p>\u6709 cnt \u500b\u7269\u54c1\uff0c\u7b2c i \u500b\u7269\u54c1\u7684\u50f9\u503c\u70ba \\(-2a_i\\)\uff0c\u7576\u524d\u6709\u7684\u50f9\u503c\u70ba ans\uff0c\u4f60\u9700\u8981\u9078\u64c7\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u6700\u5f8c\u7684\u7e3d\u50f9\u503c \\(\\le k\\)</p> <p>\u4f7f\u7528 0/1 \u80cc\u5305\uff0c\u8907\u96dc\u5ea6\u70ba \\(O(n\\times \\sum s_i)\\)\uff0c\u4f7f\u7528 bitset \u512a\u5316\u5230 \\(O(\\frac{n\\times \\sum s_i}{w})\\)\uff0c\u800c \\(\\sum s_i\\) \u6700\u5927\u662f \\(40n\\)\uff0c\u6240\u4ee5\u9019\u6a23\u662f \\(\\frac{3\\times 10^4\\times 40\\times 3\\times 10^4}{64}\\approx 562500000\\)\uff0c\u53ef\u4ee5\u901a\u904e</p> USACO 2022 Silver JAN Cereal 2 <p>\u6709 \\(M\\) \u7a2e\u4e0d\u540c\u7a2e\u985e\u7684\u9ea5\u7247\uff0c\u6bcf\u7a2e\u9ea5\u7247\u53ea\u6709\u4e00\u7bb1\uff0c\\(N\\) \u982d\u725b\u4e2d\u7684\u6bcf\u982d\u90fd\u6709\u5979\u6700\u611b\u7684\u9ea5\u7247 \\(f_i\\) \u548c\u6b21\u611b\u7684\u9ea5\u7247 \\(s_i\\)\u3002\u725b\u6703\u57f7\u884c\u5982\u4e0b\u7684\u904e\u7a0b\uff1a</p> <ul> <li> <p>\u5982\u679c\u5979\u6700\u611b\u7684\u9ea5\u7247\u9084\u5728\uff0c\u53d6\u8d70\u4e26\u96e2\u958b</p> </li> <li> <p>\u5426\u5247\uff0c\u5982\u679c\u5979\u7b2c\u6b21\u611b\u7684\u9ea5\u7247\u9084\u5728\uff0c\u53d6\u8d70\u4e26\u96e2\u958b</p> </li> <li> <p>\u5426\u5247\uff0c\u5979\u53ea\u80fd\u98e2\u9913</p> </li> </ul> <p>\u6c42\u51fa\u4e00\u500b \\(N\\) \u982d\u725b\u7684 permutation\uff0c\u4f7f\u98e2\u9913\u7684\u725b\u7684\u6578\u91cf\u6700\u5c0f\u3002\u8f38\u51fa\u6700\u5c0f\u98e2\u9913\u6578\u91cf\u8207 permutation</p> <p>\\(1\\le N\\le 10^5, 2\\le M\\le 10^5\\)</p> \u601d\u8def <p>\u5efa\u5716\u5c07\u908a\u7576\u4f5c\u725b\uff0c\u9ea5\u7247\u7576\u4f5c\u9ede\uff0c\u5efa\u908a \\(f_i\\to s_i\\)\u3002\u5c0d\u65bc\u4e00\u500b\u9023\u901a\u584a\uff0c\u6211\u5011\u5206\u5169\u7a2e\u60c5\u5f62\u8a0e\u8ad6</p> <p>\u7576 \\(E=V - 1\\) :</p> <p>\u5fc5\u53ef\u96a8\u4fbf\u9078\u4e00\u500b\u9ede\u7576 root\uff0c\u5f9e root \u4e00\u5c64\u4e00\u5c64\u9078\u4e0b\u53bb\uff0c\u9019\u6a23\u5c0d\u65bc\u4e00\u689d\u908a\u81f3\u5c11\u4e0b\u9762\u90a3\u500b\u9ede\u9084\u53ef\u4ee5\u9078\u5230</p> <p>\u7576 \\(E\\ge V\\) :</p> <p>\u53ef\u5728\u88e1\u9762\u627e\u5230\u4e00\u500b\u57fa\u74b0\u6a39\u7684\u5b50\u5716\u3002\u96a8\u4fbf\u9078\u57fa\u74b0\u6a39\u4e0a\u4e00\u689d\u908a\uff0c\u90a3\u689d\u908a\u9078 \\(f_i\\)\uff0c\u5c07\u9019\u689d\u908a\u62d4\u6389\u5f8c\u4ee5 \\(f_i\\) \u7576 root \u8b8a\u6210 Tree \u7684 case\u3002\u4e0d\u7ba1 \\(E\\) \u662f\u591a\u5c11\uff0c\u53ea\u80fd\u8b93 \\(V\\) \u689d\u908a match \u5230 \\(V\\) \u500b\u9ede</p> <p>\u8a73\u7d30\u898b : https://www.luogu.com.cn/blog/ShaoJia/solution-p8095</p> code(by usaco) <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nstruct edge {\n    int cow; // which cow's choice \n    int to;\n    bool is_first;\n\n    edge() {};\n    edge(int cow, int to, bool is_first) : cow(cow), to(to), is_first(is_first) {};\n};\n\nint N, M;\n\nvector&lt;edge&gt; adj[100001];\nbool visited_cycle[100001]; // array for cycle finding\nbool visited[100001]; // visited array for finding which order of cows we should use\nbool gets_cereal[100001]; \n\nint hungry_cows = 0;\nqueue&lt;int&gt; order;\nint ignore_edge = -1;\nint first_cereal = -1; // the cereal we start the search from, if the CC is not a tree then this must be on a cycle\n\nvoid find_cycle(int cur, int prev = -1) {\n    visited_cycle[cur] = true; \n\n    for (edge next : adj[cur]) {\n        if (visited_cycle[next.to]) {\n            if (first_cereal == -1 &amp;&amp; next.to != prev) {\n                if (next.is_first) {\n                    first_cereal = next.to; \n                } else {\n                    first_cereal = cur;\n                }\n\n                ignore_edge = next.cow; \n                order.push(next.cow);\n                gets_cereal[next.cow] = true;\n            }\n        } else {\n            find_cycle(next.to, cur);\n        }\n    }\n}\n\n\nvoid dfs(int cur) {\n    visited[cur] = true;\n    for (edge next : adj[cur]) {\n        if (!visited[next.to] &amp;&amp; next.cow != ignore_edge) { \n            gets_cereal[next.cow] = true;\n            order.push(next.cow);\n            dfs(next.to);\n        }\n    }\n}\n\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; M;\n    for (int i = 0; i &lt; N; ++i) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        adj[a].push_back(edge(i+1, b, false));\n        adj[b].push_back(edge(i+1, a, true));\n    }\n\n    for (int i = 1; i &lt;= M; ++i) {\n        first_cereal = -1;\n        ignore_edge = -1;\n        if (!visited[i]) {\n            find_cycle(i);\n\n            if (first_cereal &gt; 0) {\n                dfs(first_cereal);\n            } else {\n                dfs(i);\n            }\n        }\n    }\n\n    for (int i = 1; i &lt;= N; ++i) {\n        if (!gets_cereal[i]) {\n            ++hungry_cows;\n            order.push(i);\n        } \n    }\n\n    cout &lt;&lt; hungry_cows &lt;&lt; endl;\n    while (!order.empty()) {\n        cout &lt;&lt; order.front() &lt;&lt; endl; \n        order.pop();\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"graph/functional_graph/#cses","title":"CSES","text":"CSES - Planets Queries I <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede\u5167\u5411\u57fa\u74b0\u6a39\uff0c\\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\u5f9e \\(x\\) \u9ede\u8d70 \\(k\\) \u6b65\uff0c\u5230\u9054\u54ea\u500b\u9ede</li> </ul> <p>\\(n,q\\le 2\\times 10^5,k\\le 10^9\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 2e5 + 5;\nint n, q;\nint par[maxn][32], vis[maxn];\nvector&lt;int&gt; G[maxn];\n\nvoid init () {\n    cin &gt;&gt; n &gt;&gt; q;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; par[i][0];\n    }\n}\n\n// void dfs (int u) {\n//     if (vis[u]) return;\n//     vis[u] = true;\n//     dfs (par[u][0]);\n// }\n\nint jump (int x, int d) {\n    int i = 0;\n    while (d != 0) {\n        if (d &amp; 1) x = par[x][i];\n        d &gt;&gt;= 1;\n        i++;\n    }\n    return x;\n}\n\nvoid solve () {\n    // for (int i = 1; i &lt;= n; i++) {\n    //     if (!vis[i]) dfs (i);\n    // }\n    for (int j = 1; j &lt; 32; j++) {\n        for (int i = 1; i &lt;= n; i++) {\n            par[i][j] = par[par[i][j - 1]][j - 1];\n        }\n    }\n    while (q--) {\n        int u, k;\n        cin &gt;&gt; u &gt;&gt; k;\n        cout &lt;&lt; jump (u, k) &lt;&lt; \"\\n\";\n    }\n}\n\nsigned main () {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    init ();\n    solve ();\n}\n</code></pre> CSES - Planets Queries II <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede\u5167\u5411\u57fa\u74b0\u6a39\uff0c\\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\u5f9e \\(a\\) \u8d70\u5230 \\(b\\) \u7684\u6700\u5c11\u6b65\u6578\uff0c\u6216\u8d70\u4e0d\u5230</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> CSES - Planets Cycles <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede\u5167\u5411\u57fa\u74b0\u6a39\uff0c\u8f38\u51fa\u6bcf\u500b\u9ede\u51fa\u767c\u9700\u8981\u8d70\u5e7e\u6b65\u624d\u80fd\u78b0\u5230\u5df2\u7d93 visited \u904e\u7684\u9ede</p> <p>\\(n,q\\le 2\\times 10^5\\)</p>"},{"location":"graph/functional_graph/#_7","title":"\u8cc7\u6599","text":"<ul> <li> <p>https://en.m.wikipedia.org/wiki/Pseudoforest</p> </li> <li> <p>https://usaco.guide/silver/func-graphs?lang=cpp#example---badge</p> </li> <li> <p>https://zhuanlan.zhihu.com/p/559456187</p> </li> <li> <p>https://www.cnblogs.com/cly-none/p/9314812.html</p> </li> <li> <p>https://www.cnblogs.com/A-sc/p/13554630.html</p> </li> <li> <p>https://www.luogu.com.cn/blog/ShadderLeave/ji-huan-shu-bi-ji</p> </li> </ul>"},{"location":"graph/hamiltonian/","title":"\u6f22\u7c73\u9813\u8ff4\u8def","text":""},{"location":"graph/hamiltonian/#_1","title":"\u5f15\u5165","text":"\u65c5\u884c\u63a8\u92b7\u54e1\u554f\u984c(TSP) <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u908a\u5e36\u6b0a\uff0c\u6c42\u8d70\u904e\u6240\u6709\u9ede\u7684\u6700\u77ed\u8def\u5f91</p> <p>\\(1\\le n\\le 16\\)</p> <p>\u5148\u628a\u4efb\u610f\u5169\u9ede\u7684\u6700\u77ed\u8def\u5f91 dis(i, j) \u7b97\u51fa\u4f86\uff0c\u56e0\u70ba\u9ede\u53ef\u4ee5\u91cd\u8907\u8d70\uff0c\u6240\u4ee5\u6211\u5011\u5c07\u6c92\u76f8\u9130\u5169\u9ede\u7684 dis(i, j) \u62ff\u4f86\u7528\u4e5f\u6c92\u5dee\u3002dis(i, j) \u53ef\u7528 Floyd Warshall \u5efa\u51fa\u4f86\u3002</p> <p>\\(S_i\\) \u4ee3\u8868\u6709\u6c92\u6709\u62dc\u8a2a\u904e\u7b2c \\(i\\) \u500b\u57ce\u5e02\uff0c\u4ee4 \\(dp(S, v)\\) \u70ba\u8d70\u904e \\(S\\) \u4e26\u4e14\u73fe\u5728\u5728 \\(v\\) \u7684\u6700\u77ed\u8def\u5f91\u3002\u6211\u5011\u53ef\u4ee5\u5217\u51fa\u8f49\u79fb\u5f0f : </p> \\[dp(S, v) = \\min\\{ dp(S -\\{v\\}, u) + w(u, v) \\}\\] <p>\u6700\u5f8c\uff0c\u7b54\u6848\u5c31\u662f \\(\\min\\{ dp(\\{ V \\}, 0), dp(\\{ V \\}, 1),\\ldots , dp(\\{ V \\}, n - 1\\}\\)\u3002\u9019\u6a23\u7684\u6642\u9593\u8907\u96dc\u5ea6\u662f \\(O(2^n \\times n) \\times O(n) = O(n^2 \\times 2^n)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int maxn = 21;\nvector&lt;int&gt; G[maxn];\n\nvoid shortestPathLength() {\n    int n, eg;\n    cin &gt;&gt; n &gt;&gt; eg;\n    vector&lt;vector&lt;int&gt;&gt; d(n,vector&lt;int&gt;(n, INF));\n    int u, v, w;\n    for (int i = 0; i &lt; eg; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--,v--;\n        d[u][v] = w;\n        d[v][u] = w;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;((1 &lt;&lt; n), INF));\n    int ans = INF;\n    for(int mask = 0; mask &lt; (1 &lt;&lt; n); mask++){\n        vector&lt;int&gt; b;\n        for (int i = 0; i &lt; maxn; i++) {\n            if (mask &amp; (1 &lt;&lt; i)) {\n                b.pb(i);\n            }\n        }\n        for(int i = 0;i &lt; b.size(); i++){\n            if(b.size() == 1 &amp;&amp; b[0] == 0) { \n                dp[0][mask] = 0;\n            }\n            for(int j = 0;j &lt; b.size(); j++){\n                if(i == j) continue;\n                int v = b[i], u = b[j];\n                dp[v][mask] = min(dp[v][mask], dp[u][mask ^ (1 &lt;&lt; v)] + d[v][u]);\n            }\n        }\n    }\n    int mask = (1 &lt;&lt; n) - 1;\n    for (int i = 1; i &lt; n; i++) {\n        ans = min(dp[i][mask] + d[i][0], ans);\n    }\n    if(ans &gt;= INF) cout &lt;&lt; -1 &lt;&lt; \"\\n\";\n    else cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n\nsigned main () {\n    shortestPathLength();\n}\n</code></pre>"},{"location":"graph/hamiltonian/#_2","title":"\u9ede\u53ea\u80fd\u8d70\u4e00\u6b21","text":"CSES - Hamiltonian Flights <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u6c42\u8d70\u904e\u6240\u6709\u9ede\u6070\u4e00\u6b21\u7684\u65b9\u6cd5\u6578</p> <p>\\(2\\le n\\le 20,1\\le m\\le n^2\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int N = 20;\nconst int M = 1000000007;\n\nvector&lt;int&gt; G[N];\nint dp[(1 &lt;&lt; N)][N];\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        u--, v--;\n        if (u == v) continue;\n        G[v].push_back(u);\n    }\n\n    dp[1][0] = 1;\n    for (int mask = 0; mask &lt; (1 &lt;&lt; n); mask++) {\n        for (int i = 0; i &lt; n; i++) {\n            if (mask &amp; (1 &lt;&lt; i)) {\n                for (int k : G[i]) {\n                    dp[mask][i] += dp[mask ^ (1 &lt;&lt; i)][k];\n                }\n                dp[mask][i] %= M;\n            }\n        }\n    }\n    cout &lt;&lt; dp[(1 &lt;&lt; n) - 1][n - 1] &lt;&lt; '\\n';\n}\n</code></pre> <p>\u9019\u6642\u5c31\u4e0d\u80fd\u53bb\u7b97\u6c92\u76f8\u9130\u7684 i, j \u5169\u9ede\u7684 dis(i, j) \u4e86\uff0c\u76f4\u63a5\u7528\u8f38\u5165\u7d66\u7684 adjacency matrix \u5373\u53ef</p>"},{"location":"graph/hamiltonian/#_3","title":"\u8ff4\u8def","text":"Sprout OJ 187. \u9ad8\u68d5\u68a0\u89c0\u5149\u8fb2\u5834 <p>\u7d66\u4f60\u4e00\u5f35 \\(n\\) \u9ede\u5e36\u6b0a\u5b8c\u5168\u5716\uff0c\u6c42\u6700\u77ed\u7684 Hamiltonian cycle \u9577\u3002</p> <p>\u56fa\u5b9a\u8d77\u9ede\uff0c\u5047\u8a2d\u8d77\u9ede\u662f 0\uff0cdp[{0}][1] = 0, dp[{v}][v] = INF\uff0c<code>ans = min{ dp[(1&lt;&lt;n) - 1][u]+ dis[0][u] }</code></p>"},{"location":"graph/hamiltonian/#_4","title":"\u4f8b\u984c","text":"TOI 2022 pE. \u9593\u8adc <p>\u7d66\u4e00\u500b \\(n\\times m\\) \u7684 Grid\uff0c\u5c0d\u65bc\u7b2c i \u6b65\uff0c\u4e0d\u80fd\u548c\u7b2c i-1 \u6b65\u540c\u884c\u6216\u540c\u5217\u6216\u540c\u5c0d\u89d2\u7dda\uff0c\u8f38\u51fa\u7d93\u904e\u6bcf\u500b\u9ede\u6070\u597d\u4e00\u6b21\u7684 Hamiltonian cycle</p> <p>\\(n\\times m\\le 2000\\)</p>"},{"location":"graph/knapsack_on_tree/","title":"Knapsack on tree","text":"CF 440D Berland Federalization <p>\u7d66\u4f60\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u73fe\u5728\u8981\u4f60\u522a\u9664\u76e1\u53ef\u80fd\u5c11\u7684\u908a\uff0c\u4f7f\u5f97\u5269\u9918\u4e00\u500b\u7bc0\u9ede\u6578\u525b\u597d\u70ba \\(k\\) \u7684\u5b50\u6a39</p> <p>\u4f60\u9700\u8981\u8f38\u51fa\u7bc0\u9ede\u6578\u548c\u522a\u9664\u7684\u908a\u7684\u7de8\u865f</p> <p>\\(n,k\\le 400\\)</p> \u601d\u8def <p>\u6a39\u4e0a\u80cc\u5305</p>"},{"location":"graph/lca/","title":"\u500d\u589e\u6cd5\u8207 LCA","text":""},{"location":"graph/lca/#_1","title":"\u500d\u589e\u6cd5","text":"<p>\u8df3\u5230\u4e00\u500b\u4f4d\u7f6e t\uff0c\u4f7f check(t) = true\uff0ccheck(t + 1) = false\u3002\u5229\u7528\u4e8c\u9032\u5236\u679a\u8209\u9ad8\u4f4d\u5230\u4f4e\u4f4d\uff0c\u82e5\u8df3\u4e86\u4e4b\u5f8c\u662f\u5408\u6cd5\u7684\u5c31\u8df3</p> code <pre><code>int jump(int now) {\n    int ans = 0;\n    for (int i = 20; i &gt;= 1; i--) {\n        if (check(now, i)) {\n            now = dp[now][i];\n            ans += (1 &lt;&lt; i);\n        }\n    }\n    return ans;\n}\n</code></pre> \u5728\u67d0\u4e9b\u984c\u76ee, \u6700\u597d\u9084\u662f\u5c07\u8d8a\u754c\u7684\u500d\u589e\u6578\u7d44\u5b9a\u7fa9\u597d\u7121\u6548\u72c0\u614b, \u4f8b\u5982\u8aaa -1, INF \u7b49\u7b49 <p>\u4f8b\u5982\u8aaa dp(i, 0) = nxt[i]\uff0c\u4f46\u5982\u679c\u6c92\u6709\u8a2d\u597d\u72c0\u614b\u53ef\u80fd\u6703\u4f7f nxt[i] = 0, \u5c0e\u81f4 dp(i, 0) = 0\uff0c\u7136\u5f8c dp(i, j) = dp(dp(i, j - 1), j - 1) = dp(0, j - 1) = 0\u3002\u9019\u6a23\u5728 query \u6642\uff0c\u770b\u80fd\u4e0d\u80fd jump \u7684\u6642\u5019\u6703\u767c\u73fe 0 &lt; r\uff0c\u4e0d\u6703\u8d85\u904e\u6240\u4ee5\u53ef\u4ee5 jump\uff0c\u5c0e\u81f4\u6700\u5f8c\u7b54\u6848\u58de\u6389</p> 2021 \u9644\u4e2d\u6a21\u7af6 pE. \u6642\u7a7a\u65c5\u4eba\u4e4b\u722d (Time) <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u8907\u88fd\u4eba\u5927\u8ecd\u6703\u5f9e root \u958b\u59cb\u64f4\u6563\uff0c\u6bcf 2 \u79d2\u64f4\u6563\u4e00\u500b\u7bc0\u9ede\u3002\u6709 \\(q\\) \u7b46\u8a62\u554f:</p> <ul> <li>\\(\\text{query}(s,t):\\) \u5f9e\u5165\u4fb5\u7684\u6642\u9593\u9ede\u958b\u59cb\uff0c\u5f9e \\(s\\) \u5230 \\(t\\) \u81f3\u5c11\u8981\u7d93\u904e\u5e7e\u500b\u6709\u8907\u88fd\u4eba\u5927\u8ecd\u7684\u7bc0\u9ede</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5206\u5225\u5728 path(s, lca(s, t)) \u8ddf path(lca(s, t), t) \u4e0a\u9762\u4e8c\u5206\u641c\uff0c\u770b\u5230\u54ea\u500b\u9ede\u6703\u88ab\u8ffd\u5230</p> <p>\u8981\u770b\u5f9e s \u958b\u59cb\u5230\u9ede x \u662f\u5426\u6703\u88ab\u8ffd\u5230\u5c31\u770b\u300cs \u8d70\u5230 x \u7684\u6642\u9593\u662f\u5426\u5c0f\u65bc root \u8d70\u5230 x \u7684\u6642\u9593\u300d\uff0c\u82e5\u6eff\u8db3\u7684\u8a71\u5c31\u4ee3\u8868\u4e0d\u6703\u88ab\u8ffd\u5230\u3002\u53ef\u4ee5\u5beb\u6210 dis(s, x) &lt; dep(x) * 2</p> <p>\u8a73\u898b: https://hackmd.io/@joylintp/HJ6TfnVWY#/5/1</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\n#define StarBurstStream               \\\n    ios_base::sync_with_stdio(false); \\\n    cin.tie(0);                       \\\n    cout.tie(0);\n#define eb(a) emplace_back(a)\n\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; g;\nvector&lt;int&gt; in, out, dpt;\nint ts = 0;\nvector&lt;vector&lt;int&gt;&gt; anc;\n\nvoid dfs(int now, int p, int d) {\n    in[now] = ts++;\n    dpt[now] = d;\n    anc[0][now] = p;\n    for (int i : g[now]) {\n        if (i == p) continue;\n        dfs(i, now, d + 1);\n    }\n    out[now] = ts++;\n}\n\nbool isAnc(int a, int b) {\n    return in[a] &lt;= in[b] &amp;&amp; out[a] &gt;= out[b];\n}\n\nint getLCA(int a, int b) {\n    if (isAnc(a, b)) return a;\n    if (isAnc(b, a)) return b;\n    for (int i = 19; i &gt;= 0; i--) {\n        if (!isAnc(anc[i][a], b)) a = anc[i][a];\n    }\n    return anc[0][a];\n}\n\nint getDis(int a, int b) {\n    int lca = getLCA(a, b);\n    return dpt[a] + dpt[b] - 2 * dpt[lca];\n}\n\nbool check(int s, int now) {\n    return getDis(s, now) &lt; dpt[now] * 2;\n}\n\nvoid solve() {\n    int s, t;\n    cin &gt;&gt; s &gt;&gt; t;\n    int lca = getLCA(s, t);\n\n    if (check(s, lca)) {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n\n    int ans = 0;\n    int now = s;\n    for (int i = 19; i &gt;= 0; i--) {\n        if (check(s, anc[i][now])) now = anc[i][now];\n    }\n    ans += dpt[now] - dpt[lca] + !check(s, s);\n    now = t;\n    for (int i = 19; i &gt;= 0; i--) {\n        if (check(s, anc[i][now])) now = anc[i][now];\n    }\n    ans += dpt[now] - dpt[lca] + !check(s, t);\n    ans--;\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n\nint main() {\n    StarBurstStream\n\n        int n;\n    cin &gt;&gt; n;\n\n    g.resize(n + 1);\n    in.resize(n + 1);\n    out.resize(n + 1);\n    dpt.resize(n + 1);\n    anc.resize(20, vector&lt;int&gt;(n + 1));\n\n    for (int i = 0; i &lt; n - 1; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        g[u].eb(v);\n        g[v].eb(u);\n    }\n\n    int q;\n    cin &gt;&gt; q;\n\n    dfs(1, 1, 0);\n\n    for (int i = 1; i &lt; 20; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            anc[i][j] = anc[i - 1][anc[i - 1][j]];\n        }\n    }\n\n    for (int i = 0; i &lt; q; i++) {\n        solve();\n    }\n\n    return 0;\n}\n</code></pre> CSES - Movie Queries <p>\u7d66 n \u500b interval\uff0c\u6709 q \u7b46\u8a62\u554f:</p> <ul> <li>query(s, t): \u5728 [s, t] \u6700\u591a\u80fd\u9078\u5e7e\u500b interval \u4f7f\u5169\u5169\u4e0d overlap</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u60f3\u8981\u770b\u6700\u591a\u80fd\u8df3\u5e7e\u683c\u6eff\u8db3\u6700\u5927\u7684\u53f3\u754c\u4e0d\u8d85\u904e t\uff0c\u6240\u4ee5\u6211\u5011\u5b9a\u7fa9 dp(i, j) = \u5f9e i \u4e4b\u5f8c\u958b\u59cb\u9078 2^j \u500b interval\uff0c\u7d50\u5c3e\u6700\u5c0f\u662f\u591a\u5c11</p> <ul> <li> <p>base case:</p> <ul> <li> <p>\u6bcf\u500b interval[l, r] \u5c07 dp(l, 0) = r</p> </li> <li> <p>dp(i, 0) = min(dp(i + 1), 0)</p> </li> </ul> </li> <li> <p>\u8f49\u79fb\u5f0f:</p> <ul> <li>dp(i, j) = dp(dp(i, j - 1), j - 1)</li> </ul> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define l first\n#define r second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int MAXN = 1e6 + 5;\nconst int M = 1e9 + 7;\n\nint n, q;\nint p[MAXN][25];\n\nvoid build() {\n    for (int i = MAXN - 2; i &gt;= 1; i--) {\n        p[i][0] = min(p[i + 1][0], p[i][0]);\n        int j = 0;\n    }\n\n    for (int j = 1; j &lt; 25; j++) {\n        for (int i = 1; i &lt; MAXN - 1; i++) {\n            if (p[i][j - 1] &gt; INF) continue;\n            p[i][j] = p[p[i][j - 1]][j - 1];\n        }\n    }\n}\n\nint query(int l, int r) {\n    int res = 0;\n    for (int i = 24; i &gt;= 0; i--) {\n        if (p[l][i] &lt;= r) {\n            res += (1 &lt;&lt; i);\n            l = p[l][i];\n        }\n    }\n\n    return res;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    memset(p, 0x3f, sizeof(p));\n    for (int i = 0; i &lt; n; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        p[l][0] = min(p[l][0], r);\n    }\n\n    build();\n\n    while (q--) {\n        int s, t;\n        cin &gt;&gt; s &gt;&gt; t;\n        cout &lt;&lt; query(s, t) &lt;&lt; \"\\n\";\n    }\n}\n</code></pre> CF 1143 E. Lynyrd Skynyrd <p>\u7d66\u4f60\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u9663\u5217 \\(p\\)\uff0c\u518d\u7d66\u4f60\u9577\u5ea6\u70ba \\(m\\) \u4e00\u500b\u9663\u5217 \\(a\\)\uff0c\u6709 \\(q\\) \u7b46\u67e5\u8a62:</p> <ul> <li>\\(\\text{query}(l, r):\\) \\(a_l, \\ldots ,a_r\\) \u6709\u6c92\u6709\u5b50\u5e8f\u5217\u662f\u5c6c\u65bc \\(p\\) \u7684 cycle shift</li> </ul> <p>\\(n, m, q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5b9a\u7fa9 nxt[i] = i \u6700\u5c11\u8981\u54ea\u88e1\u624d\u80fd\u627e\u5230 a[i] \u5728 cycle \u7684\u4e0b\u4e00\u9805</p> <p>\u6211\u5011\u6703\u9700\u8981\u5feb\u901f\u7684\u6c42\u51fa\uff0c\u5c0d\u65bc\u6240\u6709 1 &lt;= i &lt;= n\uff0cnxt[nxt[nxt[i]]]\uff08\u5171 n - 1 \u6b21\uff09\uff0c\u8003\u616e\u500d\u589e\uff0cdp(i, j) \u70ba\u5f9e i \u958b\u982d\u8981\u627e\u5230\u9577\u5ea6\u70ba 2^j cycle shift \u81f3\u5c11\u8981\u9078\u5230\u54ea\u88e1</p> <ul> <li> <p>base case: dp(i, 0) = nxt[i]</p> </li> <li> <p>\u8f49\u79fb\u5f0f: dp(i, j) = dp(dp(i, j - 1), j - 1)</p> </li> </ul> <p>\u6700\u5f8c\u6211\u5011\u4ee4 ans[i] = i \u958b\u982d\u8981\u627e\u5230\u9577\u5ea6\u70ba n - 1 \u7684 cycle shift \u81f3\u5c11\u8981\u9078\u5230\u54ea\u88e1\uff0c\u9019\u53ef\u4ee5\u7528\u500d\u589e\u6cd5\u67e5\u8868\u5f97\u5230\uff0c\u4e4b\u5f8c\uff0c\u6211\u5011\u53ef\u4ee5\u5c07 ans[ ] \u505a\u4e00\u500b\u5f8c\u7db4\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f ans[i] = min(ans[i + 1], ans[i])\uff0c\u7b54\u6848\u5c31\u6703\u662f\u770b ans[l] \u662f\u5426 &lt;= r \u5373\u53ef\u3002</p> CF 1175 E. Minimal Segment Cover <p>\u7d66 n \u500b interval\uff0c\u6709 q \u7b46\u8a62\u554f:</p> <ul> <li>query(s, t): \u554f\u8981\u5c07 point[s, t] \u90fd\u8986\u84cb\u81f3\u5c11\u8981\u6311\u5e7e\u500b interval</li> </ul> <p>\\(n,q\\le 2\\times 10^5, 0\\le l_i&lt;r_i\\le 5\\times 10^5\\)</p> \u601d\u8def <p>\u4ee4 dp(i, j) = i \u958b\u59cb\u9078 2^j \u500b interval \u6700\u591a\u80fd\u5b8c\u6574\u8986\u84cb\u5230\u54ea\u88e1</p> <ul> <li> <ul> <li>\u5c0d\u65bc\u8f38\u5165\u7684\u6240\u6709 interval [l, r]\uff0c\u5c07 dp(l, 0) = r</li> </ul> <p>base case:</p> <ul> <li>dp(i, 0) = max{dp(i, 0), dp(i - 1, 0)}</li> </ul> </li> <li> <p>\u8f49\u79fb: dp(i, j) = dp(dp(i, j - 1), j - 1)</p> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 5e5 + 10;\nint n, q, dp[MAXN][25];\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    for (int i = 1; i &lt;= n; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        dp[l][0] = max(dp[l][0], r);\n    }\n    for (int i = 1; i &lt; MAXN; i++) {\n        dp[i][0] = max(dp[i][0], dp[i - 1][0]);\n    }\n    for (int i = 1; i &lt;= 20; i++) {\n        for (int j = 0; j &lt; MAXN; j++) {\n            dp[j][i] = dp[dp[j][i - 1]][i - 1];\n        }\n    }\n\n    while (q--) {\n        int l, r, ans = 0;\n        cin &gt;&gt; l &gt;&gt; r;\n        for (int i = 20; i &gt;= 0; i--) {\n            if (dp[l][i] &lt; r) {\n                ans += 1 &lt;&lt; i;\n                l = dp[l][i];\n            }\n        }\n        cout &lt;&lt; (dp[l][0] &gt;= r ? ans + 1 : -1) &lt;&lt; '\\n';\n    }\n    return 0;\n}\n</code></pre> USACO 2013 OPEN Luxury River Cruise S <p>\u7d66\u4e00\u5f35 n \u9ede\u7684\u5716\uff0c\u6bcf\u500b\u9ede\u6709\u5169\u500b\u51fa\u908a\u3002\u7d66\u5b9a\u4e00\u689d\u9577\u5ea6\u70ba m \u7684\u6307\u4ee4\uff0c\u5f9e\u4f4d\u7f6e 1 \u51fa\u767c\u6309\u7167\u6307\u4ee4\u79fb\u52d5 k \u8f2a\uff0c\u6c42\u6700\u7d42\u4f4d\u7f6e</p> \u601d\u8def <p>\u4e00\u9053\u6a21\u64ec\u984c\uff0c\u6211\u5011\u4f86\u60f3\u600e\u9ebc\u512a\u5316\u3002\u56e0\u70ba\u6307\u4ee4\u662f\u91cd\u8907\u7684\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u8dd1\u5b8c\u4e00\u8f2a\u5f8c\uff0c\u7528\u500d\u589e\u6578\u7d44\u6c42\u89e3\uff0c\u985e\u4f3c USACO - Swapity Swapity Swap\u3002</p> <p>\u4ee4 dp(i, j) \u8868\u793a\u4ee5 i \u70ba\u8d77\u9ede\u5c07\u64cd\u4f5c\u5e8f\u5217\u9032\u884c \\(2^j\\) \u6b21\u5f8c\uff0cBessie \u6240\u505c\u7559\u5728\u7684\u9ede\u3002\u7528\u500d\u589e\u4e0b\u53bb\u8f49\u79fb\u5c31\u597d\u3002</p> <p>\u6700\u5f8c\u5c0b\u627e\u7b54\u6848\u6642\uff0c\u5c07 k \u4e8c\u9032\u5236\u62c6\u5206\uff0c\u5229\u7528\u4e0a\u9762 jump \u7684\u65b9\u6cd5\u6c42\u89e3\u5373\u53ef</p> USACO 2020 FEB Swapity Swapity Swap S <p>\u6709 n \u982d\u725b\u7de8\u865f 1...n\uff0c\u6bcf\u4e00\u500b\u9577\u5ea6\u70ba m \u7684\u65b9\u6848 \\((l_1,r_1),\\ldots ,(l_m, r_m)\\)\uff0c\u4ee3\u8868\u4f9d\u5e8f\u5c07 \\(l_i\\) \u8207 \\(r_i\\) swap\u3002\u8b93\u5979\u5011\u91cd\u8907\u9019\u500b\u65b9\u6848 k \u56de\u5408\uff0c\u7136\u5f8c\u4f9d\u5e8f\u8f38\u51fa\u5f9e\u5de6\u5230\u53f3\u6bcf\u982d\u725b\u7684\u7de8\u865f</p> <p>\\(n\\le 10^5, m\\le 100\\)</p> \u601d\u8def <p>\u4ee4 dp(i, j) \u8868\u793a\u4ee5 i \u9019\u500b\u4f4d\u7f6e\u5728\u65b9\u6848\u9032\u884c \\(2^j\\) \u56de\u5408\u5f8c\uff0c\u6703\u5230\u54ea\u500b\u4f4d\u7f6e\u3002</p> <p>\u5148\u7528 O(nm) \u7684\u6642\u9593\uff0c\u8dd1\u500b\u4e00\u56de\u5408\u9810\u8655\u7406 dp(i, 0) \u5373\u53ef\u5229\u7528\u500d\u589e\u6cd5\u6c42\u89e3\u3002</p>"},{"location":"graph/lca/#_2","title":"\u6642\u9593\u6a19\u8a18","text":"<p>\u5c0d\u65bc\u6bcf\u500b\u9ede\uff0c\u6211\u5011\u958b\u5169\u500b\u9663\u5217 in \u8207 out \u4f86\u8a18\u9304\u6bcf\u500b\u9ede\u9032\u5165 dfs \u6642\u548c\u7d50\u675f dfs \u6642\u7684\u6642\u9593\u9ede\u3002\u7576 u \u662f v \u7684\u7956\u5148\uff0c\u4ee3\u8868\u6211\u5011\u6703\u5148\u9032\u5165 u\uff0c\u9032\u5165 v\uff0c\u518d\u5f9e v \u51fa\u53bb\uff0c\u518d\u5f9e u \u51fa\u53bb\uff0c\u5373 in[u] \u2264 in[v] \u2264 out[v] \u2264 out[u]</p> <p> </p> <p>\u4f8b\u5982\u8aaa (A, F) \u56e0\u70ba 1 \u2264 7 \u2264 8 \u2264 14\uff0c\u6240\u4ee5\u662f\u7956\u5148\u95dc\u4fc2\uff0c\u800c (B, E) \u56e0\u70ba 2 \u2264 5 \u2264 6 \u2264 3\uff0c\u6240\u4ee5\u4e0d\u662f\u7956\u5148\u95dc\u4fc2</p> \u5224\u65b7\u662f\u5426\u70ba\u7956\u5148 <pre><code>void dfs(int u) {\n    in[u] = ++stamp; \n    for(auto v : G[u]) {\n        if (v == par) continue;\n        if (!in[v]) dfs(v);\n    }\n    out[u] = ++stamp;  \n}\n\nbool is_ancestor(int x,int y) {\n    return (in[x] &lt;= in[y] &amp;&amp; out[x] &gt;= out[y]);\n}\n</code></pre>"},{"location":"graph/lca/#lca","title":"LCA \u4ecb\u7d39","text":"<p>\u5728\u6709\u6839\u6a39\u4e2d\uff0c\u7d66\u5169\u500b\u9ede u, v\uff0c\u9ad8\u5ea6\u6700\u4f4e\u7684\u5171\u540c\u7956\u5148\u5373\u70ba LCA</p> <ul> <li> <p>LCA(E, F) = C</p> </li> <li> <p>LCA(E, G) = A</p> </li> <li> <p>LCA(F, C) = C</p> </li> </ul>"},{"location":"graph/lca/#lca_1","title":"LCA \u6027\u8cea","text":"<ol> <li>\u5169\u9ede\u96c6 union \u8d77\u4f86\u7684 LCA \u70ba\u5169\u9ede\u96c6\u5206\u5225\u7684 LCA \u7684 LCA\uff0c\u8209\u4f8b\u4f86\u8aaa \\(\\text{lca}(a, b, c)\\) \u7b49\u65bc \\(\\text{lca}(\\text{lca}(a, b), c)\\)</li> <li>\\(dis(u,v)=\\text{depth}(u)+\\text{depth}(v)-2\\times \\text{depth}(\\text{lca}(u,v))\\)</li> </ol>"},{"location":"graph/lca/#lca_2","title":"\u4f7f\u7528\u500d\u589e\u6cd5\u67e5\u8a62 LCA","text":"CSES - Companies II <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\\(q\\) \u6b21\u8a62\u554f\u5169\u500b\u9ede\u7684 LCA</p> <p>\\(n,q\\le 2\\times 10^4\\)</p> <p>\u5148\u770b u, v \u54ea\u500b\u9ede\u6bd4\u8f03\u6df1\uff0c\u5f9e\u6df1\u7684\u90a3\u500b\u9ede\u770b dep(u) - dep(v) \u7684\u4e8c\u9032\u5236\uff0c\u5229\u7528\u500d\u589e\u6cd5\u5f80\u4e0a\u8df3\uff0c\u8df3\u5230\u76f4\u5230 dep(u) = dep(v) \u6642\uff0c\u82e5\u539f\u672c u, v \u5c31\u662f\u7956\u5b6b\u95dc\u4fc2\uff0c\u90a3\u9ebc\u5c31\u7d50\u675f\u4e86\uff0c\u5426\u5247\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u7528\u500d\u589e\u6cd5\u679a\u8209\u9ad8\u4f4d\u5230\u4f4e\u4f4d:</p> <ul> <li> <p>\u82e5 pa(u, k) = pa(v, k) \u4ee3\u8868\u8df3\u592a\u591a\u4e86\uff0c\u4e0d\u80fd\u8df3</p> </li> <li> <p>\u5426\u5247\u5c31\u8df3 k \u683c</p> </li> </ul> <p>\u6700\u5f8c\uff0cu, v \u6070\u597d\u6703\u8df3\u5230 lca \u7684\u4e0b\u9762\u4e00\u683c(\u4e5f\u5c31\u662f lca \u7684 children \u4e0a) </p> code <pre><code>vector&lt;int&gt; G[MAXN];\nint n;\nint p[MAXN][21], dp[MAXN][21], dep[MAXN];\n\nvoid dfs(int u, int par) {\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        p[v][0] = u;\n        dep[v] = dep[u] + 1;\n        dfs(v, u);\n    }\n}\n\nvoid build() {\n    for (int j = 1; j &lt; 21; j++) {\n        for (int i = 1; i &lt;= n; i++) {\n            p[i][j] = p[p[i][j - 1]][j - 1];\n        }\n    }\n}\n\nint lca(int a, int b) {\n    if (dep[a] &lt; dep[b]) swap(a, b);\n    int dif = dep[a] - dep[b];\n    for (int i = 20; i &gt;= 0; i--) {\n        if (dif &amp; (1 &lt;&lt; i)) {\n            a = p[a][i];\n        }\n    }\n\n    if (a == b) return a;\n\n    for (int i = 20; i &gt;= 0; i--) {\n        if (p[a][i] != p[b][i]) {\n            a = p[a][i];\n            b = p[b][i];\n        }\n    }\n\n    return p[a][0];\n}\n</code></pre>"},{"location":"graph/lca/#lca_3","title":"\u6a39\u58d3\u5e73\u627e LCA","text":"<p>\u7576\u6211\u5011\u628a\u6a39\u7684 euler tour \u5217\u51fa\u4f86\u5f8c\uff0c\u5169\u9ede \\((u,v)\\) \u4e4b\u9593\u7684 LCA \u5c31\u662f\u5340\u9593 \\([u,v]\\) \u5167\u6df1\u5ea6\u6700\u5c0f\u7684\u90a3\u500b</p> <p></p>"},{"location":"graph/lca/#_3","title":"\u4f8b\u984c","text":"Zerojudge c313. PF:\u7d42\u672b\u4e4b\u5854 <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u908a\u6709\u6b0a\u91cd\uff0c\\(q\\) \u6b21\u8a62\u554f\u5169\u9ede\u4e4b\u9593\u6240\u6709\u908a\u6b0a\u7684\u6700\u5927\u503c</p> <p>\\(n, q\\le 10^4\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u7528\u500d\u589e\u6cd5 + dp \u4f86\u505a\u5230\uff0c\u4ee4 dp(i, j) = \u5f9e i \u958b\u59cb\u5230\u5f80 2^j \u683c\u9593\u7684\u6700\u5927\u908a\u6b0a\uff0c\u5728 find lca \u7684\u904e\u7a0b\u4e2d\uff0c\u5c31\u53ef\u4ee5\u9806\u4fbf\u53bb\u67e5\u8868 dp(i, j) </p> TIOJ 1687 . \u6a39\u4e0a\u8a62\u554f Query on a Tree II <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6709 \\(q\\) \u7b46\u4ee5\u4e0b\u67e5\u8a62: </p> <ul> <li>\\(\\text{query}(u,v,k):\\) \u554f \\(u\\) \u5f80 \\(v\\) \u8d70 \\(k\\) \u6b65\u8d70\u5230\u7684\u9ede</li> </ul> <p>\\(n\\le 10^5, q\\le 2\\times 10^5\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define pii pair&lt;int, int&gt;\n#define mk make_pair \nusing namespace std;\n\nconst int maxn = 1e5 + 5;\nint n, q;\nvector&lt;int&gt; G[maxn];\nint p[maxn][19];\nint dep[maxn];\n\nvoid dfs(int u = 1, int par = 0) {\n    p[u][0] = par;\n    dep[u] = dep[par] + 1;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs(v, u);\n    }\n}\n\npii fnd(int a, int b) {\n    pii ret = mk(0, 0); //dep(a) &gt; dep(b)\n    int dif = dep[a] - dep[b];\n    ret.first = dif; // \u7d00\u9304 a \u5230 LCA \u7684\u8ddd\u96e2\n    ret.second = dif; //\u7d00\u9304 b \u5230 a \u7684\u8ddd\u96e2\n    for (int i = 0; i &lt; 19; i++) {\n        if (dif &amp; (1 &lt;&lt; i)) {\n            a = p[a][i];\n        }\n    }\n    if (a == b) return ret;\n    for (int i = 18; i &gt;= 0; i--) {\n        if (p[a][i] != p[b][i]) {\n            a = p[a][i];\n            b = p[b][i];\n            ret.second += 2 * (1 &lt;&lt; i); \n            ret.first += (1 &lt;&lt; i); \n        }\n    }\n    ret.second += 2;\n    ret.first += 1;\n    return ret;\n}\n\nint solve(int a, int b, pii dis, int k) {\n    int cur = k;\n    if (k &gt; dis.first) {\n        cur = dis.second - k; // \u592a\u5927\u7684\u8a71\u5148\u8d70\u5230 LCA\n        for (int i = 0; i &lt; 19; i++) {\n            if (cur &amp; (1 &lt;&lt; i)) {\n                b = p[b][i];\n            }\n        }\n        return b;\n    } \n    else {\n        cur = k; // \u592a\u5927\u7684\u8a71\u5148\u8d70\u5230 LCA\n        for (int i = 0; i &lt; 19; i++) {\n            if (cur &amp; (1 &lt;&lt; i)) {\n                a = p[a][i];\n            }\n        }\n        return a;\n    }\n}\n\nsigned main () { \n    cin &gt;&gt; n &gt;&gt; q;\n    for (int i = 0; i &lt; n - 1; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n    dfs();\n    for (int j = 1; j &lt; 19; j++) {\n        for (int i = 1; i &lt;= n; i++) {\n            p[i][j] = p[p[i][j - 1]][j - 1];\n        }\n    }\n    while (q--) {\n        int a, b, k, flg = 0;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; k;\n        if (dep[b] &gt; dep[a]) { // \u7dad\u6301\u51fa\u767c\u9ede\u4e00\u5b9a\u8981\u6df1\u5ea6\u6bd4\u8f03\u4f4e\u7684\u539f\u5247\n            swap(a, b);\n            flg = 1;\n        }\n        pii ret = fnd(a,b); // \u627e a \u5230 LCA \u7684\u8ddd\u96e2\u8207 b \u5230 a \u7684\u8ddd\u96e2\n        if (k &gt; ret.second){ // \u8d85\u904e b \u5230 a \u7684\u8ddd\u96e2\u76f4\u63a5\u8f38\u51fa -1\n            cout &lt;&lt; -1 &lt;&lt; '\\n';\n            continue;\n        }\n        if (flg) {\n            k = ret.second - k; // \u56e0\u70ba\u525b\u525b\u628a a, b \u5c0d\u8abf\uff0c\u51fa\u767c\u9ede\u6539\u8b8a\uff0c\u6240\u4ee5\u8d70\u7684\u90e8\u6578\u6703\u6539\u8b8a\n        }\n        cout &lt;&lt; solve(a, b, ret, k) &lt;&lt; \"\\n\"; //\u8a08\u7b97\u7b54\u6848\n    }\n\n}\n</code></pre> Atcoder abc267 F. Exactly K Steps <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u908a\u6b0a\u70ba \\(1\\)\uff0c\u9032\u884c \\(q\\) \u6b21\u8a62\u554f\uff0c\u6bcf\u6b21\u8f38\u51fa\u4efb\u610f\u4e00\u500b\u96e2\u7d50\u9ede \\(u\\) \u8ddd\u96e2\u70ba \\(k\\) \u7684\u7bc0\u9ede </p> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6700\u9060\u7684\u9ede\u4e00\u5b9a\u662f\u6a39\u76f4\u5f91\u7684\u7aef\u9ede</p> <p>\u4ee4\u8ddd\u96e2 \\(u\\) \u6bd4\u8f03\u9060\u7684\u90a3\u500b\u7aef\u9ede\u70ba \\(R\\)\uff0c\u5148\u770b \\(u\\to\\texttt{LCA}(u, R)\\) \u662f\u5426\u6bd4 \\(k\\) \u6b65\u591a\uff0c\u5982\u679c\u9084\u6c92\u6709\u5c31\u5f9e\u8f03\u9060\u7684\u7aef\u9ede\u5f80\u4e0a\u722c</p> <p>https://www.cnblogs.com/DM11/p/16701069.html</p> code (by cnblog) <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nconst int N = 200005;\nvector&lt;int&gt; g[N];\nint dep[N];\nint anc[N][35];\n\nvoid dfs(int u, int fa)\n{\n    anc[u][0] = fa;\n\n    for(int j = 1; j &lt;= 30; j ++)\n        if((1 &lt;&lt; j) &lt;= dep[u])\n            anc[u][j] = anc[anc[u][j - 1]][j - 1];\n\n    for(int v : g[u])\n    {\n        if(v == fa) continue;\n        dep[v] = dep[u] + 1;\n        dfs(v, u);\n    }\n}\n\nint LCA(int x, int y)\n{\n    if(dep[x] &lt; dep[y]) swap(x, y);\n\n    for(int j = 30; j &gt;= 0; j --)\n        if(dep[x] - (1 &lt;&lt; j) &gt;= dep[y])\n            x = anc[x][j];\n    if(x == y)  return x;\n\n    for(int j = 30; j &gt;= 0; j --)\n        if(anc[x][j] != anc[y][j] &amp;&amp; (1 &lt;&lt; j) &lt;= dep[x])\n            x = anc[x][j], y = anc[y][j];\n    return anc[x][0];\n}\n\nint dis(int a, int b)\n{\n    int c = LCA(a, b);\n    return abs(dep[a] - dep[c]) + abs(dep[b] - dep[c]);\n}\n\nint find_(int u, int k) //\u5411\u4e0a\u8df3k\u6b21\n{\n    int depth = dep[u] - k;\n    for(int i = 30; i &gt;= 0; i --)\n        if(depth &lt;= dep[u] - (1 &lt;&lt; i))\n            u = anc[u][i];\n    return u;\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &amp;n);\n    for(int i = 1; i &lt; n; i ++)\n    {\n        int u, v;\n        scanf(\"%d%d\", &amp;u, &amp;v);\n        g[u].push_back(v); g[v].push_back(u);\n    }\n    dfs(1, -1);\n    int L = 1, R = 1;\n    for(int i = 1; i &lt;= n; i ++)    if(dis(1, i) &gt; dis(1, L))   L = i;\n    for(int i = 1; i &lt;= n; i ++)    if(dis(L, i) &gt; dis(L, R))   R = i;\n\n    int m;\n    scanf(\"%d\", &amp;m);\n    while(m --)\n    {\n        int u, k;\n        scanf(\"%d%d\", &amp;u, &amp;k);\n        if(dis(u, R) &lt; dis(u, L))   swap(L, R);\n        int dist = dis(u, R);\n        if(k &gt; dist)\n            printf(\"-1\\n\");\n        else\n        {\n            if(k &lt;= dis(u, LCA(u, R))) //\u67e5\u770b\u76ee\u6807\u70b9\u5728LCA\u7684\u5de6\u7aef\u8fd8\u662f\u53f3\u7aef\n                printf(\"%d\\n\", find_(u, k));\n            else\n                printf(\"%d\\n\", find_(R, dist - k));\n        }\n    }\n}\n</code></pre> \u5168\u570b\u8cfd 2018 p7. \u4e0d\u56de\u5bb6\u7684\u92b7\u552e\u54e1 <p>\u7d66\u4e00\u500b \\(n\\) \u500b\u9ede\u7684\u7121\u6839\u6a39\uff0c\u908a\u5e36\u6b0a\uff0c\u6709 \\(q\\) \u7b46\u67e5\u8a62 :</p> <ul> <li>\u7d66 \\(k\\)\uff0c\u7d66\u500b\u6307\u5b9a\u7684\u9ede \\(v_1,\\ldots ,v_k\\)\uff0c\u8f38\u51fa\u7d93\u904e\u9019\u4e9b\u6307\u5b9a\u7684\u9ede\u81f3\u5c11\u4e00\u6b21\u7684\u6700\u77ed\u8def\u5f91\u9577\u5ea6</li> </ul> <p>\\(n\\le 10^5, \\sum k \\le 2n\\)</p> \u601d\u8def <p>\u8003\u616e\u6240\u6709\u9ede\u90fd\u9078\uff0c\u7b54\u6848 = \u9664\u4e86\u67d0\u4e00\u689d path \u4e4b\u5916\u6240\u6709\u908a\u90fd\u8d70\u904e\u5169\u6b21 = \u6a39\u4e0a\u908a\u6b0a\u7e3d\u548c \\(\\times 2\\) - \u6700\u9060\u9ede\u5c0d\u8ddd\u96e2\uff08\u6a39\u76f4\u5f91\uff09</p> <p>\u8003\u616e\u4e00\u4e9b\u9ede\u6240\u5f62\u6210\u7684\u5b50\u5716\u7684\u7b54\u6848\uff0c\u6a39\u4e0a\u908a\u6b0a\u7e3d\u548c \\(\\times 2\\) - \u6700\u9060\u9ede\u5c0d\u8ddd\u96e2\uff08\u6a39\u76f4\u5f91\uff09\u3002\u5c0d\u65bc\u908a\u6b0a\u7e3d\u548c\uff0c\u6703\u5f62\u6210\u4e00\u689d\u8ff4\u8def</p> <p>\u8003\u616e dfs \u5e8f\u662f\u4e00\u9032\u4e00\u51fa\uff0c\u525b\u597d\u6bcf\u689d\u908a\u90fd\u8d70\u904e\u5169\u6b21\u3002\u6211\u5011\u5c07\u6709\u9078\u7684\u9ede \\(v_1,\\ldots v_k\\) \u6309\u7167 dfs \u5e8f\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\\(ans=dis(v_1,v_2)+dis(v_2, v_3) + \\ldots + dis(v_k, v_1)\\)\u3002\u5c0d\u65bc\u6a39\u76f4\u5f91\uff0c\u6211\u5011\u7528\u5169\u6b21\u8caa\u5fc3\u7684\u65b9\u6cd5\u505a\uff0c\u5148\u96a8\u4fbf\u6311\u4e00\u500b\u6307\u5b9a\u7684\u9ede\uff0c\u679a\u8209\u5176\u4ed6\u6307\u5b9a\u9ede\uff0c\u7528 LCA \u7b97\u8207\u4ed6\u5011\u4e4b\u4e2d\u7684\u8ab0\u8ddd\u96e2\u6700\u5927\uff0c\u7136\u5f8c\u518d\u5f9e\u90a3\u500b\u9ede\u505a\u4e00\u6b21\uff0c\u7e3d\u8907\u96dc\u5ea6 \\(O(\\sum k \\log n)\\)</p> <p>\u53c3\u8003 : https://sorahisa-rank.github.io/nhspc-fin/2018/editorial.pdf#page=23</p> \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd 2022 pF. LCA \u904a\u6232 (LCA) <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u7d66\u9ede \\(A\\)\uff0cAlice \u6703\u60f3\u8457\u4e00\u500b\u9ede \\(B\\)\uff0cBob \u7684\u76ee\u6a19\u662f\u627e\u51fa \\(B\\)\u3002\u6bcf\u6b21 Bob \u53ef\u4ee5\u8a62\u554f :</p> <ul> <li>\u628a root \u5b9a\u70ba \\(C\\)\uff0c\\(\\text{lca}(A, B)\\) \u662f\u591a\u5c11</li> </ul> <p>\u5169\u8005\u7686 play optimal \u7684\u60c5\u6cc1\u4e0b\uff0c\u554f Bob \u81f3\u5c11\u9700\u8981\u8a62\u554f\u5e7e\u6b21</p> \u601d\u8def <p>\u7b49\u50f9\u65bc\u5c07\u6839\u90fd\u5b9a\u70ba A\uff0cLCA(B, C) \u662f\u591a\u5c11</p> <p> </p> <p>\u6bcf\u6b21\u8a62\u554f\u5b8c\u90fd\u6703\u78ba\u5b9a\u7b54\u6848\u662f\u4e0d\u662f\u5728\u9019\u5b50\u6a39\uff0c\u5982\u679c\u8981\u78ba\u5b9a\u5728\u54ea\u500b\u5b50\u6a39\uff0c\u6700\u5dee\u8981\u7528\u300c\u5b50\u6a39\u6578\u91cf -1 \u6b21\u300d\uff0c\u6240\u4ee5\u8981\u82b1\u8cbb\u6700\u591a\u6b21\u7684\u5b50\u6a39\u5fc5\u5b9a\u6700\u5148\u8a62\u554f\uff0c\u6240\u4ee5\u53ef\u4ee5\u5217\u51fa :</p> <p>\u5047\u8a2d \\(v_1, v_2, \\ldots\\) \u662f\u4ee5 \\(dp[v_1] \\ge dp[v_2] \\ge \\ldots\\) \u6392\u5e8f\u904e\u7684</p> \\[dp[u]=\\max\\{ dp[v_1]+0, dp[v_2] + 1, dp[v_3] + 2, \\ldots \\}\\] JOI 2022 Final \u94c1\u8def\u65c5\u884c 2 <p>\u7d66 \\(n\\) \u500b\u9ede\uff0c\\(m\\) \u689d\u7dda\u8def\uff0c\u7b2c \\(i\\) \u689d\u7dda\u8d77\u9ede\u70ba \\(a_i\\)\uff0c\u7d42\u9ede\u70ba \\(b_i\\)\uff0c\u4e0a\u8eca\u7684\u4f4d\u7f6e\u4e0d\u80fd\u96e2\u8d77\u9ede\u8d85\u904e \\(k\\) \u500b\u9ede\uff0c\u53ef\u5728\u4efb\u4f55\u4e00\u7ad9\u4e0b\u8eca\u3002\u6709 \\(q\\) \u7b46\u8a62\u554f:</p> <ul> <li>\\(\\text{query}(s,t):\\) \u5f9e \\(s\\) \u958b\u59cb\u5230 \\(t\\)\uff0c\u6700\u5c11\u642d\u4e58\u5e7e\u689d\u4e0d\u540c\u7684\u7dda\u8def\uff0c\u82e5\u7121\u8ad6\u5982\u4f55\u90fd\u6c92\u8fa6\u6cd5\u5247\u8f38\u51fa -1</li> </ul> <p>\\(n\\le 10^5,m\\le 2\\times 10^5,q\\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u76ee\u524d\u7684\u7d93\u9a57\u4f86\u770b\uff0c\u51e1\u662f\u9700\u8981\u591a\u6b21\u7121\u5e8f\u8a62\u554f\u6216\u91cd\u8907\u591a\u6b21\u8655\u7406\u4e00\u5f35\u5716\u6642\uff0c\u5927\u6a5f\u7387\u662f\u9700\u8981\u7528\u5230\u500d\u589e\u7684\u3002</p> <p>\u4ee4 \\(le(i,j),ri(i,j)\\) \u4ee5 \\(i\\) \u70ba\u8d77\u9ede\uff0c\u642d\u4e58 \\(2^j\\) \u689d\u4e0d\u540c\u7684\u7dda\u8def\uff0c\u6700\u5de6/\u53f3\u80fd\u5230\u54ea\u88e1</p> \\[ le(i,j)=\\min\\limits_{k\\in[le(i-1,j),ri(i-1,j)]}le(i-1,k) \\\\ri(i,j)=\\max\\limits_{k\\in[le(i-1,j),ri(i-1,j)]} ri(i-1,k) \\] <p>\u521d\u59cb\u503c \\(le(i,0),re(i,0)\\) \u53ef\u4ee5\u5229\u7528\u55ae\u8abf\u968a\u5217\u4f86\u7dad\u8b77\uff0c\u4f8b\u5982 \\(re(i,0)\\)\uff0c\u6211\u5011\u4e00\u958b\u59cb\u5148\u5c07 interval \u7528\u5de6\u754c\u5c0f\u5230\u5927 sort\uff0c\u7136\u5f8c queue \u4e2d\u4fdd\u7559\u7684\u6703\u662f \\(l_i\\) \u905e\u589e\uff0c\\(r_i\\) \u905e\u6e1b</p> <p> </p> <p>\u90a3\u9ebc\u8f49\u79fb\u7684\u90e8\u5206\u6211\u53ef\u4ee5\u5c0d\u65bc\u6bcf\u500b \\(le(*,j),re(*,j)\\) \u90fd\u958b\u4e00\u9846\u7dda\u6bb5\u6a39\uff0c\u76f4\u63a5\u53bb\u5340\u9593\u67e5\u8a62\u6975\u503c\u5373\u53ef</p> <p>\u6700\u5f8c \\(\\text{query}(s,t)\\) \u6211\u5011\u7528\u985e\u4f3c LCA \u67e5\u8a62\u7684\u65b9\u5f0f\uff0c\u5f9e \\(s\\) \u958b\u59cb\u64f4\u5c55\uff0c\u76f4\u5230\u5340\u9593\u6070\u597d\u5dee\u4e00\u9ede\u6db5\u84cb \\([s,t]\\)</p> <p>\u53c3\u8003\u81ea: https://www.luogu.com.cn/blog/jjsnam/solution-P8163</p> code <pre><code>/* code by jjsnam 2022.4.29 */\n/* Using Segment Tree */\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n\n#define ls (id &lt;&lt; 1)\n#define rs (id &lt;&lt; 1 | 1)\n#define mid ((l + r) &gt;&gt; 1)\n#define u first\n#define v second\n\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int maxn = 1e5 + 5;\nconst int maxm = 2e5 + 5;\n\nint le[maxn][17], ri[maxn][17];\npii up[maxm], down[maxm];\nint cnt_up, cnt_down;\nint n, m, K, Q;\nstruct Segment_Tree {\n    struct Node {\n        int left, right;\n    } tr[maxn &lt;&lt; 2];\n\n    void pushup(int id) {\n        tr[id].left = min(tr[ls].left, tr[rs].left);\n        tr[id].right = max(tr[ls].right, tr[rs].right);\n    }\n\n    void build(int id, int l, int r, int k) {\n        if (l == r) {\n            tr[id].left = le[l][k];\n            tr[id].right = ri[r][k];\n            return;\n        }\n        build(ls, l, mid, k);\n        build(rs, mid + 1, r, k);\n        pushup(id);\n    }\n\n    int query_left(int id, int l, int r, int a, int b) {\n        if (a &lt;= l &amp;&amp; r &lt;= b) {\n            return tr[id].left;\n        }\n        int res = 1e9;\n        if (a &lt;= mid) res = min(res, query_left(ls, l, mid, a, b));\n        if (b &gt; mid) res = min(res, query_left(rs, mid + 1, r, a, b));\n        return res;\n    }\n\n    int query_right(int id, int l, int r, int a, int b) {\n        if (a &lt;= l &amp;&amp; r &lt;= b) {\n            return tr[id].right;\n        }\n        int res = -1e9;\n        if (a &lt;= mid) res = max(res, query_right(ls, l, mid, a, b));\n        if (b &gt; mid) res = max(res, query_right(rs, mid + 1, r, a, b));\n        return res;\n    }\n} root[17];\n\nvoid Get_start() {\n    for (int i = 1; i &lt;= n; i++) le[i][0] = ri[i][0] = i;\n    sort(up + 1, up + cnt_up + 1);\n    sort(down + 1, down + cnt_down + 1, greater&lt;pii&gt;());\n    /* \u5355\u8c03\u961f\u5217 O(m) */\n    int q[maxm], hh = 1, tt = 0;\n\n    /* \u5904\u7406\u53f3 */\n    for (int i = 1, j = 1; i &lt;= n; i++) {\n        while (j &lt;= cnt_up &amp;&amp; up[j].u &lt;= i) {\n            int r = up[j].v;\n            while (hh &lt;= tt &amp;&amp; up[q[tt]].v &lt;= r) tt--;\n            q[++tt] = j;\n            j++;\n        }\n        while (hh &lt;= tt &amp;&amp; up[q[hh]].u &lt;= i - K) hh++;\n        if (hh &lt;= tt) ri[i][0] = max(ri[i][0], up[q[hh]].v);\n    }\n\n    /* init */\n    hh = 1, tt = 0;\n\n    /* \u5904\u7406\u5de6 */\n    for (int i = n, j = 1; i &gt; 0; i--) {\n        while (j &lt;= cnt_down &amp;&amp; down[j].u &gt;= i) {\n            int l = down[j].v;\n            while (hh &lt;= tt &amp;&amp; down[q[tt]].v &gt;= l) tt--;\n            q[++tt] = j;\n            j++;\n        }\n        while (hh &lt;= tt &amp;&amp; down[q[hh]].u &gt;= i + K) hh++;\n        if (hh &lt;= tt) le[i][0] = min(le[i][0], down[q[hh]].v);\n    }\n}\n\nvoid init() {\n    Get_start();\n    root[0].build(1, 1, n, 0);\n    for (int k = 1; k &lt;= 16; k++) {\n        for (int i = 1; i &lt;= n; i++) {\n            le[i][k] = root[k - 1].query_left(1, 1, n, le[i][k - 1], ri[i][k - 1]);\n            ri[i][k] = root[k - 1].query_right(1, 1, n, le[i][k - 1], ri[i][k - 1]);\n        }\n        root[k].build(1, 1, n, k);\n    }\n}\n\nint query(int S, int E) {\n    int res = 0;\n    int l = S, r = S;\n    for (int k = 16; k &gt;= 0; k--) {\n        int L = root[k].query_left(1, 1, n, l, r);\n        int R = root[k].query_right(1, 1, n, l, r);\n        if (L &lt;= E &amp;&amp; E &lt;= R) continue;\n        l = L, r = R;\n        res += (1 &lt;&lt; k);\n    }\n    int L = root[0].query_left(1, 1, n, l, r);\n    int R = root[0].query_right(1, 1, n, l, r);\n    if (L &lt;= E &amp;&amp; E &lt;= R)\n        return res + 1;\n    else\n        return -1;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n\n    cin &gt;&gt; n &gt;&gt; K &gt;&gt; m;\n    for (int i = 1, a, b; i &lt;= m; i++) {\n        cin &gt;&gt; a &gt;&gt; b;\n        if (a &lt; b)\n            up[++cnt_up] = make_pair(a, b);\n        else\n            down[++cnt_down] = make_pair(a, b);\n    }\n    init();\n    cin &gt;&gt; Q;\n    int s, e;\n    while (Q--) {\n        cin &gt;&gt; s &gt;&gt; e;\n        cout &lt;&lt; query(s, e) &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre> CSES - Cyclic Array <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u74b0\u72c0\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u554f\u81f3\u5c11\u5206\u6210\u5e7e\u6bb5\u53ef\u4f7f\u6bcf\u6bb5\u7684\u7e3d\u548c\u90fd \\(\\le k\\)</p> <p>\\(n\\le 2\\times 10^5, 1\\le a_i\\le 10^9,1\\le k\\le 10^{18}\\)</p> \u601d\u8def <p>\u500d\u589e\u6cd5\uff0c\\(dp(i,j)\\) \u70ba\u5f9e \\(i\\) \u958b\u59cb\uff0c\u8df3\u4e86 \\(2^j\\) \u6bb5 subarray\uff0c\u6700\u9060\u53ef\u8df3\u5230\u54ea\u88e1\uff0c\u8f49\u79fb\u5982\u4e0b</p> \\[ dp(i,j)=\\max \\{dp(dp(i,j-1),j-1) \\} \\] <p>\u521d\u59cb\u5316\u7684\u8a71 \\(dp(i,0)\\) \u5c31\u662f\u5f9e \\(i\\) \u958b\u59cb\u6700\u9060\u8d70\u5230\u54ea\u88e1\u7e3d\u548c\u9084\u662f \\(\\le k\\)</p> <p>\u6240\u4ee5\u6211\u5011\u5c31\u53ef\u4ee5\u679a\u8209\u8d77\u9ede\uff0c\u5229\u7528\u4e8c\u5206\u641c Jumping \u5beb\u6cd5\u770b\u81f3\u5c11\u9700\u8981\u5e7e\u6bb5 subarray\uff0c\u4e5f\u5c31\u662f\u5f9e\u9ad8 bit \u958b\u59cb\u5f80\u4e0b\u679a\u8209\uff0c\u82e5\u8df3 \\(2^j\\) \u6bb5\u4e0d\u6703\u8d85\u904e\u7d42\u9ede\u7684\u8a71\u5c31\u8df3\uff0c\u7136\u5f8c\u6700\u5f8c\u518d\u628a\u6240\u6709\u8d77\u9ede\u7684\u7b54\u6848\u53d6 min \u5373\u53ef\u3002\u8907\u96dc\u5ea6 \\(O(n\\log n)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt; \n#define int long long\nusing namespace std;\n\nconst int MAXN = 2e5 + 5;\nint n, k;\nint a[MAXN + MAXN];\nint dp[19][MAXN + MAXN];\n\nvoid build() {\n    long long sum = 0;\n    int r = n + n;\n    for (int i = n + n; i &gt;= 1; i--) {\n        sum += a[i];\n        while (sum &gt; k) {\n            sum -= a[r--];\n        }\n        dp[0][i] = r;\n    }\n    for (int j = 1; (1 &lt;&lt; j) &lt;= n + n; j++) {\n        for (int i = 1; i &lt;= n + n; ++i) {\n            if (dp[j - 1][i]) {\n                dp[j][i] = dp[j - 1][dp[j - 1][i] + 1];\n            }\n        }\n    }\n}\n\nint query(int i) {\n    int l = i;\n    int cnt = 0;\n    for (int j = 18; j &gt;= 0; j--) {\n        if (dp[j][l] &amp;&amp; dp[j][l] &lt;= i + n - 1) {\n            l = dp[j][l] + 1;\n            cnt += (1 &lt;&lt; j);\n        }\n    }\n    if (l &lt;= i + n - 1) {\n        cnt++;\n    }\n    return cnt;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; ++i) {\n        cin &gt;&gt; a[i];\n        a[i + n] = a[i];\n    }\n    build();\n    int res = n;\n    for (int i = 1; i &lt;= n; ++i) {\n        res = min(res, query(i));\n    }\n    cout &lt;&lt; res;\n    return 0;\n}\n</code></pre> \u6d1b\u8c37 P4281 [AHOI2008] \u7d27\u6025\u96c6\u5408 / \u805a\u4f1a / CS Academy - Triplet Min Sum <p>\u7d66\u4e00\u500b \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6709 \\(q\\) \u7b46\u67e5\u8a62:</p> <ul> <li>\\(\\text{query}(a,b,c):\\) \u8f38\u51fa\u8207 \\(a,b,c\\) \u4e09\u9ede\u8ddd\u96e2\u548c\u6700\u5c0f\u7684\u9ede \\(x\\)\uff0c\u4e26\u8f38\u51fa \\(x\\) \u8207\u4e09\u9ede\u7684\u8ddd\u96e2\u548c</li> </ul> <p>\\(3\\le n\\le 10^5, 1\\le q\\le 10^5\\)</p> \u601d\u8def <p>\u3010\u89c0\u5bdf\u3001\u7d50\u8ad6\u984c\u3011</p> <p> </p> <p>\u6211\u5011\u5148\u5c07\u4ed6\u5011\u5169\u5169\u4e4b\u9593\u7684 path \u756b\u51fa\u4f86\u770b\u770b\uff0c\u6211\u5011\u5148\u731c\u7b54\u6848\u662f a, b, c \u6df1\u5ea6\u6700\u4f4e\u7684\u5169\u500b\u9ede\u7684 lca</p> <p> </p> <p>\u4f46\u5982\u4e0a\u5716\uff0c\u7b54\u6848\u5c31\u6703\u662f\u932f\u7684\u3002\u90a3\u6211\u5011\u518d\u731c\u7b54\u6848\u662f lca(a, b), lca(b, c), lca(c, a) \u4e4b\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u90a3\u500b</p> <p>\u4f86\u9a57\u8b49\u4e00\u4e0b\u6b63\u78ba\u6027\uff0c\u5047\u8a2d\u662f lca(a, b) \u6df1\u5ea6\u6700\u5c0f\uff0c\u90a3\u9ebc\u6211\u5011\u53ef\u5c07 a, b \u8996\u70ba\u5728\u540c\u4e00\u500b\u5b50\u6a39\u88e1\u9762\uff0croot \u70ba lca(a, b)\uff0c\u82e5\u9078\u7684\u9ede\u5728 lca(a, b) \u66f4\u4e0b\u9762\u5247\u96e2 3 \u500b\u9ede\u7684\u8ddd\u96e2\u90fd\u66f4\u9060\uff0c\u82e5\u9078\u7684\u9ede\u5728 lca(a, b) \u66f4\u4e0a\u9762\u5247\u6703\u5c0d a, b \u5169\u500b\u9ede\u5404\u7522\u751f +1 \u7684\u8ca2\u737b\uff0c\u4e5f\u5c31\u662f + (\u5f80\u4e0a\u79fb\u7684\u8ddd\u96e2) * 2\uff0c\u800c\u5c0d c \u7522\u751f -1 \u7684\u8ca2\u737b\uff0c\u4e5f\u5c31\u662f - (\u5f80\u4e0a\u79fb\u7684\u8ddd\u96e2) * 1\uff0c\u986f\u7136\u96e2 a, b \u8d8a\u8fd1\u8d8a\u597d\u624d\u80fd\u4f7f * 2 \u7684\u8ca2\u737b\u76e1\u91cf\u5c0f</p> <p>\u5c0d\u65bc \\(x\\) \u8207\u4e09\u9ede\u7684\u8ddd\u96e2\u548c\uff0c\u6211\u5011\u53ef\u4ee5\u63a1\u7528 dep(u) + dep(v) - 2 * dep(lca(u, v)) \u7684\u516c\u5f0f\u4f86\u8a08\u7b97</p>"},{"location":"graph/mst/","title":"MST","text":""},{"location":"graph/mst/#_1","title":"\u7b97\u6cd5\u6982\u8981","text":"\u6a21\u677f LOJ #123. \u6700\u5c0f\u751f\u6210\u6811 <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u5e36\u6b0a\u7121\u5411\u9023\u901a\u5716\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6a39\u7684\u908a\u6b0a\u548c</p> <p>\\(n\\le 2\\times 10^5,m\\le 5\\times 10^5\\)</p> \u5c0d\u65bc\u6bcf\u500b node \u5468\u570d\u6700\u5c0f edge \u4e00\u5b9a\u6703\u518d MST \u5167 <p>\u5982\u679c\u9019\u500b\u9ede\u65c1\u908a\u6700\u5c0f\u908a \\(e_{\\text{min}}\\) \u6c92\u9078\uff0c\u628a\u6700\u5c0f\u908a\u52a0\u5230 MST \u4e0a\u9762\uff0c\u6703\u7522\u751f\u4e00\u500b\u74b0</p> <p>\u628a\u9019\u500b\u74b0\u4e0a\u9762\u6700\u5927\u7684\u908a \\(e_{\\text{max}}\\) \u79fb\u9664\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u500b\u65b0\u7684\u751f\u6210\u6a39\uff0c\u65b0\u7684\u751f\u6210\u6a39\u7684\u6b0a\u91cd\u6bd4\u525b\u525b\u7684 MST \u5c0f\uff0c\u9019\u6a23\u7522\u751f\u77db\u76fe\uff0c\u6545\u5c0d\u65bc\u6bcf\u500b node \u5468\u570d\u6700\u5c0f edge \u4e00\u5b9a\u6703\u518d MST \u5167</p>"},{"location":"graph/mst/#kruskal","title":"Kruskal","text":"<p>\u6bcf\u6b21\u9078 \u6574\u5f35\u5716 \u6700\u5c0f\u6b0a\u7684\u908a</p> code <pre><code>bool cmp(Edge a, Edge b) {\n    return a.w &lt; b.w;\n}\n\nlong long Kruskal() {\n    sort(edges.begin(), edges.end(), cmp);\n    long long ans = 0;\n\n    for (int i = 0; i &lt; m; i++) {\n        Edge e = edges[i];\n\n        if (find(e.u) != find(e.v)) {\n            merge(e.u, e.v);\n            ans += e.w;\n        }\n    }\n\n    return ans;\n}\n</code></pre>"},{"location":"graph/mst/#prim","title":"Prim","text":"<p>\u53bb\u9078\u5f9e\u8d77\u9ede\u64f4\u5f35\u51fa\u4f86\u7684\u96c6\u5408\u5468\u570d\u7684\u6700\u5c0f\u908a</p> code <pre><code>void prim(int start) {\n    vector&lt;int&gt; dis(n, INF);\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n    pq.push({0, start});\n\n    while (pq.size()) {\n        auto [d, u] = pq.top();\n        pq.pop();\n\n        if (dis[u] != INF) continue;\n        dis[u] = d;\n\n        for (auto [v, w] : G[u]) {\n            pq.push({w, v}); // \u9019\u884c\u8ddf dijkstra \u4e0d\u540c\n        }\n    }\n}\n</code></pre>"},{"location":"graph/mst/#boruvka","title":"Boruvka","text":"<p>\u5c0d\u65bc\u76ee\u524d\u9078\u5230\u7684\u6bcf\u500b\u96c6\u5408\uff0c\u9078\u4ed6\u5468\u570d\u7684\u6700\u5c0f\u908a\u3002\u5c0d\u65bc\u9019\u7a2e\u908a\u6578\u5f88\u591a\uff0c\u4f46\u662f\u5f88\u591a\u908a\u7528\u4e0d\u5230\u7684\u6771\u897f\uff0cBoruvka \u6bd4\u8f03\u5bb9\u6613\u5feb\u901f\u7701\u7565\u6389\u4e0d\u9700\u8981\u7684\u908a\uff08\u53ea\u627e\u9700\u8981\u7684\u51fa\u4f86\uff09\u3002\u5be6\u4f5c\u4e0a\u6bcf\u6b21\u5c0d\u65bc\u6bcf\u500b\u9023\u901a\u584a\u9078\u5ef6\u4f38\u51fa\u53bb\u6700\u5c0f\u7684\u908a\uff0c\u7136\u5f8c\u7e2e\u9ede\uff0c\u9019\u6a23\u6bcf\u6b21\u9ede\u7684\u6578\u91cf\u90fd\u81f3\u5c11\u6703\u5c11\u4e00\u534a\uff0c\u6240\u4ee5\u53ea\u9700\u8981 \\(\\log n\\) \u8f2a\uff0c\u6bcf\u6b21 \\(O(m)\\)\uff0c\u8907\u96dc\u5ea6 \\(O(m\\log n)\\)\u3002</p> pseudocode <pre><code>while \u9023\u901a\u584a\u500b\u6578&gt;1\n    for \u6bcf\u500b\u9023\u901a\u584a i\n        mn[i] = \u9023\u63a5 i \u8207\u5176\u4ed6\u9023\u901a\u584a\u7684\u6700\u5c0f\u908a\n    for \u6bcf\u500b\u9023\u901a\u584a i\n        if mn[i] \u9023\u63a5\u5169\u500b\u4e0d\u540c\u7684\u9023\u901a\u584a\n            ans += mn[i]\n            Merge( mn[i] \u9023\u63a5\u7684\u9023\u901a\u584a )\n            \u9023\u901a\u584a\u500b\u6578 --\n</code></pre> code <pre><code>#include&lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nusing Graph = vector&lt;vector&lt;int&gt;&gt;;\n\nstruct DSU {\n    int cc;\n    vector&lt;int&gt; par, sz;\n    vector&lt;set&lt;int&gt;&gt; S;\n\n    DSU(int n = 0) : cc(n), par(n), sz(n, 1), S(n) {\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n    bool merge(int u, int v) {\n        u = find(u), v = find(v);\n        if (u == v) return false;\n        if (sz[u] &lt; sz[v]) swap(u, v);\n        par[v] = u;\n        sz[u] += sz[v];\n        for (int x : S[v]) {\n            S[u].insert(x);\n        }\n        S[v].clear();\n        cc--;\n        return true;\n    }\n};\n\nstruct Edge {\n    int u, v;\n    int cost;\n};\n\nbool operator&lt;(const Edge &amp;a, const Edge &amp;b) {\n    return a.cost &lt; b.cost;\n}\n\nconst int INF = 2e18;\n\nint MST(int n, vector&lt;Edge&gt; edges) {\n    int m = edges.size();\n\n    DSU dsu(n);\n    vector&lt;Edge&gt; nei(n);\n\n    int mst_ans = 0;\n\n    int conti = true;\n    while (conti) {\n        conti = false;\n        fill(nei.begin(), nei.end(), Edge{-1, -1, INF});\n\n        for (auto [u, v, cost] : edges) {\n            int fu = dsu.find(u), fv = dsu.find(v);\n            if (fu == fv) continue;\n\n            nei[fu] = min(nei[fu], {u, v, cost});\n            nei[fv] = min(nei[fv], {v, u, cost});\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            auto e = nei[i];\n            if (e.u == -1) continue;\n            if (dsu.find(e.u) != dsu.find(e.v)) {\n                dsu.merge (e.u, e.v);\n                mst_ans += e.cost;\n                conti = true;\n            }\n        }\n    }\n\n    return mst_ans;\n}\n\nsigned main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;Edge&gt; edges;\n\n    int u, v, w;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--, v--;\n        edges.push_back({u, v, w});\n    }\n\n    cout &lt;&lt; MST(n, edges) &lt;&lt; \"\\n\";\n}\n</code></pre> 2020 \u82b1\u4e2d\u4e00\u6a21 E. \u9053\u8def\u5efa\u8a2d (Road) <p>\u7d66 \\(n\\) \u500b\u9ede\uff0c\u9ede\u6709\u6b0a\u503c \\(a_i\\)\uff0c\\(i,j\\) \u52a0\u908a\u7684\u82b1\u8cbb\u70ba \\(a_i+a_j\\)\u3002\u53e6\u5916\u7d66 \\(m\\) \u689d\u7279\u6b8a\u908a \\((u, v, w)\\)\uff0c\u8868\u793a\u5c0d \\(u,v\\) \u52a0\u908a\uff0c\u82b1\u8cbb\u53ea\u80fd\u70ba \\(w\\)\uff0c\u800c\u975e \\(a_u+a_v\\)\u3002\u554f\u9019\u4e9b\u9ede\u9023\u8d77\u4f86\u5f62\u6210\u6a39\u7684\u6700\u5c0f\u82b1\u8cbb</p> <p>\\(n,m\\le 10^5,a_i,w\\le 10^{7}\\)</p> \u601d\u8def <p>\u6211\u5011\u5229\u7528 borovka \u7684\u60f3\u6cd5\uff0c\u6bcf\u6b21\u5c0d\u9023\u901a\u584a\u9078\u300c\u975e\u7279\u6b8a\u908a\u300d\u4e4b\u4e2d\u7684\u6700\u5c0f\u908a\uff0c\u653e\u9032\u53bb\u4e00\u500b <code>vector</code>\uff0c\u76f4\u5230\u6574\u5f35\u5716\u505a\u5b8c\uff0c\u6216\u505a\u4e0d\u4e0b\u53bb</p> <p>\u81f3\u65bc\u600e\u9ebc\u7528 borovka \u9078\u908a\uff0c\u6211\u5011\u5148\u770b\u7576\u524d\u9023\u901a\u584a \\(a_i\\) \u6700\u5c0f\u7684\u9ede\u662f\u5426\u53ef\u4ee5\u9023\u9805\u4e0d\u540c\u9023\u901a\u584a\u7684 \\(a_j\\)\uff0c\\(a_j\\) \u6eff\u8db3 \\((i,j)\\) \u975e\u7279\u6b8a\u908a\u7684 \\(j\\) \u4e4b\u4e2d\u6700\u5c0f\u7684\u3002\u82e5\u90fd\u6c92\u8fa6\u6cd5\u7684\u8a71\uff0c\u90a3\u5c31\u8981\u5f9e\u5c0f\u5230\u5927\u679a\u8209\u9023\u901a\u584a\u5167\u7684 \\(a_i\\)\uff0c\u548c\u4e0d\u5728\u9023\u901a\u584a\u7684 \\(a_j\\)\uff0c\u6eff\u8db3 \\((i,j)\\) \u975e\u7279\u6b8a\u908a\u7684 \\(j\\) \u4e4b\u4e2d\u6700\u5c0f\u7684\uff0c\u7121\u6cd5\u9023\u63a5\u7684\u60c5\u6cc1\u6700\u591a\u53ea\u6703\u6709 \\(m\\) \u6b21\uff08\\(m\\) \u689d\u7279\u6b8a\u908a\uff09\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u662f\u5408\u7406\u7684</p> <p>\u6700\u5f8c\u7528 Kruskal \u5728\u7279\u6b8a\u908a\u548c\u525b\u525b\u7528 borovka \u9078\u7684\u908a\u4e0a\u9078 MST</p> <p>Borovka \u6bcf\u6b21\u57f7\u884c\u6703\u6709\u4e8c\u5206\u641c \\(O(n\\log n)\\)\uff0c\u5171\u6709 \\(O(\\log n)\\) \u8f2a\uff0c\u8907\u96dc\u5ea6  \\(O(n\\log^2 n)\\)\uff0cKruskal \u56e0\u70ba Borovka \u53ea\u6703\u6311\u51fa \\(n - 1\\) \u689d\u908a\uff0c\u6240\u4ee5\uff0c\u8907\u96dc\u5ea6\u9084\u662f \\(O(n\\log n)\\)\uff0c\u6240\u4ee5\u5171 \\(O(n\\log^2 n)\\)</p> <p>\u5be6\u4f5c\u4e0a\u8a73\u898b\u4ee3\u78bc</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;array&gt;\n#include &lt;iostream&gt;\n#include &lt;set&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nusing Edge = array&lt;int, 3&gt;;\nconst int INF = 1e9 + 7;\n\nstruct DSU {\n    int cc;\n    vector&lt;int&gt; par, sz;\n    vector&lt;set&lt;int&gt;&gt; S;\n\n    DSU(int n = 0) : cc(n), par(n), sz(n, 1), S(n) {\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n    bool join(int u, int v) {\n        u = find(u), v = find(v);\n        if (u == v) return false;\n        if (sz[u] &lt; sz[v]) swap(u, v);\n        par[v] = u;\n        sz[u] += sz[v];\n        for (int x : S[v]) {\n            S[u].insert(x);\n        }\n        S[v].clear();\n        cc--;\n        return true;\n    }\n};\n\nint n, m;\nvector&lt;int&gt; a, rk;\nvector&lt;vector&lt;int&gt;&gt; G;\nvector&lt;Edge&gt; edges;\nDSU dsu;\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    a = rk = vector&lt;int&gt;(n);\n    vector&lt;pair&lt;int, int&gt;&gt; tmp(n);\n    G = vector&lt;vector&lt;int&gt;&gt;(n);\n    dsu = DSU(n);\n    for (int i = 0; i &lt; n; i++) dsu.S[i] = {i};\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        tmp[i] = {a[i], i};\n    }\n    sort(tmp.begin(), tmp.end());\n    for (int i = 0; i &lt; n; i++) {\n        rk[tmp[i].second] = i;\n    }\n    sort(a.begin(), a.end());\n\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u = rk[u - 1], v = rk[v - 1];\n        edges.push_back({w, u, v});\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    for (int i = 0; i &lt; n; i++) {\n        sort(G[i].begin(), G[i].end());\n    }\n}\n\ninline bool contain(const vector&lt;int&gt; &amp;vec, int x) {\n    return binary_search(vec.begin(), vec.end(), x);\n}\n\nvoid collect_edges() {\n    bool conti = true;\n    while (conti) {\n        conti = false;\n\n        for (int root = 0; root &lt; n; root++) {\n            if (dsu.find(root) != root) continue;\n\n            const set&lt;int&gt; &amp;S = dsu.S[root];\n\n            vector&lt;int&gt; C;  // \u4e00\u4e9b\u4e0d\u5728 S \u6771\u897f\n            Edge best_edge = {INF, -1, -1};\n\n            int x = *S.begin();\n            for (int i = 0; i &lt; n; i++) {\n                if (dsu.find(i) == dsu.find(x)) continue;\n\n                if (contain(G[x], i) == false) {\n                    best_edge = {a[x] + a[i], x, i};\n                    break;\n                } else {\n                    C.push_back(i);\n                }\n            }\n            for (int u : S) {\n                for (int v : C) {\n                    if (contain(G[u], v) == false) {\n                        best_edge = min(best_edge, Edge{a[u] + a[v], u, v});\n                        break;\n                    }\n                }\n            }\n            if (best_edge[0] != INF) {\n                conti = true;\n                int u = best_edge[1];\n                int v = best_edge[2];\n                dsu.join(u, v);\n                edges.push_back(best_edge);\n            }\n        }\n    }\n}\n\nvoid mst() {\n    sort(edges.begin(), edges.end());\n    dsu = DSU(n);\n    long long ans = 0;\n    for (auto e : edges) {\n        int w = e[0];\n        int u = e[1];\n        int v = e[2];\n        if (dsu.find(u) != dsu.find(v)) {\n            dsu.join(u, v);\n            ans += w;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nint main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    init();\n    collect_edges();\n    mst();\n\n    return 0;\n}\n</code></pre> CF 888 G. Xor-MST <p>\u7d66 \\(n\\) \u9ede\u7121\u5411\u5b8c\u5168\u5716\uff0c\u6bcf\u500b\u9ede\u6709\u6b0a\u503c \\(a_i\\)\uff0c\\((i,j)\\) \u9023\u908a\u82b1\u8cbb \\(a_i\\oplus a_j\\) \uff0c\u554f\u6700\u5c0f\u751f\u6210\u6a39\u908a\u6b0a\u7e3d\u548c</p> <p>\\(n\\le 2\\times 10^5,a_i&lt; 2^{30}\\)</p> \u601d\u8def <p>\u8003\u616e borovka\uff0c\u8981\u600e\u9ebc\u5feb\u901f\u627e\u5230 \\(a_i \\oplus a_j\\) \u5462 ? 0-1 \u5b57\u5178\u6a39</p> <p> </p> <p>\u6211\u5011\u5c07 0-1 \u5b57\u5178\u6a39\u756b\u51fa\u4f86\uff0c\u6703\u89c0\u5bdf\u5230\u6211\u5011\u8981\u5c0d\u65bc\u6bcf\u5c64\u7684\u6bcf\u500b\u7bc0\u9ede\u5206\u6cbb\u7b97\u7b54\u6848</p> <p>\u5982\u5716\uff0c\u4e5f\u5c31\u662f\u8aaa\u8981\u53bb\u5169\u500b\u9023\u901a\u584a\u5206\u5225\u627e\u6700\u5c0f\u7684 \\(a_i,a_j\\) </p> <p>\u53c3\u8003 : CSDN</p> CF 1550 F. Jumping Around <p>\u7d66\u6578\u7dda\u4e0a \\(n\\) \u500b\u9ede \\(a_1,\\ldots, a_n\\)\uff0c\u548c \\(d\\)\uff0c\u8d77\u9ede\u70ba \\(a_s\\)\uff0c\\(q\\) \u7b46\u8a62\u554f \uff1a</p> <ul> <li>\u7d66 \\(x, k\\) \uff0c\u6bcf\u6b65\u53ef\u4ee5\u5f9e\u7576\u524d\u7684\u4f4d\u7f6e\u8df3\u5230\u503c\u57df\u5728 \\([d-k, d+k]\\) \u5167\u7684 \\(a_i\\)\uff0c\u554f\u80fd\u5426\u5f9e \\(a_s\\) \u62b5\u9054 \\(a_x\\)</li> </ul> <p>\\(n,q \\le 2\\times 10^5,k,a_i \\le 10^6\\)</p> \u601d\u8def <p>\u554f\u984c\u53ef\u4ee5\u8f49\u63db\u6210 : \u5efa\u7acb\u5b8c\u5168\u5716\uff0c\u6bcf\u908a\u7684\u908a\u6b0a\u5b9a\u70ba \\(|w-d|\\)\uff0c\u5c0d\u6bcf\u500b query \u56de\u7b54 \\(s\\to x\\) \u7684\u908a\u4e0a\u7684\u6700\u5927\u503c\u662f\u5426 \\(\\le k\\) </p> <p>\u4ee5\u4e0b\u63d0\u5230\u7684\u300c\u8ddd\u96e2\u300d\u70ba\u5169\u9ede\u4e4b\u9593\u7684\u908a\u6b0a</p> <p>\u300c\u8ddd\u96e2\u300d\u8d8a\u5c0f\u4ee3\u8868\u5728\u539f\u5716\u4e0a\u5169\u9ede\u4e4b\u9593\u7684\u908a\u6b0a\u8d8a\u63a5\u8fd1 \\(d\\)</p> <p>\u5c0d\u65bc\u6bcf\u500b\u9ede\u8981\u53bb\u627e\u7576\u524d\u4e0d\u540c\u9023\u901a\u584a\u4e14\u8ddd\u96e2\u6700\u5c0f\u7684\u9ede\uff0c\u6211\u5011\u53ef\u4ee5\u628a\u9019\u500b\u770b\u4f5c\u662f\u4e00\u500b\u8a62\u554f\uff0c\u5b58\u6210 tuple(\\(a_i, a_i + d,\\) \u6240\u5c6c\u7684\u9023\u901a\u584a)</p> <p>\u6211\u5011\u73fe\u5728\u4f86\u4e00\u8d77\u8655\u7406\u6bcf\u500b\u9ede\u4e1f\u51fa\u4f86\u7684 tuple\u3002\u6211\u5011\u53ef\u4ee5\u5f9e\u5de6\u5230\u53f3\u6383\u904e\u53bb\uff0c\u7dad\u8b77\u7576\u524d\u6700\u5f8c\u5169\u500b\u4e0d\u540c\u9023\u901a\u584a\u7684\u9ede\uff08\u5fc5\u514d\u5230\u6642\u5019\u627e\u5230\u5728\u76f8\u540c\u9023\u901a\u584a\u7684\u9ede\uff09\u3002\u7576\u6211\u5011\u78b0\u5230\u4e00\u500b tuple \u7684 \\(a_i+d\\) \u6642\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u5f9e\u9019\u5169\u500b tuple \u6311\u4e00\u500b\u51fa\u4f86\uff0c\u5c07\u7b54\u6848 \\(\\min\\) \u9032\u53bb\u6240\u5c6c\u7684\u9023\u901a\u584a</p> <p> \\(d=11,\\)\u5df2\u7d93\u505a\u597d\u7b2c\u4e00\u8f2a Borovka </p>"},{"location":"graph/mst/#_2","title":"\u7fd2\u984c","text":"CF 1468 J. Road Reform <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u9078\u51fa\u4e00\u68f5\u751f\u6210\u6a39\uff0c\u53ef\u4ee5\u5c0d\u6a39\u4e0a\u7684\u908a\u6b0a\u503c \\(+1\\) \u6216 \\(-1\\)</p> <p>\u4f7f\u6a39\u4e0a\u908a\u6b0a\u6700\u5927\u503c\u6070\u70ba \\(k\\)\uff0c\u6c42\u6700\u5c0f\u64cd\u4f5c\u6b21\u6578</p> <p>\\(n,m\\le 2\\times 10^5,k\\le 10^9\\)</p> \u601d\u8def <p>\u5206\u60c5\u6cc1\u8a0e\u8ad6\uff1a </p> <p>(\u4e00) \u53ea\u7528\u5c0f\u65bc \\(k\\) \u7684\u908a\u5373\u53ef\u9023\u901a\u6240\u6709\u9ede</p> <ul> <li> <p>\u984d\u5916\u9078\u4e00\u689d\u908a\uff0c\u66ff\u63db\u6a39\u4e2d\u7684\u908a\uff0c\\(\\text{cost}=|k-w|\\)</p> </li> <li> <p>\u9078\u6a39\u4e2d\u7684\u908a\uff0c\u5c07\u4ed6\u7684\u6b0a\u91cd\u52a0\u5230 \\(k\\)\uff0c\\(\\text{cost}=|k-w|\\)</p> </li> </ul> <p>(\u4e8c) \u53ea\u7528\u5c0f\u65bc \\(k\\) \u7684\u908a\u4e0d\u53ef\u9023\u901a\u6240\u6709\u9ede</p> <ul> <li>\u984d\u5916\u518d\u9078\u4e00\u4e9b\u908a\uff0c\\(\\text{cost}=\\sum (w-k)\\)</li> </ul> <p>\u53c3\u8003 : CSDN</p> CF 1095 F. Make It Connected <p>\u7d66\u5b9a \\(n\\) \u500b\u9ede\uff0c\u9ede\u6709\u6b0a\u503c \\(a_i\\)\uff0c\\(i,j\\) \u52a0\u908a\u7684\u82b1\u8cbb\u70ba \\(a_i+a_j\\)</p> <p>\u53e6\u5916\u7d66 \\(m\\) \u689d\u7279\u6b8a\u908a : \u8868\u793a\u5c0d \\(u,v\\) \u52a0\u908a\uff0c\u82b1\u8cbb\u4e5f\u53ef\u4ee5\u70ba \\(w\\)</p> <p>\u8981\u6c42\u5c07\u9019\u4e9b\u9ede\u9023\u8d77\u4f86\u5f62\u6210\u6a39\u7684\u6700\u5c0f\u82b1\u8cbb\u4ee3\u50f9</p> <p>\\(n,m\\le 2\\times 10^5,a_i,w\\le 10^{12}\\)</p> \u601d\u8def <p>\u6211\u5011\u771f\u7684\u9700\u8981 \\(n^2\\) \u679a\u8209 \\(a_i+a_j\\) \u55ce ?</p> <p>\u5148\u5c07 \\(a_i\\) \u5c0f\u5230\u5927 sort\uff0c\u4f9d\u64da Prim \u7684\u60f3\u6cd5\uff0c\u5047\u8a2d\u6211\u5011\u4e00\u958b\u59cb\u5728 \\(a_1\\)\uff0c\u6211\u5011\u6703\u53bb\u627e \\(a_i\\) \u4e0d\u5728\u9023\u901a\u584a\u88e1\u6700\u5c0f\u7684\u90a3\u500b\uff0c\u7528\u9023\u901a\u584a\u88e1 \\(a_i\\) \u6700\u5c0f\u7684\u8ddf\u4ed6\u9023\u908a\uff0c\u4e5f\u5c31\u662f \\(a_1\\leftrightarrow a_2\\)\uff0c\u63a5\u4e0b\u4f86\u6703\u627e\u5230 \\(a_3\\)\uff0c\\(a_1\\leftrightarrow a_3\\)\uff0c\u63a5\u8457 \\(a_1\\leftrightarrow a_4\\ldots\\)</p> <p>\u4e5f\u5c31\u662f\u6211\u5011\u53ea\u9700\u8003\u616e \\(a_1\\)\uff0c\u9023\u63a5\u5230\u6240\u6709\u9ede\u5373\u53ef\uff0c\u7136\u5f8c\u5728\u8ddf\u7279\u6b8a\u908a\u4e00\u8d77\u4e1f\u9032 Kruskal \u8dd1 MST</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\nint n,m,arr[1000000],pal[1000000];\nstruct edge{\n    int u,v,w;\n};\nint find(int u){\n    if(pal[u]==u) return u;\n    pal[u]=find(pal[u]);\n    return pal[u];\n}\nint cmp(edge a,edge b){\n    return a.w&lt;b.w;\n}\nsigned main(){\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin&gt;&gt;n&gt;&gt;m;\n    int mi=1e13,idx;\n    for(int i=1;i&lt;=n;i++){\n        cin&gt;&gt;arr[i];\n        if(arr[i]&lt;mi){\n            mi=arr[i],idx=i;\n        } \n    }\n    vector&lt;edge&gt; G;\n    for(int i=1,u,v,w;i&lt;=m;i++){\n        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;\n        G.push_back({u,v,w});\n    }\n    for(int i=1;i&lt;=n;i++){\n        G.push_back({idx,i,arr[idx]+arr[i]});\n    }\n    for(int i=1;i&lt;=n;i++) pal[i]=i;\n    sort(G.begin(),G.end(),cmp);\n    int ans=0;\n    for(auto [u,v,w]:G){\n        int x=find(u);\n        int y=find(v);\n        if(x==y) continue;\n        else{\n            pal[x]=y;\n            ans+=w;\n        }\n    }\n    cout&lt;&lt;ans&lt;&lt;\"\\n\";\n}\n</code></pre> Atcode abc282 E. Choose Two and Eat One <p>\u4e00\u500b\u76d2\u5b50\u4e2d\u6709 \\(N\\) \u500b\u7403\uff0c\u6bcf\u500b\u7403\u4e0a\u5beb\u8457\u4e00\u500b\u4ecb\u65bc \\(1\\) \u548c \\(M-1\\) \u4e4b\u9593\u7684\u6578\u5b57\u3002\u5c0d\u65bc \\(i=1,2,...,N\\)\uff0c\u7b2c \\(i\\) \u500b\u7403\u4e0a\u5beb\u8457\u6578\u5b57 \\(A_i\\)\u3002</p> <p>\u7576\u76d2\u5b50\u4e2d\u5269\u4e0b\u5169\u500b\u6216\u66f4\u591a\u7403\u6642\uff0c\u91cd\u8907\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ul> <li> <p>\u9996\u5148\uff0c\u4efb\u610f\u9078\u64c7\u5169\u500b\u7403\u3002</p> </li> <li> <p>\u7136\u5f8c\uff0c\u5f97\u5206\u7b49\u65bc \\((x^y + y^x) \\pmod{M}\\)\uff0c\u5176\u4e2d \\(x\\) \u548c \\(y\\) \u662f\u5169\u500b\u7403\u4e0a\u7684\u6578\u5b57</p> </li> </ul> <p>\u6700\u5f8c\uff0c\u4efb\u610f\u9078\u64c7\u5176\u4e2d\u4e00\u500b\u7403\u5403\u6389\uff0c\u5c07\u53e6\u4e00\u500b\u7403\u653e\u56de\u76d2\u5b50\u3002</p> <p>\u8f38\u51fa\u53ef\u80fd\u7372\u5f97\u7684\u6700\u5927\u7e3d\u5f97\u5206\u3002</p> <p>\\(N\\le 500,M\\le 10^9\\)</p> \u601d\u8def <p>\u984c\u76ee\u8f49\u63db\u6210 : \u908a\u6b0a\u70ba \\((x^y + y^x) \\pmod{M}\\)\uff0c\u554f MST</p> <p>\u56e0\u70ba\u300c\u9078\u64c7\u5176\u4e2d\u4e00\u500b\u7403\u5403\u6389\u300d\u5c31\u6709\u9ede\u50cf\u4f60\u78ba\u5b9a\u4e86 MST \u7684 leaf\uff0c\u7136\u5f8c\u628a\u9019\u500b leaf \u79fb\u9664\uff0c\u7136\u5f8c\u628a\u5b83\u79fb\u9664\uff0c\u7136\u5f8c\u5b50\u554f\u984c</p> <p>\u4f7f\u7528 Prim \u7b97\u6cd5 n<sup>2</sup> \u6c42\u89e3</p> \u6b50\u5e7e\u91cc\u5f97\u6700\u5c0f\u751f\u6210\u6a39 TIOJ 2164. \u904b\u9001\u86cb\u9905 <p>\u7d66 \\(n\\) \u500b\u4e09\u7dad\u5ea7\u6a19\u9ede\uff0c\\(i,j\\) \u9023\u908a\u7684\u82b1\u8cbb\u70ba \\((x_i-x_j)^ 2 + (y_i-y_j)^ 2 + (z_i-z_j)^ 2\\)\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6a39\u6b0a\u503c</p> <p>\\(n\\le 5000,|x_i|, |y_i|, |z_i| \\leq 10^ 5\\)</p> \u601d\u8def <p>Prim n<sup>2</sup> \u7b97\u6cd5</p> CF 1245 D. Shichikuji and Power Grid <p>\u5728\u4e00\u500b\u4e8c\u7dad\u5e73\u9762\u4e0a\u9762\uff0c\u6709 \\(n\\) \u500b\u57ce\u5e02\uff0c\u73fe\u5728\u6bcf\u500b\u57ce\u5e02\u90fd\u6c92\u6709\u96fb</p> <p>\u6709\u5169\u7a2e\u65b9\u6848 :</p> <ul> <li> <p>\u5efa\u767c\u96fb\u7ad9\uff0c\u4ee3\u50f9\u662f \\(c_i\\)</p> </li> <li> <p>\u62c9\u96fb\u7dda\uff0c\\((|x_i-x_j|+|y_i-y_j|)\\times (k_i+k_j)\\)</p> </li> </ul> <p>\u73fe\u5728\u554f\u4f60\u6700\u5c11\u82b1\u8cbb\u591a\u5c11\u4ee3\u50f9\uff0c\u80fd\u5920\u4f7f\u5f97\u5168\u90e8\u57ce\u5e02\u90fd\u6709\u96fb\uff0c\u8f38\u51fa\u65b9\u6848</p> <p>\\(n\\le 2000,x_i,y_i\\le 10^6,c_i,k_i\\le 10^9\\)</p> \u601d\u8def <p>\u5efa\u7acb\u8d85\u7d1a\u6e90\u9ede\u9023\u63a5\u6bcf\u500b\u9ede\uff0c\u908a\u6b0a\u70ba \\(c_i\\)\uff0c\u5171 \\(n+1\\) \u500b\u9ede\u505a MST</p> Atcoder abc270 F. Transportation <p>\u6709 \\(n\\) \u500b\u5cf6\u5dbc\uff0c\u5e8f\u5217 \\(X, Y\\)\uff0c\u548c \\(m\\) \u689d\u5efa\u908a\u7684\u65b9\u6848 \\((u, v, w)\\)\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5efa\u7acb\u4ee5\u4e0b\u4e09\u7a2e\u9053\u8def</p> <ul> <li> <p>\u5169\u500b\u5cf6\u5dbc\u76f4\u63a5\u9023\u63a5\u4e00\u500b\u6a4b\uff0c\u82b1\u8cbb \\(w\\)</p> </li> <li> <p>\u5728\u67d0\u4e00\u500b\u5cf6\u4e0a\u5efa\u7acb\u6e2f\u53e3\uff0c\u82b1\u8cbb \\(X_i\\)\uff0c\u6240\u6709\u5efa\u7acb\u6e2f\u53e3\u7684\u5cf6\u5dbc\u4e4b\u9593\u53ef\u4ee5\u4e92\u76f8\u62b5\u9054</p> </li> <li> <p>\u5728\u67d0\u4e00\u500b\u5cf6\u4e0a\u5efa\u7acb\u6a5f\u5834\uff0c\u82b1\u8cbb \\(Y_i\\)\uff0c\u6240\u6709\u5efa\u7acb\u6a5f\u5834\u7684\u5cf6\u5dbc\u4e4b\u9593\u53ef\u4ee5\u4e92\u76f8\u62b5\u9054</p> </li> </ul> <p>\u6c42\u6700\u5c0f\u82b1\u8cbb\u4f7f\u5f97\u6240\u6709\u5cf6\u5dbc\u8ddf\u5cf6\u5dbc\u9023\u901a</p> <p>\\(n,m\\le 2\\times 10^5,X_i,Y_i,w_i\\le 10^9\\)</p> \u601d\u8def <p>\u5efa\u7acb\u5169\u500b\u8d85\u7d1a\u6e90\u9ede\uff0c\u9023\u63a5\u6bcf\u500b\u9ede\uff0c\u4ee3\u8868\u84cb\u6e2f\u53e3\u6216\u6a5f\u5834</p> <p>\u53ea\u662f\u6211\u5011\u4e0d\u4e00\u5b9a\u6703\u84cb\u6e2f\u53e3\u6216\u6a5f\u5834\uff0c\u6240\u4ee5\u5206 4 \u500b case</p> <ul> <li> <p>Kruskal(\u6a4b)</p> </li> <li> <p>Kruskal(\u6a4b + \u6e2f\u53e3)</p> </li> <li> <p>Kruskal(\u6a4b + \u6a5f\u5834)</p> </li> <li> <p>Kruskal(\u6a4b + \u6e2f\u53e3 + \u6a5f\u5834)</p> </li> </ul> code <pre><code>??? note \"code\"\n```cpp linenums=\"1\"\n#include&lt;bits/stdc++.h&gt;\n#define int long long\n#define x first\n#define y second\n#define PII pair &lt;int, int&gt;\n#define endl '\\n'\nconst int INF = 1e18;\n\nusing namespace std;\nconst int N = 200005;\n\nstruct Edge {\n    int u, v, w;\n}e[N], g[N * 3];\nint q[N], x[N], y[N];\n\nbool cmp(Edge a, Edge b) {\n    return a.w &lt; b.w;\n}\n\nint find(int x) {\n    if (x != q[x]) q[x] = find(q[x]);\n    return q[x];\n}\n\nint Kruskal(int n, int m) {\n    sort(g + 1, g + m + 1, cmp);\n    for (int i = 1; i &lt;= n; i ++) q[i] = i;\n\n    int res = 0;\n    int cnt = 0;\n    for (int i = 1; i &lt;= m; i ++) {\n        auto [u, v, w] = g[i];\n        int fu = find(u), fv = find(v);\n\n        if (fu != fv) {\n            q[fu] = fv;\n            res += w;\n            cnt ++;\n        }\n    }\n\n    if (cnt == n - 1) return res;\n    else return INF;\n}\n\n\nvoid solve() {\n    int n , m;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    int res = 1e18;\n\n    for (int i = 1; i &lt;= n; i ++) {\n        cin &gt;&gt; x[i];\n    }\n    for (int i = 1; i &lt;= n; i ++) {\n        cin &gt;&gt; y[i];\n    }\n\n    for (int i = 1; i &lt;= m; i ++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        e[i] = {u, v, w};\n    }\n\n    for (int i = 1; i &lt;= m; i ++) {\n        g[i] = e[i];\n    }\n    res = min(res, Kruskal(n, m));\n\n    //\u98de\u673a\n    for (int i = 1; i &lt;= m; i ++) {\n            g[i] = e[i];\n    }\n    for (int i = 1; i &lt;= n; i ++) {\n        g[i + m] = {i, n + 1, x[i]};\n    }\n    res = min(res, Kruskal(n + 1, m + n));\n    //\u6d77\n    for (int i = 1; i &lt;= m; i ++) {\n        g[i] = e[i];\n    }\n    for (int i = 1; i &lt;= n; i ++) {\n        g[i + m] = {i, n + 1, y[i]};\n    }\n    res = min(res, Kruskal(n + 1, m + n));\n\n    //\u98de\u673a\u548c\u6d77\n    for (int i = 1; i &lt;= m; i ++) {\n        g[i] = e[i];\n    }\n    for (int i = 1; i &lt;= n; i ++) {\n        g[i + m] = {i, n + 1, x[i]};\n    }\n    for (int i = 1; i &lt;= n; i ++) {\n        g[i + n + m] = {i, n + 2, y[i]};\n    }\n    res = min(res, Kruskal(n + 2, m + n + n));\n\n    cout &lt;&lt; res;\n\n}\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int t; t = 1;\n    //cin &gt;&gt; t;\n\n    while (t --) {\n        solve();\n    }\n\n    return 0;\n}\n</code></pre> K \u5ea6\u9650\u5236\u751f\u6210\u6a39 CF 125 E. MST Company <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u9023\u901a\u5716\uff0c\u627e\u6700\u5c0f\u751f\u6210\u6a39\u6eff\u8db3\u8207\u9ede \\(1\\) \u7684\u5ea6\u6578\u8981\u6070\u70ba \\(k\\)\uff0c\u5370\u51fa\u6a39\u4e0a\u7684\u908a\uff0c\u6216\u7121\u89e3</p> <p>\\(n,k\\le 5000,m\\le 10^5,w_i\\le 10^5\\)</p> \u601d\u8def <p>\u898b Aliens \u512a\u5316</p> LeetCode 1579. Remove Max Number of Edges to Keep Graph Fully Traversable <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u908a\u6709\u4e09\u7a2e type \uff1a</p> <ul> <li> <p>Alice \u7684\u908a</p> </li> <li> <p>Bob \u7684\u908a</p> </li> <li> <p>Alice \u8ddf Bob \u7684\u908a</p> </li> </ul> <p>\u6700\u591a\u53ef\u4ee5\u79fb\u9664\u591a\u5c11\u689d\u908a\u4f7f\u5f97\u5206\u5225\u5c0d\u65bc Bob \u8ddf Alice \u5716\u90fd\u9084\u662f\u9023\u901a\u7684</p> <p>\\(n,m \\le 10^5\\)</p> \u601d\u8def <p>\u522a\u6389\u7684\u908a\u5176\u5be6\u5c31\u662f Kruskal \u5167\u767c\u73fe\u5169\u908a\u5df2\u5728\u540c\u4e00\u500b\u9023\u901a\u584a\u7684\u60c5\u6cc1</p> <p>\u56e0\u70ba\u6c92\u6709\u908a\u6b0a\uff0c\u4f9d Kruskal \u7684\u6b63\u78ba\u6027\uff0c\u908a\u7684\u9806\u5e8f\u662f\u4e0d\u91cd\u8981\u7684\u3002\u986f\u7136\u6211\u5011\u5171\u7528\u908a\u8981\u6bd4\u53ea\u6709\u4e00\u500b\u4eba\u7684\u908a\u9084\u66f4\u4e0d\u5bb9\u6613\u88ab\u522a\u6389\uff0c\u56e0\u70ba\u522a\u6389\u4ed6\u7684\u8a71\u6703\u5f71\u97ff Alice \u8ddf Bob \u5169\u4eba\u7684\u8ca2\u737b</p> <p>\u6211\u5011\u5148\u8dd1 Kruskal(\u5171\u7528\u908a)\uff0c\u5148\u628a\u5171\u7528\u908a\u9078\u8d77\u4f86\u9019\u6a23\u7b49\u7b49\u5c31\u4e0d\u6703\u88ab\u522a\u6389</p> <p>\u7136\u5f8c\u518d\u63a5\u8457\u8dd1 Alice\uff0cBob\uff0c\u9019\u6642\u5019\u82e5\u767c\u73fe\u662f\u5728\u540c\u4e00\u500b\u9023\u901a\u584a\u6642\u6703\u522a\u6389\u7684\u5c31\u662f only Alice \u6216 only Bob \u7684\u908a\uff0c\u4e0d\u6703\u662f\u5171\u7528\u908a</p> code <p>\u524d\u5f80 LeetCode solution</p> USACO Open 2021 Gold P2.Portals <p>\u6709\u4e00\u500b\u7531 \\(N\\) \u500b\u7de8\u865f\u70ba \\(1\\dots N\\) \u7684\u7d50\u9ede\u4ee5\u53ca \\(2N\\) \u500b\u7de8\u865f\u70ba \\(1\\cdots 2N\\) \u7684\u7d50\u69cb\u3002\u6bcf\u500b\u50b3\u9001\u9580\u9023\u63a5\u5169\u500b\u4e0d\u540c\u7684\u7d50\u9ede \\(u\\) \u548c \\(v\\)\uff08\\(u\u2260v\\)\uff09\u3002\u53ef\u80fd\u6709\u591a\u500b\u50b3\u9001\u9580\u9023\u63a5\u540c\u4e00\u5c0d\u7d50\u9ede\u3002</p> <p>\u6bcf\u500b\u9ede\u8207\u56db\u500b\u4e0d\u540c\u7684\u50b3\u9001\u9580\u76f8\u9023\uff0c\u8207 \\(v\\) \u76f8\u9023\u7684\u50b3\u9001\u9580\u662f \\(p_v=[p_{v,1},p_{v,2},p_{v,3},p_{v,4}]\\) </p> <p>\u7576\u524d\u7684\u4f4d\u7f6e\u53ef\u7528 pair\\((v,p_{v,i})\\) \u8868\u793a\uff0c\u53ef\u7528\u4ee5\u4e0b\u64cd\u4f5c\u6539\u8b8a\u4f4d\u7f6e\uff1a</p> <ol> <li>\u7531\u7a7f\u904e\u7576\u524d\u50b3\u9001\u9580\u4f86\u6539\u8b8a\u7576\u524d\u7d50\u9ede</li> <li>\\((v,p_{v,2})\\) \u8ddf \\((v,p_{v,1})\\) \u4e4b\u9593\u6709\u96d9\u5411\u908a\uff0c\\((v,p_{v,3})\\) \u8ddf \\((v,p_{v,4})\\) \u4e4b\u9593\u6709\u96d9\u5411\u908a</li> </ol> <p>\u5c0d\u65bc\u6bcf\u500b\u9ede\uff0c\u53ef\u4ee5\u82b1\u8cbb \\(c_v\\)\uff0c\u91cd\u65b0\u6392\u5217 \\(v\\) \u7684 \\(p_v=[p_{v,1},p_{v,2},p_{v,3},p_{v,4}]\\)\uff0c\u76ee\u6a19\u4f7f\u9019 \\(4N\\) \u500b\u9ede\u9023\u901a\uff0c\u6c42\u6700\u5c0f\u82b1\u8cbb</p> <p>\\(2\\le N \\le 10^5,\\le c_v\\le 10^3\\)</p> \u601d\u8def <p>\u4f9d\u7167\u984c\u76ee\u7684\u4e8c\u70ba\u5ea7\u6a19\u9ede\u7684\u610f\u7fa9\uff0c\u6211\u5011\u5c07\u5716\u756b\u51fa\u4f86</p> <p> </p> <p>\u6bcf\u500b\u9ede\u7684 degree \u90fd\u53ea\u6709 2\uff0c\u6240\u4ee5\u6703\u5f62\u6210\u5f88\u591a cycle</p> <p>\u518d\u89c0\u5bdf\u82b1\u8cbb \\(c_v\\) \u91cd\u65b0\u6392\u5217\u7684\u610f\u7fa9</p> <p> </p> <p>\u82b1\u8cbb \\(c_v\\) \u53ef\u4ee5\u5c07\u5169\u500b cycle \u63a5\u8d77\u4f86\uff0c\u800c \\(p_{v,1},p_{v,2}\\) \u518d\u540c\u4e00\u500b cycle\uff0c \\(p_{v,3},p_{v,4}\\) \u518d\u540c\u4e00\u500b cycle\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5efa\u908a \\(p_{v,1}\\leftrightarrow p_{v,3}\\) \u6b0a\u91cd\u70ba \\(c_v\\)</p> <p>\u5176\u4ed6\u9810\u8a2d\u597d\u7684\u908a\u6b0a\u91cd\u90fd\u70ba \\(0\\)\uff0c\u4e0b\u53bb\u8dd1 MST \u5373\u53ef</p> <p>\u6bcf\u500b\u9ede\u7684 degree \u53ea\u6709 2\uff0c\u6240\u4ee5\u908a\u6700\u591a\u4e5f\u5c31 \\(2n\\) \u500b\uff0c\u8907\u96dc\u5ea6 ok</p> CF 196 E.Opening Portals <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u9023\u901a\u5716\uff0c\u5176\u4e2d\u6709 \\(k\\) \u500b\u9ede\u662f\u7279\u6b8a\u9ede\u3002\u4e00\u958b\u59cb\u5728\u7de8\u865f \\(1\\) \u7684\u9ede\uff0c\u5728\u4e00\u500b\u7279\u6b8a\u9ede\u4e0a\u6642\uff0c\u4f60\u53ef\u4ee5\u50b3\u9001\u5230\u4efb\u610f\u4e00\u500b\u8d70\u904e\u7684\u7279\u6b8a\u9ede\uff0c\u554f\u8d70\u904e\u6240\u6709\u7279\u6b8a\u9ede\u7684\u6700\u5c0f\u7684\u8ddd\u96e2\u7e3d\u548c</p> <p>\\(n,m,k\\le 10^5\\)</p> \u601d\u8def <p>\u9996\u5148\u5148\u5229\u7528\u591a\u6e90\u9ede dijkstra \u8dd1\u51fa\u8207\u6bcf\u500b\u9ede\u6700\u8fd1\u7684\u7279\u6b8a\u9ede \\(p_i\\)\uff0c\u8207\u8ddf\u9019\u500b\u7279\u6b8a\u9ede\u7684\u8ddd\u96e2 \\(d_i\\)\u3002\u518d\u4f86\u679a\u8209\u91cd\u758a\u908a\uff0c\u4ee3\u8868\u7279\u6b8a\u9ede\u5169\u5169\u4e4b\u9593\u7684\u6b0a\u91cd\uff0c\u6700\u5f8c\u8dd1 Kruskal\uff0c\u7b54\u6848\u8a18\u5f97\u52a0\u8d77\u59cb\u9ede \\(1\\) \u8207\u6700\u8fd1\u7684\u7279\u6b8a\u9ede\u7684\u8ddd\u96e2  </p> LOJ #3696. \u300cJOISC 2022 Day4\u300d\u590d\u5174\u8ba1\u5212 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u5e36\u6b0a\u7121\u5411\u5716\uff0c\u6709 \\(q\\) \u500b\u8a62\u554f :</p> <ul> <li>\u7d66 \\(x\\)\uff0c\u6b64\u6642\u5716\u4e0a\u7684\u908a\u6b0a\u5b9a\u70ba \\(|x-w|\\)\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6a39</li> </ul> <p>\\(n\\le 500,m\\le 10^5,q\\le 10^6,x,w,\\le 10^9\\)</p> \u601d\u8def <p>\u5f15\u7406 : \\(\\texttt{MST}(\\texttt{MST}(E_1) \\cup \\texttt{MST}(E_2))= \\texttt{MST}(E_1 \\cup E_2)\\)</p> <p>\u6211\u5011\u5148\u5c07\u908a\u6b0a \\(w\\) \u5f9e\u5c0f\u5230\u5927\u6392\u5e8f</p> <p>\u5c07\u6bcf\u500b prefix \u8ddf suffix \u90fd\u5efa\u7acb MST\uff0c\u5efa\u7acb\u7684\u65b9\u6cd5\u662f</p> <p>pre[i - 1] \u505a\u5b8c MST \u53ea\u6709\u6311 n - 1 \u500b\u908a\uff0c\u5c07 i \u9019\u689d\u908a\u52a0\u9032\u53bb\u91cd\u505a\u4e00\u6b21 Kruskal\uff0c\u5373\u5f97\u5230 n - 1 \u689d\u908a\u7684 pre[i]\uff0c\u4ee5\u6b64\u985e\u63a8\uff0csuffix \u4e5f\u4e00\u6a23</p> <p> </p> <p>\u56e0\u70ba\u5177\u6709\u55ae\u8abf\u6027\uff0c\u6545 Kruskal \u4e26\u4e0d\u9700\u8981\u91cd\u65b0\u6392\u5e8f\uff0c\u662f \\(O(n\\times \\log^* n)\\)</p> <p>\u96d6\u7136 \\(q\\) \u5230 \\(10^6\\)\uff0c\u4f46\u5be6\u969b\u80fd\u5dee\u5165\u7684\u7e2b\u53ea\u6709 \\(m\\) \u500b\uff0c\u6240\u4ee5\u6211\u5011\u5148\u5c07\u6bcf\u500b\u7e2b\u5de6\u908a\u7684 prefix\uff0c\u53f3\u908a\u7684 suffix \u4e00\u8d77\u518d Kruskal \u4e00\u6b21\uff0c\u5169\u908a\u90fd\u77e5\u9053\u81ea\u5df1\u8981\u51fa\u52d5\u54ea\u4e00\u4e9b\u908a\uff0c\u5c31\u53ef\u4ee5 \\(O(1)\\) \u56de\u7b54\u67e5\u8a62</p> <p>\u8907\u96dc\u5ea6\u70ba \\(O(m\\times n \\log^* n)\\)\uff0c\u5dee\u4e0d\u591a \\(10^5\\times 500\\times 4\\times 2=4\\times 10^8\\)</p> \u6700\u512a\u6bd4\u7387\u6a39 POJ 2728 <p>\u7d66\u51fa\u4e00\u500b \\(n\\) \u500b\u9ede \\(m\\) \u689d\u908a\u7684\u7121\u5411\u5716\uff0c\u7b2c \\(i\\) \u689d\u908a\u6709\u5169\u500b\u6b0a\u503c \\(a_i\\) \u548c \\(b_i\\) \u3002</p> <p>\u6c42\u8a72\u5716\u7684\u4e00\u68f5\u751f\u6210\u6a39 \\(T\\) \uff0c\u4f7f\u5f97\u4ee5\u4e0b\u7684 \\(\\text{cost}\\) \u6700\u5c0f</p> \\[\\text{cost}=\\cfrac{\\sum \\limits_{e\\in T}a_e}{\\sum \\limits_{e\\in T}b_e}\\] <p>\\(n\\le 1000\\)</p> \u601d\u8def <p>\u8003\u616e 0-1 \u5206\u6578\u898f\u5283</p> <p>\u4ee4 \\(\\cfrac{\\sum a}{\\sum b}=t\\)\uff0c\u90a3\u9ebc \\(\\sum a = t\\times \\sum b\\)\uff0c\u4ee4 \\(f(t) = \\sum(a - t\\times b)\\)</p> <p>\u5728\u6700\u512a\u89e3\u7684\u6642\u5019 \\(f(t)\\) \u6070\u70ba \\(0\\)</p> <p> </p> TIOJ 1795. \u5495\u5695\u5495\u5695\u5471\u5566\u5471\u5566 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u908a\u6b0a\u975e \\(0\\) \u5373 \\(1\\)\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u500b\u751f\u6210\u6a39\u908a\u6b0a\u7e3d\u5408\u70ba \\(k\\)</p> <p>\\(n\\le 10^5,m\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u5148\u7b97\u6700\u5927 MST \u7684\u82b1\u8cbb\uff0c\u6700\u5c0f MST \u7684\u82b1\u8cbb\uff0c\u770b \\(k\\) \u662f\u5426\u4ecb\u65bc\u5169\u8005\u7684\u82b1\u8cbb\u4e4b\u9593</p> \u6d1b\u8c37 P3623 [APIO2008] \u514d\u8d39\u9053\u8def <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u908a\u6b0a\u975e \\(0\\) \u5373 \\(1\\)\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u500b\u751f\u6210\u6a39\u908a\u6b0a\u7e3d\u5408\u70ba \\(k\\)\uff0c\u8f38\u51fa\u4efb\u610f\u7d44\u89e3\u6216\u662f\u8f38\u51fa\u7121\u89e3</p> <p>\\(n\\le 2\\times 10^5,m\\le 10^5\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u9762 TIOJ 1795 \u4e00\u6a23\uff0c\u6211\u5011\u8981\u5224\u65b7\u6709\u6c92\u6709\u89e3\u5c31\u770b \\(k\\) \u662f\u5426\u4ecb\u65bc\u6700\u5c0f\u8207\u6700\u5927 MST \u4e4b\u9593\uff0c\u5982\u679c MST \u4e0d\u9023\u901a\u4e5f\u662f\u7121\u89e3</p> <p>\u6700\u5927 MST \u7684\u69cb\u9020\u53ef\u4ee5\u5148\u52a0\u5165\u6240\u6709\u6700\u5c0f MST \u6709\u7528\u5230\u7684\u908a\u6b0a\u70ba \\(1\\) \u7684\u908a\uff0c\u7136\u5f8c\u518d\u5c07\u5269\u4e0b\u6c92\u9078\u5230\u7684\u908a\u6b0a\u70ba \\(1\\) \u7684\u908a\u52a0\u5165\uff0c\u9019\u6a23\u5c31\u4e0d\u6703\u767c\u751f\u6709\u908a\u6b0a\u70ba \\(1\\) \u7684\u908a\u6700\u5927 MST \u6c92\u9078\u5230\u4f46\u6700\u5c0f MST \u6709\u9078\u5230\u7684\u60c5\u6cc1</p> <p>\u6700\u5f8c\u8981\u69cb\u9020\u6b0a\u91cd\u548c\u6070\u70ba \\(k\\) \u7684 MST\uff0c\u9019\u6642\u6211\u5011\u5c31\u5c07\u6700\u5c0f MST \u958b\u59cb\u679a\u8209\u81ea\u5df1\u6c92\u7528\u5230\u4f46\u6700\u5927 MST \u6709\u7528\u5230\u7684\u6b0a\u91cd\u70ba \\(1\\) \u7684\u908a\u52a0\u5165\uff0c\u76f4\u5230\u6b0a\u91cd\u548c\u70ba \\(k\\)\u3002\u9019\u6642\uff0c\u518d\u5c07\u908a\u6b0a\u70ba \\(0\\) \u7684\u908a\u52a0\u5165\u76f4\u5230\u5f62\u6210 MST \u70ba\u6b62\uff0c\u5373\u5b8c\u6210\u69cb\u9020</p> <p>\u6b63\u78ba\u6027\u7684\u8a71\u56e0\u70ba\u6700\u5c0f MST \u6709\u7528\u5230\u6b0a\u91cd\u70ba \\(1\\) \u7684\u908a\uff0c\u6b0a\u91cd\u70ba \\(k\\) \u7684 MST \u90fd\u6709\u7528\u5230\u7684\uff0c\u800c\u6700\u5c0f MST \u5728\u9019\u4e4b\u5f8c\u52a0\u5165\u4e86\u908a\u6b0a\u70ba \\(0\\) \u7684\u908a\u53ef\u4ee5\u5f62\u6210 MST\uff0c\u6b0a\u91cd\u70ba \\(k\\) \u7684 MST \u53ef\u80fd\u9084\u591a\u4e00\u4e9b\u6b0a\u91cd\u70ba \\(1\\) \u7684\u908a\uff0c\u518d\u52a0\u5165 \\(0\\) \u7684\u908a\u4e5f\u4e00\u5b9a\u6703\u5f62\u6210 MST</p> Atcoder arc076 B.Built? <p>\u7d66 \\(n\\) \u500b\u4e8c\u7dad\u5ea7\u6a19\u9ede \\((x_i, y_i)\\)\uff0c\u5169\u9ede\u8981\u5efa\u908a\u7684 \\(\\text{cost} = \\min(|x_i - x_j|, |y_i - y_j|)\\)\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6a39\u6b0a\u503c</p> <p>\\(n\\le 10^5, x_i, y_i \\le 10^9\\)</p> \u601d\u8def <p>\u6bcf\u500b\u9ede\u8ddf\u5468\u570d\uff08\\(x_i\\) \u6392\u5e8f\u5f8c\u7684\u5de6\u53f3\u5169\u500b\u9ede\uff0c\\(y_i\\) \u6392\u5e8f\u5f8c\u7684\u5de6\u53f3\u5169\u500b\u9ede\uff09\u9023\u908a</p> <p>\u8dd1\u500b Kruskal</p>"},{"location":"graph/mst/#_3","title":"\u88dc\u5716\u6280\u5de7","text":"<p>\u7d66\u4e00\u5f35\u5b8c\u5168\u5716\uff0c\u7d66 \\(m\\) \u88dc\u908a\uff0c\u4ee3\u8868\u9664\u4e86\u9019 \\(m\\) \u689d\u908a\u5916\uff0c\u5176\u4ed6 \\((u,v)\\) \u4e4b\u9593\u90fd\u6709\u908a</p> <p>\u5be6\u4f5c\u4e0a\u7dad\u8b77\u4e00\u500b\u9084\u6c92\u5206\u5230\u7d44\u7684 <code>set</code>\uff0c\u5206\u5230\u7d44\u6642\u628a\u4ed6\u5f9e <code>set</code> \u522a\u6389</p> code <pre><code>void dfs (int u) {\n    vis[u] = 1;\n\n    vector&lt;int&gt; ret;\n    for (int v : all) { // \u6c92\u51fa\u73fe -&gt; \u6709\u908a\n        if(!G[u].count(v) &amp;&amp; !vis[v]) ret.push_back(v);\n    }\n    for (int ele : ret) { // \u5df2\u5206\u5230\u7d44\n        all.erase(ele);\n    }\n    for (int ele : ret) {\n        dfs(ele);\n    }\n}\n</code></pre> CF 920 E. Connected Components? <p>\u7d66\u5b9a \\(n\\) \u500b\u9ede\u7684\u7121\u5411\u5716\uff0c\\(m\\) \u689d\u88dc\u908a(\u9664\u4e86\u9019 \\(m\\)\u689d\u908a\uff0c\u5176\u9918\u90fd\u5b58\u5728)\uff0c\u6c42\u6bcf\u500b\u9023\u901a\u584a\u7684\u5927\u5c0f</p> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u7528\u4e00\u822c\u7684\u88dc\u5716 DFS \u53bb\u770b\u6709\u5e7e\u500b\u9023\u901a\u584a\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nconst int maxn = 3e5 + 5;\nconst int INF = 0x3f3f3f3f;\nconst int M = 1e9 + 7;\nset&lt;int&gt; G[maxn];\nset&lt;int&gt; all;\nint n, m, vis[maxn], cnt = 0;\n\nint dfs (int u) {\n    vis[u] = 1;\n\n    vector&lt;int&gt; ret;\n    for (int v : all) { // \u6c92\u51fa\u73fe -&gt; \u6709\u908a\n        if(!G[u].count(v) &amp;&amp; !vis[v]) ret.push_back(v);\n    }\n    for (int ele : ret) {\n        all.erase(ele);\n    }\n    int sum = 1;\n    for (int ele : ret) {\n        sum += dfs(ele);\n    }\n    return sum;\n}\n\nsigned main() {\n    //ios::sync_with_stdio(0);\n    //cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 1; i &lt;= n; i++)\n        all.insert(i);\n\n    for (int i = 0, u, v; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].insert(v);\n        G[v].insert(u);\n    }\n\n    vector&lt;int&gt; sz;\n    for (int i = 1; i &lt;= n; i++) {\n        if (vis[i] == 0) {\n            sz.pb (dfs(i));\n            cnt++;\n        }\n    }\n\n    sort (sz.begin(), sz.end());\n    cout &lt;&lt; cnt &lt;&lt; \"\\n\";\n    for (auto ele : sz) cout &lt;&lt; ele &lt;&lt; \" \";\n}\n</code></pre> CF 1242 B. 0-1 MST <p>\u7d66 \\(n\\) \u500b\u9ede\u7684\u5b8c\u5168\u5716\uff0c\u7d66 \\(m\\) \u689d\u908a\u6b0a\u70ba \\(1\\) \u7684\u908a\uff0c\u5176\u9918\u908a\u6b0a\u70ba \\(0\\)\uff0c\u554f\u6700\u5c0f\u751f\u6210\u6a39\u6b0a\u503c</p> <p>\\(n,m\\le 10^5\\)</p> \u601d\u8def <p>\u5c07\u908a\u6b0a\u662f \\(0\\) \u4e00\u5b9a\u8981\u5148\u9078\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5c07 \\(0\\) \u7684\u908a\u9078\u8d77\u4f86\uff0c\u6703\u69cb\u6210\u4e00\u4e9b\u9023\u901a\u584a\uff0c\u9019\u500b\u53ef\u4ee5\u7528\u4e0a\u4e00\u984c\u7684\u65b9\u6cd5\u505a\u5230</p> <p>\u7136\u5f8c\u518d\u770b\u9084\u7f3a\u5e7e\u689d\u908a</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nconst int maxn = 3e5 + 5;\nconst int INF = 0x3f3f3f3f;\nconst int M = 1e9 + 7;\nset&lt;int&gt; G[maxn];\nset&lt;int&gt; all;\nint n, m, vis[maxn], cnt = 0;\n\nvoid dfs (int u) {\n    vis[u] = 1;\n\n    vector&lt;int&gt; ret;\n    for (int v : all) { // \u6c92\u51fa\u73fe -&gt; \u6709\u908a\n        if(!G[u].count(v) &amp;&amp; !vis[v]) ret.push_back(v);\n    }\n    for (int ele : ret) {\n        all.erase(ele);\n    }\n    for (int ele : ret) {\n        dfs(ele);\n    }\n}\n\nsigned main() {\n    //ios::sync_with_stdio(0);\n    //cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 1; i &lt;= n; i++)\n        all.insert(i);\n\n    for (int i = 0, u, v; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].insert(v);\n        G[v].insert(u);\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (vis[i] == 0) {\n            dfs(i);\n            cnt++;\n        }\n    }\n\n    cout &lt;&lt; cnt - 1;\n}\n</code></pre>"},{"location":"graph/mst/#mst","title":"MST \u7684\u552f\u4e00\u6027","text":"<p>\u5224\u65b7 MST \u662f\u5426\u552f\u4e00\uff0c\u5982\u679c\u4e26\u975e\u552f\u4e00\uff0c\u4ee3\u8868\u5b83\u53ef\u4ee5\u88ab\u76f8\u540c\u6b0a\u91cd\u7684\u908a\u7d66\u66ff\u63db\uff0c\\(\\Rightarrow\\) \u5c0d\u65bc\u76f8\u540c\u7684\u908a\u4e00\u8d77\u53bb\u8dd1</p> <p>\u5728 \\(w\\) \u4ee5\u4e0b\u7684\u908a\u90fd\u505a\u597d Kruskal \u5f8c\uff0c\u6703\u5f62\u6210\u82e5\u5e72\u9023\u901a\u584a\uff0c\u800c\u4e14\u9019\u4e9b\u4f86\u901a\u584a\u5404\u500b\u90fd\u662f\u6a39\uff0c\u6211\u5011\u7a31\u6574\u5f35\u5716\u70ba\u6700\u5c0f\u751f\u6210\u68ee\u6797</p> \u5c07 \\(w\\) \u4ee5\u4e0b\u7684\u908a\u4ee5\u54ea\u7a2e\u9806\u5e8f\u505a\u597d Kruskal \u5f8c\u6703\u5f62\u6210\u7684\u6700\u5c0f\u751f\u6210\u68ee\u6797\u90fd\u662f\u4e00\u6a23\u7684 <p>\u4e0d\u7ba1\u540c\u4e00\u500b\u6b0a\u91cd w \u7684\u908a\u7528\u751a\u9ebc\u9806\u5e8f\u53bb merge\uff0c\u6bcf\u500b\u9ede\u6700\u5f8c\u6703\u88ab\u5206\u5230\u7684\u9023\u901a\u584a\u90fd\u662f\u76f8\u540c\u7684\uff0c\u53ea\u6709\u6bcf\u500b\u9023\u901a\u584a\u5167\u300c\u7528\u751a\u9ebc\u908a\u53bb\u5c07\u9019\u4e9b\u9ede\u63a5\u8d77\u4f86\u300d\u6709\u5dee\u5225\u800c\u5df2\uff0c\u9019\u4e9b\u908a\u80fd\u63a5\u8d77\u4f86\u7684\u9ede\u96c6\u90fd\u662f\u76f8\u540c\u7684\u3002\u6574\u9ad4\u4f86\u8aaa\uff0c\u4e0d\u7ba1\u4ec0\u9ebc\u9806\u5e8f\uff0c\u5c07\u6bcf\u500b\u9023\u901a\u584a\u7e2e\u9ede\u5f8c\u5716\u90fd\u662f\u4e00\u6a21\u4e00\u6a23\u7684</p> code <pre><code>void solve () {\n    for (int i = 1; i &lt;= n; i++) par[i] = i;\n    sort(E.begin(), E.end(), [](Edge a, Edge b) { return a.w &lt; b.w; });\n    for (int i = 0; i &lt; m;) {\n        int r = i;\n        while (E[i].w == E[r + 1].w) r++; //[i, r]\n\n        // \u9019\u908a\u4e00\u822c\u6703\u5beb\u984c\u76ee\u8981\u505a\u7684\u4e8b\u60c5\n\n        for (int j = i; j &lt;= r; j++) {\n            int x = find(E[j].u), y = find(E[j].v);\n            if (x == y) continue; \n            merge(x, y);\n        }\n        i = r + 1;\n    }\n}\n</code></pre> CF 1108 F. MST Unification <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u9023\u901a\u5716\uff0c\u4f60\u53ef\u4ee5\u505a\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li>\u9078\u4e00\u689d\u908a\uff0c\u5c0d\u5176\u908a\u6b0a \\(+1\\)\uff0c\u4f7f\u5f97\u5716\u7684\u6700\u5c0f\u751f\u6210\u6a39\u552f\u4e00</li> </ul> <p>\u6c42\u6700\u5c0f\u64cd\u4f5c\u6b21\u6578</p> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u908a\u6703\u885d\u7a81\u82e5\u4e14\u552f\u82e5\u74b0\u4e0a\u81f3\u5c11\u6709\u4e00\u500b\u908a\u8ddf\u6211\u76f8\u7b49\uff0c\u6240\u4ee5\u6211\u53ea\u8981\u5c07\u6211\u6b0a\u503c \\(+1\\) \u5373\u53ef</p> <p>\\(+1\\) \u5f8c\u4e0d\u6703\u8b8a\u6210\u66f4\u9ad8\u6b0a\u91cd\u7684\u9078\u9805\uff0c\u56e0\u70ba\u80fd\u885d\u7a81\u5c31\u4ee3\u8868\u81ea\u5df1\u7684\u908a\u6b0a\u662f\u74b0\u4e0a\u6700\u5927\u7684</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define double long double\n#define x first\n#define y second\n#define mk make_pair\n#define pb push_back\n#define pii pair&lt;long long, long long&gt;\nusing namespace std;\n\nstruct Edge {\n    int u, v, w;\n};\n\nconst int INF = 9e18;\nconst int maxn = 2e5 + 5;\nconst int maxm = 5e5 + 5;\nconst int lg = 20;\nvector&lt;Edge&gt; E;\nvector&lt;pii&gt; G[maxn];\nint n, m;\nint dsu[maxn], par[maxn];\n\nint find (int x) {\n    if (par[x] == x) return x;\n    else return par[x] = find(par[x]);\n}\n\nvoid merge (int a, int b) {\n    int x = find(a), y = find(b);\n    if (x == y) return;\n    par[x] = y;\n}\n\nvoid solve () {\n    for (int i = 1; i &lt;= n; i++) par[i] = i;\n    sort(E.begin(), E.end(), [](Edge a, Edge b) { return a.w &lt; b.w; });\n    int cnt = 0;\n    for (int i = 0; i &lt; m;) {\n        int r = i;\n        while (E[i].w == E[r + 1].w) r++; //[i, r]\n        // \u5224\u65b7\u6709\u591a\u5c11\u5408\u6cd5\u908a\n        for (int j = i; j &lt;= r; j++) {\n            int x = find(E[j].u), y = find(E[j].v);\n            if (x == y) continue;\n            cnt++; \n        }\n        // \u5224\u65b7\n        for (int j = i; j &lt;= r; j++) {\n            int x = find(E[j].u), y = find(E[j].v);\n            if (x == y) continue; // \u5df2\u7d93\u88ab\u4f75\u904e\u4e86, \u5c6c\u65bc\u540c\u4e00\u65b9\u6848\n            // \u518d\u4e0d\u540c\u7684\u96c6\u5408, \u552f\u4e00\u7684\u65b9\u6848\n            merge(x, y), cnt--;\n        }\n        // ans = \u91cd\u8907\u76f8\u540c\u6b0a\u91cd\u7684\u908a = (\u5408\u6cd5\u908a) - (\u552f\u4e00\u65b9\u6848\u6578) = \u5176\u5be6\u52a0\u4e86\u662f\u91cd\u8907\u7684\u65b9\u6848\u7684\u908a \n        i = r + 1;\n    }\n    cout &lt;&lt; cnt &lt;&lt; \"\\n\";\n}\n\nvoid init () {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0, u, v, w; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        E.pb({u, v, w});\n    }\n}\n\nsigned main () {\n    init();\n    solve();\n}\n</code></pre> CF 160 D. Edges in MST <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5e36\u6b0a\u9023\u901a\u5716\uff0c\u5224\u65b7\u6bcf\u500b\u908a\u7684 type</p> <ol> <li>\u51fa\u73fe\u5728\u6240\u6709\u65b9\u6848\u4e2d</li> <li>\u5b8c\u5168\u6c92\u51fa\u73fe\u5728\u4efb\u4f55\u65b9\u6848</li> <li>\u81f3\u5c11\u51fa\u73fe\u5728\u4e00\u7a2e\u65b9\u6848</li> </ol> <p>\\(n,m\\le 10^5\\)</p> \u601d\u8def <p>\u9996\u5148\u6211\u5011\u6839\u64da Kruskal \u6f14\u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6a39 (MST) \u7684\u601d\u8def\uff0c\u5c07\u908a\u6b0a\u5f9e\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u5bb9\u6613\u767c\u73fe\uff1a\u82e5\u4e00\u689d\u908a\u7684\u5169\u500b\u7aef\u9ede\u5728\u4e4b\u524d\u5c31\u88ab\u6bd4\u5b83\u908a\u6b0a\u66f4\u5c0f\u7684\u908a\u6240\u806f\u901a\uff0c\u5247\u9019\u689d\u908a\u4e00\u5b9a\u4e0d\u6703\u51fa\u73fe\u5728 MST \u4e2d\u3002</p> <p>\u6839\u64da\u8a72\u601d\u8def\uff0c\u6211\u5011\u5c0d\u540c\u4e00\u908a\u6b0a\u7684\u908a\u5206\u5225\u9032\u884c\u8655\u7406\u3002\u9996\u5148\uff0c\u6211\u5011\u53bb\u9664\u6389\u525b\u624d\u8aaa\u7684\u986f\u7136\u4e0d\u5b58\u5728\u7684\u908a\uff0c\u7136\u5f8c\u628a\u5176\u4ed6\u7684\u908a\u52a0\u5165\u5230\u539f\u5716\uff08\u91cd\u908a\u7121\u5f71\u97ff\uff09\u4e2d\u3002\u90a3\u9ebc\u986f\u7136\uff0c\u5716\u4e2d\u7684\u5272\u908a\u5c31\u662f\u4e00\u5b9a\u6703\u51fa\u73fe\u5728\u6240\u6709 MST \u4e2d\u7684\u908a\u3002</p> <p>\u8209\u500b\u4f8b\u5b50\uff0c\u5047\u8a2d\u7576\u524d\u8655\u7406\u5230\u908a\u6b0a\u70ba \\(x\\)\u3002\u90a3\u9ebc\u6211\u5011\u5148\u628a\u6240\u6709\u5c0f\u65bc \\(x\\) \u7684\u908a\u52a0\u9032\u53bb\u3002\u6839\u64da\u4e0a\u8ff0\u601d\u8def\u53ef\u77e5\uff0c\u9019\u5169\u500b\u908a\u7684\u96c6\u5408\u4e00\u5b9a\u4e0d\u9023\u901a\uff0c\u5426\u5247\u9019\u689d\u908a\u986f\u7136\u4e0d\u5b58\u5728\u3002\u9019\u500b\u6642\u5019\u5169\u500b\u96c6\u5408\u4e4b\u9593\u53ef\u80fd\u6703\u6709\u82e5\u5e72\u500b\u6b0a\u503c\u70ba \\(x\\) \u7684\u908a\uff0c\u800c\u9023\u63a5\u9019\u5169\u500b\u96c6\u5408\u7684\u4e00\u5b9a\u662f\u9019\u4e9b\u6b0a\u503c\u70ba \\(x\\) \u7684\u908a\uff0c\u4e0d\u53ef\u80fd\u66f4\u5927\uff0c\u9019\u4e00\u9ede\u7531 Kruskal \u6f14\u7b97\u6cd5\u7684\u8caa\u5fc3\u6027\u8cea\u53ef\u77e5\u3002\u800c\u6b64\u6642\uff0c\u5f9e\u9019\u4e9b \\(x\\) \u4e2d\u6211\u5011\u53ea\u9700\u9078\u51fa\u4e00\u689d\u5373\u53ef\uff0c\u6240\u4ee5\u9019\u4e9b \\(x\\) \u81f3\u5c11\u5b58\u5728\u65bc\u4e00\u500b MST \u4e2d\uff0c\u800c\u5982\u679c\u53ea\u6709\u4e00\u500b \\(x\\)\uff0c\u5247\u5b83\u4e00\u5b9a\u662f\u6a4b\uff0c\u5247\u5fc5\u7136\u51fa\u73fe\u65bc\u6240\u6709 MST \u4e2d\u3002</p> <p>\u7531\u65bc\u6211\u5011\u5728\u8003\u616e\u7576\u524d\u6b0a\u503c\u6642\uff0c\u4e26\u4e0d\u95dc\u5fc3\u5716\u7684\u5176\u4ed6\u90e8\u5206\uff0c\u6240\u4ee5\u6211\u5011\u5728\u8655\u7406\u4e00\u985e\u908a\u6b0a\u6642\uff0c\u5c0d\u7576\u524d\u5716\u9032\u884c\u7e2e\u9ede\uff0c\u53ef\u4ee5\u505a\u5230\u6642\u9593\u7684\u6700\u4f73\u5316\u3002\u9019\u908a\u7e2e\u9ede\u7684\u65b9\u6cd5\u662f\u63a1\u7528\u4e26\u67e5\u96c6\uff08\u4e5f\u5c31\u662f\u6bcf\u6b21\u5728\u770b\u4e00\u500b\u9ede\u7684\u6642\u5019\u90fd\u5148\u5728\u4e26\u67e5\u96c6\u5167 find(u)\uff0c\u8a73\u898b\u4ee3\u78bc\uff09\u3002\u7e2e\u9ede\u5f8c\u627e\u6a4b\u7684\u904e\u7a0b\u4e2d\uff0c\u6211\u5011\u53ea\u9700\u8981\u521d\u59cb\u5316\u6240\u6709\u65b0\u908a\u5169\u7aef\u9ede\u7684 dfn \u70ba 0\uff0c\u4e0d\u5fc5\u8981\u5168\u90e8\u521d\u59cb\u5316\uff0c\u56e0\u70ba\u5c0d\u65bc\u5176\u4ed6\u9ede\u662f\u6c92\u6709\u5f71\u97ff\u7684\u3002</p> <p>\u8907\u96dc\u5ea6\u7684\u90e8\u5206\u56e0\u70ba\u6bcf\u500b\u9ede\u88ab tarjan \u7b97\u6cd5\u8dd1\u904e\u4e00\u6b21\u5f8c\u5c31\u6703\u7e2e\u9ede\u8d77\u4f86\uff0c\u7e3d\u6642\u9593\u8907\u96dc\u5ea6\u5c31\u662f sort \\(O(m\\log m)\\) + tarjan \\(O(n + m)\\) \u6240\u4ee5\u662f \\(O(m\\log m)\\)\u3002</p> code <pre><code>#include&lt;cstdio&gt;\n#include&lt;vector&gt;\n#include&lt;algorithm&gt;\nusing std::sort;\n\nint n, m, f[100010], ans[100010];\n\nnamespace graph {\n    using std::min;\n    using std::vector;\n\n    struct node {\n        int to, id;\n    };\n    static int nowtime, dfn[100010], low[100010];\n    vector &lt; node &gt; e[100010];\n    struct node1 {\n        int from, to, v, id;\n        bool operator &lt; (const node1 &amp; a) const {\n            return v &lt; a.v;\n        }\n    }\n    edge[100010];\n\n    inline void addedge(int from, int to, int id) { //\u52a0\u8fb9\n        e[from].push_back(node{to, id}),\n        e[to].push_back(node{from, id});\n    }\n\n    void tarjan(int now, int faid) { // faid \u70ba\u76ee\u524d\u8f49\u79fb\u5230 now \u9019\u500b\u9ede\u7684\u908a\u7684\u7de8\u865f\n        low[now] = dfn[now] = nowtime++;\n        for (register int i = 0; i &lt; (int) e[now].size(); ++i) {\n            if (e[now][i].id == faid)\n                continue;\n            if (!dfn[e[now][i].to]) {\n                tarjan(e[now][i].to, e[now][i].id);\n                low[now] = min(low[now], low[e[now][i].to]);\n                if (low[e[now][i].to] &gt; dfn[now]) {\n                    ans[e[now][i].id] = 1;\n                }\n            } else {\n                low[now] = min(low[now], dfn[e[now][i].to]);\n            }\n        }\n    }\n}\n\ninline int getf(int x) {\n    return f[x] = x == f[x] ? x : getf(f[x]);\n}\n\ninline void init() {\n    scanf(\"%d%d\", &amp; n, &amp; m);\n    for (register int i = 1; i &lt;= n; ++i)\n        f[i] = i;\n    for (register int i = 1; i &lt;= m; ++i)\n        scanf(\"%d%d%d\", &amp; graph::edge[i].from, &amp; graph::edge[i].to, &amp; graph::edge[i].v),\n        graph::edge[i].id = i;\n    sort(graph::edge + 1, graph::edge + m + 1);\n}\n\ninline void work() {\n    int j;\n    for (register int i = 1; i &lt;= m; i = j) {\n        j = i + 1;\n        while (j &lt;= m &amp;&amp; graph::edge[i].v == graph::edge[j].v) // \u5c0b\u627e\u76f8\u540c\u908a\u6b0a\u7684\u908a\u7684\u7bc4\u570d[\u5de6\u9589\u53f3\u958b\u5340\u9593)\n            ++j;\n        for (register int l = i; l &lt; j; ++l) {\n            int x = getf(graph::edge[l].from), y = getf(graph::edge[l].to);\n            if (x == y) {\n                continue;  // \u5df2\u7d93\u5728\u4e4b\u524d\u5c31\u88ab\u6bd4\u5b83\u908a\u6b0a\u66f4\u5c0f\u7684\u908a\u806f\u901a\u4e86\n            }\n            graph::addedge(x, y, graph::edge[l].id), // \u52a0\u908a\n            graph::dfn[x] = graph::dfn[y] = 0, // \u521d\u59cb\u5316\u5169\u7aef\u7684 dfn \u70ba 0\n            ans[graph::edge[l].id] = -1; // at least one\n        }\n        for (register int l = i; l &lt; j; ++l) {\n            int x = getf(graph::edge[l].from), y = getf(graph::edge[l].to);\n            if (x == y || graph::dfn[x]) // \u5982\u679c\u518d\u4e4b\u524d\u7684 Tarjan \u88e1\u5df2\u7d93\u904d\u6b77\u904e\u4e86\u5c31\u4e0d\u7528\u518d\u6c42\u6a4b\u4e86\n                continue;\n            graph::nowtime = 0,\n            graph::tarjan(x, -1); // Tarjan \u6c42\u6a4b\n        }\n        for (register int l = i; l &lt; j; ++l) {\n            int x = getf(graph::edge[l].from), y = getf(graph::edge[l].to);\n            if (x == y)\n                continue;\n            graph::e[x].clear(), // \u7e2e\u9ede\uff0c\u5373\u628a\u5b83\u5468\u570d\u7684\u908a\u5168\u90e8\u53bb\u6389\n            graph::e[y].clear(),\n            f[x] = y;\n        }\n    }\n}\n\nint main(void) {\n    init();\n    work();\n    for (register int i = 1; i &lt;= m; ++i)\n        if (ans[i] == 1) puts(\"any\");\n        else if (ans[i] == 0) puts(\"none\");\n        else puts(\"at least one\");\n    return 0;\n}\n</code></pre> CF 891 C.Envy <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u9023\u901a\u5716\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f\uff0c\u6bcf\u6b21\u7d66\u4e00\u500b\u96c6\u5408\uff0c\u5305\u542b \\(k_i\\) \u689d\u5716\u4e0a\u7684\u908a\uff0c\u6c42\u5b58\u4e0d\u5b58\u5728\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6a39\u5305\u542b\u96c6\u5408\u5167\u6240\u6709\u7684\u908a</p> <p>\\(n,m,q\\le 10^5,\\sum k_i\\le 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u4e00\u500b \\(k_i\\)\uff0c\u4e0d\u540c\u908a\u6b0a\u4e4b\u9593\u662f\u6c92\u6709\u5f71\u97ff\u7684\u3002\u56e0\u70ba\u6839\u64da\u4e0a\u9762\u300c\u5c07 \\(w\\) \u4ee5\u4e0b\u7684\u908a\u4ee5\u54ea\u7a2e\u9806\u5e8f\u505a\u597d Kruskal \u5f8c\u6703\u5f62\u6210\u7684\u6700\u5c0f\u751f\u6210\u68ee\u6797\u90fd\u662f\u4e00\u6a23\u7684\u300d\u9019\u500b\u6027\u8cea\uff0c\u82e5\u73fe\u5728\u8981\u52a0\u5165\u908a\u6b0a\u70ba \\(w\\) \u7684\u908a\uff0c\u53ea\u8981\u52a0\u5165\u5f8c\u5408\u6cd5\uff0c\u6700\u5f8c\u80fd\u5f62\u6210\u7684\u68ee\u6797\u662f\u552f\u4e00\u7684\uff0c\u6240\u4ee5\u6211\u5011\u4e0d\u5fc5\u64d4\u5fc3\u4e0d\u540c\u6b0a\u91cd\u7684\u908a\u6703\u4e92\u76f8\u5f71\u97ff\u3002</p> <p>\u8981\u662f\u6b0a\u91cd\u70ba \\(w\\) \u7684\u908a\u52a0\u5165\u5f8c\u4e0d\u5408\u6cd5\uff0c\u90a3\u5f8c\u9762\u4e5f\u4e0d\u80fd\u505a\u4e0b\u53bb\u4e86\uff0cans[k[i]] = false</p> <p>\u73fe\u5728\u8981\u4f86\u770b\u5982\u4f55\u5224\u65b7\u5408\u6cd5\uff0c\u4e0d\u5408\u6cd5\u3002\u8ddf\u4e0a\u9762\u7684\u6a21\u677f\u4e00\u6a23\uff0c\u6bcf\u6b21\u540c\u6642\u8003\u616e\u4e00\u5806\u6b0a\u503c\u5747\u7232 \\(x\\) \u7684\u908a\uff0c\u63a5\u8457\u8981\u679a\u8209 \\(k_i\\)\uff0c\u8003\u616e \\(k_i\\) \u5167\u6b0a\u503c\u7232 \\(x\\) \u7684\u908a\u806f\u96c6\u5f8c\u662f\u5426\u6703\u300c\u5f62\u6210\u74b0\u300d\uff0c\u82e5\u51fa\u73fe\u4e86\u74b0\u5247 ans[k[i]] = false\uff0c\u7136\u5f8c undo \\(k_i\\) \u7684\u9019\u4e9b\u6b0a\u503c\u70ba \\(x\\) \u7684\u908a\uff0c\u7136\u5f8c\u8003\u616e \\(k_{i+1}\\) \u5167\u6b0a\u503c\u7232 \\(x\\) \u7684\u908a\u806f\u96c6\u5f8c\u662f\u5426\u5f62\u6210\u74b0...\u3002\u8003\u616e\u5b8c\u6240\u6709\u7684\u6d89\u53ca\u5230\u7684 \\(k_i\\) \u5f8c\uff0c\u5c07\u984c\u76ee\u7d66\u7684\u539f\u5716\u6b0a\u503c\u7232 \\(x\\) merge \u5f8c\uff0c\u7e7c\u7e8c\u8003\u616e\u4e0b\u4e00\u5c64\u6b0a\u503c\u7684\u908a\u3002\u9019\u6642\u6839\u64da\u4e0a\u9762\u8b1b\u7684\uff0c\u4e0d\u7ba1\u908a\u7528\u54ea\u4e9b\u9806\u5e8f\u52a0\u5165\uff0c\u9023\u901a\u584a\u90fd\u662f\u4e00\u6a23\u7684\uff0c\u6240\u4ee5\u6bcf\u5c64\u6b0a\u503c\u7684\u908a\u662f\u4e92\u76f8\u7368\u7acb\u7684\uff0c\u6545\u6b63\u78ba\u6027\u8db3\u5920\u3002</p> <p>\u53c3\u8003 : \u53f0\u90e8\u843d</p>"},{"location":"graph/mst/#_4","title":"\u7dad\u8b77\u74b0\u6280\u5de7","text":"<p>\u52a0\u5165\u6c92\u9078\u5230\u7684\uff0c\u522a\u6389\u74b0\u4e0a\u9664\u4e86\u4ed6\u4ee5\u5916\u6700\u5927</p> <p>\u5be6\u4f5c\u4e0a\u4f7f\u7528 LCA, kruskal, dp \u914d\u5408\u500d\u589e\u6cd5\u5efa\u8868</p> <p>\u4ee5\u4e0b\u662f\u4e00\u9053\u6b21\u5c0f\u751f\u6210\u6a39\u7684\u6a21\u677f\u984c</p> LOJ #10133. \u300c\u4e00\u672c\u901a 4.4 \u4f8b 4\u300d\u6b21\u5c0f\u751f\u6210\u6811 <p>\u7d66\u4e00\u5f35 \\(N\\) \u9ede \\(M\\) \u908a\u7121\u5411\u5716\uff0c\u6c42\u7121\u5411\u5716\u7684\u56b4\u683c\u6b21\u5c0f\u751f\u6210\u6a39</p> <p>\\(N\\le 10^5,M\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u5148\u505a\u597d MST\uff0c\u7136\u5f8c\u679a\u8209\u4e0d\u5728 MST \u4e0a\u7684\u908a\uff0c\u770b\u53ef\u4ee5\u66ff\u4ee3\u74b0\u4e0a\u7684\u54ea\u500b\u908a</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#define int long long\n#define double long double\n#define x first\n#define y second\n#define mk make_pair\n#define lowbit (x &amp; (-x))\n#define pb push_back\n#define pii pair&lt;long long, long long&gt;\nusing namespace std;\n\nstruct Edge {\n    int u, v, w, id;\n};\n\nstruct node {\n    int mx = -1, sec = -1;\n};\n\nconst int INF = 9e18;\nconst int lg = 20;\n\nint n, m, pre;\nvector&lt;Edge&gt; E;\nvector&lt;vector&lt;pii&gt;&gt; G;\nvector&lt;vector&lt;node&gt;&gt; dp;\nvector&lt;int&gt; par;\nvector&lt;vector&lt;int&gt;&gt; p;\nvector&lt;int&gt; dep;\n\nint find(int x) {\n    if (par[x] == x)\n        return x;\n    else\n        return par[x] = find(par[x]);\n}\n\nvoid merge(int a, int b) {\n    int x = find(a), y = find(b);\n\n    if (x == y)\n        return;\n\n    par[x] = y;\n}\n\nvoid MST() {\n    for (int i = 1; i &lt;= n; i++)\n        par[i] = i;\n\n    sort(E.begin(), E.end(), [](Edge a, Edge b) {\n        return a.w &lt; b.w;\n    });\n\n    for (auto &amp;[u, v, w, id] : E) {\n        if (find(u) != find(v)) {\n            pre += w;\n            G[u].pb({v, w});\n            G[v].pb({u, w});\n            merge(u, v);\n            id = 1;\n        }\n    }\n}\n\nvoid dfs(int u, int pa) {\n    for (auto [v, w] : G[u]) {\n        if (v == pa)\n            continue;\n\n        dep[v] = dep[u] + 1;\n        p[v][0] = u;\n        dp[v][0].mx = w;\n        dfs(v, u);\n    }\n}\n\nnode cal(node a, node b) {\n    vector&lt;int&gt; vec;\n\n    if (a.mx != -1)\n        vec.pb(a.mx);\n\n    if (a.sec != -1)\n        vec.pb(a.sec);\n\n    if (b.mx != -1)\n        vec.pb(b.mx);\n\n    if (b.sec != -1)\n        vec.pb(b.sec);\n\n    sort(vec.begin(), vec.end(), greater&lt;int&gt;());\n    vec.resize(unique(vec.begin(), vec.end()) - vec.begin());\n    vec.push_back(-1);\n    vec.push_back(-1);\n    return {vec[0], vec[1]};\n}\n\nvoid build() {\n    dfs(1, -1);\n\n    for (int j = 1; j &lt; lg; j++) {\n        for (int i = 1; i &lt;= n; i++) {\n            p[i][j] = p[p[i][j - 1]][j - 1];\n            dp[i][j] = cal(dp[i][j - 1], dp[p[i][j - 1]][j - 1]);\n        }\n    }\n}\n\nnode LCA(int a, int b) {\n    if (dep[a] &lt; dep[b])\n        swap(a, b);  // dep[a] &gt; dep[b]\n\n    int dif = dep[a] - dep[b];\n    node ret;\n\n    for (int i = lg - 1; i &gt;= 0; i--) {\n        if (dif &amp; (1 &lt;&lt; i)) {\n            ret = cal(dp[a][i], ret);\n            a = p[a][i];\n        }\n    }\n\n    if (a == b)\n        return ret;\n\n    for (int i = lg - 1; i &gt;= 0; i--) {\n        if (p[a][i] != p[b][i]) {\n            ret = cal(dp[b][i], cal(ret, dp[a][i]));\n            a = p[a][i];\n            b = p[b][i];\n        }\n    }\n\n    return cal(ret, cal(dp[a][0], dp[b][0]));\n}\n\nvoid solve() {\n    MST();\n    build();\n    int ans = INF;\n\n    for (int i = 0; i &lt; m; i++) {\n        if (!E[i].id) {\n            if (E[i].u == E[i].v)\n                continue;\n\n            node ret = LCA(E[i].u, E[i].v);\n            int cmp = ret.mx;\n\n            if (E[i].w == ret.mx)\n                cmp = ret.sec;\n\n            if (cmp == -1)\n                continue;\n\n            ans = min(pre + E[i].w - cmp, ans);\n        }\n    }\n\n    cout &lt;&lt; (ans == INF ? -1 : ans);\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n\n    G = vector&lt;vector&lt;pii&gt;&gt;(n + 1);\n    dp = vector&lt;vector&lt;node&gt;&gt;(n + 1, vector&lt;node&gt;(lg));\n    par = vector&lt;int&gt;(n + 1);\n    p = vector&lt;vector&lt;int&gt;&gt;(n + 1, vector&lt;int&gt;(lg));\n    dep = vector&lt;int&gt;(n + 1);\n\n    for (int i = 0, u, v, w; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        E.pb({u, v, w, 0});\n    }\n}\n\nsigned main() {\n    init();\n    solve();\n}\n</code></pre> \u5168\u570b\u8cfd 2016 \u7b2c\u4e8c\u53ef\u9760\u8def\u7db2 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u5716\uff0c\u6bcf\u500b\u908a\u4e0a\u6709\u908a\u6b0a \\(\\displaystyle w=\\frac{p}{q}\\)\uff0c\u6709\u91cd\u908a</p> \\[cost=\\prod w_i\\] <p>\u6c42\u56b4\u683c\u6b21\u5c0f\u751f\u6210\u6a39\u7684 \\(cost\\)\uff0c\u4ee5\u6700\u7c21\u5206\u6578 \\(\\displaystyle \\frac{p}{q}\\) \u7684\u5f62\u5f0f\u8f38\u51fa</p> <p>\\(n\\le 3000,m\\le 5\\times 10^5\\)</p> \u601d\u8def <p>\u5c07\u539f\u672c\u7684 Kruskal \u7528\u52a0\u7684\u6539\u6210\u7528\u4e58\u7684</p> <p>\u56e0\u70ba\u6211\u5011\u8003\u616e\u53d6 log\uff0c\u5047\u5982 log a, log b, log c \u662f\u6700\u5c0f\u7684\uff0c\u90a3 a, b, c \u4e5f\u6703\u662f\u6700\u5c0f\u7684\uff0c\u53ea\u4e0d\u904e\u662f\u7528\u4e58\u7684</p> <p>\u5206\u6578\u4e58\u6cd5\u53ef\u898b\u6b64\u8655\u6b64\u8655</p> <p>\u7136\u5f8c\u5c31\u5957\u7528\u6b21\u5c0f\u751f\u4e58\u6a39\u6a21\u677f\u5373\u53ef</p> CF 609 E. Minimum spanning tree for each edge <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5e36\u6b0a\u9023\u901a\u5716\uff0c\u5c0d\u6bcf\u689d\u908a\u8f38\u51fa\u5305\u542b\u90a3\u689d\u908a\u7684\u6700\u5c0f\u751f\u6210\u6a39\u6b0a\u503c</p> <p>\\(n, m \\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u82e5\u908a\u4e0d\u5728 MST \u4e0a\uff0c\u90a3\u5c31\u770b\u74b0\u4e0a\u6700\u5927\u908a\u662f\u591a\u5c11\uff0c\u628a\u5b83\u62c6\u6389\u628a\u81ea\u5df1\u52a0\u4e0a\u53bb</p> CSES - New Roads Queries <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u4f9d\u5e8f\u52a0\u5165 \\(m\\) \u689d\u908a\uff0c\u56de\u7b54 \\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\\(a,b\\) \u5728\u52a0\u5165\u7b2c\u5e7e\u689d\u908a\u6642\u9023\u901a\uff0c\u6216\u6c92\u6709\u9023\u901a</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u6703\u767c\u73fe\u5169\u500b\u9ede\u7b2c\u4e00\u6b21\u76f8\u9023\u7684\u6642\u5019\u6703\u6070\u597d\u5f62\u6210\u4e00\u689d path\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u4ee5\u300c\u6642\u9593\u6233\u8a18\u300d\u7576\u4f5c\u908a\u6b0a\u505a\u6700\u5c0f\u751f\u6210\u6a39\uff0c\u5169\u9ede\u7b2c\u4e00\u6b21\u76f8\u9023\u7684\u7b54\u6848\u5c31\u662f\u4ed6\u5011 path \u4e0a\u7684\u6b0a\u91cd\u6700\u5927\u503c</p> <p>\u8981\u8a18\u5f97\u5224\u65b7\u300c\u5230\u6700\u5f8c\u90fd\u6c92\u9023\u901a\u300d\u7684\u60c5\u6cc1</p>"},{"location":"graph/mst/#_5","title":"\u6700\u5c0f\u5dee\u503c\u751f\u6210\u6a39","text":"<p>\u6700\u5c0f\u5316\u6700\u5927\u6700\u5c0f\u5dee</p> CF EDU F. Dense spanning tree <p>\u7d66\u4e00\u9846 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u7b2c \\(i\\) \u908a\u7684\u908a\u6b0a\u70ba \\(w_i\\)\uff0c\u6c42\u6700\u5c0f\u5dee\u503c\u751f\u6210\u6a39</p> <p>\\(n\\le 10^3,m\\le 10^4,w_i\\le -10^9\\sim10^9\\)</p> code <pre><code>sort (Edges)\n\nfor (int i = 1; i &lt;= m; i++) {\n    // mn \u70ba E[i].w, mx \u7528 Kruskal \u627e\n    Dsu_init(); // O(n)\n    for (int j = i; j &lt;= m; j++) {\n        // Kruskal O(m)\n    }\n    ans = min (ans, mx - mn);\n}\n// tot: O(nlgn + m^2)\n</code></pre> \u5b9c\u4e2d\u6821\u5167\u8cfd 2022 pE <p>\u7d66\u4e00\u9846 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u7b2c \\(i\\) \u908a\u7684\u908a\u6b0a\u70ba \\(w_i\\)\uff0c\u6c42\u6700\u5c0f\u5dee\u503c\u751f\u6210\u6a39</p> <p>\\(n\\le  2\\times 10^5, m\\le 2\\times 10^5, w_i\\le 100\\)</p> code <pre><code>sort (Edges) // {w, u, v}\n\nfor (int i = 1; i &lt;= C; i++) {\n    int idx = Edges.lower_bound({i, 0, 0}) - Edges.begin();\n    Dsu_init(); // O(n)\n    for (int j = idx; j &lt;= m; j++) {\n        // Kruskal O(m)\n    }\n    ans = min (ans, mx - mn);\n}\n// tot: O(nlgn + C(n + m))\n</code></pre>"},{"location":"graph/mst/#_6","title":"\u6700\u5927\u5316\u6700\u5c0f\u908a","text":"<p>\u53c8\u7a31\u6700\u5c0f\u74f6\u9838\u751f\u6210\u6a39</p> TIOJ 1340. \u7a81\u8b8a\u53f2\u840a\u59c6 (Slime) <p>\u7d66\u4f60 \\(q\\) \u500b\u8a62\u554f\uff0c\u6bcf\u7b46 \\(a_i\\) \u8981\u9032\u884c\u4ee5\u4e0b\u64cd\u4f5c\u8b93\u5176\u8b8a\u6210 \\(b_i\\)\uff08\\(1\\le a_i,b_i\\le n\\)\uff09 :</p> <ul> <li>\u5c07 \\(a_i\\) \u52a0\u6216\u6e1b\u4e00\u500b \\(a_i\\) \u7684\u56e0\u6578\uff0c\u4f46\u52a0\u5b8c\u6216\u6e1b\u5b8c\u5f8c\u7684\u6578\u5b57\u4e5f\u8981\u5728 \\(1\\sim n\\) \u4e4b\u9593</li> </ul> <p>\u8f38\u51fa\u6700\u5927\u5316\u904e\u7a0b\u4e2d\u52a0/\u6e1b\u7684\u500d\u6578\u4e2d\u7684\u6700\u5c0f\u503c</p> <p>\\(n, q\\le 10^5\\)</p> <p>\u3010\u6cd51\uff1aGreedy\u3011</p> <p>\u5f9e\u5c0f\u5230\u5927\u679a\u8209 =&gt; \u76f8\u7576\u65bc\u7528 Kruskal \u627e\u6700\u5927\u751f\u6210\u6a39\uff0c\u8907\u96dc\u5ea6 \\(O(m\\log m)\\)</p> <p>\u3010\u6cd52\uff1a\u4e8c\u5206\u641c\u3011</p> <p>DFS/BFS check \u53ea\u9078\u908a\u6b0a \\(\\le x\\) \u7684\u662f\u5426\u80fd\u9023\u901a\uff0c\u8907\u96dc\u5ea6 \\(O(m\\log m)\\)</p> <p>\u3010\u6cd5 3\u3011</p> <p>\u6bcf\u6b21\u53d6 \\(x=\\) \u5269\u9918\u7684 \\(\\text{edge}\\) \u7684\u4e2d\u4f4d\u6578\uff0c\u6aa2\u67e5\u5716\u6709\u6c92\u6709\u9023\u901a</p> <ul> <li>\u5982\u679c\u6c92\u9023\u901a\uff1a\\(&gt;x\\) \u7684 \\(\\text{edge}\\) \u90fd\u7528\u4e0d\u5230 (\u522a\u6389) \\(\\rightarrow \\begin{cases} \\text{edge} \\space\u5c11\u4e00\u534a \\\\ \\text{vertex} \\space\u4e0d\u8b8a \\end{cases}\\)</li> <li>\u5982\u679c\u9023\u901a\uff1a\\(\\le x\\) \u7684\u9023\u901a\u584a\u7e2e\u9ede \\(\\rightarrow \\begin{cases} \\text{edge} \\space\u5c11\u4e00\u534a \\\\ \\text{vertex} \\space\u8b8a\u5c11 \\end{cases}\\)</li> </ul> <p>\u90a3\u9ebc\u6642\u9593\u8907\u96dc\u5ea6 ?</p> \\[ T(n,m)=T(n,\\frac{m}{2})+O(n+m) \\] <p>\u82e5 \\(m &lt; n\\) \u7684\u8a71\u90a3\u4e00\u5b9a\u662f\u7121\u89e3\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6\u53ea\u9700\u8003\u616e \\(m\\)\u3002</p> \\[ \\begin{align} T (m) &amp;= T(\\frac{m}{2}) + O(m) \\\\ &amp;= O(m) \\end{align} \\] <p>\u70ba\u4f55\u662f \\(O(m)\\)</p> <p>\u7121\u7aae\u7b49\u6bd4\u7d1a\u6578 \\(\\displaystyle a + ar + ar^2 + \\dots = a\\frac{1}{1-r}\\) </p> <p>\\(\\displaystyle a=n,r=\\frac{1}{2}\\) \u6211\u5011\u5f97\u5230 \\(\\displaystyle n + \\frac{n}{2} + \\frac{n}{4} + \\dots = n\\frac{1}{1-\\frac{1}{2}} = 2n.\\)</p>"},{"location":"graph/mst/#_7","title":"\u6700\u5927\u908a\u6700\u5c0f\u5316\u8def\u5f91","text":""},{"location":"graph/mst/#kruskal_1","title":"Kruskal","text":"LOJ #136. \u6700\u5c0f\u74f6\u9888\u8def <p>\u7d66\u5b9a\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684\u5716\uff0c\u908a\u6709\u6b0a\u503c\uff0c\u56de\u7b54 \\(k\\) \u500b\u8a62\u554f : </p> <ul> <li>\u5f9e \\(s\\) \u5230 \\(t\\) \u7684\u4e00\u689d\u8def\u5f91\uff0c\u4f7f\u5f97\u8def\u5f91\u4e0a\u6b0a\u503c\u6700\u5927\u7684\u4e00\u689d\u908a\u6b0a\u503c\u6700\u5c0f</li> </ul> <p>\\(n\\le 1000,m\\le 10^5,k\\le 1000\\)</p> <p>Kruskal \u5efa\u6700\u5c0f\u751f\u6210\u6a39\uff0c\u8dd1 LCA\uff0c\u9019\u500b\u9069\u7528\u5728\u591a\u7b46\u8a62\u554f\u7684\u6642\u5019</p> <p>Kruskal \u8907\u96dc\u5ea6\u7684\u74f6\u9838\u5728\u65bc sort\uff0c\u5728\u67d0\u4e9b\u984c\u76ee\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 Radix sort\uff0c\u5c07 sorting \u7684\u904e\u7a0b\u58d3\u5230\u7dda\u6027</p> <p>\u5177\u9ad4\u61c9\u7528\u53ef\u4ee5\u53c3\u8003\u4e0b\u9762\u9019\u984c</p> Zerojudge j125. 4. \u84cb\u6b65\u9053 <p>\u7d66\u4e00\u500b \\(n\\times n\\) \u7684 grid\uff0c\u6bcf\u500b\u9ede\u6709\u9ad8\u5ea6 \\(h_{i,j}\\)\uff0c\u6c42\u5f9e \\((1,1)\\) \u8d70\u5230 \\((n, n)\\) \u7684\u6700\u5927\u9ad8\u5ea6\u5dee\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11\uff0c\u9084\u6709\u5728\u9019\u500b\u524d\u63d0\u4e0b \\((1,1)\\) \u8d70\u5230 \\((n, n)\\) \u6700\u5c11\u53ef\u4ee5\u53ea\u7d93\u904e\u5e7e\u500b\u9ede</p> <p>\\(n \\le 300, h_{i,j} \\le 10^6\\)</p> \u601d\u8def <p>\u300c\u6700\u5c11\u53ef\u4ee5\u53ea\u7d93\u904e\u5e7e\u500b\u9ede\u300d\u5c31\u76f4\u63a5\u5728\u6b0a\u91cd &lt;= threshold \u7684\u908a BFS \u627e\u6700\u77ed\u8def\u5373\u53ef </p> <p>\u300c\u6700\u5c0f\u5316\u6700\u5927\u9ad8\u5ea6\u5dee\u300d\u6709\u4e09\u7a2e\u65b9\u6cd5:</p> <ul> <li> <p>\u4e8c\u5206\u641c + BFS \\(O(n\\log C)\\)</p> </li> <li> <p>Kruskal + Radix sort \\(O(n)\\)</p> </li> <li> <p>Prim + \u7dda\u6027 DS \\(O(n)\\)</p> </li> </ul> <p>Kruskal + Radix sort</p> <p>\u7528 Kruskal \u9577\u751f\u6210\u6a39\u76f4\u5230 \\((1,1)\\) \u8207 \\((n,n)\\) \u9023\u901a\uff0c\u9019\u908a\u6211\u5011\u6709\u7dda\u6027\u6642\u9593\u7684\u505a\u6cd5\u3002Kruskal \u7684\u74f6\u9838\u5728\u65bc \\(n\\log n\\) sort\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 Radix sort \u505a\u5230 \\(O(n)\\)\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u5c07\u6578\u5b57\u4ee5 \\(1024\\) \u5340\u5206\uff0c\u5c07\u6240\u6709 edges \u4ee5 \\(1024\\) \u4ee5\u4e0b\u7684 bit \u7684\u5927\u5c0f\u52a0\u5165 <code>vector</code>\uff0c\u9019\u6642\u5019\u908a\u6b0a\u70ba \\(1024\\) \u4ee5\u4e0b\u7684\u908a\u5df2\u6392\u5e8f\u5b8c\u6210\u3002\u4ee5\u9019\u500b\u524d\u63d0\u4e0b\uff0c\u518d\u5c07\u5927\u5bb6\u4ee5 1024 \u4ee5\u4e0a\u7684 bit \u7684\u5927\u5c0f\u52a0\u5165 <code>vector</code>\uff0c\u9019\u6642\u4e0d\u6703\u5f71\u97ff \\(1024\\) \u4ee5\u4e0b\u7684\u908a\uff0c\\(1024\\) \u4ee5\u4e0a\u7684\u908a\u5c31\u6703\u5b8c\u6210\u6392\u5e8f\u3002</p> <p>Prim + \u7dda\u6027 DS</p> <p>\u7528\u4e0b\u9762 Prim \u7684\u65b9\u6cd5\u4e00\u6b65\u6b65\u7684\u5efa\u7acb mini-max spanning tree \u76f4\u5230\u9078\u5230\u7d42\u9ede\u70ba\u6b62</p> code <pre><code>#include &lt;array&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nusing Edge = pair&lt;int, int&gt;;  // &lt;weight, to&gt;\nusing Graph = vector&lt;vector&lt;Edge&gt;&gt;;\n\nint n;\nint answ, anslen;\nGraph g;\nvector&lt;array&lt;int, 3&gt;&gt; edges;  // &lt;weight, from, to&gt;\nvector&lt;int&gt; dis;              // for bfs\n\n// Disjoint Set\nvector&lt;int&gt; par;\n\nint find(int x) {\n    if (par[x] == x) return x;\n    return par[x] = find(par[x]);\n}\n\ninline int idx(int i, int j) {\n    return i * n + j;\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n    g = Graph(n * n);\n\n    vector&lt;vector&lt;int&gt;&gt; A(n, vector&lt;int&gt;(n));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            cin &gt;&gt; A[i][j];\n            if (i &gt; 0) {\n                int u = idx(i, j);\n                int v = idx(i - 1, j);\n                int w = abs(A[i][j] - A[i - 1][j]);\n                g[u].push_back({w, v});\n                g[v].push_back({w, u});\n                edges.push_back({w, u, v});\n            }\n            if (j &gt; 0) {\n                int u = idx(i, j);\n                int v = idx(i, j - 1);\n                int w = abs(A[i][j] - A[i][j - 1]);\n                g[u].push_back({w, v});\n                g[v].push_back({w, u});\n                edges.push_back({w, u, v});\n            }\n        }\n    }\n}\n\nconst int M = 1024;\nvector&lt;array&lt;int, 3&gt;&gt; bucket[M];\nvoid sortEdges() {\n    // sort(edges.begin(), edges.end());\n    // Radix sort (1024 \u9032\u4f4d)\n\n    {\n        // \u5148\u8003\u616e 1024 \u4ee5\u4e0b\u7684\u4f4d\u5143\n        for (auto e : edges) {\n            int w = e[0];\n            bucket[w &amp; 1023].push_back(e);\n        }\n        // \u8b93 edges \u88e1\u9762\u7684 edge \u4ee5 1024 \u4ee5\u4e0b\u7684\u4f4d\u5143\u6392\u5e8f\n        int pos = 0; // \u76f4\u63a5\u8986\u84cb\u539f\u672c\u7684 edges\n        for (int i = 0; i &lt; M; i++) {\n            for (auto e : bucket[i]) {\n                edges[pos++] = e;\n            }\n        }\n        for (int i = 0; i &lt; M; i++) bucket[i].clear();\n    }\n    {\n        // \u5728 edge \u4ee5 1024 \u4ee5\u4e0b\u7684\u4f4d\u5143\u6392\u5e8f\u5f8c\u7684\u524d\u63d0\u4e0b\n        // \u518d\u8003\u616e 1024 \u4ee5\u4e0a\u7684\u4f4d\u5143\n        for (auto e : edges) {\n            int w = e[0];\n            bucket[w &gt;&gt; 10].push_back(e);\n        }\n        int pos = 0;\n        for (int i = 0; i &lt; M; i++) {\n            for (auto e : bucket[i]) {\n                edges[pos++] = e;\n            }\n        }\n    }\n}\n\nvoid kruskal() {\n    par = vector&lt;int&gt;(n * n);\n    for (int i = 0; i &lt; n * n; i++) par[i] = i;\n\n    int src = idx(0, 0);\n    int dst = idx(n - 1, n - 1);\n\n    for (auto [w, u, v] : edges) {\n        if (find(u) != find(v)) {\n            par[find(u)] = find(v);\n        }\n        if (find(src) == find(dst)) {\n            answ = w;\n            break;\n        }\n    }\n}\n\nvoid bfs() {\n    dis = vector&lt;int&gt;(n * n, -1);\n\n    int src = idx(0, 0);\n    int dst = idx(n - 1, n - 1);\n\n    queue&lt;int&gt; que;\n    que.push(src);\n    dis[src] = 0;\n    while (dis[dst] == -1) {\n        int u = que.front();\n        que.pop();\n        for (auto [w, v] : g[u]) {\n            if (w &gt; answ) continue;\n            if (dis[v] == -1) {\n                dis[v] = dis[u] + 1;\n                que.push(v);\n            }\n        }\n    }\n    anslen = dis[dst];\n}\n\nint main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    init();\n    sortEdges();\n    kruskal();\n    bfs();\n\n    cout &lt;&lt; answ &lt;&lt; '\\n';\n    cout &lt;&lt; anslen &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre>"},{"location":"graph/mst/#incremental","title":"Incremental","text":"\u7d93\u5178\u984c <p>\u7d66\u5b9a\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684\u5e36\u6b0a\u7121\u5411\u5716\uff0c\u5f9e \\(s\\to t\\) \u6700\u5927\u908a\u6b0a\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\u6211\u5011\u4f7f\u7528\u985e\u4f3c Prim \u7684\u65b9\u6cd5\uff0c\u6bcf\u6b21\u9078\u7576\u524d\u5468\u570d\u6b0a\u503c\u6700\u5c0f\u7684\u908a\uff0c\u66f4\u65b0 threshold</p> <p> </p> \u9ede\u4e0a\u7684\u6b0a\u503c\u4ee3\u8868\u8d70\u5230\u8a72\u9ede\u6700\u5927\u908a\u6b0a\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11 code <pre><code>int Prim (int s, int t) {\n    vector&lt;int&gt; vis(n);\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n    pq.push({0, s});\n\n    int threshold = 0;\n    while (pq.size()) {\n        auto [d, u] = pq.top();\n        pq.pop();\n\n        threshold = max(threshold, d);\n        if (u == t) break; \n        if (vis[u]) continue;\n        vis[u] = true;\n\n        for (auto [v, w] : G[u]) {\n            pq.push({max(w, threshold), v});\n        }\n    }\n    return threshold;\n}\n</code></pre> <p>Prim \u8907\u96dc\u5ea6\u7684\u74f6\u9838\u5728\u65bc\u4f7f\u7528\u8457\u8cc7\u6599\u7d50\u69cb\uff08<code>priority_queue</code>\uff09\u3002\u82e5\u984c\u76ee\u7684\u908a\u6b0a\u5728 \\(\\approx 10^5\\) \u7684\u6642\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8cc7\u6599\u7d50\u69cb\uff0c\u53ef\u4ee5\u58d3\u5230\u7dda\u6027\u6642\u9593\uff0c\u9069\u7528\u65bc\u56fa\u5b9a\u8d77\u9ede\uff0c\u56fa\u5b9a\u7d42\u9ede</p> \u7dda\u6027\u8cc7\u6599\u7d50\u69cb <pre><code>struct DS {\n    vector&lt;vector&lt;node&gt;&gt; pq;\n    int max_val = 0, threshold = 0;\n\n    void init(int _max_val) {\n        max_val = _max_val;\n        pq = vector&lt;vector&lt;node&gt;&gt;(max_val + 1);\n    }\n\n    void push(pii x) {  // pair&lt;dis, u&gt;\n        pq[max(threshold, x.first)].pb(x);\n    }\n\n    pii get_value() {\n        while (threshold &lt;= max_val &amp;&amp; pq[threshold].size() == 0) threshold++;\n\n        if (threshold &lt;= max_val &amp;&amp; pq[threshold].size() &gt; 0) {\n            pii ret = pq[threshold].back();\n            pq[threshold].pop_back();\n            return ret;\n        } else {\n            return {-1, -1};\n        }\n\n    }\n} pq;\n\nint Prim(int s, int t) {\n    vector&lt;int&gt; vis(n);\n    pq.init(max_edge);\n    pq.push({0, s});\n\n    while (pq.size()) {\n        auto [d, u] = pq.get_value();\n\n        if (u == t) break;\n        if (vis[u]) continue;\n        vis[u] = true;\n\n        for (auto [v, w] : G[u]) {\n            pq.push({w, v});\n        }\n    }\n    return pq.threshold;\n}\n</code></pre> <p>\u4e0b\u9762\u662f\u6709\u61c9\u7528\u5230\u4e0a\u9762\u7dda\u6027\u8cc7\u6599\u7d50\u69cb\u7684\u984c\u76ee</p> 2023 TOI \u4e00\u6a21 pD.\u5b89\u9038\u65c5\u884c\u8def\u7dda (jaunt) <p>\u898b\u6b64\u8655</p>"},{"location":"graph/mst/#_8","title":"\u56e0\u6578","text":"LOJ #6807. \u300cTHUPC 2022 \u521d\u8d5b\u300d\u6700\u5c0f\u516c\u500d\u6811 <p>\u7d66\u4e00\u5f35\u9ede\u5f9e \\(L,\\ldots ,R\\) \u7de8\u865f\u7684\u7121\u5411\u5b8c\u5168\u5716\uff0c\\((u,v)\\) \u4e4b\u9593\u7684\u908a\u6b0a\u70ba \\(\\text{lcm}(u,v)\\)\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6a39\u6b0a\u503c</p> <p>\\(1\\le L \\le R \\le 10^6,R-L\\le 10^5\\)</p> \u601d\u8def <p>\u7528 Borovka \u7684\u89d2\u5ea6\u4e0b\u53bb\u601d\u8003\uff0c\u6bcf\u500b\u9ede\u5148\u627e\u6700\u8fd1\u7684\u9ede\u9023\u908a\u3002\u53ef\u4ee5\u89c0\u5bdf\u5230\u5c0d\u65bc\u4e00\u500b\u9ede \\(b\\)\uff0c\u9664\u975e\u6709\u4e00\u500b\u9ede \\(a\\) \u8ddf \\(b\\) \u5b58\u5728\u516c\u56e0\u6578\uff0c\u5426\u5247 \\(b\\) \u76f4\u63a5\u53bb\u9023 \\(L\\) \u662f\u6700\u597d\u7684\u3002\u6211\u5011\u53ef\u4ee5\u5c07 \\(\\text{lcm}\\) \u5beb\u6210 :</p> \\[\\text{lcm}(a,b)=\\frac{a\\times b}{\\gcd (a,b)}=\\frac{a}{\\gcd(a,b)}\\times b\\] <p>\u5c0d\u65bc\u9ede \\(b\\)\uff0c\u56e0\u70ba \\(\\gcd(a,b)\\) \u4e00\u5b9a\u662f \\(b\\) \u7684\u56e0\u6578\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u679a\u8209 \\(b\\) \u7684\u56e0\u6578\uff0c\u5c0d\u65bc\u6bcf\u500b\u56e0\u6578\u9078\u64c7\u6700\u5c0f\u7684 \\(a\\) \u5efa\u908a\u3002\u7531\u65bc \\(b\\) \u7684\u56e0\u6578\u5e73\u5747\u662f \\(\\log b\\) \u500b\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5f97\u5230\u65b0\u5716 \\(\\text{edges}\\) \u6578\u91cf\u70ba \\((R-L)\\log R\\) <sup>1</sup>\uff0c\u4ee5\u9019\u5f35\u8dd1 Kruskal \u5373\u53ef\u6c42\u5f97\u7b54\u6848</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct DSU {\n    vector&lt;int&gt; par, sz;\n\n    DSU (int n = 0) : par(n), sz(n, 1) {\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    int find (int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n    bool merge (int u, int v) {\n        u = find(u), v = find(v);\n        if (u == v) return false;\n        if (sz[u] &lt; sz[v]) swap(u, v);\n        par[v] = u;\n        sz[u] += sz[v];\n        return true;\n    }\n};\n\nstruct Edge {\n    int u, v, w;\n\n    bool operator&lt;(const Edge &amp;rhs) const {\n        return w &lt; rhs.w;\n    }\n};\n\nint L, R;\nvector&lt;Edge&gt; edges;\n\nint Kruskal() {\n    DSU dsu(R + 1);\n    sort(ALL(edges));\n\n    int ans = 0;\n    for (auto [u, v, w] : edges) {\n        if (dsu.find(u) != dsu.find(v)) {\n            dsu.merge(u, v);\n            ans += w;\n        }\n    }\n    return ans;\n}\n\nvoid seive() {\n    vector&lt;int&gt; mn(R + 1);\n    for(int i = 1; i &lt;= R; i++) {\n        for (int j = i; j &lt;= R; j += i) {\n            if (j &gt;= L) {\n                mn[i] = j;\n                break;\n            }\n        }\n    }\n\n    for(int i = 1; i &lt;= R; i++) {\n        for (int j = mn[i] + i; j &lt;= R; j += i) {\n            edges.pb({mn[i], j, mn[i] * j / i});\n        }\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; L &gt;&gt; R;\n    seive();\n    cout &lt;&lt; Kruskal() &lt;&lt; '\\n';\n} \n</code></pre> 2023 IOIC 207. NewWorld Online <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u9ede\u6709\u6b0a\u91cd \\(a_i\\)\uff0c\u5169\u9ede\u9023\u908a\u7684\u6b0a\u91cd\u70ba \\(\\gcd(a_i, a_j)\\)\uff0c\u554f\u6700\u5927 MST </p> <p>\\(1 \\le n \\le 10^5, 1 \\le a_i \\le 10^6\\)</p> \u601d\u8def <p>\u4f7f\u7528\u6578\u8ad6\u7be9\u6cd5\u6280\u5de7\uff0c\u6bcf\u6b21\u5c07\u540c\u4e00\u500b\u56e0\u6578\u7684\u9ede merge</p> <p>\u95dc\u9375\u5b57 : JZOJ5888 GCD\u751f\u6210\u6811</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int N = 1e6 + 5;\nint a[N], t[N], n;\n\nstruct DSU {\n    vector&lt;int&gt; par, sz;\n\n    DSU(int n) : par(n + 1), sz(n + 1, 1) {\n        for (int i = 1; i &lt;= n; i++) {\n            par[i] = i;\n        }\n    }\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n    bool merge(int u, int v) {\n        u = find(u), v = find(v);\n        if (u == v) return false;\n        if (sz[u] &lt; sz[v]) swap(u, v);\n        par[v] = u;\n        sz[u] += sz[v];\n        return true;\n    }\n};\n\nsigned main() {\n    cin &gt;&gt; n;\n    int mx = 0, ans = 0;\n    for(int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        mx = max(mx, a[i]);\n\n        if (t[a[i]] == 0) {\n            t[a[i]] = i; \n        } else {\n            ans += a[i];\n        }\n    }\n\n    DSU dsu(mx);\n    for (int i = mx; i &gt; 0; i--) {\n        int now = 0;\n        for (int j = i; j &lt;= mx; j += i) {\n            if (t[j] == 0) continue;\n            if (now == 0) {\n                now = j;\n                continue;\n            }\n            if (dsu.merge(now, j)) {\n                ans += i;\n            }\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> CF 1513 D. GCD and MST <p>\u6709 \\(n\\) \u500b\u6578\uff0c\u6bcf\u500b\u6578\u4ee3\u8868\u4e00\u500b\u9ede\uff0c\u9ede \\(i\\) \u548c\u9ede \\(i+1\\) \u4e4b\u9593\u90fd\u6709\u4e00\u689d\u6b0a\u503c\u70ba \\(p\\) \u7684\u908a\uff0c\u82e5\u5340\u9593 \\([i,j]\\) \u7684\u6700\u5c0f\u503c\u7b49\u65bc\u5b83\u5011\u7684 \\(\\gcd\\)\uff0c\\(i\\) \u548c \\(j\\) \u4e4b\u9593\u9023\u4e00\u689d\u5340\u9593\u6700\u5c0f\u503c\u7684\u908a\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6a39</p> <p>\\(n\\le 2\\times 10^5,p\\le 10^9\\)</p> \u601d\u8def <p>https://theriseofdavid.github.io/2020/04/27/Codeforces/Codeforces%201513D/</p> <p>kruskal \u904e\u7a0b\u60f3\u6cd5</p> code <pre><code>void solve() {\n    sort(A.begin(), A.end());\n    int sum = 0, cnt = 0;\n    for (int i = 0; i &lt; n; i++) {\n        int x = A[i].first, y = A[i].second;\n        if (x &gt;= m) break;\n        // \u5f80\u5de6\u63a5, \u76e1\u91cf\u63a5, \u4e00\u5b9a\u8981\u63a5\u8d77\u4f86\n        for (int j = y - 1; j &gt;= 0 &amp;&amp; a[j] % x == 0 &amp;&amp; !vis[j]; j--) \n            cnt++, sum+=x, vis[j] = true;\n        // \u5f80\u53f3\u63a5, \u4f46\u8a18\u5f97\u8981\u7559\u4e00\u683c\u8b93\u66f4\u53f3\u908a\u7684\u96c6\u5408\u6709\u8fa6\u6cd5\u4f86\u63a5\u6211\u5011\n        for (int j = y + 1; j &lt; n &amp;&amp; a[j] % x == 0 &amp;&amp; !vis[j - 1]; j++) \n            cnt++, sum+=x, vis[j - 1] = true;\n            // \u9023 j \u4f46\u56e0 j \u662f\u6700\u5916\u5c64\u6240\u4ee5\u4e0d\u80fd vis[j] = 1 \u8b49\u660e\u5982\u4e0b\n            // \u8b93\u4ed6\u6700\u65c1\u908a\u90a3\u683c\u525b\u597d\u6c92\u6709 vis\n            // vis[u] \u5b9a\u7fa9 u \u662f\u5426\u5df2\u7d93\u56fa\u5b9a\u6c92\u8fa6\u6cd5\u518d\u9023\u908a\u4e86 \n            // \u82e5 v \u518d u \u5de6\u908a, \u6bd4\u8f03\u53f3\u908a\u7684 w (\u5982\u4e0b\u5716)\n            // ![](https://i.imgur.com/XAiwOvI.png)\n            // v,u,..,w \n            // \u82e5 w \u60f3\u8981\u9023\u908a, \u90a3\u4ed6\u627e v \u53bb\u9023\u4e00\u5b9a\u6bd4 u \u56f0\u96e3\n            // v \u56e0\u70ba\u9084\u9700\u8981\u591a\u5224\u65b7\u4e00\u500b v \u662f\u5426 % min == gcd, u \u9023\u7684\u8a71\u5247\u4e0d\u7528\n            // \u6240\u4ee5\u8981\u9023\u7684\u8a71\u4e00\u5b9a\u662f\u627e\u76ee\u524d\u96c6\u5408 [l, r] \u6700\u53f3\u908a\u7684, \u4e0d\u5931\u4e00\u822c\u6027\n    }\n    sum += m * (n - 1 - cnt);\n    cout &lt;&lt; sum &lt;&lt; \"\\n\";\n}\n\nvoid init () {\n    memset(vis, 0, sizeof vis);\n    A.clear();\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        A.pb({a[i], i});\n    }\n}\n</code></pre> Atcoder abc210 E. Ring MST <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede\u7121\u5411\u5716\uff0c\u9ede\u7de8\u865f \\(0,\\ldots ,n - 1\\)\uff0c\u4e00\u958b\u59cb\u6c92\u6709\u4efb\u4f55\u908a\uff0c\u6709 \\(m\\) \u7a2e\u64cd\u4f5c\uff0c\u6bcf\u7a2e\u64cd\u4f5c\u90fd\u53ef\u505a\u4efb\u610f\u6b21 \uff1a</p> <ul> <li>\u7d66 \\(a_i, c_i\\)\uff0c\u9078\u4efb\u610f\u4e00\u500b\u9ede \\(x\\)\uff0c\u9023\u63a5 \\(x + a_i \\pmod{n}\\) \u8207 \\(x\\)\uff0c\u82b1\u8cbb \\(c_i\\)</li> </ul> <p>\u8f38\u51fa\u6700\u5c11\u8b93\u5716\u9023\u901a\u7684\u82b1\u8cbb</p> <p>\\(n\\le 10^9,m\\le 10^5\\)</p> \u601d\u8def <p>\u5148\u5c07\u64cd\u4f5c\u5f9e \\(c_i\\) \u5c0f\u5230\u5927\u6392\u5e8f</p> <p>\u6211\u5011\u8a2d\u52a0\u4e0a\u524d \\(i\\) \u7a2e\u908a\u5f8c\uff0c\u6700\u4f73\u89e3\u6709 \\(x_i\\) \u500b\u9023\u901a\u584a\u3002\u7279\u5225\u5730\uff0c\\(x_0=n\\)\uff0c\u5982\u6b64\u4e00\u4f86\uff0c\u7b54\u6848\u5c31\u662f :</p> \\[\\sum ^m_{i=1}c_i\\cdot (x_{i-1}-x_{i})\\] <p>\\(u\\) \u80fd\u8ddf \\(v\\) \u80fd\u9023\u901a\u82e5\u4e14\u552f\u82e5\u5b58\u5728\u6574\u6578 \\(k_1,k_2,\\ldots k_t\\) \u6eff\u8db3 </p> \\[\\begin{align} &amp;u\\equiv v+k_1\\times a_1 + k_2\\times a_2 +\\ldots +k_t\\times a_t\\pmod{n} \\\\ &amp; u\\equiv v+ k_0 \\times n+k_1\\times a_1 + k_2\\times a_2 +\\ldots +k_t\\times a_t \\\\  &amp; u\\equiv v + kd_t \\\\  &amp; u\\equiv v\\pmod{d_t}\\end{align}\\] <p>\u5176\u4e2d \\(d_t=\\gcd (n, a_1,\\ldots ,a_t)\\)</p> <p>\u9019\u6642 mod \u51fa\u4f86\u7684\u6578\u5b57\u53ea\u6703\u662f \\(0,1,\\ldots, d_t - 1\\)\uff0c\u6bcf\u500b\u6578\u5b57\u4ee3\u8868\u4e00\u500b\u7368\u7acb\u7684\u9023\u901a\u584a\uff0c\u6545\u9023\u901a\u584a\u7684\u6578\u91cf\u70ba \\(d_t\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn = 1e5 + 5;\nint n, m;\n\nstruct node {\n    int a, c;\n    friend bool operator &lt; (const node &amp;A, const node &amp;B) {\n        return A.c &lt; B.c;\n    }\n} arr[maxn];\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; arr[i].a &gt;&gt; arr[i].c;\n    }\n\n    sort(arr + 1, arr + m + 1);\n    long long ans = 0;\n    int x_i = n;\n\n    for (int i = 1; i &lt;= m; i++) {\n        int last = x_i;\n        x_i = __gcd(x_i, arr[i].a);\n        ans += 1ll * (last - x_i) * arr[i].c;\n    }\n\n    if (x_i != 1) cout &lt;&lt; -1 &lt;&lt; \"\\n\";\n    else cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> 2024 TOI \u6a21\u64ec\u8cfd\u7b2c\u4e09\u5834 pA. \u6700\u2f29\u2f63\u6210\u6a39\u5efa\u69cb <p>\u69cb\u9020\u4e00\u500b n \u9ede m \u908a\u7684\u5716\uff0c\u7b2c i \u689d\u908a\u6b0a\u91cd\u70ba i\uff0c\u6eff\u8db3\u6700\u5c0f\u751f\u6210\u6a39\u6b0a\u503c\u70ba k\u3002</p> <p>\\(n,m\\le 2\\times 10^5, k\\le 2\\times 10^{10}\\)</p> \u601d\u8def <p>\u6211\u5011\u5047\u8a2d\u751f\u6210\u6a39\u9023\u63a5\u7684\u6070\u597d\u662f (1, 2), (2, 3), (3, 4), ...\u3002\u6700\u5c0f\u7684\u60c5\u6cc1\u5c31\u662f\u751f\u6210\u6a39\u7684\u6b0a\u91cd = 1, 2, 3, 4,...\uff0c\u82e5\u9023\u9019\u6a23 k \u90fd\u6bd4\u4ed6\u5c0f\u90a3\u76f4\u63a5\u8f38\u51fa\u7121\u89e3\uff0c\u5426\u5247\uff0c\u6211\u5011\u5c31\u4f86\u8003\u616e\u6bcf\u689d\u751f\u6210\u6a39\u908a\u80fd\u8b93\u4ed6\u8b8a\u5f97\u591a\u5927\u3002\u4ee4\u6700\u5c0f\u751f\u6210\u6a39\u4e0a\u6b0a\u91cd\u7b2c i \u5927\u7684\u908a\u6b0a\u91cd w[i]\uff0c\u6211\u5011\u601d\u8003\u5b83\u7684\u4e0a\u4e0b\u754c\u662f\u591a\u5c11\uff1a</p> <ol> <li> <p>\u81f3\u5c11\u9084\u6709 i - 1 \u689d\u908a\u6bd4\u9019\u689d\u908a\u5927\uff0c\u6240\u4ee5 w[i] &lt;= m - (i - 1)</p> </li> <li> <p>w[i] \u591a\u5927\u53d6\u6c7a\u65bc\u6bd4\u4ed6\u5c0f\u7684\u908a\u7684\u6578\u91cf\uff0c\u53c8\u56e0\u70ba\u4ed6\u662f\u6a39\u4e0a\u6b0a\u91cd\u7b2c i \u5927\uff0c\u4ee3\u8868\u6bd4\u4ed6\u5c0f\u7684\u908a\u662f\u9023\u63a5\u8457\u4e00\u500b n - i \u500b\u9ede\u7684\u5716\uff0cn - i \u500b\u9ede\u7684\u5716\u6700\u591a\u53ea\u6709 \\(\\binom{n - i}{2}\\) \u689d\u908a\uff0c\u6240\u4ee5\u53ef\u4ee5\u5217\u51fa w[i] - 1\uff08n - i \u500b\u9ede\u7684\u5716\u771f\u6b63\u7684\u908a\u7684\u6578\u91cf\uff09 &lt;= binom(n - i, 2)\uff08n - i \u500b\u9ede\u7684\u5716\u6700\u5927\u7684\u908a\u7684\u6578\u91cf\uff09\u3002\u5982\u679c\u9084\u662f\u4e0d\u592a\u61c2\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u5716\u7247\u3002</p> </li> <li> <p>\u7531\u65bc\u5b83\u662f\u751f\u6210\u6a39\u4e0a\u6b0a\u91cd\u7b2c i \u5c0f\u7684\u908a\uff0c\u6240\u4ee5 w[i] &gt;= n - i</p> </li> </ol> <p> w[2] \u80fd\u591a\u5927\u53d6\u6c7a\u65bc\u7d05\u8272\u6846\u8d77\u4f86\u7684\u7bc4\u570d\u5167\u7684\u908a\u7684\u6578\u91cf </p> <p>\u6240\u4ee5\u6211\u5011\u6709 n - i &lt;= w[i] &lt;= min{m + 1 - i, binom(n - i, 2) + 1}\u3002\u6211\u5011\u77e5\u9053\u4e86\u4e0a\u4e0b\u754c\u5f8c\uff0c\u5c31\u80fd\u53bb\u8abf\u6574\u6bcf\u500b w[i]\uff0c\u8b93 sum(w[i]) = k\u3002</p> <p>\u53ef\u4ee5\u5148\u60f3\u6700 general \u7684 case\uff0c\u4e5f\u5c31\u662f\u7576 m = n - 1 \u6642\uff0c\u6211\u5011\u5047\u8a2d\u751f\u6210\u6a39\u9023\u63a5\u7684\u6070\u597d\u662f (1, 2), (2, 3), (3, 4), ...\uff0c\u9019\u6a23\u6bd4\u8f03\u65b9\u4fbf\u601d\u8003\u3002</p> <p> </p> <p>\u4f9d\u7167\u984c\u76ee\u7684\u610f\u601d\uff0c\u6211\u5011\u80fd\u5f97\u5230\u7684\u908a\u6b0a\u7e3d\u548c\u4e5f\u5c31\u53ea\u6709 (1 + 2 + ... + n)\uff0c\u6240\u4ee5\u5982\u679c k \u5c0f\u65bc\u9019\u500b\u6578\u5b57\u90a3\u5c31\u662f\u7121\u89e3\u3002\u6211\u5011\u7e7c\u7e8c\u5f80 m = n, m = n + 1 \u7684 case \u601d\u8003</p> <p> </p> <p>\u6211\u5011\u767c\u73fe\u5176\u5be6\u5c0d\u65bc\u4e00\u689d\u975e MST \u7684\u908a\u7684\u9023\u63a5\uff0c\u5b83\u53ef\u4ee5\u8b93\u53f3\u7aef\u7684\u67d0\u80fd\u7684 suffix +1\u3002</p> <p> </p> <p>\u4f46\u9019\u6a23\u9019\u984c\u5c31\u7b97\u77e5\u9053\u9019\u4e9b\u6027\u8cea\u9084\u662f\u4e0d\u597d\u505a\u3002\u6211\u5011\u8003\u616e\u8b93 suffix \u62c6\u6210\u4e00\u500b\u53c8\u4e00\u500b\u55ae\u7368\u7684\u8ca2\u737b\uff08\u4f8b\u5982 [1, 3] \u90fd +1 \u8b8a\u6210 [1, 1] +1, [2, 2] +1, [3, 3] + 1\uff09\uff0c\u9019\u6a23\u6211\u5011\u53ef\u4ee5\u5f9e\u5f8c\u9762\u958b\u59cb\uff0c\u5c0d\u65bc\u6bcf\u4e00\u689d\u908a\uff0c\u770b\u6709\u5e7e\u908a\u6240\u4fc3\u6210\u7684 suffix \u53ef\u4ee5\u8b93\u7576\u524d\u9019\u689d\u908a +1\uff0c\u7531\u65bc\u8d8a\u524d\u9762\u80fd\u7d66\u51fa\u8ca2\u737b\u7684 suffix \u6703\u8d8a\u4f86\u8d8a\u5c11\uff08\u524d\u9762\u80fd\u9023\u7684\u908a\u8d8a\u4f86\u8d8a\u5c11\uff09\uff0c\u81ea\u7136\u5c0d\u7b54\u6848\u7684\u8ca2\u737b\u4e5f\u5c31\u6c92\u8fa6\u6cd5\u90a3\u9ebc\u5927\uff0c\u6240\u4ee5\u6211\u5011\u6703 greedy \u7684\u5f9e\u5f8c\u9762\u7684\u908a\u958b\u59cb\u8b93\u4ed6 +1\uff0c\u80fd\u52a0\u5c31\u52a0\u3002</p> <p> </p> <p>\u9019\u908a\u662f\u4e00\u500b\u5be6\u969b\u7684\u4f8b\u5b50\uff1a</p> <p> </p> <p>\u6211\u5011\u5148\u8003\u616e\u7576\u524d\u6700\u53f3\u908a\u90a3\u689d\u908a\u6700\u591a\u80fd\u52a0\u5230\u591a\u5c11\uff0c\u6700\u597d\u7684\u60c5\u6cc1\u5c31\u662f\u524d\u9762\u90fd\u9023\u908a\uff0c\u4f46\u6211\u5011\u6703\u767c\u73fe\u9019\u6a23\u6211\u5011\u7e3d\u5171\u7684\u908a\u624d 10 \u689d\uff0c\u9019\u908a\u5c31\u5efa\u4e86 11 \u689d\uff0c\u592a\u591a\uff0c\u6240\u4ee5\u8003\u616e\u62d4\u6389\u4e00\u689d\uff08\u6211\u5011\u6703\u62d4\u6389\u53f3\u7aef\u9ede\u96e2\u6211\u5011\u8d8a\u8fd1\u7684\u8d8a\u597d\uff0c\u4f46\u9019\u5176\u5be6\u4e0d\u7528\u5be6\u4f5c\uff0c\u6211\u5011\u53ea\u8981\u6c7a\u5b9a\u597d\u6bcf\u689d MST \u4e0a\u7684\u908a\u6b0a\u91cd\u61c9\u8a72\u8981\u662f\u591a\u5c11\u5373\u53ef\uff0c\u5269\u4e0b\u7684\u908a\u7b49\u7b49\u6211\u5011\u6703\u8aaa\uff09\u3002\u9019\u6a23\u6211\u5011\u7684\u9084\u9700\u8981\u7684\u5c31\u662f need = 9 - 5 = 4\u3002</p> <p> </p> <p>\u518d\u4f86\u6211\u5011\u8003\u616e\u53f3\u908a\u5c6c\u904e\u4f86\u7b2c\u4e8c\u689d\u908a\uff0c\u4e00\u6a23\u770b\u662f\u5426\u524d\u9762\u90fd\u9023\u908a\uff0c\u767c\u73fe\u662f ok \u7684\uff0c\u908a\u4e0d\u6703\u4e0d\u5920\u7528\uff0c\u6240\u4ee5\u6211\u5011 need = 4 - 3 = 1\u3002\u540c\u7406\uff0c\u5230\u53f3\u908a\u5c6c\u904e\u4f86\u7b2c\u4e09\u689d\u908a\u6642\uff0cneed = 0\uff0c\u6b64\u6642\u5c31\u914d\u5b8c\u4e86\u3002\u5982\u679c\u914d\u5230\u6700\u5de6\u908a\u7684\u908a\u9084\u767c\u73fe need \u9084\u6709\u5269\uff0c\u90a3\u9ebc\u5c31\u662f\u7121\u89e3\u3002</p> <p> </p> <p>\u6211\u5011\u76ee\u524d\u624b\u4e0a\u53ea\u6709 MST \u4e0a\u7684\u908a\uff0c\u4e26\u4e0d\u77e5\u9053\u975e MST \u908a\u5177\u9ad4\u7684\u60c5\u6cc1\u662f\u5982\u4f55\uff0c\u6240\u4ee5\u6211\u5011\u9019\u908a\u8981\u4f86\u601d\u8003\u3002\u56e0\u70ba MST \u7684\u6027\u8cea\uff08\u6b0a\u91cd\u8d8a\u5c0f\u7684\uff0c\u9023\u5230\u8d8a\u5f8c\u9762\uff0c\u6703\u9020\u6210\u4ed6\u5148\u88ab MST \u9078\u5230\uff09\uff0c\u6211\u5011\u5fc5\u9808\u5f9e\u6700\u5de6\u908a\u958b\u59cb\u9023\u975e MST \u7684\u908a\uff0c\u6211\u5011\u679a\u8209\u503c\u57df i = [1, m]\uff0c\u82e5 i \u9019\u500b\u503c\u57df\u4e0d\u5728 MST \u4e0a\uff0c\u5247\u5efa\u908a\uff0c\u5efa\u908a\u7684\u65b9\u5f0f\u4e00\u5f8b\u662f\u5148\u679a\u8209\u53f3\u7aef\u9ede\u5f9e\u5de6\u5230\u53f3\uff08\u56e0\u70ba\u53f3\u7aef\u9ede\u8d8a\u5c0f\uff0c\u80fd\u5f71\u97ff\u5230\u7684 suffix \u8d8a\u591a\uff09\uff0c\u518d\u679a\u8209\u5de6\u7aef\u9ede\u5f9e\u53f3\u5230\u5de6\uff08\u4e5f\u53ef\u4ee5\u5de6\u5230\u53f3\uff0c\u9019\u500b\u6c92\u6709\u9650\u5236\uff09\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nint C2(int n) {\n    return n * (n - 1) / 2;\n}\n\nstruct Edge {\n    int x, y;\n};\n\nsigned main() {\n    cin.tie(0);\n    ios_base::sync_with_stdio(false);\n    int n, m, ans;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; ans;\n    int base = C2(n);\n    // \u6700\u5c0f\u7684\u60c5\u6cc1\u662f n - 1 \u689d\u908a(tree \u7684 case)\n    if (ans &lt; base) {\n        // \u82e5\u9023\u6700\u5c0f\u7684\u60c5\u6cc1\u90fd\u7b54\u4e0d\u5230\u5247\u7121\u89e3\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    int need = ans - base; // \u9084\u9700\u8981\u591a\u5c11\n    vector&lt;Edge&gt; e(m + 1);\n    // \u9023\u597d\u6240\u6709\u751f\u6210\u6a39\u7684\u908a\n    for (int i = 1; i &lt; n; i++) {\n        int upper_bound = min(m + 1ll - i, C2(n - i) + 1ll);\n        int now = n - i;\n        // inc: \u9019\u689d\u908a\u53ef\u4ee5\u8ca2\u737b\u591a\u5c11\u5230\u7b54\u6848\n        int inc = min(need, (int)upper_bound - now);\n        need -= inc;\n        e[now + inc] = {i, i + 1};\n    }\n    if (need &gt; 0) {\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    // \u9023\u597d\u751f\u6210\u6a39\u4ee5\u5916\u7684\u908a\n    // \u81f3\u5c11\u76f8\u9694 2\uff0c\u4e0d\u7136\u6703\u6709\u91cd\u908a\n    int l = n - 2, r = n;\n    for (int i = 1; i &lt;= m; i++) {\n        if (!e[i].x) {\n            e[i] = {l, r};\n            // \u5927\u5230\u5c0f\u679a\u8209 l, r \u5f9e l \u958b\u59cb\u5f80\u53f3\u679a\u8209\n            if (r &lt; n) {\n                r++;\n            } else {\n                l--;\n                r = l + 2;\n            }\n        }\n        cout &lt;&lt; e[i].x &lt;&lt; ' ' &lt;&lt; e[i].y &lt;&lt; '\\n';\n    }\n}\n</code></pre> <ol> <li> <p>\\(1\\sim n\\) \u6bcf\u500b\u56e0\u6578\u7684\u56e0\u6578\u6578\u91cf\u7e3d\u548c\u662f \\(n\\log n\\)\uff08\u7be9\u6cd5\uff09\uff0c\u6240\u4ee5\u5e73\u5747\u4e00\u500b\u6578\u7684\u56e0\u6578\u6578\u91cf\u662f \\(\\displaystyle \\frac{n\\log n}{n}=\\log n\\) \u21a9</p> </li> </ol>"},{"location":"graph/other_problem/","title":"\u5176\u4ed6\u985e\u578b","text":""},{"location":"graph/other_problem/#_1","title":"\u96dc\u9805\u4e3b\u984c\u7d00\u9304","text":""},{"location":"graph/other_problem/#_2","title":"\u4e00\u3001\u7e2e\u9ede","text":"<p>\u7e2e\u9ede\u6709\u4ee5\u4e0b\u5169\u7a2e\u65b9\u6cd5\uff1a</p> <ol> <li>\u81ea\u5df1\u9084\u662f\u81ea\u5df1\u7684\u7de8\u865f\uff0c\u4f46\u7528 disjoint set \u6a21\u64ec\u7e2e\u9ede</li> <li>\u63a5\u7e8c 1.\uff0c\u4f46\u628a\u7e2e\u5b8c\u7684\u9ede\u90fd\u7528\u65b0\u7684\u7de8\u865f</li> </ol> <p>\u7b2c\u4e00\u7a2e\u65b9\u6cd5\u5176\u5be6\u4e5f\u6c92\u6709\u771f\u6b63\u5beb\u4e00\u500b\u51fd\u5f0f\u53bb\u9032\u884c\u7e2e\u9ede\uff0c\u4ed6\u7684\u6982\u5ff5\u5c31\u662f\u6bcf\u6b21\u8981\u53bb\u770b\u4e00\u500b\u9ede\u6642\uff0c\u76f4\u63a5\u53bb\u4ed6\u7684 disjoint set \u88e1\u9762 find \u4ed6\u7684\u7d44\u5225\u662f\u4ec0\u9ebc\uff0c\u90a3\u500b\u7d44\u5225\u7684 leader \u5c31\u662f\u4ed6\u7e2e\u9ede\u5f8c\u7684\u9ede\u7684\u7de8\u865f\u3002\u5e73\u5e38\u8981\u5c07\u5169\u500b\u9ede\u5408\u4f75\u4e00\u6a23\u7528 disjoint set \u7684 union \u5c31\u597d\u4e86\u3002\u4f8b\u984c\u6709 CF 160 D. Edges in MST\uff08\u5728 MST \u4e3b\u984c\u5167\uff09\u3002</p> <p>\u7b2c\u4e8c\u7a2e\u65b9\u6cd5\u63a5\u7e8c\u7b2c\u4e00\u7a2e\u4f5c\u6cd5\uff0c\u4f46\u6bcf\u6b21\u6211\u5011\u8981\u7e2e\u9ede\u7684\u6642\u5019\u5c31\u6703\u7279\u5225\u8dd1\u9032\u53bb\u4e00\u500b\u51fd\u5f0f\uff0c\u5c0d\u65bc\u6bcf\u500b\u7e2e\u9ede\u4e4b\u5f8c\u7684\u9ede\u6211\u5011\u90fd\u6703\u8ce6\u4e88\u4ed6\u4e00\u500b\u65b0\u7684\u7de8\u865f\uff0c\u7136\u5f8c\u5c07\u76ee\u524d\u6bcf\u500b disjoint set \u5167\u540c\u4e00\u500b\u96c6\u5408\u9ede\u7684\u90fd\u91cd\u65b0\u7de8\u865f\u6210\u65b0\u7684\u7de8\u865f\uff0c\u7136\u5f8c\u6211\u5011\u5c31\u5b8c\u5168\u653e\u68c4\u4ee5\u524d\u7684\u7de8\u865f\uff0c\u90fd\u7528\u65b0\u7684\u7de8\u865f\u53bb\u505a\u4e8b\u60c5\u3002\u4f8b\u5982 Atcoder AGC002 D - Stamp Rally\uff08\u5728\u6574\u9ad4\u4e8c\u5206\u4e3b\u984c\u5167\uff09\uff0c\u5927\u6982\u5ff5\u7684\u60f3\u6cd5\u5c31\u662f\u7e2e\u9ede\u5f8c\uff0c\u5c07\u4e0d\u91cd\u8981\u7684\u9ede\u90fd\u522a\u6389\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u5e73\u5e38\u7684\u6642\u5019\u6211\u5011\u5c31\u6703\u7528 disjoint set \u7684 union \u5148\u628a\u9700\u8981\u5728\u540c\u4e00\u7d44\u7684\u9ede\u90fd\u7d66\u7dad\u8b77\u597d\uff0c\u6211\u5011\u6703\u628a\u4e4b\u5f8c\u6703\u9700\u8981\u7528\u5230\u7684 edges \u9084\u6709 queries \u90fd\u8003\u616e\u9032\u53bb\uff0c\u7528\u4e00\u500b need \u6578\u7d44\uff0c\u5b58\u9019\u4e9b\u9700\u8981\u7528\u5230\u7684\u9ede\uff0c\u4ed6\u5011\u7684\u7576\u524d\u7684\u96c6\u5408\uff0c\u4e4b\u5f8c\u5c31\u662f\u628a need \u88e1\u9762\u6709\u7528\u5230\u7684\u90fd\u8ce6\u4e88\u65b0\u7684\u7de8\u865f\uff0c\u7136\u5f8c\u518d\u53bb edges \u548c queries \u5e6b\u4ed6\u5011\u6bcf\u4e00\u9805\u90fd\u6539\u6210\u73fe\u5728\u65b0\u7684\u7de8\u865f\u3002</p> <p> </p> \u7da0\u8272\u7684\u662f\u4e4b\u5f8c\u6703\u7528\u5230\u7684\u908a\uff0c\u9ed1\u8272\u662f\u5df2\u7d93\u7528\u904e\u7684\u908a"},{"location":"graph/other_problem/#_3","title":"\u4e8c\u3001\u6a39\u4e0a\u524d\u7db4\u548c","text":"CSES - Counting Paths <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6307\u5b9a \\(m\\) \u689d path\uff0c\u5c0d\u65bc\u6bcf\u500b\u7bc0\u9ede \\(1\\le i\\le n\\)\uff0c\u554f\u9019 \\(m\\) \u689d path \u6709\u5e7e\u689d\u6709\u8986\u84cb\u5230 \\(i\\)\u3002</p> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b path\uff0c\u5047\u8a2d\u4ed6\u52a0\u503c \\(u\\to \\ldots \\to \\text{lca(u,v)}\\to \\ldots \\to v\\)\uff0c\u5047\u8a2d lca(u, v) \u4e0a\u9762\u7684\u9ede\u662f fa\u3002\u90a3\u9ebc\u6211\u5011\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5c07 f[u]++\uff0cf[v]++\uff0cf[lca(u, v)]--\uff0cf[fa]--\u3002\u6700\u5f8c\u8981\u7d71\u8a08\u7b54\u6848\u7684\u6642\u5019\uff0c\u5728\u505a\u4e00\u500b\u524d\u7db4\u548c\uff0c\u4e5f\u5c31\u662f f[u] = sum(f[v])\u3002</p>"},{"location":"graph/other_problem/#_4","title":"\u984c\u76ee","text":"2021 \u9644\u4e2d\u6a21\u7af6 II \u60e1\u5730\u4e4b\u8def <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u4ee4 \\(s\\) \u5230\u7bc0\u9ede \\(i\\) \u8d70 \\(k\\) \u6b65\u7684\u6700\u77ed\u8ddd\u96e2\u662f \\(d(i,k)\\)\uff0c\u5c0d\u65bc\u6bcf\u500b \\(i\\) \u6c42 \\(\\min \\{ d(i,k) \\times k \\}\\)</p> <p>\\(n\\le 2000,m\\le 3\\times 10^4\\)</p> \u601d\u8def <p>\\(dp[i][j]=\\) \u5f9e\u4efb\u4f55\u5730\u65b9\u8d70 \\(i\\) \u6b65\u80fd\u8d70\u5230 \\(j\\) \u7684\u6700\u5c0f\u503c</p> <p>\\(dp[i][j]=\\min \\limits_{(k,j) \\in E} \\{ dp[i-1][k] + dis(k,j) \\}\\)</p> <p>\\(O(n(n+m))\\) DP</p> \u865b\u64ec\u78bc <pre><code>for k = 1 ~ n :\n    for u = 1 ~ n :\n        for v in G[u] :\n            dp[v][k] = min(dp[u][k-1] + dis(u, v))\n            ans = min (dp[v][k] * k)\n</code></pre> code(wiwiho) <pre><code>#include &lt;bits/stdc++.h&gt;\n#define StarBurstStream ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n#define eb(a) emplace_back(a)\n#define mp(a, b) make_pair(a, b)\n#define F first\n#define S second\n\nusing namespace std;\n\ntypedef long long ll;\n\nusing pll = pair&lt;ll, ll&gt;;\n\nint main(){\n    StarBurstStream\n\n    int n, m, s;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n    vector&lt;vector&lt;pll&gt;&gt; g(n + 1);\n    for(int i = 0; i &lt; m; i++){\n        int u, v, p;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; p;\n        g[u].eb(mp(v, p));\n        g[v].eb(mp(u, p));\n    }\n\n    vector&lt;ll&gt; dp(n + 1, 1LL &lt;&lt; 60);\n    dp[s] = 0;\n    vector&lt;ll&gt; ans(n + 1, 1LL &lt;&lt; 60);\n    ans[s] = 0;\n    for(int i = 1; i &lt;= n; i++){\n        vector&lt;ll&gt; dp2(n + 1, 1LL &lt;&lt; 60);\n        for(int j = 1; j &lt;= n; j++){\n            for(auto e : g[j]){\n                dp2[e.F] = min(dp2[e.F], dp[j] + e.S);\n            }\n        }\n        dp = dp2;\n        for(int j = 1; j &lt;= n; j++){\n            if(dp[j] &lt; (1LL &lt;&lt; 60)) ans[j] = min(ans[j], dp[j] * i);\n        }\n    }\n    for(int i = 1; i &lt;= n; i++) cout &lt;&lt; ans[i] &lt;&lt; \" \";\n    cout &lt;&lt; \"\\n\";\n\n    return 0;\n}\n</code></pre> \u7d93\u5178\u984c - \u6a39\u4e0a\u5168\u9ede\u5c0d\u8ddd\u96e2\u7e3d\u548c <p>\u7d66\u4e00\u9846\u6a39\uff0c\u908a\u6b0a\u7686\u70ba \\(1\\)\u3002\u6c42\u6bcf\u500b\u9ede\u5230\u6240\u6709\u9ede\u7684\u8ddd\u96e2\u7e3d\u548c\uff0c\u5373 \\(\\sum \\limits_{i=1}^n \\sum \\limits_{j=i+1}^n dis(i, j)\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u689d\u908a\uff0c\u4ed6\u7684\u8ca2\u737b\u662f \\(sz_v\\times (n-sz_v)\\)</p> CF 771 C. Bear and Tree Jumps <p>\u6709\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6a39\u7684\u908a\u6b0a\u7686\u70ba \\(1\\)\u3002\u6bcf\u6b65\u53ef\u4ee5\u9806\u79fb\u5230\u8ddd\u96e2\u81ea\u5df1 \\(\\le k\\) \u7684\u9ede\u3002\u4ee4 \\(f(s,t)\\) \u70ba \\(s\\to t\\) \u7684\u6700\u5c0f\u6b65\u6578\uff0c\u554f\u5c0d\u65bc\u6240\u6709 \\(s=1\\ldots n, t = 1\\ldots n\\)\uff0c \\(\\sum \\limits_{s&lt;t} f(s,t)\\) \u662f\u591a\u5c11</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u9762\u300c\u6a39\u4e0a\u5168\u9ede\u5c0d\u8ddd\u96e2\u7e3d\u548c\u300d\u6709\u9ede\u985e\u4f3c\uff0c\u53ea\u662f\u5c0d\u65bc\u4e00\u500b\u9577\u5ea6\u70ba \\(L\\)\uff0c\u4ed6\u7684\u8ca2\u737b\u6703\u662f \\(\\lceil\\frac{L}{k}\\rceil\\)\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u5beb\u6210 \\(\\frac{L+g(L, k)}{k}\\)\uff0c\u5176\u4e2d \\(g(L, k)\\) \u662f\u6211\u5011\u8981\u5e6b \\(L\\) \u52a0\u591a\u5c11\u624d\u80fd\u4f7f\u5176\u88ab \\(k\\) \u6574\u9664\u3002\u6211\u5011\u5c07 \\(\\frac{L+g(L, k)}{k}\\) \u62c6\u6210 \\(L\\) \u8207 \\(g(L,k)\\) \u4f86\u770b\uff0c\u6700\u5f8c\u5728\u9664\u4ee5 \\(k\\) \u5373\u53ef\u3002\\(L\\) \u7684\u7e3d\u548c\u53ef\u4ee5\u900f\u904e\u300c\u6a39\u4e0a\u5168\u9ede\u5c0d\u8ddd\u96e2\u7e3d\u548c\u300d\u7684\u65b9\u6cd5\u8a08\u7b97\uff0c\u800c \\(g(L,k)\\) \u7684\u8a71\u6211\u5011\u53ef\u4ee5 \\(k^2\\) \u679a\u8209\u5c0d\u7d93\u904e\u5b9a\u6839 \\(u\\) \u7684\u5de6\u908a\u8ddf\u53f3\u908a\u7684\u9577\u5ea6\uff0c\u7136\u5f8c ans += g(L, k) * left_cnt * right_cnt\uff0c\u4f8b\u5982\u8aaa \\(k=3\\) \uff0c\u6709 \\(200\\) \u689d \\(g(L,k)=2\\) \u7684 path \u7d93\u904e \\(u\\)\uff0c\u90a3\u6211\u5011\u5c31\u5c07 ans += 2 * 200</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int maxn = 2e5 + 5;\n\nvector&lt;int&gt; G[maxn];\nint dp[maxn][5]; // dp[u][r] \u5f9e u \u5f80\u4e0b L % k == r \u7684 path \u500b\u6578\nint sz[maxn];\nint n, k, ans;\n\nint subtract(int a, int b) {\n    return ((a - b) % k + k) % k;\n}\n\nvoid dfs(int u, int par) {\n    dp[u][0] = sz[u] = 1;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs(v, u);\n\n        for(int i = 0; i &lt; k; i++) {\n            for(int j = 0; j &lt; k; j++) {\n                int remainder = (i + j + 1) % k;\n                int needs = subtract(k, remainder);\n                ans += needs * dp[u][i] * dp[v][j];\n            }\n        }\n\n        for(int i = 0; i &lt; k; ++i) {\n            int ni = (i + 1) % k;\n            dp[u][ni] += dp[v][i];\n        }\n        sz[u] += sz[v];\n    }\n    ans += sz[u] * (n - sz[u]);\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for(int i = 0; i &lt; n - 1; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    dfs(1, -1);\n    assert(ans % k == 0);\n    cout &lt;&lt; (ans / k) &lt;&lt; '\\n';\n}\n</code></pre> LOJ #2780. \u300cBalticOI 2016 Day1\u300d\u4e0a\u53f8\u4eec <p>\u6709 \\(n\\) \u500b\u9ede\uff0c\u6bcf\u500b\u9ede\u7d66\u5b9a\u4e00\u500b\u5927\u5c0f\u70ba \\(k_i\\) \u7684\u96c6\u5408\uff0c\u8868\u793a\u7b2c \\(i\\) \u500b\u9ede\u53ef\u9078\u7684\u7236\u7bc0\u9ede\u3002\u5c07\u9019\u4e9b\u9ede\u7d44\u6210\u4e00\u68f5\u6a39\uff0c\u6bcf\u500b\u9ede\u5e6b\u4ed6\u6307\u5b9a\u6b0a\u91cd \\(a_i\\)\uff0c\u6eff\u8db3\u82e5 \\(\\sum a_v &lt; a_u\\)\uff08\\(u\\) \u7684\u5c0f\u5b69\u662f \\(v\\)\uff09\u3002\u554f \\(\\sum\\limits_{i=1}^n a_i\\) \u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(n\\le 5000, \\sum\\limits_{i=1}^n k_i \\le 10^4\\)</p> \u63d0\u793a <p>cost \u7684\u8a08\u7b97\u6709\u4ec0\u9ebc\u6027\u8cea? (\u6bcf\u500b\u9ede\u7684\u8ca2\u737b\u6703\u88ab\u54ea\u4e9b\u9ede\u91cd\u8907\u8a08\u7b97 ?)</p> \u601d\u8def <p>\u5728\u4f86\u6211\u5011\u8003\u616e\u5c07\u984c\u76ee\u7684 \\(k_i\\) \u300c\u53cd\u5411\u5efa\u908a\u300d\uff0c\u4e5f\u5c31\u662f\u82e5 \\(v\\) \u7684\u7236\u89aa\u53ef\u4ee5\u662f \\(u\\)\uff0c\u5247\u5efa\u908a \\(u \\to v\\)\uff0c\u9019\u6a23\u7684\u597d\u8655\u5c31\u662f\u6211\u5011\u53ef\u4ee5\u9078\u5b9a\u8d77\u9ede\uff08root\uff09\u7684\u8a71\uff0c\u5f80\u4e0b\u905e\u8ff4\u6240\u5f97\u5230\u7684 tree edge\uff0c\u5c31\u6703\u662f\u6211\u5011\u7684\u6a39\uff0c\u4f46\u6211\u5011\u76ee\u524d\u4e0d\u78ba\u5b9a\u6211\u5011\u8981\u9078\u5b9a\u4ec0\u9ebc\u6a23\u5b50\u7684\u6a39\uff0c\u6240\u4ee5\u6211\u5011\u7e7c\u7e8c\u5206\u6790\u3002</p> <p> \u4f9d\u7167\u984c\u76ee\u7bc4\u6e2c\u53cd\u5411\u5efa\u908a\u5f97\u51fa\u4f86\u7684\u5716 </p> <p>\u6211\u5011\u89c0\u5bdf cost \u7684\u8a08\u7b97\u65b9\u5f0f\uff0c\u767c\u73fe\u6bcf\u500b\u9ede\u7684\u8ca2\u737b\u90fd\u6703\u88ab\u4ed6\u7684\u7236\u89aa\u7d66\u8a08\u7b97\u5230\u4e00\u6b21\uff0c\u7236\u89aa\u7684\u7236\u89aa\u53c8\u6703\u7b97\u5230\u4e00\u6b21\uff0c...\u3002\u6240\u4ee5\u5c0d\u65bc\u4e00\u500b\u9ede u \u4f86\u8aaa\uff0c\u4ed6\u7684\u8ca2\u737b\u6703\u88ab\u91cd\u8907\u7b97\u5230\u7684\u5730\u65b9\u5c31\u662f \\(u\\to\\ldots \\to rt\\) \u9019\u689d path \u7684\u6240\u6709\u9ede\u3002 </p> <p> </p> <p>\u800c\u6bcf\u500b\u9ede\u7684\u8ca2\u737b\u6700\u5c0f\u5c31\u662f 1\uff0c\u6240\u4ee5\u4e8b\u5be6\u4e0a\u6bcf\u500b\u9ede\u7684\u8ca2\u737b\u7e3d\u548c\u53ef\u4ee5\u770b\u6210\u6240\u6709\u7bc0\u9ede\u7684\u6df1\u5ea6\u7e3d\u548c\u3002\u90a3\u6211\u5011\u5c31\u53ea\u8981\u4f7f\u6df1\u5ea6\u7e3d\u548c\u6700\u5c0f\u5316\u3002\u4e5f\u4ee3\u8868\u6a39\u61c9\u8a72\u8981\u8d8a\u5bec\u8d8a\u597d\uff0c\u5176\u5be6\u5c31\u662f BFS \u7684\u9806\u5e8f\u3002\u6240\u4ee5\u5be6\u4f5c\u6574\u7406\u4e0a\u5c31\u662f\u5efa\u7acb\u53cd\u5411\u5716\uff0c\u679a\u8209\u8d77\u9ede\uff0cBFS \u8a08\u7b97\u7b54\u6848\uff0c\u5728\u628a\u6bcf\u500b\u8d77\u9ede\u7b97\u51fa\u4f86\u7684\u7b54\u6848\u53d6 min \u5373\u53ef\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 5e6 + 5;\nconst int M = 1e9 + 7;\n\nint n, m, ans;\nint dis[maxn];\nvector&lt;int&gt; G[maxn];\n\nvoid init() {\n    cin &gt;&gt; n;\n    int u, v;\n\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; m;\n\n        while (m--) {\n            cin &gt;&gt; u;\n            G[u].pb(i);\n        }\n    }\n\n    ans = INF;\n}\n\nvoid bfs(int st) {\n    fill(dis, dis + n + 1, 0);\n    queue&lt;int&gt; q;\n    q.push(st);\n    dis[st] = 1;\n\n    while (q.size()) {\n        int u = q.front();\n        q.pop();\n\n        for (auto v : G[u]) {\n            if (dis[v])\n                continue;\n\n            dis[v] = dis[u] + 1;\n            q.push(v);\n        }\n    }\n\n    int cost = 0;\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (dis[i] == 0)\n            return;\n\n        cost += dis[i];\n    }\n\n    ans = min(ans, cost);\n}\n\nvoid solve() {\n    for (int i = 1; i &lt;= n; i++) {\n        bfs(i);\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n}\n</code></pre> 2023 TOI \u6a21\u64ec\u8cfd\u7b2c\u4e09\u5834 pE <p>\\(2n\\) \u500b\u4eba\u53c3\u52a0\u4e00\u500b\u805a\u9910\uff0c\u6240\u6709\u4eba\u7de8\u865f\u70ba \\(1\\sim 2n\\)\uff0c\u5c0d\u65bc\u6240\u6709 \\(1\\le i \\le n\\)\uff0c\u7de8\u865f \\(2i-1\\) \u7684\u4eba\u548c\u7de8\u865f \\(2i\\) \u7684\u4eba\u662f\u60c5\u4fb6</p> <p>\u805a\u9910\u662f\u570d\u8457\u4e00\u500b\u5713\u684c\u5403\u98ef\uff0c\u4f4d\u7f6e\u6309\u7167\u9806\u6642\u9418\u7de8\u865f\u70ba \\(1\\sim 2n\\)\u3002\u6bcf\u500b\u4f4d\u7f6e\u90fd\u653e\u6709\u4e00\u526f\u9910\u5177\uff0c\u6bcf\u526f\u9910\u5177\u90fd\u4e0d\u4e00\u6a23\uff0c\u6bcf\u500b\u4eba\u90fd\u6070\u597d\u559c\u6b61\u5176\u4e2d\u4e00\u526f\u9910\u5177\uff0c\u559c\u6b61\u7b2c \\(i\\) \u526f\u9910\u5177\u7684\u4eba\u7de8\u865f\u662f \\(a_i\\)</p> <p>\u8acb\u5b89\u6392\u6240\u6709\u4eba\u5165\u5ea7\u4e26\u6eff\u8db3\u4ee5\u4e0b\u5169\u500b\u689d\u4ef6\uff1a</p> <ol> <li>\u6240\u6709\u60c5\u4fb6\u8981\u5750\u5728\u76f8\u9130\u7684\u5169\u500b\u4f4d\u7f6e</li> <li>\u5728\u6eff\u8db3 1. \u7684\u60c5\u6cc1\u4e0b\uff0c\u8981\u76e1\u91cf\u591a\u7684\u4eba\u5750\u5728\u6709\u81ea\u5df1\u559c\u6b61\u7684\u9910\u5177\u7684\u4f4d\u7f6e\u4e0a\u3002</li> </ol> <p>\u8acb\u8f38\u51fa\u6eff\u8db3\u4ee5\u4e0a\u5169\u500b\u689d\u4ef6\u7684\u5165\u5ea7\u65b9\u5f0f\u3002\u82e5\u6709\u591a\u7d44\u89e3\uff0c\u8acb\u8f38\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u89e3</p> \u601d\u8def <p>\u4ee4 \\(b_i\\) \u70ba\u60f3\u505a\u7b2c \\(i\\) \u500b\u4f4d\u7f6e\u7684\u4eba\u7684\u7de8\u865f</p> <p>\u5c07 \\(b_{2i}\\) \u8207 \\(b_{2i-1}\\) \u9023\u908a</p> <p>\u5c07 \\(2i\\) \u8207 \\(2i-1\\) \u9023\u908a</p> <p>\u9023\u908a\u4ee3\u8868\u6bcf\u689d\u908a\u5de6\u53f3\u53ea\u80fd 2 \u9078 1(2 \u500b\u4e4b\u4e2d\u53ea\u80fd\u6709 1 \u500b\u5750\u5728\u6709\u81ea\u5df1\u559c\u6b61\u7684\u9910\u5177\u7684\u4f4d\u7f6e\u4e0a)</p> <p>\u4f60\u6703\u5f97\u5230\u82e5\u5e72\u500b\u5076\u74b0\uff0c\u9577\u5ea6\u70ba \\(2\\) \u7684\u74b0\u53ef\u4ee5\u76f4\u63a5\u914d\u5c0d</p> <p>\u5176\u4ed6\u5c31\u6311\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5373\u53ef</p> <p> </p> \u6d1b\u8c37 P3441 [POI2006]MET-Subway <p>\u5728\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\u4e0a\u9078\u51fa \\(k\\) \u689d\u53ef\u76f8\u4ea4\u7684 path \u4f7f\u5f97\u88ab\u8986\u84cb\u7684\u9ede\u6578\u6700\u591a\uff0c\u6c42\u8a72\u6700\u5927\u503c</p> <p>\\(k\\le n\\le 10^6\\)</p> \u601d\u8def <p>\u5047\u5982\u9078\u4e86 \\(u\\to \\ldots rt \\to \\ldots \\to v\\) \u53ef\u4ee5\u770b\u505a\u5f9e \\(u\\to \\ldots \\to rt,rt\\to \\ldots \\to v\\) \u7684\u5169\u689d path</p> <p>\u6240\u4ee5\u554f\u984c\u5c31\u8b8a\u6210</p> <p>\u9078 \\(2k\\) \u689d \\(u\\to \\ldots \\to rt\\) \u7684 path \u4f7f\u5f97\u88ab\u8986\u84cb\u7684\u9ede\u6578\u6700\u591a</p> <p>\u6211\u5011\u53ef\u4ee5\u62c6\u6210\u4e00\u5c64\u4e00\u5c64\u4f86\u770b\uff0c\u7b2c \\(i\\) \u5c64\u7684\u7bc0\u9ede\u6578\u91cf\u4e00\u5b9a \\(\\le\\) \u7b2c \\(i+1\\) \u5c64\u7684\u7bc0\u9ede\u6578\u91cf</p> <ul> <li>\u82e5\u7b2c \\(i\\) \u5c64\u7bc0\u9ede\u6578\u91cf \\(\\le 2k\\) \u90a3\u4e00\u5b9a\u53ef\u4ee5\u90fd\u53ef\u4ee5\u88ab\u8986\u84cb\u5230</li> <li>\u82e5\u7b2c \\(i\\) \u5c64\u7bc0\u9ede\u6578\u91cf \\(&gt; 2k\\) \u90a3\u6211\u5011\u5c31\u53ea\u80fd\u9078 \\(2k\\) \u500b\u8986\u84cb</li> </ul> <p>\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\(\\sum \\limits_{i=1}^{\\text{depth}}\\min \\{2k, \\text{num}_i\\}\\) \u5176\u4e2d \\(\\text{num}_i\\) \u662f\u7b2c \\(i\\) \u5c64\u7684\u7bc0\u9ede\u6578\u91cf</p> \u6d1b\u8c37 P8384 [POI2004] SZN <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u554f\u81f3\u5c11\u8981\u7528\u5e7e\u689d\u4e0d\u91cd\u758a\u7684 path \u624d\u80fd\u5c07\u5716\u8986\u84cb\uff0c\u4e26\u4e14\u9019\u4e9b path \u88e1\u9762\u9577\u5ea6\u6700\u9577\u7684\u6700\u5c11\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(n\\le 10^4\\)</p> \u601d\u8def <p>\u7b2c\u4e00\u500b\u7b54\u6848\u986f\u7136\u662f \\(\\displaystyle \\frac{\\deg[i]-1}{2}\\)</p> <p>\u5176\u4e2d \\(\\deg[i]\\) \u4ee3\u8868\u9ede \\(i\\) \u7684\u5ea6\u6578\uff0c\\(\\deg[rt]\\) \u8981\u8a18\u5f97\u7279\u5224\u56e0\u70ba\u6c92\u6709\u7236\u89aa</p> <p>\u56e0\u70ba\u5176\u4e2d\u4e00\u689d\u53ef\u4ee5\u5f80\u7236\u89aa\u65b9\u5411\u4e0a\u50b3</p> <p>\u518d\u4f86\u662f\u7b2c\u4e8c\u500b\u7b54\u6848\uff0c\u56e0\u70ba\u80fd\u7528\u7684 path \u7684\u6578\u91cf\u5df2\u7d93\u56fa\u5b9a\uff0c\u6240\u4ee5\u6211\u5011\u5c31\u5728 path \u7684\u6578\u91cf\u56fa\u5b9a\u4e0b\u8a0e\u8ad6\u80fd\u9023\u7684\u53ef\u80fd\u6027\uff0c\u6700\u5c0f\u5316\u6700\u5927\u503c \u21d2 \u4e8c\u5206\u641c</p> <p>\u6211\u5011\u5148\u4f86\u8a0e\u8ad6\u975e root \u7684\u60c5\u6cc1</p> <p>\u82e5\u70ba\u5076\u6578</p> <ul> <li>\u4e0a\u50b3 : \u5169\u5169\u914d\u5c0d\uff0c\u5269\u4e0b\u7684\u5169\u500b\u4e00\u500b\u55ae\u7368\u6210\u7dda (max)\uff0c\u53e6\u4e00\u500b\u4e0a\u50b3 (\u4e8c\u5206)</li> </ul> <p> </p> <ul> <li>\u4e0d\u4e0a\u50b3 : \u5169\u5169\u914d\u5c0d</li> </ul> <p>\u82e5\u70ba\u5947\u6578</p> <ul> <li> <p>\u4e0a\u50b3 : \u5169\u5169\u914d\u5c0d\uff0c\u9078\u4e00\u500b\u50b3\u4e0a\u53bb\uff0c\u4e14\u50b3\u4e0a\u53bb\u7684\u8981\u8d8a\u5c0f\u8d8a\u597d\uff0c\u537b\u53c8\u4e0d\u80fd\u4f7f\u5269\u4e0b\u7684\u7121\u6cd5\u914d\u5c0d \u21d2 \u4e8c\u5206\u641c\u3002\u55ae\u8abf\u6027\u7684\u8a71\u4f8b\u5982\u79fb\u9664\u9577\u5ea6\u70ba 10 \u7684\u53ef\u4ee5\uff0c\u90a3\u9ebc\u79fb\u9664\u9577\u5ea6\u70ba 11 \u4e00\u5b9a\u4e5f\u53ef\u4ee5\u3002</p> </li> <li> <p>\u4e0d\u4e0a\u50b3 : \u4e0d\u53ef\u80fd</p> </li> </ul> <p>\u518d\u4f86\u8a0e\u8ad6 root \u7684\u60c5\u6cc1</p> <p>\u82e5\u70ba\u5076\u6578 : \u5169\u5169\u914d\u5c0d</p> <p>\u82e5\u70ba\u5947\u6578 : \u6aa2\u67e5\u6700\u5927\u7684\u662f\u5426\u5408\u6cd5\uff0c\u5269\u4e0b\u5169\u5169\u914d\u5c0d</p> <p>ref : https://blog.csdn.net/C20181220_xiang_m_y/article/details/102564783</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, cnt, lim;\nvector&lt;int&gt; G[maxn];\nint deg[maxn], f[maxn], g[maxn];\n\nint check(int x) {\n    for (int l = 1, r = cnt; l &lt; r; l++, r--) {\n        if (l == x) l++;\n        if (r == x) r--;\n        if (l &lt; r &amp;&amp; g[l] + g[r] &gt; lim) return false;\n    }\n    return true;\n}\n\nint dfs(int u, int par) {\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (dfs(v, u) == 0) return 0;\n    }\n    cnt = 0;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        g[++cnt] = f[v];\n    }\n    sort(g + 1, g + cnt + 1);\n    if (u == 1) {\n        if (cnt &amp; 1) {\n            cnt--;\n            return check(0);\n        } else {\n            return check(0);\n        }\n    }\n    if (cnt % 2 == 0) {\n        if (check(0)) {\n            f[u] = 1;\n            return 1;\n        }\n        cnt--;\n    }\n\n    int l = 1, r = cnt + 1;\n    while (l &lt; r) {\n        int mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    if (l == cnt + 1) return 0;\n    f[u] = g[l] + 1;\n\n    return f[u] &lt;= lim;\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n\n    int u, v;\n    for (int i = 1; i &lt;= n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb (v);\n        G[v].pb (u);\n        deg[u]++, deg[v]++;\n    }\n    int sum = 0;\n    sum += (deg[1] + 1) / 2;\n    for (int i = 2; i &lt;= n; i++) {\n        sum += (deg[i] - 1) / 2;\n    }\n    cout &lt;&lt; sum &lt;&lt; \" \";\n}\n\nvoid solve() {\n    int l = 1, r = n - 1;\n\n    while (l &lt; r) {\n        int mid = (l + r) / 2;\n        lim = mid;\n\n        if (dfs(1, 0)) r = mid;\n        else l = mid + 1;\n    }\n\n    cout &lt;&lt; l &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> LOJ #3943. \u300cJOI 2023 Final\u300d\u8bad\u732b <p>\u7d66\u4e00\u500b \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u7bc0\u9ede\u6709\u9ad8\u5ea6 \\(h_i\\)\uff0c\u7bc0\u9ede\u7684\u9ad8\u5ea6\u662f\u4e00\u500b permutation\uff0c\u6709\u4e00\u96bb\u8c93\u73fe\u5728\u5728 \\(h_i=n\\) \u7684\u90a3\u500b\u7bc0\u9ede\u4e0a\u3002\u53ef\u4ee5\u4e00\u76f4\u522a\u9ede\uff0c\u82e5\u522a\u5230\u8c93\u6240\u5728\u7684\u7bc0\u9ede\u90a3\u8c93\u5c31\u6703\u79fb\u5230\u7576\u524d\u9023\u901a\u584a\u5167\u9ad8\u5ea6\u6700\u9ad8\u7684\u9ede\uff0c\u6c42\u8c93\u6bcf\u6b21\u79fb\u52d5\u7684\u8ddd\u96e2\u7e3d\u548c\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11</p> \u601d\u8def <p>\u5047\u8a2d\u6211\u5011\u76ee\u524d\u7684\u5716\u9577\u9019\u6a23</p> <p> \\(n=14\\)\uff0c\u85cd\u8272\u7684\u5b57\u70ba\u6bcf\u500b\u7bc0\u9ede\u7684 \\(h_i\\) </p> <p>\u7576\u6211\u5011\u522a\u6389 \\(h_i=14\\) \u7684\u9ede\u5f8c\uff0c\u8c93\u53ef\u4ee5\u9078\u64c7\u5f80\u4e09\u500b\u9023\u901a\u584a\u7684\u6700\u9ad8\u9ede\u8dd1\uff0c\u7136\u5f8c\u57f7\u884c\u5b50\u554f\u984c</p> <p>\u5047\u5982 \\(h_i=14\\) \u7684\u5b50\u554f\u984c\u7b97\u51fa\u4f86\u7684\u7b54\u6848\u662f\u9019\u6a23</p> <p> </p> <p>\u90a3\u9ebc\u7b54\u6848\u5c31\u662f </p> \\[ans_u=\\max \\{ ans_x+\\text{dis}(u,x) \\}\\] <p>\u5176\u4e2d \\(x\\) \u662f \\(v\\) \u7684\u9023\u901a\u584a\u5167\u9ad8\u5ea6\u6700\u9ad8\u7684\u7bc0\u9ede</p> <p>\u53ef\u662f\u82e5\u4ee5\u6b64\u5206\u6cbb\uff0c\u8003\u616e\u6a39\u662f\u4e00\u689d chain\uff0c\u90a3\u6700\u7cdf\u53ef\u9054 \\(O(n^2)\\)</p> <p>\u6211\u5011\u4f9d\u7167\u4e0a\u9762\u5b50\u554f\u984c\u57f7\u884c\u7684\u6b65\u9a5f\uff0c\u5efa\u4e00\u500b\u65b0\u7684\u6a39</p> <p> \u908a\u6b0a\u70ba\u5169\u9ede\u9593\u7684 distance </p> <p>\u90a3\u9ebc\u6574\u984c\u7684\u7b54\u6848\u5c31\u662f\u6a39\u9ad8\u5ea6</p> <p>\u91cd\u9ede\u662f\u8981\u600e\u9ebc\u5efa\u7acb\u9019\u500b\u6a39\u5462 ?</p> <p>\u6211\u5011\u767c\u73fe\u6211\u5011\u6bcf\u6b21\u5728\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u4e00\u76f4\u65b7\u908a\uff0c\\(h_i\\) \u8d8a\u5c0f\u7684\u8d8a\u665a\u65b7</p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5012\u8457\u60f3\uff0c\u6211\u5011\u5f9e \\(h_i=1\\) \u958b\u59cb\uff0c\u6bcf\u6b21 merge \u5468\u570d\u6700\u5c0f\u7684\u7bc0\u9ede</p> <p>\u518d\u4f86\u770b\u770b \\(h_i=2\\) \u662f\u5426\u5df2\u5099 merge \u904e\uff0c\u82e5\u9084\u6c92\u518d\u7e7c\u7e8c merge\uff0c\u4ee5\u6b64\u985e\u63a8</p> <p>\u4ee5\u65b0\u5716\u4f86\u770b\u6211\u5011\u5728\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5f9e leaf \u6162\u6162\u628a\u6a39\u84cb\u4e0a\u53bb</p> <p>\u81f3\u65bc\u8981\u600e\u9ebc merge\uff0c\u6211\u5011\u6bcf\u500b\u9ede\u7528 pq(min heap) \u7dad\u8b77\u5468\u570d\u7bc0\u9ede\u7684 \\(\\texttt{pair}(h_i,i)\\) </p> <p>\u5169\u500b\u9ede merge \u8d77\u4f86\u7528\u555f\u767c\u5f0f\u5408\u4f75\uff0c\u4f46\u8981\u6ce8\u610f\u53ef\u80fd\u6703\u7b97\u5230\u5df2\u7b97\u904e\u7684\u7bc0\u9ede\uff0c\u6240\u4ee5\u5728 pop \u7684\u6642\u5019\u6aa2\u67e5\u6b64\u7de8\u865f\u662f\u5426\u5df2\u7d93\u5728\u540c\u4e00\u500b DSU \u5167</p> CF 1586 E. Moment of Bloom <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7121\u5411\u9023\u901a\u5716\uff0c\u4e00\u958b\u59cb\u908a\u6b0a\u7686\u70ba \\(0\\)\u3002\u6709 \\(q\\) \u6b21\u64cd\u4f5c:</p> <ul> <li>\u5c0d\u7c21\u55ae\u8def\u5f91 \\(u\\to \\ldots \\to v\\) \u7d93\u904e\u7684\u6240\u6709\u908a\u6b0a \\(+1\\) </li> </ul> <p>\u5224\u65b7\u80fd\u5426\u4f7f\u5f97\u6240\u6709\u908a\u6b0a\u90fd\u70ba\u5076\u6578\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u8acb\u8f38\u51fa\u6240\u6709\u64cd\u4f5c\u7684\u8def\u5f91\u4e0a\u7684\u9ede\uff0c\u5982\u679c\u4e0d\u884c\uff0c\u8f38\u51fa\u81f3\u5c11\u9084\u9700\u8981\u591a\u5c11\u64cd\u4f5c\u624d\u80fd\u4f7f\u5f97\u4e0a\u8ff0\u7d50\u679c\u3002</p> <p>\\(n,m,q\\le 3\\times 10^5,n\\times q\\le 3\\times 10^5,L\\le 10^9\\)</p> \u601d\u8def <p>\u8003\u616e\u8207\u6bcf\u500b\u9ede\u76f8\u9130\u7684\u6240\u6709\u908a\u88ab\u6539\u8b8a\u7684\u6b21\u6578\u4e4b\u548c\u7684\u5947\u5076\u6027\uff0c\u4e0d\u96e3\u767c\u73fe\u9664\u4e86\u5169\u500b\u7aef\u9ede\uff0c\u8def\u5f91\u5176\u5b83\u7bc0\u9ede\u7684\u5947\u5076\u6027\u90fd\u4e0d\u6703\u6539\u8b8a\u3002</p> <p>\u5c0d\u65bc\u6bcf\u500b\u9ede\u6bcf\u500b\u9ede\u8a18\u9304\u6210\u70ba\u7aef\u9ede\u6b21\u6578\u7684\u5947\u5076\u6027\uff0c\u5982\u679c\u90fd\u662f\u5076\u6578\u5c31\u4ee3\u8868\u6709\u89e3\uff0c\u5426\u5247\u5982\u679c\u81f3\u5c11\u6709\u4e00\u500b\u9ede u \u662f\u5947\u6578\uff0c\u5c31\u6703\u767c\u751f\u7121\u89e3\u7684\u60c5\u6cc1\uff08\u56e0\u70ba u \u7684\u9130\u908a\u88ab\u7d93\u904e\u4e86\u5947\u6578\u6b21\uff0c\u9130\u908a\u5c31\u5fc5\u7136\u6709\u4e00\u689d\u908a\u88ab\u7d93\u904e\u5947\u6578\u6b21\uff09\u3002\u81f3\u65bc\u6700\u5f8c\u518d\u88dc\u4e0a\u53bb\u7684\u908a\u7684\u6578\u91cf\uff0c\u5c31\u662f\u5947\u6578\u7684\u7aef\u9ede\u6578\u9664\u4ee5 2\uff0c\u56e0\u70ba\u4e00\u689d\u8def\u5f91\u6700\u591a\u4e5f\u4e00\u5b9a\u53ef\u4ee5\u6d88\u6ec5\u5169\u500b\u6210\u70ba\u7aef\u9ede\u6b21\u6578\u662f\u5947\u6578\u7684\u7bc0\u9ede\u3002</p> <p> </p> <p>\u5426\u5247\u5c0d\u539f\u5716\u6c42\u4efb\u610f\u751f\u6210\u6a39\uff0c\u8f38\u51fa\u65b9\u6848\u5c31\u662f\u7aef\u9ede\u4e4b\u9593\u7684\u7c21\u55ae\u8def\u5f91\u3002    </p> <p>\u3010\u6b63\u78ba\u6027\u8b49\u660e\u3011</p> <p>\u8003\u616e\u69cb\u9020\u4e00\u5f35\u65b0\u5716\uff0c\u5c0d\u65bc\u64cd\u4f5c (u, v) \u5728\u65b0\u5716\u4e0a\u7531\u9ede u \u5411\u9ede v \u9023\u4e00\u689d\u908a\u3002\u9019\u6a23\u65b0\u5716\u5f62\u6210\u82e5\u5e72\u500b\u9023\u901a\u5206\u91cf\uff0c\u8003\u616e\u6bcf\u500b\u9023\u901a\u5206\u91cf\u7684\u5ea6\u6578\u90fd\u662f\u5076\u6578\u9019\u9ebc\u9019\u500b\u9023\u901a\u5206\u91cf\u5fc5\u5b9a\u5b58\u5728\u6b50\u62c9\u8ff4\u8def\uff0c\u5f9e\u8d77\u9ede\u51fa\u767c\u5fc5\u5b9a\u56de\u5230\u7d42\u9ede\u3002\u5728\u65b0\u5716\u7684\u6b50\u62c9\u8ff4\u8def\u7684\u8def\u5f91\u4e0a\u7531 u \u8d70\u5230 v\uff0c\u5c0d\u61c9\u7684\u5c31\u5728\u751f\u6210\u6a39\u4e0a\u5f9e u \u8d70\u5230 v\u3002\u6700\u5f8c\u8fd4\u56de\u8d77\u59cb\u9ede\u7684\u6642\u5019\uff0c\u56e0\u70ba\u662f\u5728\u6a39\u4e0a\u8d70\uff0c\u6240\u4ee5\u76f8\u7576\u65bc\u62b5\u6d88\u4e86\u4e4b\u524d\u8d70\u7684\u6240\u6709\u5947\u6578\u908a\u3002\u6240\u4ee5\u9019\u9ebc\u69cb\u9020\u662f\u5408\u6cd5\u7684\u3002</p> 2014 \u5168\u570b\u8cfd p3 <p>\u7d66 \\(n\\) \u500b\u95dc\u5361\uff0c\u8ddf\u4e00\u500b\u96c6\u5408\u9ede\uff0c\u95dc\u5361 \\(i\\) \u6709\u4e00\u689d\u6709\u5411\u908a\u9023\u63a5\u8457\u95dc\u5361 \\(i+1\\)\uff0c\u908a\u6b0a\u662f \\(c_i\\)\uff0c\u96c6\u5408\u9ede\u8207\u6bcf\u500b\u95dc\u5361 \\(i\\) \u4e4b\u9593\u90fd\u6709\u4e00\u689d\u96d9\u5411\u908a\uff0c\u908a\u6b0a\u662f \\(d_i\\)\uff0c\u6bcf\u500b\u95dc\u5361\u4e0a\u90fd\u6709\u50f9\u503c \\(p_i\\)\uff0c\u62ff\u904e\u4e86\u5c31\u6703\u6d88\u5931\u3002</p> <p> </p> <p>\u7d66\u4f60 \\(R\\) \u500b\u58eb\u5175\uff0c\u4e00\u500b\u58eb\u5175\u53ea\u80fd\u5f9e\u96c6\u5408\u9ede\u51fa\u767c\u7e5e\u904e\u4e00\u4e9b\u8def\u5f91\u56de\u5230\u96c6\u5408\u9ede\uff0c\u4e14\u8d70\u904e\u7684\u908a\u6b0a\u7e3d\u548c\u4e0d\u80fd\u8d85\u904e \\(B\\)\uff0c\u554f\u9019\u4e9b\u58eb\u5175\u6700\u5927\u53ef\u53d6\u5f97\u7684\u50f9\u503c\u7e3d\u5408\u70ba\u591a\u5c11</p> <p>\\(R\\le n\\le 2000,B\\le 10^6\\)</p> \u601d\u8def <p>\u6211\u5011\u8003\u616e dp</p> <p>\u4ee4 \\(dp(i,j)\\) \u95dc\u5361 \\(1\\sim i\\)\uff0c\u6d3e\u51fa \\(j\\) \u500b\u4eba\u53ef\u7372\u5f97\u7684\u6700\u5927\u50f9\u503c</p> \\[dp(i,j)=\\max\\limits_{k=1\\sim i} \\begin{cases}dp(i-1, j)+\\text{cost}(i)\\\\ dp(k-1,j-1)+\\text{cost}(k, i) \\texttt{ if ok}(k, i) \\end{cases}\\] <p>\u5047\u8a2d \\(\\texttt{ok}(k, i)\\) \u662f \\(O(1)\\)\uff0cdp \u7684\u6642\u9593\u5c31\u662f \\(O(n^2)\\times O(n)=O(n^3)\\)</p> <p>\u5982\u4f55\u6539\u6210 \\(O(1)\\) \u5462 ?</p> <p>\u53ef\u4ee5\u89c0\u5bdf\u5230 \\(k\\) \u8d8a\u5c0f\u8d8a\u597d\uff0c\u6240\u4ee5\u6211\u5011\u5c0d\u65bc\u6bcf\u500b \\(i\\) \u76f4\u63a5\u6311\u6700\u5c0f\u5408\u6cd5\u7684 \\(k\\) \u5373\u53ef</p> <p>\u6240\u4ee5\u6211\u5011\u5fc5\u9808\u5148\u6709 \\(\\texttt{ok}(l, r)\\) \u4f86\u5224\u65b7\u8aaa\u5340\u6bb5\u5408\u4e0d\u5408\u6cd5\u624d\u80fd\u4f86\u627e \\(k\\)</p> <ul> <li> <p>\\(a_i:\\) \u96c6\u5408\u9ede\u5230\u95dc\u5361 \\(i\\) \u7684 \u6700\u77ed\u8ddd\u96e2</p> <ul> <li>\\(a_i=\\min \\{d_i,a_{i-1}+c_{i-1} \\}\\)</li> </ul> </li> <li> <p>\\(b_i:\\) \u95dc\u5361 \\(i\\) \u56de\u5230\u96c6\u5408\u9ede\u7684\u6700\u77ed\u8ddd\u96e2</p> <ul> <li>\\(b_i=\\min \\{d_i, b_{i+1}+c_{i+1} \\}\\)</li> </ul> </li> </ul> <p>\\(\\texttt{ok}(l, r):a_l+b_r+ \\texttt{sum}(c_l,\\ldots, c_r)\\)</p> <p>\u5229\u7528 \\(\\texttt{ok}(l,r)\\) \u5728 \\(O(n^2)\\) \u5c0d\u65bc\u6bcf\u500b \\(i\\) \u9810\u8655\u7406\u6700\u5c0f\u5408\u6cd5\u7684 \\(k\\)</p> CSES - Even Outdegree Edges <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u5c07\u908a\u5b9a\u5411\uff0c\u554f\u662f\u5426\u80fd\u4f7f\u6240\u6709\u7684\u9ede\u7684 out degree \u662f\u5076\u6578</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5\\)</p> hint <p>\u5148\u60f3 chain \u7684 case</p> <p>\u7136\u5f8c\u60f3 tree \u7684\uff08\u8449\u5b50\u65c1\u908a\u7684\u908a\u8981\u6307\u5411\u54ea\u88e1\uff1f</p> <p>\u7136\u5f8c\u5c31\u53ef\u4ee5\u5ef6\u4f38\u5230 graph \u4e86</p> \u601d\u8def <p>\u6211\u5011\u5148\u8003\u616e Tree \u7684 case\uff0c\u5c0d\u65bc\u4e00\u500b \\(u\\)\uff0c\u6211\u5011\u53ef\u4ee5\u5148\u505a\u597d\u6240\u6709\u7684 \\(v\\)\uff0c\u518d\u770b \\(v\\) \u7684 out degree \u662f\u5947\u5076\u4f86\u6c7a\u5b9a edge\\((u,v)\\) \u7684\u65b9\u5411\u3002\u540c\u7406\u653e\u5728\u5716\u4e0a\u53ea\u662f\u6703\u591a\u4e00\u4e9b back edge\uff0c\u56e0\u70ba\u6700\u5f8c root \u7684\u5947\u5076\u6211\u5011\u662f\u6c92\u8fa6\u6cd5\u6c7a\u5b9a\u7684\uff0c\u6240\u4ee5\u5c07 out degree \u7684\u8ca2\u737b\u653e\u5728\u6df1\u5ea6\u6bd4\u8f03\u6df1\u7684\u9ede\u624d\u80fd\u8d8a\u597d\u8655\u7406\u6389</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, m, stamp = 1;\nvector&lt;int&gt; G[maxn];\nint t[maxn], odd[maxn];\nvector&lt;pii&gt; ans;\n\nvoid dfs (int u, int par) {\n    t[u] = stamp++;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (!t[v]) {\n            dfs (v, u);\n            if (odd[v]) {\n                ans.pb({v, u});\n                odd[v] = 0;\n            } else {\n                ans.pb({u, v});\n                odd[u] ^= 1;\n            }\n        } else if (t[v] &lt; t[u]) {\n            ans.pb({u, v});\n            odd[u] ^= 1;\n        }\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int u, v;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n}\n\nvoid solve() {\n    for (int i = 1; i &lt;= n; i++) {\n        if (!t[i]) dfs (i, 0);\n    }\n\n    if (accumulate (odd + 1, odd + n + 1, 0)) cout &lt;&lt; \"IMPOSSIBLE\\n\", exit(0);\n    for (auto [u, v] : ans) cout &lt;&lt; u &lt;&lt; \" \" &lt;&lt; v &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> CF 1527 D. MEX Tree <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0cnode \u7de8\u865f\u70ba \\(0\\ldots (n-1)\\)\u3002\u5c0d\u65bc\u6bcf\u500b \\(k = 0\\ldots n\\)\uff0c\u8f38\u51fa\u6709\u5e7e\u500b path \u4e0a node \u7684\u96c6\u5408\u7684 mex \u70ba \\(k\\)</p> <p>\\(2\\le n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u898b https://www.acwing.com/file_system/file/content/whole/index/content/3177876/</p>"},{"location":"graph/prefix_sum_on_tree/","title":"Prefix sum on tree","text":""},{"location":"graph/prefix_sum_on_tree/#_1","title":"\u6a39\u4e0a\u524d\u7db4\u548c","text":"CSES - Counting Paths <p>\u7d66\u5b9a \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u518d\u53e6\u5916\u7d66\u4f60 \\(m\\) \u689d path</p> <p>\u5c0d\u65bc\u6bcf\u500b\u7bc0\u9ede \\(i\\)\uff0c\u554f\u9019 \\(m\\) \u689d path \u6709\u5e7e\u689d\u6709\u8986\u84cb\u5230 \\(i\\)</p> <p>\\(n,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b path\uff0c\u5047\u8a2d\u4ed6\u52a0\u503c \\(u\\to \\ldots \\to \\text{LCA}\\to \\ldots \\to v\\)\uff0c\u5047\u8a2d LCA \u4e0a\u9762\u7684\u9ede\u8f03 Fa</p> <p>\u5c07 <code>f[u]++</code>\uff0c<code>f[v]++</code>\uff0c<code>f[LCA]--</code>\uff0c<code>f[Fa]--</code></p> \\[f[u]=f[u]+\\sum f[v]\\]"},{"location":"graph/prufer/","title":"prufer \u5e8f\u5217","text":""},{"location":"graph/prufer/#prufer-code","title":"Prufer code","text":"<ul> <li>Oi wiki Pr\u00fcfer code</li> </ul> <p>Pr\u00fcfer \u662f\u9019\u6a23\u5efa\u7acb\u7684\uff1a\u6bcf\u6b21\u9078\u64c7\u4e00\u500b\u7de8\u865f\u6700\u5c0f\u7684\u8449\u7d50\u9ede\u4e26\u522a\u6389\u5b83\uff0c\u7136\u5f8c\u5728\u5e8f\u5217\u4e2d\u8a18\u9304\u4e0b\u5b83\u9023\u63a5\u5230\u7684\u90a3\u500b\u7d50\u9ede\uff0c\u91cd\u8907 \\(n-2\\) \u6b21\u5f8c\u5c31\u53ea\u5269\u4e0b\u5169\u500b\u7d50\u9ede\uff0c\u7b97\u6cd5\u7d50\u675f</p> \u7bc4\u4f8b\u5716 <p> </p>"},{"location":"graph/prufer/#_1","title":"\u6027\u8cea","text":"<ol> <li> <p>\u5728\u69cb\u9020\u5b8c Pr\u00fcfer \u5e8f\u5217\u5f8c\u539f\u6a39\u4e2d\u6703\u5269\u4e0b\u5169\u500b\u7d50\u9ede\uff0c\u5176\u4e2d\u4e00\u500b\u4e00\u5b9a\u662f\u7de8\u865f\u6700\u5927\u7684\u9ede n</p> </li> <li> <p>\u6bcf\u500b\u7d50\u9ede\u5728\u5e8f\u5217\u4e2d\u51fa\u73fe\u7684\u6b21\u6578\u662f\u5176\u5ea6\u6578\u6e1b 1\uff08\u6c92\u6709\u51fa\u73fe\u7684\u5c31\u662f\u8449\u7d50\u9ede\uff09</p> </li> </ol> <p>\u4e0b\u9762\u662f\u6a21\u677f\u984c</p> CSES - Pr\u00fcfer Code <p>\u7d66\u5b9a\u9577\u5ea6\u70ba \\(n-2\\) \u7684 Pr\u00fcfer \u5e8f\u5217\uff0c\u6c42\u6b64 Pr\u00fcfer \u5e8f\u5217\u69cb\u6210\u7684\u6a39</p> <p>\\(3 \\le n \\le 2 \\cdot 10^5\\)</p> \u601d\u8def <p>\u7dad\u8b77\u7576\u524d\u7684 leaf \u6709\u54ea\u4e9b\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int MAXN = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nset&lt;int&gt; st;\nint n;\nint a[MAXN];\nint cnt[MAXN];\n\nvoid init() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) st.insert(i);\n\n    int x;\n    for (int i = 1; i &lt;= n - 2; i++) {\n        cin &gt;&gt; a[i];\n        cnt[a[i]]++;\n        if (st.find(a[i]) != st.end()) st.erase(st.find(a[i]));\n    }\n}\n\nvoid solve() {\n    for (int i = 1; i &lt;= n - 2; i++) {\n        int x = *st.begin();\n        st.erase(st.begin());\n        cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; a[i] &lt;&lt; '\\n';\n        cnt[a[i]]--;\n        if (cnt[a[i]] == 0) st.insert(a[i]);\n    }\n    int x = *st.begin();\n    st.erase(st.begin());\n    int y = *st.begin();\n    cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; '\\n';\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> \u5168\u570b\u8cfd 2022 pG <p>\u8a2d \\(T\\) \u70ba\u4e00\u68f5\u6709 \\(n\\) \u500b\u7bc0\u9ede\u7684\u6a39\uff0c\u7bc0\u9ede\u7de8\u865f \\(1, 2, \\ldots , n\\)\uff0c\u5df2\u77e5 \\(T\\) \u6bcf\u500b\u7bc0\u9ede\u7684 degree \u70ba \\(d_1,d_2,\\ldots ,d_n\\)\uff0c\u5176\u4e2d \\(d_i\\) \u70ba\u9ede \\(i\\) \u7684 degree\uff0c\u6c42\u51fa \\(T\\) \u6240\u6709\u53ef\u80fd\u7684 Pr\u00fcfer \u5e8f\u5217\u4e2d\uff0c\u5b57\u5178\u5e8f\u7b2c \\(k\\) \u5c0f\u7684\uff0c\u5982\u679c\u6c92\u6709\u8f38\u51fa \\(-1\\)</p> <p>\\(3&lt;n\\le 10^3,1\\le k\\le 10^9\\)</p> \u601d\u8def <p>\u6839\u64da\u4e0a\u9762 Pr\u00fcfer \u5e8f\u5217\u7684\u6027\u8cea 2\uff0c\u984c\u76ee\u5c31\u8b8a\u6210 :</p> <p>\u6709\u4e00\u500b\u9663\u5217\uff0c\u7b2c \\(i\\) \u500b\u6578\u5b57\u51fa\u73fe \\(d_i-1\\) \u6b21\uff0c\u6c42\u5b57\u5178\u5e8f\u7b2c \\(k\\) \u5c0f\u7684</p> <p>\u81f3\u65bc\u8981\u600e\u9ebc\u6c42\u5b57\u5178\u5e8f\u7b2c \\(k\\) \u5c0f\uff0c\u8981\u5148\u6703\u5beb TIOJ 2052</p> <p>\u6211\u5011\u586b \\(i\\)\uff0c\u586b\u5b8c\u5269 \\(d_i-1\\) \u500b \\(i\\)\uff0c\u9084\u5269 \\(n\\) \u500b\u7a7a\u683c\u53ef\u4ee5\u586b</p> \\[\\frac{n!}{a!\\times b!\\times c! \\times d!}\\] <p>\u6211\u5011\u53ef\u4ee5\u7528\u53d6 \\(\\log\\) \u7684\u65b9\u6cd5\u4f86\u4f30\u8a08\u300c\u5927\u6982\u300d\u7684\u7b54\u6848\uff0c\u540c\u6642\u4e5f\u7528 \\(C^n_k\\pmod{10^9+7}\\) \u7684\u65b9\u6cd5\u7b97\u51fa\u300c\u7cbe\u78ba\u300d\u7684\u7b54\u6848\u3002</p> <p>\\(\\log\\) \u7684\u65b9\u6cd5\u662f\u56e0\u70ba \\(\\frac{n!}{a!\\times b!\\times c! \\times d!}=\\log n!-\\log a!-\\log b! - \\log c! - \\log d!\\)\u3002\u53ef\u4ee5\u5148\u9810\u8655\u88e1 \\(\\log n!=\\sum_{i=1}^n \\log i\\)</p> <p>\u56e0\u70ba\u6700\u5f8c\u7684\u7b54\u6848 \\(\\le 10^9\\)\uff0c\u4f9d\u7167\u6a21\u9006\u5143\u7684\u6b63\u78ba\u6027\uff0c\u5c07 \\(\\frac{n!}{a!\\times b!\\times c! \\times d!}\\) \u76f4\u63a5\u7b97\u51fa\u4f86\u518d \\(\\pmod{10^9+7}\\) \u8ddf \\(\\frac{n!}{a!\\times b!\\times c! \\times d!}\\) \u5229\u7528\u7d44\u5408\u6578 + \u6a21\u9006\u5143\u7684\u65b9\u6cd5\u7b97\u51fa\u4f86\u662f\u76f8\u540c\u7684</p> <p>\u90a3\u9ebc\u63db\u9078\u53e6\u4e00\u500b\u6578\u7684\u6642\u5019 :</p> <p> </p> <p>\\(\\log\\) \u7684\u8a08\u7b97 : \\(-\\log(a-1)! + \\log a! - \\log b! + \\log (a-1)!\\)</p> <p>\\(C^n_k\\pmod{10^9+7}\\) \u7684\u8a08\u7b97 : \\(\\times b \\times \\text{inv}(a)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst double mxLog = 9;\nconst int INF = 1e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst long double EPS = 1e-8;\n\nint n, k;\nint d[maxn];\ndouble preLog[maxn];  // preLog[i] = log(i!)\nint prei[maxn], pinv[maxn], pref[maxn];\n\nvoid build() {\n    preLog[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        preLog[i] = preLog[i - 1] + log10(i);\n    }\n\n    prei[0] = prei[1] = pinv[0] = pinv[1] = pref[0] = pref[1] = 1;\n    for (int i = 2; i &lt; maxn; i++) {\n        pref[i] = pref[i - 1] * i % M;\n        pinv[i] = (M - (M / i) * pinv[M % i] % M) % M;\n        prei[i] = prei[i - 1] * pinv[i] % M;\n    }\n}\n\nvector&lt;int&gt; work(int _n, int _k, const int _d[]) {\n    n = _n;\n    k = _k;\n    k--;\n    for (int i = 1; i &lt;= n; i++) {\n        d[i] = _d[i];\n        d[i]--;\n    }\n\n    build();\n    vector&lt;int&gt; ans;\n    for (int t = n - 2; t &gt;= 1; t--) {\n        int f, flag = false;\n        for (int i = 1; i &lt;= n; i++) {\n            if (d[i]) {\n                f = i;\n                break;\n            }\n        }\n        double big = preLog[t - 1];\n        int small = pref[t - 1];\n\n        for (int i = 1; i &lt;= n; i++) {\n            if (i == f) {\n                big = big - preLog[d[i] - 1];\n                small = (small * prei[d[i] - 1]) % M;\n            } else if (d[i]) {\n                big = big - preLog[d[i]];\n                small = (small * prei[d[i]]) % M;\n            }\n        }\n        int val;\n        if (big - mxLog &gt; EPS) {\n            val = INF;\n        } else {\n            val = small;\n        }\n        for (int i = 1; i &lt;= n; i++) {\n            if (d[i]) {\n                if (i != f) {\n                    big += preLog[d[f] - 1] + preLog[d[i]];\n                    big -= preLog[d[f]] + preLog[d[i] - 1];\n                    small = (((small * pinv[d[f]]) % M) * d[i]) % M;\n                    if (big - mxLog &gt; EPS) {\n                        val = INF;\n                    } else {\n                        val = small;\n                    }\n                    f = i;\n                }\n                if (k &gt;= val) {\n                    k -= val;\n                } else {\n                    ans.pb(i);\n                    d[i]--;\n                    flag = true;\n                    break;\n                }\n            }\n        }\n        if (flag == false) {\n            return {-1};\n        }\n    }\n    return ans;\n}\n\nsigned main() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    int d[1005];\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; d[i];\n    vector&lt;int&gt; ans = work(n, k, d);\n    for (auto ele : ans) cout &lt;&lt; ele &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"graph/solving_for_all_roots/","title":"\u63db\u6839 dp","text":"<p>\u53c8\u7a31\u5168\u65b9\u4f4d\u6728 DP\uff0csolving for all roots</p> <ul> <li>https://usaco.guide/gold/all-roots?lang=cpp</li> </ul> CSES Tree Distances I <p>\u7d66\u4e00\u9846\u6709 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u5c0d\u65bc\u6bcf\u500b\u9ede\u6c42\u8a72\u9ede\u5230\u5176\u4ed6\u9ede\u7684\u6700\u9060\u8ddd\u96e2</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6cd5 1 : \u63db\u6839 dp</p> <p>\u56e0\u70ba\u5728\u7d66 \\(v\\) \u8a08\u7b97\u7684\u6642\u5019\u6709\u53ef\u80fd \\(u\\) \u7684\u6700\u9060\u8ddd\u96e2\u5c31\u5728 \\(v\\) \u5b50\u6a39</p> <p>\u6240\u4ee5\u5fc5\u9808\u7dad\u8b77\u6b21\u9060\u8ddd\u96e2\u7684\u5b50\u6a39</p> \u5be6\u4f5c <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int maxn = 2e5 + 5;\nconst int INF = 0x3f3f3f3f;\nint n;\nint dp_ch[maxn], dp_fa[maxn], sec[maxn], ans[maxn];\nvector&lt;int&gt; G[maxn];\n\nvoid dfs_ch(int u, int par) {\n    for (auto v : G[u]) {\n        if (v == par) continue;\n\n        dfs_ch(v, u);\n\n        if (dp_ch[v] + 1 &gt; dp_ch[u]) {\n            sec[u] = dp_ch[u];\n            dp_ch[u] = dp_ch[v] + 1;\n        }\n        else if (dp_ch[v] + 1 &gt; sec[u]) {\n            sec[u] = dp_ch[v] + 1;\n        }\n    }\n}\n\nvoid dfs_fa(int u, int par) {\n    for (auto v : G[u]) {\n        if (v == par) continue;\n\n        if (dp_ch[v] + 1 == dp_ch[u]) {\n            dp_fa[v] = max(sec[u], dp_fa[u]) + 1;\n\n            dfs_fa(v, u);\n        }\n        else {\n            dp_fa[v] = max(dp_ch[u], dp_fa[u]) + 1;\n            dfs_fa(v, u);\n        }\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n;\n\n    for (int i = 0, u, v; i &lt; n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n\n    dfs_ch(1, 0);\n    dfs_fa(1, 0);\n\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; max(dp_ch[i], dp_fa[i]) &lt;&lt; \" \";\n    }\n}\n</code></pre> <p>\u6cd5 2 : \u6a39\u76f4\u5f91</p> <p>\u6839\u64da\u6a39\u76f4\u5f91\u7684\u6027\u8cea\uff0c\u6700\u9060\u9ede\u4e00\u5b9a\u6703\u5728\u6a39\u76f4\u5f91\u7684\u982d\u5c3e</p> <p>\u8b49\u660e\u8acb\u53c3\u898b\u6a39\u76f4\u5f91\u7684 section</p> 2023 IOIC 403 .\u6a39\u76f4\u5f91 <p>\u6709\u4e00\u68f5 \\(N\\) \u500b\u9ede\u7684\u6a39</p> <p>\u9032\u884c\u5982\u4e0b\u64cd\u4f5c\u4e00\u6b21\uff1a\u780d\u6389\u6a39\u4e0a\u7684\u5176\u4e2d\u4e00\u689d\u908a\uff0c\u518d\u53e6\u5916\u52a0\u4e0a\u4e00\u689d\u908a\u56de\u53bb\u4f7f\u5176\u4fdd\u6301\u9023\u901a\u3002</p> <p>\u53ef\u4ee5\u900f\u904e\u9019\u500b\u64cd\u4f5c\u8b93\u6a39\u76f4\u5f91\u6700\u5c0f\u70ba\u4f55\uff1f</p> <p>\\(N\\le 5\\times 10^5\\)</p> code <pre><code>void diameter_fa(int u, int par) {\n    for (int v : adj[u]) {\n        if (v == par) continue;\n        // \u65b7\u908a (u, v)\uff0cu \u4ee5\u4e0a\u542b u \u7684\u9023\u901a\u584a\u7684\u7b54\u6848\n\n        // \u6e05\u9664 v \u5728 ans(u) \u7684\u8ca2\u737b\n        erase_one(ch_dp[u], dp_ch[v]);\n        erase_one(ch_hei[u], hei[v] + 1);\n\n        // \u8a08\u7b97\u7b54\u6848 max (\u6a39\u76f4\u5f91, \u5f80\u4e0a\u6216\u5f80\u4e0b\u7684\u6700\u5927\u9ad8\u5ea6+\u5f80\u4e0a\u6216\u5f80\u4e0b\u7684\u6b21\u5c0f\u9ad8\u5ea6)\n        dp_fa[v] = mav(*rbegin(ch_dp[u]), *rbegin(ch_hei[u]) + *nevt(rbegin(ch_hei[u])));\n\n        ch_dp[v].insert(dp_fa[v]);\n        // \u7531 v -&gt; u -&gt; ... \u5f80\u4e0a\u7684\u6700\u5927\u9ad8\u5ea6\n        ch_hei[v].insert(*rbegin(ch_hei[u]) + 1);\n\n        // \u52a0\u56de v \u5728 ans(u) \u7684\u8ca2\u737b\n        ch_dp[u].insert(dp_ch[v]);\n        ch_hei[u].insert(hei[v] + 1);\n\n        diameter_fa(v, u);\n    }\n}\n</code></pre> CF 1029F Tree with Maximum Cost <p>\u6c42 \\(\\max \\limits_{v=1... n} \\{\\space \\sum\\limits_{i = 1}^{n} dist(i, v) \\cdot a_i \\space \\}\\)</p> <p>\\(n,a_i\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u4e00\u6a23\u63db\u6839 dp</p> <p>\u4e0d\u904e\u9019\u908a\u5728\u7b97 \\(fa\\) \u7684\u6642\u5019\u6211\u5011\u63a1\u7528\u76f4\u63a5\u7b97\u7b54\u6848\u7684\u65b9\u5f0f\u6bd4\u8f03\u65b9\u4fbf</p> <p>\u4e5f\u5c31\u662f \\(dp_{fa}[u]\\) \u76f4\u63a5\u7d00\u9304 \\(u\\) \u7684\u7b54\u6848</p> \\[\\small dp_{fa}[v] = (dp_{fa}[u] - \\underbrace{(dp_{ch}[v] + sum[v] + a[v])}_{\u6263\u9664v\u7684\u8ca2\u737b} + \\underbrace{(tot - sum[v] - a[v])}_{\u52a0\u4e0av\u5b50\u6a39\u4ee5\u5916\u7684\u8ca2\u737b}) + dp_{ch}[v]\\] <p>\u4e0d\u7136\u9084\u8981\u518d\u591a\u7d00\u9304 \\(u\\) \u4e0a\u9762\u7684\u9023\u901a\u584a\u7684 sum</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, tot;\nint a[maxn];\nint dp1[maxn], dp2[maxn], sum[maxn];\nvector&lt;int&gt; G[maxn];\n\nvoid dfs1(int u, int par) {\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs1(v, u);\n\n        sum[u] += sum[v] + a[v];\n        dp1[u] += dp1[v] + sum[v] + a[v];\n    } \n}\n\nvoid dfs2(int u, int par) {\n    for (auto v : G[u]) {\n        if (v == par) continue;\n\n        dp2[v] = (dp2[u] - (dp1[v] + sum[v]) - a[v] + tot - sum[v] - a[v]) + dp1[v];\n        dfs2(v, u);\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i], tot += a[i];\n    int u, v;\n\n    for (int i = 1; i &lt;= n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n}\n\nvoid solve() {\n    dfs1(1, 0);\n    dp2[1] = dp1[1];\n\n    dfs2(1, 0);\n\n    int ans = -INF;\n    for (int i = 1; i &lt;= n; i++) {\n        ans = max(ans, dp2[i]);\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> Balkan OI 2017 City Attractions  <p>\u7d66\u4e00 \\(N\\) \u500b\u9ede\u7684\u9846\u6a39\uff0c\u6709\u4e00\u500b\u4eba\u7b2c\u4e00\u5929\u5728 \\(1\\) \u9019\u500b\u7bc0\u9ede</p> <p>\u6bcf\u5929\u4ed6\u6703\u5f9e\u6628\u5929\u505c\u4e0b\u4f86\u7684\u9ede \\(x\\) \u8d70\u5230\u9ede \\(y\\)</p> <p>\\(y\\) \u6eff\u8db3 \\(y\\neq x\\) \u4e14 \\(a_y-\\text{dis}(x,y)\\) \u662f\u6700\u5c0f\u7684\uff0c\u82e5\u9019\u6a23\u9084\u662f\u6709\u591a\u500b \\(y\\) \u5c31\u9078 index \u6700\u5c0f\u7684</p> <p>\u554f\u7b2c \\(K\\) \u5929\u6703\u5728\u54ea\u500b\u9ede\u505c\u4e0b</p> <p>\\(N\\le 3\\times 10^5,K\\le 10^{18},a_i\\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u53ea\u8981\u9810\u8655\u7406\u597d\u5c0d\u65bc\u6bcf\u500b \\(x\\) \u4ed6\u6703\u8d70\u5230\u7684 \\(y\\) \u5c31\u53ef\u4ee5\u7528\u500d\u589e\u6cd5\u627e\u7b2c \\(K\\) \u5929\u7684\u7d50\u679c</p> <p>\u6240\u4ee5\u6211\u5011\u4f86\u770b\u8981\u5982\u4f55\u9810\u8655\u7406</p> <p>\u76f4\u63a5\u63db\u6839 dp</p> <p> </p> <p>\u7d30\u7bc0\u8207\u5be6\u4f5c\u53ef\u53c3\u8003\u9019\u7bc7 USACO \u535a\u5ba2</p> Atcoder Educational DP Contest V - Subtree <p>\u7d66\u4f60\u4e00\u500b \\(n\\) \u9ede\u7684\u6a39\uff0c\u554f\u8aaa\u5728\u88e1\u9762\u7684\u4e00\u4e9b\u9ede\u5716\u9ed1\u8272\uff0c\u5176\u4ed6\u9ede\u5716\u767d\u8272\uff0c\u4e14\u5728\u5716\u9ed1\u8272\u7684\u9ede\u8981\u9023\u901a\uff0c\u8f38\u51fa\u6709\u5e7e\u7a2e\u5716\u6cd5</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\\(dp(u,0/1):\\) \\(u\\) \u662f\u767d/\u9ed1\uff0c\u9ed1\u8272\u8981\u80fd\u9023\u901a\u7684\u80fd\u5857\u8272\u7684\u65b9\u6cd5\u6578</p> <p>\u5c0d\u65bc\u6240\u6709\u7684\u9ede\uff0c \\(dp_{ch}(u,0)=1,dp_{fa}(u,0)=1\\)</p> <p>\\(dp_{ch}(u,1)=\\prod (dp_{ch}(v,0)+dp_{ch}(v,1))\\)</p> <p>\\(dp_{fa}(v_1,1)=dp_{fa}(u,1)\\times \\prod \\limits_{v\\neq v_1} (dp_{ch}(v,0)+dp_{ch}(v,1))+dp_{fa}(u,0)\\)</p> <p>\\(ans_u=dp_{ch}(u,1)\\times dp_{fa}(u,1)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\n\nint n, M;\nvector&lt;int&gt; G[maxn];\nint dp_ch[maxn][2],dp_fa[maxn][2];\n\nvoid dfs_ch(int u, int par) {\n    dp_ch[u][1] = dp_ch[u][0] = 1;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs_ch(v, u);\n\n        dp_ch[u][1] = dp_ch[u][1] * (dp_ch[v][0] + dp_ch[v][1]);\n        dp_ch[u][1] %= M;\n    }\n}\n\nvoid dfs_fa(int u, int par) {\n    dp_fa[u][0] = 1;\n    int sz = G[u].size ();\n\n    vector&lt;int&gt; pre(sz + 1, 1);\n    vector&lt;int&gt; suf(sz + 2, 1);\n\n    for (int i = 1; i &lt;= sz; i++) {\n        int v = G[u][i - 1];\n        if (v == par) {\n            pre[i] = pre[i - 1];\n            continue;\n        }\n\n        pre[i] = (pre[i - 1] * (dp_ch[v][0] + dp_ch[v][1])) % M;\n    }\n    for (int i = sz; i &gt;= 1; i--) {\n        int v = G[u][i - 1];\n        if (v == par) {\n            suf[i] = suf[i + 1];\n            continue;\n        }\n        suf[i] = (suf[i + 1] * (dp_ch[v][0] + dp_ch[v][1])) % M;\n    }\n\n    for (int i = 1; i &lt;= sz; i++) {\n        int v = G[u][i - 1];\n        if (v == par) {\n            continue;\n        }\n\n        dp_fa[v][1] = (dp_fa[u][1] * ((pre[i - 1] * suf[i + 1]) % M)) % M + dp_fa[u][0];\n        dp_fa[v][1] %= M;\n    }\n\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs_fa(v, u);\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; M;\n\n    int u, v;\n    for (int i = 1; i &lt;= n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n}\n\nvoid solve() {\n    dfs_ch(1, -1);\n\n    dp_fa[1][1] = 1;\n    dfs_fa(1, -1);\n\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; (dp_ch[i][1] * dp_fa[i][1]) % M &lt;&lt; \"\\n\";\n    }\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> CF 708 C. Centroids <p>\u7d66\u4f60\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u5c0d\u65bc\u6bcf\u500b\u9ede\uff0c\u5728\u53ef\u4ee5\u4fee\u6539\u4e00\u689d\u908a\u7684\u524d\u63d0\u4e0b\uff0c\u80fd\u5426\u8b93\u9019\u500b\u9ede\u6210\u70ba\u6a39\u91cd\u5fc3</p> <p>\\(n\\le 4\\times 10^5\\)</p> \u601d\u8def <p>\u91cd\u5fc3\u7d66\u51fa\u7684\u5b9a\u7fa9\u662f\u6240\u6709\u7684\u5b50\u6a39\u5927\u5c0f\u90fd\u5c0f\u65bc\u7b49\u65bc \\(\\left\\lfloor \\frac{n}{2} \\right\\rfloor\\) \u7684\u7bc0\u9ede\uff0c\u6240\u4ee5\u8aaa\uff0c\u5982\u679c\u4e00\u500b\u7bc0\u9ede\u4e0d\u662f\u91cd\u5fc3\uff0c\u5c31\u8868\u793a\u9019\u500b\u7bc0\u9ede\u6709\u4e00\u500b\u5b50\u6a39\u7684\u5927\u5c0f\u8d85\u51fa\u4e86 \\(\\left\\lfloor \\frac{n}{2} \\right\\rfloor\\)\uff08\u800c\u4e14\u53ea\u6709\u4e00\u500b\uff09\uff0c\u56e0\u70ba\u6211\u5011\u53ea\u80fd\u65b7\u4e00\u689d\u908a\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u9700\u8981\u5728\u9019\u500b\u8d85\u51fa\u4e86 \\(\\left\\lfloor \\frac{n}{2} \\right\\rfloor\\) \u7684\u5b50\u6a39\u4e2d\u6311\u9078\u4e00\u500b\u66f4\u5c0f\u5b50\u6a39\u65b7\u6389\u4ed6\u7136\u5f8c\u9023\u5230\u7576\u524d\u7bc0\u9ede\u4e0a\u4f86\u3002</p> <p>\u554f\u984c\u662f\uff0c\u9019\u500b\u5927\u5c0f\u8d85\u51fa \\(\\left\\lfloor \\frac{n}{2} \\right\\rfloor\\) \u7684\u5b50\u6a39\u4e2d\u6709\u6c92\u6709\u9019\u7a2e\u65b7\u6389\u4e4b\u5f8c\u53ef\u4ee5\u4f7f\u5f97\u5176\u5927\u5c0f\u6e1b\u5c0f\u5230 \\(\\left\\lfloor \\frac{n}{2} \\right\\rfloor\\) \u4ee5\u4e0b\u7684\u9019\u7a2e\u5c0f\u5b50\u6a39\u5462\uff1f</p> <p>\u91dd\u5c0d\u7bc0\u9ede u\uff0c\u7dad\u8b77\u5169\u500b\u503c\uff1a\u4e00\u500b\u662f\u5f9e\u5176\u5b50\u6a39\u4e2d\u5c0b\u627e\u4e14\u4e0d\u8d85\u904e \\(n/2\\) \u7684\u6700\u5927\u5b50\u6a39\u5927\u5c0f\uff1b\u53e6\u4e00\u500b\u662f\u5c07\u4ee5\u7bc0\u9ede u \u70ba\u6839\u7684\u5b50\u6a39\u79fb\u9664\u5f8c\uff0c\u5269\u4e0b\u7684\u6a39\u4e2d\u80fd\u627e\u5230\u7684\u6700\u5927\u4e14\u4e0d\u8d85\u904e \\(n/2\\) \u7684\u5b50\u6a39\u5927\u5c0f\u3002\u6211\u5011\u4ee4\u7b2c\u4e00\u7a2e\u662f dp_ch(u)\uff0c\u7b2c\u4e8c\u7a2e\u662f dp_fa(u)\u3002</p> <p>\u7b2c\u4e00\u7a2e\u60c5\u6cc1\u8f49\u79fb\u5f0f\u986f\u7136\uff0c\u70ba </p> \\[ dp_{\\text{ch}}(u) = \\max \\begin{cases} sz(v) &amp;\\text{ if}\\space sz(v) \\le n/2 \\\\ dp_{\\text{ch}}(v)  &amp;\\text{otherwise} \\end{cases} \\] <p>\u7b2c\u4e8c\u7a2e\u60c5\u6cc1\u5047\u8a2d\u76ee\u524d\u662f\u5f9e u \u70ba\u6839\u8f49\u79fb\u5230 v \u70ba\u6839\uff0c\u53ef\u80fd u \u7684\u6574\u584a\u7684\u5b50\u6a39\u90fd &lt;= n/2\uff0c\u90a3\u5c31 dp_fa(v) \u5c31\u76f4\u63a5\u662f n - sz(v)\uff0c\u5426\u5247\u5c31\u662f u \u7684\u5c0f\u5b69\u88e1\u9762\uff0c\u9664\u4e86 v \u4ee5\u5916 dp_ch(v) \u6700\u5927\u7684\uff0c\u9019\u500b\u53ef\u4ee5\u7528\u524d\u7db4\u6700\u5927\u503c\u8207\u5f8c\u7db4\u6700\u5927\u503c\u7b97\u51fa\u4f86\uff0c\u6216\u8005\u662f u \u7684 father \u7684\u9023\u901a\u584a\u7684\u7b54\u6848\uff0c\u4e5f\u5c31\u662f dp_fa(u)\u3002</p> \\[ dp_{\\text{fa}}(v) = \\max \\begin{cases} n - sz(v) &amp;\\text{ if}\\space n - sz(v) \\le n/2 \\\\ \\max \\{ dp_{\\text{fa}}(u), dp_{\\text{ch}}(v') \\space v'\\neq v  \\} &amp;\\text{otherwise} \\end{cases} \\] <p>\u6700\u5f8c\u5c0d\u65bc\u7bc0\u9ede u\uff0c\u627e\u5230\u4ee5 u \u70ba\u6839\u6642\u6709\u6700\u5927\u5b50\u6a39\u5927\u5c0f\u7684\u5152\u5b50\uff0c\u6e1b\u53bb max{ dp_ch(u), dp_fa(u) } \u770b\u662f\u5426\u5c0f\u65bc n / 2 \u5c31\u53ef\u4ee5\u5224\u65b7\u4e86\u3002</p> <p>\u53c3\u8003 : CSDN \u984c\u89e3</p>"},{"location":"graph/solving_for_all_roots/#_1","title":"\u5176\u9918\u7684\u984c\u55ae","text":"<ul> <li> <p>CF 1187 E. Tree Painting</p> </li> <li> <p>CF 1092 F. Tree with Maximum Cost</p> </li> <li> <p>CF 1324 F. Maximum White Subtree</p> </li> <li> <p>CF 219 D. Choosing Capital for Treeland</p> </li> <li> <p>CF 149 D. Coloring Brackets</p> </li> </ul>"},{"location":"graph/sp/","title":"\u6700\u77ed\u8def","text":""},{"location":"graph/sp/#dijkstra","title":"dijkstra","text":"<p> \u55ae\u6e90\u9ede\u6700\u77ed\u8def\u5f91</p> <p>\u8003\u616e\u4e0d\u5e36\u6b0a\u7684\u55ae\u9ede\u6e90\u6700\u77ed\u8def\uff0c\u6211\u5011\u7528BFS\u7dad\u8b77\u4e00\u500b queue\uff0c\u6bcf\u6b21\u8655\u7406\u4e00\u500b\u9ede\u6642\u6700\u77ed\u8def\u5f91\u5927\u5c0f\u5df2\u77e5\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u62ff\u8a72\u9ede\u53bb\u66f4\u65b0\u5176\u4ed6\u9ede\u4e00\u6b21\u5728\u6c92\u6709\u8ca0\u908a\u7684\u5047\u8a2d\u4e0b\uff0cdijkstra \u5c31\u50cf\u662f\u6709\u5e36\u6b0a\u7684BFS\u3002</p> \u6a21\u677f CSES - Shortest Routes I <p>\u7d66\u4e00\u5f35\u5e36\u6b63\u6b0a\u7121\u5411\u5716,\u6c42\u5f9e\u7bc0\u9ede \\(1\\) \u5230\u5176\u4ed6\u6240\u6709\u7bc0\u9ede\u7684\u6700\u77ed\u8def\u5f91\u3002</p> <p>\\(1 \\le n \\le 10^5,1 \\le m \\le 2 \\times 10^5\\)</p> <p>\u4e00\u65e6\u88ab\u9078\u4e2d\u53bb relax \u5176\u4ed6\u4eba\u6642\uff0c\u5c31\u4ee3\u8868 u \u9019\u500b\u9ede\u5df2\u7d93\u56fa\u5b9a</p> \u7b97\u6cd5\u5be6\u4f5c1\uff08\u7a0d\u6162\uff09 <pre><code>vector&lt;int&gt; dijkstra(int start) {\n    vector&lt;int&gt; dis(n + 1, INF);\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n    pq.push({0, start});\n    while (pq.size()) {\n        auto [dis_u, u] = pq.top();\n        pq.pop();\n        if (dis[u] != INF) continue;\n        dis[u] = dis_u;\n        for (auto [v, w] : G[u]) {\n            pq.push({w + dis[u], v});\n        }\n    }\n    return dis;\n}\n</code></pre> \u7b97\u6cd5\u5be6\u4f5c2\uff08\u7a0d\u5feb\uff09 <pre><code>vector&lt;int&gt; dijkstra(int start) {\n    vector&lt;int&gt; dis(n + 1, INF);\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n    pq.push({0, start});\n    dis[start] = 0;\n    while (pq.size()) {\n        auto [dis_u, u] = pq.top();\n        pq.pop();\n        if (dis[u] &lt; dis_u) continue; // \u76f8\u7576\u65bc if (visited)\n        dis[u] = dis_u;\n        for (auto [v, w] : G[u]) {\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                pq.push ({dis[v], v});\n            } \n        }\n    }\n    return dis;\n}\n</code></pre> <p>\u88dc\u5145 : O(n) \u505a dijkstra</p> <p>\u7576\u5716\u908a\u6b0a\u7bc4\u570d\u4e0a\u754c\u5728 \\(\\approx 10^5\\) \u7684\u6642\u5019\uff0c\u4e14\u6b0a\u503c\u5177\u6709\u55ae\u8abf\u6027\uff0c\u53ef\u4f7f\u7528\u9019\u500b\u6280\u5de7</p> <p>\u5be6\u4f5c\u4e00\u500b data structure\uff0c\u6eff\u8db3\u4ee5\u4e0b\u529f\u80fd :</p> <ul> <li> <p>push(x)</p> </li> <li> <p>get_value() \u5f97\u5230\u7576\u524d\u6700\u5c0f\u7684 distance (\u76f8\u7576\u65bc pq.top())</p> </li> </ul> <p>\u56e0\u70ba distance \u5177\u6709\u55ae\u8abf\u6027\uff0c\u6545 threshold \u53ea\u6703\u905e\u589e\u3002\u985e\u4f3c\u7684\u6280\u5de7\u4e5f\u61c9\u7528\u5728 TIOJ 1915, 2023 \u4e00\u6a21 pD</p> \u70ba\u4f55 dijkstra \u4e0d\u80fd\u5728\u6709\u8ca0\u908a\u7684\u5716\u4e0a\u8dd1 ? <p>\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u56e0\u70ba\u55ae\u8abf\u6027\u3002</p> <p> </p> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\u73fe\u5728\u8981\u7b97\u51fa A \u5230 D \u7684\u6700\u77ed\u8def\u5f91\uff0cDijkstra \u9996\u5148 relax B, C\uff0cB \u6700\u77ed\uff0c\u7136\u5f8c\u628a B \u7684\u51fa\u908a\u9032\u884c\u9b06\u5f1b\uff0cB \u88ab\u6a19\u8a18\u70ba\u8655\u7406\u904e\uff0c\u7136\u5f8c\u518d\u6b21\u9078\u51fa C\uff0c\u5c0d C \u7684\u51fa\u908a\u9032\u884c relax\uff0c\u6b64\u6642 B \u96d6\u7136\u9032\u884c\u4e86\u9b06\u5f1b\uff0c\u4f46\u662f\u524d\u9762\u5df2\u7d93\u88ab\u6a19\u8a18\u8655\u7406\u904e\u4e86\uff0c\u6240\u4ee5\u6700\u5f8c\u7b97\u51fa\u4f86\u7684\u6700\u77ed\u8def\u5f91\u70ba 35\uff0c\u4f46\u662f\u5be6\u969b\u4e0a\u6700\u77ed\u8def\u5f91\u70ba 33\u3002</p> <p>\u56e0\u70ba Dijkstra \u662f\u9019\u6a23\u5047\u8a2d\u7684\uff1a\u5c0d\u65bc\u8655\u7406\u904e\u7684\u7d50\u9ede\uff0c\u6c92\u6709\u524d\u5f80\u8a72\u7d50\u9ede\u7684\u66f4\u77ed\u8def\u5f91\uff0c\u9019\u7a2e\u5047\u8a2d\u50c5\u50c5\u5728\u6c92\u6709\u8ca0\u6b0a\u908a\u6642\u624d\u80fd\u6210\u7acb\u3002</p>"},{"location":"graph/sp/#_1","title":"\u7df4\u7fd2","text":"\u4f86\u56de zerojudge g733. 110\u5317\u4e8c4.\u6f2b\u904a\u9ad8\u8b5a\u5e02 <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u908a\u5e36\u6b0a\uff0c\u53e6\u5916\u984d\u5916\u6709 \\(k\\) \u689d\u7121\u5411\u5e36\u6b0a\u908a\uff0c\u81f3\u591a\u53ea\u80fd\u8d70\u4e00\u689d\u9019\u7a2e\u908a\u3002\u554f \\(s\\to t\\) \u7684\u6700\u77ed\u8def</p> <p>\\(n\\le 10^4,m+k\\le 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b\u9ede \\(u\\) \u627e \\(dis(s \\rightarrow u) + dis(u \\rightarrow v)\\)\u3002\u6b63\u53cd\u5404\u505a\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u628a\u6b63\u5716\u8ddf\u53cd\u5716\u90fd\u5404\u505a\u4e00\u6b21 dijkstra\u3002</p> 2021 \u5357\u4e00\u4e2d\u6821\u5167\u8907\u8cfd pC \u70ba\u7f8e\u597d\u7684\u5730\u7262\u737b\u4e0a\u7206\u64ca <p>\u7d66\u4e00\u500b \\(n \\times m\\) \u7684\u68cb\u76e4\uff0c\u5728\u67d0\u4e00\u500b\u683c\u5b50\u6709\u4e00\u500b ADD \u9053\u5177\uff0c\u5176\u4ed6\u6bcf\u500b\u683c\u5b50\u90fd\u6709\u4e00\u96bb\u9b54\u7269\u653b\u64ca\u529b\u662f \\(w_{i,j}\\)\u3002\u4f60\u8981\u5f9e\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0b\u89d2\uff0c\u5982\u679c\u7d93\u904e\u7684\u683c\u5b50\u6709\u9b54\u7269\uff0c\u90a3\u4f60\u6703\u53d7\u5230 \\(w_{i,j}\\) \u9ede\u7684\u50b7\u5bb3\uff0c\u4e26\u628a\u90a3\u96bb\u9b54\u7269\u6253\u5012\uff0c\u7b2c\u4e8c\u6b21\u7d93\u904e\u9019\u500b\u683c\u5b50\u5c31\u4e0d\u6703\u518d\u9047\u5230\u9b54\u7269\u4e86\u3002\u5728\u7d93\u904e ADD \u9053\u5177\u4e4b\u5f8c\uff0c\u6bcf\u6b21\u4f60\u53d7\u5230\u7684\u50b7\u5bb3\u90fd\u6703\u6e1b\u5c11(\u4f46\u4e0d\u6703\u56de\u8840)\uff0c\u6c42\u4f60\u6700\u5c11\u8981\u627f\u53d7\u591a\u5c11\u50b7\u5bb3</p> <p>\\(n,m\\le 10^3\\)</p> \u601d\u8def <p>\u53ef\u5206\u70ba\u4e0d\u5403 ADD \u8207\u5403 ADD</p> <p>\u5403 ADD \u7684\u8a71 \u8d77\u9ede \u2192 ADD \u2192 \u7d42\u9ede \u505a\u5169\u5f35\u5716 dijkstra \u5373\u53ef</p> n \u5e73\u65b9 <p>\u7d66\u5b9a \\(n\\) \u500b\u9ede\uff0c\u7b2c \\(i\\) \u9ede\u5728 \\((x_i,y_i)\\)\uff0c\u5f9e \\(i\\to j\\) \u82b1\u8cbb \\((x_i - x_j)^2 + (y_i - y_j)^2\\)\u3002\u554f\u5f9e \\(s\\to t\\) \u7684\u6700\u5c0f\u82b1\u8cbb</p> \u5b57\u5178\u5e8f TIOJ 1572.\u6700\u77ed\u8def\u7dda\u554f\u984c(Path) <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u908a\u6b0a\u7686\u70ba \\(1\\)\uff0c\u8f38\u51fa \\(s\\to t\\) \u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6700\u77ed\u8def\u5f91</p> <p>\\(n,m\\le 10^6\\)</p> \u601d\u8def <p>\u5f9e\u7d42\u9ede\u505a\u56de\u4f86\uff0c\u5efa\u7acb\u6700\u77ed\u8def\u5f91 DAG\uff0c\u5c07 DAG \u7684\u908a\u53cd\u5411\uff0c\u5f9e\u8d77\u9ede\u6bcf\u6b21 greedy \u8d70\u6700\u5c0f\u7684\u9ede\u76f4\u5230\u62b5\u9054\u7d42\u9ede</p> \u6700\u77ed\u5e73\u5747\u8def CF EDU B. Minimum Average Path <p>\u7d66\u5b9a\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684 DAG\uff0c\u908a\u5e36\u6b0a\uff0c\u554f\u5f9e \\(1\\to n\\) \u7684 path \u4e0a\u6b0a\u91cd\u7684\u5e73\u5747\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(n\\le 10^5,m\\le 10^5\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u9762\u6700\u5927\u5e73\u5747\u5340\u9593\u4e00\u6a23\uff0c\u6211\u5011\u53bb\u4e8c\u5206\u641c\u5e73\u5747\u503c \\(x\\)\uff0c\u5c07\u908a\u6b0a\u90fd \\(-x\\)\uff0c\u770b\u6709\u6c92\u6709\u4e00\u689d path \u7684\u7e3d\u548c \\(\\le 0\\)\u3002\u6211\u5011\u53ef\u4ee5\u4ee4 \\(dp[i]=\\) \u8d70\u5230\u9ede \\(i\\) \u7684\u6700\u5c0f\u6b0a\u503c\u662f\u591a\u5c11\uff0c\\(dp[v]=\\min \\{dp[u]+w \\}\\) </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst double INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, m;\ndouble dp[maxn];\nint par[maxn];\nvector&lt;pii&gt; G[maxn];\n\nbool check(double x) {\n    fill(dp, dp + n + 1, INF);\n    fill(par, par + n + 1, -1);\n    dp[1] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        for (auto [v, w] : G[i]) {\n            double val = (double)dp[i] + w - x;\n            if (dp[v] &gt; val) {\n                dp[v] = val;\n                par[v] = i;\n            }\n        }\n    }\n    return dp[n] &lt;= 0;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        G[u].pb({v, w});\n    }\n\n    double l = 0, r = 105;\n    for (int i = 0; i &lt; 100; i++) {\n        double mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n    check(l);\n\n    stack&lt;int&gt; stk;\n    int x = n;\n    stk.push(x);\n    while (par[x] != -1) {\n        x = par[x];\n        stk.push(x);\n    }\n    cout &lt;&lt; stk.size() - 1 &lt;&lt; '\\n';\n    while (stk.size()) {\n        cout &lt;&lt; stk.top() &lt;&lt; ' ';\n        stk.pop();\n    }\n} \n</code></pre>"},{"location":"graph/sp/#dijkstra_1","title":"\u591a\u6e90\u9ede dijkstra","text":"zerojudge b904. 10. \u5b78\u5712\u751f\u6d3b <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7121\u5411\u5716\uff0c\u8207 \\(k\\) \u500b\u6e90\u9ede\uff0c\u6c42\u9019\u4e9b\u9ede\u5169\u5169\u4e4b\u9593\u7684\u8ddd\u96e2\u6700\u5c0f\u503c</p> <p>\\(n,k,m\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u6700\u66b4\u529b\u7684\u60f3\u6cd5\u5c31\u662f\u679a\u8209\u6e90\u9ede\uff0c\u6bcf\u6b21\u90fd\u91cd\u8dd1 dijkstra\uff0c\u8907\u96dc\u5ea6 \\(O(k E \\log\u2061E )\\)</p> <p>\u5f9e\u4e0a\u9762\u66b4\u529b\u7684\u65b9\u6cd5\u6211\u5011\u53ef\u4ee5\u89c0\u5bdf\u51fa\uff0c\u8981\u4ea4\u6703\u7684\u9ede\u6216\u908a\u4e00\u5b9a\u8981\u662f\u6e90\u9ede\u5011\u4e4b\u9593\u7684\u6700\u77ed\u8def\u3002</p> <p>\u6bcf\u500b\u6e90\u9ede\u80fd\u64f4\u5c55\u51fa\u4ed6\u80fd\u63a7\u5236\u7684\u6700\u77ed\u8def\u5f91\u5340\u57df\uff0c\u5982\u4e0b\u5716</p> <p> \u6bcf\u500b\u6e90\u9ede\u64f4\u51fa\u81ea\u5df1\u7684\u7bc4\u570d </p> <p>\u7bc4\u570d\u91cd\u758a\u7684\u5730\u65b9\u4ee3\u8868\u4ed6\u5011\u540c\u6642\u662f\u591a\u500b\u6e90\u9ede\u7684\u6700\u77ed\u8def\u5f91\uff0c\u9019\u500b\u5c31\u662f\u6211\u5011\u53ef\u4ee5\u53d6\u7684\u7b54\u6848\uff0c\u6211\u5011\u53ef\u4ee5\u7528\u4e00\u500b\u6578\u5b57 \\(x\\) \u4f86\u63a7\u5236\u6bcf\u500b\u7bc4\u570d\u6700\u591a\u80fd\u64f4\u5f35\u591a\u5c11\u6b0a\u91cd\uff0c\u4e00\u65e6\u76ee\u524d\u7684 \\(x\\) \u80fd\u4f7f\u67d0\u4e9b\u500b\u7bc4\u570d\u91cd\u758a\u7684\u9019\u500b \\(x\\) \u5c31\u53ef\u4ee5\u662f\u7b54\u6848\uff0c\u6211\u5011\u4e8c\u5206\u641c \\(x\\) \u627e\u5230\u6700\u5c0f\u7684 \\(x\\) \u4f7f\u5f97\u7bc4\u570d\u6709\u91cd\u758a</p> <p>\u4e8c\u5206\u641c\u7684\u8907\u96dc\u5ea6\u70ba \\(O(\\log \u2061C)\\) \u5176\u4e2d \\(C\\) \u662f\u503c\u57df\u7bc4\u570d\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u91cd\u65b0\u64f4\u5f35\u6e90\u9ede\u7684\u7bc4\u570d(\u56e0\u70ba\u64f4\u5f35\u7684\u6b0a\u91cd\u4e0a\u9650\u88ab\u66f4\u65b0\u4e86)\uff0c\u70ba \\(O(E \\log \u2061E )\\) \u6240\u4ee5\u8907\u96dc\u5ea6 \\(O(E \\log\u2061 E \\log\u2061 C )\\)</p> <p>\u4f46\u6211\u5011\u771f\u7684\u6709\u9700\u8981\u6bcf\u6b21\u90fd\u91cd\u65b0\u7b97\u55ce?</p> <p>\u9019\u908a\u63d0\u4e00\u500b\u7d50\u69cb\u53eb shortest path tree \u53c8\u7a31\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u6bcf\u500b\u9ede \\(v\\) \u90fd\u8ddf\u81ea\u5df1\u7684\u6700\u77ed\u8def\u5f91\u7684\u4e0a\u4e00\u500b\u9ede \\(u\\) \u9023\u63a5\uff0c\u5f62\u6210\u4e00\u9846\u6a39</p> <p>\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u6211\u5011\u5c31\u53ea\u9700\u8981\u5728\u6a39\u4e0a BFS \u5373\u53ef\u61c9\u4ed8\u6bcf\u6b21 \\(x\\) \u6539\u8b8a\u4e4b\u5f8c\u7684\u64f4\u5f35\u7bc4\u570d\u3002\u8907\u96dc\u5ea6 \\(O(E\\log\u2061E)\\) \u5efa\u6a39\uff0c\\(O(V+E)\\) BFS \u4e8c\u5206\u641c \\(O(\\log \u2061C)\\)\uff0c\u7e3d\u5171 \\(O(E \\log \u2061E+(V+E)  \\log \u2061C)\\)</p> <p>\u4f46\u5176\u5be6\u5230\u982d\u4f86\u6211\u5011\u53ea\u662f\u8981\u770b\u91cd\u758a\u7684\u90e8\u5206\uff0c\u6211\u5011\u4e5f\u5c31\u540c\u6a23\u7684\u5efa\u7acb\u6700\u77ed\u8def\u5f91\u6a39\uff0c\u679a\u8209 edge \u4f7f\u5f97 \\((u,v)\\) \u662f\u4f86\u81ea\u4e0d\u540c\u7684\u6e90\u9ede\uff0c\\(ans\\) \u53bb\u8ddf\u4ed6\u53d6 min \u5373\u53ef\uff0c\u8907\u96dc\u5ea6 \\(O(E \\log\u2061 E+E) = O(E \\log\u2061 E)\\)</p> <p> \u679a\u8209\u91cd\u758a\u908a </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst double EPS = 1e-8;\n\nstruct Graph {\n    vector&lt;vector&lt;pii&gt;&gt; G;\n    vector&lt;int&gt; source;\n    vector&lt;int&gt; dis;\n    vector&lt;int&gt; par;\n    int n;\n\n    void init(int _n) {\n        n = _n;\n        G.resize(n);\n    }\n\n    void add_edge(int u, int v, int w) {\n        G[u].pb({v, w});\n    }\n\n    void add_source(int x) {\n        source.pb(x);\n    }\n\n    void dijkstra() {\n        dis = vector&lt;int&gt;(n, INF);\n        par = vector&lt;int&gt;(n);\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        for (auto s : source) {\n            pq.push({0, s});\n            dis[s] = 0;\n            par[s] = s;\n        }\n\n        while (pq.size()) {\n            auto [dis_u, u] = pq.top();\n            pq.pop();\n\n            if (dis_u &gt; dis[u]) continue;\n            dis[u] = dis_u;\n\n            for (auto [v, w] : G[u]) {\n                if (dis[u] + w &lt; dis[v]) {\n                    dis[v] = dis[u] + w;\n                    par[v] = par[u];\n                    pq.push({dis[v], v});\n                }\n            }\n        }\n    }\n\n    bool check(int D) {\n        for (int i = 0; i &lt; n; i++) {\n            for (auto [v, w] : G[i]) {\n                if (par[i] == par[v]) continue;\n                int x = D - dis[i] - dis[v] - w;\n                if (x &gt;= 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n} g;\n\nint n, m, k;\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    g.init(n);\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--, v--;\n        g.add_edge(u, v, w);\n        g.add_edge(v, u, w);\n    }\n    for (int i = 0; i &lt; k; i++) {\n        int u;\n        cin &gt;&gt; u;\n        u--;\n        g.add_source(u);\n    }\n}\n\nvoid work() {\n    g.dijkstra();\n    int l = 0, r = INF;\n    while (l &lt; r) {\n        int mid = (l + r) / 2;\n        if (g.check(mid)) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    cout &lt;&lt; l &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n}\n</code></pre> <p>\u53e6\u89e3</p> <p>\u5c0d\u65bc\u6bcf\u500b\u975e\u6e90\u9ede\u7684\u9ede\u90fd\u53bb\u7dad\u8b77\u4ed6\u8207\u6700\u8fd1\u7684\u5169\u500b\u300c\u4e0d\u540c\u7684\u300d\u6e90\u9ede\u7684\u8ddd\u96e2</p> <p>\u4ee4 \\(f[u]\\) \u70ba \\(u\\) \u7684\u8207\u5979\u6700\u8fd1\u6e90\u9ede\u7684\u8ddd\u96e2\uff0c\\(g[u]\\) \u70ba\u6b21\u8fd1\u6e90\u9ede\u7684\u8ddd\u96e2\uff0c\u90a3\u9ebc\u7b54\u6848\u5c31\u662f \\(ans =\\min\u2061(ans,f[u]+g[u])\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst double EPS = 1e-8;\n\nstruct Graph {\n    vector&lt;vector&lt;pii&gt;&gt; G;\n    vector&lt;int&gt; source;\n    vector&lt;int&gt; f;\n    vector&lt;int&gt; parf;\n    vector&lt;int&gt; g;\n    vector&lt;int&gt; parg;\n    int n;\n\n    void init(int _n) {\n        n = _n;\n        G.resize(n);\n    }\n\n    void add_edge(int u, int v, int w) {\n        G[u].pb({v, w});\n    }\n\n    void add_source(int x) {\n        source.pb(x);\n    }\n\n    void dijkstra() {\n        f = vector&lt;int&gt;(n, INF);\n        parf = vector&lt;int&gt;(n);\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        for (auto s : source) {\n            pq.push({0, s});\n            f[s] = 0;\n            parf[s] = s;\n        }\n\n        while (pq.size()) {\n            auto [dis_u, u] = pq.top();\n            pq.pop();\n\n            if (dis_u &gt; f[u]) continue;\n            f[u] = dis_u;\n\n            for (auto [v, w] : G[u]) {\n                if (f[u] + w &lt; f[v]) {\n                    f[v] = f[u] + w;\n                    parf[v] = parf[u];\n                    pq.push({f[v], v});\n                }\n            }\n        }\n    }\n\n    int dijkstra2() {\n        g = vector&lt;int&gt;(n, INF);\n        parg = vector&lt;int&gt;(n, -1);\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n\n        for (int i = 0; i &lt; n; i++) {\n            for (auto [v, w] : G[i]) {\n                if (parf[i] == parf[v]) continue;\n                if (f[i] + w &lt; g[v]) {\n                    g[v] = f[i] + w;\n                    parg[v] = parf[i];\n                    pq.push({g[v], v});\n                }\n            }\n        }\n\n        while (pq.size()) {\n            auto [dis_u, u] = pq.top();\n            pq.pop();\n\n            if (dis_u &gt; g[u]) continue;\n            g[u] = dis_u;\n\n            for (auto [v, w] : G[u]) {\n                if (parg[u] == parf[v]) continue;\n                if (g[u] + w &lt; g[v]) {\n                    g[v] = g[u] + w;\n                    parg[v] = parg[u];\n                    pq.push({g[v], v});\n                }\n            }\n        }\n\n        int ans = INF;\n        for (int i = 0; i &lt; n; i++) {\n            if (parg[i] == -1) continue;\n            if (parf[i] == parg[i]) continue;\n            ans = min(ans, f[i] + g[i]);\n        }\n\n        return ans;\n    }\n} g;\n\nint n, m, k;\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    g.init(n);\n\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--, v--;\n        g.add_edge(u, v, w);\n        g.add_edge(v, u, w);\n    }\n\n    for (int i = 0; i &lt; k; i++) {\n        int u;\n        cin &gt;&gt; u;\n        u--;\n        g.add_source(u);\n    }\n}\n\nvoid work() {\n    g.dijkstra();\n    cout &lt;&lt; g.dijkstra2() &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n}\n</code></pre>"},{"location":"graph/sp/#shortest-path-tree","title":"shortest path tree","text":"shortest path tree \u7d50\u69cb \u5be6\u4f5c <pre><code>void build_Tree () {\n    fill (par + 1, par + 1 + n, -1);\n    for (int i = 1; i &lt;= n; i++) {\n        for (auto [v, w] : G[u]) {\n            if (dis[v] == dis[u] + w) {\n                par[v] = u;\n            }\n        }\n    }\n    for (int i = 1; i &lt; n; i++) {\n        if (par[i] != -1) {\n            D[par[i]].push_back(i);\n        }\n    }\n}\n</code></pre> <p>\u9019\u908a\u5e36\u4e00\u500b\u76f8\u95dc\u7684\u984c\u76ee</p> LOJ #3255. \u300cJOI 2020 Final\u300d\u5965\u8fd0\u516c\u4ea4 <p>\u7ed9 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u6709\u5411\u5716\uff0c\u6bcf\u689d\u908a \\((u_i,v_i)\\) \u6709\u908a\u6b0a \\(c_i\\)\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u7ffb\u8f49\u4e00\u689d\u908a\uff0c\u7ffb\u8f49\u4ee3\u50f9\u662f\u8a72\u689d\u908a\u7684 \\(d_i\\)\uff0c\u554f\u5f9e \\(1\\) \u8d70\u5230 \\(n\\) \u518d\u8d70\u56de \\(1\\) \u7684\u6700\u5c0f cost</p> <p>\\(n \\leq 200,m \\leq 5 \\times 10^4\\)</p> \u601d\u8def <ul> <li> <p>\u82e5\u7ffb\u8f49\u7684\u908a\u5728 shortest path tree \u4e0a</p> <ul> <li>\u56e0\u70ba\u908a\u88ab\u522a\u6389\u4e86\uff0c\u6574\u9846 tree \u5c31\u8981\u91cd\u7b97</li> <li>\\(1 \\to u \\to v \\to n\\)</li> <li>\u4f60\u53ef\u4ee5\u5f9e \\(1 \\to u\\) \u4f46\u9019\u4e4b\u5f8c\u8981\u8d70\u54ea\u4e00\u689d? (\u5df2\u7d93\u6c92\u6709 \\(u \\to v\\) \u4e86)</li> </ul> </li> <li> <p>\u82e5\u7ffb\u8f49\u7684\u908a\u4e0d\u5728 shortest path tree \u4e0a</p> <ul> <li>\u4e0d\u7d93\u904e\u908a: \u539f\u4f86\u7684\u7b54\u6848</li> <li>\u8981\u7d93\u904e\u908a \\(1 \\to v \\to u \\to n \\to 1\\) \u6216 \\(1 \\to n \\to v \\to u \\to 1\\)</li> </ul> </li> <li> <p>\u6211\u5011\u53ea\u9700\u8981\u908a\u5728 tree \u4e0a\u6642\u518d\u5f9e\u65b0\u7b97\u4e00\u6b21 dijkstra</p> <ul> <li>\\(O(n^3)\\)</li> <li>\\(O(n)\\) \u6a39\u4e0a\u6700\u591a \\(n - 1\\) \u689d\u908a</li> <li>\\(O(n^2)\\) \u66b4\u529b dijkstra</li> </ul> </li> </ul>"},{"location":"graph/sp/#shortest-path-dag","title":"shortest path DAG","text":"shortest path DAG\u7d50\u69cb <p>\u6709\u7684\u90fd\u5efa\u908a\uff0c\u6709\u91cd\u908a\u6642\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff0c\u6642\u5e38\u914d\u5408 DAG DP \u8a08\u7b97\u65b9\u6cd5\u6578</p> \u5be6\u4f5c <pre><code>void build_dag() {\n    for (int u = 1; u &lt;= n; u++) {\n        for (auto [v, w] : G[u]) {\n            if (dis[v] == dis[u] + w) {\n                D[u].push_back(v);\n                in[v]++;\n            }\n        }\n    }\n}\n</code></pre> LOJ #2350. \u300cJOI 2018 Final\u300d\u6708\u7968\u8d2d\u4e70 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u5e36\u6b0a\u7121\u5716\uff0c\u5f9e \\(s\\) \u5230 \\(t\\) \u9078\u4e00\u689d\u6700\u77ed\u8def\u5f91\uff0c\u5c07\u5176\u908a\u6b0a\u90fd\u8a2d\u70ba \\(0\\)\u3002\u554f \\(u\\) \u5230 \\(v\\) \u7684\u6700\u77ed\u8def\u5f91\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(n\\le 10^5,m\\le 2\\times 10^5\\)</p> \u601d\u8def <ul> <li> <p>\u82e5\u6709\u91cd\u758a\uff0c\u8a2d\u91cd\u758a\u70ba \\(x\\to \\ldots \\to y\\)</p> <ul> <li>\\(ans=dis(u,x)+dis(y,v) \\texttt{ or } dis(u,y)+dis(x,v)\\)</li> <li>\u8a18\u5f97\u8ddf \\(dis(u,v)\\) \u53d6 min</li> </ul> </li> <li> <p>\u7528 shortest path DAG \u4e0a\u679a\u8209 \\(x\\) \u7528 dp \u5f97\u5230 \\(y\\)</p> <ul> <li>DFS on DAG</li> <li>\\(f[x]=\\) topo sort \u5728 \\(x\\) \u4e4b\u5f8c\u7684\u9ede\u7684 \\(dis(v,y)\\) \u6700\u5c0f\u7684 \\(y\\)</li> </ul> </li> <li> <p>\u540c\u7406\u7528 shortest path DAG \u627e \\(g[x]=\\)topo sort \u5728 \\(x\\) \u4e4b\u5f8c\u7684\u9ede \\(dis(u,y)\\) \u6700\u5c0f\u7684 \\(y\\)</p> </li> <li> <p>\\(ans=\\min(dis(u,x)+f[x],dis(v,x)+g[x],dis(u,v))\\) </p> </li> </ul> code <pre><code>void dfs(int u) {\n    if (vis[u]) return;\n    vis[u] = 1;\n    f[u] = dV[u], g[u] = dU[u];\n    for (int i = head[u]; i; i = edge[i].next) {\n        int v = edge[i].to;\n        if (dS[u] + dT[v] + edge[i].len &gt; dS[T]) continue;\n        dfs(v);\n        f[u] = min(f[u], f[v]), g[u] = min(g[u], g[v]);\n    }\n    ans = min({ans, f[u] + dU[u], g[u] + dV[u]});\n}\n</code></pre> LOJ #2344. \u300cJOI 2016 Final\u300d\u94c1\u8def\u7968\u4ef7 <p>\u7d66\u4f60\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7121\u5411\u5716\uff0c\u4e00\u958b\u59cb\u6bcf\u500b\u908a\u7684\u908a\u6b0a\u90fd\u662f \\(1\\)\uff0c\u6709 \\(q\\) \u500b\u64cd\u4f5c</p> <ul> <li>\\(\\text{change}(i,2):\\) \u5c07\u7b2c \\(i\\) \u689d\u908a\u908a\u6b0a\u8b8a\u6210 \\(2\\)</li> </ul> <p>\u6bcf\u6b21\u64cd\u4f5c\u5b8c\u554f\u6709\u90a3\u4e9b\u9ede\u8ddf\u539f\u9ede\u7684\u6700\u77ed\u8def\u4e0d\u540c</p> <p>\\(n\\le 10^5,q,m\\le 2\\times 10^5\\)</p> \u6709\u7528\u7684\u6e2c\u8cc7 inputoutput <pre><code>4 4 2\n1 2 \n2 3\n1 4\n4 3\n2\n1\n</code></pre> <pre><code>0\n2\n</code></pre> \u601d\u8def <p>\u4e00\u6a23\u5148\u5efa\u7acb shortest path DAG\uff0c\u522a\u908a\u6642\u985e\u4f3c topo sort\u3002\u5047\u5982\u73fe\u5728\u522a\u6389 \\((u,v)\\) \u9019\u689d\u908a\uff0c\u82e5 \\(in_v=0\\) \u5c31\u53ef\u4ee5\u5c07\u8b8a\u5927\u50b3\u905e\u7d66 \\(v\\) \u5f8c\u9762\u7684\u9ede\uff0c\u7531\u65bc\u6bcf\u689d\u908a\u908a\u6b0a\u589e\u52a0\u5f8c\u5c31\u4e0d\u53ef\u80fd\u51fa\u73fe\u5728shortest path DAG\uff0c\u6240\u4ee5\u6bcf\u689d\u908a\u53ea\u9700\u522a\u9664\u4e00\u6b21\u6545\u8907\u96dc\u5ea6 \\(O(n+m)\\)\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint ans;\n\nstruct Edge {\n    int u, v, w, id;\n};\n\nstruct Graph {\n    int n, m, s;\n    vector&lt;vector&lt;Edge&gt;&gt; G;\n    vector&lt;vector&lt;Edge&gt;&gt; D;\n    vector&lt;Edge&gt; edges;\n    vector&lt;int&gt; dis;\n    vector&lt;int&gt; on_DAG;\n    vector&lt;int&gt; in;\n\n    Graph(int _n, int _m) {\n        n = _n, m = _m;\n        dis = vector&lt;int&gt;(n, INF);\n        on_DAG = vector&lt;int&gt;(m);\n        in = vector&lt;int&gt;(n);\n        G.resize(n);\n        D.resize(n);\n    }\n\n    void add_edge(int u, int v, int id) {\n        int w = 1;\n        G[u].pb({u, v, w, id});\n        G[v].pb({v, u, w, id});\n        edges.pb({u, v, w, id});\n    }\n\n    void dijkstra() {\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        pq.push({0, s});\n\n        while (pq.size()) {\n            auto [x, u] = pq.top();\n            pq.pop();\n\n            if (dis[u] != INF) continue;\n            dis[u] = x;\n\n            for (auto [u, v, w, id] : G[u]) {\n                pq.push({w + dis[u], v});\n            }\n        }\n    }\n\n    void build_DAG() {\n        for (int i = 0; i &lt; n; i++) {\n            for (auto [u, v, w, id] : G[i]) {\n                if (dis[u] + w == dis[v]) {\n                    D[u].pb({u, v, w, id});\n                    on_DAG[id] = true;\n                    edges[id] = {u, v, w, id};  // \u8981\u66f4\u65b0 edges \u7684\u65b9\u5411\n                    in[v]++;\n                }\n            }\n        }\n    }\n\n    void del_edge(int eid) {\n        if (on_DAG[eid] == false) return;\n\n        queue&lt;int&gt; q;\n        in[edges[eid].v]--;\n        on_DAG[eid] = false;\n        if (in[edges[eid].v] == 0) q.push(edges[eid].v);\n\n        while (q.size()) {\n            int u = q.front();\n            q.pop();\n            ans++;\n\n            for (auto [u, v, w, id] : D[u]) {\n                if (on_DAG[id] == false) continue;\n                in[v]--;\n                on_DAG[id] = false;\n                if (in[v] == 0) {\n                    q.push(v);\n                }\n            }\n        }\n    }\n};\n\nvoid work() {\n    int n, m, q, s;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n    Graph g(n, m);\n\n    int u, v;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        u--, v--;\n        g.add_edge(u, v, i);\n    }\n    g.s = 0;\n\n    g.dijkstra();\n    g.build_DAG();\n\n    while (q--) {\n        int eid;\n        cin &gt;&gt; eid;\n        eid--;\n        g.del_edge(eid);\n\n        cout &lt;&lt; ans &lt;&lt; \"\\n\";\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        work();\n    }\n}\n\n/*\n4 4 2\n1 2\n2 3\n1 4\n4 3\n2\n1\n*/\n</code></pre> CS Academy - Chromatic Number <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u5716\uff0c\u908a\u6709\u908a\u6b0a\uff0c\u8acb\u9078\u64c7 \\(k\\) \u500b\u7279\u6b8a\u9ede\uff0c\u4f7f \\(1\\to n\\) \u6709\u7d93\u904e\u9019 \\(k\\) \u500b\u7279\u6b8a\u9ede\u7684\u6700\u77ed\u8def\u5f91\u8d8a\u591a\u8d8a\u597d\uff0c\u8f38\u51fa\u6700\u591a\u80fd\u6709\u5e7e\u689d\u9019\u6a23\u7684\u8def\u5f91\u4ee5\u53ca\u9078\u6cd5\u6709\u5e7e\u7a2e</p> <p>\\(n\\le 300, m\\le \\frac{n(n-1)}{2}\\)</p> \u601d\u8def <p>\u5efa\u5716</p> <ul> <li>\\(O(n^3) \\texttt{ floyd warshall}\\) </li> <li>\\(dis(u,v):\\) \\(u\\) \u5230 \\(v\\) \u7684\u6700\u77ed\u8def</li> <li>\\(cnt(u,v):\\) \u5f9e \\(u\\) \u8d70\u6700\u77ed\u8def\u5230 \\(v\\) \u6709\u5e7e\u7a2e\u8d70\u6cd5</li> </ul> <p>\u72c0\u614b\u5b9a\u7fa9</p> <ul> <li>\\(f_{i,k}\\) \u4ee5 \\(i\\) \u7d50\u5c3e\u9078 \\(k\\) \u500b\u7bc0\u9ede\u6700\u591a\u80fd\u5728\u5e7e\u500b shortest path \u4e0a</li> <li>\\(g_{i,k}\\) \u4ee5 \\(i\\) \u7d50\u5c3e\u9078 \\(k\\) \u500b\u7bc0\u9ede\u6709\u5e7e\u7a2e\u9078\u6cd5\u80fd\u6eff\u8db3\u5728 \\(f_{i,k}\\) \u500b shortest path \u4e0a</li> </ul> <p>\u8f49\u79fb</p> <ul> <li>\u627e\u5230 \\(u,v\\) \u6eff\u8db3 \\(1 \\rightarrow v \\rightarrow u \\rightarrow n\\)</li> <li>\\(f_{u,k}=\\max \\begin{cases} f_{v,k-1}\\times cnt(v,u) \\\\ f_{u,k} \\end{cases}\\)</li> <li>\\(g_{u,k}\\)<ul> <li>\\(\\texttt{if }f_{v,k-1}\\times cnt(v,u) \\texttt{ == }f_{u,k}: g_{u,k}=g_{u,k}+g_{v,k-1}\\)</li> <li>\\(\\texttt{else if }f_{v,k-1}\\times cnt(v,u) \\texttt{ &gt; }f_{u,k}: g_{u,k}=g_{v,k-1}\\)</li> </ul> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 300 + 5;\nconst int M = 1e9 + 7;\n\nint n, m, K;\nint dis[maxn][maxn];\nint cnt[maxn][maxn];\npii dp[maxn][maxn];\n\nvoid floyd() {\n    for (int k = 1; k &lt;= n; k++) {\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                if (dis[i][j] == dis[i][k] + dis[k][j]) {\n                    cnt[i][j] += cnt[i][k] * cnt[k][j];\n                } else if (dis[i][j] &gt; dis[i][k] + dis[k][j]) {\n                    dis[i][j] = dis[i][k] + dis[k][j];\n                    cnt[i][j] = cnt[i][k] * cnt[k][j];\n                }\n            }\n        }\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; K;\n    int u, v, w;\n\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            dis[i][j] = INF;\n        }\n        dis[i][i] = 0;\n    }\n\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        dis[u][v] = dis[v][u] = min(w, dis[u][v]);\n        cnt[u][v] = cnt[v][u] = 1;\n    }\n}\n\nvoid solve() {\n    floyd();\n\n    vector&lt;pii&gt; ord;\n    for (int i = 1; i &lt;= n; i++) {\n        ord.pb({dis[1][i], i});\n        cnt[i][i] = 1;\n    }\n    sort(ALL(ord));  // sort by distance\n\n    // dp init\n    for (int i = 0; i &lt; n; i++) {\n        int u = ord[i].S;\n        if (dis[1][u] + dis[u][n] != dis[1][n]) continue;\n        dp[u][1] = {cnt[1][u], 1};\n    }\n\n    // (v -&gt; u) \u4e00\u5b9a\u662f v \u5148\u88ab\u8d70\u5230\u518d\u4f86\u624d\u662f u\uff0c\u8ddd\u96e2\u662f\u4e00\u7a2e\u53ef\u4ee5\u5224\u65b7\u5148\u5f8c\u7684\u597d\u65b9\u6cd5\n    for (int i = 0; i &lt; ord.size(); i++) {\n        int u = ord[i].S;\n        if (dis[1][u] + dis[u][n] != dis[1][n]) continue;  // check u\n\n        for (int j = 0; j &lt; i; j++) {\n            int v = ord[j].S;\n            if (dis[1][v] + dis[v][u] + dis[u][n] != dis[1][n])\n                continue;  // check v\n\n            for (int k = 2; k &lt;= K; k++) {\n                pii tmp;\n                tmp.F = dp[v][k - 1].F * cnt[v][u];\n                tmp.S = dp[v][k - 1].S;\n\n                if (tmp.F &gt; dp[u][k].F)\n                    dp[u][k] = tmp;\n                else if (tmp.F == dp[u][k].F) {\n                    dp[u][k].S += tmp.S;\n\n                    if (dp[u][k].S &gt;= M)\n                        dp[u][k].S -= M;\n                }\n            }\n        }\n    }\n\n    pii res = {0, 0};\n    // \u4ee5 u \u7d50\u5c3e\uff0c\u9084\u7f3a\u5c11\u5230 u -&gt; n \u9019\u6bb5\uff0c\u88dc\u8d77\u4f86\n    // \u53ef\u662f n \u7d50\u5c3e\u4e0a\u9762\u6709\u7b97\u904e\u4e86\u963f? \u4e0d\u4e00\u5b9a\u6703\u4ee5 n \u7d50\u5c3e \u4f46\u6700\u77ed\u8def\u53ef\u5ef6\u7e8c\u81f3 n\n    for (int i = 1; i &lt;= n; i++) {\n        if (dis[1][i] + dis[i][n] != dis[1][n])\n            continue;\n\n        dp[i][K].F *= cnt[i][n];\n\n        if (dp[i][K].F &gt; res.F)\n            res = dp[i][K];\n        else if (dp[i][K].F == res.F) {\n            res.S += dp[i][K].S;\n\n            if (res.S &gt;= M)\n                res.S -= M;\n        }\n    }\n\n    cout &lt;&lt; res.F &lt;&lt; \" \" &lt;&lt; res.S &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n}\n</code></pre> CSES - Visiting Cities <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u6b63\u6b0a\u6709\u5411\u5716\uff0c\u5f9e \\(1\\to n\\) \u5224\u65b7\u6bcf\u500b\u908a\u662f\u5426\u5728\u6bcf\u500b\u6700\u77ed\u8def\u5f91\u4e0a</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5efa\u7acb shotest path DAG\uff0c\u9032\u884c DAG DP:</p> <ul> <li> <p>\\(dp(1 \\to u):\\) \\(1\\to u\\) \u662f\u6700\u77ed\u8def\u7684\u8def\u5f91\u65b9\u6cd5\u6578</p> </li> <li> <p>\\(dp(u \\to n):\\) \\(u\\to n\\) \u662f\u6700\u77ed\u8def\u7684\u8def\u5f91\u65b9\u6cd5\u6578</p> </li> </ul> <p>\u5224\u65b7 \\(dp(1 \\to u)\\times dp(v\\to n)==dp(s\\to t)\\)\uff0c\u662f\u8a71\u5c31\u662f\u5728\u6700\u77ed\u8def\u5f91\u4e0a</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int MAXN = 3e5 + 5;\nconst int M = 2147483647;\nint n, m;\nvector&lt;pii&gt; G[MAXN];\nvector&lt;pii&gt; R[MAXN];\nvector&lt;int&gt; D[MAXN];\nvector&lt;int&gt; P[MAXN];\nint in[MAXN], rv[MAXN];\n\nvector&lt;int&gt; dijkstra(int source, vector&lt;pii&gt; *G) {\n    vector&lt;int&gt; dis(n + 1, INF);\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n\n    pq.push({0, source});\n    while (pq.size()) {\n        auto [x, u] = pq.top();\n        pq.pop();\n\n        if (dis[u] != INF) continue;\n        dis[u] = x;\n\n        for (auto [v, w] : G[u]) {\n            pq.push({x + w, v});\n        }\n    }\n    return dis;\n}\n\nvoid build(vector&lt;int&gt; &amp;dis) {\n    for (int i = 1; i &lt;= n; i++) {\n        for (auto [v, w] : G[i]) {\n            if (dis[v] == dis[i] + w) {\n                D[i].push_back(v);\n                P[v].push_back(i);\n                in[v]++;\n                rv[i]++;\n            }\n        }\n    }\n}\n\nvector&lt;int&gt; topo(int source, int *in, vector&lt;int&gt; *D) {\n    queue&lt;int&gt; q;\n    vector&lt;int&gt; inn(n + 1);\n    vector&lt;int&gt; dp(n + 1);\n    dp[source] = 1;\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (in[i] == 0) q.push(i);\n        inn[i] = in[i];\n    }\n\n    while (q.size()) {\n        int u = q.front();\n        q.pop();\n\n        for (auto v : D[u]) {\n            dp[v] = (dp[v] + dp[u]) % M;\n            inn[v]--;\n            if (inn[v] == 0) q.push(v);\n        }\n    }\n\n    return dp;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int u, v, w;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        G[u].push_back({v, w});\n        R[v].push_back({u, w});\n    }\n    vector&lt;int&gt; dis = dijkstra(1, G);\n    vector&lt;int&gt; rev = dijkstra(n, R);\n    build(dis);\n\n    vector&lt;int&gt; dp1 = topo(1, in, D);\n    vector&lt;int&gt; dp2 = topo(n, rv, P);\n\n    int tot = dp1[n];\n    vector&lt;int&gt; res;\n    for (int i = 1; i &lt;= n; i++) {\n        int cur = (dp1[i] * dp2[i]) % M;\n        if (cur == tot) {\n            res.push_back(i);\n        }\n    }\n\n    cout &lt;&lt; res.size() &lt;&lt; \"\\n\";\n    for (int i = 0; i &lt; res.size(); i++) {\n        cout &lt;&lt; res[i] &lt;&lt; \" \";\n    }\n}\n</code></pre> CSES - Visiting Cities \u8b8a\u5316 <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u6b63\u6b0a\u6709\u5411\u5716\uff0c\u5f9e \\(1\\to n\\) \u5224\u65b7\u6bcf\u500b\u908a\u662f\u54ea\u7a2e \\(\\texttt{type}\\)</p> <ul> <li> <p>\\(\\texttt{type 1: }\\)\u662f\u5426\u5728\u6bcf\u500b\u6700\u77ed\u8def\u5f91\u4e0a </p> </li> <li> <p>\\(\\texttt{type 2: }\\)\u81f3\u5c11\u6709\u5728\u4e00\u500b\u6700\u77ed\u8def\u5f91\u4e0a</p> </li> <li> <p>\\(\\texttt{type 3: }\\)\u6839\u672c\u6c92\u6709\u5728\u6700\u77ed\u8def\u5f91\u4e0a</p> </li> </ul> <p>\\(n\\le 10^5, m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5efa\u7acb shotest path DAG\uff0c\u9032\u884c DAG DP</p> <ul> <li> <p>\\(\\texttt{type 1: }\\) \u5224\u65b7 \\(dp(1 \\to u)\\times dp(v\\to n)==dp(s\\to t)\\)</p> </li> <li> <p>\\(\\texttt{type 2: }\\) \u5728 DAG \u4e0a\u7684\u908a</p> </li> <li> <p>\\(\\texttt{type 3: }\\) \u4e0d\u5728 DAG \u4e0a\u7684\u908a</p> </li> </ul>"},{"location":"graph/sp/#_2","title":"\u5efa\u5716/\u5206\u5c64","text":"LOJ #3964. \u300cAPIO2023\u300d\u8d5b\u535a\u4e50\u56ed <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u7121\u5411\u5716\uff0c\u908a\u5e36\u6b0a\uff0c\u70ba \\(c[i]\\)\uff0c\u4e00\u958b\u59cb\u5728\u9ede \\(0\\)\uff0c\u4f60\u8981\u53bb\u9ede \\(t\\)\u3002\u6bcf\u500b\u9ede\u6709\u4e00\u500b\u80fd\u529b \\(arr[i]\\)</p> <ul> <li> <p>\\(arr[i] = 0\\)\uff0c\u53ef\u8b93\u7576\u524d\u5df2\u8d70\u7684\u8ddd\u96e2\u8a2d\u70ba \\(0\\)</p> </li> <li> <p>\\(arr[i] = 1\\)\uff0c\u6c92\u4efb\u4f55\u4f5c\u7528</p> </li> <li> <p>\\(arr[i] = 2\\)\uff0c\u53ef\u8b93\u7576\u524d\u5df2\u8d70\u7684\u8ddd\u96e2\u9664\u4ee5 \\(2\\) </p> </li> </ul> <p>\u9664\u4e86\u9ede \\(t\\) \u5916\uff0c\u6240\u6709\u9ede\u90fd\u53ef\u4ee5\u91cd\u8907\u8d70\uff0c\u53ea\u8981\u8d70\u5230\u9ede\u5c31\u53ef\u4f7f\u7528 \\(arr[i]\\)\uff0c\u300c\u9664\u4ee5 \\(2\\) \u300d\u7684\u80fd\u529b\u7e3d\u5171\u53ea\u80fd\u4f7f\u7528 \\(k\\) \u6b21\u3002\u53ea\u8981\u62b5\u9054 \\(t\\) \u9ede\u5c31\u4ee3\u8868\u8d70\u5230\u7d42\u9ede\uff0c\u554f\u62b5\u9054 \\(t\\) \u9ede\u7684\u6700\u77ed\u8ddd\u96e2</p> <p>\\(n, m\\le 10^5,k\\le 10^6,c[i]\\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u5c07\u984c\u76ee\u7684\u5716\u53cd\u8457\u505a\uff0c\u5373\u5f9e\u9ede \\(t\\) \u958b\u59cb\uff0c\u8dd1\u56de\u9ede \\(0\\)\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u5efa\u7acb\u5206\u5c64\u5716</p> <ul> <li> <p>\u539f\u5148\u9047\u5230\u80fd\u529b\u70ba \\(0\\) \u7684\u9ede\uff0c\u6703\u628a\u7576\u524d\u8ddd\u96e2\u8a2d\u7f6e\u70ba \\(0\\)</p> <ul> <li>\u90a3\u9ebc\u73fe\u5728\u9047\u5230\u80fd\u529b\u70ba \\(0\\) \u7684\u9ede\uff0c\u76f8\u7576\u65bc\u8b93\u4e4b\u5f8c\u8d70\u904e\u7684\u6240\u6709\u908a\u6b0a\u90fd\u8b8a\u6210 \\(0\\)</li> </ul> </li> <li> <p>\u539f\u5148\u9047\u5230\u80fd\u529b\u70ba \\(2\\) \u7684\u9ede\uff0c\u6703\u628a\u7576\u524d\u8ddd\u96e2\u6e1b\u534a</p> <ul> <li>\u90a3\u9ebc\u73fe\u5728\u9047\u5230\u80fd\u529b\u70ba \\(2\\) \u7684\u9ede\uff0c\u76f8\u7576\u65bc\u8b93\u4e4b\u5f8c\u8d70\u904e\u7684\u6240\u6709\u908a\u6b0a\u90fd\u8b8a\u6210\u539f\u4f86\u7684\u4e00\u534a</li> </ul> </li> </ul> <p>\u7b2c \\(k\\) \u5c64\u70ba\u7576\u524d\u5df2\u4f7f\u7528\u300c\u9664\u4ee5 \\(2\\) \u300d\u7684\u80fd\u529b \\(k\\) \u6b21\u3002\u6211\u5011\u767c\u73fe\uff0c\u76f4\u63a5\u8b93\u7b2c \\(k\\) \u5c64\u4e0a \\(u\\) \u548c \\(v\\) \u4e4b\u9593\u7684\u908a\u6b0a\u70ba\u539f\u5716\u4e0a \\(u\\) \u548c \\(v\\) \u4e4b\u9593\u908a\u6b0a\u7684 \\(\\displaystyle \\frac{1}{2^k}\\) \uff0c\u5c31\u80fd\u6eff\u8db3\u80fd\u529b\u70ba \\(2\\) \u7684\u9ede\u3002</p> <p>\u81f3\u65bc\u80fd\u529b\u70ba \\(0\\) \u7684\u9ede\uff0c\u6211\u5011\u53ef\u4ee5\u65b0\u5efa\u4e00\u5c64 \\(K+1\\) \u5c64\uff0c\u8b93\u9019\u4e00\u5c64\u5167 \\(u\\) \u548c \\(v\\) \u4e4b\u9593\u7684\u908a\u6b0a\u90fd\u6539\u6210 \\(0\\)\u3002\u7136\u5f8c\u8b93\u6240\u6709 \\(arr[v]=0\\) \u7684 node\\((k,v)\\) \u76f4\u63a5\u5efa\u7acb\u55ae\u5411\u908a\u5230 \\(K+1\\) \u5c64\u5373\u53ef\u3002</p> <ul> <li> <p>Node (u, k) \u2192 Node (v, k) 1/2^k</p> </li> <li> <p>Node (u, k) \u2192 Node (v, k) 0 if (k=K+1)</p> </li> <li> <p>Node (u, k) \u2192 Node (v, k+1) w * 1/2^(k+1) if arr[u]=2</p> </li> <li> <p>Node (u, k) \u2192 Node (u, K+1) 0 if arr[u]=0 </p> </li> </ul> <p>\u6211\u5011\u767c\u73fe\uff0c\u4e8b\u5be6\u4e0a\u7528\u4e00\u4e9b\u6b21\u512a\u60e0\u653f\u7b56\u4e4b\u5f8c\uff0c\u6700\u77ed\u8def\u6703\u8b8a\u7684\u5f88\u4f4e\uff0c\u9060\u9060\u4f4e\u65bc\u7cbe\u5ea6\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u672c\u984c\u4e2d\u6700\u77ed\u8def\u6700\u5927\u4e0d\u8d85\u904e\u908a\u6578\u4e58\u908a\u6b0a\u6700\u5927\u503c\uff0c\u5373 \\(10^5\\times 10^9=10^{14}\\)\uff0c\u53ea\u9700\u8b93\u9019\u500b\u6578\u9664\u4ee5 \\(70\\) \u6b21 \\(2\\) \u5c31\u53ef\u4ee5\u6389\u5230 \\(10^{\u22127}\\) \u4ee5\u4e0b\uff08\\(8\\times 10^{\u22128}\\)\uff09</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\n#include \"cyberland.h\"\n#define pii pair&lt;int, double&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst double INF = 1000000000000000.00;\n\nstruct Graph {\n    int n, K, cnt;\n    vector&lt;vector&lt;pii&gt;&gt; G;\n    vector&lt;vector&lt;int&gt;&gt; id;\n    vector&lt;double&gt; dis;\n    vector&lt;int&gt; vis;\n\n    void init(int _n, int _k) {\n        n = _n, K = _k;\n        id.resize(K + 1);\n        cnt = 0;\n\n        // (id + 1) % n == 0 -&gt; cyberland\n        // k != 0\n        // id / n -&gt; k\n        for (int i = 0; i &lt; K + 1; i++) {\n            id[i].resize(n);\n            for (int j = 0; j &lt; n; j++) {\n                id[i][j] = cnt++;  // id[k][u]\n            }\n        }\n        G.resize(cnt);\n        dis = vector&lt;double&gt;(cnt, INF);\n        vis = vector&lt;int&gt;(cnt);\n    }\n\n    void add_edge(int u, int uk, int v, int vk, double w) {\n        int id1 = id[uk][u];\n        int id2 = id[vk][v];\n\n        G[id1].pb({id2, w});\n    }\n\n    void dijkstra(int s) {\n        priority_queue&lt;pair&lt;double, int&gt;, vector&lt;pair&lt;double, int&gt;&gt;, greater&lt;pair&lt;double, int&gt;&gt;&gt; pq;\n        pq.push({0, id[0][s]});  // cyberland \u70ba\u8d77\u9ede\n        dis[id[0][s]] = 0;\n\n        while (pq.size()) {\n            auto [dis_u, u] = pq.top();\n            pq.pop();\n\n            if ((u % n) == (s % n) &amp;&amp; (u / n) != 0) continue;\n            if (vis[u]) continue;\n            vis[u] = 1;\n\n            for (auto [v, w] : G[u]) {\n                if ((v % n) == (s % n) &amp;&amp; (v / n) != 0) continue;\n                if (dis[v] &gt; dis[u] + w) {\n                    dis[v] = dis[u] + w;\n                    pq.push({dis[v], v});\n                }\n            }\n        }\n    }\n\n    double cal() {\n        double ans = INF;\n        for (int i = 0; i &lt; K + 1; i++) {\n            int u = id[i][0];\n            ans = min(ans, dis[u]);\n        }\n        if (ans == INF) return -1;\n\n        return ans;\n    }\n};\n\n/*\ncyberland \u4e0d\u80fd\u53bb relax \u5225\u4eba\nNode (u, k) -&gt; Node (v, k) 1/2^k\nNode (u, k) -&gt; Node (v, k) 0 if (k=K+1)\nNode (u, k) -&gt; Node (v, k+1) w * 1/2^(k+1) if arr[u]=2\nNode (u, k) -&gt; Node (u, K+1) 0 if arr[u]=0\n*/\n\ndouble solve(int N, int M, int K, int H, vector&lt;int&gt; x, vector&lt;int&gt; y, vector&lt;int&gt; c, vector&lt;int&gt; arr) {\n    K = min(K, 70);\n    vector&lt;vector&lt;pii&gt;&gt; G(N);\n    for (int i = 0; i &lt; M; i++) {\n        int u = x[i], v = y[i], w = c[i];\n        G[u].pb({v, w});\n        G[v].pb({u, w});\n    }\n    K++;\n\n    Graph g;\n    g.init(N, K);\n\n    double cnt = 1;\n    for (int k = 0; k &lt; K + 1; k++) {\n        if (k == K) {\n            for (int i = 0; i &lt; N; i++) {\n                for (auto [v, w] : G[i]) {\n                    g.add_edge(i, k, v, k, 0);\n                }\n            }\n            continue;\n        }\n        for (int i = 0; i &lt; N; i++) {\n            for (auto [v, w] : G[i]) {\n                g.add_edge(i, k, v, k, (double)w * cnt);\n            }\n        }\n        cnt *= 0.5;\n    }\n    cnt = 1;\n    for (int k = 0; k &lt; K - 1; k++) {\n        cnt *= 0.5;\n        for (int i = 0; i &lt; N; i++) {\n            for (auto [v, w] : G[i]) {\n                if (arr[i] == 2) {\n                    g.add_edge(i, k, v, k + 1, (double)w * cnt);\n                    }\n            }\n        }\n    }\n    for (int k = 0; k &lt; K; k++) {\n        for (int i = 0; i &lt; N; i++) {\n            if (arr[i] == 0) {\n                g.add_edge(i, k, i, K, 0);\n            }\n        }\n    }\n\n    g.dijkstra(H);\n\n    return g.cal();\n}\n</code></pre> full code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define pii pair&lt;int, long double&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst long double INF = 1000000000000000.00;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Graph {\n    int n, K, cnt;\n    vector&lt;vector&lt;pii&gt;&gt; G;\n    vector&lt;vector&lt;int&gt;&gt; id;\n    vector&lt;double&gt; dis;\n    vector&lt;int&gt; vis;\n\n    void init(int _n, int _k) {\n        n = _n, K = _k;\n        id.resize(K + 1);\n        cnt = 0;\n\n        // (id + 1) % n == 0 -&gt; cyberland\n        // k != 0\n        // id / n -&gt; k\n        for (int i = 0; i &lt; K + 1; i++) {\n            id[i].resize(n);\n            for (int j = 0; j &lt; n; j++) {\n                id[i][j] = cnt++;  // id[k][u]\n            }\n        }\n        G.resize(cnt);\n        dis = vector&lt;double&gt;(cnt, INF);\n        vis = vector&lt;int&gt;(cnt);\n    }\n\n    void add_edge(int u, int uk, int v, int vk, double w) {\n        int id1 = id[uk][u];\n        int id2 = id[vk][v];\n\n        G[id1].pb({id2, w});\n    }\n\n    void dijkstra(int s) {\n        priority_queue&lt;pair&lt;double, int&gt;, vector&lt;pair&lt;double, int&gt;&gt;, greater&lt;pair&lt;double, int&gt;&gt;&gt; pq;\n        pq.push({0, id[0][s]});  // cyberland \u70ba\u8d77\u9ede\n        dis[id[0][s]] = 0;\n\n        while (pq.size()) {\n            auto [dis_u, u] = pq.top();\n            pq.pop();\n\n            if ((u % n) == (s % n) &amp;&amp; (u / n) != 0) continue;\n            if (vis[u]) continue;\n            vis[u] = 1;\n\n            for (auto [v, w] : G[u]) {\n                if ((v % n) == (s % n) &amp;&amp; (v / n) != 0) continue;\n                if (dis[v] &gt; dis[u] + w) {\n                    dis[v] = dis[u] + w;\n                    pq.push({dis[v], v});\n                }\n            }\n        }\n    }\n\n    double cal() {\n        double ans = INF;\n        for (int i = 0; i &lt; K + 1; i++) {\n            int u = id[i][0];\n            ans = min(ans, dis[u]);\n        }\n        if (ans == INF) return -1;\n\n        return ans;\n    }\n};\n\n/*\ncyberland \u4e0d\u80fd\u53bb relax \u5225\u4eba\nNode (u, k) -&gt; Node (v, k) 1/2^k\nNode (u, k) -&gt; Node (v, k) 0 if (k=K+1)\nNode (u, k) -&gt; Node (v, k+1) w * 1/2^(k+1) if arr[u]=2\nNode (u, k) -&gt; Node (u, K+1) 0 if arr[u]=0\n*/\n\ndouble solve(int N, int M, int K, int H, vector&lt;int&gt; x, vector&lt;int&gt; y, vector&lt;int&gt; c, vector&lt;int&gt; arr) {\n    K = min(K, 70);\n    vector&lt;vector&lt;pii&gt;&gt; G(N);\n    for (int i = 0; i &lt; M; i++) {\n        int u = x[i], v = y[i], w = c[i];\n        G[u].pb({v, w});\n        G[v].pb({u, w});\n    }\n    K++;\n\n    Graph g;\n    g.init(N, K);\n\n    double cnt = 1;\n    for (int k = 0; k &lt; K + 1; k++) {\n        if (k == K) {\n            for (int i = 0; i &lt; N; i++) {\n                for (auto [v, w] : G[i]) {\n                    g.add_edge(i, k, v, k, 0);\n                }\n            }\n            continue;\n        }\n        for (int i = 0; i &lt; N; i++) {\n            for (auto [v, w] : G[i]) {\n                g.add_edge(i, k, v, k, (double)w * cnt);\n            }\n        }\n        cnt *= 0.5;\n    }\n    cnt = 1;\n    for (int k = 0; k &lt; K - 1; k++) {\n        cnt *= 0.5;\n        for (int i = 0; i &lt; N; i++) {\n            for (auto [v, w] : G[i]) {\n                if (arr[i] == 2) g.add_edge(i, k, v, k + 1, (double)w * cnt);\n            }\n        }\n    }\n    for (int k = 0; k &lt; K; k++) {\n        for (int i = 0; i &lt; N; i++) {\n            if (arr[i] == 0) g.add_edge(i, k, i, K, 0);\n        }\n    }\n\n    g.dijkstra(H);\n\n    return g.cal();\n}\n\nvoid init() {\n    int n, m, k, h;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; h;\n    vector&lt;int&gt; arr(n);\n    vector&lt;int&gt; x(n);\n    vector&lt;int&gt; y(n);\n    vector&lt;int&gt; c(n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; arr[i];\n    for (int i = 0; i &lt; m; i++) cin &gt;&gt; x[i] &gt;&gt; y[i] &gt;&gt; c[i];\n\n    cout &lt;&lt; fixed &lt;&lt; setprecision(12) &lt;&lt; solve(n, m, k, h, x, y, c, arr) &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        init();\n    }\n}\n</code></pre> CSES - flight discount \u8b8a\u5316 <p>\u8f38\u5165\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684\u6709\u5411\u5716\uff0c\u6bcf\u689d\u908a\u90fd\u6709\u6b0a\u91cd \\(w(u,v)\\)\u3002\u82e5\u9023\u7e8c\u8d70\u5169\u689d\u908a \\(a\\to b\\to c\\)\uff0c\u672c\u4f86\u9700\u82b1 \\(w(a,b)+w(b,c)\\)\uff0c\u4f7f\u7528\u512a\u60e0\u5238\u53ef\u4ee5\u5c07\u82b1\u8cbb\u6539\u6210 \\(w(b,c)\\times 2\\)\uff0c\u512a\u60e0\u5238\u53ea\u80fd\u7528 \\(k\\) \u6b21\u3002\u554f \\(1\\to n\\) \u7684\u6700\u5c0f\u82b1\u8cbb</p> \u601d\u8def <p>\u628a\u5716\u8907\u88fd \\(k\\times 2\\) \u5c64\uff0c\u4e09\u5c64\u4e09\u5c64\u4e00\u7d44\uff0c\u7b2c \\(k\\) \u5c64\u82e5\u539f\u5716 \\(G\\) \u6709\u908a \\((a,b,w_{a,b}),(b,c,w_{b,c})\\) \u5c31\u9023\u63a5 \\((a_k,b_{k+1},0),(b_{k+1},c_{k+2},2\\times w_{b,c})\\)</p> <p> </p> 2021 \u9644\u4e2d\u6a21\u7af6 II \u60e1\u5730\u4e4b\u8def <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u4ee4 \\(s\\) \u5230\u7bc0\u9ede \\(i\\) \u8d70 \\(k\\) \u6b65\u7684\u6700\u77ed\u8ddd\u96e2\u662f \\(d(i,k)\\)\uff0c\u5c0d\u65bc\u6bcf\u500b \\(i\\) \u6c42 \\(\\min \\{ d(i,k) \\times k \\}\\)</p> <p>\\(n\\le 2000,m\\le 3\\times 10^4\\)</p> \u601d\u8def <p>\u6b64\u65b9\u6cd5\u4e26\u975e\u6eff\u5206\u89e3\uff0c\u6eff\u5206\u89e3\u5728\u9019\u88e1</p> <p>\u628a\u6bcf\u500b\u7bc0\u9ede\u90fd\u8907\u88fd \\(n\\) \u4efd</p> <p>\u5982\u679c\u672c\u4f86\u6709\u4e00\u689d\u908a\u662f \\((u,v)\\)\uff0c\u90a3\u5c31\u5c0d\u6240\u6709 \\(1\\le i &lt; n\\) \u84cb</p> <ul> <li>\\(u\\) \u7684\u7b2c \\(i\\) \u500b\u9ede\u5230 \\(v\\) \u7684\u7b2c \\(i+1\\) \u500b\u9ede\uff08\u6709\u5411\uff09</li> <li>\\(v\\) \u7684\u7b2c \\(i\\) \u5230 \\(u\\) \u7684\u7b2c \\(i+1\\) \u500b\u9ede\uff08\u6709\u5411\uff09</li> </ul> <p>\u9019\u6a23\u8d70\u5230\u67d0\u500b\u7bc0\u9ede\u7684\u7b2c \\(i\\) \u500b\u9ede\u7684\u8def\u5f91\u9577\u5ea6\u4e00\u5b9a\u662f \\(i-1\\)</p> <p>\\(n^2\\) \u500b\u9ede\uff0c\\(2nm\\) \u500b\u908a\u505a\u6700\u77ed\u8def\u5f91\uff0c\\(O(nm\\log\u2061 nm)\\)</p> <p>\u679a\u8209 \\(k=1\\ldots n\\)\uff0c\u5c0d\u65bc\u7b2c \\(k\\) \u5c64\u62c9\u51fa\u4f86\u6c42\u6700\u5c0f\u7684 \\(dis_k\\) </p> \\[ans = \\min\\limits_{k=1\\ldots n} \\{dis_k\\times k\\}\\] 2023 \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd pI. \u4ea4\u901a\u512a\u60e0\u5238 (voucher) <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7684\u7121\u5411\u5716\uff0c\u908a\u6709\u6b63\u6b0a\uff0c\u6709\u5169\u500b\u7279\u6b8a\u9ede a, b\uff0c\u5728\u7d93\u904e\u7279\u6b8a\u9ede\u5f8c\u53ef\u5c07\u4e4b\u5f8c\u7d93\u904e\u7684\u4e00\u689d\u908a\u514d\u8cbb\uff0c\u554f s \u5230 t \u7684\u6700\u77ed\u8def\u5f91\u9577\u5ea6</p> <p>\\(n \\le 3 \\times 10^5, m \\le 5 \\times 10^5\\)</p> \u601d\u8def <p>\u8003\u616e\u53ea\u6709\u4e00\u500b\u7279\u6b8a\u9ede\u6642\uff0c\u6709\u4e09\u7a2e\u60c5\u6cc1:</p> <ol> <li>\u9084\u6c92\u8d70\u5230\u7279\u6b8a\u9ede</li> <li>\u8d70\u5230\u7279\u6b8a\u9ede\uff0c\u9084\u6c92\u6709\u4f7f\u7528\u512a\u60e0\u5377</li> <li>\u4f7f\u7528\u5b8c\u512a\u60e0\u5377</li> </ol> <p>\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u4e09\u5f35\u5716\uff0c\u5206\u5225\u4ee3\u8868\u4ee5\u4e0a\u4e09\u7a2e case\u3002\u5c07\u7b2c\u4e00\u5f35\u5716\u7684\u7279\u6b8a\u9ede\u9023\u4e00\u689d\u908a\u5230\u7b2c\u4e8c\u5f35\u5716\u7684\u7279\u6b8a\u9ede\uff0c\u4ee3\u8868\u5df2\u7d93\u53ef\u4ee5\u4f7f\u7528\u512a\u60e0\u5238\u4e86\uff0c\u518d\u5c07\u7b2c\u4e8c\u5f35\u5716\u7684\u6bcf\u4e00\u500b\u9ede\u9023\u5230\u7b2c\u4e09\u5f35\u5716\u5468\u570d\u7684\u9ede\uff0c\u908a\u6b0a\u70ba 0\uff0c\u8d70\u904e\u53bb\u4ee3\u8868\u4f7f\u7528\u5b8c\u4e86\u512a\u60e0\u5238\u3002</p> <p>\u5c0d\u65bc\u5169\u500b\u7279\u6b8a\u9ede\u7684\u60c5\u6cc1\uff0c\u6211\u5011\u5b9a\u7fa9\u597d\u72c0\u614b (x, y) \u70ba\u7d93\u904e x \u500b\u7279\u6b8a\u9ede\uff0c\u4f7f\u7528\u6389 y \u500b\u512a\u60e0\u5377\u3002\u6211\u5011\u5c31\u7528 (0, 0), (1, 0), (1, 1), (2, 0), (2, 1), (2, 2) \u9019\u5e7e\u500b\u72c0\u614b\u4f86\u5efa\u5716\u5373\u53ef</p> CSES - flight discount <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7121\u5411\u5716\uff0c\u908a\u6709\u6b0a\u91cd\uff0c\u53ef\u5c07\u5176\u4e2d \\(k\\) \u689d\u908a\u4ee5\u534a\u50f9\u8a08\u7b97\uff0c\u6c42 \\(1\\to n\\) \u7684\u6700\u77ed\u8def</p> <p>\\(n\\le 10^5,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u539f\u672c graph \u6709 \\(n\\) \u7684\u9ede\uff0c\u8b8a\u6210\u4e00\u500b\u5716\u6709 \\(kn\\) \u500b\u9ede\u7684\u65b0 graph</p> <p>\\(\\texttt{node}(k, u)\\) \u5230 \\(\\texttt{node}(k, v)\\) \u7684\u9577\u5ea6\u5c31\u662f \\(w(u, v)\\)</p> <p>\\(\\texttt{node}(k-1, u)\\) \u5230 \\(\\texttt{node}(k, v)\\) \u7684\u9577\u5ea6\u5c31\u662f \\(w(u, v)/2\\)</p> <p>\u76f4\u63a5\u8dd1 Dijkstra\uff0c\u8d77\u9ede \\(\\texttt{node}(0, 1)\\) \u7d42\u9ede \\(\\texttt{node}(2, n)\\)</p> 2023 TOI \u4e00\u6a21 pD.\u5b89\u9038\u65c5\u884c\u8def\u7dda (jaunt) <p>\u6709\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u908a \\(u \\rightarrow v\\) \u7684\u96e3\u5ea6\u4fc2\u6578\u70ba \\(d(u, v)\\)\uff0c\u4ee3\u8868\u5982\u679c \\(u \\rightarrow v\\) \u662f\u8def\u5f91\u4e0a\u7684\u7b2c \\(k\\) \u689d\u908a\uff081-based\uff09\uff0c\u5247\u9019\u689d\u908a\u7684\u8f9b\u82e6\u7a0b\u5ea6\u662f \\(d(u, v)^k\\mod P\\)\uff0c\u4e00\u689d\u8def\u5f91\u7684\u8f9b\u82e6\u7a0b\u5ea6\u88ab\u5b9a\u7fa9\u70ba\u8def\u5f91\u4e0a\u6240\u6709\u908a\u7684\u6700\u5927\u8f9b\u82e6\u7a0b\u5ea6\u3002</p> <p>\u8f38\u51fa \\(s\\) \u5230 \\(t\\) \u7684\u6240\u6709\u8def\u5f91\u4e2d\uff0c\u6700\u5c0f\u8f9b\u82e6\u7a0b\u5ea6\u7684\u503c\uff0c\u82e5\u4e0d\u5b58\u5728\u8acb\u8f38\u51fa \\(-1\\)\u3002</p> <p>\\(n\\le 1000, m\\le 5000, P\\le 10^5\\) \u4e14 \\(P\\) \u662f\u8cea\u6578</p> \u7bc4\u6e2c sample1sample2sample3sample4 inputoutput <pre><code>3 3 11 1 3\n1 2 3\n2 3 2\n1 3 9\n</code></pre> <pre><code>4\n</code></pre> inputoutput <pre><code>3 3 11 1 3\n1 2 2\n2 1 1\n1 3 7\n</code></pre> <pre><code>2\n</code></pre> inputoutput <pre><code>3 3 11 1 3\n1 2 5\n2 1 1\n3 1 4\n</code></pre> <pre><code>-1\n</code></pre> inputoutput <pre><code>2 6 94949 1 2\n1 1 2\n1 2 12345\n1 2 23451\n1 2 34512\n1 2 45123\n1 2 51234\n</code></pre> <pre><code>1391\n</code></pre> \u601d\u8def <p>\u6839\u64da\u8cbb\u99ac\u5c0f\u5b9a\u7406\uff0c\u82e5 \\(p\\) \u662f\u8cea\u6578\uff0c\u4e14 \\(1\\leq d&lt;p\\)\uff0c\u5247 \\(d^{p-1}\\bmod p\\) \u4e00\u5b9a\u662f \\(1\\)\u3002</p> <p>\u4e5f\u5c31\u662f\u8aaa\uff0c\u9019\u4e9b\u908a\u7684\u6b0a\u91cd\u6bcf \\(p-1\\) \u6b65\u6703\u5faa\u74b0\u4e00\u6b21\u3002</p> <p>\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u4e00\u5f35\u65b0\u7684\u5716\uff0c\u7e3d\u5171\u6709 \\((p-1) \\times n\\) \u500b\u7bc0\u9ede\u3002</p> <p>node\\((k, i)\\) \u7684\u610f\u7fa9\u8868\u793a\u8d70\u5b8c\u7684\u6b65\u6578 \\(\\bmod (p-1) = k\\)\uff0c\u4e14\u505c\u5728\u539f\u5716\u7684\u7bc0\u9ede \\(i\\)\u3002 \u65b0\u7684 graph \u6703\u6709 \\((p-1) \\times m\\) \u689d\u908a\u3002</p> <p>\u82e5\u539f\u5716\u6709\u4e00\u500b\u908a \\((u, v)\\)\uff0c\u5247\u5728\u65b0\u5716\u4e2d\uff0c\u5c0d\u6240\u6709\u7684 \\(k\\) \u52a0\u4e0a node\\((k, u) \\rightarrow\\) node\\(((k+1)\\bmod (p-1), v)\\) \u7684\u908a\uff0c\u6b0a\u91cd\u662f \\(d(u, v)^{(k+1)\\bmod (p-1)}\\bmod p\\)\u3002</p> <p>\u984c\u76ee\u7684\u76ee\u6a19\u662f\u8981\u8b93\u6700\u5927\u908a\u6b0a\u6700\u5c0f\u5316\uff0c\u6240\u4ee5\u4e00\u7a2e\u65b9\u6cd5\u662f\u4e8c\u5206\u7b54\u6848 \\(X\\)\uff0c\u770b\u770b\u53ea\u8d70 \\(\\leq X\\) \u7684\u908a\u662f\u5426\u5f9e\u8d77\u9ede\u5230\u7d42\u9ede node\\((k, t)\\)\u3002</p> <p>\u53e6\u4e00\u7a2e\u65b9\u6cd5\u662f\u6bd4\u8f03\u985e\u4f3c MST \u7684 Prim \u6f14\u7b97\u6cd5\u3002</p> <p>\u5148\u628a\u8a2d\u5b9a \\(X=1\\)\uff0c\u770b\u770b\u6709\u6c92\u6709\u80fd\u8d70\u5230 node\\((k=0\\sim (p-2), t)\\) \u4efb\u610f\u4e00\u500b\u7bc0\u9ede\uff0c</p> <p>\u5982\u679c\u4e0d\u884c\u5c31\u653e\u5bec \\(X=2\\)\uff0c\u518d\u770b\u770b\u80fd\u591a\u8d70\u54ea\u4e9b\u3002</p> <p>\u5982\u679c\u4e0d\u884c\u5c31\u653e\u5bec \\(X=3\\)\uff0c\u518d\u770b\u770b\u80fd\u591a\u8d70\u54ea\u4e9b\u3002</p> <p>\u4e00\u76f4\u653e\u5bec\u5230\u53ef\u4ee5\u8d70\u5230 node\\((k=0\\sim (p-2), t)\\) \u4efb\u4e00\u500b\u7bc0\u9ede\u3002</p> <p>\u9019\u984c\u7684\u908a\u6b0a\u91cd\u6703\u4ecb\u65bc \\([0, p-1]\\)\uff0c\u6240\u4ee5 priority_queue \u53ef\u4ee5\u7528\u958b \\(p-1\\) \u500b vector \u7684\u65b9\u5f0f\u4f86\u5be6\u4f5c\uff0c\u8b93 push / pop \u6642\u9593\u53ea\u8981 \\(O(1)\\)\u3002</p> <p>\u6574\u500b\u5716\u7684\u908a\u6578\u91cf\u6709 \\((p-1) \\times m\\)\uff0c\u7e3d\u6642\u9593\u8907\u96dc\u5ea6\u4e5f\u662f \\((p-1) \\times m\\)\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e3 + 5;\nconst int M = 1e9 + 7;\n\nstruct node {\n    int u, k, dis;\n};\n\nstruct DS {\n    vector&lt;vector&lt;node&gt;&gt; pq;\n    int max_val = 0, threshold = 0;\n\n    void init(int _max_val) {\n        max_val = _max_val;\n        pq = vector&lt;vector&lt;node&gt;&gt; (max_val + 1);\n    }\n\n    void push(node x) {\n        pq[max (threshold, x.dis)].pb(x);\n    }\n\n    node get_value() {\n        while (threshold &lt;= max_val &amp;&amp; pq[threshold].size() == 0) threshold++;\n\n        if (threshold &lt;= max_val &amp;&amp; pq[threshold].size() &gt; 0) {\n            node ret = pq[threshold].back();\n            pq[threshold].pop_back();\n            return ret;\n        }\n        else return {-1, -1, -1};\n    }\n} pq;\n\nint n, m, P, s, t;\nvector&lt;pii&gt; G[maxn];\nint vis[maxn][maxn];\n\nint fpow(int a, int b, int p) {\n    int ret = 1;\n    while (b != 0) {\n        if (b &amp; 1) ret = (ret * a) % p;\n        a = (a * a) % p;\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nint Prim() {\n    pq.init(P - 1);\n    // k = [0, p - 2] k = 0 \u70ba\u958b\u59cb\u90a3\u5c64\n    pq.push({s, 0, 0});\n    int fg = 0;\n    while (true) {\n        auto [u, k, dis] = pq.get_value();\n        if (u == -1) break;\n        if (vis[u][k] == 1) continue;\n        vis[u][k] = 1;\n        if (u == t) {\n            fg = 1;\n            break;\n        }\n        for (auto [v, w] : G[u]) {\n            int vk = (k + 1) % (P - 1);\n            int wk = fpow(w, (k + 1) % (P - 1), P);\n\n            pq.push({v, vk, wk});\n        }\n    }\n    if (fg == 1) return pq.threshold;\n    return -1;\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; P &gt;&gt; s &gt;&gt; t;\n    int u, v, w;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        G[u].pb({v, w});\n    }\n}\n\nvoid work() {\n    cout &lt;&lt; Prim() &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n} \n</code></pre> CF 1422 D. Returning Home <p>\u5728 \\(n\\times n\\) \u7684 grid \u4e0a\uff0c\u7d66\u8d77\u9ede\u7d42\u9ede\uff0c\u9084\u6709 \\(m\\) \u500b\u7279\u6b8a\u9ede\uff0c\u6bcf\u79d2\u53ef\u4ee5\u4e0a\u4e0b\u5de6\u53f3\u8d70\u4e00\u683c\uff0c\u53ea\u8981\u8207\u7279\u6b8a\u9ede\u540c\u4e00\u500b row \u6216 col\uff0c\u53ef\u4ee5\u4e0d\u82b1\u6642\u9593\u76f4\u63a5\u50b3\u9001\u5230\u7279\u6b8a\u9ede\uff0c\u554f\u5230\u9054\u7d42\u9ede\u7684\u6700\u5c11\u6642\u9593</p> <p>\\(n\\le 10^9,m\\le 10^5\\)</p> \u63d0\u793a <p>grid \u7684\u6027\u8cea : \u5169\u9ede\u9593\u7684\u8ddd\u96e2\u70ba\u66fc\u54c8\u9813\u8ddd\u96e2</p> \u601d\u8def <p>\u628a\u7279\u6b8a\u9ede\u6240\u5728\u7684\u884c\u548c\u5217\u7576\u4f5c\u9ede</p> <ol> <li>\u7279\u6b8a\u9ede\u5411\u5b83\u5011\u6240\u5728\u7684\u884c\u548c\u5217\u9023\u96d9\u5411\u908a\uff0c\u82b1\u8cbb\u90fd\u70ba 0</li> <li>\u8d77\u9ede\u5411\u5b83\u6240\u5728\u7684\u884c\u5217\u9023\u908a\uff0c\u82b1\u8cbb\u90fd\u70ba 0</li> <li>\u7d42\u9ede\u8ddf\u6240\u6709\u7279\u6b8a\u9ede\u9023\u908a\uff0c\u908a\u6b0a\u70ba\u66fc\u54c8\u9813\u8ddd\u96e2</li> <li>\u51fa\u73fe\u7684\u884c\u4e4b\u9593\u9023\u96d9\u5411\u908a\uff0c\u82b1\u8cbb\u70ba\u5169\u884c\u4e4b\u9593\u7684\u8ddd\u96e2</li> <li>\u51fa\u73fe\u7684\u5217\u4e4b\u9593\u9023\u96d9\u5411\u908a\uff0c\u82b1\u8cbb\u70ba\u5169\u5217\u4e4b\u9593\u7684\u8ddd\u96e2</li> <li>\u8d77\u9ede\u8207\u7d42\u9ede\u9023\u908a\uff0c\u908a\u6b0a\u70ba\u66fc\u54c8\u9813\u8ddd\u96e2</li> </ol> <p>\u6700\u5f8c\u7684\u7b54\u6848\u8a18\u5f97\u8ddf\u8d77\u9ede\u76f4\u63a5\u5230\u7d42\u9ede\u7684\u7b54\u6848\u53d6 min</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Graph {\n    vector&lt;vector&lt;pii&gt;&gt; G;\n    int n = 0;\n\n    int add_node() {\n        n++;\n        G.pb({});\n        return n - 1;\n    }\n\n    void add_edge(int u, int v, int w) {\n        G[u].pb({v, w});\n    }\n\n    int dijkstra(int s, int t) {\n        vector&lt;int&gt; dis(n, INF);\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        pq.push({0, s});\n        dis[s] = 0;\n\n        while (pq.size()) {\n            auto [dis_u, u] = pq.top();\n            pq.pop();\n            if (dis[u] &lt; dis_u) continue;\n            dis[u] = dis_u;\n\n            for (auto [v, w] : G[u]) {\n                if (dis[v] &gt; dis[u] + w) {\n                    dis[v] = dis[u] + w;\n                    pq.push({dis[v], v});\n                }\n            }\n        }\n        return dis[t];\n    }\n};\n\n/*\n1. \u7279\u6b8a\u9ede\u5411\u5b83\u5011\u6240\u5728\u7684\u884c\u548c\u5217\u9023\u96d9\u5411\u908a\uff0c\u82b1\u8cbb\u90fd\u70ba 0\n2. \u8d77\u9ede\u8207\u7d42\u9ede\u5411\u5b83\u6240\u5728\u7684\u884c\u5217\u9023\u908a\n3. \u51fa\u73fe\u7684\u884c\u4e4b\u9593\u9023\u96d9\u5411\u908a\uff0c\u82b1\u8cbb\u70ba\u5169\u884c\u4e4b\u9593\u7684\u8ddd\u96e2\n4. \u51fa\u73fe\u7684\u5217\u4e4b\u9593\u9023\u96d9\u5411\u908a\uff0c\u82b1\u8cbb\u70ba\u5169\u5217\u4e4b\u9593\u7684\u8ddd\u96e2\n5. \u8d77\u9ede\u8207\u7d42\u9ede\u9023\u908a\uff0c\u908a\u6b0a\u70ba |x_s - x_t| + |y_s - y_t|\n*/\nint n, m;\npii s, t;\nvector&lt;pii&gt; special;\nvector&lt;int&gt; X, Y;\nint id_X[maxn], id_Y[maxn], id_Special[maxn];\nint id_start, id_end;\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    cin &gt;&gt; s.F &gt;&gt; s.S &gt;&gt; t.F &gt;&gt; t.S;\n\n    for (int i = 0; i &lt; m; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        special.pb({x, y});\n        X.pb(x);\n        Y.pb(y);\n    }\n    X.pb(s.F);\n    X.pb(t.F);\n    Y.pb(s.S);\n    Y.pb(t.S);\n}\n\nvoid work() {\n    Graph g;\n    sort(ALL(X));\n    X.resize(unique(ALL(X)) - X.begin());\n    sort(ALL(Y));\n    Y.resize(unique(ALL(Y)) - Y.begin());\n\n    for (int i = 0; i &lt; m; i++) {\n        id_Special[i] = g.add_node();\n    }\n\n    map&lt;int, int&gt; mpx, mpy;\n\n    for (int i = 0; i &lt; X.size(); i++) {\n        id_X[i] = g.add_node();\n        mpx[X[i]] = id_X[i];\n    }\n\n    for (int i = 0; i &lt; Y.size(); i++) {\n        id_Y[i] = g.add_node();\n        mpy[Y[i]] = id_Y[i];\n    }\n    id_start = g.add_node();\n    id_end = g.add_node();\n\n    for (int i = 0; i &lt; m; i++) {\n        g.add_edge(id_Special[i], mpx[special[i].F], 0);\n        g.add_edge(mpx[special[i].F], id_Special[i], 0);\n    }\n\n    for (int i = 0; i &lt; m; i++) {\n        g.add_edge(id_Special[i], mpy[special[i].S], 0);\n        g.add_edge(mpy[special[i].S], id_Special[i], 0);\n    }\n\n    for (int i = 0; i &lt; X.size(); i++) {\n        if (i &gt; 0) {\n            g.add_edge(id_X[i], id_X[i - 1], X[i] - X[i - 1]);\n            g.add_edge(id_X[i - 1], id_X[i], X[i] - X[i - 1]);\n        }\n    }\n\n    for (int i = 0; i &lt; Y.size(); i++) {\n        if (i &gt; 0) {\n            g.add_edge(id_Y[i], id_Y[i - 1], Y[i] - Y[i - 1]);\n            g.add_edge(id_Y[i - 1], id_Y[i], Y[i] - Y[i - 1]);\n        }\n    }\n\n    g.add_edge(id_start, mpx[s.F], 0);\n    g.add_edge(id_start, mpy[s.S], 0);\n\n    for (int i = 0; i &lt; m; i++) {\n        int cost = abs(special[i].F - t.F) + abs(special[i].S - t.S);\n        g.add_edge(id_Special[i], id_end, cost);\n    }\n\n    g.add_edge(id_start, id_end, abs(s.F - t.F) + abs(s.S - t.S));\n\n    cout &lt;&lt; g.dijkstra(id_start, id_end) &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n}\n</code></pre> CF 1846 G. Rudolf and CodeVid-23 <p>\u4ee5\u4e0b\u63d0\u5230\u7684 \\(01\\) bit-string \u9577\u5ea6\u7686\u70ba \\(n\\)\u3002\u7d66\u4e00\u500b \\(01\\) bit-string\uff0c\u4ee3\u8868\u76ee\u524d\u6709\u7684\u75c7\u72c0\uff0c\u6709 \\(m\\) \u500b\u85e5\u53ef\u4ee5\u4f7f\u7528\uff0c\u6bcf\u500b\u85e5\u6709\u7de9\u89e3\u7684 \\(01\\) bit-string \\(a_i\\)\uff0c\u8207\u526f\u4f5c\u7528 \\(01\\) bit-string \\(b_i\\)\uff0c\u8207\u82b1\u8cbb \\(d_i\\)\u3002\u6bcf\u7a2e\u85e5\u5403\u5b8c\u5373\u6d88\u5931\u3002\u554f\u6700\u5c11\u82b1\u8cbb\u4f7f\u6240\u6709\u75c7\u72c0\u6d88\u5931</p> <p>\\(n\\le 10,m\\le 1000\\)</p> \u601d\u8def <p>\u9019\u984c\u7684\u95dc\u9375\u662f\u80fd\u4e0d\u80fd\u60f3\u51fa\u53ef\u4ee5\u7528\u5716\u8ad6\u7684\u89c0\u9ede\u770b\u3002</p> <p>\u5c07\u6bcf\u7a2e \\(01\\) bit-string \u7684\u72c0\u614b\u770b\u6210\u4e00\u500b\u9ede\uff0c\u4f9d\u7167\u984c\u610f\u5c07\u72c0\u614b\u4e4b\u9593\u9023\u6709\u5411\u908a\uff0c\u908a\u6b0a\u70ba \\(d_i\\)\uff0c\u7b54\u6848\u5c31\u662f\u5f9e\u4e00\u958b\u59cb\u7684 \\(01\\) bit-string \u5230 \\(0\\) \u7684\u6700\u77ed\u8def</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;long long, long long&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct data {\n    int a, b, d;\n} a[maxn];\n\nstruct Graph {\n    vector&lt;vector&lt;pii&gt;&gt; G;\n    int n = 0;\n\n    int add_node() {\n        n++;\n        G.pb ({});\n        return n - 1;\n    }\n\n    void add_edge(int u, int v, int w) {\n        G[u].pb({v, w});\n    }\n\n    int dijkstra(int s, int t) {\n        vector&lt;int&gt; dis (n, INF);\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        pq.push ({0, s});\n        dis[s] = 0;\n\n        while (pq.size ()) {\n            auto [dis_u, u] = pq.top(); pq.pop();\n            if (dis[u] &lt; dis_u) continue;\n            dis[u] = dis_u;\n\n            for (auto [v, w] : G[u]) {\n                if (dis[v] &gt; dis[u] + w) {\n                    dis[v] = dis[u] + w;\n                    pq.push ({dis[v], v});\n                }\n            } \n        }\n        if (dis[t] == INF) return -1;\n        return dis[t];\n    }\n    void clear() {\n        for (int i = 0; i &lt; n; i++) {\n            G[i].clear();\n        }\n    }\n} g;\n\nint n, m;\nint now;\nint id[(1 &lt;&lt; 20)];\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    string s;\n    cin &gt;&gt; s;\n    now = 0;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        now += (s[i] - '0') * (1 &lt;&lt; i);\n    }\n    for (int t = 0; t &lt; m; t++) {\n        cin &gt;&gt; a[t].d;\n        string s1, s2;\n        cin &gt;&gt; s1 &gt;&gt; s2;\n        a[t].a = 0, a[t].b = 0;\n        for (int i = n - 1; i &gt;= 0; i--) {\n            a[t].a += (s1[i] - '0') * (1 &lt;&lt; i);\n        }\n        for (int i = n - 1; i &gt;= 0; i--) {\n            a[t].b += (s2[i] - '0') * (1 &lt;&lt; i);\n        }\n    }\n}\n\nvoid solve() {\n    for (int mask = 0; mask &lt; (1 &lt;&lt; n); mask++) {\n        for (int i = 0; i &lt; m; i++) {\n            int S = mask &amp; (((1 &lt;&lt; 20) - 1) ^ a[i].a);\n            S |= a[i].b;\n            g.add_edge(id[mask], id[S], a[i].d);\n        }\n    } \n    int ans = g.dijkstra(id[now], id[0]);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nsigned main() {\n    for (int mask = 0; mask &lt; (1 &lt;&lt; 20); mask++) {\n        id[mask] = g.add_node();\n    } \n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        g.clear();\n        init();\n        solve();\n    }\n} \n</code></pre>"},{"location":"graph/sp/#_3","title":"\u5efa\u7acb\u865b\u9ede","text":"JOI 2021 Final - Robot <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u908a\u6709\u984f\u8272 \\(c_i\\) \u8207\u6b0a\u503c \\(w_i\\)\uff0c\u6bcf\u689d\u908a\u53ef\u82b1 \\(P_i\\) \u8b8a\u984f\u8272\uff08\u53ea\u9650\u8b8a\u4e00\u6b21\uff09\u3002\u60f3\u5f9e \\(u\\) \u8d70\u5230 \\(v\\) \u82e5\u4e14\u552f\u82e5 \\(u\\) \u7684\u9130\u908a\u53ea\u6709 \\(u\\rightarrow v\\) \u6709\u8a72\u7a2e\u984f\u8272\u3002\u554f\u5f9e \\(1\\) \u8d70\u5230 \\(n\\) \u7684\u6700\u5c0f\u82b1\u8cbb\u3002</p> <p>\\(n\\le 10^5,m\\le 2\\times 10^5, 1\\le c_i\\le m, 1\\le w_i\\le 10^9\\)</p> \u7bc4\u4f8b <p> </p> \u601d\u8def <p>\u4ee4\u4e00\u500b\u9ede u \u4ed6\u5468\u570d\u984f\u8272\u70ba c \u7684 w \u7e3d\u548c\u70ba \\(S_{u,c}\\)\u3002\u6211\u5011\u9996\u5148\u53ef\u4ee5\u60f3\u5230\uff0c\u5c0d\u65bc u \u8d70\u5230 v\uff0c\u82e5 (u, v) \u7684\u984f\u8272 distinct\uff0c\u90a3\u6211\u5011\u7684\u82b1\u8cbb\u5c31\u662f 0\uff1b\u5426\u5247\uff0c\u6211\u5011\u6709\u5169\u7a2e\u65b9\u6cd5:</p> <ol> <li> <p>\u6539\u8b8a (u, v) \u672c\u8eab\u7684\u984f\u8272\uff0c\u82b1\u8cbb\u70ba \\(w\\)</p> </li> <li> <p>\u6539\u8b8a\u8ddf (u, v) \u540c\u8272\u7684\u908a\uff0c\u82b1\u8cbb\u70ba \\(S_{u,c}-w\\)</p> </li> </ol> <p>\u9019\u6a23\u5c31\u7d50\u675f\u4e86\u55ce\uff0c\u4e0d\u76e1\u5982\u6b64\u3002\u6211\u5011\u767c\u73fe\u7576\u8d70\u4e86 A \u5230 B \u5230 C\uff0c\u6eff\u8db3 (A, B) \u8207 (B, C) \u7684\u984f\u8272\u7686\u76f8\u540c\uff0c\u4e14 (A, B) \u662f\u8d70 case 1\uff0c\u800c (B, C) \u662f\u8d70 case 2\uff0c\u90a3\u6211\u5011\u4e2d\u9593\u7684\u908a\u6703\u91cd\u8907\u7b97\u3002</p> <p> </p> <p>\u4ee5\u4e0a\u5716\u4f86\u8aaa\uff0c\u7b2c\u4e00\u6b21\u4ee5 A \u70ba\u4e2d\u5fc3\uff0c\u5c0d (A, B) \u7528 case1 \u7b97\u4e86 w(A, B)\uff1b\u800c\u7b2c\u4e8c\u6b21\u4ee5 B \u70ba\u4e2d\u5fc3\uff0c\u5c0d (B, C) \u7528 case2 \u7b97\u4e86 w(B, H) + w(B, G) + w(A, B)\u3002\u767c\u73fe\u5230 w(A, B) \u88ab\u91cd\u8907\u7b97\u5169\u6b21\u3002 </p> <p>\u89e3\u6c7a\u7684\u65b9\u6cd5\uff0c\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u5e6b\u6bcf\u500b\u9ede\u7684\u6bcf\u500b\u984f\u8272\u90fd\u5efa\u7acb\u865b\u9ede\uff0c\u5047\u8a2d\u4eca\u5929\u662f \\(B\\) \u9ede\u7684\u865b\u9ede \\(B_{c}\\)\uff0c\u5c31\u76f4\u63a5\u5c07 \\(A \\to B_c\\) \u7684\u6b0a\u91cd\u8a2d\u70ba 0\uff0c\u800c \\(B_c \\to C\\) \u7684\u6b0a\u91cd\u8a2d\u70ba \\(S_{B, c} - w(B, C)\\)\u3002</p> <p> </p> <p>Q1: \u5c0d\u65bc case1\uff0c\u70ba\u4f55\u4e00\u5b9a\u627e\u7684\u5230\u4e00\u7a2e\u984f\u8272\u4f86\u63db?</p> <p>A1: \u56e0\u70ba\u908a\u6700\u591a\u53ea\u6709 m \u689d\uff0c\u800c\u984f\u8272\u6709 m \u7a2e\uff0c\u4e0d\u7ba1\u600e\u9ebc\u6a23\u81f3\u5c11\u4e00\u5b9a\u6709\u4e00\u7a2e\u984f\u8272\u6c92\u88ab\u6311\u5230\u3002</p> <p>Q2: \u6703\u4e0d\u6703\u5728\u9032\u884c case2 \u6642\uff0c\u5c07\u67d0\u689d\u908a e \u63db\u6389\u4e86\u6211\u5011\u7b49\u7b49\u8981\u7528\u7684\u984f\u8272\u5f8c\uff0c\u7b49\u7b49\u9700\u8981\u7528\u5230 e \u6642\uff0c\u6240\u6536\u5230\u7684\u984f\u8272\u662f\u932f\u8aa4\u7684?</p> <p>A2: \u4e0d\u6703\uff0c\u5982\u679c\u5f85\u6703\u9084\u8981\u7528\u5230\uff0c\u90a3\u4e0d\u5982\u5728\u76ee\u524d\u9019\u4e00\u6b65\u76f4\u63a5\u7528 case1 \u8d70 e \u5c31\u597d\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define ALL(v) begin(v), end(v)\n#define All(v, l, r) &amp;v[l], &amp;v[(r) + 1]\nusing i64 = int64_t;\nusing db = double;\nusing std::cin;\nusing std::cout;\nconstexpr int N = 1e5 + 5, M = 5e5 + 5;\nconstexpr i64 inf = 1e18;\n\nint n, m, vt;\nstd::array&lt;std::map&lt;int, std::vector&lt;std::pair&lt;int, i64&gt; &gt; &gt;, N&gt; vec;\nstd::array&lt;std::map&lt;int, i64&gt;, N&gt; sum;\nstd::array&lt;std::vector&lt;std::pair&lt;int, i64&gt; &gt;, M&gt; G;\n\nnamespace Dij {\nstd::array&lt;i64, M&gt; dis;\nstd::array&lt;bool, M&gt; vis;\nstd::priority_queue&lt;std::pair&lt;i64, int&gt;, std::vector&lt;std::pair&lt;i64, int&gt; &gt;, std::greater&lt;std::pair&lt;i64, int&gt; &gt; &gt; q;\n\nauto dij(int s) {\n    std::fill(All(dis, 1, vt), inf);\n    q.emplace(0, s), dis[s] = 0;\n\n    while (!q.empty()) {\n        auto u = q.top().second;\n        q.pop();\n        if (vis[u]) continue;\n        vis[u] = 1;\n        for (auto [v, w] : G[u]) {\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                if (!vis[v]) q.emplace(dis[v], v);\n            }\n        }\n    }\n    return (dis[n] == inf ? -1 : dis[n]);\n}\n}\n\nauto main() -&gt; int {\n    std::ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n\n    cin &gt;&gt; n &gt;&gt; m, vt = n;\n    for (auto i = 1, u = 0, v = 0, w = 0, c = 0; i &lt;= m; ++i) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; c &gt;&gt; w;\n        vec[u][c].emplace_back(v, w), vec[v][c].emplace_back(u, w);\n        sum[u][c] += w, sum[v][c] += w;\n    }\n    for (auto u = 1; u &lt;= n; ++u) {\n        for (auto [c, cur] : vec[u]) {\n            auto s = sum[u][c];\n            vt++;\n            for (auto [v, w] : cur) {\n                if (cur.size() == 1)\n                    G[u].emplace_back(v, 0);\n                else\n                    G[u].emplace_back(v, std::min(w, s - w));\n                G[v].emplace_back(vt, 0), G[vt].emplace_back(v, s - w);\n            }\n        }\n    }\n\n    cout &lt;&lt; Dij::dij(1) &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre> USACO Gold 2021 January - Telephone <p>\u7d66 \\(n\\) \u8ddf\u4e00\u500b \\(k\\times k\\) \u7684 matrix \\(S\\)\uff0c\u6bcf\u500b\u9ede\u6709\u4e00\u500b\u6b0a\u503c \\(b_i\\)\u3002\\(i\\) \u80fd\u8d70\u5230 \\(j\\) \u7576\u4e14\u50c5\u7576 \\(S_{b[i],b[j]}=1\\)\uff0c\u82b1\u8cbb \\(\\text{cost}=|i-j|\\)\u3002\u6c42\u5f9e \\(1\\rightarrow n\\) \u6700\u5c11\u8981\u591a\u5c11 \\(\\text{cost}\\)</p> <p>\\(n\\le 5\\times 10^4,k\\le 50,1\\le b_i\\le k\\)</p> \u601d\u8def <p>\u3010\u89c0\u5bdf\u3011:</p> <p>\u986f\u7136 \\(O(n^2)\\) \u7684\u8907\u96dc\u5ea6\u6211\u5011\u7121\u6cd5\u63a5\u53d7\uff0c\u8003\u616e\u5230 k \u53ea\u6709 50\uff0c\u6211\u5011\u5f9e\u9019\u88e1\u4e0b\u624b\u3002\u89c0\u5bdf\u5230 \\(\\text{cost}=|i-j|\\rightarrow\\) \u53ef\u4ee5\u60f3\u6210\u6bcf\u6b21\u90fd\u79fb\u52d5 \\(1\\) \u683c\uff0c\u4e5f\u5c31\u662f \u5f9e \\(i\\rightarrow i+1 \\texttt{ or } i-1\\)\u3002</p> <p>\u4e00\u500b\u9ede i \u8981\u8d70\u5230 j\uff0c\u6211\u5011\u53ea\u9700\u8981\u53bb\u770b\u4ed6\u7684 b[i] \u8207 b[j] \u5373\u53ef\uff0c\u512a\u9ede\u662f\u4ed6\u5011\u7684\u7bc4\u570d\u5728 [1, k]\u3002</p> <p>\u3010\u4f5c\u6cd5: \u5206\u5c64\u5716\u3011:</p> <p>\u4f9d\u7167\u7bc4\u570d\uff0c\u6211\u5011\u731c\u5230\u5927\u6982\u662f\u8981\u5efa\u4e00\u500b \\(O(nk)\\) \u7684\u5206\u5c64\u5716\u3002\u6211\u5011\u60f3\u4e00\u4e0b node(u, b) \u6703\u4ee3\u8868\u7684\u662f\u4ec0\u9ebc\uff0cu \u4e00\u5b9a\u662f\u7576\u524d\u7684\u9ede\uff0c\u800c b \u6211\u5011\u4f9d\u7167\u4e0a\u9762\u7684\u89c0\u5bdf\u53ef\u4ee5\u5f97\u77e5\u5c31\u662f\u4e0a\u4e00\u500b\u9ede\u7684 b[i]\u3002\u5177\u9ad4\u4f86\u8aaa\uff0cu \u4ee3\u8868\u76ee\u524d\u7684\u4f4d\u7f6e\uff08\u4e0d\u662f\u771f\u6b63\u5728 u\uff0c\u800c\u662f\u76ee\u524d\u7684 cost \u589e\u52a0\u6216\u6e1b\u5230 u\uff09\uff0cb \u4ee3\u8868\u5f9e\u4e0a\u500b\u771f\u6b63\u9ede\u7684 \\(b_i\\)\u3002\u8f49\u79fb\u5982\u4e0b:</p> <p>node(u, b) = \\(\\begin{cases} \\texttt{node(u + 1, b)}+1 \\\\ \\texttt{node(u - 1, b)}+1 \\\\ \\texttt{node(u, b[u])}+0 \\end{cases}\\)</p> <p>\u5176\u4e2d node (u, b) -&gt; node (u, b[u]) \u4ee3\u8868\u7684\u662f\u5f9e\u865b\u9ede\u8d70\u5230\u771f\u6b63 u \u7684\u9ede\u3002\u6211\u5011\u5c31\u53ef\u4ee5\u505a dijkstra \u4e86\u3002</p> LOJ #2335. \u300cJOI 2017 Final\u300d\u8db3\u7403 <p>\u6709 \\(n\\) \u500b\u7403\u54e1\u7ad9\u5728 Grid \u4e0a\u6c42\u7403\u5f9e \\(a_1\\) \u8e22\u5230 \\(a_n\\) \u7684\u6700\u5c0f \\(cost\\)</p> <ul> <li> <p>\u7403\u54e1\u8e22\u7403(\u4e0a\u4e0b\u5de6\u53f3) \\(A\\times p + B\\)</p> </li> <li> <p>\u7403\u54e1\u79fb\u52d5(\u4e0a\u4e0b\u5de6\u53f3) \\(cost=C\\)</p> </li> <li> <p>\u653e\u4e0b\u7403 \\(cost=0\\)</p> </li> <li> <p>\u62ff\u8d77\u7403 \\(cost = 0\\)</p> </li> </ul> \u601d\u8def <ul> <li> <p>\\(0,1,2,3\\) \u4e0a\u4e0b\u5de6\u53f3 (\u81ea\u98db)</p> </li> <li> <p>\\(4\\) \u505c\u6b62 (\u81ea\u98db)</p> </li> <li> <p>\\(5\\) \u5e36\u98db (\u5f80 random direction)</p> </li> </ul> <ul> <li> <p>\u81ea\u98db\u7684\u7403</p> <ul> <li>\u7e7c\u7e8c\u79fb\u52d5 \\(0,1,2,3\\rightarrow 0,1,2,3 :A\\) \u5f80\u81ea\u5df1\u7684\u65b9\u5411 </li> <li>\u88ab\u7403\u54e1\u64bf\u5230 \\(4\\rightarrow 5: dis_{i,j}\\times C\\) <ul> <li>\\(dis_{i,j}\\) \u70ba\u6700\u8fd1\u7684\u7403\u54e1\u5230 \\((i,j)\\) \u7684\u8ddd\u96e2</li> </ul> </li> <li>\u505c\u4e0b\u4f86  \\(0,1,2,3\\rightarrow 4:0\\) </li> </ul> </li> <li> <p>\u5e36\u98db\u7684\u7403</p> <ul> <li>\u7e7c\u7e8c\u8ddf\u8457\u7403\u54e1\u8d70 \\(5 \\rightarrow 5:C\\)  \u56db\u500b\u65b9\u5411</li> <li>\u88ab\u7403\u54e1\u8e22\u51fa\u53bb \\(5 \\rightarrow 0,1,2,3:B\\) </li> <li>\u505c\u4e0b\u4f86 \u505c\u4e0b\u4f86\uff0c\u64bf\u8d77\u4f86\uff0c\u6d6a\u8cbb\u6642\u9593</li> </ul> </li> </ul> CF 1860 E. Fast Travel Text Editor <p>\u7d66\u4e00\u500b\u5b57\u4e32 S\uff0c\u6bcf\u500b\u76f8\u9130\u5169\u500b\u5b57\u6bcd\u53eb\u4e00\u500b\u4f4d\u7f6e\uff0c\u6709 q \u7b46\u8a62\u554f\u5f9e\u4f4d\u7f6e s \u2192 t \u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6578\u662f\u591a\u5c11\u3002\u4e00\u6b21\u64cd\u4f5c\u53ef\u57f7\u884c\u4ee5\u4e0b\u4e09\u500b\u9078\u9805\u4e4b\u4e00\uff1a</p> <ul> <li> <p>\u5f80\u5de6\u79fb\u4e00\u683c</p> </li> <li> <p>\u5f80\u53f3\u79fb\u4e00\u683c</p> </li> <li> <p>\u50b3\u9001\u5230\u540c\u6a23\u7684\u76f8\u9130\u5169\u500b\u5b57\u6bcd\u540c\u6a23\u7684\u4f4d\u7f6e</p> </li> </ul> <p>\\(2\\le |S|\\le 5\\times 10^4,1\\le q\\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u89c0\u5bdf : \u76f8\u9130\u5b57\u4e32\u7684\u7d44\u5408\u53ea\u6709 26 * 26 \u7a2e\uff0c\u53ef\u4ee5\u5efa\u5716\u505a dijkstra</p> <p>\u8003\u616e\u5efa\u908a\uff0c\u5c0d\u65bc\u4e00\u500b\u4f4d\u7f6e\uff0c\u4ed6\u53ef\u4ee5 :</p> <ul> <li> <p>\u50b3\u9001\u5230\u76f8\u540c\u7684\u5b57\u4e32\uff0ccost = 1</p> </li> <li> <p>\u5f80\u5de6\u8d70\u6216\u5f80\u53f3\u8d70\uff0ccost = 1</p> </li> </ul> <p>\u56e0\u70ba\u5728\u76f8\u540c\u7684\u5b57\u4e32\u4e4b\u9593\u5efa\u5b8c\u5168\u5716\u592a\u8cbb\u6642\u4e86\uff0c\u6211\u5011\u8003\u616e\u5c0d\u65bc\u6bcf\u7a2e\u5b57\u4e32\u7d44\u5408\u90fd\u5efa\u4e00\u500b\u865b\u9ede\uff0c\u5206\u5225\u8207\u540c\u7a2e\u5b57\u4e32\u7d44\u5408\u7684 node \u9023\u908a\u3002\u8003\u616e\u908a\u6b0a\uff0c\u7576\u5f9e\u4e00\u500b index \\(i\\) \u8d70\u5230\u865b\u9ede\u518d\u8d70\u5230 index \\(j\\) \u6703\u82b1 cost = 1 \u5f88\u96e3\u5be6\u4f5c\uff0c\u6211\u5011\u4e0d\u5982\u5c07\u8207\u865b\u9ede\u9023\u63a5\u7684\u908a\u6b0a\u90fd\u8a2d\u70ba 1\uff0c\u6700\u5f8c\u7b54\u6848\u518d\u9664\u4ee5 2 \u5c31\u597d\u4e86\uff0c\u9019\u9ebc\u505a\u7684\u8a71\u5f80\u5de6\u8d70\u6216\u5f80\u53f3\u8d70\u7684\u908a\u6b0a\u4e5f\u8981\u8a2d\u70ba 2\u3002</p> <p> </p> <p>\u8003\u616e query \u7684\u90e8\u5206\uff0c\u6bcf\u6b21\u91cd\u8dd1\u4e00\u6b21 dijkstra \u6703\u592a\u4e45\uff0c\u6211\u5011\u53ef\u4ee5\u5206\u6210\u5169\u7a2e case\uff0c\u6709\u81f3\u5c11\u505a\u4e00\u6b21\u50b3\u9001\u8207\u5b8c\u5168\u6c92\u505a\u50b3\u9001\u3002</p> <p>\u6709\u505a\u4e00\u6b21\u50b3\u9001\u6211\u5011\u5c31\u53ef\u4ee5\u679a\u8209\u6709\u505a\u50b3\u9001\u7684\u865b\u9ede\uff0c\u7b54\u6848\u5c31\u662f dis(s \u2192 \u865b\u9ede) + dis(\u865b\u9ede \u2192 t) \u518d\u9664\u4ee5 2\u3002\uff08\u56e0\u70ba\u4e00\u5b9a\u53ea\u80fd\u900f\u904e\u76f8\u540c\u5b57\u4e32\u7d44\u5408\u7684\u9ede\u9032\u53bb\u865b\u9ede\uff0c\u6240\u4ee5\u53ef\u4ee5\u4fdd\u6574\u6709\u7d93\u904e\u5169\u6b21\uff09\u3002\u5230\u865b\u9ede\u7684\u90e8\u5206\u53ef\u4ee5\u9810\u8655\u7406\u6240\u6709\u865b\u9ede\u7576\u8d77\u9ede\u7684 dijkstra\u3002</p> <p>\u5b8c\u5168\u6c92\u505a\u7684\u90e8\u5206\u5c31\u76f4\u63a5\u7b97 index s \u8ddf index t \u7684\u8ddd\u96e2\u5c31\u597d\u4e86</p> <p>\u985e\u4f3c\u984c : https://codeforces.com/contest/1301/problem/F</p> code(from abc) <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define ll long long\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define pii pair&lt;int, int&gt;\nconst int mod = 998244353, N = 6e4, M = 26 * 26;\n\nint dis[M][N];\nvector &lt;pii&gt; adj[N];\n\nvoid build(int s, int id) {\n    fill(dis[id], dis[id] + N, N);\n    queue &lt;int&gt; q;\n    dis[id][s] = 0;\n    q.push(s);\n    while (!q.empty()) {\n        int v = q.front(); q.pop();\n        for (auto [u, w] : adj[v]) if (dis[id][u] &gt; dis[id][v] + w) {\n            dis[id][u] = dis[id][v] + w;\n            q.push(u);\n        }\n    }\n}\n\nvoid solve() {\n    string s;\n    cin &gt;&gt; s;\n    int n = s.length();\n    for (int i = 0; i &lt; n - 1; ++i) {\n        int x = (s[i] - 'a') * 26 + (s[i + 1] - 'a') + n; // \u865b\u9ede\n        adj[i].emplace_back(x, 1), adj[x].emplace_back(i, 1);\n    }\n    for (int i = 0; i + 2 &lt; n; ++i) { // \u76f8\u9130\u7684\u5efa\u908a\n        adj[i].emplace_back(i + 1, 2), adj[i + 1].emplace_back(i, 2);\n    }\n    for (int i = 0; i &lt; M; ++i) { // \u9810\u8655\u7406\n        build(i + n, i);\n    }\n    int q; cin &gt;&gt; q;\n    while (q--) {\n        int s, t; cin &gt;&gt; s &gt;&gt; t, --s, --t;\n        int ans = abs(s - t);\n        for (int i = 0; i &lt; M; ++i) {\n            ans = min(ans, (dis[i][s] + dis[i][t]) / 2);\n        }\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> JOI 2024 Final \u5efa\u8bbe\u5de5\u7a0b 2 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u7b2c \\(i\\) \u689d\u908a\u70ba \\((u_i,v_i)\\)\uff0c\u908a\u6b0a \\(w_i\\)\u3002\u554f\u6709\u5e7e\u7a2e pair\\((u,v)\\) \u6eff\u8db3 \\(u &lt; v\\) \u4e14\u5728 \\(u,v\\) \u4e4b\u9593\u5efa\u4e00\u689d\u908a\u6b0a \\(\\ell\\) \u7684\u96d9\u5411\u908a\uff0c\u53ef\u4ee5\u4f7f\u8d77\u9ede \\(s\\) \u5230\u7d42\u9ede \\(t\\) \u7684\u6700\u77ed\u8def\u8ddd\u96e2 \\(\\le k\\)</p> <p>\\(n,m\\le 2\\times 10^5, 1\\le \\ell,w_i \\le 10^9,1\\le k\\le 10^{15}\\)</p> \u601d\u8def <p>\u9996\u5148\uff0c\u82e5 \\(\\text{dis}(s \\rightarrow t)\\) \u4e00\u958b\u59cb\u5c31\u5df2\u7d93 \\(\\leq k\\)\uff0c\u90a3\u6211\u5011\u7684\u65b9\u6cd5\u6578\u5c31\u76f4\u63a5\u8f38\u51fa \\(\\dfrac{n(n - 1)}{2}\\)\u3002\u5426\u5247\uff0c\u6211\u5011\u7684\u60f3\u6cd5\u5c31\u662f\u627e\u5230\u6eff\u8db3\u80fd\u5f9e \\(s \\rightarrow u \\rightarrow v \\rightarrow t\\) \u7684\u689d\u4ef6\u6578\uff0c\u5c31\u662f\u5148\u7528 Dijkstra \u5efa\u51fa \\(\\text{dis}(s \\rightarrow u)\\) \u8207 \\(\\text{dis}(t \\rightarrow v)\\)\uff0c\u7136\u5f8c\u518d\u60f3\u8fa6\u6cd5\u7528\u679a\u8209 \\(u\\)\uff0c\\(v\\) \u7528\u4e8c\u5206\u641c\u4e4b\u985e\u7684\u4f86\u8a08\u7b97\u3002\u4f46\u6b64\u6642\u6703\u4e0d\u6703\u767c\u751f\u6211\u5011\u80fd\u5f9e \\(s \\rightarrow u \\rightarrow v \\rightarrow t\\) \u4e14\u80fd\u5f9e \\(s \\rightarrow v \\rightarrow u \\rightarrow t\\) \u7684 \\((u, v)\\) \u5462? \u56e0\u70ba\u90a3\u6703\u5c0e\u81f4\u6211\u5011\u91cd\u8907\u8a08\u7b97\u3002\u6211\u5011\u4f86\u5148\u8a66\u8457\u5217\u5f0f\u4e00\u4e0b\uff0c\u770b\u9019\u7a2e\u60c5\u6cc1\u5b58\u4e0d\u5b58\u5728\uff1a</p> <p>\u8b49\u660e\uff1a\u5f9e \\(s \\rightarrow u \\rightarrow v \\rightarrow t\\) \u6216 \\(s \\rightarrow v \\rightarrow u \\rightarrow t\\) \u7686\u53ef\u662f\u5b58\u5728\u7684</p> \\[ \\begin{align} &amp;\\begin{cases} \\text{dis}(s \\rightarrow u) + \\ell + \\text{dis}(v \\rightarrow t) \\leq k \\\\ \\text{dis}(s \\rightarrow v) + \\ell + \\text{dis}(u \\rightarrow t) \\leq k \\end{cases} \\\\ \\Rightarrow&amp;\\begin{cases} \\text{dis}(s \\rightarrow u) + \\text{dis}(v \\rightarrow t) \\leq k - \\ell \\\\ \\text{dis}(s \\rightarrow v) + \\text{dis}(u \\rightarrow t) \\leq k - \\ell \\end{cases} \\\\ \\Rightarrow &amp;\\space \\space\\space\\text{dis}(s \\rightarrow u) + \\text{dis}(v \\rightarrow t) + \\text{dis}(s \\rightarrow v) + \\text{dis}(u \\rightarrow t) \\leq 2k - 2\\ell \\end{align} \\] <p>\u7531\u65bc \\(\\text{dis}(s \\rightarrow t) &gt; k\\)</p> \\[ \\begin{align} &amp;\\min\\{\\text{dis}(s \\rightarrow u) + \\text{dis}(u \\rightarrow t), \\text{dis}(s \\rightarrow v) + \\text{dis}(s \\rightarrow t)\\} &gt; k \\\\ \\Rightarrow &amp; \\begin{cases}\\text{dis}(s \\rightarrow u) + \\text{dis}(u \\rightarrow t) &gt; k \\\\ \\text{dis}(s \\rightarrow v) + \\text{dis}(s \\rightarrow t) &gt; k\\end{cases} \\\\ \\Rightarrow &amp;\\space \\text{dis}(s \\rightarrow u) + \\text{dis}(u \\rightarrow t) + \\text{dis}(s \\rightarrow v) + \\text{dis}(v \\rightarrow t) &gt; 2k \\\\ \\end{align} \\] <p>\u4ee3\u8868 \\(2k\\le 2k-2\\ell\\)\uff0c\u9019\u53ea\u6703\u5728 \\(\\ell &lt; 0\\) \u6210\u7acb\uff0c\u4f46\u6211\u5011 \\(1\\le \\ell \\le 10^9\\)\uff0c\u6240\u4ee5\u7121\u6cd5\u6210\u7acb\uff0c\u4ee3\u8868\u7d50\u679c\u77db\u76fe\u7684\uff0c\u4e0d\u5b58\u5728\u9019\u7a2e\u60c5\u6cc1\u3002\u6240\u4ee5\u6211\u5011\u5c31\u53ea\u9700\u8981\u7b97 \\(s \\rightarrow u \\rightarrow v \\rightarrow t\\) \u7684 \\((u, v)\\) \u6578\u91cf\u5c31\u597d\uff0c\u5b8c\u5168\u4e0d\u7528\u8003\u616e\u91cd\u8907\u7b97\u7684\u554f\u984c\u3002\u9019\u500b\u6709\u5f88\u591a\u7a2e\u4f5c\u6cd5\uff0c\u4ee5\u4e0b\u63d0\u4f9b\u5169\u7a2e\uff1a</p> <ol> <li>\u53ef\u4ee5\u5148\u628a \\(\\text{dis}(t \\rightarrow v)\\) sort \u597d\uff0c\u7136\u5f8c\u56fa\u5b9a \\(u\\)\uff0c\u53bb\u4e8c\u5206\u641c\u6eff\u8db3\u689d\u4ef6\u7684 \\(v\\)\u3002</li> <li>\u6216\u662f\u53ef\u4ee5\u5148\u628a \\(\\text{dis}(s \\rightarrow u),\\text{dis}(t \\rightarrow u)\\) \u90fd\u7531\u5c0f\u5230\u5927\u5206\u5225 sort \u597d\uff0c\u7136\u5f8c\u56e0\u70ba\u6eff\u8db3\u7684 pair \u5177\u6709\u55ae\u8abf\u6027\uff0c\u53ef\u4ee5\u7528 two pointer \u7b97\uff0c\u5177\u9ad4\u898b\u4ee3\u78bc\u3002</li> </ol> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int N = 2e5 + 5;\nint n, m, s, t, l, k;\nint ans, ds[N], dt[N];\nbool vis[N];\nvector&lt;pii&gt; G[N];\n\nvoid dij(int dis[], int s) {\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;\n    memset(vis, 0, sizeof(vis));\n    dis[s] = 0;\n    q.push({0, s});\n\n    while (!q.empty()) {\n        auto [sum, u] = q.top();\n        q.pop();\n        if (vis[u]) {\n            continue;\n        }\n        vis[u] = 1;\n        for (auto [v, w] : G[u]) {\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                q.push({dis[v], v});\n            }\n        }\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t &gt;&gt; l &gt;&gt; k;\n    for (int i = 1; i &lt;= m; ++i) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        G[u].push_back({v, w});\n        G[v].push_back({u, w});\n    }\n\n    memset(ds, 0x3f, sizeof(ds));\n    memset(dt, 0x3f, sizeof(dt));\n    dij(ds, s), dij(dt, t);\n\n    if (ds[t] &lt;= k) {\n        cout &lt;&lt; n * (n - 1) / 2 &lt;&lt; '\\n';\n        return 0;\n    }\n\n    sort(ds + 1, ds + 1 + n);\n    sort(dt + 1, dt + 1 + n);\n\n    int j = 0;\n    for (int i = n; i &gt;= 1; i--) {\n        while (ds[i] + l + dt[j + 1] &lt;= k &amp;&amp; j &lt; n) {\n            j++;\n        }\n        ans += j;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"graph/sp/#_4","title":"\u6b21\u77ed\u8def","text":"<p>\u7b2c\u4e8c\u6b21\u8dd1\u5230\u67d0\u500b\u9ede\u7684\u6642\u5019\u5c31\u4ee3\u8868\u90a3\u500b\u9ede\u7684\u6b21\u77ed\u8def</p> <p></p> \u6b21\u77ed\u8def\u5be6\u4f5c <pre><code>void dijkstra (int s) {\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq; \n    pq.push({0, s});\n\n    while (pq.size()) {\n        auto [sum, u] = pq.top();\n        pq.pop();\n\n        if (ans[u].f == -1) {\n            ans[u].f = sum;\n        } else if (ans[u].s == -1) {\n            if (sum == ans[u].f) continue;// \u56b4\u683c\u8981\u52a0\u9019\u884c\n            ans[u].s = sum;\n        } else {\n            continue;\n        }\n\n        for (auto [v, w] : G[u]) {\n            pq.push({sum + w, v});\n        }\n    }\n}\n</code></pre> \u6a21\u677f USACO 2006 NOV Roadblocks G <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u5e36\u6b0a\u7121\u5411\u5716\uff0c\u554f n \u5230 1 \u7684\u56b4\u683c\u6b21\u77ed\u8def</p> <p>\\(n\\le 5000, m\\le 10^5\\)</p> \u56b4\u683c\u6b21\u77ed\u8def\u65b9\u6cd5\u6578 AcWing - 383.\u89c0\u5149 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5e36\u6b0a\u5716\uff0c\u6c42 \\(s\\to t\\) \u7684 :</p> <ul> <li> <p>\u6700\u77ed\u8def\u65b9\u6cd5\u6578</p> </li> <li> <p>\u6bd4\u6700\u77ed\u8def\u591a\u4e00\u55ae\u4f4d\u7684\u65b9\u6cd5\u6578</p> </li> </ul> <p>\\(N\\le 1000,M \\le 10^4,\\) \u6709 \\(T\\) \u7b46\u6e2c\u8cc7</p> \u601d\u8def <p>\\(dp_f(v)=\\sum \\limits_{f(v)+w(v, u)==f(u)}dp_f(u)\\)</p> <p>\\(dp_g(v)=\\sum \\begin{cases}dp_g(u) &amp; \\text{ if } g(v) + w(v, u) == g(u) \\\\ dp_f(u) &amp; \\text{ if } f(v) + w(v, u) == g(u) \\end{cases}\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Edge {\n    int u, v, w;\n};\n\nstruct Graph {\n    int n, m, s, t;\n    vector&lt;vector&lt;Edge&gt;&gt; G;\n    vector&lt;int&gt; f, g;\n    vector&lt;int&gt; dp_f, dp_g;\n\n    Graph(int _n, int _m) {\n        n = _n, m = _m;\n        f = vector&lt;int&gt;(n, INF);\n        g = vector&lt;int&gt;(n, INF);\n        dp_f = vector&lt;int&gt;(n);\n        dp_g = vector&lt;int&gt;(n);\n        G.resize(n);\n    }\n\n    void add_edge(int u, int v, int w) {\n        G[u].pb({u, v, w});\n    }\n\n    void sec(int u, int x) {\n        if (f[u] &lt; x &amp;&amp; g[u] == INF)\n            g[u] = x;\n        else if (f[u] &lt; x &amp;&amp; x &lt; g[u])\n            g[u] = x;\n    }\n\n    void dijkstra() {\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        pq.push({0, s});\n\n        while (pq.size()) {\n            auto [x, u] = pq.top();\n            pq.pop();\n\n            if (f[u] != INF) continue;\n            f[u] = x;\n\n            for (auto [u, v, w] : G[u]) {\n                pq.push({w + f[u], v});\n            }\n        }\n    }\n\n    int find_second_best() {\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        vector&lt;int&gt; vis(n);\n        for (int i = 0; i &lt; n; i++) {\n            for (auto [u, v, w] : G[i]) {\n                sec(v, f[i] + w);\n            }\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            pq.push({g[i], i});\n        }\n\n        while (pq.size()) {\n            auto [x, u] = pq.top();\n            pq.pop();\n\n            if (vis[u]) continue;\n            vis[u] = 1;\n\n            for (auto [u, v, w] : G[u]) {\n                sec(v, x + w);\n                pq.push({g[v], v});\n            }\n        }\n    }\n\n    void build_DAG(vector&lt;int&gt; &amp;dis, vector&lt;vector&lt;Edge&gt;&gt; &amp;D) {\n        for (int i = 0; i &lt; n; i++) {\n            for (auto [u, v, w] : G[i]) {\n                if (dis[u] + w == dis[v]) {\n                    D[u].pb({u, v, w});\n                }\n            }\n        }\n    }\n\n    void topo(vector&lt;int&gt; &amp;dp, vector&lt;vector&lt;Edge&gt;&gt; &amp;D) {\n        vector&lt;int&gt; in(n);\n        for (int i = 0; i &lt; n; i++) {\n            for (auto [u, v, w] : D[i]) {\n                in[v]++;\n            }\n        }\n\n        queue&lt;int&gt; q;\n        for (int i = 0; i &lt; n; i++) {\n            if (in[i] == 0) q.push(i);\n        }\n\n        while (q.size()) {\n            int u = q.front();\n            q.pop();\n\n            for (auto [u, v, w] : D[u]) {\n                in[v]--;\n                dp[v] += dp[u];\n                if (in[v] == 0) q.push(v);\n            }\n        }\n    }\n\n    int solve() {\n        int res = 0;\n\n        dijkstra();\n        vector&lt;vector&lt;Edge&gt;&gt; Df(n);\n        build_DAG(f, Df);\n        dp_f[s] = 1;\n        topo(dp_f, Df);\n\n        res += dp_f[t];\n        find_second_best();\n        if (g[t] == INF || g[t] != f[t] + 1) return res;\n\n        vector&lt;vector&lt;Edge&gt;&gt; Dg(n);\n        vector&lt;vector&lt;Edge&gt;&gt; Dfg(n);\n\n        build_DAG(g, Dg);\n\n        // f[u] -&gt; w -&gt; g[v]\n        for (int i = 0; i &lt; n; i++) {\n            for (auto [u, v, w] : G[i]) {\n                if (f[u] + w == g[v]) {\n                    dp_g[v] += dp_f[u];\n                }\n            }\n        }\n        topo(dp_g, Dg);\n\n        res += dp_g[t];\n        return res;\n    }\n};\n\nvoid work() {\n    int n, m, s, t;\n    cin &gt;&gt; n &gt;&gt; m;\n    Graph g(n, m);\n\n    int u, v, w;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--, v--;\n        g.add_edge(u, v, w);\n    }\n    cin &gt;&gt; s &gt;&gt; t;\n    s--, t--;\n    g.s = s, g.t = t;\n\n    cout &lt;&lt; g.solve() &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        work();\n    }\n}\n</code></pre> TIOJ 2204.\u4ea4\u66ff\u8def\u5f91 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7c21\u55ae\u7121\u5411\u5716\uff0c\u6bcf\u4e00\u689d\u908a\u6709\u5169\u500b\u6b0a\u91cd\u9577\u5ea6 \\(w_i\\)\uff0c\u984f\u8272 \\(c_i\\)\u3002\u5b9a\u7fa9\u300c\u4ea4\u66ff\u8def\u5f91\u300d\u70ba\u6c92\u6709\u76f8\u9130\u5169\u689d\u908a\u6709\u76f8\u540c\u984f\u8272\u7684\u8def\u5f91(\u4e0d\u4e00\u5b9a\u662f\u7c21\u55ae\u8def\u5f91)\u3002\u6c42\u5168\u9ede\u5c0d\u6700\u77ed\u300c\u4ea4\u66ff\u8def\u5f91\u300d\u9577</p> <p>\\(n \\le 500, m \\le \\frac{n(n-1)}{2}\\)</p> \u601d\u8def <p>\u56e0\u70ba\u53ea\u9700\u8003\u616e\u76f8\u9130\u7684\u908a\uff0c\u6211\u5011\u53ea\u8981\u770b\u7d50\u5c3e\u7684\u984f\u8272</p> <p>\u8003\u616e \\(i \\to j\\) \u662f\u4e00\u689d\u6700\u77ed\u4ea4\u66ff\u8def\u5f91\uff0c\u73fe\u5728\u6211\u60f3\u8981\u5f9e \\(j\\) relax \u5468\u570d\u7684\u9ede\uff0c\u6211\u4e00\u5b9a\u662f\u62ff\u6700\u77ed\u7684\u561b\uff01</p> <p>\u9664\u975e\u67d0\u689d\u908a \\(j \\to k\\) \u7684\u984f\u8272\u548c \\(i \\to j\\) \u7684\u7d50\u5c3e\u984f\u8272\u4e00\u6a23</p> <p>\u9019\u500b\u6642\u5019\u4e00\u5b9a\u662f\u62ff\u300c\u7d50\u5c3e\u984f\u8272\u4e0d\u4e00\u6a23\u7684\u6b21\u77ed\u4ea4\u66ff\u8def\u5f91\u300d</p> <p>\u6240\u4ee5\u53ea\u9700\u8981\u7dad\u8b77\u6700\u77ed\u7684\u8207\u6b21\u77ed\u7684\uff0c\u4e26\u78ba\u4fdd\u7d50\u5c3e\u984f\u8272\u4e0d\u76f8\u540c</p> <p>\u4f7f\u7528 \\(n^2\\) dijkstra \u5be6\u4f5c\uff0c\u6700\u77ed\u7684\u8207\u6b21\u77ed\u7576\u6210\u5169\u500b\u4e0d\u540c\u7684\u9ede\u4f86\u770b</p> <p>\u8a73\u898b\u4ee3\u78bc</p> code <pre><code>#pragma GCC optimize(\"O3,unroll-loops\")\n#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int mod2 = 5e8 + 4;\nconst int M = 1e9 + 7;\n\nint n, m;\n\nstruct Edge {\n    int u, v, w, c;\n};\n\nstruct triple {\n    int a, b, c;\n};\n\nstruct Node {\n    int c1 = -1, c2 = -1, dis1 = INF, dis2 = INF, vis1, vis2;\n    // c1, dis1 : \u7576\u524d\u6700\u77ed\u4ea4\u66ff\u8def\u5f91\u7684\u984f\u8272, \u9577\u5ea6\n    // c1, dis1 : \u7576\u524d\u8207\u6700\u77ed\u984f\u8272\u4e0d\u540c\u7684\u4ea4\u66ff\u8def\u5f91\u7684\u984f\u8272, \u9577\u5ea6\n    // vis1, vis2 : \u662f\u5426\u5df2\u7d93\u56fa\u5b9a (\u88ab\u62ff\u4f86 relax \u8d77\u4ed6\u4eba)\n    // c != -1, vis = 0 \u5df2\u5165\u5806, \u5c1a\u672a\u56fa\u5b9a\n};\n\nstruct Graph {\n    vector&lt;vector&lt;Edge&gt;&gt; G;\n\n    void init() {\n        vector&lt;vector&lt;Edge&gt;&gt;().swap(G);\n        G.resize(n);\n    }\n\n    void add_edge(int u, int v, int w, int c) {\n        G[u].pb({u, v, w, c});\n        G[v].pb({v, u, w, c});\n    }\n\n    vector&lt;int&gt; dijkstra(int s) {\n        vector&lt;Node&gt; node(n);\n        node[s].c1 = 0;\n        node[s].dis1 = 0;\n\n        auto sec = [&amp;](int u, int dis, int c) {\n            if (node[u].vis1 == 0) {\n                if (dis &lt; node[u].dis1) {\n                    if (c != node[u].c1) {\n                        node[u].dis2 = node[u].dis1;\n                        node[u].c2 = node[u].c1;\n                    }\n                    node[u].dis1 = dis;\n                    node[u].c1 = c;\n                    return;\n                }\n            }\n\n            if (node[u].vis2 == 0) {\n                if (dis &lt; node[u].dis2) {\n                    if (c != node[u].c1) {\n                        node[u].dis2 = dis;\n                        node[u].c2 = c;\n                    }\n                }\n            }\n        };\n        auto find = [&amp;]() {\n            int u = -1, c, dis = INF, ord;\n            for (int i = 0; i &lt; n; i++) {\n                if (node[i].vis1 == 0 &amp;&amp; node[i].c1 != -1) {\n                    if (node[i].dis1 &lt; dis) {\n                        u = i, c = node[i].c1, dis = node[i].dis1;\n                        ord = 1;\n                    }\n                }\n                if (node[i].vis2 == 0 &amp;&amp; node[i].c2 != -1) {\n                    if (node[i].dis2 &lt; dis) {\n                        u = i, c = node[i].c2, dis = node[i].dis2;\n                        ord = 2;\n                    }\n                }\n            }\n            if (u == -1) return (triple){-1, -1, -1};\n\n            if (ord == 1)\n                node[u].vis1 = 1;\n            else\n                node[u].vis2 = 1;\n\n            return (triple){u, dis, c};\n        };\n\n        for (int i = 1; i &lt;= 2 * n - 1; i++) {\n            auto [u, dis, c] = find();\n            if (u == -1) break;\n\n            for (auto [u, v, ew, ec] : G[u]) {\n                if (c != ec) sec(v, dis + ew, ec);\n            }\n        }\n\n        vector&lt;int&gt; dis(n);\n        for (int i = 0; i &lt; n; i++) {\n            if (node[i].vis1 == 0)\n                dis[i] = 0;\n            else\n                dis[i] = node[i].dis1;\n        }\n\n        return dis;\n    }\n} G;\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n\n    G.init();\n    int u, v, w, c;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w &gt;&gt; c;\n        u--, v--;\n        G.add_edge(u, v, w, c);\n    }\n}\n\nvoid work() {\n    int ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        vector&lt;int&gt; dis = G.dijkstra(i);\n        for (int j = 0; j &lt; n; j++) {\n            ans = (ans + ((i + j + 2) * dis[j]) % M) % M;\n        }\n    }\n\n    cout &lt;&lt; (ans * mod2) % M &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n}\n</code></pre>"},{"location":"graph/sp/#k","title":"K \u77ed\u8def","text":"<p>dijkstra \u6b63\u78ba\u6027\u8b49\u660e</p> <p>\u4f60\u628a\u72c0\u614b \\(w\\) \u63a8\u51fa\u53bb\u7684\u6642\u5019 \u72c0\u614b \\(&lt;w\\) \u90fd\u5df2\u7d93\u63a8\u51fa\u53bb\u4e86</p> <p>\u6240\u4ee5\u7576 \\(w\\) \u88ab\u63a8\u51fa\u53bb\u7684\u6642\u5019 \u5c31\u4fdd\u8b49\u662f\u6700\u4f73\u89e3</p> <p>\u5ef6\u4f38 : A*\u3001 yen's algorithm</p> <p>\u6bcf\u500b\u9ede\u8dd1\u9032\u53bb k \u6b21\u5373\u53ef</p> K \u77ed\u8def code <pre><code>void dijkstra(int s) {\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq; //{val,id}\n    pq.push({0, s});\n\n    while (pq.size()) {\n        int sum = pq.top().f, u = pq.top().s;\n        pq.pop();\n\n        if (dis[u].size() &gt;= k) continue;\n        dis[u].pb(sum);\n\n        for (auto [v, w] : G[u])\n            pq.push({sum + w, v});\n    }\n}\n</code></pre> \u6a21\u677f CSES - Flight Routes <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u6709\u5411\u6b63\u6b0a\u5716\uff0c\\(1\\) \u70ba\u8d77\u9ede\uff0c\u554f\u8d77\u9ede\u5230\u7d42\u9ede \\(n\\) \u7684\u524d \\(k\\) \u77ed\u8def</p> <p>\\(n\\le 10^5,m\\le 2\\times 10^5\\)</p>"},{"location":"graph/sp/#_5","title":"\u7dda\u6bb5\u6a39\u512a\u5316\u5efa\u5716","text":"<p>\u8a73\u898b\u6b64\u8655</p>"},{"location":"graph/sp/#_6","title":"\u7df4\u7fd2\u984c","text":"CF 1051 F.The Shortest Statement <p>\u7d66\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7121\u5411\u5716\uff0c\\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\\(s_i\\to t_i\\) \u7684\u6700\u77ed\u8def\u5f91</li> </ul> <p>\\(n,m,q\\le 10^5,m-n\\le 20\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u5230 \\(m-n\\le 20\\)</p> <p>\u82e5 \\(m=n-1\\) \u90a3\u5c31\u662f\u4e00\u9846\u6a39\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u6700\u77ed\u8def\u5206\u6210\u5168\u90e8\u90fd\u5728\u6a39\u4e0a\uff0c\u8ddf\u6709\u8d70\u5230\u975e\u6a39\u908a\u7684\u60c5\u6cc1</p> <p>\u5168\u90e8\u90fd\u5728\u6a39\u4e0a :</p> <p>\u6a39\u4e0a\u6700\u77ed\u8def\uff0cLCA</p> <p>\u6709\u8d70\u5230\u975e\u6a39\u908a :</p> <p>\u56e0\u70ba\u9019\u7a2e\u908a\u6700\u591a\u53ea\u6709 \\(21\\) \u689d\uff0c\u4e5f\u5c31\u662f\u6db5\u84cb \\(42\\) \u500b\u9ede\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u66b4\u529b\u4ee5\u9019 \\(42\\) \u500b\u9ede\u70ba\u6e90\u9ede\u8dd1 dijkstra</p> <p>\\(s\\to u \\to t\\)\uff0c\u6211\u5011\u679a\u8209\u9019 \\(42\\) \u500b \\(u\\)</p> CF 715 B. Complete The Graph <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u908a\u8981\u4f60\u6307\u5b9a\u6b0a\u91cd</p> <p>\u6c42\u662f\u5426\u6709\u65b9\u6848\u4f7f\u5f97\u5f9e \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u6070\u70ba \\(L\\)\uff0c\u8f38\u51fa\u9019\u4e9b\u908a\u6307\u5b9a\u5f8c\u7684\u6b0a\u91cd\uff0c\u6216\u7121\u6cd5\u9054\u6210</p> <p>\\(n\\le 1000,m\\le 10^4,L\\le 10^9\\)</p> \u601d\u8def <p>\u63a5\u4e0b\u4f86\u8aaa\u7684\u300c\u908a\u300d\u90fd\u6307\u4ee3\u300c\u908a\u6b0a\u672a\u77e5\u7684\u908a\u300d\u3002</p> <p>\u5c07\u6240\u6709\u908a\u90fd\u8a2d\u70ba \\(L+1\\)\uff0c\u5982\u679c \\(dis(s,t) &lt; L\\) \uff0c\u90a3\u9ebc\u5fc5\u7136\u7121\u89e3</p> <p>\u5c07\u6240\u6709\u908a\u90fd\u8a2d\u70ba \\(1\\) \uff0c\u5982\u679c \\(dis(s,t) &gt; L\\) \uff0c\u90a3\u9ebc\u5fc5\u7136\u7121\u89e3</p> <p>\u8003\u616e\u5c07\u4efb\u610f\u4e00\u689d\u908a\u7684\u6b0a\u503c \\(+1\\)\uff0c\u5247 \\(dis(s,t)\\) \u6703 \\(+0\\) \u6216\u8005 \\(+1\\) </p> <p>\u5982\u679c\u5c07\u6240\u6709\u908a\u6309\u7167\u300c\u96a8\u4fbf\u300d\u4e00\u500b\u9806\u5e8f\u4e0d\u65b7 \\(+1\\)\uff0c\u76f4\u5230\u6240\u6709\u908a\u7684\u6b0a\u503c\u90fd\u662f \\(10^9\\) \u4e86\uff0c\u90a3\u9ebc\u5728\u9019\u500b\u904e\u7a0b\u4e2d\uff0c\\(dis(s,t)\\) \u662f\u905e\u589e\u7684\uff0c\u800c\u4e14\u4e00\u5b9a\u5728\u67d0\u4e00\u500b\u6642\u523b \\(dis(s,t)=L\\)</p> <p>\u9019\u6a23\u7684\u8a71\u6211\u5011\u5c31\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848 + dijkstra\u89e3\u6c7a\u9019\u500b\u554f\u984c\u4e86</p> <p>\u6642\u9593\u8907\u96dc\u5ea6 \\(\\log (mL)\\times m\\log m = O(m\\log m \\log (mL))\\) </p> <p>\u8003\u616e\u908a\u6b0a\u7686\u70ba \\(1\\) \u7684\u6700\u77ed\u8def\uff0c\u908a\u6b0a\u7686\u70ba INF \u7684\u6700\u77ed\u8def\uff0c\u6709\u89e3\u82e5\u4e14\u552f\u82e5 \\(L\\) \u5728\u9019\u5169\u500b\u503c\u4e4b\u9593</p> <p>\u908a\u6b0a\u7686\u70ba \\(x\\) \u53ef\u5f97\u51fa\u6700\u77ed\u8def\u5177\u6709\u55ae\u8abf\u6027</p> <p>\u5c0f\u6578\u9ede\u4e8c\u5206\u641c \\(x\\)\uff0c\u5c07\u6bcf\u500b\u908a\u6b0a\u90fd\u8a2d\u70ba \\(x\\)\uff0c\u4f7f\u6700\u77ed\u8def\u6bd4 \\(L\\) \u5927\u4e00\u9ede\u9ede</p> <p>\u5efa\u7acb shortest path DAG\uff0c\u5c07\u5176\u4e2d\u4e00\u689d\u8def\u5f91\u5411\u4e0b\u53d6\u6574\uff0c\u5176\u4ed6\u908a\u6b0a\u5373\u8a2d\u70ba INF</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Edge {\n    int u, v, w, id;\n};\n\nstruct Graph {\n    int run = 0;\n    int n, m, s, t, L;\n    vector&lt;Edge&gt; edges;\n    vector&lt;int&gt; dis;\n    vector&lt;vector&lt;pii&gt;&gt; G; // {w, v}\n\n    Graph (int n, int m, int s, int t, int L) : n(n), m(m), s(s), t(t), L(L) {}\n\n    void add_edge (int u, int v, int w, int id) {\n        edges.pb ({u, v, w, id});\n    }\n\n    int dijkstra () {\n        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n        pq.push ({0, s});\n\n        while (pq.size ()) {\n            auto [sum, u] = pq.top(); pq.pop();\n\n            if (dis[u] != INF) continue;\n            dis[u] = sum;\n\n            for (auto [w, v] : G[u]) {\n                pq.push ({sum + w, v});\n            }\n        }\n        return dis[t];\n    }\n\n    int check (int x) {\n        //   0 1 2 3\n        //   4 5 6 7\n        // x = [m - 1, 10^9 * m - 1]\n        // \u9032\u884c\u4e86 cnt=x/m \u8f2a\n        // x %= m\n        // [0, x] +(cnt+1)\n        // [x + 1, m - 1] +(cnt)\n        G = vector&lt;vector&lt;pii&gt;&gt;(n, vector&lt;pii&gt;());\n        dis = vector&lt;int&gt;(n, INF);\n\n        int cnt = x / m;\n        x %= m;\n\n        for (auto [u, v, w, id] : edges) {\n            if (w == 0) {\n                if (id &lt;= x) {\n                    G[u].pb ({cnt + 1, v});\n                } \n                else G[u].pb ({cnt, v});\n            }\n            else G[u].pb({w, v});\n        }\n\n        return dijkstra();\n    }\n}; \n\nint n, m, L, s, t;\n\nvoid work () {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; L &gt;&gt; s &gt;&gt; t;\n    Graph g(n, m, s, t, L);\n\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        g.add_edge(u, v, w, i);\n        g.add_edge(v, u, w, i);\n    }\n\n    int l = m - 1, r = (1e9) * m - 1;\n    while (l &lt; r) {\n        int mid = (l + r) / 2;\n\n        if (g.check(mid) &lt; L) l = mid + 1;\n        else r = mid;\n    }\n    int dis = g.check (l);\n    if (dis != L) {\n        cout &lt;&lt; \"NO\\n\";\n        return;\n    }\n    cout &lt;&lt; \"YES\\n\";\n\n    map&lt;pii, int&gt; mp;\n    for (int i = 0; i &lt; n; i++) {\n        for (auto [w, v] : g.G[i]) {\n            if (mp[{i, v}] || mp[{v, i}]) continue;\n            cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; v &lt;&lt; \" \" &lt;&lt; w &lt;&lt; \"\\n\";\n            mp[{i, v}] = true;\n        }\n    }\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        work();\n    }\n} \n</code></pre> \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd 2022 pD. \u5c0f\u98a8\u7684\u904a\u6232 (Game) <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u76ee\u6a19\u662f\u8b93 \\(s\\) \u5230 \\(t\\) \u7684\u6700\u77ed\u8def\u5f91\u9577\u5ea6\u6070\u597d\u70ba \\(d\\)\u3002\u7d66\u4e00\u500b \\(1\\ldots m\\) \u7684 permutation \\(p\\)\uff0c\u4ee3\u8868 \\(w_{p_1}&lt;w_{p_2} &lt; \\ldots &lt; w_{p_m}\\)\uff0c\u554f\u662f\u5426\u6709\u8fa6\u6cd5\u69cb\u9020 \\(w_1, \\ldots ,w_m\\)\uff0c\u6709\u7684\u8a71\u8acb\u8f38\u51fa</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5, 1\\le d\\le 10^{11}\\)</p> \u601d\u8def <p>\u6700\u5c0f\u7684\u89e3\u5c31\u662f \\(w_{p_1}=1,w_{p_2}=2,\\ldots\\)\uff0c\u6211\u5011\u4e8c\u5206\u641c\u4e00\u500b threshold \\(t\\)\uff0c\u6eff\u8db3\u4f7f\u7528\u908a\u6b0a \\(\\le t\\) \u7684\u908a\u6070\u80fd\u4f7f \\(s\\to t\\) \u7684\u6700\u77ed\u8def \\(\\le d\\)\uff0c\u82e5\u5168\u90e8\u7684\u908a\u90fd\u7528\u4e0a \\(d\\) \u9084\u662f\u5c0f\u65bc\u6700\u77ed\u8def \\(L\\)\uff0c\u5c31\u8f38\u51fa\u7121\u89e3\u3002</p> <p>\u63a5\u4e0b\u4f86\u6211\u5011\u8981\u4f86\u8abf\u6574\uff0c\u8b93\u6700\u77ed\u8def\u8b8a\u6210\u6070\u597d \\(d\\)\u3002\u56e0\u70ba\u5230 \\(w_i=t\\) \u624d\u6070\u597d\u5f62\u6210 &lt;= d \u7684\u6700\u77ed\u8def\uff0c\u6240\u4ee5 \\(w_i=t\\) \u4e00\u5b9a\u5728\u6700\u77ed\u8def\u5f91\u4e0a\uff0c\u800c\u5728\u9019\u4e4b\u524d\uff0c\u6700\u77ed\u8def\u662f &gt; d \u7684\u3002\u5982\u679c\u6211\u5011\u5c07 \\(w_i\\) \u6539\u6210 \\(t+d-L\\)\uff0c\u53ef\u4ee5\u4f7f\u5f97\u6700\u77ed\u8def\u52a0\u8d77\u4f86\u6070\u597d\u8b8a\u6210 \\(d\\)\uff08\u56e0\u70ba\u6c92\u6709 \\(w_i\\) \u9019\u689d\u908a\u7684\u8def\u5f91\uff0c\u6b0a\u503c\u4e00\u5b9a &gt; d\uff09\u3002\u81f3\u65bc\u5269\u4e0b\u7684\u908a\u6211\u5011\u8981\u4f7f\u4ed6\u5011\u4e0d\u6703\u5e72\u9810\u6211\u5011\u7684\u6700\u77ed\u8def\u5f91\u3002\\(&lt; t\\) \u7684\u908a\u7dad\u6301\u4e0d\u8b8a\uff0c\u56e0\u70ba\u4e0a\u9762\u7684\u6709\u6700\u77ed\u8def\u5f91\u7684\u5716\u5c31\u6709\u6db5\u84cb\u9019\u4e9b\u908a\uff0c\u4e5f\u5c31\u662f \\(1, 2, \\ldots\\)\uff1b\\(&gt;t\\) \u7684\u908a\u8981\u4fdd\u8b49\u4e0d\u6703\u51fa\u73fe\u5728\u6700\u77ed\u8def\u5f91\u4e0a\uff0c\u5c31\u8981\u8a2d\u70ba \\(d+1, d+2, \\ldots\\)\u3002</p> <p> d = 7 </p> CF 1307 D. Cow and Fields <p>\u7d66\u5b9a\u4e00\u500b \\(n\\) \u500b\u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\\(n\\) \u500b\u9ede\u4e2d\u6709 \\(k\\) \u500b\u662f\u7279\u6b8a\u9ede\uff0c\u53ef\u4ee5\u5728\u9019 \\(k\\) \u500b\u9ede\u4e2d\u627e\u5169\u500b\u9ede\u9023\u4e00\u689d\u7121\u5411\u908a\u3002\u6bcf\u689d\u908a\u7684\u8ddd\u96e2\u90fd\u662f \\(1\\)\u3002\u554f\u5f9e \\(1\\) \u5230 \\(n\\) \u7684\u6700\u77ed\u8def\u6700\u5927\u662f\u591a\u5c11\u3002</p> <p>\\(n,m,k\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u73fe\u5728\u6709\u5169\u500b\u9ede \\(i\\) \u548c \\(j\\) \uff0c\u5982\u679c\u5176\u5efa\u908a\u7684\u8a71\uff0c\u6700\u77ed\u8def\u53ef\u80fd\u662f \\(1 \\to i \\to j \\to n\\) \u6216\u8005 \\(1 \\to j \\to i \\to n\\)\u3002\u9019\u6a23\u4ee3\u8868\u7684\u8ddd\u96e2\u4e5f\u5c31\u662f \\(dis(1\\to i)+dis(j\\to n)+1\\) \u548c \\(dis(1\\to j)+dis(i\\to n)+1\\) \u4e86\u3002\u6211\u5011\u8981\u53d6\u6700\u5c0f\u7684\uff0c\u56e0\u6b64 \\(dis(1\\to i)+dis(j\\to n)+1&lt;dis(1\\to j)+dis(i\\to n)+1\\)  \u6642\uff0c\u624d\u7b26\u5408\u6700\u77ed\u8def\u7684\u689d\u4ef6\u3002\u79fb\u9805\u5f8c\u8b8a\u70ba \\(dis(1\\to i) - dis(i\\to n) &lt; dis(1\\to j)-dis(j\\to n)\\)\u3002\u4f9d\u64da exchange argument\uff0c\u6309\u7167\u9019\u500b\u689d\u4ef6\u7531\u5c0f\u5230\u5927\u6392\u5e8f\u5f8c\uff0c\u679a\u8209\u4f4d\u65bc\u5f8c\u9762\u7684\u9ede \\(j\\)\uff0c\u7136\u5f8c\u627e\u5230\u9ede \\(j\\) \u524d\u9762\u7684 \\(dis(1\\to i)\\) \u7684\u6700\u5927\u503c\uff0c\u9019\u6a23\u53ef\u4ee5\u4fdd\u8b49\u76f8\u52a0\u4e4b\u548c\u662f\u6700\u5927\u7684\u3002\u6700\u5927\u5c31\u662f\u4e4b\u524d\u7684\u6700\u77ed\u8def\u4e86\u3002\u6700\u5f8c\u8207\u539f\u5716\u6700\u77ed\u8def\u6bd4\u8f03\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"graph/sp/#bellman-fordspfa","title":"Bellman Ford/SPFA","text":""},{"location":"graph/sp/#bellman-ford","title":"Bellman Ford","text":"<p>Bellman-Ford \u5c31\u662f\u628a\u6240\u6709\u7bc0\u9ede\u90fd relax\uff0c\u505a \\(n \u2212 1\\) \u6b21\uff0c\u6703\u5c0d\u7684\u539f\u56e0\u662f\u6700\u77ed\u8def\u5f91\u6700\u591a\u53ea\u7d93\u904e \\(n \u2212 1\\) \u689d\u908a</p> \u6a21\u677f CSES - Cycle Finding <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u6c42\u4e0a\u9762\u662f\u5426\u6709\u8ca0\u74b0\uff0c\u5982\u679c\u6709\u7684\u8a71\u8f38\u51fa\u4efb\u610f\u8ca0\u74b0</p> <p>\\(n \\le 2500\u3001m \\le 5000\\)</p> \u7b97\u6cd5\u5be6\u4f5c <pre><code>int x; // \u770b\u7b2c n \u8f2a\u662f\u5426\u6703 relax\nfor (int i = 0; i &lt; n; ++i) {\n    x = -1; // \u6c92 relax\n    for (auto &amp;e: edges) {\n        if (distances[e.v] &gt; distances[e.u] + e.w) {\n            distances[e.v] = distances[e.u] + e.w;\n            parents[e.v] = e.u;\n            x = e.v; // \u6709 relax\n        }\n    }\n}\n</code></pre> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nstruct Edge {\n    int u, v, w;\n};\n\nint n, m;\nvector&lt;Edge&gt; edges;\nvector&lt;int&gt; distances;\nvector&lt;int&gt; parents;\n\nvector&lt;int&gt; construct_answer(int x) {\n    for (int i = 0; i &lt; n; ++i) {\n        x = parents[x];\n    }\n\n    vector&lt;int&gt; ans;\n    int y = x;\n    do {\n        ans.push_back(y);\n        y = parents[y];\n    } while (x != y);\n\n    ans.push_back(x);\n    reverse(ans.begin(), ans.end());\n\n    return ans;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; m; ++i) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--, v--;\n        edges.push_back({u, v, w});\n    }\n    parents = vector&lt;int&gt;(n);\n    distances = vector&lt;int&gt;(n);\n    int x; // \u770b\u7b2c n \u8f2a\u662f\u5426\u6703 relax\n    for (int i = 0; i &lt; n; ++i) {\n        x = -1; // \u6c92 relax\n        for (auto &amp;e: edges) {\n            if (distances[e.v] &gt; distances[e.u] + e.w) {\n                distances[e.v] = distances[e.u] + e.w;\n                parents[e.v] = e.u;\n                x = e.v; // \u6709 relax\n            }\n        }\n    }\n    if (x != -1) {\n        auto ans = construct_answer(x);\n        cout &lt;&lt; \"YES\" &lt;&lt; '\\n';\n        for (int i = 0; i &lt; ans.size(); ++i) {\n            cout &lt;&lt; ans[i] + 1 &lt;&lt; ' ';\n        }\n    } else {\n        cout &lt;&lt; \"NO\" &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"graph/sp/#spfa","title":"SPFA","text":""},{"location":"graph/sp/#_7","title":"\u4ecb\u7d39","text":"<p>\u5168\u540d\u70ba Shortest Path Finding Algorithm\u3002\u5c6c\u65bc\u55ae\u6e90\u6700\u77ed\u8def\uff0c\u70ba Bellman Ford \u7684\u512a\u5316\u7248\u672c\uff0c\u6bcf\u56de\u5408\u53ea\u66f4\u65b0\u300c\u524d\u4e00\u56de\u5408\u6709\u88ab\u9b06\u5f1b\u300d\u7684\u9ede\u76f8\u9130\u7684\u908a\uff0c\u5be6\u4f5c\u4e0a\u985e\u4f3c dijkstra\u3002\u5982\u679c\u8981\u505a\u5f88\u591a\u6b21\u6700\u77ed\u8def\uff0c\u5716\u6bcf\u6b21\u90fd\u8b8a\u5316\uff0c\u5c31\u53ef\u4ee5\u7528 SPFA\uff0c\u4f8b\u5982 MCMF\uff0c\u8907\u96dc\u5ea6\u5e73\u5747 \\(O(n+m)\\)\uff0cworst case \\(O(nm)\\)\uff0c\u542b\u904b\u6c23\u6210\u5206</p>"},{"location":"graph/sp/#bfs","title":"\u6982\u5ff5(BFS)","text":"<p>\u5982\u679c\u4e0a\u4e00\u8f2a\u67d0\u4e00\u500b\u9ede\u7684\u8ddd\u96e2\u6c92\u6709\u66f4\u65b0,\u90a3\u9019\u4e00\u8f2a\u4e5f\u6c92\u5fc5\u8981 relax \u4ed6\u3002\u628a\u8ddd\u96e2\u6709\u66f4\u65b0\u7684\u7bc0\u9ede\u4e1f\u9032 queue \u88e1,\u7136\u5f8c\u4e00\u76f4\u62ff queue \u88e1\u7684\u7bc0\u9ede\u51fa\u4f86 relax\u3002\u7531\u65bc BFS \u8655\u7406\u74b0\u80fd\u529b\u8f03\u5f31\uff0c\u82e5\u9047\u5230\u8ca0\u74b0\u53ef\u80fd TLE</p> SPFA BFS code <pre><code>bool SPFA(int s) {\n    vector&lt;int&gt; dis(n, INF);\n    vector&lt;bool&gt; inq(n);\n    vector&lt;int&gt; cnt(n);\n\n    queue&lt;int&gt; q;\n    q.push(s);\n    dis[s] = 0;\n    inq[s] = true;\n\n    while (q.size()) {\n        int u = q.front();\n        q.pop();\n        cnt[u]++;\n\n        if (cnt[u] == n) {\n            // negative cycle\n            return true;\n        }\n\n        inq[u] = false;\n\n        for (auto [v, w] : G[u]) {\n            if (dis[u] + w &lt; dis[v]) {\n                dis[v] = dis[u] + w;\n\n                if (!inq[v]) {\n                    inq[v] = true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n\n    return false;\n}\n</code></pre>"},{"location":"graph/sp/#dfs","title":"\u6982\u5ff5(DFS)","text":"<p>\u5982\u679c\u4e00\u500b relax \u64cd\u4f5c\u662f\u5728 back edge \u4e0a\u9032\u884c\u7684\uff0c\u5247\u6709\u8ca0\u74b0\u3002DFS \u8655\u7406\u6700\u77ed\u8def\u80fd\u529b\u8f03\u82e5\u5f31\uff0c\u4e00\u822c\u91dd\u5c0d\u8ca0\u74b0\u7684\u984c\u76ee<sup>1</sup>\u3002</p> <p>\u82e5\u5728\u5224\u65b7\u8ca0\u74b0\u7684\u984c\u76ee\u6642\uff0c\u6703\u5c07 dis[ ] \u521d\u59cb\u503c\u8a2d\u70ba 0\uff0c\u4f7f\u4e00\u958b\u59cb\u6b63\u6b0a\u7684\u908a\u6c92\u8fa6\u6cd5\u8d70\u4e0b\u53bb\uff0c\u6e1b\u5c11\u984d\u5916\u7684\u6642\u9593\u3002</p> SPFA DFS code <pre><code>int n, m;\nint dis[maxn];\nbool inq[maxn];\nvector&lt;pii&gt; G[maxn];\n\nbool spfa(int u) {\n    inq[u] = true;\n    for (auto [v, w] : G[u]) {\n        if (dis[u] + w &lt; dis[v]) {\n            dis[v] = dis[u] + w;\n            if (inq[v] || spfa(v)) {\n                return true;\n            } \n        }\n    }\n    inq[u] = false;\n    return false;\n} \n\nbool check() {\n    for (int i = 0; i &lt; n; i++) {\n        dis[i] = 0;\n        inq[i] = false;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        if (!inq[i]) {\n            if (spfa(i)) return true;\n        }\n    }\n    return false;\n}\n</code></pre>"},{"location":"graph/sp/#_8","title":"\u984c\u76ee","text":"\u6700\u5c0f\u5e73\u5747\u74b0 LOJ #10084. \u300c\u4e00\u672c\u901a 3.3 \u7ec3\u4e60 1\u300d\u6700\u5c0f\u5708 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u908a\u6709\u6b0a\u91cd\uff0c\u5b9a\u7fa9\u5e73\u5747\u74b0\u70ba</p> \\[\\mu(C)=\\displaystyle \\frac{\\sum w_{u,v}}{|C|}\\] <p>\u6c42\u6700\u5c0f\u5e73\u5747\u74b0 \\(\\mu^*(C)=\\min\\{\\mu(C) \\}\\)</p> <p>\\(n\\le 3000,m\\le 10^4,|w_{i,j}|\\le 10^7\\)</p> \u601d\u8def <p>\u5047\u8a2d\u6240\u6c42\u7684\u5e73\u5747\u6700\u5c0f\u503c\u70ba X\uff0c\u74b0\u4e0a\u5404\u500b\u908a\u7684\u6b0a\u503c\u5206\u5225\u70ba A1,A2...Ak\uff0c\u53ef\u4ee5\u5f97\u5230 :</p> <p>X=(A1+A2+A3+...+Ak)/K</p> <p>A1+A2+A3+...+Ak=X*K</p> <p>\u79fb\u9805\u53ef\u5f97\uff1a(A1-X)+(A2-X)+(A3-X)+...+(Ak-X)=0</p> <p>\u5373\u5224\u65b7\uff1a(A1-ans)+(A2-ans)+(A3-ans)+...+(Ak-ans)&lt;=0</p> <p>\u6700\u5f8c\u554f\u984c\u5c31\u8b8a\u6210\u4e86\u4e8c\u5206\u4e00\u500b\u6700\u5927\u7684 ans \u6eff\u8db3\u908a\u6b0a\u70ba w - ans \u7684\u5716\u4e0d\u5b58\u5728\u8ca0\u74b0</p> <p>\u5be6\u4f5c\u4e0a\u9700\u8981\u4f7f\u7528 DFS SPFA\uff0c\u4e0d\u7136\u6703 TLE</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst double INF = 2e18;\nconst int maxn = 3000 + 5;\nconst int M = 1e9 + 7;\nconst double EPS = 1e-10;\n\nint n, m;\ndouble dis[maxn];\nint vis[maxn];\nvector&lt;pair&lt;int, double&gt;&gt; G[maxn];\n\nbool spfa(int u, double t) {\n    vis[u] = true;\n    for (auto [v, w] : G[u]) {\n        w -= t;\n        if (dis[u] + w &lt; dis[v]) {\n            dis[v] = dis[u] + w;\n            if (vis[v] || spfa(v, t)) {\n                return true;\n            } \n        }\n    }\n    vis[u] = false;\n    return false;\n} \n\nbool check(double t) {\n    for (int i = 0; i &lt; n; i++) {\n        dis[i] = 0;\n        vis[i] = false;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        if (!vis[i]) {\n            if (spfa(i, t)) return true;\n        }\n    }\n    return false;\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 0; i &lt; m; i++) {\n        int u, v; double w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--, v--;\n        G[u].pb({v, w});\n    }\n\n    double l = -1e7, r = 1e7;\n    while (r - l &gt; EPS) {\n        double mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n    cout &lt;&lt; fixed &lt;&lt; setprecision(8) &lt;&lt; l &lt;&lt; '\\n';\n} \n</code></pre> <p>\u5728\u770b\u4e0b\u9762\u5168\u570b\u8cfd\u7684\u984c\u76ee\u524d\uff0c\u6211\u5011\u5148\u4f86\u770b\u4e00\u9053\u984c\u76ee\uff08\u8207 Bellman-Ford \u7121\u95dc\uff09</p> LeetCode 134. Gas Station <p>\u6709\u5169\u500b\u9577\u5ea6\u70ba n \u7684\u74b0\u72c0\u9663\u5217\uff0ccost[i] \u8868\u793a\u5f9e i<sup>th</sup> \u5230  (i+1)<sup>th</sup> \u8def\u4e0a\u6703\u6d88\u8017\u7684\u6c7d\u6cb9\u91cf\uff0cgas[i] \u8868\u793a\u4f60\u7ad9\u5728 i<sup>th</sup> \u53ef\u4ee5\u5f97\u5230\u7684\u6c7d\u6cb9\u91cf\uff0c\u9078\u64c7\u4e00\u500b\u8d77\u9ede\u4f7f\u5f97\u5728\u8d70\u5b8c\u4e00\u5708\u7684\u904e\u7a0b\u4e2d\u4e0d\u80fd\u6c92\u6cb9</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u5c07 c[i] \u8868\u793a\u70ba gas[i] - cost[i]\uff0c\u8981\u80fd\u7e5e\u5b8c\u4e00\u5708\u7684\u524d\u63d0\u662f c[1]+...+c[n] &gt;= 0</p> <p>\u9019\u908a\u4e0d\u61c2\u53ef\u4ee5\u770b\u9019\u500b\u5f71\u7247</p> <p>\u5047\u8a2d\u8d77\u9ede\u70ba k\uff0c\u4ee4 suf[i] \u70ba c[i]+...+c[n]\uff0c\u90a3\u9ebc k \u662f\u4e00\u500b\u5408\u6cd5\u7684\u8d77\u9ede\u82e5\u4e14\u552f\u82e5</p> <ul> <li> <p>i = k...n \u9019\u6bb5\u4e0d\u80fd\u70ba\u8ca0</p> </li> <li> <p>i = 1...(k - 1) \u4e0d\u80fd\u70ba\u8ca0</p> </li> </ul> <p>\u4e5f\u5c31\u662f\u53ef\u8868\u793a\u6210</p> <ul> <li> <p>suf[k] - suf[i] &gt;= 0</p> </li> <li> <p>suf[k] + (suf[1] - suf[i]) &gt;= 0</p> </li> </ul> <p>\u986f\u7136\uff0csuf[k] \u8d8a\u5927\u8d8a\u597d\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u9700\u627e suf \u6700\u5927\u7684\u9ede\u5373\u53ef</p> code <pre><code>class Solution {\npublic:\n    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) {\n        int mx = -1e9, suf = 0, start = -1;\n        for (int i = gas.size()-1; i &gt;= 0; i--) {\n            suf += gas[i] - cost[i];\n\n            if (suf &gt; mx) {\n                mx = suf;\n                start = i;\n            }\n        }\n\n        return (suf &gt;= 0) ? start : -1;\n    }\n};\n</code></pre> <p>\u5f9e\u4e0a\u9762\u7684\u984c\u76ee\u6211\u5011\u53ef\u4ee5\u89c0\u5bdf\u5230\u4ee5\u4e0b\u6027\u8cea</p> \u975e\u8ca0\u74b0\u5fc5\u5b58\u5728\u81f3\u5c11\u4e00\u500b\u8d77\u9ede \\(u\\)\uff0c\u904e\u7a0b\u4e2d\u6b0a\u91cd\u548c\u90fd \\(\\ge 0\\)\uff0c\u4e14 suf \u6700\u5927\u7684\u5fc5\u5b9a\u6eff\u8db3 <p>\u975e\u8ca0\u74b0 \\(\\Rightarrow\\) suf[1] &gt;= 0</p> <p>suf[k] = max (suf)</p> <p>\u56e0\u70ba suf[k] \u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5 suf[k] - suf[i] \u81f3\u5c11 &gt;= 0</p> <ul> <li> <p>suf[k]+(suf[1] - suf[i]) &gt;= 0</p> </li> <li> <p>suf[k] - suf[i] &gt;= 0</p> </li> </ul> \u5982\u4f55\u627e\u975e\u8ca0\u74b0 ? <p>\u8b93\u6bcf\u500b\u908a\u6e1b\u4e00\u500b\u6578 \\(\\epsilon\\)\uff0c\u4f7f\u5f97\u6b63\u74b0 \\(1\\) \u9084\u662f\u6b63\u7684\uff0c\u800c\u96f6\u74b0\u53ef\u4ee5\u8b8a\u8ca0\u74b0\uff0c\u90a3\u74b0\u4e0a\u81f3\u591a \\(n\\) \u500b\u9ede\uff0c\u82e5 \\(\\epsilon = \\frac{1}{n}\\) \u90a3\u5c31\u6703\u4f7f \\(1\\to 0\\)\uff0c\u800c\u82e5\u6e1b\u6389 \\(\\epsilon = \\frac{1}{n+1}\\) \u90a3\u5c31\u6703\u4f7f \\(1\\) \u8b8a\u6210 \\(0.\\cdots\\) \u9084\u662f\u6b63\u7684\uff0c\u96f6\u74b0\u6703\u8b8a \\(-0.\\cdots\\) \u662f\u8ca0\u7684</p> \u5168\u570b\u8cfd 2021 pC <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede\uff08\u57ce\u5e02\uff09 \\(m\\) \u908a\u7684\u6709\u5411\u5716 \\(G_0\\)\u3002 \u6211\u5011\u5c0d \\(G_0\\) \u7684\u6bcf\u689d\u908a\u90fd\u52a0\u4e0a \\(k\\) \u500b\u9ede\uff08\u6751\u838a\uff09\uff0c\u5f97\u5230\u4e00\u5f35 \\(n + mk\\) \u7bc0\u9ede\u7684\u6709\u5411\u5716 \\(G\\)\uff0c\u4e26\u8ce6\u4e88\u9ede\u6b0a\u91cd \\(c: V(G) \\to Z\\)\uff08\u6bcf\u500b\u7bc0\u9ede\u7684\u6536\u652f\uff09\u3002</p> <p>\u8a2d \\(C\\) \u662f \\(G\\) \u4e0a\u7684\u4e00\u500b\u7c21\u55ae\u74b0\u4e14 \\(u \u2208 V(C)\\)\u3002 \u82e5\u5f9e \\(u\\) \u51fa\u767c\u6cbf\u8457 \\(C\\) \u8d70\u4e00\u5708\uff0c\u4efb\u610f\u524d\u7db4\u9ede\u6b0a\u91cd\u548c\u90fd \\(\\ge 0\\)\uff0c\u6211\u5011\u5c31\u8aaa \\(C\\) \u662f \\(G\\) \u7684\u4e00\u500b\u597d\u74b0\uff0c\u800c \\(u\\) \u662f \\(C\\) \u7684\u4e00\u500b\u597d\u8d77\u9ede\u3002</p> <p>\u8acb\u627e\u51fa \\(G\\) \u7684\u4efb\u4e00\u500b\u597d\u74b0 \\(C\\) \u8207 \\(C\\) \u7684\u4efb\u4e00\u500b\u597d\u8d77\u9ede \\(u\\)\uff0c\u4e26\u6c42\u51fa \\(C\\) \u4e0a\u6709\u5e7e\u500b\u9ede\u53ef\u4ee5\u7576\u4f5c\u597d\u8d77\u9ede\uff0c\u9019\u4e9b\u597d\u8d77\u9ede\u53c8\u6709\u5e7e\u500b\u5728 \\(G_0\\) \u4e0a\u3002</p> <p>\\(k\\le n\\le 2000,m\\le 8000\\)</p> \u601d\u8def (from twpca) <p>\u898b twpca</p>"},{"location":"graph/sp/#floyd-warshall","title":"Floyd warshall","text":"\u6a21\u677f CSES - Shortest Routes II <p>\u7d66\u4e00\u5f35\u7121\u5411\u5716\uff0c\\(q\\) \u7b46\u8a62\u554f\u6c42\u67d0\u5169\u9ede\u9593\u7684\u6700\u77ed\u8def\u5f91</p> <p>\\(n \\le 500,q \\le 10^5\\)</p> \u7b97\u6cd5\u5be6\u4f5c <pre><code>// init\nfor (int i = 1; i &lt;= n; i++) {\n    for (int j = 1; j &lt;= n; j++) {\n        if (i == j) dis[i][j] = 0;\n        else if (adj[i][j] != INF) dis[i][j] = adj[i][j];\n        else dis[i][j] = INF;\n    }\n}\n\n// floyd warshall\nfor (int k = 1; k &lt;= n; k++) {\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n        }\n    }\n}\n</code></pre>"},{"location":"graph/sp/#_9","title":"\u6700\u5c0f\u74b0","text":"TIOJ  1212.\u5716\u8ad6\u4e4b\u6700\u5c0f\u5708\u6e2c\u8a66 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u6709\u5411\u5716\uff0c\u627e\u4e00\u4e2a\u6700\u5c0f\u6b0a\u503c\u548c\u7684\u74b0\uff08Girth\uff09</p> <p>\\(3\\le n\\le 500,m\\le 10^5\\)</p> <p>\u7b2c\u4e00\u500b\u60f3\u6cd5\u662f Dijkstra\uff0c\u6211\u5011\u53ef\u4ee5\u679a\u8209\u6bcf\u689d\u908a\uff0c\u79fb\u9664\u8a72\u908a\u7136\u5f8c\u8dd1\u4e00\u6b21 dijkstra\uff0c\u66f4\u65b0\u6b64\u74b0\u7684\u7e3d\u548c \\(dis (u,v) + w\\) \u5230\u7b54\u6848\uff0c\u8907\u96dc\u5ea6 \\(O(n^2\\log n)\\)</p> <p>\u7b2c\u4e8c\u500b\u60f3\u6cd5\u662f Floyd warshall\uff0cFloyd warshall \u6709\u500b\u6027\u8cea\uff0c\u5728\u6700\u5916\u5c64\u8ff4\u5708 \\(k\\) \u958b\u59cb\u6642\uff0c\\(dis_{i,j}\\) \u50c5\u8003\u616e\u662f \\([1,k)\\) \u7684\u6700\u77ed\u8def\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u9019\u6027\u8cea\u8b93\u74b0\u6210\u70ba \\(dis_{i,j}+w(i,k)+w(k,j)\\)\uff0c\u56e0\u70ba\u74b0\u4e0a\u4e00\u5b9a\u6709\u4e00\u500b\u7bc0\u9ede\u7de8\u865f\u6700\u5927\u7684\u9ede\uff0c\u6545\u6b63\u78ba\u6027\u8db3\u5920\u3002    </p> <p>\u7db2\u8def\u4e0a\u6709\u4e00\u500b\u4f5c\u6cd5\u662f\u76f4\u63a5\u5c07\u521d\u59cb\u72c0\u614b dis[i][i] \u8a2d\u70ba INF\uff0c\u4e5f\u53ef\u4ee5 AC\uff0c\u4f46\u82e5\u5716\u6539\u6210\u7121\u5411\u5716\uff08\u6d1b\u8c37 P6175 \u65e0\u5411\u56fe\u7684\u6700\u5c0f\u73af\u95ee\u9898\uff09\u5c31\u4e0d\u80fd\u7528\u4e86\u3002\u4f46\u4e0a\u9762\u5169\u7a2e\u505a\u6cd5\u4f9d\u7136\u53ef\u5be6\u7528</p> \u5be6\u4f5c <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 500 + 5;\nconst int M = 1e9 + 7;\n\nint n, m;\nint adj[maxn][maxn];\nint dis[maxn][maxn];\n\nint solve() {\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            if (i == j) dis[i][j] = 0;\n            else if (adj[i][j] != INF) dis[i][j] = adj[i][j];\n            else dis[i][j] = INF;\n        }\n    }\n\n    int ans = INF;\n    for (int k = 1; k &lt;= n; k++) {\n        for (int i = 1; i &lt; k; i++) {\n            for (int j = 1; j &lt; k; j++) {\n                if (i != j) {\n                    ans = min(ans, dis[i][j] + adj[j][k] + adj[k][i]);\n                }\n            }\n        }\n\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n            }\n        }\n    }\n    if (ans == INF) return 0;\n    return ans;\n}\n\nsigned main() {\n    while(cin &gt;&gt; n &gt;&gt; m) {\n        if (n == 0 &amp;&amp; m == 0) break;\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                adj[i][j] = INF;\n            }\n        }\n        for (int i = 0; i &lt; m; i++) {\n            int u, v, w;\n            cin &gt;&gt; u &gt;&gt; v;\n            adj[u][v] = 1;\n        }\n        cout &lt;&lt; solve() &lt;&lt; '\\n';\n    }\n} \n</code></pre> zerojudge b686. 6. \u822a\u7dda\u898f\u5283 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u908a\u5e36\u6b0a\uff0c\u6bcf\u500b\u9ede\u6709\u4e00\u500b\u6b0a\u91cd \\(a_i\\)</p> <p>\u6709 \\(q\\) \u7b46\u8a62\u554f\uff0c\u5982\u4e0b :</p> <ul> <li>\\(x,s,t:\\) \\(A_i&lt;x\\) \u7684\u9ede\u90fd\u4e0d\u80fd\u8d70\uff0c\u554f \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u5f91 </li> </ul> <p>\\(n\\le 500,m\\le 10^5,q\\le 2\\times 10^5,1\\le a_i,x,s,t\\le n\\)</p> \u601d\u8def code <pre><code>sort (A.rbegin(), A.rend()); // \u9632\u79a6\u529b\u5927\u5230\u5c0f\nsort (query.rbegin(), query.rend()); // \u7834\u58de\u529b\u5927\u5230\u5c0f\n\nfor (int q = 1; q &lt;= query.size(); q++) {\n    int w = query[q];\n\n    // floyd \u4e2d\u7e7c\u9ede\u4e26\u975e\u4e00\u6b21\u5168\u90e8\u66f4\u65b0, \u800c\u662f\u8981\u5f97\u624d\u66f4\u65b0\n    for (int k = 1; A[k] &gt; w; k++) {\n       for (int i = 1; i &lt;= n; i++) {\n           for (int j = 1; j &lt;= n; j++) {\n               d[i][j] = max (d[i][j], d[i][k] + d[k][j]);\n           }\n       } \n    }\n}\n</code></pre> TIOJ 1034.\u6436\u6551\u96f7\u6069\u5927\u5175 (Saving Ryan) <p>\u7d66 \\(N\\times N\\) \u7684 grid\uff0c\u6bcf\u500b\u9ede\u90fd\u6709\u6b0a\u503c</p> <p>\\(Q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\u53ef\u4ee5\u628a\u4e00\u500b\u9ede\u7684\u6b0a\u503c\u6539\u6210 \\(0\\) \u7684\u72c0\u6cc1\u4e0b\uff0c\\(s_i\\to t_i\\) \u7684\u6700\u77ed\u8def\u6700\u5c11\u662f\u591a\u5c11</li> </ul> <p>\\(N\\le 20, Q\\le N^4\\)</p> \u601d\u8def <p>\u5efa\u8868\uff0c\u5c0d\u65bc\u6bcf\u7b46 query \u679a\u8209\u4e2d\u9593\u9ede\u5373\u53ef</p> 2021 \u4e00\u6a21 pA.\u6311\u9078\u8def\u5f91(Shortcut) <p>\u5b9a\u7fa9\u4e00\u5f35\u5716\u7684\u7e3d\u82b1\u8cbb\u662f\u6240\u6709\u9ede\u5c0d\u4e4b\u9593\u7684\u6700\u77ed\u8ddd\u96e2\u7e3d\u548c\u3002\u7d66\u5b9a\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7c21\u55ae\u7121\u5411\u9023\u901a\u5716\uff0c\u5728\u4f60\u53ef\u4ee5\u52a0\u4e00\u689d\u908a\u7684\u60c5\u6cc1\u4e0b\uff0c\u548c\u539f\u5716\u76f8\u6bd4\u6700\u591a\u53ef\u4ee5\u6e1b\u5c11\u591a\u5c11\u7e3d\u82b1\u8cbb\uff1f\u53c8\u6709\u5e7e\u7a2e\u52a0\u908a\u7684\u65b9\u5f0f\u53ef\u4ee5\u6e1b\u5c11\u90a3\u9ebc\u591a\u82b1\u8cbb\uff1f</p> <p>\\(3 \\leq n \\leq 500,n-1 \\leq m \\leq \\dfrac{n(n-1)}{2}-1\\)</p> \u601d\u8def <p>\u3010\u66b4\u529b\u4f5c\u6cd5: \\({O}(n^5)\\)\u3011</p> <p>\\({O}(n^2)\\) \u679a\u8209\u8981\u52a0\u7684\u908a\uff0c\u6bcf\u6b21\u91cd\u65b0\u505a \\(n\\) \u6b21 BFS\uff08\u4e00\u6b21 \\({O}(n+m)\\) \uff09\u6216\u662f Floyd-Warshall</p> <p>\u3010\u5217\u7b97\u5f0f\uff0c\u9810\u8655\u7406: \\({O}(n^4)\\)\u3011</p> <p>\u6bcf\u6b21\u679a\u8209\u8981\u52a0\u7684\u908a \\((u,v)\\) \u6642\uff0c\u8a08\u7b97\u6bcf\u500b\u9ede\u5c0d\u7684\u8ddd\u96e2\u6e1b\u5c11\u4e86\u591a\u5c11\uff0c\u4e5f\u5c31\u662f \\(\\sum \\limits_{i &lt; j} \\max\\{0, \\text{dis}(i,j) - (\\text{dis}(i,u)+1+\\text{dis}(v,j)), \\text{dis}(i,j)-(\\text{dis}(i,v)+1+\\text{dis}(u,j))\\}\\)\uff0c\u5176\u4e2d \\(\\text{dis}(i,j)\\) \u662f\u539f\u5716\u4e2d \\(i\\) \u8207 \\(j\\) \u7684\u6700\u77ed\u8ddd\u96e2\uff0c\u53ef\u4ee5 \\({O}(n^3)\\) \u9810\u8655\u7406\u3002</p> <p>\u3010\u6eff\u5206\u89e3: \\({O}(n^3)\\)\u3011</p> <p>\u6211\u5011\u4f86\u8b49\u660e\u770b\u770b\u662f\u5426\u5f9e\u5169\u908a\u904e\u4f86\u7684\u8def\u5f91\u90fd\u5b58\u5728\uff08\u4eff\u9020 2024 JOI pB\uff09\uff0c\u5047\u8a2d \\(\\text{dis}(i\\rightarrow j) = k\\)\uff1a</p> <p>\u8b49\u660e\uff1a\u5f9e \\(i \\rightarrow u \\rightarrow v \\rightarrow j\\) \u6216 \\(i \\rightarrow v \\rightarrow u \\rightarrow j\\) \u7686\u5b58\u5728\u66f4\u77ed\u7684\u8def\u5f91</p> \\[ \\begin{align} &amp;\\begin{cases} \\text{dis}(i \\rightarrow u) + \\ell + \\text{dis}(v \\rightarrow j) \\leq k \\\\ \\text{dis}(i \\rightarrow v) + \\ell + \\text{dis}(u \\rightarrow j) \\leq k \\end{cases} \\\\ \\Rightarrow&amp;\\begin{cases} \\text{dis}(i \\rightarrow u) + \\text{dis}(v \\rightarrow j) \\leq k - \\ell \\\\ \\text{dis}(i \\rightarrow v) + \\text{dis}(u \\rightarrow j) \\leq k - \\ell \\end{cases} \\\\ \\Rightarrow &amp;\\space \\space\\space\\text{dis}(i \\rightarrow u) + \\text{dis}(v \\rightarrow j) + \\text{dis}(i \\rightarrow v) + \\text{dis}(u \\rightarrow j) \\leq 2k - 2\\ell \\end{align} \\] <p>\u800c \\(\\text{dis}(i \\rightarrow u) + \\text{dis}(u \\rightarrow j)\\) \u6216 \\(\\text{dis}(i \\rightarrow v) + \\text{dis}(v \\rightarrow j)\\) \u81f3\u5c11\u90fd\u6703\u5927\u65bc\u7b49\u65bc \\(k\\)\uff08\u56e0\u70ba \\(i\\) \u5230 \\(j\\) \u7684\u6700\u77ed\u8def\u662f \\(k\\)\uff09\uff0c\u5047\u8a2d\u662f \\(\\text{dis}(i \\rightarrow u) + \\text{dis}(u \\rightarrow j)\\ge k\\)\uff0c\u9019\u6a23\u7684\u8a71\u53e6\u5916\u4e00\u689d  \\(\\text{dis}(i \\rightarrow v) + \\text{dis}(v \\rightarrow j)\\) \u4e00\u5b9a \\(\\le k-2\\ell\\)\uff0c\u56e0\u70ba\u9019\u984c \\(\\ell =1\\)\uff0c\u6211\u5011\u767c\u73fe\u6700\u77ed\u8def\u5c45\u7136\u66f4\u77ed\u4e86\uff0c\u77db\u76fe\uff0c\u6240\u4ee5\u53ea\u6703\u5b58\u5728\u4e00\u689d\u3002</p> <p>\u4e5f\u5c31\u662f\u8aaa\uff0c\u6211\u5011\u5728\u7b97\u7e3d\u82b1\u8cbb\u6e1b\u5c11\u591a\u5c11\u7684\u6642\u5019\u53ef\u4ee5\u6539\u70ba\u8a08\u7b97 \\(\\sum \\limits_{i,j}\\max\\{ 0,\\text{dis}(i,j)-(\\text{dis}(i,u)+1+\\text{dis}(v,j))\\}\\)\uff0c\u6ce8\u610f\u9019\u88e1\u7684 \\((i,j)\\) \u662f\u7121\u5e8f\u7684\u3002\u9019\u7a2e\u8981\u679a\u8209\u597d\u5e7e\u500b\u8b8a\u6578\u7684\u6211\u5011\u6703\u60f3\u8981\u8a66\u8457\u679a\u8209\u5176\u4e2d\u5e7e\u500b\uff0c\u53e6\u5916\u4e00\u500b\u4f7f\u7528\u985e\u4f3c\u8cc7\u6599\u7d50\u69cb\u512a\u5316\u3002\u8003\u616e\u56fa\u5b9a \\(i,v\\)\uff0c\u90a3\u9ebc \\(j,u\\) \u4e4b\u9593\u662f\u7368\u7acb\u7684\uff0c\u6211\u5011\u53ef\u4ee5\u62c6\u6210 \\(\\max\\{ 0,(\\text{dis}(i,j)-\\text{dis}(v,j)-1) - \\text{dis}(i,u)\\}\\)\u3002\u554f\u984c\u5c31\u8b8a\u6210\uff0c\u5c0d\u65bc\u6bcf\u500b \\(a_u\\)\uff0c\u6c42 \\(\\sum \\limits_{j} \\max\\{ 0,b_j-a_u\\}\\) \u7684\u7e3d\u548c\u3002\u9019\u53ef\u4ee5\u7528 counting sort + two pointer \u5728\u7dda\u6027\u6642\u9593\u5167\u89e3\u6c7a\uff0c\u5177\u9ad4\u4f86\u8aaa\uff0c\u5c31\u662f\u7528\u4e00\u500b bucket \u5148\u9810\u8655\u7406\u597d\u5c0d\u65bc\u6bcf\u500b\u6578\u5b57 \\(t\\)\uff0c\\(b_j\\ge t\\) \u7684 \\(b_j\\) \u7e3d\u548c\uff0c\u8207\u6709\u5e7e\u500b\u7b26\u5408\u7684 \\(b_j\\)\uff0c\u5c0d\u65bc \\(a_u\\) \u5c31\u662f\u53bb\u770b \\(\\text{sum}(t)-\\text{cnt}(t)\\cdot a_u\\)\u3002\u7e3d\u8907\u96dc\u5ea6\u662f\u679a\u8209\u6240\u6709 \\(i,v\\) \u6240\u9700\u7684 \\({O}(n^2)\\)\uff0c\u63a5\u8457 \\(O(n)\\) \u679a\u8209 \\(j\\) \u53bb\u9810\u8655\u7406 bucket\uff0c\u7136\u5f8c\u5728\u9810\u8655\u7406\u597d\u5f8c\u518d \\(O(n)\\) \u5c0d\u65bc\u6bcf\u500b \\(u\\) \u67e5\u8868\u8a08\u7b97\uff0c\u6240\u4ee5\u6574\u9ad4\u8907\u96dc\u5ea6\u5c31\u662f \\({O}(n^2\\cdot (n + n))=O(n^3)\\)\u3002</p> <p>\u53c3\u8003: https://omeletwithoutegg.github.io/2021/09/22/toi-2021-sols/#p1-shortcut</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\nconst int MAXN = 505, inf = 1e9;\n\nint dis[MAXN][MAXN];\nint ans[MAXN][MAXN];\nint sum[MAXN];\nint cnt[MAXN];\nint n, m;\n\nsigned main() {\n    ios_base::sync_with_stdio(0), cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            if (i != j) {\n                dis[i][j] = inf;\n            }\n        }\n    }\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        u--, v--;\n        dis[u][v] = dis[v][u] = 1;\n    }\n    for (int k = 0; k &lt; n; k++) {\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n            }\n        }\n    }\n    for (int i = 0; i &lt; n; i++) {\n        for (int v = 0; v &lt; n; v++) {\n            for (int j = 0; j &lt; n; j++) {\n                sum[j] = cnt[j] = 0;\n            }\n            for (int j = 0; j &lt; n; j++) {\n                int d = dis[i][j] - dis[v][j] - 1;\n                if (d &lt; 0) continue;\n                cnt[d] += 1;\n                sum[d] += d;\n            }\n            for (int j = n - 1; j &gt;= 0; j--) {\n                sum[j] += sum[j + 1], cnt[j] += cnt[j + 1];\n            }\n            for (int u = 0; u &lt; v; u++) {\n                int d = dis[i][u];\n                ans[u][v] += sum[d] - cnt[d] * d;\n            }\n        }\n    }\n\n    int mx = -1;\n    int cnt = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i + 1; j &lt; n; j++) {\n            if (ans[i][j] == mx) {\n                cnt++;\n            } else if (ans[i][j] &gt; mx) {\n                mx = ans[i][j], cnt = 1;\n            }\n        }\n    }\n    cout &lt;&lt; cnt &lt;&lt; ' ' &lt;&lt; mx &lt;&lt; '\\n';\n}\n/*\n5 4\n1 2\n2 3\n3 4\n2 5\n\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n*/\n</code></pre>"},{"location":"graph/sp/#_10","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://drive.google.com/file/d/1a1mgK8KFJWNoXATHwi3E6ceStn22QmZl/view</p> </li> <li> <p>https://drive.google.com/file/d/1q2mP9uHYAauroE2mjtYKti9khs0H9qaJ/view</p> </li> <li> <p>https://slides.com/peter940324/deck-f0e69c#/3/18</p> </li> <li> <p>IOIC 2023</p> </li> <li> <p>sprout 2023</p> </li> </ul> <ol> <li> <p>\u9019\u662f\u7b46\u8005\u5f9e\u4e2d\u570b\u535a\u5ba2\u6284\u4f86\u7684\uff0c\u4e0d\u77e5\u9053\u5be6\u969b\u4e0a\u5be6\u4e0d\u5be6\u7528\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"graph/topo_sort/","title":"Topological Sorting","text":""},{"location":"graph/topo_sort/#_1","title":"\u5f15\u5165","text":"<p>\u62d3\u64b2\u6392\u5e8f\u662f\u4e00\u7a2e\u7528\u65bc\u6709\u5411\u7121\u74b0\u5716\uff08DAG\uff09\u7684\u6392\u5e8f\u65b9\u6cd5\uff0c\u5b83\u80fd\u5920\u5c07\u5716\u4e2d\u7684\u7bc0\u9ede\u6309\u7167\u4e00\u5b9a\u7684\u9806\u5e8f\u6392\u5217\uff0c\u4f7f\u5f97\u5c0d\u65bc\u4efb\u610f\u4e00\u689d\u5f9e\u7bc0\u9ede \\(u\\) \u5230\u7bc0\u9ede \\(v\\) \u7684\u6709\u5411\u908a\uff0c\u7bc0\u9ede \\(u\\) \u5728\u6392\u5e8f\u7d50\u679c\u4e2d\u51fa\u73fe\u5728\u7bc0\u9ede \\(v\\) \u7684\u524d\u9762\u3002\u63db\u53e5\u8a71\u8aaa\uff0c\u62d3\u64b2\u6392\u5e8f\u78ba\u4fdd\u4e86\u5716\u4e2d\u6240\u6709\u7684\u4f9d\u8cf4\u95dc\u4fc2\u90fd\u5f97\u5230\u4e86\u6eff\u8db3\u3002\u7531\u65bc\u5728\u4e00\u500b DAG \u4e2d\u53ef\u80fd\u5b58\u5728\u591a\u7a2e\u62d3\u64b2\u6392\u5e8f\uff0c\u56e0\u6b64\u62d3\u64b2\u6392\u5e8f\u7684\u7d50\u679c\u4e0d\u4e00\u5b9a\u552f\u4e00\u3002</p> <p>\u62d3\u64b2\u6392\u5e8f\u7684\u76ee\u6a19\u662f\u627e\u5230\u4e00\u500b\u7bc0\u9ede\u7684\u9806\u5e8f \\(v_1, v_2, \\ldots, v_n\\)\uff0c\u4f7f\u5f97\u5c0d\u65bc\u6240\u6709 \\(i &gt; j\\)\uff0c\u5716\u4e0a\u4e0d\u5b58\u5728\u5f9e \\(v_i\\) \u5230 \\(v_j\\) \u7684\u8def\u5f91\u3002\u9019\u6a23\u7684\u6392\u5e8f\u5e8f\u5217\u53ef\u4ee5\u901a\u904e\u4e0d\u65b7\u5c07\u5165\u5ea6\u70ba 0 \u7684\u7bc0\u9ede\u52a0\u5165\u6392\u5e8f\u5e8f\u5217\u4e2d\uff0c\u4e26\u5f9e\u5716\u4e2d\u522a\u9664\u9019\u4e9b\u7bc0\u9ede\u53ca\u5176\u76f8\u9023\u7684\u908a\u4f86\u5be6\u73fe\u3002</p> <p></p> <p>\u7c21\u55ae\u4f86\u8aaa\uff0c\u62d3\u64b2\u6392\u5e8f\u5c31\u662f\u5c07 DAG \u4e2d\u7684\u7bc0\u9ede\u6309\u7167\u4f9d\u8cf4\u95dc\u4fc2\u7684\u5148\u5f8c\u9806\u5e8f\u9032\u884c\u6392\u5e8f\u7684\u4e00\u7a2e\u7b97\u6cd5\u3002</p> <p>\u62d3\u6a38\u6392\u5e8f\u5224\u74b0</p> <p>\u57f7\u884c\u62d3\u6a38\u6392\u5e8f\uff0c\u82e5\u8ff4\u5708\u7d50\u675f\u6642\u5224\u65b7\u5df2\u7d93\u9020\u8a2a\u7684\u7d50\u9ede\u6578\u662f\u5426\u7b49\u65bc n\u3002\u7b49\u65bc n \u8aaa\u660e\u5168\u90e8\u7d50\u9ede\u90fd\u88ab\u8a2a\u554f\u904e\uff0c\u7121\u74b0\uff1b\u53cd\u4e4b\uff0c\u5247\u6709\u74b0\u3002</p>"},{"location":"graph/topo_sort/#level","title":"\u540c\u4e00\u500b level \u7684\u653e\u4e00\u8d77","text":"<p>\u67d0\u4e9b\u984c\u76ee\u6703\u8981\u6c42\u4e00\u500b level \u4e00\u500b level \u505a\u4e8b\u60c5\uff0c\u5728\u9019\u7a2e\u60c5\u6cc1\uff0c\u6211\u5011\u4f7f\u7528\u5169\u500b queue\uff0c\u4e00\u500b\u5b58\u7576\u524d level \u7684 node\uff0c\u4e00\u500b\u5b58\u4e4b\u524d level \u7684 node\uff0c\u7576\u4e00\u5c64 level \u8dd1\u5b8c\u5f8c\uff0c\u518d\u5c07\u5169\u500b queue \u7684\u6771\u897f\u4e92\u63db\u3002</p> code <pre><code>void topo() {\n    queue&lt;int&gt; q;\n    while (q.size()) {\n        queue&lt;int&gt; nq;\n        while(q.size()) {\n            auto u = q.front(); \n            q.pop();\n\n            for (auto v : G[u]) {\n                deg[v]--;\n                if (deg[v] == 0) {\n                    nq.push(v);\n                }\n            }\n        }\n        q = nq;\n    }\n}\n</code></pre>"},{"location":"graph/topo_sort/#_2","title":"\u62d3\u6a38\u6392\u5e8f\u7684\u5b57\u5178\u5e8f\u554f\u984c","text":"<p>\u4ee5\u4e0b\u5169\u500b\u984c\u770b\u4f3c\u90fd\u662f\u5b57\u5178\u5e8f\u554f\u984c\uff0c\u4f46\u662f\u6709\u5dee\u5225\u7684\u3002</p> \u554f\u984c\u4e00 <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a DAG\uff0c\u8f38\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u62d3\u6a38\u6392\u5e8f</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u540c\u6642\u7528 priority queue\uff08\u5c0f\u9802\u5806\uff09\uff0c\u9019\u6a23\u5c31\u80fd\u4fdd\u8b49\uff0c\u62d3\u6a38\u5e8f\u5217\u4e0d\u552f\u4e00\u6642\uff0c\u7de8\u865f\u5c0f\u7684\u512a\u5148\uff0c\u5373\u5b57\u5178\u5e8f\u6700\u5c0f\u3002</p> \u554f\u984c\u4e8c CSES - Course Schedule II <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a DAG\uff0c\u8f38\u51fa\u62d3\u6a38\u6392\u5e8f\uff0c\u6eff\u8db3\u7de8\u865f\u5c0f\u7684\u76e1\u91cf\u9760\u524d</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5\\)</p> \u984c\u610f\u89e3\u91cb <p> </p> <p>\u5f88\u660e\u986f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u662f [1, 3, 4, 2]\u3002\u4f46\u537b\u4e0d\u662f\u672c\u984c\u7684\u7b54\u6848\uff0c\u56e0\u70ba\u672c\u984c\u8981\u6c42\u300c\u7de8\u865f\u5c0f\u7684\u76e1\u91cf\u9760\u524d\u300d\uff0c\u7de8\u865f 2 \u9084\u53ef\u4ee5\u63d0\u524d\u7684\uff0c\u6240\u4ee5 [1, 4, 2, 3] \u624d\u662f\u6b63\u78ba\u7684\u5e8f\u5217\u3002</p> \u601d\u8def <p> </p> <p>\u770b\u4e0a\u5716\uff0c\u6211\u5011\u5f9e 1 \u958b\u59cb\u8d70\uff0c\u9130\u63a5\u9ede 3 \u548c 4\uff0c\u6211\u5011\u4e0d\u77e5\u9053\u5f8c\u9762\u9084\u6709\u500b 2\uff0c\u6240\u4ee5\u4e0d\u77e5\u9053 3\u548c 4 \u5148\u9078\u8ab0\uff0c\u6545\u6b63\u5411\u5c0b\u627e\u662f\u932f\u7684\u3002</p> <p>\u6211\u5011\u767c\u73fe\u5f9e\u6b63\u5411\u8003\u616e\u6c92\u6709\u8fa6\u6cd5\u8003\u616e\u5230\u5f8c\u9762\u6240\u9020\u6210\u7684\u7d50\u679c\u3002\u6240\u4ee5\u6211\u5011\u5617\u8a66\u53cd\u5411\u8d70\uff0c\u5f9e\u6700\u5f8c\u9762\u5f80\u524d\u8d70\uff0c\u512a\u5148\u8d70\u7de8\u865f\u5927\u7684\u3002\u6700\u5f8c\u628a\u5e8f\u5217\u5012\u8457\u8f38\u51fa\uff0c\u5982\u6b64\uff0c\u5c31\u6eff\u8db3\u4e86\u672c\u984c\u3002</p> <p> \u53e6\u4e00\u500b\u4f8b\u5b50\uff0c\u52a9\u65bc\u7406\u89e3 </p> <p>\u6b63\u78ba\u6027\u8aaa\u660e:  \u8d70\u4e0d\u5230 u \u7684\u4eba\u6211\u4e00\u5b9a\u53ef\u4ee5\u8b93\u5b83\u653e\u5728 u \u5f8c\u9762\u3002\u67d0\u500b\u9ede\u8981\u88ab pop \u6389\u4e86\uff0c\u4ee3\u8868\u8d70\u4e0d\u5230\u4ed6\u7684\u4e14\u6bd4\u4ed6\u5927\u7684\u90fd\u8d70\u5b8c\u4e86\u3002\u6240\u4ee5\u5269\u4e0b\u7684\u53ea\u6709\u53ef\u80fd\u662f</p> <ul> <li>\u8d70\u7684\u5230 u \u7684</li> <li>\u8d70\u4e0d\u5230 u \u4f46\u6bd4 u \u5c0f\u7684\uff0c\u9019\u6642\u5019\u6211\u5011\u5c07 u \u653e\u5728\u8d8a\u5f8c\u9762\u8d8a\u597d</li> </ul> <p>\u53c3\u8003: https://blog.csdn.net/winter2121/article/details/79437927</p>"},{"location":"graph/topo_sort/#_3","title":"\u4f8b\u984c","text":"CSES - Acyclic Graph Edges <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7121\u5411\u5716\uff0c\u5c07\u908a\u5b9a\u5411\u4f7f\u5716\u662f\u7121\u74b0\u7684</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6839\u64da\u62d3\u6a38\u6392\u5e8f\u7684\u6027\u8cea\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u6bcf\u689d\u908a\u90fd\u5b9a\u70ba\u5c0f\u7684\u9023\u5230\u5927\u7684\u65b9\u5411</p> 2023 \u5168\u570b\u8cfd C. \u8207\u81ea\u52d5\u8f14\u52a9\u99d5\u99db\u66a2\u904a\u4e16\u754c (Autocopilot) <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7684\u6709\u5411\u5716\uff0c\u6709\u4e00\u500b\u6a5f\u5668\u4eba\u8981\u5f9e\u8d77\u9ede s \u8ddf\u7d42\u9ede t\u3002\u7576\u9047\u5230\u53c9\u8def\uff0c\u4ed6\u6703\u96a8\u6a5f\u8d70\u5176\u4e2d\u4e00\u689d\uff0c\u800c\u6211\u5011\u53ef\u4ee5\u82b1\u8cbb\u4e00\u500b\u786c\u5e63\uff0c\u53ef\u4ee5\u5f37\u5236\u6c7a\u5b9a\u4ed6\u8981\u8d70\u7684\u65b9\u5411\uff0c\u554f\u81f3\u5c11\u8981\u5e36\u591a\u5c11\u9322\uff0c\u624d\u53ef\u4ee5\u4fdd\u8b49\u4e0d\u6703\u8d70\u5230\u6b7b\u8def</p> <p>\\(n\\le 3000, m\\le 3\\times 10^4\\)</p> \u601d\u8def <p>\u3010Subtask: \u5716\u662f DAG\u3011</p> <p>\u5148\u5224\u65b7: </p> <ul> <li> <p>\u54ea\u4e9b\u9ede\u662f\u4e00\u5b9a\u8d70\u4e0d\u5230 t\uff0cdead node</p> </li> <li> <p>\u54ea\u4e9b\u9ede\u662f\u6709\u6a5f\u7387\u8d70\u5230 t</p> </li> <li> <p>\u54ea\u4e9b\u9ede\u662f\u4e00\u5b9a\u8d70\u5f97\u5230 t</p> </li> </ul> <p>\u9019\u53ef\u4ee5\u5229\u7528\u5f9e out degree = 0 \u7684 node \u53bb dfs \u51fa\u53bb\u4f86\u5224\u65b7\u3002\u4e4b\u5f8c\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u5229\u7528 DAG dp \u4f86\u770b\u6bcf\u500b\u9ede\u6700\u5c11\u8981\u4ed8\u591a\u5c11\u9322\u3002\u4ee4 dp(u) \u5f9e u \u8d70\u5230\u7d42\u9ede t\uff0c\u6700\u5c11\u8981\u4ed8\u591a\u5c11\u9322\uff0c\u6211\u5011\u53ef\u4ee5\u5217\u51fa\u8f49\u79fb\u5f0f:</p> <ul> <li> <p>\u5982\u679c u \u4e0d\u53ef\u80fd\u8d70\u5230 t, dp(u) = INF</p> </li> <li> <p>dp(u) = \\(\\min_{u\u2192v} \\{\\) </p> <ul> <li> <p>\u8981\u82b1\u9322\uff0c\\(1 + \\min\\{ dp(v) \\}\\)</p> </li> <li> <p>\u4e0d\u82b1\u9322 \\(\\max\\{ dp(v) \\}\\)</p> </li> </ul> </li> </ul> USACO 2013 JAN Party Invitations S <p>\u6709 n \u982d\u725b\uff0c\u6bcf\u982d\u725b\u6709\u5b83\u81ea\u5df1\u7684\u670b\u53cb\u5708\uff0c\u6c92\u6709\u4e00\u500b\u5b8c\u5168\u8207\u4e4b\u76f8\u540c\u7684\u3002\u5047\u8a2d\u8a72\u725b\u670b\u53cb\u5708\u6709 k \u982d\u725b\uff0c\u82e5\u5df2\u7d93\u9080\u8acb\u4e86 k - 1 \u982d\uff0c\u90a3\u9ebc\u5269\u4e0b\u7684\u90a3\u982d\u725b\u4e5f\u5f97\u9080\u8acb\u3002\u554f\u518d\u9080\u8acb 1 \u865f\u725b\u7684\u60c5\u6cc1\u4e0b\uff0c\u6700\u5c11\u9700\u8981\u9080\u8acb\u591a\u5c11\u982d\u4e73\u725b?</p> <p>\\(n\\leq 10^6, \\sum k \\leq 2.5 \\times 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u628a\u6bcf\u982d\u725b\u60f3\u6210\u662f\u4e00\u500b\u72c0\u614b\uff0c\u5229\u7528\u62d3\u6a38\u6392\u5e8f\u89e3\u6c7a\u554f\u984c\u3002\u6211\u5011\u5229\u7528 vector \u5b58\u8207 i \u6709\u95dc\u7684\u670b\u53cb\u5708\u7de8\u865f\uff0c\u7528 set \u5b58\u670b\u53cb\u5708\u7684\u96c6\u5408\u3002</p> <p>\u7b2c\u4e00\u6b21\u5c31\u662f\u5c07 1 \u52a0\u5165 queue\uff0c\u7136\u5f8c\u5faa\u74b0 vector\uff0c\u628a\u5faa\u74b0\u5230\u7684\u96c6\u5408\u4e2d\u7684 1 \u90fd\u522a\u53bb\uff0c\u5224\u65b7\u522a\u53bb\u5f8c\u7684\u96c6\u5408\u5927\u5c0f\u662f\u5426\u70ba 1\uff0c\u5982\u679c\u5927\u5c0f\u662f 1\uff0c\u5c31\u5165\u968a\uff0c\u91cd\u8907\u64cd\u4f5c\u3002\u5751\u9ede\u5c31\u662f\uff0c\u51fa\u4f86\u7684\u53ef\u80fd\u6703\u88ab\u91cd\u8907\u505a\uff0c\u52a0\u4e00\u500b\u9663\u5217\u5224\u65b7\u4e00\u4e0b\u662f\u5426\u5df2\u7d93\u9078\u4e86\u9019\u982d\u5976\u725b\u3002</p> code <pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;set&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint n, m, ans, vis[1000005];\nset&lt;int&gt; s[250005];\nvector&lt;int&gt; G[1000005];\nqueue&lt;int&gt; q;\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int t;\n        cin &gt;&gt; t;\n        for (int j = 1; j &lt;= t; j++) {\n            int x;\n            cin &gt;&gt; x;\n            G[x].push_back(i);\n            s[i].insert(x);\n        }\n    }\n    q.push(1);\n    vis[1] = 1;\n    while (!q.empty()) {\n        int now = q.front();\n        q.pop();\n        ans++;\n        for (int i = 0; i &lt; G[now].size(); i++) {\n            s[G[now][i]].erase(now);\n            if (s[G[now][i]].size() == 1 &amp;&amp; !vis[*s[G[now][i]].begin()]) {\n                int t = *s[G[now][i]].begin();\n                q.push(t);\n                vis[t] = 1;\n            }\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre> <ul> <li>JOI 2016 p3</li> <li>2015 nhspc p5</li> <li>2022 toi mock 1 pA</li> <li>2021 nhspc pD</li> </ul>"},{"location":"graph/tree_centriod/","title":"\u6a39\u91cd\u5fc3","text":""},{"location":"graph/tree_centriod/#_1","title":"\u5f15\u5165","text":"CSES - Finding a Centroid <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u8f38\u51fa\u6a39\u91cd\u5fc3</p> <p>\\(1\\le n\\le 2\\times 10^5\\)</p> <p>\u4ee5\u6bcf\u500b\u9ede\u7576 root \u6642\u7684\u6700\u5927\u5b50\u6a39\u5927\u5c0f\uff0c\u9019\u500b\u503c\u6700\u5c0f\u7684\u9ede\u7a31\u6a39\u91cd\u5fc3</p>"},{"location":"graph/tree_centriod/#_2","title":"\u8b49\u660e","text":""},{"location":"graph/tree_centriod/#1","title":"\u5f15\u7406 1","text":"<p>\u3010\u5f15\u7406 1\u3011 : \u5c07\u6a39\u91cd\u5fc3\u62d4\u6389\u5f8c\uff0c\u6bcf\u500b\u9023\u901a\u584a\u7684 size \\(\\le \\lfloor \\frac{n}{2} \\rfloor\\)</p> <p>\u53cd\u8b49\u6cd5\uff0c\u4ee4 size \u6703 &gt; n/2\uff0c\u5f80 size &gt; n/2 \u7684\u65b9\u5411\u4e00\u76f4\u79fb\u52d5\uff0c\u6700\u5f8c\u6703\u5230\u4e00\u500b threshold\uff0c\u6eff\u8db3\u5b50\u6a39 size \u90fd &lt;= n / 2\uff0c\u4ee5\u9019\u500b\u9ede\u7576\u6a39\u91cd\u5fc3\u986f\u7136\u66f4\u597d</p> <p></p>"},{"location":"graph/tree_centriod/#2","title":"\u5f15\u7406 2","text":"<p>\u3010\u5f15\u7406 2-1\u3011 : \u7576\u67d0\u500b\u9ede u \u62d4\u6389\u5f8c\uff0c\u6bcf\u500b\u9023\u901a\u584a\u7684 size \\(\\le \\lfloor \\frac{n}{2} \\rfloor\\)\uff0cu \u662f\u6a39\u91cd\u5fc3</p> <p>\u3010\u5f15\u7406 2-2\u3011 : \u9019\u7a2e u \u81f3\u591a\u6709\u5169\u500b\uff0c\u4e14\u9019\u5169\u500b\u91cd\u5fc3\u76f8\u9130</p> <p>\u5047\u8a2d\u6a39\u91cd\u5fc3\u7576 v \u6703\u66f4\u597d\uff0c\u56e0\u70ba\u6700\u5927\u5b50\u6a39\u8d8a\u5c0f\u8d8a\u597d\uff0c\u6240\u4ee5 v \u6703\u60f3\u5728 u \u4ee5\u4e0b\u7684\u6700\u5927\u5b50\u6a39\u5167\uff0c\u9019\u6a23\u91cd\u65b0\u5b9a\u6839\u6642\u5c31\u53ef\u4ee5\u628a\u6700\u5927\u5b50\u6a39\u8b8a\u5f97\u66f4\u5c0f\u3002\u7576\u6211\u5011\u91cd\u65b0\u5b9a\u6839\u5f8c\uff0c\u6703\u767c\u73fe\u65c1\u908a\u7684\u5b50\u6a39\u806f\u96c6\u8d77\u4f86\u7684 size \u662f n - (&lt;= n/2) \u6703 &gt;= n / 2\uff0c\u986f\u7136 &gt; n/2 \u7684 case \u90fd\u4e0d\u5408\u6cd5\uff0c\u6211\u5011\u5c31\u53ea\u8003\u616e = n/2\uff0c\u6b64\u6642 v \u662f\u4e00\u500b\u5408\u6cd5\u7684\u6a39\u91cd\u5fc3\uff0c\u7576 v \u60f3\u5728\u505a\u4e00\u6a23\u7684\u4e8b\u60c5\u6642\uff0c\u53ea\u80fd\u5f80 u \u6240\u5728\u7684\u5b50\u6a39\u79fb\u52d5\uff0c\u53c8\u6703\u8b8a\u6210\u4ee5 u \u70ba\u6839\u7684\u6a39\u91cd\u5fc3\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5f97\u77e5\uff0c\u6700\u591a\u53ea\u6703\u6709\u5169\u500b\u6a39\u91cd\u5fc3</p> <p></p>"},{"location":"graph/tree_centriod/#_3","title":"\u5be6\u4f5c","text":"code <pre><code>vector&lt;int&gt; centriods;\nvoid dfs(int u, int par) {\n    sz[u] = 1;\n    int mx = 0;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs(v, u);\n        sz[u] += sz[v];\n        mx = max(w, sz[v]);\n    }\n    mx = max(n - sz[v], mx);\n    if (mx &lt;= n / 2) {\n        centriods.push_back(u);\n    }\n}\n</code></pre>"},{"location":"graph/tree_diameter/","title":"\u6a39\u76f4\u5f91","text":"CSES - Tree Diameter <p>\u7d66\u4e00\u9846 \\(n\\) \u9ede\u7684\u6a39\uff0c\u6c42\u6a39\u76f4\u5f91</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u5169\u6b21 dfs code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 2e5 + 5;\nvector&lt;int&gt; G[MAXN];\n\nint x = 0;\nint mx = 0;\nvoid dfs(int u, int par, int dist) {\n    if (dist &gt; mx) {\n        mx = dist;\n        x = u;\n    }\n    for (int v : G[u]) {\n        if (v == par) continue;\n        dfs(v, u, dist + 1);\n    }\n}\n\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n - 1; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        u--;\n        v--;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n\n    dfs(0, -1, 0);\n    mx = 0;\n    dfs(x, -1, 0);\n\n    cout &lt;&lt; mx &lt;&lt; endl;\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> dp code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int maxn = 1e6;\n\nint n, ans = 0, h[maxn], dp[maxn];\nvector&lt;int&gt; G[maxn];\n\nvoid dfs(int u, int par) {\n    int mx = 0, sec = 0;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs(v, u);\n\n        if (dp[v] &gt; mx) {\n            sec = mx;\n            mx = dp[v];\n        } else if (dp[v] &gt; sec) {\n            sec = dp[v];\n        }\n    }\n    dp[u] = mx + 1;\n    ans = max(ans, mx + sec);\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    int u, v;\n    for (int i = 0; i &lt; n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    dfs(1, 1);\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> <p>\u82e5\u908a\u6b0a\u6709\u8ca0\uff0c\u8981\u7528\u6a39 dp\uff0c\u4e0d\u80fd\u7528\u5169\u6b21 DFS</p>"},{"location":"graph/tree_diameter/#_1","title":"\u984c\u76ee","text":"<p>\u9019\u7bc7 CF Blog \u4e0a\u9762\u7684</p> CF 1085 D.A Wide, Wide Graph <p>\u7d66\u4e00\u9846\u6709 \\(n\\) \u500b\u9ede\u7684\u6a39</p> <p>\u5b9a\u7fa9 \\(G_k\\) \u70ba : \u6709\u5e7e\u500b\u9ede \\(u\\) \u81f3\u5c11\u5b58\u5728\u4e00\u500b\u9ede\u8207\u4ed6\u8ddd\u96e2 \\(\\ge k\\) </p> <p>\u4f9d\u5e8f\u6c42 \\(G_1,\\ldots,G_n\\)</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u53ea\u8981\u6c42\u51fa\u5c0d\u65bc\u6bcf\u500b\u9ede\uff0c\u8207\u4ed6\u8ddd\u96e2\u6700\u9060\u7684\u9ede\u7684\u8ddd\u96e2\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define s second\n#define f first\n#define pii pair&lt;int,int&gt;\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f, MAXN = 1e5 + 5, M = 1e9 + 7;\nint t, n, m, dis[MAXN], mx[MAXN];\nvector&lt;vector&lt;int&gt;&gt; G(MAXN);\n\nint dfs(int u, int p, int d) {\n    int ans = u;\n    dis[u] = max (d, dis[u]);\n\n    for (auto v : G[u]) {\n        if (v != p) {\n            int tmp = dfs(v, u, d + 1);\n\n            if (dis[tmp] &gt; dis[ans]) {\n                ans = tmp;\n            }\n        }\n    }\n\n    return ans;\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    t = 1;\n\n    while (t--) {\n        cin &gt;&gt; n;\n\n        for (int i = 0, u, v; i &lt; n - 1; i++) {\n            cin &gt;&gt; u &gt;&gt; v;\n            G[u].push_back(v);\n            G[v].push_back(u);\n        }\n\n        int s = dfs(1, 0, 0);\n        int t = dfs(s, 0, 0);\n        dfs(t, 0, 0);\n\n        sort(dis + 1, dis + 1 + n);\n        int x = 0;\n\n        for (int i = 1; i &lt;= n; i++) {\n            while (x &lt;= n &amp;&amp; dis[x] &lt; i) {\n                x++;\n            }\n\n            if (x &gt; n)\n                cout &lt;&lt; n &lt;&lt; \" \";\n            else\n                cout &lt;&lt; x &lt;&lt; \" \";\n        }\n    }\n}\n</code></pre> 2020 TOI pB.\u5efa\u8a2d\u4eba\u5de5\u5cf6 <p>\u7d66 \\(n\\) \u500b\u9ede\uff0c\u908a\u6709\u6b0a\u91cd\u7684\u6a39\uff0c\u6c42\u56b4\u683c\u6b21\u9577\u6a39\u76f4\u5f91</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u5229\u7528\u6a39 dp \u627e\u6a39\u76f4\u5f91\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u591a\u4fdd\u7559\u7576\u524d\u6b21\u9577\u5f97\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 2e18;\nconst int MAXN = 1e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Node {\n    int mx, sec;\n};\n\nint n, m;\nvector&lt;pair&lt;int, int&gt;&gt; G[MAXN];\nvector&lt;Node&gt; dp(MAXN);\nint vis[MAXN];\nNode ans;\n\nvoid cal(int val, Node &amp;x) {\n    if (x.mx &lt; val) {\n        x.sec = x.mx, x.mx = val;\n    } else if (val != x.mx &amp;&amp; x.sec &lt; val) {\n        x.sec = val;\n    }\n}\n\nvoid dfs(int u) {\n    vis[u] = true;\n    for (auto [v, w] : G[u]) {\n        if (vis[v] == 1) continue;\n\n        dfs(v);\n        // ans \u7684\u8f49\u79fb\u5f0f\n        cal(dp[v].mx + dp[u].mx + w, ans);\n        cal(dp[v].mx + dp[u].sec + w, ans);\n        cal(dp[u].mx + dp[v].sec + w, ans);\n\n        // update dp[u]\n        cal(dp[v].mx + w, dp[u]);\n        cal(dp[v].sec + w, dp[u]);\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    int u, v, w;\n    for (int i = 1; i &lt;= n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u++, v++;\n        G[u].push_back({v, w});\n        G[v].push_back({u, w});\n    }\n\n    dfs(1);\n    cout &lt;&lt; ans.sec &lt;&lt; \"\\n\";\n}\n</code></pre> CF 1294 F. Tree Paths on a Tree <p>\u7d66\u4f60\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u9078\u76f8\u7570\u4e09\u500b\u9ede \\(a, b, c\\)\uff0c\u4f7f\u5f97\u81f3\u5c11\u6709\u5305\u542b \\(a,b,c\\) \u5176\u4e2d\u5169\u500b\u7684 path \u6578\u91cf\u6700\u5927\uff0c\u8f38\u51fa\u6700\u5927 path \u6578\u91cf\u548c \\(a,b,c\\)\u3002</p> <p>\\(3\\le n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5176\u4e2d\u5169\u9ede\u4e00\u5b9a\u662f\u6a39\u76f4\u5f91\u7684\u5169\u7aef\u9ede\u3002\u5269\u4e0b\u4e00\u500b\u9ede\u5982\u4f55\u78ba\u5b9a\uff1f\u5230\u5169\u500b\u9ede\u8ddd\u96e2\u5408\u6700\u5927\u5373\u53ef\uff0c\u5728\u5169\u6b21 bfs \u904e\u7a0b\u4e2d\u4fdd\u7559\u5169\u500b\u7aef\u9ede\u5230\u4efb\u610f\u9ede\u7684\u8ddd\u96e2\u7136\u5f8c\u627e\u9019\u500b\u6700\u5927\u503c\u5c31\u597d</p> <p>\u6216\u8005\u4e5f\u53ef\u4ee5\u627e\u5230\u6a39\u76f4\u5f91\u5169\u7aef s, t\uff0c\u5c07\u6a39\u7528 s \u91cd\u65b0\u5b9a\u6839\uff0c\u6c42\u6bcf\u500b\u9ede u \u8207 LCA(u, t) \u7684\u8ddd\u96e2\u5373\u53ef</p> <p>\u53c3\u8003\u81ea : https://newcoder-glm.blog.csdn.net/article/details/104080663?ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0Lw%3D%3D</p>"},{"location":"graph/tree_dp/","title":"\u6a39 dp","text":"hackerrank kingdom division <p>\u7d66\u4e00\u500b \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u53ef\u4ee5\u5716\u9ed1\u8272\u6216\u767d\u8272\uff0c\u540c\u4e00\u7a2e\u984f\u8272\u4e0d\u4e00\u5b9a\u8981\u64e0\u5728\u540c\u4e00\u500b\u9023\u901a\u584a\uff0c\u4f46\u662f\u6bcf\u500b\u540c\u8272\u7684\u9023\u901a\u584a\u81f3\u5c11\u8981\u6709 \\(2\\) \u500b\u9ede\u3002\u554f\u6709\u5e7e\u7a2e\u5716\u6cd5</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\\(f(u,0/1):\\) \\(u\\) \u662f\u767d\u8272/\u9ed1\u8272\u7684\u5857\u8272\u65b9\u6cd5\u6578</p> <p>\\(g(u,0/1):\\) \\(u\\) \u662f\u767d\u8272/\u9ed1\u8272\uff0c\\(v\\) \u90fd\u662f\u8ddf \\(u\\) \u76f8\u53cd\u7684\u984f\u8272\u7684\u65b9\u6cd5\u6578</p> <p>\\(f(u,0)=g(u,0)\\times(g(v,0)+f(v,0))+f(u,0)\\times(f(v,0)+g(v,0)+f(v,1))\\) \\(f(u,1)=g(u,1)\\times(g(v,1)+f(v,1))+f(u,1)\\times(f(v,1)+g(v,1)+f(v,0))\\)</p> <p>\\(g(u,0)=g(u,0)\\times f(v,1)\\)</p> <p>\\(g(u,1)=g(u,1)\\times f(v,0)\\) </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int M = 1e9 + 7;\nconst int maxn = 1e5 + 5;\nint n, d;\nvector&lt;int&gt; G[maxn];\nint f[maxn][2], g[maxn][2];\n\nvoid dfs(int u = 1, int par = 0) {\n    g[u][0] = g[u][1] = 1;\n    f[u][0] = 0, f[u][1] = 0;\n\n    for (auto v : G[u]) {\n        if (par == v) continue;\n\n        dfs(v, u);\n        f[u][0] = (g[u][0] * (g[v][0] + f[v][0])) % M + \n                  (f[u][0] * (f[v][0] + g[v][0] + f[v][1])) % M;\n        f[u][0] %= M;\n\n        f[u][1] = (g[u][1] * (g[v][1] + f[v][1])) % M + \n                  (f[u][1] * (f[v][1] + g[v][1] + f[v][0])) % M;\n        f[u][1] %= M;\n\n        g[u][0] *= f[v][1];\n        g[u][0] %= M;\n\n        g[u][1] *= f[v][0];\n        g[u][1] %= M;\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n\n    for (int i = 0; i &lt; n - 1; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n\n    dfs();\n    cout &lt;&lt; (f[1][0] + f[1][1]) % M &lt;&lt; \"\\n\";\n}\n</code></pre> CF 461B Appleman and Tree <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u662f\u767d\u8272\u6216\u8005\u9ed1\u8272\uff0c\u554f\u6709\u591a\u5c11\u7a2e\u65b9\u6848\u80fd\u5920\u901a\u904e\u53bb\u6389\u4e00\u4e9b\u908a\uff0c\u4f7f\u6bcf\u500b\u806f\u901a\u584a\u4e2d\u53ea\u6709\u4e00\u500b\u9ed1\u8272\u7684\u9ede</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\\(dp[u][0/1]:\\) \u7576\u524d \\(u\\) \u6240\u5728\u7684\u9023\u901a\u584a\u6709 \\(0/1\\) \u500b\u9ed1\u9ede\u7684\u5207\u908a\u65b9\u6cd5\u6578</p> <p>\u6280\u5de7 : \u5229\u7528\u4e4b\u524d\u7684\u72c0\u614b\u5408\u4f75</p> <pre><code>void dfs(int u, int par) {\n    if (a[u]) dp[u][1] = 1;\n    else dp[u][0] = 1;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs(v, u);\n\n        dp[u][1] = ((dp[u][1] * (dp[v][0] + dp[v][1])) % M \n                    + (dp[u][0] * dp[v][1]) % M) % M;\n        dp[u][0] = (dp[u][0] * (dp[v][0] + dp[v][1])) % M;\n    }\n}\n</code></pre> vijos 1892 \u6811\u4e0a\u7684\u6700\u5927\u5339\u914d <p>\u7d66 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u554f\u6700\u591a\u53ef\u4ee5\u9078\u5e7e\u689d\u908a\u6eff\u8db3\u90fd\u6bcf\u500b\u9ede\u53ea\u6709\u6700\u591a\u4e00\u689d\u8207\u4e4b\u76f8\u9023\u7684\u908a\u6709\u9078\uff0c\u8f38\u51fa\u6700\u591a\u53ef\u4ee5\u9078\u5e7e\u689d\u908a\u8207\u65b9\u6848\u6578</p> <p>\\(n\\le 1.5\\times 10^6\\)</p> CF 1856 E1. PermuTree (easy version) <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684 Tree\uff0c\u554f\u5c0d\u65bc\u6240\u6709\u5f9e \\(1\\ldots n\\) \u7684 permutation \\(a\\)\uff0c\u6700\u5927\u7684 \\(f(a)\\) \u662f\u591a\u5c11</p> <p>\\(f(a)=\\) \u6709\u5e7e\u500b pair \\((u,v)\\) \u6eff\u8db3 \\(a_u &lt; a_{\\text{lca}(u,v)}&lt;a_v\\)</p> <p>\\(2\\le n\\le 5000\\)</p> \u601d\u8def <p>\u8003\u616e\u5c40\u90e8\u8caa\u5fc3\uff0c\u5047\u8a2d\u6211\u5011\u73fe\u5728\u5728\u7bc0\u9ede \\(u\\)\uff0c\u6211\u5011\u5e0c\u671b \\(u\\) \u4e0d\u540c\u5b50\u6a39\u4e2d\u7684 \\((v,w),\\ a_v &lt; a_u &lt; a_w\\) \u7684\u5c0d\u6578\u76e1\u91cf\u591a\u3002</p> <p>\u6211\u5011\u5be6\u969b\u4e0a\u53ea\u95dc\u5fc3\u5b50\u6a39\u5167 \\(a_u\\) \u7684\u76f8\u5c0d\u5927\u5c0f\u95dc\u4fc2\uff0c\u4e0d\u95dc\u5fc3\u5b83\u5011\u5177\u9ad4\u662f\u4ec0\u9ebc\u3002\u5982\u679c \\(u\\) \u53ea\u6709\u5169\u500b\u5152\u5b50 \\(v\\) \u548c \\(w\\)\uff0c\u6211\u5011\u53ef\u4ee5\u8b93 \\(v\\) \u5b50\u6a39\u5167\u7684 \\(a\\) \u5168\u90e8\u5c0f\u65bc \\(w\\) \u5b50\u6a39\u5167\u7684 \\(a\\)\uff0c\u9019\u6a23 \\(u\\) \u4f5c\u70ba \\(LCA\\) \u7684\u8ca2\u737b\u662f \\(sz_v \\times sz_w\\)\uff0c\u662f\u6700\u5927\u7684\u3002\u5099\u8a3b: \u5728\u591a\u500b\u5c0f\u5b69\u7684\u6642\u5019\uff0c\u4ed6\u5011\u6bcf\u500b\u5b50\u6a39\u90fd\u662f\u4e00\u500b\u7368\u7acb\u7684\u5b50\u554f\u984c\uff0c\u4e5f\u5c31\u662f\u4ee5 \\(u\\) \u70ba\u6839\u7684\u8a71\u4ed6\u5011\u6bcf\u500b\u5b50\u6a39\u5167\u7684 \\(a\\) \u7684\u503c\u57df\u90fd\u662f\u4e00\u500b\u9023\u7e8c\u7684\u5340\u9593\uff0c\u4f8b\u5982 \\(a_u=6\\)\uff0c\\(v_1\\) \u5b50\u6a39\u5167\u7684 \\(a=1,2\\)\uff0c\\(v_2\\) \u5b50\u6a39\u5167\u7684 \\(a=3,4,5\\)\uff0c\\(v_3=7,8\\)\uff0c\u4e0d\u904e\u9019\u500b\u5c0d\u554f\u984c\u7684\u5f71\u97ff\u4e0d\u5927\uff0c\u56e0\u70ba\u5728 \\(u\\) \u770b\u4f86\u53ea\u95dc\u5fc3\u4ed6\u5011\u8207 \\(a_u\\) \u7684\u5927\u5c0f\uff0c\u4e26\u4e14\u6bcf\u500b\u5b50\u6a39\u90fd\u662f\u4e00\u500b\u5b50\u554f\u984c\u3002</p> <p>\u90a3\u9ebc\u5c0d\u65bc\u7bc0\u9ede \\(u\\) \u6709\u591a\u500b\u5152\u5b50\u7684\u60c5\u6cc1\uff0c\u63a8\u5ee3\u53ef\u77e5\u76f8\u7576\u65bc\u628a \\(u\\) \u7684\u5152\u5b50\u5206\u6210 \\(S\\) \u548c \\(T\\) \u5169\u500b\u96c6\u5408\uff0c\u6700\u5927\u5316 \\(\\sum_{v \\in S} \\sum_{w \\in T} sz_v \\times sz_w\\)\u3002\u8003\u616e\u505a\u4e00\u500b \\(sz_v\\) \u7684 01 \u80cc\u5305\uff0c\u82e5\u80fd\u628a \\(sz_v\\) \u5206\u6210\u5927\u5c0f\u70ba \\(x\\) \u7684\u96c6\u5408\uff0c\\(u\\) \u5c0d\u7b54\u6848\u7684\u8ca2\u737b\u662f \\(x \\times (sz_u - 1 - x)\\)\u3002\u5c0d\u65bc\u53ef\u80fd\u7684 \\(x\\)\uff0c\u53d6 \\(x \\times (sz_u - 1 - x)\\) \u7684\u6700\u5927\u503c\u5373\u53ef\u3002</p> <p>01 \u80cc\u5305\u66b4\u529b\u505a\u5373\u53ef\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6 \\(O(n^2)\\)\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define F first\n#define S second\n\nusing namespace std;\n\nconst int maxn = 5050;\nvector&lt;int&gt; G[maxn];\nint sz[maxn];\nint ans = 0;\n\nvoid dfs1(int u, int par) {\n    sz[u] = 1;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs1(v, u);\n        sz[u] += sz[v];\n    }\n}\n\nvoid dfs2(int u, int par) {\n    vector&lt;pair&lt;int, int&gt;&gt; sizes;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        sizes.push_back({sz[v], v});\n    }\n\n    for (auto x : sizes) {\n        dfs2(x.S, u);\n    }   \n\n    vector&lt;int&gt; dp (sz[u] + 1, false);\n    dp[0] = true;\n\n    for (int i = 0; i &lt; (int)sizes.size(); i++) {\n        vector&lt;int&gt; newDp (sz[u] + 1, false);\n        for (int j = 0; j &lt;= sz[u]; j++) {\n            // take\n            if (j &gt;= sizes[i].F)\n                newDp[j] |= dp[j - sizes[i].F];\n            // not take\n            newDp[j] |= dp[j];\n        }\n        swap(dp, newDp);\n    }\n\n    int mxAdd = 0;\n    for (int j = 0; j &lt;= sz[u]; j++) {\n        if (dp[j])\n            mxAdd = max(mxAdd, j * (sz[u] - 1 - j));\n    }\n\n    ans += mxAdd;\n}\n\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt; n; i++) {\n        int v;\n        cin &gt;&gt; v;\n        v--;\n        G[i].push_back(v);\n        G[v].push_back(i);\n    }\n\n    dfs1(0, -1);\n    dfs2(0, -1);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nsigned main() {\n    solve();\n}\n</code></pre> CS Academy Experience <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u9ede\u6709\u6b0a\u91cd\uff0c\u4f60\u8981\u628a\u5b83\u5207\u6210\u4e00\u4e9b chain\uff0c\u4f7f\u5f97\u6bcf\u500b chain \u7684\u6700\u5927\u6b0a\u91cd\u6e1b\u6700\u5c0f\u6b0a\u91cd\u7684\u7e3d\u548c\u76e1\u91cf\u5927\u3002</p> <p>\\(n \\le 10^5\\)</p> \u601d\u8def <p>\u5176\u5be6\u5c31\u662f CF 484D \u7684\u6a39\u4e0a\u7248\u672c</p> <p>\u5c0d\u65bc max - min \u6211\u5011\u53ef\u4ee5\u60f3\u6210\u597d\u5e7e\u500b\u5dee\u503c\u7d44\u5408\u8d77\u4f86\u7684\uff0c\u4f8b\u5982 2 \u2192 5 \u2192 7 \u2192 8 \u53ef\u4ee5\u5beb\u6210 8 - 2 = 8 - 7 - 5 - 2\u3002</p> <p>\u6240\u4ee5\u5c0d\u65bc\u6700\u5f8c\u7684\u7b54\u6848\u6bcf\u500b chain \u7684\u5169\u7aef\u4e00\u5b9a\u662f max \u8ddf min\uff0c\u9019\u500b\u5df2\u5728\u4e0a\u9762 CF 484D \u7684\u984c\u89e3\u88e1\u9762\u63d0\u5230\u4e86\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u5b9a\u7fa9 dp[u][0/1]: u \u9019\u500b\u9ede\u662f min/max \u7aef\uff0cu \u9019\u9846\u5b50\u6a39\u7684\u7b54\u6848</p> <p>\u8f49\u79fb\u7684\u8a71\u4e00\u7a2e\u60c5\u6cc1\u662f u \u81ea\u5df1\u4e00\u7d44\uff0c= sum(max(dp[u][0], dp[u][1]))</p> <p>\u4ee4\u4e00\u7a2e\u60c5\u6cc1\u662f u \u6709\u88ab\u63a5\u5230 v \u5f80\u4e0b\u7684 chain</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\n\nconst int maxn = 1e5 + 5;\nint n;\nint w[maxn], dp[maxn][2];;\nvector&lt;int&gt; G[maxn];\n\nvoid update(int &amp;x, int y) {\n    if (x &lt; y) x = y;\n}\n\nvoid dfs(int u, int pa) {\n    int sum = 0;\n    for (auto v : G[u]) {\n        if (v == pa) continue;\n        dfs(v, u);\n        sum += max(dp[v][0], dp[v][1]);\n    }\n    dp[u][0] = dp[u][1] = sum;\n    for (auto v : G[u]) {\n        if (v == pa) continue;\n        update(dp[u][0], sum + dp[v][0] + w[v] - w[u] - max(dp[v][0], dp[v][1]));\n        update(dp[u][1], sum + dp[v][1] + w[u] - w[v] - max(dp[v][0], dp[v][1]));\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; w[i];\n    }\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    dfs(1, 1);\n    cout &lt;&lt; max(dp[1][0], dp[1][1]) &lt;&lt; '\\n';\n}\n</code></pre> CS Academy Connected Tree Subgraphs <p>\u7d66\u4e00\u500b \\(n\\) \u500b\u9ede\u7684 Tree\uff0c\u6709\u5e7e\u7a2e\u7528 1~n \u53bb\u7de8\u865f\u7684\u65b9\u6cd5\u6eff\u8db3 :</p> <ul> <li>\u5c0d\u65bc \\(1\\le k\\le n\\)\uff0c\u7531\u7de8\u865f \\(1\\ldots k\\) \u7d44\u6210\u7684\u5b50\u5716\u8981\u9023\u901a</li> </ul> <p>\\(1\\le n\\le 10^5\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u5230\u4ed6\u662f\u8d77\u9ede\u6162\u6162\u9577\u51fa\u53bb\u7684\uff0c\u6240\u4ee5\u6211\u5011\u5148\u8003\u616e\u5c07\u9ede 1 \u5b9a\u6839\uff0c\u4e0a\u9762\u653e\u7de8\u865f 1</p> <p>\u5c0d\u65bc \\(u\\)\uff0c\u6211\u5011\u5047\u8a2d\u6211\u5011\u80fd\u7b97\u51fa \\(dp_v\\)\uff0c\u90a3\u9ebc \\(dp_u\\) \u8981\u600e\u9ebc\u8a08\u7b97\u5462 ?</p> <p>\u6211\u5011\u5047\u8a2d\u653e\u7684\u9806\u5e8f\u5f62\u6210\u4e00\u500b\u5e8f\u5217 \\(p\\)\uff0c\u5c0d\u65bc\u540c\u4e00\u500b\u5b50\u6a39\u6211\u5011\u4e0d\u5fc5\u56f0\u64fe\u653e\u7684\u9806\u5e8f\uff0c\u56e0\u70ba \\(dp_v\\) \u5df2\u8a08\u7b97\u5b8c\u6210\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5c07\u540c\u4e00\u500b subtree\\((v)\\) \u88e1\u9762\u7684\u9806\u5e8f\u8996\u70ba\u540c\u7269\uff0c\u4e5f\u5c31\u662f \\(p\\) \u5c31\u6703\u662f\u597d\u5e7e\u500b\u540c\u7269\u6392\u5217\u3002</p> <p>\u6240\u4ee5 \\(dp_u=\\) (\u540c\u7269\u6392\u5217\u7684\u65b9\u6cd5\u6578) \\(\\times \\prod dp_v\\) \\(\\displaystyle =\\frac{(size(u)-1)!}{\\prod size(v)!}\\times \\prod dp_v\\) </p> CF 1929 D. Sasha and a Walk in the City <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u5b9a\u7fa9\u4e00\u500b\u5408\u6cd5\u7684\u9ede\u96c6\u70ba\u4efb\u610f\u4e00\u689d\u8def\u5f91\u90fd\u6c92\u6709\u8d85\u904e\u5169\u500b\u5728\u9019\u500b\u9ede\u96c6\u5167\u7684\u9ede\u3002\u554f\u5c0d\u65bc\u6240\u6709\u53ef\u80fd\u7684\u9ede\u96c6\uff0c\u6709\u5e7e\u7a2e\u662f\u5408\u6cd5\u7684</p> <p>\\(2\\le n\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u554f\u65b9\u6cd5\u6578\uff0c\u6211\u5011\u81ea\u7136\u800c\u7136\u6703\u60f3\u5230\u6a39 dp\u3002\u5047\u8a2d\u4e00\u500b v \u70ba\u6839\u5b50\u6a39\u5167\u7684\u5408\u6cd5\u65b9\u6848\u6578\u662f dp(v)\uff0c\u6211\u5011\u8003\u616e\u5982\u4f55\u8f49\u79fb\u4e0a\u53bb v \u7684 parent u\u3002\u6211\u5011\u767c\u73fe\u6211\u5011\u7121\u6cd5\u5340\u5206\u5b50\u6a39\u5167\u9078\u5f97\u9ede\u6709\u7956\u5b6b\u95dc\u4fc2\u9084\u662f\u6c92\u6709\u7956\u5b6b\u95dc\u4fc2\uff0c\u56e0\u70ba\u9019\u6703\u95dc\u4fc2\u5230\u6211\u5011 u \u5982\u679c\u4e00\u5b9a\u8981\u9078\u7684\u5408\u6cd5\u65b9\u6848\u6578\uff0c\u9019\u6703\u9020\u6210 dp(v) \u5167\u6709\u7956\u5b6b\u95dc\u4fc2\u76f4\u63a5\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u800c\u6c92\u6709\u7956\u5b6b\u95dc\u4fc2\u7684\u5408\u6cd5\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u9700\u8981\u5340\u5206\u9019\u5169\u7a2e\u72c0\u614b\uff0c\u4ee4\uff1a</p> <ul> <li> <p>dp(i, 0): \u4ee5 i \u70ba\u6839\u7684\u5b50\u6a39\u6709\u9078\u7684\u9ede\u300c\u4e0d\u5b58\u5728\u7956\u5b6b\u95dc\u4fc2\u300d\u7684\u5408\u6cd5\u65b9\u6cd5\u6578</p> </li> <li> <p>dp(i, 1): \u4ee5 i \u70ba\u6839\u7684\u5b50\u6a39\u6709\u9078\u7684\u9ede\u300c\u6070\u6709\u7956\u5b6b\u95dc\u4fc2\u300d\u7684\u5408\u6cd5\u65b9\u6cd5\u6578</p> </li> </ul> <p>\u8003\u616e v \u8207\u4ed6\u7684\u7236\u89aa u \u7684\u8f49\u79fb\uff0cdp(u, 0) \u7531\u65bc\u4e0d\u80fd\u6709\u7956\u5b6b\u95dc\u4fc2\uff0c\u6240\u4ee5\u7576 u \u9ede\u8981\u9078\u6642\uff0c\u4e0b\u9762\u7684\u9ede\u90fd\u4e0d\u80fd\u9078\uff0c\u70ba 1 \u7a2e\u65b9\u6cd5\u6578\uff0c\u5982\u679c\u4e0d\u9078 u\uff0c\u5247\u5c31\u662f\u4e0b\u9762\u7684\u6bcf\u9846\u5b50\u6a39\u7684 dp(v, 0) \u76f8\u4e58\u8d77\u4f86\u3002dp(u, 1) \u7531\u65bc\u4e00\u5b9a\u8981\u6709\u7956\u5b6b\u95dc\u4fc2\uff0c\u4f46\u53c8\u8981\u5408\u6cd5\uff0c\u6240\u4ee5\u7576 u \u9078\u7684\u6642\u5019\uff0c\u4e0b\u9762\u53ea\u80fd\u6311\u4e00\u9846\u6c92\u6709\u7956\u5b6b\u95dc\u4fc2\u7684\u5b50\u6a39\uff0c\u4e5f\u5c31\u662f\u5c07\u6bcf\u9846\u5b50\u6a39 dp(v, 0) \u6263 1 \u6a39\u52a0\u8d77\u4f86\uff0c\u6263 1 \u7684\u539f\u56e0\u662f\u8981\u6263\u9664\u4ec0\u9ebc\u90fd\u6c92\u6311\u7684\u60c5\u6cc1\uff0c\u7576 u \u4e0d\u9078\u7684\u6642\u5019\uff0c\u5c31\u662f\u679a\u8209\u54ea\u9846\u5b50\u6a39\u8981\u6709\u7956\u5b6b\u95dc\u4fc2\uff0c\u5176\u4ed6\u7684\u5b50\u6a39\u4ec0\u9ebc\u90fd\u4e0d\u80fd\u9078\uff0c\u4e5f\u5c31\u662f dp(v, 1) \u52a0\u8d77\u4f86\u3002\u6211\u5011\u7d71\u6574\u4e00\u4e0b\uff0c\u8f49\u79fb\u5f0f\u70ba\uff1a </p> <ul> <li> <p>\\(dp(u, 0) = 1 + \\prod dp(v, 0)\\)</p> </li> <li> <p>\\(dp(u, 1) = \\sum(dp(v, 0) - 1) + \\sum dp(v, 1)\\)</p> </li> </ul> <p>\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f\u6839\u7bc0\u9ede\u7684 \u300c\u6c92\u6709\u7956\u5b6b\u95dc\u4fc2\u7684\u65b9\u6cd5\u6578\u300d + \u300c\u6709\u7956\u5b6b\u95dc\u4fc2\u7684\u65b9\u6cd5\u6578\u300d\uff0c\u4e5f\u5c31\u662f dp(root, 0) +  dp(root, 1)\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 2e6 + 5;\nconst int mod = 998244353;\nvector&lt;int&gt; G[MAXN];\nint dp[MAXN][2];\n\nvoid dfs(int u, int lst) {\n    dp[u][0] = 1; // leaf \u6709 1 \u7a2e\u9078\u6cd5\u53eb\u505a\u4ec0\u9ebc\u90fd\u4e0d\u9078\n    dp[u][1] = 0;\n    for (auto v : G[u]) {\n        if (v == lst) continue;\n        dfs(v, u);\n        dp[u][0] = (dp[v][0]) * dp[u][0] % mod;\n        dp[u][1] = (dp[v][0] - 1 + dp[v][1]+ dp[u][1]) % mod;\n    }\n    dp[u][0]++; // \u53ea\u9078 u\n}\n\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        G[i].clear();\n    }\n    for (int i = 0; i &lt; n - 1; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n\n    dfs(1, 0);\n\n    cout &lt;&lt; (dp[1][0] + dp[1][1]) % mod &lt;&lt; endl;\n}\n\nsigned main() {\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> POI 2017 Sabota\u017c <p>\u7d66\u4e00\u9846 n \u500b\u9ede\u7684\u6709\u6839\u6a39\uff0c\u5176\u4e2d\u6709 1 \u500b\u9ede\u662f\u53db\u5f92\uff0c\u4f46\u4e0d\u77e5\u9053\u662f\u8ab0\u3002\u5c0d\u65bc\u4e00\u500b\u9ede u\uff0c\u82e5 subtree(u) \u4e2d\u53db\u5f92\u4f54\u7684\u6bd4\u4f8b\u8d85\u904e x\uff0c\u90a3 u \u4e5f\u6703\u8b8a\u6210\u53db\u5f92\uff0c\u4e14 subtree(u) \u5167\u6240\u6709\u9ede\u90fd\u8b8a\u53db\u5f92\u3002\u6c42\u51fa\u4e00\u500b\u6700\u5c0f\u7684 x\uff0c\u4f7f\u5f97\u6700\u58de\u60c5\u6cc1\u4e0b\uff0c\u53db\u5f92\u7684\u500b\u6578\u4e0d\u6703\u8d85\u904e k\u3002</p> <p>\\(k\\le n\\le 5\\times 10^5\\)</p> \u601d\u8def <p>\u7b2c\u4e00\u500b\u60f3\u6cd5\u662f\u4e8c\u5206\uff0c\u82e5\u76ee\u524d threshold \u70ba x\uff0c\u6211\u5011\u5c31\u662f\u8981\u53bb check \u662f\u5426\u6709\u8fa6\u6cd5\u8b93\u6700\u58de\u60c5\u6cc1\u4e0b\uff0c\u53db\u5f92\u7684\u500b\u6578 &lt;= k\u3002\u6211\u5011\u5047\u8a2d dp(u) \u8868\u793a\u6700\u58de\u60c5\u6cc1\u4e0b u \u7684\u5b50\u6a39\u88e1\u6709\u5e7e\u500b\u53db\u5f92\uff0c\u8f49\u79fb\u7684\u8a71\u6211\u5011\u5c31\u53bb\u679a\u8209 u \u7684\u5c0f\u5b69 v\uff0c\u770b\u6700\u4e00\u958b\u59cb\u7684\u90a3\u500b\u53db\u5f92\u8981\u5728\u54ea\u500b\u5b50\u6a39\u5167\u624d\u6703\u662f\u6700\u7cdf\u7cd5\u7684\u60c5\u6cc1\uff0c\u4e5f\u5c31\u662f\u770b\u54ea\u500b dp(v) \u6700\u5927\u3002\u5982\u679c dp(v) \u7684\u6bd4\u4f8b\u6709\u5230 x \u7684\u8a71\u5c31\u5c07 dp(u) = size(u)\uff0c\u5426\u5247 dp(u) = max{ dp(v) }\u3002\u9019\u500b\u60f3\u6cd5\u96d6\u7136\u662f O(n log n)\uff0c\u4f46\u6703 TLE\u3002</p> <p>\u7b2c\u4e8c\u500b\u60f3\u6cd5\u662f\u6a39 dp\uff0c\u8a2d dp(u) \u8868\u793a\u7bc0\u9ede u \u4e0d\u53db\u8b8a\uff0cx \u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c0f\u3002\u56e0\u70ba\u7cbe\u5ea6\u554f\u984c\uff0cdp(u) \u4e5f\u8868\u793a\u7bc0\u9ede u \u53db\u8b8a\uff0cx \u6700\u5927\u53ef\u4ee5\u662f\u591a\u5927\u3002\u82e5\u8981\u4f7f\u7bc0\u9ede u \u80fd\u53db\u8b8a\uff0c\u6211\u5011\u5fc5\u9808\u5f97\u6eff\u8db3\u5169\u500b\u689d\u4ef6\uff1a</p> <ol> <li>\u5b83\u6709\u81f3\u5c11\u4e00\u68f5\u5b50\u6a39\u53db\u8b8a\uff0c\u5373 \\(x \\le dp(v)\\)\u3002</li> <li>\\(x\\le \\dfrac{sz(v)}{sz(u) - 1}\\)\u3002</li> </ol> <p>\u65e2\u7136\u6211\u5011\u60f3\u627e\u51fa\u8b93 u \u53db\u8b8a\u6700\u5c0f\u7684 x\uff0c\u5c0d\u4e0a\u8ff0\u5169\u8005\u60c5\u6cc1\u53d6 min \u5373\u53ef\u3002\u518d\u4f86\uff0c\u7531\u65bc\u6211\u5011\u8981\u7684\u662f\u5728\u6700\u58de\u60c5\u6cc1\u4e0b\u7684\u7b54\u6848\uff08\u4f8b\u5982\u82e5\u7b2c\u4e00\u500b\u53db\u5f92\u5728\u67d0\u500b\u5b50\u6a39\u9700\u8981\u82b1\u7684 x \u5f88\u5927\uff09\uff0c\u6240\u4ee5\u6211\u5011\u8981\u627e\u6700\u5927\u503c\uff0c\u90a3\u9ebc\u72c0\u614b\u8f49\u79fb\u65b9\u7a0b\u5f0f\u5982\u4e0b\uff1a</p> \\[dp(u) = \\max \\limits_{v \\in son(u)}\\{\\min\\{ dp(v), \\frac{sz(v)}{sz(u) - 1} \\} \\}\\] \u601d\u8def1 - code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 5e5 + 5;\nconst double eps = 1e-6;\n\nvector&lt;int&gt; G[N];\nint dp[N], sz[N];\nint n, k;\n\nvoid tree_init(int u) {\n    sz[u] = 1;\n    for (int i = 0; i &lt; (int)G[u].size(); i++) {\n        int v = G[u][i];\n        tree_init(v);\n        sz[u] += sz[v];\n    }\n}\n\nvoid tree_dp(int u, double x) {\n    if (G[u].empty()) {\n        dp[u] = 1;\n        return;\n    }\n    int mx = 0;\n    for (int i = 0; i &lt; (int)G[u].size(); i++) {\n        int v = G[u][i];\n        tree_dp(v, x);\n        mx = max(mx, dp[v]);\n    }\n    if (((double)mx / (double)(sz[u] - 1)) &gt; x) {\n        dp[u] = sz[u];\n    } else {\n        dp[u] = mx;\n    }\n}\n\nbool check(double x) {\n    memset(dp, 0, sizeof dp);\n    tree_dp(1, x);\n    return dp[1] &lt;= k;\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 2; i &lt;= n; i++) {\n        int v;\n        cin &gt;&gt; v;\n        G[v].push_back(i);\n    }\n    tree_init(1);\n    double l = 0, r = 1;\n    while (r - l &gt; eps) {\n        double mid = (l + r) / 2;\n        if (check(mid)) {\n            r = mid;\n        } else {\n            l = mid;\n        }\n    }\n    cout &lt;&lt; fixed &lt;&lt; setprecision(10) &lt;&lt; r &lt;&lt; '\\n';\n}\n</code></pre> \u601d\u8def2 - code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, k, head[500005], tot, siz[500005];\ndouble ans, dp[500005];\n\nstruct edge {\n    int next, to;\n} e[1000005];\n\nvoid add_edge(int u, int v) {\n    e[++tot].next = head[u];\n    e[tot].to = v;\n    head[u] = tot;\n}\n\nvoid dfs(int u, int fa) {\n    siz[u] = 1;\n    for (int i = head[u]; i; i = e[i].next) {\n        dfs(e[i].to, u);\n        siz[u] += siz[e[i].to];\n    }  // \u9884\u5904\u7406size\n    if (siz[u] == 1) {\n        dp[u] = 1;\n        return;\n    }  // \u521d\u59cb\u503c\n    for (int i = head[u]; i; i = e[i].next) {\n        int v = e[i].to;\n        dp[u] = max(dp[u], min(dp[v], 1.0 * siz[v] / (siz[u] - 1)));  // \u91cd\u70b9\n    }\n    if (siz[u] &gt; k)\n        ans = max(ans, dp[u]);  // \u66f4\u65b0\u7b54\u6848\n}\nint main() {\n    scanf(\"%d%d\", &amp;n, &amp;k);\n    for (int i = 2; i &lt;= n; i++) {\n        int x;\n        scanf(\"%d\", &amp;x);\n        add_edge(x, i);\n    }\n    dfs(1, 0);\n    printf(\"%.10lf\", ans);\n}\n</code></pre>"},{"location":"graph/tree_dp/#_1","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>https://taodaling.github.io/blog/2019/09/10/%E6%A0%91%E4%B8%8A%E7%AE%97%E6%B3%95/#heading-%E6%A0%91%E4%B8%8A%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98</li> </ul>"},{"location":"graph/tree_greedy/","title":"greedy","text":"<p>\u5229\u7528\u5230\u4e00\u4e9b Tree \u7684\u6027\u8cea\uff0c\u4f8b\u5982\u6709\u4e9b\u554f\u984c\u53ef\u4ee5\u5f9e leaf \u958b\u59cb\u60f3\u4e4b\u985e\u7684</p>"},{"location":"graph/tree_greedy/#toi-2022-pc","title":"TOI 2022 pC","text":"TOI 2022 pC <p>\u7d66\u5b9a\u4e00\u9846 \\(n\\) \u500b\u9ede\u908a\u6709\u6b0a\u91cd\u7684\u6a39\uff0c\u7b2c \\(i\\) \u500b\u9ede\u6709 \\(w_{i}\\) \u53f0\u8eca\uff0c\u7b2c \\(i\\) \u689d\u908a\u7684\u8ddd\u96e2\u70ba \\(d_i\\)\u3002\u5982\u679c\u8981\u8b93\u6bcf\u500b\u9ede\u8eca\u5b50\u6578\u91cf\u6700\u5f8c\u7686\u70ba \\(k\\)\uff0c\u6700\u5c0f\u7e3d\u8abf\u5ea6\u6210\u672c\u70ba\u591a\u5c11\uff1f</p> \\[\u8abf\u5ea6\u6210\u672c = \u8abf\u5ea6\u6578\u91cf \\times \u8abf\u5ea6\u8ddd\u96e2\\] <p>\\(1 \\leq n \\leq 10^{5},\\sum w_i = n\\times k\\)</p> \u601d\u8def <p>\u4e00\u6a23\u6211\u5011\u5148\u8003\u616e leaf\uff0cleaf \u53ea\u80fd\u5f9e\u7236\u89aa\u7bc0\u9ede\u7684\u65b9\u5411\u5c07\u8eca\u9001\u904e\u4f86\uff0c\u6216\u5c07\u591a\u9918\u7684\u9001\u56de\u53bb\u3002\u5982\u679c\u4e0d\u5920\uff0c\u6211\u5011\u53ef\u4ee5\u5148\u8ddf\u7236\u89aa\u7bc0\u9ede\u501f\uff0c\u5c07\u7236\u89aa\u7bc0\u9ede\u7684 \\(w_i-=k\\)\uff1b\u5982\u679c\u592a\u591a\uff0c\u6211\u5011\u53ef\u4ee5\u9001\u7d66\u7236\u89aa\u7bc0\u9ede\uff0c\u5c07\u7236\u89aa\u7bc0\u9ede\u7684 \\(w_i+=k\\)\u3002</p> <p>\u4e00\u65e6 leaf \u8abf\u6574\u597d\u81f3 \\(k\\) \u53f0\u8eca\uff0c\u56e0\u70ba\u4e0d\u6703\u6709\u8eca\u8981\u9001\u904e\u4f86\uff0c\u6216\u81ea\u5df1\u6709\u8eca\u8981\u9001\u51fa\u53bb\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c07 leaf \u522a\u9664\u3002</p> code <pre><code>int dfs (int u, int par) {\n    int need = w[u] - k, child_need;\n\n    for(auto v : G[u]) {\n        if (v == par) continue;\n\n        child_need = dfs(v, u);\n        ans += abs(child_need) * d[i];\n        need += child_need;\n    }\n\n    return need;\n}\n</code></pre>"},{"location":"graph/tree_greedy/#_1","title":"\u62d4\u908a","text":""},{"location":"graph/tree_greedy/#boi-2020-b1-village-minimum","title":"BOI 2020 B1. Village (Minimum)","text":"BOI 2020 B1. Village (Minimum) <p>\u7d66\u4e00\u9846 \\(N\\) \u500b\u9ede\u7684\u6a39\uff0c\u8acb\u5c07\u6bcf\u500b\u9ede \\(i\\) \u79fb\u52d5\u5230 \\(v_i\\) \\((i\\neq v_i)\\)\uff0c\u82b1\u8cbb\u70ba \\(\\text{dis}(i,v_i)\\)\u3002\u69cb\u9020 \\(v_1,v_2,\\ldots,v_n\\)\uff0c\u4f7f\u5f97\u82b1\u8cbb\u6700\u5c11</p> <p>\\(N\\le 10^5\\)</p> \u63d0\u793a <p>\u5148\u8003\u616e leaf\uff0cleaf \u4e00\u5b9a\u81f3\u5c11\u9700\u8981\u8ddf\u4ed6\u7684\u7236\u89aa\u4ea4\u63db</p> \u601d\u8def <p>\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u628a\u4ea4\u63db\u60f3\u6210\u4e00\u500b\u9023\u63a5 \\(u\\leftrightarrow v\\) \u7684\u4e00\u500b path\uff0ccost \u5c31\u662f \\(2\\times \\text{dis}(u,v)\\)\uff0c\u76e1\u91cf\u8b93 path \u8ddf path \u4e4b\u9593\u7684\u908a\u4e0d\u8981\u6709\u4ea4\u96c6\u3002\u554f\u984c\u5c31\u8b8a\u6210\uff0c\u6211\u9700\u8981\u5c07\u9ede\u5169\u5169\u9023 path\uff0c\u76ee\u6a19\u662f\u8b93\u5927\u5bb6\u90fd\u81f3\u5c11\u5728\u4e00\u500b path \u4e0a\u7684\u300c\u5169\u7aef\u300d</p> <p>\u6027\u8cea : \u80fd\u5728\u540c\u4e00\u500b\u5b50\u6a39\u5167\u914d\u5c0d\u5c31\u5728\u540c\u4e00\u500b\u5b50\u6a39\u5167\u914d\u5c0d\uff0c\u6bcf\u500b\u5b50\u6a39\u6700\u591a\u53ea\u6703\u5269\u4e0b 1 \u500b\u9ede\u6c92\u914d\u5c0d\u5230\uff0c\u5047\u8a2d \\(u\\) \u7684 child \u662f \\(v_1,v_2,v_3\\) \u4ed6\u5011\u90fd\u5206\u5225\u5269\u4e00\u500b\u7bc0\u9ede\u6c92\u914d\u5c0d\u5230\uff0c\u90a3\u5c31\u7528 \\(v_1\\leftrightarrow v_2\\)\uff0c\\(v_3\\leftrightarrow u\\) \u914d\u5c0d\u3002</p> <p> </p> <p>\u53e6\u89e3 :</p> <p>\u628a\u984c\u76ee\u7684\u79fb\u52d5\u770b\u6210\u662f\u5169\u9ede\u5728\u505a\u591a\u500b\u300c\u4ea4\u63db\u300d</p> <p>\u5148\u8003\u616e leaf\uff0cleaf \u4e00\u5b9a\u81f3\u5c11\u9700\u8981\u8ddf\u4ed6\u7684\u7236\u89aa\u4ea4\u63db\uff0c\u4e0d\u7136\u4ed6\u6c92\u5176\u4ed6\u65b9\u53ef\u4ea4\u63db\u4e86\uff0c\u800c\u4ea4\u63db\u5b8c\u5f8c\u5728\u9019\u500b leaf \u7684\u6578\u503c\u4e5f\u5c31\u56fa\u5b9a\u4e86\uff0c\u4e5f\u76f8\u7576\u65bc\u6211\u5011\u53ef\u4ee5\u76f4\u63a5\u628a\u9019\u500b leaf \u522a\u6389\uff0c\u63a5\u4e0b\u4f86\u5c31\u662f\u5b50\u554f\u984c\u3002\u6240\u4ee5\u6211\u5011\u5f97\u5230\u4e86\u4e00\u500b greedy \u7684\u4f5c\u6cd5\uff0c\u6bcf\u6b21\u627e\u7576\u524d\u7684 leaf</p> <ul> <li> <p>\u5982\u679c\u6c92\u6709\u4ea4\u63db\u904e\uff0c\u5c31\u548c\u7236\u7bc0\u9ede\u4ea4\u63db\uff0c\u4e26\u5c07\u8a72 leaf \u522a\u9664\uff0cans += 2</p> </li> <li> <p>\u5982\u679c leaf \u6709\u4ea4\u63db\u904e\uff0c\u53ea\u63a5\u5c31\u522a\u6389\uff0cans \u7dad\u6301\u7576\u524d\u7684\u6578\u5b57</p> </li> </ul> <p>\u9019\u6a23\u6700\u5f8c\u6709\u53ef\u80fd\u9084\u5269\u4e00\u500b\uff0c\u96a8\u4fbf\u627e\u4e00\u500b\u76f8\u9130\u7d50\u9ede\u518d\u4ea4\u63db\u4e00\u6b21\u5c31\u597d\uff0c\u4e00\u6a23 ans += 2</p> <p> \u6700\u5f8c\u9084\u5269\u4e00\u500b\u7684\u4f8b\u5b50 <p>\u5be6\u4f5c\u65b9\u9762\u4e0d\u9700\u8981\u771f\u7684\u79fb\u9664 leaf\uff0c\u5229\u7528 dfs \u8b93\u4ed6\u5f9e leaf \u958b\u59cb\u5f80\u4e0a\u8655\u7406\u5373\u53ef\uff0c\u8a73\u898b\u4ee3\u78bc</p> <p>\u53c3\u8003\u81ea : hackmd</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define pb push_back\nusing namespace std;\nint n;\nint node[100001];\nvector&lt;int&gt; G[100001];\nint ans = 0;\n\nvoid dfs(int u, int par) {\n    for (auto v : G[u]) {\n        if (v != par) dfs(v, u);\n    }\n\n    if (node[u] == u) {\n        if (u == 1) swap(node[1], node[G[1][0]]);\n        else swap(node[u], node[par]);\n        ans += 2;\n    }\n}\n\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n    for (int i = 1; i &lt;= n; i++) node[i] = i;\n\n    dfs(1, 0);\n    cout &lt;&lt; ans &lt;&lt; endl;\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; node[i] &lt;&lt; ' ';\n    }\n}\n</code></pre> 2024 TOI \u6a21\u64ec\u8cfd\u7b2c\u4e09\u5834 pB. YKP \u7d44\u968a\u4efb\u52d9 <p>\u7d66 n \u500b\u9ede\uff0c\u7b2c i \u500b\u9ede\u6709 a[i] \u500b\u4eba\u3002\u82e5\u5169\u500b\u9ede\u8981\u5206\u5728\u4e00\u7d44\u5fc5\u9808\u79fb\u52d5\u5230\u540c\u4e00\u500b\u9ede\u4e0a\uff0c\u73fe\u5728\u5169\u5169\u914d\u5c0d\u525b\u597d\u6703\u843d\u55ae\u4e00\u500b\u4eba\u3002\u5c0d\u65bc \\(1 \\le i\\le n\\)\uff0c\u82e5\u5728 i \u9ede\u591a\u653e\u4e00\u500b\u4eba\uff0c\u90a3\u9ebc\u5169\u5169\u914d\u5c0d\u7684\u8ddd\u96e2\u7e3d\u548c\u6700\u5c0f\u662f\u591a\u5c11</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6bcf\u500b\u9ede\u80fd\u914d\u5c0d\u7684\u8a71\u5c31\u5148\u914d\u5c0d\uff0c\u5269\u4e0b\u7684\u6211\u5011\u5f9e leaf \u958b\u59cb\u8b93\u5b50\u6a39\u5167\u7684\u512a\u5148\u914d\u5c0d\u3002\u63a5\u8457\u6211\u5011\u4f7f\u7528\u63db\u6839 dp\uff0c\u8a08\u7b97\u6bcf\u500b\u9ede\u4e0a\u9762\u7684\u4eba\u8981\u914d\u5c0d\u7684\u8ddd\u96e2\u7e3d\u548c\u662f\u591a\u5c11\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 2e5 + 5;\nint n, m, root;\nvector&lt;int&gt; G[MAXN];\nint a[MAXN];\nint dp1[MAXN], dp2[MAXN], cnt[MAXN], sum;\n// dp1[u]: subtree(u) \u6bcf\u500b\u9ede\u90fd\u96c6\u5408\u7684\u7e3d\u6642\u9593\n// dp2[u]: subtree(u) \u4ee5\u5916\u6bcf\u500b\u9ede\u90fd\u96c6\u5408\u7684\u7e3d\u6642\u9593\n// cnt[v]: subtree(v) \u9084\u6c92\u914d\u5c0d\u7684\u6709\u591a\u5c11\u500b\n\nvoid dfs1(int u, int par) {\n    int ret = 0; // \u591a\u5c11\u500b\u5f9e v \u8dd1\u5230 u \u7684\u4eba\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs1(v, u); \n        ret += cnt[v];\n        dp1[u] += dp1[v];\n    }\n    dp1[u] += ret;\n    cnt[u] = (ret + a[u]) % 2; // \u5206\u7d44\n}\n\nvoid dfs2(int u, int par) {\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dp2[v] += dp1[u] - dp1[v] - cnt[v] + dp2[u] + (sum - cnt[v]) % 2;\n        // (sum - cnt[v]) % 2: \u4e0a\u9762\u6709\u843d\u55ae\u7684\u8981\u5f9e u \u8dd1\u904e\u4f86 v \u505a\u96c6\u5408\n        dfs2(v, u);\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 2; i &lt;= n; i++) {\n        int parent;\n        cin &gt;&gt; parent;\n        G[i].push_back(parent);\n        G[parent].push_back(i);\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        a[i] %= 2;\n        sum += a[i];\n    }\n    root = 1;\n    if (m == 2) {\n        dfs1(root, 0);\n        dfs2(root, 0);\n        for (int i = 1; i &lt;= n; i++) {\n            cout &lt;&lt; dp1[i] + dp2[i] &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"graph/tree_greedy/#npsc","title":"NPSC \u771f\u5cf6\u8207\u8389\u53ef\u9e97\u7d72","text":"2022 NPSC \u9ad8\u4e2d\u7d44\u6c7a\u8cfd pE. \u771f\u5cf6\u8207\u8389\u53ef\u9e97\u7d72 <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u6b21\u53ef\u4ee5\u79fb\u9664\u4e00\u689d\u9577\u5ea6\u70ba\u8cea\u6578\u7684 path\uff0c\u69cb\u9020\u4e00\u7d44\u89e3\u4f7f\u6574\u68f5\u6a39\u88ab\u79fb\u9664\uff0c\u6216\u8f38\u51fa\u7121\u89e3</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>n \u70ba\u5076\u6578\u4e00\u5b9a\u53ef\u4ee5\u62c6\u6210\u5f88\u591a\u500b 2\uff0c\u5947\u6578\u6703\u62c6\u51fa\u4e00\u500b 3\u3002\u5f9e leaf greedy\uff0c\u80fd\u5169\u5169\u914d\u5c0d\u5c31\u5169\u5169\u914d\u5c0d\uff0c\u6700\u591a\u53ea\u6703\u6709\u4e00\u689d\u908a\u4e0a\u50b3\uff0c\u6700\u5f8c\u5230 root \u7684\u6642\u5019\uff08\u6211\u5011\u8981\u4fdd\u8b49\u4e00\u5b9a\u53ef\u4ee5\u914d\u7684\u5b8c\uff0c\u6240\u4ee5\u8981\u4e8b\u5148\u8b93 degree \u70ba\u5076\u6578\u7684\u9ede\u7576 root\uff09\uff0c\u82e5\u5269\u4e0b 2 \u7684\u6709\u5947\u6578\u689d\uff0c\u5c31\u8b93\u5176\u4e2d\u4e00\u689d 2 \u8ddf 1 \u914d\uff0c\u5176\u4ed6 1 \u8ddf 1 \u914d\uff0c2 \u7368\u81ea\u6210\u70ba\u4e00\u7d44\u5373\u53ef\u3002</p> <p>\u5be6\u4f5c\u4e0a\uff0c\u5148\u5224\u6c92\u6709 degree \u70ba\u5076\u6578\u7684\u9ede\u7684 tree \u7121\u89e3\uff0c\u5c07 degree \u70ba\u5076\u6578\u7684\u9ede\u7576\u6839\uff0c\u53bb dfs\uff08\u7528 set \u53bb\u7dad\u8b77 adjacency list\uff09\uff0c\u5f9e leaf \u8b93 1 \u8ddf 1 \u914d\uff0c2 \u81ea\u5df1\u4e00\u7d44\uff0c\u5230 root \u7684\u6642\u5019\u518d\u505a\u4e0a\u9762\u63d0\u5230\u7684\u5373\u53ef</p>"},{"location":"graph/tree_greedy/#boi-2020-b2-village-maximum","title":"BOI 2020 B2. Village (Maximum)","text":"BOI 2020 B2. Village (Maximum) <p>\u7d66\u4e00\u9846 \\(N\\) \u500b\u9ede\u7684\u6a39\uff0c\u8acb\u5c07\u6bcf\u500b\u9ede \\(i\\) \u79fb\u52d5\u5230 \\(v_i\\) \\((i\\neq v_i)\\)\uff0c\u82b1\u8cbb\u70ba \\(\\text{dis}(i,v_i)\\)\u3002\u69cb\u9020 \\(v_1,v_2,\\ldots,v_n\\)\uff0c\u4f7f\u5f97\u82b1\u8cbb\u6700\u591a</p> <p>\\(N\\le 10^5\\)</p> \u63d0\u793a <p>\u82e5\u8003\u616e\u4ee5\u6a39\u91cd\u5fc3\u70ba\u6839 ? </p> <p>\u80fd\u4e0d\u80fd\u8b93\u6bcf\u689d\u8def\u5f91\u90fd\u7d93\u904e\u6a39\u91cd\u5fc3</p> <p>\u8a3b : \u6a39\u91cd\u5fc3\u79fb\u9664\u5f8c\u6bcf\u500b\u5b50\u6a39\u5927\u5c0f \\(\\le n/2\\)</p> \u601d\u8def <p>\u6211\u5011\u5148\u5c0d\u65bc\u6bcf\u689d\u908a\u7368\u7acb\u601d\u8003\uff0c\u6700\u591a\u591a\u5c11\u500b\u9ede\u53ef\u4ee5\u5f9e \\((u,v)\\) \u79fb\u52d5 ?</p> <p>\u7b54\u6848\u662f \\(2\\times \\min(sz_u, n - sz_u)\\) </p> <p>\u82e5\u6709\u8fa6\u6cd5\u5c07\u9019\u4e9b\u908a\u4ee5\u67d0\u7a2e\u65b9\u6cd5\u63a5\u8d77\u4f86\uff0c\u7b54\u6848\u5247\u70ba </p> \\[\\sum\\limits_{\\text{edge}\\in (u,v)} 2\\times \\min(sz_u, n - sz_u)\\] <p> \u53ef\u4ee5\u8b49\u660e\u4e0a\u754c\u662f\u53ef\u4ee5\u9054\u5230\u7684\uff0c\u4e0a\u5716\u70ba\u4e00\u500b\u4f8b\u5b50 <p>\u89c0\u5bdf\u5230\u9019\u500b\u8a66\u5b50\u8ddf\u6a39\u91cd\u5fc3\u7684\u8a66\u5b50\u883b\u50cf\u7684\uff0c\u6709\u9ede\u8b8a\u6210\u9019\u984c\uff08CSES - Network Renovation\uff09</p> <p>\u8003\u616e\u6a39\u91cd\u5fc3\u70ba\u6839\uff0c\u6bcf\u500b\u5b50\u6a39\u7684\u5927\u5c0f \\(\\le n/2\\)</p> <p>\u4ee3\u8868\u6bcf\u500b\u5b50\u6a39\u4ee5\u5916\u7684\u5927\u5c0f\u81f3\u5c11\u662f \\(n-n/2=n/2\\)\uff0c\u6240\u4ee5\u5b50\u6a39\u5167\u7684\u9ede\u5fc5\u5b9a\u53ef\u4ee5\u8d70\u5230\u5b50\u6a39\u4ee5\u5916\uff0c\u5916\u9762\u4e5f\u4e00\u5b9a\u6709\u8fa6\u6cd5\u5168\u90e8\u90fd\u8d70\u9032\u4f86</p> <p>\u4e5f\u5c31\u6bcf\u689d\u908a\u6703\u88ab\u8d70\u7684\u6b21\u6578\u5c31\u662f \\(2\\times sz_u\\) (\u9019\u908a\u7684 \\(sz\\) \u662f\u4ee5\u6a39\u91cd\u5fc3\u70ba\u6839\u8a08\u7b97\u7684)</p> <p>\u4e5f\u5c31\u662f\u7b26\u5408\u4e0a\u9762\u7684 \\(2\\times \\min(sz_u, n - sz_u)\\)</p> <p> \u5c07\u6bcf\u500b\u9ede\u90fd\u5148\u63a8\u5230 root(\u91cd\u5fc3)\uff0c\u5728\u8b93\u4ed6\u5206\u914d\u8a72\u5f80\u54ea\u500b\u5b50\u6a39\u53bb <p>\u81f3\u65bc\u69cb\u9020\u7684\u8a71\uff0c\u4f7f\u5f97\u6bcf\u500b\u7bc0\u9ede\u90fd\u4e0d\u843d\u5165\u540c\u4e00\u5b50\u6a39\u4e2d\u5c31\u884c\u4e86</p> <p>\u4ee5\u91cd\u5fc3\u70ba\u6839\uff0c\u5b50\u6a39\u7684 size \u4e0d\u6703\u8d85\u904e \\(n/2\\)\uff0c\u6240\u4ee5\u4f9d\u7167 dfs \u5e8f shift \\(n/2\\) \u683c\u4e4b\u5f8c\u5c0d\u61c9\u5230\u7684\u9ede\u4e00\u5b9a\u5728\u4e0d\u540c\u5b50\u6a39</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5;\nint n, C, s[N], dt, ds[N], ord[N];\nvector&lt;int&gt; G[N];\nlong long ans;\n\n// \u627e\u6a39\u91cd\u5fc3\nvoid find(int u = 0, int par = -1) {\n    s[u] = 1;\n    int w = 0;\n    for (auto v : G[u]) {\n        if (v == par)\n            continue;\n\n        find (v, u);\n        s[u] += s[v];\n        w = max(w, s[v]);\n    }\n\n    w = max(n - s[u], w);\n\n    if (w &lt;= n / 2) {\n        C = u;\n    }\n}\n\nvoid dfs(int u = 0, int p = -1) {\n    ord[u] = dt;\n    ds[dt++] = u; // dfs \u5e8f\n    s[u] = 1;\n    for (int v : G[u]) {\n        if (v == p)\n            continue;\n        dfs(v, u);\n        ans += min(s[v], n - s[v]);\n        s[u] += s[v];\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    cin &gt;&gt; n;\n    for (int i = 1, u, v; i &lt; n; i++) {\n        cin &gt;&gt; u &gt;&gt; v, --u, --v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n\n    find(); \n    dfs(C);\n\n    cout &lt;&lt; 2 * ans &lt;&lt; \"\\n\";\n    for (int i = 0; i &lt; n; i++)\n        cout &lt;&lt; ds[(ord[i] + n / 2) % n] + 1 &lt;&lt; \" \";\n}\n</code></pre>"},{"location":"graph/tree_greedy/#cf-963-b","title":"CF 963 B","text":"CF 963 B. Destruction of a Tree <p>\u7d66\u4f60\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u53ea\u80fd\u522a\u9664\u5ea6\u6578\u70ba\u5076\u6578\u7684\u7bc0\u9ede\uff0c\u7bc0\u9ede\u522a\u9664\u5f8c\uff0c\u8207\u5b83\u76f8\u9023\u7684\u908a\u4e5f\u6703\u522a\u9664\uff0c\u554f\u4f60\u80fd\u5426\u628a\u6240\u6709\u9ede\u522a\u9664\uff0c\u53ef\u4ee5\u7684\u8a71\u69cb\u9020\u4efb\u610f\u4e00\u7d44\u89e3\u3002</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u7db2\u8def\u4e0a\u5e38\u898b\u65b9\u6cd5 : </p> <p>\u5c0d\u65bc\u4e00\u500b\u5b50\u6a39\uff0c\u82e5\u5b50\u6a39\u908a\u7e3d\u548c\u70ba\u5076\u6578\uff0c\u90a3\u9ebc\u6bcf\u6b21\u522a\u6389\u5076\u6578\u908a\u7684\u7bc0\u9ede\uff0c\u6700\u5f8c\u4e00\u5b9a\u6703\u7559\u4e0b\u5076\u6578\u908a\uff0c\u5c31\u53ef\u4ee5\u522a\u5b8c\uff0c\u5269\u4e0b\u5c31\u53ea\u8981\u8b49\u660e\u70ba\u4f55\u4e0d\u6703\u51fa\u73fe\u7e3d\u548c\u5076\u908a\u5b50\u6a39\u4e0a\u7684\u7bc0\u9ede\u90fd\u662f\u5947\u6578\u908a\u800c\u7121\u6cd5\u522a\u9664\u7684\u60c5\u6cc1\u3002</p> <p>\u8b49\u660e :</p> <p>\u8a2d\u5076\u6578\u908a\u70ba \\(2x\\)\uff0c\u5947\u6578\u9ede\u70ba \\(2x+1\\) \u5c0d\u65bc\u6bcf\u500b\u908a\uff0c\u90fd\u6703\u88ab\u7bc0\u9ede\u7b97\u5169\u6b21\uff0c\u6240\u4ee5\u5c07 \\(2x\\times2=4x\\) \u82e5\u8981\u4f7f\u7bc0\u9ede\u90fd\u7121\u6cd5\u958b\u59cb\u522a\u9ede\uff08\u90fd\u662f\u5947\u6578\u908a\uff09\uff0c\u90a3\u9ebc\u7bc0\u9ede\u908a\u6578\u52a0\u7e3d\u8981\u7b49\u65bc \\(4x\\)\uff0c\u4f46\u5947\u6578\u500b\u5947\u6578\u7e3d\u548c\u5fc5\u7b49\u65bc\u5947\u6578\uff0c\u4e5f\u5c31\u4e0d\u7b26\u5408\u908a\u6578\u7e3d\u548c\u662f\u5947\u6578\u7684\u5047\u8a2d\uff0c\u56e0\u6b64\u5076\u6578\u908a\u5fc5\u53ef\u4ee5\u522a\u5b8c\u3002</p> <p>\u6211\u7684\u601d\u8def : </p> <p>\u5c0d\u65bc\u6bcf\u500b\u8449\u7bc0\u9ede\uff0c\u908a\u6578\u5fc5\u70ba \\(1\\)\uff0c\u90a3\u9ebc\u8981\u522a\u9664\u6b64\u8449\u7bc0\u9ede\uff0c\u53ea\u80fd\u5f9e\u4ed6\u7684\u7236\u7bc0\u9ede\u5148\u522a\u9664\uff0c\u6709\u9019\u500b\u60f3\u6cd5\u5f8c\uff0c\u767c\u73fe\u5e36\u5230\u4e00\u822c\u7bc0\u9ede\u908a\u6578\u904d\u6b77\u5f8c\u5269\u5947\u6578\u7684\u60c5\u6cc1\u4ea6\u76f8\u540c\u3002</p> <p>\u90a3\u9ebc\u904d\u6b77\u5f8c\u5269\u5076\u6578\u908a\u7684\u60c5\u6cc1\uff0c\u4ee5\u4e0b\u5716\u4f86\u8aaa\uff0c\u82e5\u5148\u522a \\(pa\\) \u5f8c\u522a \\(u\\)\uff0c\u6703\u9020\u6210 \\(u\\) \u8b8a\u6210\u5947\u6578\u908a\uff0c\u9019\u6a23 \\(u\\) \u548c \\(v\\) \u4e5f\u7121\u6cd5\u88ab\u522a \uff0c\u56e0\u70ba\u9019\u908a\u7684 \\(dfs\\) \u662f\u5e95\u90e8\u904d\u6b77\u4e0a\u4f86\uff0c\u6240\u4ee5\u9700\u8981\u5148\u522a\u9664\u7684\u5b50\u7bc0\u9ede\u5df2\u522a\u9664\uff08\u63a5\u4e0b\u4f86\u6703\u5beb\u751a\u9ebc\u60c5\u6cc1\u5fc5\u9808\u5148\u522a\u9664\uff09\uff0c\u4e0d\u5b58\u5728\u518d\u5c07 \\(u\\) \u7684\u5b50\u7bc0\u9ede\u522a\u6389\uff0c\\(u\\) \u53c8\u53ef\u4ee5\u88ab\u522a\u9664\u7684\u60c5\u6cc1\uff0c\u56e0\u6b64\u5fc5\u9808\u5148\u522a \\(u\\) \u5f8c\u522a \\(pa\\)\u3002</p> <p>\u7e3d\u7d50\u4f86\u8aaa\uff0c\u5c0d\u65bc \\(pa\\) \u7684\u5b50\u7bc0\u9ede\u6703\u5b58\u5728\u5169\u7a2e\u60c5\u6cc1 : </p> <ol> <li> <p>\u5b50\u7bc0\u9ede\u70ba\u5947\u6578\u908a\uff0c\u9700\u5148\u522a\u9664 \\(pa\\) \u624d\u80fd\u522a\u9664\u5b50\u7bc0\u9ede\u3002</p> </li> <li> <p>\u5b50\u7bc0\u9ede\u70ba\u5076\u6578\u908a\uff0c\u9700\u5148\u522a\u9664\u5b50\u7bc0\u9ede\u3002</p> </li> </ol> <p> </p> <p>\u7c21\u55ae\u8aaa\u660e\u5be6\u4f5c\u65b9\u6cd5 :</p> <p>\u5148\u7528 \\(dfs1\\) \u5f9e\u8449\u7bc0\u9ede\u8dd1\u4e0a\u53bb\u770b\u6bcf\u4e00\u500b\u7bc0\u9ede\u904d\u6b77\u5f8c\u5269\u4e0b\u5947\u908a\u9084\u662f\u5076\u908a\uff0c\u82e5\u5947\u908a\uff0c\u6703\u5c07\u8a72\u9ede push_back \u9032 \\(ans\\)\uff08case1\uff09\uff0c\u82e5\u5076\u908a\uff0c\u7528 \\(vis\\) \u7d00\u9304\u672a\u52a0\u5165 \\(ans\\)\uff08case2\uff09\u3002</p> <p>\u518d\u7528 \\(dfs2\\) \u5f9e\u7236\u7bc0\u9ede\u8dd1\u4e0b\u53bb\uff0c\u5c07\u672a\u52a0\u5165 \\(ans\\) \u52a0\u5230\u88e1\u9762\u3002</p> <p>\\(ans\\) \u53ef\u4ee5\u8996\u70ba \\(stack\\) \u7684\u578b\u614b\uff0c\u5148\u52a0\u5165\u7684\u4ee3\u8868\u5f8c\u522a\u9664\u3002</p> code(by rahlin1004) <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\nusing namespace std;\n\nconst int MAXN=2e5+10,INF=1e18;\nint n,vis[MAXN];\nvector&lt;vector&lt;int&gt;&gt; G(MAXN);\nvector&lt;int&gt; ans;\n\nvoid dfs2(int u,int pa){\n    if(!vis[u]) ans.pb(u);\n    for(int v:G[u]){\n        if(v==pa) continue;\n        dfs2(v,u);\n    }\n}\n\nbool dfs1(int u,int pa){\n    int deg=G[u].size();\n    for(int v:G[u]){\n        if(v==pa) continue;\n        if(dfs1(v,u)) deg--;\n    }\n    if(deg%2==1){ //boom no\n        ans.pb(u);\n        vis[u]=1;\n        return false;\n    }\n    return true;\n}\n\nsigned main(){\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++){\n        int p;\n        cin&gt;&gt;p;\n        if(p==0) continue;\n        G[i].pb(p);\n        G[p].pb(i);\n    }\n\n    if(!dfs1(1,0)) cout&lt;&lt;\"NO\\n\";\n    else{\n        cout&lt;&lt;\"YES\\n\";\n        dfs2(1,0);\n        for(int i=ans.size()-1;i&gt;=0;i--) cout&lt;&lt;ans[i]&lt;&lt;\"\\n\";\n    }\n}\n</code></pre>"},{"location":"graph/tree_greedy/#2022-ytp-p3","title":"2022 YTP \u521d\u8cfd p3","text":"2022 YTP \u521d\u8cfd p3 \u2fca\u2f69\u821e\u8e48\u6a5f <p>\u7d66\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u6bcf\u500b\u9ede\u6709\u4e00\u500b\u6b0a\u503c \\(c_i\\in \\{0,1 \\}\\)\uff0c\u7576\u76ee\u524d\u9078\u64c7\u4e00\u689d\u908a \\((u,v)\\) \u6642\uff0c\u9019\u689d\u908a\u5169\u7aef\u7684 \\(c_u,c_v\\) \u90fd\u6703\u88ab xor \\(1\\)\u3002\u554f\u80fd\u4e0d\u80fd\u9078\u4e00\u4e9b\u908a\u4f7f\u6240\u6709\u9ede\u7684 \\(c_i\\) \u90fd\u662f \\(0\\)</p> <p>\\(n\\le 10^5,m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u82e5 \\(c_i=1\\) \u7684\u6578\u91cf\u662f\u57fa\u6578\uff0c\u90a3\u5fc5\u5b9a\u7121\u89e3\u3002\u82e5\u6709\u4e00\u689d\u908a \\((u,v)\\) \u7684 \\(c_u=c_v=1\\)\uff0c\u90a3\u52e2\u5fc5\u53ef\u4ee5\u76f4\u63a5\u92b7\u6389\u3002\u90fd\u92b7\u6389\u5f8c\u5269\u4e0b\u7684\u6bcf\u500b \\(c_i=1\\) \u7684\u9ede\u90fd\u5fc5\u9808\u53bb\u627e\u53e6\u4e00\u500b\u6bd4\u8f03\u9060\u7684 \\(c_j=1\\) \u505a\u6d88\u9664\uff08\u985e\u4f3c\u4ed6\u7684\u8ca2\u737b\u6703\u79fb\u52d5\u904e\u53bb\uff09\uff0c\u53ea\u662f\u5716\u4e0a\u7684 path \u4e0d\u597d\u627e\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u5716\u7c21\u5316\u6210 Tree\uff08spanning tree\uff09\uff0c\u4ed6\u5011\u7684\u8ca2\u737b\u5c31\u6703\u4e00\u8d77\u5f80 LCA \u79fb\u52d5\u904e\u53bb\u3002\u6211\u5011\u5c31\u53ef\u4ee5\u5f9e leaf greedy \u7684\u5c07 \\(c_i=1\\) \u7684\u9ede\u79fb\u7684\u8ca2\u737b\u5f80 root \u7684\u65b9\u5411\u79fb\u52d5\u904e\u53bb\u5373\u53ef\u3002</p> <p>\u5be6\u4f5c\u4e0a\u4e5f\u4e0d\u7528\u771f\u7684\u53bb\u627e spanning tree\uff0c\u56e0\u70ba DFS \u7684\u904e\u7a0b\u5176\u5be6\u5c31\u662f\u4e00\u9846 tree\uff08\u4e0b\u5716\u9ed1\u8272\u7684\u908a\uff09</p> <p> </p> <p>\u76f4\u63a5\u628a\u5716\u7576\u6210 Tree \u4f86\u505a\u5c31\u53ef\u4ee5\u4e86</p> <pre><code>void dfs(int u) {\n    vis[u] = 1;\n    if (a[u] == 1) sum++;\n    for (auto [v, eid] : G[u]) {\n        if (vis[v] == 1) continue;\n        dfs(v);\n        if (!dp[v]) continue;\n        ans.pb(eid);\n        dp[u] ^= 1;\n    }\n}\n</code></pre> <p>\u6211\u8907\u96dc\u7684\u60f3\u6cd5 :</p> <p>\u5c07\u5716\u8f49\u6210 spanning tree\uff0c\u5c07 \\(c_i=1\\) \u7684\u9ede\u5169\u5169\u914d\u5c0d\uff0c\u5728\u8986\u84cb\u4ed6\u5011\u4e4b\u9593\u7684 path\uff0c\u7136\u5f8c\u518d\u7528\u6a39\u4e0a\u524d\u7db4\u548c\u8a08\u7b97\u6bcf\u500b\u908a\u88ab\u8986\u84cb\u5947\u6578\u6216\u5076\u6578\u6b21\u5373\u53ef\u3002\u53ea\u662f\u9019\u500b\u5be6\u4f5c\u81f3\u5c11\u5169\u767e\u884c\u8d77\u8df3\uff0c\u5728\u6b63\u5f0f\u6bd4\u8cfd\u4e0d\u5be6\u7528</p> code(by rahlin1004) <pre><code>#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(2)\n#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define f first;\n#define s second\n#define pii pair&lt;int,int&gt;\n#define pipi pair&lt;int,pair&lt;int,int&gt;&gt;\n#define lowbit(x) x&amp;(-x)\n\nusing namespace std;\nconst int INF=1e18,MAXN=2e5+10;\nint n,m,a[MAXN],dp[MAXN],vis[MAXN],sum=0;\nvector&lt;vector&lt;pii&gt;&gt; G(MAXN);\nvector&lt;int&gt; ans;\n\nvoid dfs(int u){\n    vis[u]=1;\n    if(a[u]==1) sum++;\n    for(auto [v,w]:G[u]){\n        if(vis[v]==1) continue;\n        dfs(v);\n        if(!dp[v]) continue;\n        ans.pb(w);\n        dp[u]^=1;\n    }\n}\n\nsigned main(){\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    cin&gt;&gt;n&gt;&gt;m;\n    for(int i=1;i&lt;=n;i++) {\n        cin&gt;&gt;a[i];\n        dp[i]=a[i];\n    }\n    for(int i=1;i&lt;=m;i++){\n        int u,v;\n        cin&gt;&gt;u&gt;&gt;v;\n        G[u].pb({v,i});\n        G[v].pb({u,i});\n    }\n    for(int i=1;i&lt;=n;i++){\n        if(vis[i]) continue;\n        sum=0;\n        dfs(i);\n        //cout&lt;&lt;\"i \"&lt;&lt;i&lt;&lt;\" sum \"&lt;&lt;sum&lt;&lt;\"\\n\";\n        if(sum%2==1) {\n            cout&lt;&lt;\"No \"&lt;&lt;\"\\n\";\n            exit(0);\n        }\n    }\n    cout&lt;&lt;\"Yes\\n\";\n    cout&lt;&lt;ans.size()&lt;&lt;\"\\n\";\n    for(auto ele:ans) cout&lt;&lt;ele&lt;&lt;\" \";\n}\n</code></pre>"},{"location":"graph/tree_greedy/#cf-1436-d","title":"CF 1436 D","text":"CF 1436 D. Bandit in a City <p>\u7d66\u5b9a\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6709\u6839\u6a39\uff0c\u5f37\u76dc\u4e00\u958b\u59cb\u5728\u6839\u7bc0\u9ede\uff0c\u5f37\u76dc\u6bcf\u79d2\u5411\u4e0b\u8d70\u4e00\u683c\u3002\u6bcf\u500b\u9ede\u90fd\u6709\u4e00\u4e9b\u6751\u6c11\uff0c\u7576\u5f37\u76dc\u8d70\u5230\u67d0\u500b\u9ede\u6642\uff0c\u9ede\u4e0a\u7684\u6751\u6c11\u6703\u5404\u81ea\u5411\u4e0b\u8d70\u4e00\u500b\u9ede\uff0c\u6700\u7d42\u53ea\u80fd\u8d70\u5230\u8449\u5b50\u3002\u5f37\u76dc\u60f3\u6700\u5927\u5316\u6293\u5230\u7684\u6751\u6c11\uff0c\u6751\u6c11\u60f3\u6700\u5c0f\u5316\u88ab\u6293\u5230\u7684\u4eba\u6578\uff0c\u5982\u679c\u6751\u6c11\u8207\u5f37\u76dc\u90fd optimal\uff0c\u5f37\u76dc\u80fd\u6293\u5230\u591a\u5c11\u6751\u6c11</p> <p>\\(n \\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u4e5f\u5c31\u662f\u6700\u5c0f\u5316\u6240\u6709\u8449\u7bc0\u9ede\u4e2d\u7684\u6700\u5927\u6b0a\u503c\u3002\u4ee4 dp[u] \u70ba\u4ee5 u \u70ba\u6839\u7684\u5b50\u6a39\u4e2d\u6700\u5927\u8449\u5b50\u7bc0\u9ede\u7684\u6700\u5c0f\u503c\u3002\u5047\u5982\u6211\u5011\u5148\u4e0d\u74dc\u5206 a[u] \u7684\u6b0a\u503c\uff0c\u4e00\u5b9a\u6709 \\(dp[u] = \\max \\limits_{v \\in son(u)} dp[v]\\)\u3002\u5047\u8a2d u \u5b50\u6a39\u5167\u7684\u6b0a\u503c\u5408\u70ba sum[u]\uff0c\u8449\u5b50\u6578\u91cf\u662f leaf[u]\uff0c\u7406\u60f3\u72c0\u614b\u4e0b\uff08\u5747\u5206\uff09\u4ee5 u \u70ba\u6839\u7684\u5b50\u6a39\u4e2d\u6700\u5927\u8449\u7bc0\u9ede\u7684\u6700\u5c0f\u503c\u70ba \\(\\lceil \\dfrac{\\text{sum}_u}{\\text{leaf}_u}\\rceil\\)\u3002\u4e0d\u904e\u7406\u60f3\u72c0\u614b\u4e0d\u4e00\u5b9a\u662f\u9054\u7684\u5230\u7684\uff08\u4f8b\u5982\u6709\u4e00\u9846\u5b50\u6a39\u4ed6\u5de6\u908a\u7684\u6b0a\u503c\u7279\u5225\u5927\uff0c\u4f46\u8449\u5b50\u6578\u91cf\u7279\u5225\u5c0f\uff09\uff0c\u5982\u679c \\(\\max \\limits_{v \\in son(u)} dp[v] &gt; \\lceil \\dfrac{\\text{sum}_u}{\\text{leaf}_u}\\rceil\\) \u7684\u8a71\uff0cdp[u] \u9084\u662f\u53ea\u80fd\u53d6 \\(\\max \\limits_{v \\in son(u)} dp[v]\\)\uff0c\u53cd\u4e4b\u5c31\u53ef\u4ee5\u5747\u5206\uff0c\u5373 \\(dp[u] = \\lceil \\dfrac{\\text{sum}_u}{\\text{leaf}_u}\\rceil\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\n#define pb push_back\n\nconst int maxn = 2e5 + 10;\n\nvector&lt;int&gt; G[maxn];\nint a[maxn], leaf_cnt[maxn], sum[maxn], dp[maxn];\n\nvoid dfs(int u) {\n    sum[u] = a[u];\n    if (!G[u].size()) {\n        leaf_cnt[u] = 1;\n    }\n    for (auto v : G[u]) {\n        dfs(v);\n    }\n    for (auto v : G[u]) {\n        dp[u] = max(dp[u], dp[v]);\n        leaf_cnt[u] += leaf_cnt[v];\n        sum[u] += sum[v];\n    }\n    dp[u] = max(dp[u], (sum[u] + leaf_cnt[u] - 1) / leaf_cnt[u]);\n    // \u5411\u4e0a\u53d6\u6574\n}\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 2; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        G[x].pb(i);\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    dfs(1);\n    cout &lt;&lt; dp[1] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"graph/tree_greedy/#cf-982-c","title":"CF 982 C","text":"CF 982 C. Cut 'em all! <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u554f\u4f60\u6700\u591a\u80fd\u5207\u6389\u5e7e\u689d\u908a\uff0c\u4f7f\u5f97\u6bcf\u500b\u9023\u901a\u584a\u7684\u5927\u5c0f\u90fd\u662f\u5076\u6578</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\\(n\\) \u70ba\u5947\u6578\u6642\u5fc5\u5b9a\u7121\u89e3\u3002\u6240\u4ee5\u7576\u6211\u5011\u53ef\u4ee5\u5f9e leaf \u5f80 root \u8003\u616e\uff0c\u7576\u9047\u5230 sz[v] \u70ba\u5076\u6578\u5247\u53ef\u4ee5\u76f4\u63a5\u5207\uff0c\u56e0\u70ba\u9664\u4e86 u \u7684\u9023\u901a\u584a\u5927\u5c0f\u9084\u662f\u5076\u6578\u4e4b\u5916\uff0c\u7b54\u6848\u8ca2\u737b\u9084 +1\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\nusing namespace std;\n\nconst int maxn = 100005;\nvector&lt;int&gt; G[maxn];\nint sz[maxn];\nint n, ans;\n\nvoid dfs(int u, int par) {\n    sz[u] = 1;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs(v, u);\n        sz[u] += sz[v];\n        if (sz[v] % 2 == 0) ans++;\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n\n    if (n &amp; 1) {\n        cout &lt;&lt; \"-1\\n\";\n        exit(0);\n    }\n\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    dfs(1, -1);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"graph/tree_greedy/#_2","title":"\u6a39\u4e0a\u5339\u914d\u554f\u984c","text":""},{"location":"graph/tree_greedy/#1","title":"\u984c\u76ee1","text":"\u6a39\u4e0a\u5339\u914d\u554f\u984c \u984c\u76ee1 <p>\u7d66\u5b9a \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u5176\u4e2d \\(n\\) \u70ba\u5076\u6578\uff0c\u6211\u5011\u8981\u5c07\u6240\u6709\u9802\u9ede\u5169\u5169\u914d\u5c0d\uff0c\u5176\u4e2d\u9ede \\(u\\) \u548c\u9ede \\(v\\) \u914d\u5c0d\u7684\u6b0a\u503c\u70ba \\(dis(u,v)\\)\u3002\u73fe\u5728\u8981\u6c42\u5c07\u6240\u6709\u9ede\u5169\u5169\u914d\u5c0d\uff0c\u4e14\u8981\u6c42\u8a08\u7b97\u6700\u5c0f/\u6700\u5927\u6b0a\u91cd\u7e3d\u548c</p> \u601d\u8def <p>\u3010\u6700\u5c0f\u3011</p> \\[ \\begin{aligned} W&amp;=\\sum dis(u,v) \\\\ &amp;=\\sum \\text{depth}(u)+\\text{depth}(v)-2\\times \\text{depth}(\\text{lca}(u,v)) \\\\ &amp;=\\sum \\text{depth}(v)- 2\\times \\sum \\text{depth}(\\text{lca}(u,v)) \\\\ \\end{aligned} \\] <p>\\(\\sum \\text{depth}(v)\\) \u662f\u53ef\u4ee5\u76f4\u63a5\u7b97\u7684\uff0c\u6211\u5011\u73fe\u5728\u80fd\u505a\u7684\u5c31\u662f\u5c07 \\(\\sum \\text{depth}(\\text{lca}(u,v))\\) \u6700\u5c0f\u5316\uff0c\u4e5f\u5c31\u662f\u5728\u96e2 root \u8d8a\u8fd1\u7684\u9ede\u7576 LCA \u914d\u5c0d\u6703\u8d8a\u597d</p> <p>\u6211\u5011\u53ef\u4ee5\u5c0d\u6a39\u5f9e root \u5f80\u4e0b\u9032\u884c DFS\uff0c\u4e26\u5118\u53ef\u80fd\u5728\u7576\u524d\u7684\u9ede \\(u\\) \u5c07\u4ee5 \\(v_1,v_2,\\ldots, v_k\\) \u70ba root \u7684\u5b50\u6a39\u9032\u884c\u914d\u5c0d\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u5c07\u5169\u500b\u4e0d\u540c\u7684\u5b50\u6a39 \\(\\texttt{tree}(v_i),\\texttt{tree}(v_j)\\) \u88e1\u9762\u7684\u9ede\u4ee5 \\(\\text{lca}=u\\) \u9032\u884c\u914d\u5c0d\u3002</p> <p>\u6240\u4ee5\u9019\u6642\u4ee5 \\(u\\) \u70ba LCA \u7684\u7b54\u6848\u8ca2\u737b\u5c31\u6703\u662f\u300c\u914d\u5c0d\u6578\u91cf \\(\\times \\text{depth}(u)\\)\u300d\u3002</p> <p>\u3010\u6700\u5927\u3011</p> <p>\u53ef\u4ee5\u5728 dfs \u7684\u6642\u5019\uff0c\u76e1\u91cf\u5c07 LCA \u8a2d\u5b9a\u70ba\u76ee\u524d\u904d\u6b77\u7684\u9802\u9ede\uff0c\u4e5f\u5c31\u662f\u5f9e\u4e0a\u9762 dfs \u4e0b\u4f86\u7684\u904e\u7a0b\u4e2d\u80fd\u914d\u5c31\u914d\uff0c\u800c\u6c42\u6700\u5c0f\u662f\u5f9e\u4e0b\u9762 dfs \u56de\u4f86\u6642\u80fd\u914d\u5c31\u914d\u3002</p> <p>\u53e6\u6cd5 : \u6a39\u91cd\u5fc3</p> <p>\u6211\u5011\u8981\u76e1\u91cf\u4f7f\u9ede\u9023\u5230\u4e0d\u540c\u7684\u5b50\u6a39\u4ee5\u5167\uff0c\u8003\u616e\u6a39\u91cd\u5fc3\u70ba\u6839\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u6a39\u91cd\u5fc3\u4ee5\u4e0b\u7684\u5b50\u6a39\u5229\u7528\u6a39\u91cd\u5fc3\u7576\u4f5c LCA \u505a\u914d\u5c0d\uff0c\u56e0\u70ba\u9ede\u662f\u5076\u6578\uff0c\u6240\u4ee5\u4e00\u5b9a\u53ef\u884c\u3002</p> <p>\u3010\u8b49\u660e\u3011 : \u70ba\u4f55\u4ee5\u6a39\u91cd\u5fc3\u70ba\u6839\u6703\u662f\u6700\u4f73\u89e3</p> <p>\u6bcf\u689d\u908a \\((u,v)\\) \u7684\u8ca2\u737b\u4e0a\u754c\u662f \\(\\min (sz_u, n - sz_u)\\)\u3002\u6ce8\u610f\u5230\u4ee5\u6a39\u91cd\u5fc3\u70ba\u6839\u7684\u6bcf\u689d\u908a\u5339\u914d\u7684\u65b9\u5411\u90fd\u662f\u671d\u8457\u6a39\u91cd\u5fc3\uff0c\u89c0\u5bdf\u6703\u767c\u73fe\u525b\u597d\u6bcf\u689d\u908a\u90fd\u6709\u7528\u5230\u9019\u500b\u4e0a\u754c\u3002\u6240\u4ee5\u5176\u5be6\u7b54\u6848\u53ef\u4ee5\u76f4\u63a5\u5beb\u6210 \\(ans=\\sum \\limits_{(u,v) \\in \\text{edge}} \\min (sz_u, n - sz_u)\\)\u3002</p> <p>\u5982\u679c\u984c\u76ee\u662f\u8981\u69cb\u9020\u4e00\u7d44\u89e3\u7684\u8a71\uff0c\u5c07\u9ede\u5229\u7528 dfs \u5e8f sort \u597d\uff0c\u7b2c i \u9805\u8207\u7b2c i + n \u9805\u914d\u5c0d\u5373\u53ef\u3002</p>"},{"location":"graph/tree_greedy/#2023-ioic-308","title":"2023 IOIC 308","text":"2023 IOIC 308 . \u6578\u5b57\u904a\u6232 <p>\u7d66\u5b9a \\(a_1, a_2, \\ldots, a_{2N}\\)\uff0cAlice \u53ef\u4ee5\u5c07\u9019\u500b\u6578\u5217\u4efb\u610f\u6392\u5217\uff0c\u4e4b\u5f8c Bob \u8981\u505a\u6700\u5c11\u6b21\u64cd\u4f5c\u4f7f\u5f97 \\(a_{i} = a_{i+N}\\) \u5c0d\u6240\u6709 \\(i\\) \u5f9e \\(1\\) \u5230 \\(N\\) \u90fd\u6210\u7acb\uff0cBob \u6bcf\u6b21\u53ef\u4ee5\u9032\u884c\u7684\u64cd\u4f5c\u70ba\u9078\u64c7\u4e00\u500b\u8db3\u6a19 \\(i\\)\uff0c\u5c07 \\(a_i\\) \u6539\u6210 \\(\\lfloor \\frac{a_i}{2} \\rfloor,2a_i\\) \u6216 \\(2a_i+1\\)\u3002Alice \u60f3\u8b93 Bob \u9700\u8981\u7684\u64cd\u4f5c\u6b21\u6578\u76e1\u91cf\u591a\uff0c\u90a3\u6700\u591a\u53ef\u4ee5\u662f\u591a\u5c11\uff1f</p> <p>Alice \u6703\u9032\u884c \\(Q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fd\u6703\u9078\u64c7\u6578\u5217\u7684\u67d0\u500b\u6578\u4fee\u6539\u6210\u65b0\u7684\u6578\u5b57\uff0c\u8f38\u51fa\u4fee\u6539\u5f8c\u6574\u500b\u9663\u5217\u7684\u7b54\u6848\u662f\u591a\u5c11\u3002</p> <p>\\(N,Q\\le 10^5,1\\le a_i\\le 10^6\\)</p> \u601d\u8def <p>\u5c07\u554f\u984c\u8f49\u63db\u6210 0-1 Trie\uff0c\u6703\u767c\u73fe \\(\\lfloor \\frac{a_i}{2} \\rfloor,2a_i, 2a_i+1\\) \u5f97\u64cd\u4f5c\u5206\u5225\u5c0d\u61c9\u5230\u5f80 parent \u8d70\uff0c\u5f80\u4e0b\u9762 0 \u7684\u908a\u8d70\uff0c\u5f80\u4e0b\u9762 1 \u7684\u908a\u8d70\u3002</p> <p> </p> <p>\u9019\u6a23\u554f\u984c\u5c31\u8b8a\u6210 : \u7d66\u4e00\u9846 BST\uff0c\u554f\u5169\u5169\u5339\u914d\u7684\u6700\u5927\u6b0a\u91cd\u7e3d\u548c</p> <p>\u8ddf\u4e0a\u9762\u90a3\u984c\u4e00\u6a23\uff0c\u6211\u5011\u7528\u5f9e root \u5f80\u4e0b DFS \u7684\u65b9\u5f0f\u53bb\u8a08\u7b97\u7b54\u6848\uff0c\u800c\u4e14\u56e0\u70ba\u662f BST\uff0c\u6240\u4ee5\u6211\u5011\u8a08\u7b97\u5b8c\u67d0\u500b\u9ede \\(u\\) \u6642\u53ef\u4ee5\u76f4\u63a5\u7e7c\u7e8c DFS \u5728\u88e1\u9762\u7684\u6578\u5b57\u6bd4\u8f03\u5c11\u7684 \\(v\\)\uff08\u8a73\u898b\u4ee3\u78bc\uff09\uff0c\u6240\u4ee5\u904e\u7a0b\u6703\u662f\u4e00\u500b\u5f9e root \u5f80\u4e0b\u7684 path\uff0cTrie \u7684\u6df1\u5ea6\u662f \\(O(\\log n)\\)\uff0c\u6240\u4ee5\u6642\u9593\u8907\u96dc\u5ea6\u662f\u597d\u7684</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int SIZE = 2e5 + 5;\nconst int TSIZ = 20 * SIZE;\n\nint n, q, sum;\nlong long ans;\nint a[SIZE];\nint siz, cnt[TSIZ], to[TSIZ][2], e[TSIZ];\n// siz : stamp, cnt[] : \u5b50\u6a39\u5927\u5c0f\u7e3d\u548c\n// to[][0/1] : \u7d00\u9304 01Trie \u6bcf\u500b\u9ede\u7684\u7de8\u865f\n// e[] : Trie \u4e0a\u7684\u67d0\u500b\u9ede\u4e0a\u6709\u5e7e\u500b\u6578\u5b57\n\nvoid ins(string s, int add) {\n    int pos = 0;\n    cnt[0] += add;\n    sum += add * ((int)s.size());\n    for (char c : s) {\n        int b = c - '0';\n        if (!to[pos][b]) to[pos][b] = ++siz;\n        pos = to[pos][b];\n        cnt[pos] += add;\n    }\n    e[pos] += add;\n}\n\nint que() {\n    int re = sum;\n    int pos = 0, dep = 0, all = 2 * n;\n    for (int i = 20; i &gt;= 0 &amp;&amp; all; i--) {\n        dep++;\n        int c0 = to[pos][0] ? cnt[to[pos][0]] : 0;\n        int c1 = to[pos][1] ? cnt[to[pos][1]] : 0;\n        int ce = e[pos];\n        int mn = min({c0 + ce, c1 + ce, all / 2});\n        re -= 2 * (dep - 1) * mn;\n        all -= 2 * mn; \n        if (c0 &lt;= c1) pos = to[pos][1];\n        else pos = to[pos][0];\n        if (!pos) return re;\n    }\n    return re;\n}\n\nstring f(int x) {\n    string t;\n    while (x) {\n        if (x &amp; 1) t += \"1\";\n        else t += \"0\";\n        x &gt;&gt;= 1;\n    }\n    reverse(t.begin(), t.end());\n    return t;\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= 2 * n; i++) {\n        cin &gt;&gt; a[i];\n        ins(f(a[i]), 1);\n    }\n    cin &gt;&gt; q;\n    while (q--) {\n        int p, x;\n        cin &gt;&gt; p &gt;&gt; x;\n        ins(f(a[p]), -1);\n        a[p] = x;\n        ins(f(a[p]), 1);\n        cout &lt;&lt; que() &lt;&lt; '\\n';\n    }\n}\n</code></pre> \u6d1b\u8c37 P4556 [Vani\u6709\u7ea6\u4f1a] \u96e8\u5929\u7684\u5c3e\u5df4 <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u4e0a\u90fd\u6709\u4e00\u500b\u80cc\u5305\uff0c\u4e00\u958b\u59cb\u662f\u7a7a\u7684\u3002\u6709 \\(q\\) \u7b46\u64cd\u4f5c:</p> <ul> <li>\\(\\text{add}(u, v, x)\\): \u5c07 \\(u\\) \u5230 \\(v\\) \u7684 path \u4e0a\u7684\u9ede\u7684\u80cc\u5305\u90fd\u653e\u5165 \\(x\\)</li> </ul> <p>\u6700\u5f8c\u5c0d\u65bc\u6bcf\u500b\u9ede\u8f38\u51fa\u80cc\u5305\u6700\u591a\u7684\u6578\u5b57\uff08\u8f38\u51fa\u6700\u5c0f\u53ef\u80fd\u7684\u7b54\u6848\uff09</p> <p>\\(n,q\\le 10^5,1\\le x\\le 10^5\\)</p> \u601d\u8def <p>\u5148\u8003\u616e path \u7684 case\uff0c\u767c\u73fe\u6211\u5011\u53ef\u5c07 add \u64cd\u4f5c\u60f3\u6210\u597d\u5e7e\u500b\u5f9e \\(u\\) \u5230 \\(v\\) interval\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u7528 sweep line \u5f9e\u5de6\u5230\u53f3\u6383\u904e\u53bb\uff0c\u7528 map \u4e4b\u985e\u7684 data structrue \u7dad\u8b77\uff0c\u8907\u96dc\u5ea6 \\(O(q\\log n)\\)</p> <p> </p> <p>Tree \u7684 case \u8003\u616e\u6a39\u93c8\u5256\u5206\uff0c\u5c07\u4e00\u6b21 add \u8b8a\u6210\u5728 \\(\\log n\\) \u689d path \u7684 case \u5373\u53ef\uff0c\u8907\u96dc\u5ea6 \\(O(q\\log ^2 n)\\)</p> CF 1919 D. 01 Tree <p>\u7d66\u4f60\u4e00\u9846\u5b8c\u5168\u4e8c\u5143\u6a39\uff0c\u8207\u5152\u5b50\u76f8\u9023\u7684\u5169\u689d\u908a\u6b0a\u6070\u597d\u4e00\u500b\u662f 0\uff0c\u4e00\u500b\u662f 1\u3002\u76ee\u524d\u4e0d\u77e5\u9053\u6a39\u7684\u5f62\u614b\u3002\u4f46\u5df2\u77e5\uff0c\u4f9d\u7167 dfs \u5e8f\uff0c\u8449\u5b50\u7d50\u9ede\u7684\u6b0a\u91cd\u6070\u597d\u662f\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 a\u3002\u6b0a\u91cd\u5b9a\u7fa9\u70ba root \u5230 node \u7684\u908a\u6b0a\u7e3d\u548c\u3002</p> <p>\\(n\\le 2\\times 10^5, 0 \\le a_i \\le n - 1\\)</p> \u601d\u8def <p>\u3010\u8f49\u5316\u984c\u610f\u3011</p> <p>\u6a39\u771f\u7684\u6bd4\u8f03\u62bd\u8c61\u3002\u767c\u73fe\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u9019\u6a23\u7684\u65b9\u6cd5\u4f86\u5617\u8a66\u89e3\u69cb\u4e00\u9846\u5b8c\u5168\u4e8c\u5143\u6a39\uff1a\u627e\u5230\u5169\u500b\u5144\u5f1f\u8449\u5b50\u7bc0\u9ede\uff0c\u522a\u9664\u5b83\u5011\u3002\u6b64\u6642\u5b83\u5011\u7684\u7236\u89aa\u8b8a\u6210\u8449\u5b50\u7d50\u9ede\u3002\u7531\u65bc\u662f\u4e00\u9846\u5b8c\u5168\u4e8c\u5143\u6a39\uff0c\u6bcf\u6b21\u4e00\u5b9a\u80fd\u627e\u5230\u5169\u500b\u8449\u5b50\u5144\u5f1f\u7bc0\u9ede\uff0c\u77e5\u9053\u53ea\u5269\u4e0b\u4e00\u500b\u9ede\u3002</p> <p>\u3010\u984c\u76ee\u7684\u6027\u8cea\u3011</p> <p>\u984c\u76ee\u4e2d\u7684\u6a39\u9084\u6709\u4e00\u500b\u7279\u9ede\uff0c\u5c31\u662f\u5144\u5f1f\u7bc0\u9ede\u7684\u6df1\u5ea6\u5dee\u70ba \\(1\\)\u3002 \u7d50\u5408\u5169\u500b\u7279\u9ede\uff0c\u53cd\u6620\u5728\u5e8f\u5217\u4e0a\u5c31\u662f\uff1a\u6bcf\u6b21\u9078\u64c7 \\(a_i\\)\uff0c\u6eff\u8db3 \\(|a_i - a_{i+1}| = 1\\)\uff0c\u522a\u9664 \\(a_i\\) \u548c \\(a_{i+1}\\)\uff08\u5144\u5f1f\u8449\u5b50\u7d50\u9ede\uff09\uff0c\u7136\u5f8c\u5728\u9019\u500b\u4f4d\u7f6e\u52a0\u5165 \\(\\min(a_i, a_{i+1})\\)\uff08\u7236\u89aa\u7bc0\u9ede\uff09\u3002</p> <p>\u554f\u984c\u7c21\u5316\u70ba\uff1a\u6bcf\u6b21\u9078\u64c7\u4e00\u500b\u4f4d\u7f6e\uff0c\u6eff\u8db3\u5b58\u5728\u76f8\u9130\u7684\u4f4d\u7f6e\u6b0a\u503c\u6bd4\u5b83\u5c0f 1\uff0c\u7136\u5f8c\u522a\u9664\u5b83\uff0c\u6700\u7d42\u80fd\u5426\u5f97\u5230 \\(a = [0]\\)\u3002</p> <p>\u3010\u4f5c\u6cd5\u5206\u6790\u3011</p> <p>\u53ef\u4ee5\u767c\u73fe\uff0c\u5e8f\u5217\u7684\u6700\u5927\u503c\u53ea\u80fd\u88ab\u5176\u5b83\u5143\u7d20\u522a\u6389\u3002\u9019\u610f\u5473\u8457\u6211\u5011\u53ef\u4ee5\u8caa\u5fc3\u5730\u522a\u9664\u6240\u6709\u5e8f\u5217\u6700\u5927\u503c\u3002\u5982\u679c\u6709\u5143\u7d20\u4e0d\u80fd\u88ab\u522a\u6389\uff0c\u90a3\u9ebc\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\u522a\u9664\u7684\u4e00\u500b\u6bd4\u8f03\u7c21\u55ae\u7684\u5beb\u6cd5\u662f\uff0c\u6ce8\u610f\u5230\u4e00\u500b\u6700\u5927\u503c\u9023\u7e8c\u6bb5\uff0c\u53ea\u8981\u67d0\u500b\u7aef\u9ede\u80fd\u88ab\u522a\u9664\uff0c\u5c31\u53ef\u4ee5\u5168\u88ab\u522a\u9664\uff1b\u5426\u5247\uff0c\u662f\u522a\u4e0d\u6389\u7684\u3002\u5982\u679c\u6211\u5011\u522a\u5b8c\u4e86\u5e8f\u5217\u6700\u5927\u503c\uff0c\u554f\u984c\u5c31\u8b8a\u6210\u4e86\u5b50\u554f\u984c\uff0c\u540c\u6a23\u5730\u89e3\u6c7a\u5c31\u597d\u4e86\u3002\u81f3\u65bc\u522a\u9ede\uff0c\u53ef\u4ee5\u7528\u934a\u9336\uff08\u7528 set \u6a21\u64ec\uff09\u3002</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nvector&lt;list&lt;int&gt;::iterator&gt; v[200005];\n\nbool solve() {\n    int n;\n    list&lt;int&gt; a;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        v[i].clear();\n    }\n    for (int i = 0, x; i &lt; n; i++) {\n        cin &gt;&gt; x;\n        a.push_back(x);\n        v[x].push_back(--a.end());\n    }\n    for (int i = n - 1; i &gt;= 1; i--) {\n        for (auto &amp;it : v[i]) {\n            if ((it != a.begin() &amp;&amp; *prev(it) == i - 1) || (it != --a.end() &amp;&amp; *next(it) == i - 1)) {\n                a.erase(it);\n                it = a.end();\n            } else if (it == --a.end() || *next(it) != i) {\n                return false;\n            }\n        }\n        for (auto &amp;it : v[i]) {\n            if (it != a.end()) {\n                a.erase(it);\n            }\n        }\n    }\n    return a.size() == 1 &amp;&amp; a.back() == 0;\n}\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        cout &lt;&lt; (solve() ? \"Yes\\n\" : \"No\\n\");\n    }\n    return 0;\n}\n</code></pre> TOI 2023 \u4e09\u6a21 p3. \u6700\u7a69\u5b9a\u7684\u85aa\u6c34 (Salary) <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u7b2c \\(i\\) \u500b\u7bc0\u9ede\u53ef\u80fd\u6709\u5169\u7a2e\u72c0\u6cc1\uff1a\u5df2\u958b\u767c\u6216\u672a\u958b\u767c\uff0c\u5c0d\u5df2\u958b\u767c\u7684\u57ce\u5e02\uff0c\u85aa\u6c34\u70ba \\(x_i\\)\uff0c\u800c\u5c0d\u65bc\u672a\u958b\u767c\u7684\u57ce\u5e02\uff0c\u85aa\u6c34\u4e00\u958b\u59cb\u70ba \\(x_i = 0\\)\uff0c\u800c\u9019\u4e9b\u57ce\u5e02\u6703\u4e0d\u65b7\u7684\uff08\u540c\u6642\u6216\u4e0d\u540c\u6642\uff09\u8abf\u6f32\u54e1\u5de5\u85aa\u6c34\uff0c\u5c0d\u9019\u4e9b\u57ce\u5e02\u800c\u8a00\uff0c\u5b9a\u7fa9 \\(N(i)\\) \u662f\u8a72\u9ede\u7684\u9130\u5c45\u96c6\u5408\u800c \\(c_i\\) \u70ba\u52a0\u78bc\u7684\u5e38\u6578\uff0c\u90a3\u9019\u6b21\u85aa\u6c34\u7684\u8abf\u6f32\u5c07\u6703\u662f</p> \\[x_i \\leftarrow \\max\\left\\{x_i, c_i + \\frac 1 {|N(i)|}\\sum_{j\\in N(i)}x_j\\right\\}\\] <p>\u5df2\u77e5\u5728\u4efb\u610f\u6b21\u7684\u8abf\u6574\u5f8c\u6240\u6709\u57ce\u5e02\u7684\u85aa\u8cc7\u90fd\u6703\u9054\u5230\u4e00\u500b\u56fa\u5b9a\u7684\u6578\u503c\uff0c\u5c0d\u6240\u6709\u672a\u958b\u767c\u7684\u57ce\u5e02\u8f38\u51fa\u9019\u500b\u6700\u7d42\u56fa\u5b9a\u7684 \\(x_i\\)</p> <p>\\(1 \\leq n \\leq 10^6, 0 \\leq,\\) \u521d\u59cb\u7684 \\(x_i,c_i \\leq 10^6\\)</p> \u601d\u8def <p>\\(x_i\\) \u8ddf \\(x_i\\) \u53d6 max \u90a3\u88cf\u5176\u5be6\u53ef\u4ee5\u7701\u7565\u4e0d\u7528\u770b\uff0c\u56e0\u70ba\u7d93\u904e\u8abf\u6574\u5f8c\u4e00\u5b9a\u4e0d\u6703\u8b8a\u5c0f\u3002\u6211\u5011\u5b9a\u7fa9\u4e00\u500b\u57ce\u5e02\u56fa\u5b9a\u7684\u8b8a\u91cf\u662f \\(c_i\\) \u800c\u6703\u8b8a\u52d5\u7684\u662f \\(d_i\\)\u3002</p> <p>\u53ef\u4ee5\u767c\u73fe\uff0c\u76ee\u524d\u9023\u4efb\u610f\u4e00\u500b\u7bc0\u9ede\u7684 \\(d_i\\) \u90fd\u5f88\u96e3\u6c42\u51fa\uff0c\u6240\u4ee5\u6211\u5011\u8003\u616e\u5f9e\u6700\u7c21\u55ae\u7684\u8449\u7bc0\u9ede\u4e0b\u624b\u3002\u6211\u5011\u5617\u8a66\u76f4\u63a5\u53bb\u5c07\u8449\u7bc0\u9ede\u7684 \\(d_i\\) \u6c42\u51fa\u4f86\uff0c\u4f46\u767c\u73fe\u4ed6\u6703\u7528\u5230\u4ed6 parent \u7684 \\(d_i\\) \u503c\uff0c\u800c\u4ed6 parent \u7684 \\(d_i\\) \u4e5f\u6703\u9700\u8981\u7528\u5230 parent \u7684 \\(d_i\\)\uff0c\u6240\u4ee5\u7121\u6cd5\u76f4\u63a5\u6c42\u51fa\u3002</p> <p> </p> <p>\u4f46\u9019\u7d66\u6211\u5011\u4e00\u500b\u555f\u767c\uff0c\u6211\u5011\u96d6\u7136\u4e0d\u80fd\u76f4\u63a5\u9760\u8449\u7bc0\u9ede\u6c42\u51fa\u4f86\uff0c\u4f46\u6211\u5011\u53ef\u4ee5\u5c07\u554f\u984c\u7e2e\u5c0f\uff0c\u5982\u4e0b\u5716\u3002\u6211\u5011\u5c07\u8449\u7bc0\u9ede\u7528\u4ed6\u7684 parent \u7684 \\(d_i\\) \u4f86\u8868\u793a\uff0c\u4e26\u628a\u4ed6\u4ee3\u5165\u5230 parent \u7684\u503c\u4e2d\u3002</p> <p> \\(d_2\\) \u5be6\u4e0a\u9084\u53ef\u4ee5\u5c07\u5176\u5316\u7c21\uff0c\u898b\u53f3\u908a\u7684\u904e\u7a0b </p> <p>\u518d\u4f86\u5c31\u662f\u5b50\u554f\u984c\u3002\u6700\u5f8c\uff0c\u63a8\u5230 root \u7684\u6642\u5019\uff0c\u56e0\u70ba root \u6c92\u6709 parent \u7684\u5e72\u64fe\uff0c\u4ee5\u81f3\u65bc\u4ed6\u7684 \\(d_i\\) \u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u4f86\uff0c\u56e0\u70ba\u53ea\u5269\u4e0b\u4e00\u5806\u5df2\u77e5\u7684\u6578\u503c\u7684 \\(c_i\\)\u3002\u7531\u6b64\uff0c\u6211\u5011\u53ef\u4ee5\u518d\u5f9e root \u9006\u63a8\u56de\u53bb\uff0c\u4f9d\u5e8f\u7531\u4e0a\u800c\u4e0b\u5c07\u6240\u6709\u9ede\u7684 \\(d_i\\) \u6c42\u51fa\u4f86\uff0c\u5373\u89e3\u6c7a\u9019\u984c\u3002</p> <p> \u5047\u8a2d 5 \u9019\u500b\u7bc0\u9ede\u662f\u5df2\u958b\u767c\u7684\uff08\u8b93\u8b80\u8005\u77e5\u9053\u5df2\u958b\u767c\u7684\u9ede\u7684\u60c5\u6cc1\uff09 </p> <p>\u200b       </p>"},{"location":"graph/tree_isomorphism/","title":"\u6a39\u540c\u69cb","text":"CSES - Tree Isomorphism I <p>\u7d66\u5169\u9846 \\(n\\) \u500b\u9ede\u7684\u6709\u6839\u6a39</p> <p>\u554f\u4ed6\u5011\u6709\u6c92\u6709\u53ef\u80fd\u53ef\u4ee5\u4ee5\u67d0\u7a2e\u756b\u6cd5\u628a\u4ed6\u5011\u756b\u51fa\u4f86\u4f7f\u4ed6\u5011\u5169\u500b\u9577\u5f97\u4e00\u6a21\u4e00\u6a23</p> <p>\\(n\\le 10^5\\)</p> <p>\u6211\u5011\u4ee4 leaf \u7684 hash \u662f 1\u7e7c\u7e8c\u5f80\u4e0a\uff0c\u5982\u679c\u76ee\u524d\u7684\u5b50\u6a39\u662f\u6211\u5011\u6c92\u770b\u904e\u7684\u5c31\u628a\u9019\u500b\u5b50\u6a39\u5b58\u5165 map \u4e2d</p> <p></p> <p>\u6211\u5011\u5229\u7528 vector \u5b58\u5b50\u6a39\u7684 hash \u503c\uff0c\u6ce8\u610f\u8a18\u5f97\u8981\u7167 hash \u503c\u5c0f\u5230\u5927 sort\uff0c\u624d\u4e0d\u6703\u7576\u5169\u500b\u5b50\u6a39\u660e\u660e\u662f\u76f8\u540c\uff0c\u4f46\u662f\u9806\u5e8f\u4e0d\u540c\u5c31\u88ab\u5224\u6210 NO</p> code <pre><code>int hash(int u, int par) {\n    int sum = 0;\n    vector&lt;int&gt; res;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n\n        res.push_back(hash(v, u));\n    }\n    sort(res.begin(), res.end());\n\n    if (!mp[res]) mp[res] = idx++;\n    return mp[res];\n}\n</code></pre> CSES - Tree Isomorphism II <p>\u7d66\u5169\u9846 \\(n\\) \u500b\u9ede\u7684\u7121\u6839\u6a39</p> <p>\u554f\u4ed6\u5011\u6709\u6c92\u6709\u53ef\u80fd\u53ef\u4ee5\u4ee5\u67d0\u7a2e\u756b\u6cd5\u628a\u4ed6\u5011\u756b\u51fa\u4f86\u4f7f\u4ed6\u5011\u5169\u500b\u9577\u5f97\u4e00\u6a21\u4e00\u6a23</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def 1 <p>\u6211\u5011\u767c\u73fe\u5b83\u7684 root \u662f\u4e0d\u78ba\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u5011\u9700\u8981\u4e00\u500b\u6709\u6548\u7387\u7684\u65b9\u6cd5\u4f86\u53d6\u5169\u68f5\u6a39\u7684\u9ede\u7576 root \u4f86\u505a\u6bd4\u8f03\uff0c\u800c\u6070\u597d\u6a39\u8ddf\u6a39\u4e4b\u9593\u6700\u5c0f\u7684\u5dee\u7570\u5c31\u662f\u5728\u6a39\u91cd\u5fc3\uff08\u6a39\u91cd\u5fc3\u6bcf\u500b\u6a39\u6700\u591a\u53ea\u6709\u5169\u500b\uff0c\u5169\u9846\u6a39\u7e3d\u5171\u4e5f\u53ea\u6709 4 \u7a2e\u60c5\u6cc1\uff09</p> code 1 <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\n\nmap&lt;vector&lt;int&gt;, int&gt; mp;\nint idx = 1;\n\nstruct Tree {\n    static const int M = 1000696969;\n    static const int X = 131;\n\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;int&gt; C;\n    vector&lt;int&gt; sz;\n\n    int n;\n\n    void init(int _n) {\n        n = _n;\n        sz.resize(n + 1);\n        G.resize(n + 1);\n\n        for (int i = 1; i &lt;= n; i++) {\n            sz[i] = 0;\n        }\n    }\n\n    void add_edge(int u, int v) {\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n\n    void find(int u, int par) {\n        sz[u] = 1;\n        int w = 0;\n        for (auto v : G[u]) {\n            if (v == par) continue;\n\n            find(v, u);\n            sz[u] += sz[v];\n            w = max(w, sz[v]);\n        }\n        w = max(n - sz[u], w);\n\n        if (w &lt;= n / 2) {\n            C.pb(u);\n        }\n    }\n\n    int hash(int u, int par) {\n        int sum = 0;\n\n        vector&lt;int&gt; res;\n        for (auto v : G[u]) {\n            if (v == par) continue;\n\n            res.pb(hash(v, u));\n        }\n        sort(ALL(res));\n\n        if (!mp[res]) mp[res] = idx++;\n        return mp[res];\n    }\n};\n\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    Tree A;\n    Tree B;\n    int u, v;\n\n    A.init(n);\n    B.init(n);\n\n    for (int i = 0; i &lt; n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        A.add_edge(u, v);\n    }\n\n    for (int i = 0; i &lt; n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        B.add_edge(u, v);\n    }\n\n    A.find(1, 0);\n    B.find(1, 0);\n\n    int res = 0;\n    for (auto a : A.C) {\n        for (auto b : B.C) {\n            if (A.hash(a, 0) == B.hash(b, 0)) {\n                res = 1;\n            }\n        }\n    }\n\n    if (res)\n        cout &lt;&lt; \"YES\\n\";\n    else\n        cout &lt;&lt; \"NO\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> \u601d\u8def 2 <p>\u9019\u984c\u7684 hash \u5176\u5be6\u6709\u53e6\u5916\u4e00\u7a2e\u5beb\u6cd5\uff0c\u4f8b\u5982\u6709\u68f5\u6a39\u5982\u4e0b</p> <p> </p> <p>\\(H[u]=H[v_1]\\times X^1+H[v_2]\\times X^2+H[v_3]\\times X^3\\)</p> <pre><code>int hash(int u, int par) {\n    int sum = 0;\n\n    vector&lt;int&gt; res;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n\n        res.pb(hash(v, u));\n    }\n    sort(ALL(res));\n    int cnt = 1;\n    // \u6ce8\u610f hash \u5f9e X^1 \u958b\u59cb\u800c\u975e X^0 \u56e0\u70ba\u82e5\u5f9e X^0 chain \u7684 hash value \u6703\u8ddf leaf \u7684\u4e00\u6a23\n    for (auto h : res) {\n        sum = (sum + (H[cnt] * h) % M) % M;\n        cnt++;\n    }\n\n    if (G[u].size() == 1) sum = 1;  // leaf \u7684 hash value \u662f 1\n    return sum;\n}\n</code></pre> code 2 <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\n\nstruct Tree {\n    static const int M = 1000696969;\n    static const int X = 131;\n\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;int&gt; C;\n    vector&lt;int&gt; sz;\n    vector&lt;int&gt; H;\n    int n;\n\n    void init(int _n) {\n        n = _n;\n        sz.resize(n + 1);\n        H.resize(n + 1);\n        G.resize(n + 1);\n\n        for (int i = 1; i &lt;= n; i++) {\n            sz[i] = 0;\n            H[i] = 0;\n        }\n\n        H[0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            H[i] = (H[i - 1] * X) % M;\n        }\n    }\n\n    void add_edge(int u, int v) {\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n\n    void find(int u, int par) {\n        sz[u] = 1;\n        int w = 0;\n        for (auto v : G[u]) {\n            if (v == par) continue;\n\n            find(v, u);\n            sz[u] += sz[v];\n            w = max(w, sz[v]);\n        }\n        w = max(n - sz[u], w);\n\n        if (w &lt;= n / 2) {\n            C.pb(u);\n        }\n    }\n\n    int hash(int u, int par) {\n        int sum = 0;\n\n        vector&lt;int&gt; res;\n        for (auto v : G[u]) {\n            if (v == par) continue;\n\n            res.pb(hash(v, u));\n        }\n        sort(ALL(res));\n        int cnt = 1;\n        for (auto h : res) {\n            sum = (sum + (H[cnt] * h) % M) % M;\n            cnt++;\n        }\n\n        sum = (sum + (H[cnt] * (sum)) % M) % M;\n        if (G[u].size() == 1) sum = 1;\n\n        return sum;\n    }\n};\n\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    Tree A;\n    Tree B;\n    int u, v;\n\n    A.init(n);\n    B.init(n);\n\n    for (int i = 0; i &lt; n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        A.add_edge(u, v);\n    }\n\n    for (int i = 0; i &lt; n - 1; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        B.add_edge(u, v);\n    }\n\n    A.find(1, 0);\n    B.find(1, 0);\n\n    int res = 0;\n    for (auto a : A.C) {\n        for (auto b : B.C) {\n            if (A.hash(a, 0) == B.hash(b, 0)) {\n                res = 1;\n            }\n        }\n    }\n\n    if (res)\n        cout &lt;&lt; \"YES\\n\";\n    else\n        cout &lt;&lt; \"NO\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre>"},{"location":"graph/tree_topo_sort/","title":"\u985e topo sort","text":"2014 \u5168\u570b\u8cfd p4 <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\uff0c\u908a\u6709\u6b0a\u91cd\u7684\u6a39\uff0c\u9078\u4e00\u500b\u9023\u901a\u584a\uff0c\u9023\u901a\u584a\u5167\u6240\u6709\u7684\u908a\u6b0a\u7e3d\u548c\u4e0d\u80fd\u8d85\u904e \\(L\\)\uff0c\u554f\u6240\u6709\u300c\u6c92\u88ab\u9078\u5230\u7684\u9ede\u300d\u5230\u300c\u6709\u88ab\u9078\u5230\u7684\u9ede\u300d\u7684\u6700\u77ed\u8ddd\u96e2\u6700\u5927\u7684\uff0c\u6700\u5c11\u53ef\u4ee5\u662f\u591a\u5c11</p> <p> </p> <p>\\(n\\le 10^6,L\\le 2\\times 10^8\\)</p> \u601d\u8def <p>\u986f\u7136\u6211\u5011\u6c92\u8fa6\u6cd5\u53bb\u76f4\u63a5\u7dad\u8b77\u8981\u9078\u90a3\u4e9b\u908a\u4f5c\u70ba optimal \u7684\u9023\u901a\u584a\u3002\u90a3\u4e0d\u5982\u53cd\u8457\u505a ?</p> <p>\u4e00\u958b\u59cb\u6211\u5011\u628a\u5168\u90e8\u7684\u908a\u90fd\u9078\u8d77\u4f86\uff0c\u6162\u6162\u5f9e leaf \u958b\u59cb\u79fb\u9664\uff0c\u6bcf\u6b21\u79fb\u9664\u6642\u8981\u9078\u64c7\u5c0d\u7b54\u6848\u5f71\u97ff\u6700\u5c0f\u7684\uff0c\u76f4\u5230\u7576\u524d\u672a\u79fb\u9664\u7684\u9023\u901a\u584a\u7684\u908a\u6b0a\u7e3d\u548c \\(\\le L\\)\u3002\u904e\u7a0b\u5229\u7528 priority queue \u7dad\u8b77</p> 2015 \u5168\u570b\u8cfd p5 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u4f60\u8981\u5c07\u9ede\u7531 \\(1\\sim n\\) \u7de8\u865f\uff0c\u554f \\(ans\\) \u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11\u3002\u8a08\u7b97\u65b9\u6cd5\u5982\u4e0b :</p> \\[cost_u = u \\space \u5468\u570d\u7684\u9ede \\space v \\space \u6709\u5e7e\u500b\u7de8\u865f\u6bd4\u4ed6\u5927 \\] \\[ans = \\max \\limits_{u=1\\sim n}\\{ cost_u \\} \\] <p>\u4e5f\u5c31\u662f\u6700\u5c0f\u5316\u6700\u5927\u503c</p> <p>\\(n\\le 5\\times 10^5,m\\le 8\\times 10^5\\)</p> \u601d\u8def <p>\u6cd5 1 : \u4e8c\u5206\u641c</p> <p>\u8003\u616e\u4e8c\u5206\u641c\u7b54\u6848\uff0c\u6aa2\u67e5\u7b54\u6848\u662f\u5426\u5408\u6cd5</p> check function \u5be6\u4f5c <pre><code>// \u6aa2\u67e5\u53ea\u80fd\u7528 degree &lt;= x \u7684\u662f\u5426\u53ef\u4ee5\u9054\u6210\nbool topo(int x) {\n    queue&lt;int&gt; q;\n    vector&lt;bool&gt; vis(n + 1);\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (deg[i] &lt;= x) q.push(i);\n    }\n    while (q.size()) {\n        int u = q.top();\n        q.pop();\n        vis[u] = true;\n\n        for (auto v : G[u]) {\n            if (vis[v]) continue;\n\n            deg[v]--;\n            if (deg[v] &lt;= x) q.push(v);\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (vis[i] == false) return false;\n    }\n    return true;\n}\n</code></pre> <p>\u8907\u96dc\u5ea6 : \\(O((n+m)\\log n)\\)</p> <p>\u6cd5 2 : greedy \u60f3\u6cd5</p> <p>\u4f9d\u5e8f\u679a\u8209 1 ~ n\uff0c\u653e\u5728 <code>deg[i]</code> \u6700\u5c0f\u7684\uff0c\u7528 pq \u7dad\u8b77\u7576\u524d deg \u6700\u5c0f\u7684</p> <p>\u5c07\u67d0\u500b\u9ede u \u5468\u570d\u7684 <code>deg[v]--</code> \u7684\u8a71\u8981\u600e\u9ebc\u505a ?</p> <p>\u60f3\u60f3\u770b dijkstra \u662f\u600e\u9ebc\u505a\u5230\u9019\u4ef6\u4e8b\u7684</p> <p>\u5c31\u50cf dijkstra \u90a3\u6a23\u76f4\u63a5 push \u4e00\u500b\u65b0\u7684\u9032\u53bb pq \u5373\u53ef</p> <p>pq \u518d\u62ff\u67d0\u500b\u9ede\u51fa\u4f86\u6642\u8a18\u5f97\u6aa2\u67e5\u662f\u5426\u904e\u671f</p> <p>\u8907\u96dc\u5ea6 : \\(O((n+m)\\log n)\\)</p> <p>\u6cd5 3 : \u512a\u5316\u6cd5 2</p> <p>\u958b \\(n\\) \u500b vector\uff0c<code>v[i]</code> \u653e\u6240\u6709 degree = i \u7684\u9ede</p> Data structure <pre><code>struct DS {\n    vector&lt;vector&lt;int&gt;&gt; nodes;\n    int n, threshold = 0;\n\n    DS(int n) : n(n) {\n        nodes.resize(n + 1);\n    }\n\n    void push(int u) {\n        nodes[max(threshold, deg[u])].pb(u);\n    }\n\n    int get_min(int u) {\n        while (threshold &lt;= n &amp;&amp; nodes[threshold].empty()) {\n            threshold++;\n        }\n\n        if (threshold &lt;= n &amp;&amp; nodes[threshold].size()) {\n            int ret = nodes[threshold].back();\n            nodes[threshold].pop_back();\n            return ret;\n        } \n        assert(0);\n    }\n} pq;\n</code></pre> <p>\u8907\u96dc\u5ea6 : \\(O(n+m)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 5e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, m;\nvector&lt;int&gt; G[maxn];\nint deg[maxn], vis[maxn], ans[maxn];\n\nstruct DS {\n    vector&lt;vector&lt;int&gt;&gt; nodes;\n    int n, threshold = 0;\n\n    DS(int n) : n(n) {\n        nodes.resize(n + 1);\n    }\n\n    void push(int u) {\n        nodes[max(threshold, deg[u])].pb(u);\n    }\n\n    int get_min() {\n        while (threshold &lt;= n &amp;&amp; nodes[threshold].empty()) {\n            threshold++;\n        }\n\n        if (threshold &lt;= n &amp;&amp; nodes[threshold].size()) {\n            int ret = nodes[threshold].back();\n            nodes[threshold].pop_back();\n            return ret;\n        } \n        assert(0);\n    }\n};\n\nvoid solve() {\n    DS ds(n);\n    for (int i = 0; i &lt; n; i++) {\n        ds.push(i);\n    }\n    for (int i = 0; i &lt; n; i++) {\n        int u = ds.get_min();\n        while (vis[u]) {\n            u = ds.get_min();\n        }\n        vis[u] = true;\n        for (auto v : G[u]) {\n            deg[v]--;\n            ds.push(v);\n        }\n    }\n    cout &lt;&lt; ds.threshold &lt;&lt; '\\n';\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; i++) {\n        G[i].clear();\n        deg[i] = 0;\n        vis[i] = 0;\n        ans[i] = 0;\n    }\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        ans[min(u, v)]++;\n        G[u].pb(v);\n        G[v].pb(u);\n        deg[u]++;\n        deg[v]++;\n    }\n    cout &lt;&lt; *max_element(ans, ans + n) &lt;&lt; ' ';\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> 2017 \u5168\u570b\u8cfd p5 <p>\u7d66\u4f60\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u9078\u4e00\u4e9b\u9ede ( \u6211\u5011\u628a\u9019\u500b\u9ede\u96c6\u5408\u53eb\u505a \\(S\\) )\uff0c\\(S\\) \u5167\u7684\u9ede\u5fc5\u9808\u9023\u901a</p> <p>\u554f \\(F(S)\\) \u6700\u5927\u591a\u5c11</p> \\[F(S) = \\lvert S \\rvert  \\min\\limits_{1\\leq i \\leq \\lvert S \\rvert} \\{ D_i \\}\\] <p>\u5176\u4e2d \\(D_i\\) \u8868\u793a \\(i\\) \u7684\u9130\u5c45\u88e1\u9762\uff0c\u6709\u591a\u5c11\u4eba\u5728 \\(S\\) \u5167</p> <p>\\(n\\le 5000\\)</p> \u601d\u8def <p>\u6211\u5011\u8003\u616e\u5f9e\u679a\u8209 \\(D_i\\) \u4e0b\u624b </p> <ul> <li> <p>\\(D_i=1\\) \u9019\u6642\u5176\u5be6\u5c31\u662f\u6574\u5f35\u5716</p> </li> <li> <p>\\(D_i=2\\) \u56e0\u70ba degree \u662f \\(1\\) \u7684\u9ede\u4e0d\u80fd\u9078\uff0c\u6240\u4ee5\u522a\u9664 \\(\\deg \\le 1\\) \u7684\u9ede\uff0c\u4e26\u5c07\u5468\u570d\u7684\u9ede\u7684 degree -1</p> </li> <li> <p>\\(D_i=3\\) \u522a\u9664 \\(\\deg \\le 2\\) \u7684\u9ede\uff0c\u4e26\u5c07\u5468\u570d\u7684\u9ede\u7684 degree -1</p> </li> <li> <p>\\(D_i=4\\) \u522a\u9664 \\(\\deg \\le 3\\) \u7684\u9ede\uff0c\u4e26\u5c07\u5468\u570d\u7684\u9ede\u7684 degree -1</p> </li> <li> <p>...</p> </li> </ul> <p>\u53ef\u4ee5\u89c0\u5bdf\u5230\u7576 \\(D_i=k\\) \u7684\u6642\u5019\u9700\u8981\u5c07 \\(\\deg \\le k-1\\) \u7684\u9ede\u522a\u6389</p> <p>\u6b64\u6642 \\(F(S)=\\) \u5269\u4e0b\u7684\u9ede\u7684\u6578\u91cf \\(\\times (k-1)\\)</p> <p>\u5be6\u4f5c\u65b9\u9762\u6c92\u8fa6\u6cd5\u771f\u7684\u53bb\u522a\u908a\uff0c\u8003\u616e\u6642\u5149\u5012\u6d41\u6280\u5de7\uff0c\u7528\u52a0\u908a\u4f86\u770b</p> <p>\u53ea\u662f\u4f60\u4e26\u4e0d\u80fd\u77e5\u9053\u8981\u4f9d\u5e8f\u52a0\u54ea\u4e9b\u9ede\u9032\u53bb</p> <p>\u6240\u4ee5\u6211\u5011\u5148\u9810\u8655\u7406\u597d \\(D_i=k+1 \\to D_i=k\\) \u7684\u6642\u5019\u9700\u8981\u52a0\u5165\u7684\u9ede\u5373\u53ef</p> <p>\u9810\u8655\u7406\u5c31\u50cf topo \u6392\u5e8f\u90a3\u6a23\u6bcf\u8f2a\u627e \\(\\deg = k\\) \u7684\u9ede\uff0c\u5c07\u4ed6\u5011\u5b58\u5728 vector <code>v[k]</code> \u88e1\u9762</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 5e3 + 5;\nconst int M = 1e9 + 7;\n\nint n, m;\nvector&lt;int&gt; G[maxn];\nvector&lt;int&gt; V[maxn];\nint in[maxn], vis[maxn], par[maxn], sz[maxn];\n\nvoid dsu_init() {\n    for (int i = 1; i &lt;= n; i++) {\n        par[i] = i;\n        sz[i] = 1;\n    }\n}\n\nint find(int x) {\n    if (par[x] == x)\n        return x;\n    else\n        return par[x] = find(par[x]);\n}\n\nvoid merge(int a, int b) {\n    int x = find(a), y = find(b);\n    if (x == y) return;\n    par[x] = y;\n    sz[y] += sz[x];\n    sz[x] = 0;\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int u, v;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n        in[u]++, in[v]++;\n    }\n}\n\nvoid topo() {\n    for (int i = 1; i &lt;= n; i++) {\n        // \u522a\u9664 deg[u] &lt;= i \u7684\u9ede\n        queue&lt;int&gt; q;\n        for (int j = 1; j &lt;= n; j++) {\n            if (!vis[j] &amp;&amp; in[j] == i) {\n                q.push(j);\n                vis[j] = 1;\n            }\n        }\n\n        while (q.size()) {\n            int u = q.front();\n            q.pop();\n            V[i].pb(u);\n\n            for (auto v : G[u]) {\n                in[v]--;\n                if (vis[v]) continue;\n\n                if (in[v] &lt;= i) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n    }\n}\n\nvoid solve() {\n    topo();\n    dsu_init();\n    memset(vis, 0, sizeof vis);\n    int ans = 0;\n    for (int i = n; i &gt;= 1; i--) {\n        for (auto u : V[i]) {\n            vis[u] = 1;\n            for (auto v : G[u]) {\n                if (!vis[v]) continue;\n                merge(u, v);\n            }\n        }\n        for (int u = 1; u &lt;= n; u++) {\n            if (par[u] == u &amp;&amp; vis[u]) {\n                ans = max(ans, sz[u] * i);\n            }\n        }\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n}\n</code></pre>"},{"location":"graph/union_by_rank/","title":"\u555f\u767c\u5f0f\u5408\u4f75","text":""},{"location":"graph/union_by_rank/#_1","title":"\u5f15\u5165","text":"<p>\u555f\u767c\u5f0f\u5408\u4f75\u4f5c\u70ba\u4e00\u7a2e\u601d\u60f3\uff0c\u8868\u793a\u6211\u5011\u5728\u5408\u4f75\u5169\u500b\u96c6\u5408\u6642\uff0c\u512a\u5148\u5c07\u5c0f\u96c6\u5408\u5408\u4f75\u5230\u5927\u96c6\u5408\u4e2d\u53bb\u3002\u9019\u6a23\u5c31\u80fd\u5920\u78ba\u4fdd\u5408\u4f75\u7684\u7e3d\u6642\u9593\u8907\u96dc\u5ea6\u63a7\u5236\u5728 n log n \u4ee5\u5167\u3002</p>"},{"location":"graph/union_by_rank/#disjoint-set","title":"Disjoint set","text":"\u4e26\u67e5\u96c6\u4e2d\u7bc0\u9ede\u6578\u70ba \\(n\\) \u7684\u6a39\uff0c\u9ad8\u5ea6\u70ba \\(O(\\log n)\\) <p>\u56e0\u70ba\u5408\u4f75\u7684\u6642\u5019\u662f\u555f\u767c\u5f0f\u5408\u4f75\uff0c\u5b50\u6a39\u5927\u5c0f\u6bd4\u8f03\u5c0f\u7684\u653e\u5728\u6bd4\u8f03\u5927\u7684\u4e0b\u9762\u3002\u9019\u6a23\u5408\u4f75\u51fa\u4f86\u7684\u6a39\uff0c\u6bcf\u6b21\u5f80\u4e0a\u8d70\u4e00\u5c64\uff0c\u5b50\u6a39\u5927\u5c0f\u90fd\u6703\u8b8a\u81f3\u5c11\u5169\u500d\uff0c\u6240\u4ee5\u9ad8\u5ea6\u6700\u591a \\(O(\\log n)\\)</p> <p>\u56e0\u70ba\u6a39\u7684\u9ad8\u5ea6\u81f3\u591a \\(O(\\log n)\\)\uff0c\u6240\u4ee5\u6bcf\u500b\u6771\u897f\u81f3\u591a\u6703\u88ab\u642c\u904b \\(O(\\log n)\\) \u6b21\u3002</p> \u6d1b\u8c37 P3224 [HNOI2012] \u6c38\u65e0\u4e61 <p>\u7d66\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7121\u5411\u5716\uff0c\u6709 \\(q\\) \u7b46\u64cd\u4f5c :</p> <ul> <li>\\(\\text{AddEdge}(u,v):\\) \u5728 \\(u,v\\) \u4e4b\u9593\u52a0\u4e00\u689d\u908a</li> <li>\\(\\text{Query}(u,k):\\) \u554f \\(u\\) \u6240\u5728\u7684\u9023\u901a\u584a\u7b2c \\(k\\) \u5c0f\u7684\u7de8\u865f\u662f\u591a\u5c11</li> </ul> <p>\\(n,m\\le 10^5, q\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u5728\u555f\u767c\u5f0f\u5408\u4f75\u6642\u9806\u4fbf\u7dad\u8b77 Set \u5373\u53ef</p> Codeforces EDU-DSU Step1-C. Experience <p>\u6709 \\(n\\) \u500b\u6578\u5b57\u521d\u59cb\u7686\u81ea\u5df1\u4e00\u7d44\uff0c\u6709 \\(q\\) \u7b46\u64cd\u4f5c\u5982\u4e0b :</p> <ul> <li>\\(\\text{join}(x,y):\\) \u5c07 \\(x\\) \u8207 \\(y\\) \u6240\u5728\u7684\u7d44\u5225\u5408\u4f75</li> <li>\\(\\text{add}(x,v):\\) \u5c07 \\(x\\) \u6240\u5728\u7684\u7d44\u5225\u7684\u6578\u5b57\u7686 \\(+k\\)</li> <li>\\(\\text{get}(x):\\) \u554f \\(x\\) \u7684\u6578\u5b57\u662f\u591a\u5c11</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6bcf\u500b\u96c6\u5408\u90fd\u7dad\u8b77\u4e00\u500b\u61f6\u6a19\u3002\u4f7f\u7528\u555f\u767c\u5f0f\u5408\u4f75\u7684\u60f3\u6cd5\uff0c\u6bcf\u6b21 merge \u7684\u6642\u5019\u66b4\u529b\u7684\u5c07\u6bd4\u8f03\u5c0f\u7684\u96c6\u5408\u7684\u6bcf\u4e00\u6a23\u90fd\u52a0\u4e0a\u8a72\u96c6\u5408\u7684\u61f6\u6a19\uff0c\u554f get(x) \u7684\u6642\u5019\uff0c\u76f4\u63a5\u8f38\u51fa\u61f6\u6a19 + x \u4e0a\u9762\u7684\u6578\u5b57\u5373\u53ef</p>"},{"location":"graph/union_by_rank/#_2","title":"\u6a39\u4e0a\u555f\u767c\u5f0f\u5408\u4f75","text":"<p>\u5c0d\u65bc\u6bcf\u500b\u7bc0\u9ede \\(u\\)\uff0c\u627e\u51fa\u6700\u5927 size \u7684 \\(v_\\max\\) \u7a31\u4f5c\u91cd\u5152\u5b50\uff0c \u5269\u4e0b \\(v\\) \u7a31\u4f5c\u8f15\u5152\u5b50\uff0c\u5c07\u8f15\u5152\u5b50\u7dad\u8b77\u7684\u6771\u897f\u4e00\u500b\u500b\u4f75\u5165 \\(v_\\max\\)</p> \u8b49\u660e : \u5f9e \\(\\texttt{root}\\) \u5230\u4efb\u610f\u9ede\u7684\u8f15\u908a\u6578\u91cf \\(\\le \\log n\\) <p>\u5c0d\u65bc\u6bcf\u500b\u8f15\u908a\uff0c\\(size_v\\) \u5fc5\u5c0f\u65bc \\(size_u/2\\)\uff08\u4e0d\u7136\u5c31\u662f\u91cd\u5152\u5b50\u4e86\uff09\uff0c\u56e0\u6b64\u6392\u9664 size \u7279\u5225\u5927\u7684\u91cd\u908a\uff0c\u6bcf\u6b21\u5f80\u4e0a\u8d70\u4e00\u5c64\uff0c\u5b50\u6578\u5927\u5c0f\u90fd\u6703\u8b8a\u81f3\u5c11 \\(2\\) \u500d\uff0c\u6240\u4ee5\u9ad8\u5ea6\u6700\u591a \\(O(\\log n)\\)\uff0c\u6bcf\u500b\u9ede\u88ab\u8dd1\u904e\u7684\u6b21\u6578\u4e5f\u70ba \\(O(\\log n)\\)\uff0c\u6240\u4ee5\u7e3d\u8907\u96dc\u5ea6\u4e5f \\(O(n\\log n)\\)\u3002</p> <p>\uff08\u88dc\u5145 : \u5982\u679c\u5f9e \\(\\texttt{root}\\) \u4f86\u770b\u7684\u8a71\uff0c\u5b50\u7bc0\u9ede\u8d8a\u591a\u4e5f\u4ee3\u8868\u6df1\u5ea6\u6703\u8d8a\u6dfa\uff0c\u96d6\u7136 \\(\\texttt{root}\\) \u6703\u8dd1\u5230\u8f03\u591a\u8f15\u5152\u5b50\uff0c\u4f46\u8f15\u5152\u5b50\u88ab\u8dd1\u5230\u7684\u6b21\u6578\u4e5f\u76f8\u5c0d\u6703\u8f03\u5c11\uff09</p> CSES Distinct Colors <p>\u7d66\u51fa\u4e00\u68f5 \\(n\\) \u500b\u7bc0\u9ede\u4ee5 \\(1\\) \u70ba\u6839\u7684\u6a39\uff0c\u7bc0\u9ede \\(u\\) \u7684\u984f\u8272\u70ba \\(c_u\\)\uff0c\u73fe\u5728\u5c0d\u65bc\u6bcf\u500b\u9ede \\(u\\) \u554f \\(u\\) \u7684\u5b50\u6a39\u88e1\u4e00\u5171\u51fa\u73fe\u4e86\u591a\u5c11\u7a2e\u4e0d\u540c\u7684\u984f\u8272\u3002</p> <p>\\(n\\le 2\\times 10^5\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = (1LL &lt;&lt; 60);\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n;\nint a[maxn];\nvector&lt;int&gt; G[maxn];\nset&lt;int&gt; S[maxn];\nint ans[maxn];\n\nvoid dfs (int u, int par) {\n    if (G[u].size() == 1 &amp;&amp; u != 1) {\n        ans[u] = 1;\n        S[u].insert (a[u]);\n        return;\n    }\n\n    int mx = -1;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        dfs (v, u);\n        if (mx == -1) mx = v;\n        else if (S[mx].size() &lt; S[v].size()) mx = v;\n    }\n    set&lt;int&gt; &amp;t = S[mx];\n    for (auto v : G[u]) {\n        if (v == par || v == mx) continue;\n        for (auto ele : S[v]) t.insert(ele);\n        S[v].clear();\n    }\n    t.insert(a[u]);\n    ans[u] = t.size();\n    swap(t, S[u]);\n}\n\nvoid init() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    int u, v;\n    for (int i = 0; i &lt; n - 1; i ++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n        G[v].pb(u);\n    }\n}\n\nvoid solve() {\n    dfs (1, 0);\n    for (int i = 1; i &lt;= n; i++) cout &lt;&lt; ans[i] &lt;&lt; \" \";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> CF 600E Lomsat gelral <p>\u7d66\u4e00\u9846\u5927\u5c0f\u70ba \\(n\\) \u7684\u6709\u6839\u6a39\uff0c\u6bcf\u500b\u7bc0\u9ede \\(i\\) \u7684\u984f\u8272\u662f \\(c_i\\)\uff0c\u5c0d\u65bc\u6bcf\u500b\u5b50\u6a39\uff0c\u6c42\u51fa\u5176\u51fa\u73fe\u6b21\u6578\u6700\u591a\u7684\u984f\u8272\u3002\u5982\u679c\u6709\u5e7e\u500b\u51fa\u73fe\u6b21\u6578\u4e00\u6a23\u7684\u984f\u8272\uff0c\u628a\u4ed6\u5011\u52a0\u8d77\u4f86</p> <p>\\(c_i\\le n \\le 10^5\\)</p> CF 1709 E. XOR Tree <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u6709\u6b0a\u503c \\(a_i\\)\uff0c\u4e00\u68f5\u6a39\u662f\u300c\u597d\u7684\u300d\u82e5\u4e14\u552f\u82e5\u6240\u6709 path \u6eff\u8db3\u5c07 path \u4e0a\u7684 \\(a_i\\) xor \u8d77\u4f86\u90fd\u4e0d\u662f 0\u3002\u4e00\u6b21\u64cd\u4f5c\u4e2d\u53ef\u5c07\u67d0\u500b\u9ede\u4e0a\u7684\u6b0a\u503c\u4fee\u6539\u6210\u4efb\u610f\u6578\uff0c\u554f\u6700\u5c0f\u9700\u8981\u5e7e\u6b21\u64cd\u4f5c\u624d\u80fd\u4f7f\u6a39\u662f\u300c\u597d\u7684\u300d</p> <p>\\(1\\le n\\le 2\\times 10^5,1\\le a_i &lt; 2^{30}\\)</p> \u601d\u8def <p>\u4ee4 f(u, v) \u662f u \u5230 v path \u4e0a\u7684 \\(a_i\\) xor \u8d77\u4f86\u7684\u503c\u3002f(u, v) = f(root, u) \u2a01 f(root, v) \u2a01 a[ lca(u, v) ]</p> <p>\u5c0d\u65bc\u4e00\u500b x \u70ba\u6839\u7684\u5b50\u6a39\uff0c\u6211\u5011\u53ea\u8981\u53bb\u5b50\u6a39\u5167\u770b\u6709\u6c92\u6709\u5b58\u5728\u5169\u500b\u9ede (u, v) \u6eff\u8db3 f(root, u) \u2a01 f(root, v) \u2a01 a[x] \u662f\u4e0d\u662f 0\uff0c\u5982\u679c\u662f 0 \u7684\u8a71\u6211\u5011\u53ef\u5c07 x \u6539\u8b8a\u6210 \\(2^{30+t}\\)\uff0c\u9019\u6a23\u5169\u500b\u9ede\u90fd\u5728 x \u5b50\u6a39\u5167\u7684\u9ede\u5c31\u4e0d\u53ef\u80fd\u8207\u4efb\u4f55\u9ede xor \u662f 0 \u4e86\u3002</p> <p>\u5be6\u4f5c\u4e0a\u5f9e leaf \u5f80 root dfs\uff0c\u63a1\u7528 set + \u555f\u767c\u5f0f\u5408\u4f75\u7dad\u8b77\u5b50\u6a39\u5167\u6240\u6709\u9ede\u7684 f(root, u)\uff0c\u53bb\u770b\u7576\u524d set \u5167\u662f\u5426\u6709 f(root, u) \u2a01 a[x] \u9019\u500b\u503c\u5373\u53ef\uff0c\u82e5\u6709\u90a3\u6211\u5011\u5c07 ans++\uff0c\u4e14\u4e0d\u7528\u5c07\u4efb\u4f55 f(root, u) \u4e0a\u50b3\u5230\u4e0a\u9762\u7684 parent\uff0c\u56e0\u70ba\u5728 x \u6539\u904e\u5f8c\u4e0d\u6703\u8207\u5176\u4ed6\u6b0a\u503c\u91cd\u8907\uff0c\u4e5f\u5c31\u4ee3\u8868\u4e0d\u53ef\u80fd\u8207\u4efb\u4f55\u9ede xor \u662f 0</p> <p>\u66f4\u8a73\u7d30\u53ef\u53c3\u8003 : https://zhuanlan.zhihu.com/p/645890524</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int N = 2e5 + 5;\nint n, ans;\nint f[N], a[N];\nvector&lt;int&gt; G[N];\nset&lt;int&gt; st[N];\n\nvoid dfs(int u, int par) {\n    st[u].insert(f[u]);\n\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        f[v] ^= f[u];\n        dfs(v, u);\n\n        if (st[v].size() &gt; st[u].size()) {\n            swap(st[u], st[v]);\n        }\n    }\n\n    bool ok = true;\n    for (auto v : G[u]) {\n        if (v == par) continue;\n        if (ok == false) continue;\n\n        for (auto val : st[v]) {\n            if (st[u].count(val ^ a[u])) {\n                ok = false;\n                st[u].clear();\n                ans++;\n                break;\n            }\n        }\n        if (ok) {\n            for (auto val : st[v]) {\n                st[u].insert(val);\n            }\n        }\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        f[i] = a[i];\n    }\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n\n    dfs(1, 0);\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"graph/union_by_rank/#_3","title":"\u555f\u767c\u5f0f\u5408\u4f75","text":"2023 YTP p10. BST (Building_Spanning_Tree) <p>\u7d66\u4f60 \\(n\\) \u9ede\u7684\u7121\u5411\u5716\uff0c\u4e00\u958b\u59cb\u5716\u4e0a\u6c92\u6709\u4efb\u4f55\u908a\u3002\u7d66\u4f60 \\(n-1\\) \u689d\u908a\u6070\u597d\u6703\u5728\u5716\u4e0a\u69cb\u6210\u4e00\u500b spanning tree\uff0c\u518d\u7d66\u4f60 \\(m\\) \u689d\u908a\u8f38\u51fa\u52a0\u908a\u7684 order \u4f7f\u5f97\u5716\u6070\u597d\u6703\u69cb\u6210\u9019 \\(n-1\\) \u689d\u908a\u7684 spanning tree\uff0c\u4e14 order \u5b57\u5178\u5e8f\u8d8a\u5c0f\u8d8a\u597d</p> <p>\\(n\\le 10^5, m\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5148\u5c07 Tree edge \u4ee5\u90fd\u4e1f\u5230\u4e00\u500b\u4ee5\u5b57\u5178\u5e8f\u5c0f\u5230\u5230\u6392\u5e8f\u7684 pq\uff0c\u6bcf\u6b21\u770b pq.top()</p> <ul> <li>\u82e5\u70ba Tree edge\uff0c\u5247\u770b\u6709\u54ea\u4e9b\u975e Tree edge \u5728\u9019\u8f2a\u6703\u53ef\u4ee5\u6703\u8b8a\u5408\u6cd5\uff0c\u5c07\u4ed6\u5011\u4e5f\u52a0\u5165 pq\uff0c\u518d\u5c07\u8a72 Tree edge push back \u5230\u7b54\u6848</li> <li>\u82e5\u975e Tree edge\uff0c\u5247\u76f4\u63a5 push back \u5230\u7b54\u6848</li> </ul> <p>\u81f3\u65bc\u8981\u600e\u9ebc\u770b\u975e Tree edge \u6703\u4e0d\u6703\u8b8a\u5408\u6cd5\uff0c\u53ef\u4ee5\u7528 Disjoint set \u5728\u7dad\u8b77\u6709\u78b0\u5230\u8a72\u9023\u901a\u584a\u7684\u975e Tree edge \u7684 set/vector\uff0c\u5728 Disjoint set Merge \u7684\u6642\u5019\u4f7f\u7528\u555f\u767c\u5f0f\u5408\u4f75\u5373\u53ef\uff0c\u8907\u96dc\u5ea6 \\(O((n + m) \\log (n + m))\\)</p> USACO 2020 Open Gold p2. Favorite Colors <p>\u7d66\u4e00\u5f35 \\(N\\) \u9ede \\(M\\) \u908a\u6709\u5411\u5716\uff0c\u9ede\u7de8\u865f\u70ba \\(1\\ldots N\\)\uff0c\u6bcf\u7a2e\u984f\u8272\u4e5f\u53ef\u4ee5\u7528 \\(1\\ldots N\\) \u4e2d\u7684\u4e00\u500b\u6574\u6578\u8868\u793a\uff0c\u82e5 \\(u\\to \\{v_1,v_2,\\ldots, v_k \\}\\) \u7684\u8a71 \\(\\{v_1,v_2,\\ldots, v_k \\}\\) \u7684\u984f\u8272\u90fd\u8981\u4e00\u6a23\u3002\u6c42 \\(i=1\\ldots N\\) \u7684\u984f\u8272\u5206\u914d\uff0c\u4f7f\u5f97 distinct color \u6700\u5927\uff0c\u82e5\u6709\u591a\u7d44\u89e3\uff0c\u8f38\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684</p> <p>\\(N,M\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u5148\u6c7a\u5b9a\u597d\u6bcf\u500b\u9ede\u662f\u54ea\u4e00\u7d44 (\u4e5f\u5c31\u662f\u4e0d\u7ba1\u5b57\u5178\u5e8f)\uff0c\u6700\u5f8c\u518d\u5f9e \\(1\\ldots N\\) \u4f9d\u5e8f\u5206\u914d</p> <p>\u82e5 \\(a\\to \\{b,c\\}\\) \u4ee3\u8868 \\(b,c\\) \u7684\u984f\u8272\u9700\u76f8\u540c</p> <p>\u5047\u5982 \\(b\\to \\{v_b \\}, c \\to \\{v_c\\}\\)\uff0c\\(v_b\\) \u8207 \\(v_c\\) \u7684\u984f\u8272\u4e5f\u8981\u76f8\u540c</p> <p>\u6240\u4ee5\u6211\u5011\u5229\u7528\u985e\u4f3c topo sort \u7684\u4f5c\u6cd5\uff0c\u4f9d\u5e8f\u5c07\u984f\u8272\u76f8\u540c\u7684\u9ede merge \u6210\u4e00\u7d44</p> <p>\u5728 merge \u5169\u500b\u96c6\u5408\u7684\u904e\u7a0b\u63a1\u7528\u555f\u767c\u5f0f\u5408\u4f75</p> <p>\u8a73\u898b\u4ee3\u78bc</p> code (by USACO) <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid setIO(string s) {\n    ios_base::sync_with_stdio(0); cin.tie(0); \n    freopen((s+\".in\").c_str(),\"r\",stdin);\n    freopen((s+\".out\").c_str(),\"w\",stdout);\n}\n\nconst int MX = 2e5+5;\n\nint N,M;\n\nint par[MX],cnt[MX];\nvector&lt;int&gt; adj[MX], rpar[MX];\nqueue&lt;int&gt; q; \n\nvoid merge(int a, int b) {\n    a = par[a], b = par[b]; \n    if (rpar[a].size() &lt; rpar[b].size()) swap(a,b);\n    for (int t: rpar[b]) { par[t] = a; rpar[a].push_back(t); }\n    adj[a].insert(end(adj[a]),begin(adj[b]),end(adj[b])); \n    adj[b].clear();\n    if (adj[a].size() &gt; 1) q.push(a);\n}\n\nint main() { \n    setIO(\"fcolor\");\n    cin &gt;&gt; N &gt;&gt; M;\n    for (int i = 0; i &lt; M; ++i) {\n        int a,b; cin &gt;&gt; a &gt;&gt; b;\n        adj[a].push_back(b);\n    }\n    for (int i = 1; i &lt;= N; ++i) {\n        par[i] = i; rpar[i].push_back(i);\n        if (adj[i].size() &gt; 1) q.push(i);\n    }\n    while (q.size()) {\n        int x = q.front(); if (adj[x].size() &lt;= 1) { q.pop(); continue; }\n        int a = adj[x].back(); adj[x].pop_back();\n        if (par[a] == par[adj[x].back()]) continue;\n        merge(a,adj[x].back());\n    }\n    int co = 0;\n    for (int i = 1; i &lt;= N; ++i) {\n        if (!cnt[par[i]]) cnt[par[i]] = ++co;\n        cout &lt;&lt; cnt[par[i]] &lt;&lt; \"\\n\";\n    }\n}\n</code></pre> APIO 2012 Dispatching <p>\u7d66\u5b9a\u4e00\u500b \\(n\\) \u500b\u9ede\uff0c\u4ee5 \\(1\\) \u70ba\u6839\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u6709 \\(c_i, w_i\\) \u5169\u500b\u5c6c\u6027\uff0c\u4f60\u9700\u8981\u5f9e\u67d0\u500b\u9ede \\(u\\) \u5b50\u6a39\u5167\u9078\u4e00\u4e9b\u9ede\uff0c\u6eff\u8db3\u9078\u51fa\u4f86\u7684\u9ede \\(\\sum w_i \\le W\\)\uff0c\u6700\u5927\u5316\u300c\u9078\u7684\u6578\u91cf \\(\\times c_u\\)\u300d</p> <p>\\(1\\le n\\le 10^5,1\\le c_i,w_i,W\\le 10^9\\)</p> \u601d\u8def <p>\u9078 \\(w_i\\) \u8d8a\u5c0f\u7684\u9ede\u8d8a\u597d\u3002\u6bcf\u500b\u9ede\u7dad\u8b77\u4e00\u500b Min Heap\uff0c\u7576 Min Heap \u88e1\u9762\u7684 \\(\\sum w_i\\) \u8d85\u904e \\(W\\)\uff0c\u5c31 pop \u76f4\u5230 \\(\\le W\\)\uff0cMin Heap \u5408\u4f75\u6642\u63a1\u7528\u555f\u767c\u5f0f\u5408\u4f75\u3002</p> CF 1805 E. There Should Be a Lot of Maximums <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u5b9a\u7fa9\u4e00\u68f5\u6a39\u7684 MAD \u503c\u70ba\u300c\u51fa\u73fe\u5169\u6b21\u4ee5\u4e0a\u7684\u9ede\u6b0a\u6700\u5927\u503c\u300d\u3002\u5c0d\u65bc\u6bcf\u689d\u908a\uff0c\u8f38\u51fa\u82e5\u522a\u9664\u8a72\u908a\uff0c\u5f62\u6210\u7684\u5169\u68f5\u5b50\u6a39\u7684 MAD \u503c\u53d6 max\u3002</p> <p>\\(2\\le n\\le 10^5\\)</p> \u601d\u8def <p>\u958b\u5169\u500b set \u5206\u5225\u7dad\u8b77\u5b50\u6a39\u5167\u7684\u8cc7\u8a0a\u4ee5\u53ca\u5b50\u6a39\u5916\u7684\u8cc7\u8a0a\uff0c\u4f7f\u7528\u555f\u767c\u5f0f\u5408\u4f75\uff0c\u8907\u96dc\u5ea6 \\(O(n\\log^2 n)\\)</p> <p>\u53c3\u8003\u81ea : https://www.luogu.com.cn/blog/KnownError/solution-cf1805e</p> USACO22DEC Making Friends P <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u7684\u5716\uff0c\u7b2c i \u5929 i \u9ede\u6d88\u5931\uff0ci \u9ede\u5468\u570d\u7684\u5006\u5006\u4e92\u76f8\u9023\u908a\u3002\u554f\u6709\u591a\u5c11\u7a2e\u65b0\u7684\u908a\u7522\u751f</p> <p>\\(n, m \\le 2 \\times 10^5\\)</p> \u601d\u8def <p>\u6700\u66b4\u529b\u7684\u60f3\u6cd5\uff0c\u522a\u6389\u4e00\u500b\u9ede\u76f4\u63a5\u66b4\u529b\u6a21\u64ec\uff0c\u8a72\u9023\u908a\u7684\u5168\u90fd\u4e00\u500b\u500b\u9023\u4e0a\uff0c\u5f88\u660e\u986f\uff0c\u9019\u500b\u8907\u96dc\u5ea6\u662f O(n^3) \u7684\u3002</p> <p>\u8003\u616e\u512a\u5316\uff0c\u6211\u5011\u767c\u73fe\uff0c\u5728\u66b4\u529b\u9023\u908a\u6642\uff0c\u6162\u6162\u7684\uff0c\u5f88\u591a\u5f88\u591a\u908a\u5df2\u7d93\u9023\u597d\u4e86\uff0c\u5982\u679c\u6211\u5011\u5927\u8cbb\u5468\u7ae0\u53bb\u64cd\u4f5c\u9023\u904e\u7684\u908a\uff0c\u5c07\u6703\u6d6a\u8cbb\u5927\u91cf\u7684\u6642\u9593\u3002\u89c0\u5bdf\u5230\u6574\u9053\u984c\u7684\u8655\u7406\u6709\u9806\u5e8f\uff0c\u5f9e\u5c0f\u5230\u5927\uff0c\u90a3\u6211\u5011\u601d\u8003\u80fd\u4e0d\u80fd\u627e\u5230\u4e00\u500b\u9ede\u5148\u66ab\u6642\u8a18\u9304\u4e0b\u4ee5\u5f8c\u8981\u9023\u7684\u908a\uff0c\u7136\u5f8c\u96a8\u8457\u64cd\u4f5c\u7684\u9032\u884c\uff0c\u6bcf\u689d\u908a\u90fd\u6162\u6162\u9023\u597d\u4e86\u3002</p> <p>\u90a3\u5c31\u662f\u76ee\u524d\u8207 i \u76f8\u9023\u7684\u9ede\u4e2d\u7de8\u865f\u6700\u5c0f\u7684\u9ede j\uff0c\u6211\u5011\u628a\u8207 i \u76f8\u9023\u7684\u9ede\u90fd\u5411\u5b83\u9023\u908a\uff0c\u5b8c\u5168\u5716\u5c31\u53ef\u4ee5\u4e00\u6b65\u6b65\u9023\u597d\u4e86\u3002\u8003\u616e\u6b63\u78ba\u6027\uff0c\u9996\u5148\uff0c\u5728\u8207 i \u76f8\u9023\u7684\u9ede\u4e2d\uff0c\u6700\u5148\u8655\u7406\u5230\u7684\u80af\u5b9a\u662f j\uff0c\u9019\u6642\uff0c\u6bd4 j \u5c0f\u7684\u9ede\u90fd\u5df2\u7d93\u53bb\u65c5\u904a\u4e86\uff0c\u6bd4 j \u5927\u7684\u9ede\u90fd\u9084\u5728\uff0c\u4e5f\u90fd\u8a18\u9304\u4e0b\u4f86\u4e86\u3002</p> <p>\u3010\u5177\u9ad4\u5be6\u73fe\u3011:</p> <p>\u6211\u5011\u4f7f\u7528 set\uff0c\u56e0\u70ba\u65b9\u4fbf\u5408\u4f75\uff0c\u6c42\u6700\u5c0f\u9ede\u4e5f\u5feb\uff0c\u9084\u53ef\u4ee5\u9632\u6b62\u6709\u91cd\u908a\u3002\u6211\u5011\u767c\u73fe\u53ea\u6709 i \u9023\u5411\u6bd4\u81ea\u5df1\u7de8\u865f\u5927\u7684\u9ede\u624d\u53ef\u80fd\u88ab\u7b97\u8ca2\u737b\uff0c\u6240\u4ee5 set \u53ea\u8a18\u9304\u6bd4\u81ea\u5df1\u5927\u7684\u9ede\uff0c\u6bd4\u81ea\u5df1\u5c0f\u7684\u9ede\u90fd\u6703\u5728\u81ea\u5df1\u4e4b\u524d\u88ab\u522a\u6389\uff0c\u6c92\u6709\u8ca2\u737b\u3002\u5408\u4f75\u7684\u6642\u5019\uff0c\u63a1\u7528\u555f\u767c\u5f0f\u5408\u4f75\uff0c\u5169\u500b\u4e2d\u5c0f\u7684\u90a3\u500b set \u4f75\u5165\u5927\u7684 set \u88e1\u9762\uff0c\u8907\u96dc\u5ea6\u591a\u500b \\(\\log n\\)\uff0c\u7e3d\u8907\u96dc\u5ea6 \\(O(n\\log^2 n)\\)\u3002\u7b54\u6848\u8a08\u7b97\u53ea\u9700\u8981\u7d2f\u52a0\u76ee\u524d i \u9ede\u7684\u908a\u6578\u6e1b\u53bb\u4e00\u958b\u59cb\u7684\uff0c\u6c42\u8b8a\u5316\u91cf\u5c31\u597d\u4e86\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\ntypedef long long ll;\nusing namespace std;\n\nconst int N = 2e5 + 5;\nint n, m, x, y, org[N], p;\nset&lt;int&gt; G[N];\nll s;\n\nvoid merge(int x, int y) {\n    if (G[x].size() &lt; G[y].size())\n        swap(G[x], G[y]);\n    while (G[y].size()) {\n        G[x].insert(*G[y].begin());\n        G[y].erase(G[y].begin());\n    }\n    return;\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; ++i) {\n        cin &gt;&gt; x &gt;&gt; y;\n        if (x &gt; y) {\n            swap(x, y);\n        }\n        G[x].insert(y);\n    }\n    for (int i = 1; i &lt;= n; ++i)\n        org[i] = G[i].size();\n    for (int i = 1; i &lt;= n; ++i) {\n        if (!G[i].size())\n            continue;\n        while (*G[i].begin() &lt;= i)  // \u522a\u9664\u5df2\u522a\u6389\u7684\u9ede\n            G[i].erase(G[i].begin());\n        s = s + G[i].size() - org[i];\n        if (G[i].size() &lt;= 1)\n            continue;\n        p = *G[i].begin();\n        G[i].erase(G[i].begin());  // \u4e0d\u8981\u52a0\u5165\u81ea\u5df1\n        merge(p, i);               \n    }\n    cout &lt;&lt; s &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre> CF 1923 E. Count Paths <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u7b2c \\(i\\) \u500b\u9ede\u6709\u984f\u8272 \\(c_i\\)\uff0c\u554f\u6709\u5e7e\u689d path \u6eff\u8db3\uff1a</p> <ul> <li> <p>path \u7684\u5169\u7aef\u662f\u540c\u4e00\u7a2e\u984f\u8272</p> </li> <li> <p>path \u4e0a\u5176\u4ed6\u7bc0\u9ede\u7684\u984f\u8272\u90fd\u8ddf\u5169\u7aef\u4e0d\u540c</p> </li> </ul> <p>\\(1\\le c_i\\le n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u56e0\u70ba\u6211\u5011\u767c\u73fe\u6709\u5f88\u591a\u7a2e\u984f\u8272\u8981\u8a18\u9304\uff0c\u4e0d\u80fd\u55ae\u7d14\u4f7f\u7528\u6a39 dp\uff0c\u6211\u5011\u6539\u6210\u4f7f\u7528\u555f\u767c\u5f0f\u5408\u4f75\uff0c\u7d00\u9304\u4ee5 u \u70ba\u6839\uff0c\u6bcf\u7a2e\u9023\u5230 u\uff0c\u4e14\u5408\u6cd5\u7684 path \u7684\u5404\u7a2e\u7aef\u9ede\u7684\u984f\u8272\uff0c\u8207\u4ed6\u5011\u7684\u6578\u91cf\u3002\u5728\u5408\u4f75\u7684\u6642\u5019\u8a18\u5f97\u4e0d\u8981\u5408\u4f75\u8ddf\u7576\u524d\u7bc0\u9ede\u984f\u8272\u4e00\u6a23\u7684\u7aef\u9ede\uff0c\u56e0\u70ba\u4ed6\u5011\u662f\u9023\u4e0d\u5230\u66f4\u4e0a\u9762\u7684\uff08\u6700\u591a\u9023\u5230 u\uff09\u3002</p> <p>\u5176\u5be6\u9019\u984c\u4e5f\u5b58\u5728\u7dda\u6027\u6642\u9593\u89e3\uff0c\u6211\u5011\u8003\u616e\u5c07 path(s, t) \u7684\u8ca2\u737b\u5728 s, t \u5176\u4e2d\u4e00\u7aef\u4f86\u8a08\u7b97\uff0c\u5177\u9ad4\u4f86\u8aaa\uff0c\u5047\u8a2d\u7576\u524d\u6211\u5011\u5df2\u7d93\u7b97\u5b8c\u5b50\u6a39\u4e4b\u5916\u7684\u5404\u500b\u984f\u8272\u7684\u500b\u6578\uff0c\u6211\u5011\u5b58\u5728 col \u9663\u5217\u5167\uff0c\u7576\u6211\u5011\u76ee\u524d\u9032\u5165\u5230\u4e00\u500b\u9ede u \u7684\u6642\u5019\uff0c\u4ee5\u4ed6\u70ba\u300c\u9589\u5408\u300d\u7684\u4e00\u7aef\uff08\u4e5f\u5c31\u662f\u53e6\u4e00\u7aef\u5728 u \u7684\u5b50\u6a39\u679d\u5916\uff09\u7684\u65b9\u6848\u6578\u5c31\u662f col[c[u]]\uff0c\u63a5\u8457\uff0c\u6211\u5011\u8981\u53bb\u905e\u8ff4 u \u7684\u5c0f\u5b69\u4f86\u89e3\u5b50\u554f\u984c\uff0c\u4f46\u4e0d\u540c\u7684\u662f u \u7684\u5c0f\u5b69\u8981\u5c07 path \u9023\u4e0a\u4f86\u6642\u82e5\u984f\u8272\u6070\u70ba c[u]\uff0c\u90a3\u4f9d\u7167\u984c\u76ee\u6700\u591a\u5c31\u53ea\u80fd\u9023\u5230 c[u]\uff0c\u6240\u4ee5\u6b64\u6642\u5c07 col[c[u]] \u8a2d\u70ba 1\u3002</p> <p> </p> code1 <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nvector&lt;int&gt; c;\nvector&lt;vector&lt;int&gt;&gt; G;\nvector&lt;map&lt;int, int&gt;&gt; cnt;\nint ans = 0;\n\nvoid dfs(int u, int p) {\n    int bst = -1;\n    for (int v : G[u]) {\n        if (v == p) {\n            continue;\n        }\n        dfs(v, u);\n        if (bst == -1 || cnt[bst].size() &lt; cnt[v].size()) {\n            bst = v;\n        }\n    }\n    for (int v : G[u]) {\n        if (v == p || v == bst) {\n            continue;\n        }\n        for (auto it : cnt[v]) {\n            int x = it.first, y = it.second;\n            if (x != c[u]) {\n                // \u5169\u7aef\u5728\u4e0d\u540c subtree \u7684\n                ans += cnt[bst][x] * 1ll * y;\n            }\n            // x == c[u] \u9084\u662f\u8981\u8a18\u9304\uff0c\u4e0b\u9762\u6703\u7528\u5230\n            cnt[bst][x] += y;\n        }\n    }\n    if (bst != -1) {\n        swap(cnt[bst], cnt[u]);\n    }\n    // \u4ee5 u \u4f5c\u70ba\u4e00\u7aef\u7684\n    ans += cnt[u][c[u]];\n    // reset\n    cnt[u][c[u]] = 1;\n}\n\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    c = vector&lt;int&gt;(n);\n    G = vector&lt;vector&lt;int&gt;&gt;(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; c[i];\n    }\n    for (int i = 0; i &lt; n - 1; i++) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        a--;\n        b--;\n        G[a].push_back(b);\n        G[b].push_back(a);\n    }\n    ans = 0;\n    cnt.assign(n, {});\n    dfs(0, -1);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> code2 <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nvector&lt;int&gt; c;\nvector&lt;vector&lt;int&gt;&gt; G;\nint res = 0;\nint col[200001];\n\nvoid dfs(int u, int pre) {\n    res += col[c[u]];\n    int nb = col[c[u]];\n    for (int v : G[u]) {\n        if (v == pre) {\n            continue;\n        }\n        col[c[u]] = 1;\n        dfs(v, u);\n    }\n    col[c[u]] = nb + 1;\n}\n\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    c = vector&lt;int&gt;(n);\n    G = vector&lt;vector&lt;int&gt;&gt;(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; c[i];\n    }\n    for (int i = 0; i &lt; n - 1; i++) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        a--;\n        b--;\n        G[a].push_back(b);\n        G[b].push_back(a);\n    }\n    res = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        col[i] = 0;\n    }\n    dfs(0, -1);\n    cout &lt;&lt; res &lt;&lt; '\\n';\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre>"},{"location":"graph/images/207%20.%20NewWorld%20Online/","title":"207 . NewWorld Online","text":""},{"location":"graph/images/207%20.%20NewWorld%20Online/#description","title":"Description","text":"<p>NewWorld Online \u7684\u9b54\u5bf5\u7cfb\u7d71\u5c31\u5feb\u8981\u958b\u653e\u4e86\uff01\u5927\u5bb6\u90fd\u8feb\u4e0d\u53ca\u5f85\u8981\u6536\u670d\u53ef\u611b\u7684\u5c0f\u52d5\u7269\u7576\u6210\u81ea\u5df1\u7684\u5925\u4f34\u3002\u4f46\u662f\u7ba1\u7406\u54e1\u5011\u5341\u5206\u7dca\u5f35\uff0c\u4ed6\u5011\u64d4\u5fc3\u6703\u6709\u8a31\u591a\u4eba\u9a0e\u8457\u70cf\u9f9c\u98db\u4f86\u98db\u53bb\uff0c\u91c0\u6210\u5371\u96aa\u7684\u7a7a\u4e2d\u8eca\u798d\uff0c\u6240\u4ee5\u7ba1\u7406\u54e1\u5011\u6c7a\u5b9a\u5728\u4e00\u4e9b\u666f\u9ede\u4e4b\u9593\u5efa\u7acb\u597d\u5b89\u5168\u7684\u901a\u9053\u3002</p> <p>\u7b2c\u4e03\u968e\u4e00\u5171\u6709 \\(N\\) \u500b\u7279\u5225\u7684\u666f\u9ede\uff0c\u6bcf\u500b\u666f\u9ede\u90fd\u6709\u4e00\u7a2e\u7279\u6b8a\u7684\u5730\u5f62\uff0c\u5730\u5f62\u53ef\u4ee5\u7528\u4e00\u500b\u6b63\u6574\u6578\u4f86\u8868\u793a\u3002\u7ba1\u7406\u54e1\u6e96\u5099\u4e86 \\(10^6\\) \u7a2e\u6253\u9020\u901a\u9053\u7684\u5efa\u6750\uff0c\u5efa\u6750\u7684\u5f37\u5ea6\u5206\u5225\u662f \\(1\\) \u5230 \\(10^6\\) \u7684\u6b63\u6574\u6578\uff0c\u6bcf\u4e00\u7a2e\u5efa\u6750\u7684\u6578\u91cf\u90fd\u8db3\u5920\u5efa\u9020\u4efb\u610f\u689d\u901a\u9053\u3002\u6bcf\u4e00\u689d\u901a\u9053\u6703\u7528\u540c\u4e00\u7a2e\u5efa\u6750\u9023\u63a5\u5169\u500b\u4e0d\u540c\u7684\u666f\u9ede\uff0c\u4f46\u662f\u70ba\u4e86\u9069\u61c9\u666f\u9ede\u7684\u5730\u5f62\uff0c\u5efa\u6750\u7684\u5f37\u5ea6\u5fc5\u9808\u662f\u5169\u7aef\u666f\u9ede\u5730\u5f62\u7684\u516c\u56e0\u6578\u3002\u70ba\u4e86\u5efa\u9020\u4e00\u500b\u65b9\u4fbf\u53c8\u5b89\u5168\u7684\u5834\u666f\uff0c\u7ba1\u7406\u54e1\u5011\u5e0c\u671b\u4efb\u5169\u500b\u666f\u9ede\u90fd\u80fd\u4e92\u76f8\u5230\u9054\uff0c\u800c\u4e14\u4e0d\u8981\u5f62\u6210\u74b0\u72c0\u7684\u8def\u5f91\uff0c\u4ee5\u514d\u6709\u73a9\u5bb6\u8ff7\u8def\u3002</p> <p>\u7ba1\u7406\u54e1\u5e0c\u671b\u5efa\u9020\u7684\u901a\u9053\u80fd\u5805\u56fa\u4e00\u9ede\uff0c\u53ef\u662f\u4ed6\u5011\u5fd9\u8457\u770b\u6885\u666e\u9732\u8ce3\u840c\uff0c\u6c92\u7a7a\u8655\u7406\u904a\u6232\u74b0\u5883\uff0c\u6240\u4ee5\u6c7a\u5b9a\u627e\u4f60\u5e6b\u5fd9\u3002\u8acb\u4f60\u898f\u5283\u4e00\u500b\u84cb\u901a\u9053\u7684\u65b9\u5f0f\uff0c\u4e26\u544a\u8a34\u4ed6\u5011\u5efa\u6750\u5f37\u5ea6\u7684\u7e3d\u548c\u6700\u5927\u53ef\u4ee5\u6709\u591a\u5c11\u3002</p>"},{"location":"graph/images/207%20.%20NewWorld%20Online/#input-format","title":"Input Format","text":"<p>\u8f38\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u500b\u6b63\u6574\u6578 \\(N\\)\uff0c\u4ee3\u8868\u666f\u9ede\u7684\u6578\u91cf\u3002\u7b2c\u4e8c\u884c\u5305\u542b \\(N\\) \u500b\u6574\u6578 \\(a_1,a_2,\\ldots,a_n\\)\uff0c\u4ee3\u8868\u7b2c \\(i\\) \u500b\u666f\u9ede\u7684\u5730\u5f62\u3002</p> <ul> <li>\\(1\\le N\\le 10^5\\)</li> <li>\\(1\\le a_i \\le 10^6\\)</li> </ul>"},{"location":"graph/images/207%20.%20NewWorld%20Online/#output-format","title":"Output Format","text":"<p>\u8f38\u51fa\u4e00\u500b\u6b63\u6574\u6578\u4ee3\u8868\u5efa\u6750\u5f37\u5ea6\u7684\u7e3d\u548c\u7684\u6700\u5927\u503c\u3002\u4e00\u7a2e\u5efa\u6750\u4f7f\u7528\u591a\u6b21\u6642\u5f37\u5ea6\u4e5f\u6703\u4ee5\u591a\u500d\u8a08\u7b97\u3002</p>"},{"location":"graph/images/207%20.%20NewWorld%20Online/#sample-input-1","title":"Sample Input 1","text":"<pre><code>4\n2 4 8 16\n</code></pre>"},{"location":"graph/images/207%20.%20NewWorld%20Online/#sample-output-1","title":"Sample Output 1","text":"<pre><code>14\n</code></pre>"},{"location":"graph/images/207%20.%20NewWorld%20Online/#sample-input-2","title":"Sample Input 2","text":"<pre><code>5\n34 38 25 11 49\n</code></pre>"},{"location":"graph/images/207%20.%20NewWorld%20Online/#sample-output-2","title":"Sample Output 2","text":"<pre><code>5\n</code></pre>"},{"location":"graph/images/207%20.%20NewWorld%20Online/#subtasks","title":"Subtasks","text":"No. Testdata Range Constraints Score 1 0~1 \u7bc4\u4f8b\u6e2c\u8cc7 0 2 0~22 \\(N\\le2000\\) 30 3 0~48 \u7121\u5176\u4ed6\u9650\u5236 70"},{"location":"graph/images/207%20.%20NewWorld%20Online/#testdata-and-limits","title":"Testdata and Limits","text":"No. Time Limit (ms) Memory Limit (VSS, KiB) Output Limit (KiB) Subtasks 0 4000 524288 65536 1 2 3 1 4000 524288 65536 1 2 3 2 4000 524288 65536 2 3 3 4000 524288 65536 2 3 4 4000 524288 65536 2 3 5 4000 524288 65536 2 3 6 4000 524288 65536 2 3 7 4000 524288 65536 2 3 8 4000 524288 65536 2 3 9 4000 524288 65536 2 3 10 4000 524288 65536 2 3 11 4000 524288 65536 2 3 12 4000 524288 65536 2 3 13 4000 524288 65536 2 3 14 4000 524288 65536 2 3 15 4000 524288 65536 2 3 16 4000 524288 65536 2 3 17 4000 524288 65536 2 3 18 4000 524288 65536 2 3 19 4000 524288 65536 2 3 20 4000 524288 65536 2 3 21 4000 524288 65536 2 3 22 4000 524288 65536 2 3 23 4000 524288 65536 3 24 4000 524288 65536 3 25 4000 524288 65536 3 26 4000 524288 65536 3 27 4000 524288 65536 3 28 4000 524288 65536 3 29 4000 524288 65536 3 30 4000 524288 65536 3 31 4000 524288 65536 3 32 4000 524288 65536 3 33 4000 524288 65536 3 34 4000 524288 65536 3 35 4000 524288 65536 3 36 4000 524288 65536 3 37 4000 524288 65536 3 38 4000 524288 65536 3 39 4000 524288 65536 3 40 4000 524288 65536 3 41 4000 524288 65536 3 42 4000 524288 65536 3 43 4000 524288 65536 3 44 4000 524288 65536 3 45 4000 524288 65536 3 46 4000 524288 65536 3 47 4000 524288 65536 3 48 4000 524288 65536 3"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/","title":"403 . \u6a39\u76f4\u5f91","text":""},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#description","title":"Description","text":"<p>\u5c0f\u98a8\u624b\u4e0a\u6709\u4e00\u68f5 \\(N\\) \u500b\u9ede\u7684\u6a39\uff0c\u9867\u540d\u601d\u7fa9\uff0c\u5b83\u6709 \\(N-1\\) \u689d\u908a\u9023\u63a5\u8457 \\(N\\) \u500b\u9ede\uff0c\u4f7f\u5f97\u4efb\u610f\u5169\u500b\u9ede\u90fd\u53ef\u4ee5\u900f\u904e\u82e5\u5e72\u689d\u908a\u62b5\u9054\uff0c\u7bc0\u9ede\u4ee5 \\(1\\) \u81f3 \\(N\\) \u7de8\u865f\u3002</p> <p>\u5c0f\u98a8\u89ba\u5f97\u9019\u68f5\u6a39\u592a\u9577\u4e86\uff0c\u6240\u4ee5\u4ed6\u60f3\u9032\u884c\u5982\u4e0b\u64cd\u4f5c\u4e00\u6b21\uff1a\u780d\u6389\u6a39\u4e0a\u7684\u5176\u4e2d\u4e00\u689d\u908a\uff0c\u518d\u53e6\u5916\u52a0\u4e0a\u4e00\u689d\u908a\u56de\u53bb\u4f7f\u5176\u4fdd\u6301\u9023\u901a\u3002\u5c0f\u98a8\u60f3\u8981\u900f\u904e\u9019\u500b\u64cd\u4f5c\u6e1b\u5c11\u6a39\u7684\u76f4\u5f91\uff0c\u8acb\u554f\u5c0f\u98a8\u53ef\u4ee5\u900f\u904e\u9019\u500b\u64cd\u4f5c\u8b93\u6a39\u76f4\u5f91\u6700\u5c0f\u70ba\u4f55\uff1f</p> <p>\u5c0d\u4efb\u610f\u5169\u9ede\uff0c\u6211\u5011\u5b9a\u7fa9\u5176\u8ddd\u96e2\u70ba\u9019\u5169\u500b\u9ede\u4e4b\u9593\u552f\u4e00\u8def\u5f91\u7684\u908a\u6578\uff0c\u5c0d\u4e00\u500b\u6a39\u6211\u5011\u5b9a\u7fa9\u5176\u76f4\u5f91\u70ba\u4efb\u610f\u5169\u9ede\u4e4b\u9593\u8ddd\u96e2\u7684\u6700\u5927\u503c\u3002</p>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#input-format","title":"Input Format","text":"<p>\u8f38\u5165\u7b2c\u4e00\u884c\u53ea\u6709\u4e00\u500b\u6b63\u6574\u6578 \\(N\\)\uff0c\u4ee3\u8868\u6a39\u4e0a\u7bc0\u9ede\u7684\u500b\u6578\u3002</p> <p>\u63a5\u4e0b\u4f86\u6709 \\(N-1\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u6709\u5169\u500b\u6b63\u6574\u6578 \\(u,v\\) \u4ee5\u7a7a\u767d\u5206\u958b\uff0c\u4ee3\u8868\u7b2c \\(i\\) \u689d\u908a\u9023\u63a5\u7684\u5169\u500b\u7bc0\u9ede\u7de8\u865f</p> <ul> <li>\\(2\\le N \\le 5\\times 10^5\\)</li> <li>\\(1 \\leq u_i, v_i \\leq N\\)</li> <li>\u8f38\u5165\u4fdd\u8b49\u5f62\u6210\u4e00\u500b\u6a39</li> </ul>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#output-format","title":"Output Format","text":"<p>\u8acb\u8f38\u51fa\u4e00\u500b\u6b63\u6574\u6578\u65bc\u4e00\u884c\u4ee3\u8868\u7b54\u6848\u3002</p>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#sample-input-1","title":"Sample Input 1","text":"<pre><code>5\n5 1\n4 1\n5 3\n2 3\n</code></pre>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#sample-output-1","title":"Sample Output 1","text":"<pre><code>3\n</code></pre>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#sample-input-2","title":"Sample Input 2","text":"<pre><code>6\n6 5\n1 3\n3 2\n4 5\n6 3\n</code></pre>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#sample-output-2","title":"Sample Output 2","text":"<pre><code>3\n</code></pre>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#sample-input-3","title":"Sample Input 3","text":"<pre><code>10\n8 3\n2 8\n7 9\n6 5\n4 6\n9 1\n3 10\n3 5\n2 9\n</code></pre>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#sample-output-3","title":"Sample Output 3","text":"<pre><code>4\n</code></pre>"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#subtasks","title":"Subtasks","text":"No. Testdata Range Constraints Score 1 0~2 \u7bc4\u4f8b\u6e2c\u8cc7 0 2 0~30 \\(N\\le 50\\) 20 3 0~59 \\(N\\le 1000\\) 30 4 0~89 \u7121\u5176\u4ed6\u9650\u5236 50"},{"location":"graph/images/403%20.%20%E6%A8%B9%E7%9B%B4%E5%BE%91/#testdata-and-limits","title":"Testdata and Limits","text":"No. Time Limit (ms) Memory Limit (VSS, KiB) Output Limit (KiB) Subtasks 0 4000 524288 65536 1 2 3 4"},{"location":"graph/images/Kosaraju%20Algorithm/","title":"Kosaraju Algorithm","text":""},{"location":"graph/images/Kosaraju%20Algorithm/#_1","title":"\u904e\u7a0b","text":"<p>\u5efa\u7acb\u53cd\u5716 G<sup>T</sup>\uff0c\u5728 G<sup>T</sup> \u4e0a DFS \u4e26\u8a18\u9304\u6bcf\u500b\u9ede\u96e2\u958b\u7684\u6642\u9593</p> <p>\u4f9d\u7167\u96e2\u958b\u6642\u9593\u5927\u5230\u5c0f\u7684\u9806\u5e8f\u5728\u539f\u5716 G \u4e0a DFS \u5373\u53ef\u6b63\u78ba\u627e\u51fa SCC</p> <p></p>      \u539f\u672c\u7684\u5716  <p></p> <p></p> <p></p>"},{"location":"graph/images/Kosaraju%20Algorithm/#_2","title":"\u8b49\u660e","text":""},{"location":"graph/images/Kosaraju%20Algorithm/#_3","title":"\u611f\u6027\u7406\u89e3","text":"<p>\u82e5 A \u53ef\u4ee5\u8d70\u5230 B\uff0c\u4ee3\u8868 B \u88e1\u9762\u7684\u6240\u6709\u9ede\u90fd\u8981\u8d70\u5b8c\u624d\u6703\u8fd4\u56de\u5230 A</p>"},{"location":"graph/images/Kosaraju%20Algorithm/#from","title":"From \u8cc7\u8a0a\u4e4b\u82bd","text":"<ul> <li>\u53ef\u4ee5\u7528 DAG \u7684\u4f8b\u5b50\u4f86\u60f3\u50cf Kosaraju \u5728\u505a\u7684\u4e8b </li> <li>dfs \u4e00\u904d\u7167\u96e2\u958b\u9806\u5e8f\u7531\u5927\u5230\u5c0f \\(\\implies\\) \u62d3\u64b2\u9806\u5e8f </li> <li>\u96e2\u958b\u9806\u5e8f\u6700\u5927\u7684\u9ede \\(\\implies\\) \u5165\u5ea6 0 \u7684\u9ede </li> <li>\u53cd\u5716\u5f8c\u9019\u500b\u9ede\u5c31\u8b8a\u6210\u51fa\u5ea6 0 \u7684\u9ede\u4e86\uff0c\u4ed6\u8d70\u4e0d\u5230\u4efb\u4f55\u4eba\uff0c\u6240\u4ee5\u4e5f\u5c31\u7576\u6210\u53ea\u6703\u55ae\u7d14\u8490\u96c6\u9019\u4e00\u500b\u9ede\u6210\u4e00\u500b\u5f37\u9023\u901a\u5143\u4ef6 </li> <li>\u6240\u4ee5\u6211\u5011\u53ea\u662f\u5728\u4e00\u76f4\u628a\u53cd\u5716\u4e0a\u51fa\u5ea6 0 \u7684\u9ede\u4f9d\u5e8f\u79fb\u9664\uff0c\u4f60\u53ef\u4ee5\u7576\u6210\u6bcf\u500b\u9ede\u5176\u5be6\u5c31\u662f\u4e00\u500b\u5f37\u9023\u901a\u5143\u4ef6\u7e2e\u6210\u4e00\u500b\u9ede\u7684\u6a23\u5b50</li> </ul>"},{"location":"graph/images/Kosaraju%20Algorithm/#from-ionc","title":"From IONC","text":"<p>\u5047\u8a2d \\(G\\) \u5728 DFS \u6642\uff0c\u7bc0\u9ede \\(y\\) \u6bd4\u7bc0\u9ede \\(x\\) \u5148\u9032\u5165\u5806\u758a\uff0c\u90a3\u9ebc \\(G^T\\) \u4e0a DFS \u6642\u6703\u5148\u7531\u7bc0\u9ede \\(x\\) \u958b\u59cb</p> <p>\u3010Case 1\u3011\u82e5\u5728 \\(G^T\\) \u4e0a DFS \u6642\uff0c\u53ef\u4ee5\u7531 \\(x\\) \u5230\u9054 \\(y\\)\uff0c\u5247\u4ee3\u8868 \\(G\\) \u4e0a\u5b58\u5728 \\(\\text{path}(y,x)\\)</p> <p>\u200b   \u82e5 \\(G\\) \u4e0a\u4e0d\u5b58\u5728 \\(\\text{path}(y,x)\\)\uff0c\u5247\u4e00\u958b\u59cb\u5728 \\(G\\) \u4e0a\u7684 postorder traversal \u4e2d\u7d50\u9ede \\(y\\) \u5fc5\u9808\u6bd4\u7bc0\u9ede \\(x\\) \u665a\u9032\u5165\u5806\u758a\uff0c\u9055\u53cd\u5047\u8a2d\uff0c\u56e0\u6b64\u5728\u9019\u6a23\u7684\u72c0\u6cc1\u4e0b \\(G\\) \u4e0a\u5fc5\u5b58\u5728 \\(\\text{path}(y,x)\\)\uff0c\u4e5f\u5c31\u662f\u8aaa \\(x\\) \u548c \\(y\\) \u5b58\u5728\u540c\u4e00\u500b\u5f37\u9023\u901a\u5206\u91cf\u4e2d\u3002</p> <p>\u3010Case 2\u3011\u82e5\u5728 \\(G^T\\) \u4e0a DFS \u6642\uff0c\u7121\u6cd5\u7531 \\(x\\) \u5230\u9054 \\(y\\)\uff0c\u5247\u4ee3\u8868\u5728 \\(G\\) \u4e0a\u4e0d\u5b58\u5728 \\(\\text{path}(y,x)\\)\uff0c\\(x\\) \u548c \\(y\\) \u90fd\u4e0d\u6703\u5b58\u5728\u65bc\u540c\u4e00\u500b\u5f37\u9023\u901a\u5206\u91cf\u4e2d\uff0c\u4e5f\u4e0d\u6703\u5f71\u97ff\u5230\u6f14\u7b97\u6cd5\u7684\u6b63\u78ba\u6027\u3002</p> <p>\u6b78\u7d0d\u6240\u6709 Case 1 \u7684\u72c0\u6cc1\uff0c\u5c31\u80fd\u6c42\u51fa\u6240\u6709\u7684\u5f37\u9023\u901a\u5206\u8f1b\uff0cCase 2 \u5247\u69cb\u6210\u4e86\u5b8c\u6210\u7e2e\u9ede\u5f8c\u7684\u908a\u3002\u6700\u5f8c\u9019\u500b\u8b49\u660e\u9084\u7f3a\u4e86\u4e00\u90e8\u5206 : \u9019\u500b\u6f14\u7b97\u6cd5\u627e\u51fa\u7684\u5f37\u9023\u901a\u5206\u91cf\u662f\u6700\u5927\u7684\uff0c\u6b64\u90e8\u5206\u7559\u7d66\u8b80\u8005\u601d\u8003\u3002</p>"},{"location":"graph/images/ioic_308/","title":"308 . \u6578\u5b57\u904a\u6232","text":""},{"location":"graph/images/ioic_308/#description","title":"Description","text":"<p>Alice \u8ddf Bob \u5728\u73a9\u904a\u6232\uff0c\u7d66\u5b9a \\(a_1, a_2, \\ldots, a_{2N}\\)\uff0cAlice \u53ef\u4ee5\u5c07\u9019\u500b\u6578\u5217\u4efb\u610f\u6392\u5217\uff0c\u4e4b\u5f8c Bob \u8981\u505a\u6700\u5c11\u6b21\u64cd\u4f5c\u4f7f\u5f97 \\(a_{i} = a_{i+N}\\) \u5c0d\u6240\u6709 \\(i\\) \u5f9e \\(1\\) \u5230 \\(N\\) \u90fd\u6210\u7acb\uff0cBob \u6bcf\u6b21\u53ef\u4ee5\u9032\u884c\u7684\u64cd\u4f5c\u70ba\u9078\u64c7\u4e00\u500b\u8db3\u6a19 \\(i\\)\uff0c\u5c07 \\(a_i\\) \u6539\u6210 \\(\\lfloor \\frac{a_i}{2} \\rfloor,2a_i\\) \u6216 \\(2a_i+1\\)\u3002Alice \u60f3\u8b93 Bob \u9700\u8981\u7684\u64cd\u4f5c\u6b21\u6578\u76e1\u91cf\u591a\uff0c\u90a3\u6700\u591a\u53ef\u4ee5\u662f\u591a\u5c11\uff1f</p> <p>\u56e0\u70ba\u9019\u904a\u6232\u5c0d\u4ed6\u5011\u4f86\u8aaa\u5be6\u5728\u592a\u7c21\u55ae\uff0c\u6240\u4ee5\u4ed6\u5011\u6c7a\u5b9a\u6539\u6210\u4ee5\u4e0b\u554f\u984c\uff1aAlice \u6703\u9032\u884c \\(Q\\) \u6b21\u6311\u6230\uff0c\u6bcf\u4e00\u6b21\u6311\u6230\u90fd\u6703\u9078\u64c7\u6578\u5217\u7684\u67d0\u500b\u6578\u4fee\u6539\u6210\u65b0\u7684\u6578\u5b57\uff0c\u8acb Bob \u5728\u6bcf\u6b21\u4fee\u6539\u5f8c\u544a\u8a34 Alice \u4e0a\u8ff0\u904a\u6232\u7684\u7b54\u6848\u662f\u591a\u5c11\u3002\u8acb\u6ce8\u610f\u5728\u904e\u7a0b\u4e2d\u771f\u6b63\u6703\u6539\u8b8a\u5e8f\u5217\u7684\u53ea\u6709\u9019 \\(Q\\) \u6b21\u4fee\u6539\u3002</p>"},{"location":"graph/images/ioic_308/#input-format","title":"Input Format","text":"<p>\u8f38\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u500b\u6b63\u6574\u6578 \\(N\\) \uff0c\u4ee3\u8868\u6578\u5217\u6709 \\(2N\\) \u500b\u6578\u5b57\u3002</p> <p>\u63a5\u4e0b\u4f86\u7684\u4e00\u884c\u8f38\u5165 \\(2N\\) \u500b\u6578\u5b57\uff0c\u7b2c \\(i\\) \u500b\u6578\u5b57\u4ee3\u8868\u4e00\u958b\u59cb\u7684 \\(a_i\\)\u3002</p> <p>\u63a5\u4e0b\u4f86\u7684\u4e00\u884c\u5305\u542b\u4e00\u500b\u6b63\u6574\u6578 \\(Q\\) \uff0c\u4ee3\u8868\u6709 \\(Q\\) \u500b\u4fee\u6539\u64cd\u4f5c\u3002</p> <p>\u63a5\u4e0b\u4f86\u6709 \\(Q\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u6709\u5169\u500b\u4ee5\u7a7a\u767d\u5206\u9694\u7684\u6574\u6578 \\(x_i,y_i\\)\uff0c\u4ee3\u8868\u8981\u5c07\u7b2c \\(x_i\\) \u500b\u6578\u5b57\u6539\u6210 \\(y_i\\)\u3002</p> <ul> <li>\\(1 \\leq N, Q \\leq 10^ 5\\)</li> <li>\\(1 \\leq a_i, y_i \\leq 10^ 6\\)</li> <li>\\(1 \\leq x_i \\leq 2N\\)</li> </ul>"},{"location":"graph/images/ioic_308/#output-format","title":"Output Format","text":"<p>\u8acb\u8f38\u51fa \\(Q\\) \u884c\u6578\u5b57\uff0c\u7b2c \\(i\\) \u884c\u6578\u5b57\u4ee3\u8868\u5728\u7b2c \\(i\\) \u6b21\u4fee\u6539\u4e4b\u5f8c\u7684\u7b54\u6848\u3002</p>"},{"location":"graph/images/ioic_308/#sample-input-1","title":"Sample Input 1","text":"<pre><code>3\n2 8 6 2 5 4\n3\n5 7\n2 10\n1 6\n</code></pre>"},{"location":"graph/images/ioic_308/#sample-output-1","title":"Sample Output 1","text":"<pre><code>9\n9\n12\n</code></pre>"},{"location":"graph/images/ioic_308/#sample-input-2","title":"Sample Input 2","text":"<pre><code>3\n6 8 4 4 7 7\n3\n2 9\n3 8\n2 9\n</code></pre>"},{"location":"graph/images/ioic_308/#sample-output-2","title":"Sample Output 2","text":"<pre><code>13\n14\n14\n</code></pre>"},{"location":"graph/images/ioic_308/#sample-input-3","title":"Sample Input 3","text":"<pre><code>5\n7 3 8 7 6 2 5 1 6 6\n5\n2 5\n5 1\n2 4\n10 2\n8 9\n</code></pre>"},{"location":"graph/images/ioic_308/#sample-output-3","title":"Sample Output 3","text":"<pre><code>18\n16\n16\n15\n16\n</code></pre>"},{"location":"graph/images/ioic_308/#subtasks","title":"Subtasks","text":"No. Testdata Range Constraints Score 1 0~2 \u7bc4\u4f8b\u6e2c\u8cc7 0 2 0~22 \u7121\u7279\u5225\u9650\u5236 100"},{"location":"graph/images/ioic_308/#testdata-and-limits","title":"Testdata and Limits","text":"No. Time Limit (ms) Memory Limit (VSS, KiB) Output Limit (KiB) Subtasks 0 2000 524288 65536 1 2 1 2000 524288 65536 1 2 2 2000 524288 65536 1 2 3 2000 524288 65536 2 4 2000 524288 65536 2 5 2000 524288 65536 2 6 2000 524288 65536 2 7 2000 524288 65536 2 8 2000 524288 65536 2 9 2000 524288 65536 2 10 2000 524288 65536 2 11 2000 524288 65536 2 12 2000 524288 65536 2 13 2000 524288 65536 2 14 2000 524288 65536 2 15 2000 524288 65536 2 16 2000 524288 65536 2 17 2000 524288 65536 2 18 2000 524288 65536 2 19 2000 524288 65536 2 20 2000 524288 65536 2 21 2000 524288 65536 2 22 2000 524288 65536 2"},{"location":"graph/images/ioic_511/","title":"511 . \u627e\u9322\u5305","text":""},{"location":"graph/images/ioic_511/#description","title":"Description","text":"<p>\u96de\u584a\u6240\u4f4f\u7684\u57ce\u5e02\u6709 \\(N\\) \u500b\u5341\u5b57\u8def\u53e3\u548c \\(M\\) \u689d\u8def\uff0c\u5206\u5225\u7de8\u865f \\(1\\) \u5230 \\(N\\) \u548c \\(1\\) \u5230 \\(M\\)\uff0c\u6bcf\u689d\u8def\u90fd\u662f\u53ef\u4ee5\u96d9\u5411\u901a\u884c\u7684\u3002\u5176\u4e2d\u6709 \\(K\\) \u689d\u91cd\u8981\u8def\uff0c\u9019\u4e9b\u8def\u662f\u91cd\u8981\u5e79\u9053\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5f9e\u4efb\u4f55\u5341\u5b57\u8def\u53e3\u5728\u53ea\u901a\u904e\u91cd\u8981\u8def\u7684\u60c5\u6cc1\u4e0b\u8d70\u5230\u5269\u4e0b\u7684\u6240\u6709\u5341\u5b57\u8def\u53e3\u3002</p> <p>\u67d0\u4e00\u5929\u96de\u584a\u8981\u642d\u9ad8\u9435\u53bb\u6bd4\u8cfd\u7684\u6642\u5019\uff0c\u767c\u73fe\u4ed6\u7684\u968a\u53cb\u5c45\u7136\u628a\u9322\u5305\u5f04\u4e1f\u4e86\uff01\u5c11\u4e86\u5927\u817f\u968a\u53cb\u7684\u8a71\u96de\u584a\u6703\u4ec0\u9ebc\u984c\u76ee\u90fd\u5beb\u4e0d\u51fa\u4f86\uff0c\u6240\u4ee5\u96de\u584a\u5fc5\u9808\u53bb\u628a\u4ed6\u7684\u9322\u5305\u627e\u51fa\u4f86\u3002\u56e0\u70ba\u4ed6\u7684\u968a\u53cb\u53ea\u8d70\u5927\u8def\uff0c\u6240\u4ee5\u96de\u584a\u53ea\u9700\u8981\u628a\u6240\u6709\u7684\u91cd\u8981\u8def\u90fd\u8d70\u904e\u5c31\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u9322\u5305\u3002\u96de\u584a\u73fe\u5728\u5728 \\(1\\) \u865f\u9ede\u7684\u9ad8\u9435\u7ad9\uff0c\u4e26\u4e14\u8981\u8d70\u5230 \\(N\\) \u865f\u9ede\u7684\u8b66\u5bdf\u5c40\u627e\u4ed6\u7684\u968a\u53cb\u3002</p> <p>\u5728\u6b63\u8981\u958b\u59cb\u8d70\u7684\u6642\u5019\uff0c\u96de\u584a\u4e0d\u7981\u7522\u751f\u4e86\u4e00\u500b\u554f\u984c\uff1a\u300c\u662f\u4e0d\u662f\u80fd\u5920\u5728\u8d70\u904e\u6bcf\u689d\u8def\u4e0d\u8d85\u904e\u4e00\u6b21\u7684\u524d\u63d0\u4e0b\u8d70\u904e\u6240\u6709\u91cd\u8981\u8def\u5462\uff1f\u300d\u56e0\u70ba\u96de\u584a\u7684\u667a\u5546\u4e0d\u8db3\uff0c\u6240\u4ee5\u4ed6\u627e\u4e0a\u4e86\u5168\u71df\u968a\u7684\u667a\u5546\u5929\u82b1\u677f\uff0c\u4f60\u3002</p>"},{"location":"graph/images/ioic_511/#input-format","title":"Input Format","text":"<p>\u7b2c\u4e00\u884c\u6709\u4e09\u500b\u6574\u6578 \\(N,M,K\\) \u6eff\u8db3 \\(2\\le N\\le 2\\times 10^5,1\\le M\\le 4\\times 10^5\\) \u4e14 \\(N-1\\le K\\le M\\)\u3002</p> <p>\u63a5\u4e0b\u4f86\u6709 \\(M\\) \u884c\uff0c\u7b2c \\(i+1\\) \u884c\u6709\u5169\u500b\u6578\u5b57 \\(u_i,v_i\\)\uff08\\(1\\le u_i,v_i\\le N\\)\uff09\uff0c\u4ee3\u8868\u7b2c \\(i\\) \u689d\u8def\u9023\u63a5\u8457\u7b2c \\(u_i\\) \u548c \\(v_i\\) \u500b\u8def\u53e3\u3002\u524d \\(K\\) \u689d\u662f\u91cd\u8981\u8def\uff0c\u5269\u4e0b\u7684 \\(M-K\\) \u689d\u662f\u6b63\u5e38\u8def\u3002\u4fdd\u8b49 \\(u_i&lt;v_i\\) \u4e14 \\((u_i, v_i) \\neq (u_j, v_j)\\ \\forall i \\neq j\\)\u3002</p>"},{"location":"graph/images/ioic_511/#output-format","title":"Output Format","text":"<p>\u5982\u679c\u5b58\u5728\u4e00\u689d\u9019\u6a23\u7684\u8def\uff0c\u8f38\u51fa <code>Yes</code>\uff0c\u5426\u5247\u8f38\u51fa <code>No</code>\u3002</p>"},{"location":"graph/images/ioic_511/#sample-input-1","title":"Sample Input 1","text":"<pre><code>4 4 4\n1 2\n1 3\n2 3\n1 4\n</code></pre>"},{"location":"graph/images/ioic_511/#sample-output-1","title":"Sample Output 1","text":"<pre><code>Yes\n</code></pre>"},{"location":"graph/images/ioic_511/#sample-input-2","title":"Sample Input 2","text":"<pre><code>5 8 5\n1 2\n2 3\n3 4\n4 5\n3 5\n1 4\n1 3\n1 5\n</code></pre>"},{"location":"graph/images/ioic_511/#sample-output-2","title":"Sample Output 2","text":"<pre><code>Yes\n</code></pre>"},{"location":"graph/images/ioic_511/#sample-input-3","title":"Sample Input 3","text":"<pre><code>5 4 4\n1 2\n2 3\n2 4\n1 5\n</code></pre>"},{"location":"graph/images/ioic_511/#sample-output-3","title":"Sample Output 3","text":"<pre><code>No\n</code></pre>"},{"location":"graph/images/ioic_511/#subtasks","title":"Subtasks","text":"No. Testdata Range Constraints Score 1 0~2 \u7bc4\u4f8b\u6e2c\u8cc7 0 2 3~23 K = M 30 3 0~36 \u7121\u5176\u4ed6\u9650\u5236 70"},{"location":"graph/images/ioic_511/#testdata-and-limits","title":"Testdata and Limits","text":"No. Time Limit (ms) Memory Limit (VSS, KiB) Output Limit (KiB) Subtasks 0 1000 262144 65536 1 3 1 1000 262144 65536 1 3 2 1000 262144 65536 1 3 3 1000 262144 65536 2 3 4 1000 262144 65536 2 3 5 1000 262144 65536 2 3 6 1000 262144 65536 2 3 7 1000 262144 65536 2 3 8 1000 262144 65536 2 3 9 1000 262144 65536 2 3 10 1000 262144 65536 2 3 11 1000 262144 65536 2 3 12 1000 262144 65536 2 3 13 1000 262144 65536 2 3 14 1000 262144 65536 2 3 15 1000 262144 65536 2 3 16 1000 262144 65536 2 3 17 1000 262144 65536 2 3 18 1000 262144 65536 2 3 19 1000 262144 65536 2 3 20 1000 262144 65536 2 3 21 1000 262144 65536 2 3 22 1000 262144 65536 2 3 23 1000 262144 65536 2 3 24 1000 262144 65536 3 25 1000 262144 65536 3 26 1000 262144 65536 3 27 1000 262144 65536 3 28 1000 262144 65536 3 29 1000 262144 65536 3 30 1000 262144 65536 3 31 1000 262144 65536 3 32 1000 262144 65536 3 33 1000 262144 65536 3 34 1000 262144 65536 3 35 1000 262144 65536 3 36 1000 262144 65536 3"},{"location":"main/codebook/","title":"codebook","text":""},{"location":"main/codebook/#_1","title":"\u601d\u8def","text":""},{"location":"main/codebook/#_2","title":"\u6642\u9593","text":"<ul> <li>\u4e0a\u5348\u5834\uff1a5\u984c/3hr</li> <li>\u4e0b\u5348\u5834: 3\u984c/2hr</li> </ul>"},{"location":"main/codebook/#_3","title":"\u7b56\u7565","text":"<ul> <li>1~1.5hr \u524d\u4e09\u984c</li> <li>\u6bcf\u984c\u5148\u82b1\u4e94\u5206\u9418\uff0c\u8b80\u6e05\u695a\u984c\u76ee\uff0c\u770b\u54ea\u4e9b\u5b50\u984c\u662f\u76f4\u63a5\u6703\u505a\u7684 \u53ef\u4ee5\u76f4\u63a5\u5beb\u6389\u7684\u984c\u76ee\u90fd\u89e3\u5b8c\uff0c\u518d\u4e00\u984c\u4e00\u984c\u82b1\u591a\u4e00\u4e9b\u6642\u9593\u60f3</li> <li>\u770b\u5b8c\u984c\u76ee\u8a66\u8457\u7528\u81ea\u5df1\u7684\u8a71\u7c21\u5316\u984c\u76ee\uff0c\u5c0f\u5fc3\u9a57\u8b49\u6709\u6c92\u6709\u7c21\u5316\u932f</li> <li>20 min -&gt; \u8df3</li> <li>\u5148\u60f3\u904e\uff0c\u653e\u5728\u8166\u888b\u88e1\uff0c\u5beb\u5225\u7684\u984c\u76ee\u7684\u6642\u5019\uff0c\u5176\u5be6\u8166\u888b\u7684\u6f5b\u610f\u8b58\u4e5f\u6703\u4e00\u908a\u601d\u8003</li> <li>\u963f\u984c\u76ee\u5982\u679c\u610f\u601d\u8981\u554f\u7684\u4e5f\u8981\u65e9\u9ede\u554f\uff08\u5148\u770b\u5b8c\u984c\u76ee\u7684\u597d\u8655</li> <li>\u6709\u4e9b\u4e0d\u6703\u7684\u8a71\uff0c\u53ef\u4ee5\u665a\u9ede\u6bd4\u8f03\u4ed4\u7d30\u60f3\u904e\uff0c\u518d\u770b\u60f3\u5230\u4ec0\u9ebc\u5b50\u984c\u5c31\u5beb\u4ec0\u9ebc\u5b50\u984c</li> <li>\u5148\u60f3\u7c21\u55ae\u7684\u5b50\u984c\u76ee\u7684\uff0c\u4e00\u65b9\u9762\u907f\u514d\u6f0f\u62ff\u7c21\u55ae\u66b4\u529b\u7684\u5206\u6578\uff0c\u4e00\u65b9\u9762\u53ef\u4ee5\u5e6b\u52a9\u91d0\u6e05\u984c\u76ee</li> <li>\u5206\u597d\u5e7e\u8f2a\u7b2c\u4e00\u8f2a\u62ff\u4e00\u4e9b\u6703\u7684\u5b50\u984c\u7b2c\u4e8c\u8f2a\u4ed4\u7d30\u60f3\u904e</li> <li>\u90a3\u6211\u5148\u628a\u5168\u90e8\u7684\u984c\u76ee\u90fd\u770b\u5b8c\u518d\u4f86\u62ff\u5b50\u984c</li> </ul>"},{"location":"main/codebook/#dp","title":"DP","text":"<ul> <li>\u63db\u4e00\u7a2e\u72c0\u614b\u5b9a\u7fa9</li> <li>\u5f9e\u524d\u5f80\u5f8c\u8f49\u79fb</li> <li>\u6b63\u7740\u505a\u4e0d\u60f3\uff0c\u90a3\u53cd\u9019\u505a</li> </ul>"},{"location":"main/codebook/#_4","title":"\u6a21\u677f","text":"<pre><code>#pragma GCC optimize(\"O3\", \"unroll-loops\")\n\nunsigned seed = chrono::steady_clock::now().time_since_epoch().count();\nmt19937_64 rng(seed);\nuniform_int_distribution&lt;int&gt; dis(1,1000000);\n\nlong long RandomNumber(){\n    return dis(rng);\n}\n</code></pre>"},{"location":"main/codebook/#flow","title":"flow","text":""},{"location":"main/codebook/#_5","title":"\u6a21\u677f","text":""},{"location":"main/codebook/#dinic","title":"dinic","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = (1LL &lt;&lt; 60);\nconst int M = 1e9 + 7;\n\nint n;\n\nstruct dinic {\n    struct Edge {\n        int u, v;\n        int cap;\n    };\n\n    int n, m, s, t;\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;Edge&gt; edges;\n    vector&lt;int&gt; lv;\n    vector&lt;int&gt; cur;\n    vector&lt;int&gt; side;\n    vector&lt;int&gt; ans;\n\n    void init () {\n        n = m = 0;\n        G.clear ();\n        edges.clear ();\n    }\n\n    int add_node () {\n        n++;\n        G.pb({});\n        return n - 1;\n    }\n\n    void add_edge (int u, int v, int cap) {\n        edges.pb({u, v, cap});\n        G[u].pb(m++); // 0\n        edges.pb({v, u, 0LL});\n        G[v].pb(m++); // 1\n    }\n\n    void cut (int u) {\n        side[u] = 1;\n        ans.pb(u);\n        for (auto i : G[u]) {\n            if (!side[edges[i].v] &amp;&amp; edges[i].cap &gt; 0) {\n                cut (edges[i].v);\n            }\n        }\n    }\n\n    bool bfs () {\n        lv = vector&lt;int&gt; (n, -1);\n        queue&lt;int&gt; q;\n        lv[s] = 0;\n        q.push (s);\n        while (q.size()) {\n            int u = q.front ();\n            q.pop ();\n\n            for (int i = 0; i &lt; G[u].size(); i++) {\n                Edge &amp;e = edges[G[u][i]];\n                if (e.cap &gt; 0 &amp;&amp; lv[e.v] &lt; 0) {\n                    lv[e.v] = lv[u] + 1;\n                    q.push (e.v);\n                }\n            }\n        }\n        return lv[t] &gt;= 0;\n    }\n\n    int dfs (int u, int f) {\n        if (u == t || f == 0) return f;\n        int res = 0;\n        for (auto &amp;i = cur[u]; i &lt; G[u].size(); i++) {\n            Edge &amp;e = edges[G[u][i]];\n            Edge &amp;rev = edges[G[u][i] ^ 1];\n            if (e.cap &gt; 0 &amp;&amp; lv[u] + 1 == lv[e.v]) {\n                int x = dfs (e.v, min (f, e.cap));\n                if (x &gt; 0) {\n                    e.cap -= x;\n                    rev.cap += x;\n                    f -= x;\n                    res += x;\n                    if (f == 0) break;\n                }\n            }\n        }\n        return res;\n    }\n\n    int max_flow (int _s, int _t) {\n        s = _s, t = _t;\n        int res = 0;\n        while (bfs()) {\n            cur = vector&lt;int&gt; (n, 0);\n            while (true) {\n                int f = dfs (s, INF);\n                if (f == 0) break;\n                res += f;\n            }\n        }\n        return res;\n    }\n\n    void min_cut () {\n        side = vector&lt;int&gt;(n, 0);\n        cut (s);\n        cout &lt;&lt; ans.size() &lt;&lt; \"\\n\";\n        for (auto ele : ans) cout &lt;&lt; ele &lt;&lt; \"\\n\";\n    }\n\n    void print (int flow) {\n        vector&lt;Edge&gt; ans;\n        for (int i = 1; i &lt; edges.size(); i += 2) {\n            auto [u, v, cap] = edges[i];\n            if (cap == 0) continue;\n            ans.pb({u, v, cap});\n            //cout &lt;&lt; \"u:\" &lt;&lt; v &lt;&lt; \",v:\" &lt;&lt; u &lt;&lt; \",cap:\" &lt;&lt; cap &lt;&lt; \"\\n\";\n        }\n        cout &lt;&lt; n &lt;&lt; \" \" &lt;&lt; flow &lt;&lt; \" \" &lt;&lt; ans.size() &lt;&lt; \"\\n\";\n        for (auto [u, v, cap] : ans) cout &lt;&lt; v &lt;&lt; \" \" &lt;&lt; u &lt;&lt; \" \" &lt;&lt; cap &lt;&lt; \"\\n\";\n    }\n}flow;\n\nvoid solve () {\n    int n, m, s, t;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;\n    flow.init ();\n    for (int i = 1; i &lt;= n; i++) flow.add_node();\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, cap;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; cap;\n        flow.add_edge(u, v, cap);\n    }\n    int f = flow.max_flow(s, t);\n    flow.min_cut();\n\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        //init(); \n        solve();\n    }\n} \n</code></pre>"},{"location":"main/codebook/#min-cost-max-flow","title":"min cost max flow","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = (1LL &lt;&lt; 60);\nconst int M = 1e9 + 7;\n\nint n;\n\nstruct dinic {\n    struct Edge {\n        int u, v, cap, c;\n    };\n\n    int n, m, s, t;\n    vector&lt;vector&lt;int&gt;&gt; G;\n    vector&lt;Edge&gt; edges;\n    vector&lt;int&gt; lv;\n    vector&lt;int&gt; cur;\n\n    void init () {\n        n = m = 0;\n        G.clear ();\n        edges.clear ();\n    }\n\n    int add_node () {\n        n++;\n        G.pb({});\n        return n - 1;\n    }\n\n    void add_edge (int u, int v, int cap, int w) {\n        edges.pb({u, v, cap, w});\n        G[u].pb(m++); // 0\n        edges.pb({v, u, 0LL, -w});\n        G[v].pb(m++); // 1\n    }\n\n    pii flow (int _s, int _t) {\n        s = _s, t = _t;\n        int fl, cost;\n        fl = cost = 0;\n        int cnt = 0;\n        while (true) {\n            vector&lt;int&gt; dis = vector&lt;int&gt;(n, INF);\n            vector&lt;int&gt; inq = vector&lt;int&gt;(n, 0);\n            vector&lt;int&gt; pre = vector&lt;int&gt;(n, -1);\n            vector&lt;int&gt; preL = vector&lt;int&gt;(n, -1);\n            dis[s] = 0;\n            queue&lt;int&gt; q;\n            q.push(s);\n            while (q.size()) {\n                int u = q.front(); q.pop();\n                inq[u] = 0;\n                for ( int i = 0 ; i &lt; (int)G[u].size() ; i++) {\n                    int v = edges[G[u][i]].v;\n                    int w = edges[G[u][i]].c;\n                    int fw = edges[G[u][i]].cap;\n\n                    if (fw &gt; 0 &amp;&amp; dis[v] &gt; dis[u] + w) {\n                        pre[v] = u; preL[v] = G[u][i]; // bug: preL[v] = i;\n                        dis[v] = dis[u] + w;\n                        if (!inq[v]) {\n                            inq[v] = 1;\n                            q.push(v);\n                        }\n                    }\n                }\n            }\n\n            if (dis[t] == INF) break;\n            int tf = INF;\n            int u, l;\n            for (int v = t; v != s ; v = u ) {\n                u = pre[v]; l = preL[v];\n                tf = min(tf, edges[l].cap);\n            }\n\n            for (int v = t, u, l ; v != s ; v = u ) {\n                u = pre[v]; l = preL[v];\n                edges[l].cap -= tf;\n                edges[l ^ 1].cap += tf;\n            }\n\n            cost += tf * dis[t];\n            fl += tf;\n        }\n        return {fl, cost};\n    }\n\n}flow;\n\nvoid solve () {\n    int n, m, s, t;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;\n    flow.init ();\n    for (int i = 1; i &lt;= n; i++) flow.add_node();\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, cap, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; cap &gt;&gt; w;\n        flow.add_edge(u, v, cap, w);\n    }\n    auto [f, cost] = flow.flow (s, t);\n    cout &lt;&lt; f &lt;&lt; \" \" &lt;&lt; cost &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        //init(); \n        solve();\n    }\n} \n</code></pre>"},{"location":"main/codebook/#algo","title":"algo","text":""},{"location":"main/codebook/#min-cut","title":"min cut","text":""},{"location":"main/codebook/#_6","title":"\u7406\u8ad6","text":"<ul> <li>\u5207\u4e0b\u53bb\u7684\u908a\u6709\u5f9e \\(\\texttt{s}\\) \u6d41\u5411 \\(\\texttt{t}\\) \u7684 \\(\\texttt{cap}\\) \u548c</li> <li>\\(\\texttt{max flow = min cut}\\)</li> </ul>"},{"location":"main/codebook/#min-cut_1","title":"\u8f38\u51fa\u4e00\u7d44 min cut","text":"<ul> <li>\u8dd1\u5b8c \\(\\texttt{dinic}\\) \uff0c \u8dd1\u4e0b\u9762\u9019\u4efd \\(\\texttt{code}\\) \uff0c\u8d70 \\(s\\) \u5f80\u5916\u8d70\u672a\u6d41\u6eff\u7684 \\(\\texttt{edge}\\) </li> <li>\u679a\u8209\u908a\uff0c\u6aa2\u67e5\u6bcf\u689d\u908a \\(u,v\\)  \u7684\u72c0\u6cc1\uff0c\u82e5 \\(u\\) \u5c6c\u65bc \\(s\\) \u800c \\(v\\) \u5c6c\u65bc \\(t\\) \u5373\u70ba\u6240\u6c42</li> </ul> <pre><code>bool side[MAXN];\nvoid cut(int u) {\n    side[u] = 1;\n    for (int i : G[u]) {\n        if (!side[edges[i].v] &amp;&amp; edges[i].cap) {\n            cut(edges[i].v);\n        }\n    }\n}\n</code></pre>"},{"location":"main/codebook/#_7","title":"\u4e8c\u5206\u5716","text":"<ul> <li>capacity \u90fd\u662f 1</li> </ul>"},{"location":"main/codebook/#_8","title":"\u6700\u5c0f\u9ede\u8986\u84cb","text":""},{"location":"main/codebook/#_9","title":"\u8f38\u51fa\u7b54\u6848","text":"<ul> <li>\u5de6\u908a\u8ddf \\(\\texttt{min cut}\\) \u540c \\(\\texttt{t}\\) \u5074\u7684\u9ede</li> <li>\u53f3\u908a\u8ddf \\(\\texttt{min cut}\\) \u540c \\(\\texttt{s}\\) \u5074\u7684\u9ede</li> </ul>"},{"location":"main/codebook/#_10","title":"\u6700\u5927\u7368\u7acb\u96c6","text":"<ul> <li>\u6700\u5927\u7368\u7acb\u96c6 \\(+\\) \u6700\u5c0f\u9ede\u8986\u84cb \\(=n\\)</li> <li>\\(\\begin{cases} \u6700\u5927\u7368\u7acb\u96c6: \u4e00\u500b\u908a\u6700\u591a\u9078\u4e00\u500b \\\\ \u6700\u5c0f\u9ede\u8986\u84cb: \u4e00\u500b\u908a\u81f3\u5c11\u9078\u4e00\u500b \\end{cases}\\)</li> <li>\\(\\texttt{proof}\\)<ul> <li>\u4e00\u500b\u908a\u4e0a\u6700\u591a\u53ea\u6709\u4e00\u500b\u6700\u5927\u7368\u7acb\u96c6</li> <li>\u4ee3\u8868\u6c92\u9078\u7684\u81f3\u5c11\u4e00\u500b</li> <li>\u7b26\u5408\u6700\u5c0f\u8986\u84cb\u5b9a\u7fa9</li> </ul> </li> </ul>"},{"location":"main/codebook/#_11","title":"\u5e36\u6b0a\u6700\u5927\u7368\u7acb\u96c6","text":"<ul> <li>\u8dd1 \\(\\texttt{min cost max flow}\\) \u5373\u53ef</li> </ul>"},{"location":"main/codebook/#dag","title":"DAG \u6700\u5c0f\u9ede\u8986\u84cb","text":"<ul> <li>\u6700\u5c11\u9700\u8981\u591a\u5c11\u689d\u8def\u5f91\u624d\u53ef\u4ee5\u84cb\u4f4f\u6240\u6709\u7684\u9ede\uff0c\u4e14\u4efb\u5169\u689d\u8def\u5f91\u4e0d\u80fd\u6709\u5171\u901a\u7684\u9ede</li> <li>\u4e0d\u91cd\u758a\u8def\u5f91\u6578 \\(+\\) \u8def\u5f91\u9577\u7e3d\u548c \\(=n\\)</li> <li>\u6211\u60f3\u8b93\u4e0d\u91cd\u758a\u8def\u5f91\u6578\u6700\u5c0f\uff0c\u5c31\u662f\u60f3\u8b93\u8def\u5f91\u5e38\u7e3d\u548c\u6700\u5c0f</li> <li>\u8def\u5f91\u9078\u597d\u5f8c\u6bcf\u500b\u9ede\u7684 \\(\\texttt{in degree}\\) \u8ddf \\(\\texttt{out degree}\\) \u6700\u591a\u5c31\u662f \\(\\texttt{1}\\)</li> <li>\u4e00\u500b\u5339\u914d\u5c31\u662f\u4e00\u500b\u8def\u5f91\u9577 \\(+1\\) \uff0c\u6211\u60f3\u8b93\u8def\u5f91\u9577\u8d8a\u591a\u8d8a\u597d\uff0c\u76f8\u7576\u65bc\u8981\u8b93\u5339\u914d\u6700\u5927</li> <li>\\(\\Rightarrow\\) \u4e8c\u5206\u5716\u6700\u5927\u5339\u914d</li> </ul>"},{"location":"main/codebook/#_12","title":"\u6709\u5411\u7121\u5411","text":"<ul> <li>\u4e0d\u7ba1\u4ec0\u9ebc\u984c\u578b\uff0c\u7121\u5411\u5f9e \\(u \\rightarrow v\\) \u548c\u5f9e \\(v \\rightarrow u\\) \u90fd\u662f\u7368\u7acb\u7684\u4e5f\u5c31\u662f\u4f60\u7e3d\u5171\u6703\u770b\u5230 2 + 2 = 4 \u689d</li> <li> <p>\u5c0d\u65bc \\(\\texttt{min cut max flow}\\) \u8f38\u51fa\u90a3\u4e9b\u908a\u6709\u7528\u5230</p> <ul> <li>\u6709\u5411: \u5c0d\u65bc \\(m\\) \u689d\u908a\u6aa2\u67e5</li> <li>\u7121\u5411: \u4ed6\u53ea\u6703\u7528\u5176\u4e2d\u4e00\u689d\u908a\uff0c\u6240\u4ee5\u5c31\u770b\u90a3\u5169\u689d\u908a\u6bd4\u8f03\u5c0f\u7684(\u6d41\u6bd4\u8f03\u591a\u51fa\u53bb)\u7684\u53cd\u5411\u908a</li> <li></li> </ul> </li> <li> <p>\u7121\u5411\u5716\uff0c\u5c0d\u65bc\u4e00\u822c \\(\\texttt{flow}\\) \u6b63\u53cd\u4e92\u76f8\u5e95\u6d88</p> <ul> <li></li> </ul> </li> </ul>"},{"location":"main/codebook/#pbds","title":"pbds","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#include &lt;bits/extc++.h&gt;\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate &lt;typename T&gt;\nusing pbds = tree&lt;T, null_type, std::less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;\n\n\nsigned main () {\n    pbds&lt;int&gt; st;\n    st.insert(3);\n    st.insert(7);\n    int k = 2;\n    cout &lt;&lt; *st.find_by_order(k - 1) &lt;&lt; \"\\n\";\n    // 0-base \u56de\u50b3\u6392\u540d\u7b2c k \u7684\u5143\u7d20, \u4e0d\u5b58\u5728\u5247 return st.end()\n    cout &lt;&lt; st.order_of_key(7) &lt;&lt; \"\\n\";\n    // strictly \u6bd4 7 \u5c0f\u7684\u5143\u7d20\u6709\u5e7e\u500b\n    st.erase(7);\n}\n</code></pre>"},{"location":"main/codebook/#hash","title":"hash","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\nconst int X = 131;\n\nint n, m;\nint x[3][maxn], inv[3][maxn], h[3][maxn], pre[3][maxn];\nstring s, t;\n\nint fastpow (int a, int b) {\n    int ret = 1;\n    while (b != 0) {\n        if (b &amp; 1) ret = ret * a % M;\n        a = a * a % M;\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nvoid build (string &amp;s, int p) {\n    int n = s.size();\n    x[p][0] = 1;\n    for (int i = 1; i &lt; n; i++) {\n        x[p][i] = x[p][i - 1] * X % M;\n        inv[p][i] = fastpow (x[p][i], M - 2);\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        h[p][i] = (s[i] - 'a' + 1) * x[p][i] % M;\n        pre[p][i] = (pre[p][i - 1] + h[p][i]) % M;\n    }\n}\n\nint query (int l, int r, int p) {\n    if (l == 0) return pre[p][r];\n    return (pre[p][r] - pre[p][l - 1] + M) % M * inv[p][l] % M;\n}\n\nvoid init() {\n    cin &gt;&gt; s &gt;&gt; t;\n    n = s.size(), m = t.size();\n}\n\nvoid solve() {\n    build (s, 1);\n    build (t, 2);\n\n    int cnt = 0;\n    for (int i = 0; i + m - 1 &lt; n; i++) {\n        int l = i, r = i + m - 1;\n        if (query (l, r, 1) == query (0, m - 1, 2)) {\n            cnt++;\n        }\n    }\n\n    cout &lt;&lt; cnt &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre>"},{"location":"main/codebook/#_13","title":"\u5927\u6578","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = (1LL &lt;&lt; 60);\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nvoid initial (string &amp;a, string &amp;b) {\n    while (a.size() &lt; b.size()) a = '0' + a;\n    while (b.size() &lt; a.size()) b = '0' + b;\n}\n\nbool findMax (string &amp;a, string &amp;b) {\n    if (a &lt; b) {\n        swap (a, b);\n        return true;\n    }\n    return false;\n}\n\nbool del (string &amp;a) {\n    if (a[0] == '0') {\n        a.erase (0, 1);\n        return true;\n    }\n    return false;\n}\n\nvoid DelAllZero (string &amp;a) {\n    while (del(a)) {\n        del (a);\n    }\n}\n\nstring add (string a, string b) {\n    initial (a, b);\n    a = '0' + a;\n    b = '0' + b;\n    for (int i = a.size() - 1; i &gt;= 0; i--) {\n        int num1 = a[i] - '0';\n        int num2 = b[i] - '0';\n        if (num1 + num2 &gt; 9) {\n            a[i - 1] = a[i - 1] - '0' + 1 + '0';\n            a[i] = (num1 + num2 - 10)  + '0';\n        }\n        else a[i] = (num1 + num2) + '0';\n    }\n    del (a);\n    return a;\n}\n\nstring sub (string a, string b) {\n    initial (a, b);\n    if (a == b) return \"0\";\n    int fg = findMax (a, b);\n    for (int i = a.size() - 1; i &gt;= 0; i--) {\n        int num1 = a[i] - '0';\n        int num2 = b[i] - '0';\n        if (num1 &lt; num2) {\n            a[i - 1] = a[i - 1] - '0' - 1 + '0';\n            a[i] = (num1 - num2 + 10)  + '0';\n        }\n        else a[i] = (num1 - num2) + '0';\n    }\n    DelAllZero (a);\n    if (fg) return \"-\" + a;\n    return a;\n}\n\nstring mul (string a, string b) {\n    string res = \"0\";\n    initial (a, b);\n    findMax (a, b);\n    DelAllZero (b);\n\n    for (int i = b.size() - 1; i &gt;= 0; i--) {\n        int num1 = b[i] - '0';\n        if (i != b.size() - 1) a = a + '0';\n        for (int i = 0; i &lt; num1; i++) {\n            res = add (a, res);\n        }\n    }\n\n    DelAllZero (res);\n    return res;\n}\n\nstring div (string a, string b) {\n    initial (a, b);\n    if (a &lt; b) return \"0\";\n    DelAllZero (b);\n    string res = \"0\";\n    string restmp = \"1\";\n    string tmp = b;\n    for (int i = 0; i &lt; (a.size() - b.size()); i++) {\n        restmp += '0';\n        tmp += '0';\n    }\n\n    initial (a, b);\n    while (a &gt;= b) {\n        initial (a, tmp);\n        if (a &gt;= tmp) {\n            a = sub (a, tmp);\n            res = add (res, restmp);\n        }\n        else {\n            restmp.erase (restmp.size() - 1);\n            tmp.erase (tmp.size() - 1);\n        }\n        initial (a, b);\n    }\n\n    DelAllZero (res);\n    return res;\n}\n\nvoid run (string &amp;op, string &amp;a, string &amp;b) {\n    if (op == \"/\") cout &lt;&lt; div (a, b) &lt;&lt; \"\\n\";\n    if (op == \"*\") cout &lt;&lt; mul (a, b) &lt;&lt; \"\\n\";\n    if (op == \"+\") cout &lt;&lt; add (a, b) &lt;&lt; \"\\n\";\n    if (op == \"-\") cout &lt;&lt; sub (a, b) &lt;&lt; \"\\n\";\n}\n\n// void init () {\n\n// }\n\nvoid solve () {\n    string a, b, op;\n    cin &gt;&gt; a &gt;&gt; op &gt;&gt; b;\n    run (op, a, b);\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        //init();\n        solve();\n    }\n}\n</code></pre>"},{"location":"main/codebook/#_14","title":"\u7d44\u5408","text":""},{"location":"main/codebook/#n-m","title":"n \u7403 m \u7bb1","text":""},{"location":"main/codebook/#_15","title":"\u7403\u7570\u7bb1\u7570","text":""},{"location":"main/codebook/#_16","title":"\u6709\u7a7a\u7bb1","text":"<ul> <li>\\(m \\times m \\times ..=m^n\\)</li> </ul>"},{"location":"main/codebook/#_17","title":"\u6c92\u7a7a\u7bb1","text":"<ul> <li>\u6392\u5bb9\u539f\u7406</li> <li>\u5168 \\(-\\) \u4e00\u7bb1\u7a7a \\(+\\) \u4e8c\u7bb1\u7a7a \\(+...+\\) \\(m\\) \u7bb1\u7a7a</li> <li>\\(m^n-C^{m}_{1} \\times (m-1)^{n}+C^{m}_{2} \\times (m-2)^{n}+..+C^{m}_{m} \\times (m-m)^{n}\\) <pre><code>int F (int n, int m) {\n    int ret = 0;\n    for (int i = 0; i &lt;= m; i++) {\n        ret += ((i &amp; 1) ? -1 : 1) * fastpow(m - i, n, M) * C(m, i) % M;\n        ret = (ret % M + M) % M;\n    }\n    return ret;\n}\n</code></pre></li> </ul>"},{"location":"main/codebook/#_18","title":"\u7403\u540c\u7bb1\u540c","text":"<ul> <li>\u7b49\u540c\u65bc\u7b97\u6709\u5e7e\u500b\u9577\u5ea6\u70ba \\(m\\) \u7684\u975e\u905e\u6e1b\u6578\u5217</li> <li>\\(\\texttt{dp[i][j] = i}\\) \u9805\u7e3d\u5408\u70ba \\(\\texttt{j}\\) \u7684\u65b9\u6cd5\u6578</li> <li>\\(dp[i][j]=dp[i-1][j-1]+dp[i][j-i]\\) </li> </ul>"},{"location":"main/codebook/#_19","title":"\u7403\u540c\u7bb1\u7570","text":"<ul> <li>\u9694\u677f\u6cd5</li> <li>\\(C^{n+m-1}_{m-1}\\)</li> </ul>"},{"location":"main/codebook/#_20","title":"\u7403\u7570\u7bb1\u540c","text":"<ul> <li>\\(\\mathtt{DP}\\)</li> <li>\\(\\texttt{dp[i][j] i \u7403 j \u7d44}\\)</li> <li>\\(dp[i][j]=dp[i-1][j-1]+j\\times dp[i-1][j]\\)</li> </ul>"},{"location":"main/codebook/#_21","title":"\u74b0\u4e0a\u8272","text":"<ul> <li>\u5c07 \\(n\\) \u500b\u9ede\u93c8\u5857\u4e0a \\(k\\) \u7a2e\u984f\u8272\uff0c\u76f8\u540c\u984f\u8272\u7684\u5169\u500b\u9ede\u81f3\u5c11\u8981\u9593\u9694 \\(m\\) \u500b\u7bc0\u9ede\uff0c\u6c42\u51fa\u65b9\u6cd5\u6578</li> </ul>"},{"location":"main/codebook/#m1","title":"m=1","text":"<ul> <li>\\(\\texttt{dp[i][0/1]}\\) \u8ddf\u7b2c\u4e00\u500b\u662f\u4e0d\u540c\u984f\u8272/\u76f8\u540c</li> <li>\\(dp[i][0]=dp[i-1][0] \\times (k-2) + dp[i-1][1] \\times (k-1)\\)</li> <li>\\(dp[i][1]=dp[i-1][0]\\)</li> <li>\\(\\texttt{init: dp[1][1]=k}\\)</li> <li>\\(\\texttt{ans: dp[n][0]}\\)</li> </ul>"},{"location":"main/codebook/#m3","title":"m=3","text":"<ul> <li>\\(\\texttt{dp(i, s):}\\)  \u8003\u616e\u524d \\(\\texttt{i}\\) \u7684\u6771\u897f\uff0c\\(\\texttt{s}\\) \u6700\u5f8c\u4e09\u500b\u5206\u5225\u6709\u6c92\u6709\u8ddf\u7b2c\u4e00\u500b\u4e00\u6a23\u984f\u8272</li> <li>\\(\\texttt{s}\\) \u53ef\u80fd\u662f \\(\\texttt{000, 001, 010, 100}\\)</li> <li>\\(dp[i][000]=dp[i-1][100] \\times (k-3) + dp[i-1][000] \\times (k-4)\\)</li> <li>\\(dp[i][001]=dp[i-1][000]\\)</li> <li>\\(dp[i][010]=dp[i-1][001] \\times (k-3)\\)</li> <li>\\(dp[i][100]=dp[i-1][010] \\times (k-3)\\)</li> <li>\\(\\texttt{init: dp[3][100] = k * (k - 1) * (k - 2)}\\)</li> <li>\\(\\texttt{ans: dp[n][000]}\\)</li> </ul> <pre><code>pii ext_gcd (int a, int b) {\n    if (b == 0) {\n        return {1, 0};\n    }\n    pii p = ext_gcd(b, a % b);\n    return {p.second, p.first - (a / b) * p.second};\n}\n\nint inv (int a, int m) {\n    pii p = ext_gcd(a, m);\n    return (p.first % m + m) % m;\n}\n\nint fastpow (int a, int b, int m) {\n    int ret = 1;\n    while (b != 0) {\n        if (b &amp; 1) ret = ret * a % m;\n        a = a * a % m;\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nint prei[maxn], pinv[maxn], pref[maxn];\n\nvoid build () {\n    prei[0] = prei[1] = pinv[0] = pinv[1] = pref[0] = pref[1] = 1;\n    for (int i = 2; i &lt; maxn; i++) {\n        pref[i] = pref[i - 1] * i % M;\n        pinv[i] = (M - (M/i) * pinv[M % i] % M) % M;\n        prei[i] = prei[i - 1] * pinv[i] % M;\n    }\n} \n\nint C (int n, int k) {\n    return pref[n] * prei[k] % M * prei[n - k] % M;\n}\n\nint F (int n, int m) {\n    int ret = 0;\n    for (int i = 0; i &lt;= m; i++) {\n        ret += ((i &amp; 1) ? -1 : 1) * fastpow(m - i, n, M) * C(m, i) % M;\n        ret = (ret % M + M) % M;\n    }\n    return ret;\n}\n</code></pre>"},{"location":"main/codebook/#_22","title":"\u52d5\u614b\u7dad\u8b77\u4e2d\u4f4d\u6578","text":"<ul> <li>\u958b\u5169\u500b <code>priority_queue</code> \uff0c\u5c07\u8f38\u5165\u7684\u6578\u5b57\u5206\u5225\u5206\u6210\u5927\u5c0f\u5169\u5806 <code>p1</code> \uff0c <code>p2</code></li> <li><code>p1</code> (\u524d\u534a\u6bb5\u5c0f\u7684\u6578\u5b57)\u662f\u7531\u5927\u5230\u5c0f\uff0c <code>p2</code> (\u5f8c\u534a\u6bb5\u6578\u5b57)\u662f\u7531\u5c0f\u5230\u5927 \u9019\u6a23\u53d6 <code>p1.top()</code> \u548c <code>p2.top()</code> \u5728\u5076\u6578\u500b\u60c5\u6cc1\u5c31\u53ef\u4ee5\u53d6\u4e2d\u4f4d\u6578\u5e73\u5747</li> <li>\u6bcf\u6b21\u4e00\u6709\u6578\u5b57\u9032\u4f86\u5c31\u76f4\u63a5\u9032\u53d6 <code>p2</code> \uff0c\u5728\u57fa\u6578\u500b\u60c5\u6cc1 <code>p1</code> \u5c31\u6703\u6bd4 <code>p2</code> \u5c11 \\(1\\) \u500b</li> <li>\u8abf\u6574 <code>p1</code> <code>p2</code> \u7684 <code>size</code> \u8b93 <code>p1.top()</code> \u6216 <code>p2.top()</code> \u80fd\u53d6\u5230\u76ee\u524d\u66f4\u65b0\u5f8c\u7684\u4e2d\u4f4d\u6578</li> <li>\u5728\u57fa\u6578\u500b\u60c5\u6cc1\u53ea\u8981\u53d6 <code>p2.top()</code> \u5c31\u662f\u4e2d\u4f4d\u6578</li> </ul>"},{"location":"main/codebook/#sample-input","title":"sample input","text":"<p>\u7b2c\u4e00\u884c\u8f38\u5165\u4e00\u500b\u6b63\u6574\u6578 \\(N\\) \uff0c\u4ee3\u8868\u6578\u5217\u7684\u5927\u5c0f \u7b2c\u4e8c\u884c\u8f38\u5165 \\(N\\) \u500b\u6578\u5b57 <pre><code>6\n1 7 4 2 5 9\n</code></pre></p>"},{"location":"main/codebook/#sample-output","title":"sample output","text":"<p>\u8f38\u51fa\u4e2d\u4f4d\u6578 <pre><code>1 4 4 3 4 4.5\n</code></pre></p>"},{"location":"main/codebook/#_23","title":"\u865b\u64ec\u78bc","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\nint n;\npriority_queue&lt;int&gt; p1;\npriority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; p2;\nint total=0;\nvoid maintain(int p1_size,int p2_size){\n    while(p1.size()&lt;p1_size){\n        p1.push(p2.top());\n        p2.pop();\n    }\n}\ndouble pq_push(int num){\n    total++;\n    int p1_size=total/2; //p1\u7684\u9577\u5ea6\u6703&lt;=p2\n    int p2_size=total-p1_size;\n    p2.push(num);\n    maintain(p1_size,p2_size);\n    if(total%2) return p2.top();\n    else return (p1.top()+p2.top())/2.0;\n}\nsigned main(){\n    cin&gt;&gt;n;\n    int tmp;\n    for(int i=0;i&lt;n;i++){\n        cin&gt;&gt;tmp;\n        cout&lt;&lt;double(pq_push(tmp))&lt;&lt;\" \";\n    }\n}\n</code></pre>"},{"location":"main/codebook/#_24","title":"\u7be9\u6cd5","text":"<pre><code>const int maxn = 1e6 + 5;\nbitset&lt;maxn&gt; p;\nvoid seive () {\n    p.set();\n    p[0] = p[1] = false;\n    for (int i = 2; i &lt; maxn; i++) {\n        if (p[i]) prime.pb(i);\n        for (int j = 0; prime[j] * i &lt; maxn; j++) {\n            p[prime[j] * i] = false;\n            if (i % prime[j] == 0) break;\n        } \n    }\n}\n</code></pre>"},{"location":"main/codebook/#dijkstra","title":"dijkstra","text":"<pre><code>vector&lt;int&gt; dijkstra (int start, int G) {\n    vector&lt;int&gt; dis(n + 1, INF);\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n    pq.push({0, start});\n    while (pq.size()) {\n        auto [x, u] = pq.top();\n        pq.pop();\n        if (dis[u] != INF) continue;\n        dis[u] = x;\n        for (auto [v, w] : G[u]) {\n            pq.push({w + dis[u], v});\n        }\n    }\n    return dis;\n}\n</code></pre>"},{"location":"main/codebook/#spfa","title":"spfa","text":"<ul> <li>\u5982\u679c\u4e0a\u4e00\u8f2a\u67d0\u4e00\u500b\u9ede\u7684\u8ddd\u96e2\u6c92\u6709\u66f4\u65b0,\u90a3\u9019\u4e00\u8f2a\u4e5f\u6c92\u5fc5\u8981 relax \u4ed6</li> <li>\u628a\u8ddd\u96e2\u6709\u66f4\u65b0\u7684\u7bc0\u9ede\u4e1f\u9032 queue \u88e1,\u7136\u5f8c\u4e00\u76f4\u62ff queue \u88e1\u7684\u7bc0\u9ede\u51fa\u4f86 relax <pre><code>void SPFA (int start) {\n    vector&lt;int&gt; dis(n + 1, INF);\n    vector&lt;int&gt; inq(n + 1, INF);\n    vector&lt;int&gt; cnt(n + 1);\n    queue&lt;int&gt; q;\n    while (q.size()) {\n        int u = q.front();\n        q.pop();\n        cnt[u]++;\n        if (cnt[u] == n) {\n            // negative cycle\n        }\n        inq[u] = false;\n        for (auto [v, w] : G[u]) {\n            dis[u] = dis[v] + w;\n            if (!inq[v]) {\n                inq[v] = true;\n                q.push(v);\n            }\n        }\n    }\n}\n</code></pre></li> </ul>"},{"location":"main/codebook/#_25","title":"\u77e9\u9663\u5feb\u901f\u51aa","text":"<pre><code>Matrix operator* (const Matrix &amp;A, const Matrix &amp;B) {\n    Matrix C(n, vector&lt;int&gt;(n));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            for (int k = 0; k &lt; n; k++) {\n                C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % M;\n            }\n        }\n    }\n    return C;\n}\n\nMatrix pow(Matrix A, int k) {\n    // \u4e0d\u80fd &amp;A \u6ce8\u610f!!!(\u6703\u6539\u5230 A)\n    int n = A.size();\n    Matrix ret(n, vector&lt;int&gt;(n));\n    for (int i = 0; i &lt; n; i++) ret[i][i] = 1;\n    // \u521d\u59cb\u5316\u70ba\u55ae\u4f4d\u77e9\u9663\n    while (k &gt; 0) {\n        if (k &amp; 1) ret = ret * A;\n        A = A * A;\n        k &gt;&gt;= 1;\n    }\n    return ret;\n}\n</code></pre>"},{"location":"main/codebook/#_26","title":"\u7687\u540e","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = (1LL &lt;&lt; 60);\nconst int maxn = 30;\nconst int M = 1e9 + 7;\n\nint n, m;\nint c[100], qa[100], qb[100], ca[100], cb[100], ans;\n\nvoid dfs (int Q, int C, int i) {\n    if (i == n + m) {\n        ans++;\n        return;\n    }\n    if (C) {\n        for (int j = 0; j &lt; n + m; j++) {\n            if (c[j]) continue;\n            if (qa[i - j + maxn] || qb[i + j]) continue;\n            c[j] = 1;\n            ca[i - j + maxn]++, cb[i + j]++; \n            // \u6ce8\u610f 29 \u884c\u4e0d\u80fd =1 \u6703 bug\n            // \u56e0\u70ba\u4e00\u500b\u659c\u5411\u53ef\u4ee5\u6709\u591a\u500b\u57ce\u5821\n            dfs (Q, C - 1, i + 1);\n            c[j] = 0;\n            ca[i - j + maxn]--, cb[i + j]--;\n            // \u6ce8\u610f 34 \u884c\u4e0d\u80fd =0 \u6703 bug\n        }\n    }\n    if (Q) {\n        for (int j = 0; j &lt; n + m; j++) {\n            if (c[j]) continue;\n            if (qa[i - j + maxn] || qb[i + j]) continue;\n            if (ca[i - j + maxn] || cb[i + j]) continue;\n            c[j] = qa[i - j + maxn] = qb[i + j] = 1;\n            dfs (Q - 1, C, i + 1);\n            c[j] = qa[i - j + maxn] = qb[i + j] = 0;\n        }\n    }\n}\n\nvoid init () {\n    cin &gt;&gt; n &gt;&gt; m;\n}\n\nvoid solve () {\n    dfs (n, m, 0);\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n}\n</code></pre>"},{"location":"main/codebook/#graph-coloring","title":"Graph Coloring","text":""},{"location":"main/codebook/#k-2","title":"k = 2","text":"<ul> <li>\u4e8c\u5206\u5716</li> </ul>"},{"location":"main/codebook/#k-3","title":"k = 3","text":"<ul> <li>\\(O(n \\times 2^n)\\) \u5217\u8209\u7b2c\u4e00\u7a2e\u7368\u7acb\u96c6</li> <li>\u5269\u4e0b\u7684\u4e8c\u5206\u5716</li> </ul>"},{"location":"main/codebook/#k-4","title":"k =4","text":"<ul> <li>\\(dp(S)=S\\)  \u662f\u5426\u53ef\u4ee5 \\(\\texttt{2-colors}\\) \u4e0a\u8272 \\(O(m \\times 2^n)\\)</li> <li>\u5217\u8209 \\(S\\) \u4f7f\u5f97 \\(\\texttt{dp(S)}\\) \u8ddf \\(\\texttt{dp(V/S)}\\) \u90fd\u662f \\(\\texttt{true}\\)</li> </ul>"},{"location":"main/codebook/#others","title":"others","text":"<ul> <li>\\(dp(S)=S\\) \u6700\u5c11\u591a\u5c11 coloring</li> <li>\\(dp(S) = \\min \\limits_{T \\in S} \\begin{cases} dp(S/T)+1 \\end{cases}\\) \u4e14 \\(T\\) \u662f\u7368\u7acb\u96c6</li> <li>\\(O(3 ^n)\\)</li> </ul>"},{"location":"main/setup/","title":"\u67b6\u8a2d\u6559\u5b78","text":""},{"location":"main/setup/#_1","title":"\u4e8b\u524d\u6e96\u5099","text":""},{"location":"main/setup/#python","title":"\u5b89\u88dd python","text":"<ol> <li> <p>\u9032\u5165 https://www.python.org </p> </li> <li> <p>\u5c07\u9f20\u6a19\u79fb\u5230 Downloads \u4e0a\u65b9 (About \u65c1\u908a)</p> </li> <li>\u9ede\u4e0b\u53bb Download For Windows \u4e0b\u9762\u7684\u90a3\u500b\u6309\u9215</li> <li>\u7136\u5f8c\u958b\u555f\u4f60\u4e0b\u8f09\u6a94\u6848</li> <li>\u52fe\u9078 Add Python 3.11.3 to Path (3.11.3 \u53ea\u662f\u6211\u73fe\u5728\u7684\u7248\u672c\uff0c\u9019\u500b\u6703\u8b8a)</li> <li>\u9ede\u64ca Install Now</li> <li>\u958b\u555f cmd \u8f38\u5165 <code>python</code> \u770b\u770b\u662f\u5426\u6210\u529f\u5b89\u88dd</li> </ol> <p>\u53c3\u8003\u5f71\u7247 : https://www.youtube.com/embed/BRhZyxMBWUI?rel=0</p>"},{"location":"main/setup/#pip","title":"\u5b89\u88dd pip","text":"<ol> <li>\u5f9e\u9019\u88e1\u4e0b\u8f09 <code>get-pip.py</code> (ctrl + S \u4e0b\u8f09)</li> <li>\u958b\u555f cmd \u9032\u5165\u5230\u8207 <code>get-pip.py</code> \u540c\u6a23\u7684\u8def\u5f91</li> <li>\u6253\u4e0a <code>python get-pip.py</code> \u5c31\u5b8c\u6210\u4e86</li> </ol> <p>\u53c3\u8003\u5f71\u7247 : https://www.youtube.com/watch?v=_1B4hckew6Q</p>"},{"location":"main/setup/#mkdocs","title":"\u5b89\u88dd mkdocs","text":"<p>\u5728 cmd \u6253\u4e0a <pre><code>pip install --user mkdocs-material\n</code></pre></p> <p>\u63a5\u8457\u5728\u4f60\u60f3\u8981\u7684\u5730\u65b9\u5efa\u7acb\u4e00\u500b\u8cc7\u6599\u593e(\u4e4b\u5f8c\u7a31\u4e4b\u70ba\u6839\u76ee\u9304)\uff0c\u5728\u6839\u76ee\u9304\u958b\u555f cmd \u6253\u4e0a</p> <pre><code>mkdocs new .\n</code></pre> <p>\u7136\u5f8c\u627e\u5230\u5728\u6839\u76ee\u9304\u88e1\u9762\u7684 <code>mkdocs.yml</code> \u958b\u555f\u6a94\u6848\uff0c\u52a0\u5165\u4ee5\u4e0b code </p> mkdocs.yml <pre><code>site_name: yozen &amp; rah wiki\nsite_description: \nsite_author: \ncopyright: \nsite_url: https://yozen0405.github.io/wiki/\nrepo_url: 'https://github.com/yozen0405/wiki/'\nrepo_name: yozen0405.github.io\nedit_uri: 'https://raw.githubusercontent.com/yozen0405/wiki/main/docs/'\n\ntheme: \n    name: material\n    language: zh-TW\n    search_index_only: true\n    palette:\n      - media: \"(prefers-color-scheme: light)\"\n        scheme: default\n        toggle:\n          icon: material//weather-sunny\n          name: Switch to dark mode\n      - media: \"(prefers-color-scheme: dark)\"\n        primary: indigo\n        scheme: slate\n        toggle:\n          icon: material/weather-night\n          name: Switch to light mode\n    features:\n      - announce.dismiss\n      - content.action.view\n      - content.code.annotate\n      - content.code.copy\n      - content.tooltips\n      - navigation.footer\n      - navigation.tabs\n      - navigation.expand\n      - search.highlight\n      - search.share\n      - search.suggest\n      - toc.follow\n    font: \n      text: Roboto\n      code: Roboto Mono\n\nplugins:\n  - search:\n      jieba_dict: user_dict.txt\n\nicon:\n    admonition:\n      note: octicons/tag-16\n      abstract: octicons/checklist-16\n      info: octicons/info-16\n      tip: octicons/squirrel-16\n      success: octicons/check-16\n      question: octicons/question-16\n      warning: octicons/alert-16\n      failure: octicons/x-circle-16\n      danger: octicons/zap-16\n      bug: octicons/bug-16\n      example: octicons/beaker-16\n      quote: octicons/quote-16\n\nmarkdown_extensions:\n  - pymdownx.critic\n  - pymdownx.mark\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n  - abbr\n  - pymdownx.snippets\n  - def_list\n  - tables\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - meta\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.inlinehilite\n  - pymdownx.caret \n  - pymdownx.mark \n  - pymdownx.tilde \n  - pymdownx.arithmatex:\n      generic: true\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - attr_list\n  - md_in_html\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.tabbed:\n      alternate_style: true \n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:materialx.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n  - footnotes\n  - toc:\n      permalink: \u00b6\n\nextra_css: \n  - _static/css/extra.css\n\nextra_javascript: \n  - _static/javascripts/mathjax.js\n  - https://polyfill.io/v3/polyfill.min.js?features=es6\n  - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\n  - _static/javascripts/open_new_tab.js\n\nextra:\n  analytics:\n    provider: google\n    property: G-3D8H9K81B3\n\nnav:\n    - \u9996\u9801: \n        - \u7e3d\u89bd: 'index.md'\n        - \u7db2\u7ad9\u67b6\u8a2d : \n          - \u8a9e\u6cd5\u6559\u5b78: 'main/syntax.md'\n          - \u67b6\u8a2d\u6559\u5b78: 'main/setup.md'\n    - \u7a0b\u5f0f\u8cc7\u6e90 :\n      - APCS: 'cp/apcs.md'\n      - \u7af6\u7a0b:\n        - \u6240\u6709\u8cc7\u6e90:\n          - \u5b78\u7fd2\u8cc7\u6e90: 'cp/learning2.md'\n      - \u6bd4\u8cfd: \n        - \u76ee\u9304: 'cp/contest.md'\n        - TOI \u8cc7\u5967:\n          - TOI \u65b0\u624b\u540c\u597d\u6703: 'cp/contest/TOI_easy.md'\n          - TOI \u521d\u9078: 'cp/contest/TOI.md'\n          - TOI \u9078\u8a13\u6a21\u8003: 'cp/contest/TOI_M.md'\n          - TOI \u6a21\u64ec\u8cfd: 'cp/contest/TOI_mock.md'\n        - \u5b78\u79d1\u80fd\u529b\u7af6\u8cfd:\n          - \u6821\u5167\u8cfd: 'cp/contest/school.md'\n          - \u5340\u57df\u8cfd: 'cp/contest/regional.md'\n          - \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd: 'cp/contest/nhspc_mock.md'\n        - \u652f\u7dda\u6bd4\u8cfd: 'cp/contest/other.md'\n        - \u5404\u570b OI: 'cp/contest/OI.md'\n        - \u6bd4\u8cfd\u6649\u7d1a\u8def\u7dda\u5716: 'cp/contest/path.md'\n    - \u57fa\u790e\u7b97\u6cd5:\n      - Brute Force: \n        - \u6298\u534a\u679a\u8209: 'basic/brute_force/meet_in_middle.md'\n        - \u72c0\u614b\u641c\u7d22: 'basic/brute_force/state.md'\n      - \u8caa\u5fc3:\n        - \u5340\u6bb5\u554f\u984c: \n            - \u5340\u9593\u554f\u984c: 'basic/greedy/interval.md'\n            - \u6392\u7a0b\u554f\u984c: 'basic/greedy/scheduling.md'\n        - \u8cc7\u7d50\u8caa\u5fc3: 'basic/greedy/ds.md'\n        - maximum subarray: 'basic/greedy/max_subarray.md'\n        - \u96dc\u984c\u6574\u7406: 'basic/greedy/problem.md'\n      - Sorting: 'basic/sorting_algorithms.md'\n    - \u641c\u7d22\u7b97\u6cd5:\n      - \u4e8c\u5206\u641c: 'search/binary_search.md'\n      - \u96d9\u6307\u91dd: 'search/two_pointer.md'\n      - Fracturing Search: 'search/fracturing_search.md'\n    - \u8cc7\u6599\u7d50\u69cb:\n      - \u6982\u8ff0: 'ds/index.md'\n      - \u57fa\u790e\u8cc7\u6599\u7d50\u69cb:\n        - bitset\u52a0\u901f: 'ds/bitset.md'\n      - \u9032\u968e\u8cc7\u6599\u7d50\u69cb I:\n        - \u7dda\u6bb5\u6a39: 'ds/segment_tree.md'\n        - \u524d\u7db4\u548c\u6280\u5de7: 'ds/prefix.md'\n        - \u55ae\u8abf\u968a\u5217: 'ds/monotonous-stack.md'\n        - BIT: 'ds/bit.md'\n        - Sparse Table: 'ds/sparse_table.md'\n        - pb_ds: 'ds/pb_ds.md'\n        - \u984c\u76ee: 'ds/problem.md'\n      - \u9032\u968e\u8cc7\u6599\u7d50\u69cb II:\n        - Treap: 'ds/treap.md'\n        - \u6301\u4e45\u5316: 'ds/persistent.md'\n        - \u674e\u8d85\u7dda\u6bb5\u6a39: 'ds/li_chao_segment_tree.md'\n        - Memory pool: 'ds/memory_pool.md'\n    - \u5716\u8ad6:\n      - \u6a39\u8ad6: \n        - \u6a39\u76f4\u5f91: 'graph/tree_diameter.md'\n        - \u6a39\u91cd\u5fc3: 'graph/tree_centriod.md'\n        - \u63db\u6839 dp: 'graph/solving_for_all_roots.md'\n        - \u6a39 dp: 'graph/tree_dp.md'\n        - \u6a39\u58d3\u5e73: 'graph/euler_tour.md'\n        - \u500d\u589e\u6cd5\u8207 LCA: 'graph/lca.md'\n        - prufer \u5e8f\u5217: 'graph/prufer.md'\n        - \u6a39\u540c\u69cb: 'graph/tree_isomorphism.md'\n        - \u984c\u76ee:\n          - \u985e topo sort: 'graph/tree_topo_sort.md'\n          - greedy: 'graph/tree_greedy.md'\n          - \u5229\u7528 dfs \u5e8f: 'graph/dfs_order.md'\n          - \u5176\u4ed6\u985e\u578b: 'graph/other_problem.md'\n      - \u7279\u6b8a\u5716:\n        - \u4e8c\u5206\u5716: 'graph/bipartite.md'\n        - \u4e8c\u5143\u6a39: 'graph/binary_tree.md'\n        - \u6c34\u6bcd\u5716: 'graph/functional_graph.md'\n      - \u8ff4\u8def:\n        - \u6b50\u62c9\u8ff4\u8def: 'graph/euler_path.md'\n        - \u6f22\u7c73\u9813\u8ff4\u8def: 'graph/hamiltonian.md'\n      - \u555f\u767c\u5f0f\u5408\u4f75: 'graph/union_by_rank.md'\n      - \u4e26\u67e5\u96c6: 'graph/dsu.md'\n      - MST: 'graph/mst.md'\n      - \u6700\u77ed\u8def: 'graph/sp.md'\n      - Topological Sorting: 'graph/topo_sort.md'\n      - \u9032\u968e\u5716\u8ad6:\n        - \u9023\u901a\u5143\u4ef6\u5716\u8ad6: 'graph/connected_component.md'\n        - \u7db2\u8def\u6d41: 'graph/flow.md'\n    - \u6578\u5b78:\n        - \u77e9\u9663: 'math/matrix.md'\n        - \u7d44\u5408: 'math/comb.md'\n        - \u8cfd\u5c40: 'math/game_theory.md'\n        - Josephus Problem: 'math/josephus_problem.md'\n        - \u8a08\u7b97\u5e7e\u4f55: 'math/geometry.md'\n        - \u5927\u6b65\u5c0f\u6b65: 'math/bsgs.md'\n        - \u6578\u8ad6: \n          - \u56e0\u6578: 'math/facts.md'\n          - \u6a21\u904b\u7b97: 'math/mod.md'\n          - \u4e2d\u570b\u5269\u9918\u5b9a\u7406: 'math/crt.md'\n        - \u7279\u5b9a\u6578:\n          - mex: 'math/special/mex.md'\n          - \u4e2d\u4f4d\u6578: 'math/special/median.md'\n          - \u5e73\u5747\u6578: 'math/special/average.md'\n          - \u7d55\u5c0d\u773e\u6578: 'math/special/mode.md'\n    - \u5206\u6cbb\u8207\u96e2\u7dda:\n        - \u5206\u6cbb:\n            - \u57fa\u790e\u6280\u5de7:  'offline/DC.md'\n            - \u6574\u9ad4\u4e8c\u5206: 'offline/parallel-binsearch.md'\n            - CDQ \u5206\u6cbb: 'offline/cdq.md'\n        - \u96e2\u7dda\u64cd\u4f5c: 'offline/offline.md'\n        - \u83ab\u968a\u7b97\u6cd5: 'offline/mo-algo.md'\n        - \u6839\u865f\u5206\u584a: 'offline/sqrt.md'\n    - \u52d5\u614b\u898f\u5283:\n      - \u7d93\u5178\u4e3b\u984c:\n        - LIS: 'dp/lis.md'\n        - LCS: 'dp/lcs.md'\n        - \u80cc\u5305\u554f\u984c: 'dp/knapsack.md'\n      - \u4e00\u822c dp \u985e\u578b:\n        - \u5340\u9593dp: 'dp/range_dp.md'\n        - \u6578\u4f4ddp: 'dp/digit_dp.md'\n        - \u5b50\u77e9\u5f62dp: 'dp/submatrix_dp.md'\n        - \u96dc\u984c\u6574\u7406: 'dp/problem.md'\n        - \u72c0\u58d3dp: 'dp/bitmask.md'\n      - \u512a\u5316:\n        - \u659c\u7387\u512a\u5316: 'dp/convex_hull_trick.md'\n        - Aliens \u512a\u5316: 'dp/aliens.md'\n        - SOS\u512a\u5316: 'dp/sos.md'\n    - \u5b57\u4e32:\n      - Hash: 'string/hashing.md'\n      - Trie: 'string/trie.md'\n      - KMP: 'string/kmp.md'\n    - \u5404\u7a2e\u984c\u578b:\n      - \u69cb\u9020\u984c: 'problem/construct.md'\n      - \u4e92\u52d5\u984c: 'problem/interactive.md'\n      - \u96dc\u984c: 'problem/problem.md'\n    - \u5176\u4ed6:\n      - \u5c0f\u6280\u5de7:\n        - \u8a13\u7df4: 'other/practice.md'\n        - \u58d3\u5e38: 'other/constant.md'\n        - Debug: 'other/debug.md'\n        - c++\u8a9e\u6cd5\u6280\u5de7: 'other/tips.md'\n        - terminal \u7684\u4e00\u4e9b\u6307\u4ee4: 'other/cmd.md'\n      - \u5e8f\u5217\u4ea4\u63db\u554f\u984c: 'other/swap.md'\n      - \u5b57\u5178\u5e8f: 'other/lexicographic.md'\n      - \u5206\u6578\u904b\u7b97: 'other/fraction.md'\n      - \u5e73\u9762\u8ddd\u96e2: 'other/distance.md'\n      - \u9d3f\u7c60\u539f\u7406: 'other/pigeonhole_principle.md'\n      - Bitwise Problem: 'other/bitwise.md'\n      - \u62ec\u865f\u554f\u984c: 'other/bracket_problem.md'\n</code></pre> <p>and then</p> <pre><code>mkdocs serve \n</code></pre> <p>\u7136\u5f8c\u4e0a cmd \u7d66\u4f60\u7684\u7db2\u5740\u770b\u5c31\u53ef\u4ee5\u4e86</p>"},{"location":"main/setup/#github","title":"\u90e8\u5c6c\u5230 Github","text":"<p>\u53c3\u8003 : https://youtu.be/Q-YA_dA8C20</p> <pre><code>git add .\ngit commit -m 'initial commit'\ngit pull\ngit push origin main\n</code></pre>"},{"location":"main/syntax/","title":"\u8a9e\u6cd5\u6559\u5b78","text":""},{"location":"main/syntax/#note","title":"note","text":"<ul> <li> <p>\u4f7f\u7528\u7684\u6642\u5019\u7b2c\u4e00\u884c\u8ddf note \u90a3\u884c\u7684\u4e2d\u9593\u4e0d\u80fd\u7a7a\u683c</p> </li> <li> <p>\u4f46\u662f\u4e4b\u5f8c\u7368\u7acb\u7684\u6bcf\u884c\u90fd\u8981\u7a7a\u683c</p> </li> <li> <p>\u975e\u7368\u7acb\u7684\u4f8b\u5982\u7a0b\u5f0f\u78bc\uff0c\u7121\u5e8f\u6a19\u984c</p> </li> <li> <p>\u6700\u91cd\u8981\u7684\u4e00\u9ede\u5728 note \u5340\u584a\u88e1\u7684\u6771\u897f\u524d\u9762\u8981\u7a7a\u4e00\u683c tab</p> </li> </ul> \u8a9e\u6cd5\u5c55\u793a <pre><code>???+note \"\u986f\u793a\u7248\"\n    ??? note \"\u96b1\u85cf\u7248\"\n        - line1\n\n        - line2\n            - line2-1\n            - line2-2\n            - line2-3\n\n    ??? note \"full code\" \n        ```py linenums=\"1\"\n        def bubble_sort(items):\n            for i in range(len(items)):\n                for j in range(len(items) - 1 - i):\n                    if items[j] &gt; items[j + 1]:\n                        items[j], items[j + 1] = items[j + 1], items[j]\n        ```\n</code></pre> \u986f\u793a\u7248 \u96b1\u85cf\u7248 <ul> <li> <p>line1</p> </li> <li> <p>line2</p> <ul> <li>line2-1</li> <li>line2-2</li> <li>line2-3</li> </ul> </li> </ul> full code <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>\u66f4\u8a73\u7d30\u7684\u53ef\u4ee5\u53c3\u8003\u5b98\u7db2</p>"},{"location":"main/syntax/#_1","title":"\u7a0b\u5f0f\u78bc","text":""},{"location":"main/syntax/#copy-button","title":"copy button","text":"<p>\u5728\u6839\u76ee\u9304\u7684 <code>mkdocs.yml</code> \u6dfb\u52a0</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre>"},{"location":"main/syntax/#adding-title","title":"Adding title","text":"\u8a9e\u6cd5\u5c55\u793a <pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"main/syntax/#_2","title":"\u52a0\u4e0a\u884c\u865f","text":"\u8a9e\u6cd5\u5c55\u793a <pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>\u66f4\u8a73\u7d30\u7684\u53ef\u4ee5\u53c3\u8003\u5b98\u7db2</p>"},{"location":"main/syntax/#content-tabs","title":"Content tabs","text":"\u8a9e\u6cd5\u5c55\u793a <pre><code>=== \"C\"\n\n    ``` c\n    #include &lt;stdio.h&gt;\n\n    int main(void) {\n      printf(\"Hello world!\\n\");\n      return 0;\n    }\n    ```\n\n=== \"C++\"\n\n    ``` c++\n    #include &lt;iostream&gt;\n\n    int main(void) {\n      std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n      return 0;\n    }\n    ```\n</code></pre> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>\u66f4\u8a73\u7d30\u7684\u53ef\u4ee5\u53c3\u8003\u5b98\u7db2</p>"},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/","title":"\u6307\u4ee4 & \u554f\u984c","text":""},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#_1","title":"\u6307\u4ee4\u5340","text":""},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#windows-powershellcmd","title":"windows powershell(cmd)","text":""},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#_2","title":"\u5c55\u793a\u76ee\u524d\u8def\u5f91\u4f4d\u7f6e\u7684\u76ee\u9304","text":"<p>\u6253\u4e0a <pre><code>dir\n</code></pre> \u4e5f\u5c31\u662f\u5c55\u793a\u76ee\u524d\u6240\u5728\u7684 folder \u5167\u7684\u6a94\u6848\u6216 folder</p>"},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#folder","title":"\u9032\u5165folder","text":"<p>\u4ee5\u4e0b\u662f\u6a21\u677f\uff0c<code>&lt;folder&gt;</code> \u5c31\u586b\u4e0a\u4f60\u60f3\u9032\u5165\u7684 folder \u540d\u7a31</p> <p><pre><code>cd &lt;folder&gt;  \n</code></pre> \u5047\u8a2d\u6211\u4eca\u5929\u8981\u9032\u5165\u684c\u9762 <code>Desktop</code>\uff0c\u6211\u5c31\u6253\u4e0a <pre><code>cd Desktop\n</code></pre></p>"},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#folder_1","title":"\u9000\u5230\u4e0a\u4e00\u6b65\u7684folder","text":"<p>\u6253\u4e0a</p> <pre><code>cd ..\n</code></pre>"},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#folder_2","title":"\u5275\u5efa\u4e00\u500b\u65b0\u7684folder","text":"<p>\u4ee5\u4e0b\u662f\u6a21\u677f\uff0c<code>&lt;name&gt;</code> \u662f\u4f60\u60f3\u5275\u5efa\u7684 folder \u7684\u540d\u7a31</p> <pre><code>mkdir &lt;name&gt;\n</code></pre> <p>\u5047\u5982\u6211\u8981\u5275\u5efa\u4e00\u500b\u540d\u53eb <code>projects</code> \u7684 folder\uff0c\u5c31\u6253\u4e0a</p> <pre><code>mkdir projects\n</code></pre>"},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#vscode","title":"vscode","text":""},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#_3","title":"\u641c\u5c0b\u6b04","text":"<p>\u5feb\u6377\u9375 : <code>ctrl</code> + <code>shift</code> + <code>p</code></p>"},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#compile","title":"\u7de8\u8b6f(compile)","text":"<p>\u4ee5\u4e0b\u70ba\u6a21\u677f\uff0c\u7de8\u8b6f <code>&lt;\u6a94\u540d&gt;.cpp</code> \u4e26\u4e14\u5275\u5efa\u57f7\u884c\u6a94 <code>&lt;\u540d\u5b57&gt;.exe</code></p> <pre><code>g++ &lt;\u6a94\u540d&gt;.cpp -o &lt;\u540d\u5b57&gt;\n</code></pre> <p>\u8a3b : <code>&lt;\u540d\u5b57&gt;.exe</code> \u4e0d\u7ba1\u6709\u6c92\u6709\u5b58\u5728\u90fd\u53ef\u4f7f\u7528</p> <p>\u5047\u8a2d\u6211\u4eca\u5929\u8981\u7de8\u8b6f <code>main.cpp</code> \u4e26\u4e14\u5c07\u5176\u7a0b\u5f0f\u57f7\u884c\u6a94\u5f04\u5230 <code>main.exe</code></p> <pre><code>g++ main.cpp -o main\n</code></pre>"},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#code","title":"\u57f7\u884c code","text":"<p>\u4ee5\u4e0b\u70ba\u6a21\u677f</p> <pre><code>.\\&lt;\u540d\u5b57&gt;.exe\n</code></pre> <p>\u4f8b\u5982\u6211\u8981\u57f7\u884c <code>main.exe</code></p> <pre><code>.\\main.exe\n</code></pre>"},{"location":"main/images/%E6%8C%87%E4%BB%A4%20%26%20%E5%95%8F%E9%A1%8C/#_4","title":"\u5e38\u898b\u554f\u984c","text":"<p>Q : \u5982\u679c\u627e\u4e0d\u5230 bin \u8cc7\u6599\u593e ?</p> <p>A : - \u8a66\u8a66 google drive \u4e0b\u8f09\u7684\u65b9\u6848   </p> <ul> <li>\u5982\u679c\u51fa\u73fe\u985e\u4f3c\u5df2\u4e0b\u6307\u4ee4 \u53ef\u80fd\u4ee3\u8868\u4f60\u5fd8\u4e86 save</li> </ul> <pre><code>c:/mingw/bin/../lib/gcc/mingw32/6.3.0/../../../libmingw32.a(main.o):(.text.startup+0xa0): undefined reference to `WinMain@16'\ncollect2.exe: error: ld returned 1 exit status\n</code></pre> <p>Q : \u6700\u5f8c\u5728\u8f38\u5165 <code>g++ main.cpp -o main</code> \u7684\u6642\u5019\u6703\u51fa\u73fe</p> <pre><code>g++.exe: error: main.cpp: No such file or directory\ng++.exe: fatal error: no input files\n</code></pre> <p>A : </p> <ul> <li>\u4ee3\u8868\u4f60\u6a94\u540d\u53ef\u80fd\u591a\u6253\u4e86\u4e00\u500b\u7a7a\u683c\uff0c\u4f8b\u5982 <code>main.cpp</code> \u6253\u6210 <code>main. cpp</code></li> <li>\u89e3\u6c7a\u65b9\u6cd5 : \u5c07\u6a94\u6848\u91cd\u65b0\u547d\u540d\u5373\u53ef</li> </ul> <p>Q : \u5982\u679c\u6709 save \u89e3\u679c\u51fa\u73fe\u4ee5\u4e0b\u6307\u4ee4 ?\"</p> <p><pre><code>C:/mingw64/bin/../lib/gcc/x86_64-w64-       mingw32/8.1.0/../../../../x86_64-w64-mingw32/lib/../lib/libmingw32.a(lib64_libmingw32_a-crt0_c.o):crt0_c.c: (.text.startup+0x2e): undefined reference to `WinMain'\ncollect2.exe: error: ld returned 1 exit status\n</code></pre> A :</p> <ul> <li>\u4ee3\u8868\u4f60\u53ef\u80fd\u5fd8\u8a18\u6253 <code>int main ()</code>  \u6216\u662f\u6253\u932f</li> </ul> <p>Q : terminal\u90a3\u908a\u8981 run code \u6709\u66f4\u7c21\u6f54\u7684\u65b9\u5f0f\u55ce ?</p> <p>A : - \u76f4\u63a5 <code>ctrl+shift+B</code> \u5c31\u53ef\u4ee5\u4e86 (\u7de8\u8b6f+\u751fexe)</p> <p>Q : \u6bcf\u6b21\u57f7\u884c\u90fd\u8981\u9019\u6a23\u7528\u55ce?</p> <p>A :</p> <ul> <li>\u662f\u7684\uff0c\u5728\u4fee\u6539\u5b8c\u6a94\u6848\u5f8c\u8a18\u5f97 save\uff0c\u7136\u5f8c\u7de8\u8b6f\uff0c\u518d\u57f7\u884c\uff0c\u9019\u5e7e\u500b\u6b65\u9a5f\u4e0d\u53ef\u7f3a\u4e00</li> </ul> <p>Q : \u6211\u7528 <code>ctrl + F5</code> \u5075\u932f\u4ed6\u6703\u986f\u793a <code>launch.json</code> \u4e0d\u5b58\u5728 ?</p> <p>A : - \u9019\u662f\u6b63\u5e38\u7684\uff0c\u56e0\u70ba\u9019\u90e8\u5f71\u7247\u4e26\u6c92\u6709\u63d0\u5230 debugger \u7684\u90e8\u5206</p> <ul> <li>debugger \u8a73\u7d30\u90e8\u5206\u53ef\u4e0a \u9019\u7bc7\u5b98\u7db2\u8cc7\u6599 \u67e5\u770b</li> </ul> <p>Q : terminal \u51fa\u73fe \u7576 <code>C_Cpp.intelliSenseEngine</code> \u8a2d\u70ba <code>disabled</code> \u6642\uff0c\u7121\u6cd5\u57f7\u884c IntelliSense \u7684\u76f8\u95dc\u547d\u4ee4\"</p> <p>A : - \u53ef\u4ee5\u53c3\u8003\u9019\u7bc7\u535a\u5ba2</p> <p>Q : \u6a94\u6848\u57f7\u884c\u6642\u4e00\u76f4\u8df3\u51fa launch json \u8981\u600e\u9ebc\u8fa6 ?</p> <p>A : - \u770b\u8d77\u4f86\u4f60\u662f\u555f\u52d5\u5230 debug \u6a21\u5f0f\u4e86 - \u8a73\u7d30\u8cc7\u6599</p> <p>Q : \u57f7\u884c\u6307\u4ee4\u6642\uff0c\u51fa\u73fe\u4ee5\u4e0b\u932f\u8aa4</p> <p></p> <p>A : - \u5378\u8f09 <code>clangd</code> \u9019\u500b extension</p> <ul> <li> <p>\u9ede\u64ca\u5de6\u4e0a\u89d2\u7684 <code>File \u2192 Preferences \u2192 Settings</code></p> </li> <li> <p>\u5728\u641c\u5c0b\u6b04\u6253\u4e0a <code>Intellisense engine</code></p> </li> <li> <p>\u627e\u5230 <code>C_Cpp: IntelliSense Engine</code> \u5c07\u5176\u8a2d\u7f6e\u70ba <code>Default</code> (\u5982\u4e0b\u5716)</p> </li> </ul> <p></p> <p>Q : \u5728\u5f71\u7247\u4e2d 4:49 \u79d2\u6642\uff0c\u5b83\u627e\u4e0d\u5230 <code>C/C++: Edit Configurations (UI)</code> ?</p> <p>A : - \u9700\u8981\u5148\u4e0b\u8f09\u597d C/C++ \u7684 extension (\u5f71\u7247\u4e2d\u7684 4:27) \uff0c\u624d\u6709\u8fa6\u6cd5\u627e\u5230</p> <ul> <li>\u53c3\u8003\u8cc7\u6599</li> </ul>"},{"location":"main/images/%E7%B6%B2%E5%9D%80%E5%80%91/","title":"\u7db2\u5740\u5011","text":""},{"location":"main/images/%E7%B6%B2%E5%9D%80%E5%80%91/#_1","title":"\u7db2\u5740\u5011","text":"<ul> <li>vscode\u4e0b\u8f09 </li> <li>mingw64\u4e0b\u8f09 (\u53ef\u81ea\u884c\u6311\u9078\u4e0b\u8f09\u65b9\u5f0f)<ul> <li>\u8def\u5f911 - google drive</li> <li>\u8def\u5f912 - sorceforge</li> </ul> </li> </ul> <p>\u5f71\u7247\u4e2d\u6e2c\u8a66\u662f\u5426\u53ef\u4ee5\u7de8\u8b6f\u7684 code</p> <pre><code># include &lt;bits/stdc++.h&gt;\nint main() {\n    std::cout &lt;&lt; \"hello world!\";\n}\n</code></pre>"},{"location":"math/bsgs/","title":"\u5927\u6b65\u5c0f\u6b65","text":"\u554f\u984c <p>\u6709\u5f0f\u5b50 \\(a^x=b \\pmod{p}\\)\uff0c\u7d66 \\(a,b\\)\uff0c\u627e\u51fa \\(x\\)</p> <p>\u8a2d \\(x=im+j\\) \u5176\u4e2d \\(m=\\sqrt{p}\\)\uff0c\u4e14 \\(1\\le i, j\\le m\\)\u3002\u6211\u5011\u5c31\u53ef\u4ee5\u5217\u51fa </p> <p>\\(a^{im+j}=b\\pmod{p}\\)</p> <p>\\(\\Rightarrow a^{j}=(a^{-m})^i b\\pmod{p}\\)</p> <p>\u9810\u8655\u4ee5\u6240\u6709 \\(a^j\\) \u548c \\((a^{-m})^i\\times b\\) \u8dd1\u904e\u7684\u6240\u6709\u53ef\u80fd\uff0c\u5c31\u80fd\u627e\u5230\u76f8\u540c\u7684\u6578\uff0c\u9019\u53ef\u4ee5\u7528 map \u4e4b\u985e\u7684\u4f86\u5be6\u73fe</p> code <pre><code>int BSGS(int a, int b, int p) {\n    unordered_map&lt;int, int&gt; R;\n    int m = (int)(sqrt(p)) + 1;\n    for (int j = 0, t = 1; j &lt;= m; j++) {\n        if (R.count(t) == 0)  // \u6c92\u51fa\u73fe\u904e\n            R[t] = j;         // \u52a0\u9032\u53bb\n        t = 1ll * t * a % p;\n    }\n    int a_m = pow(a, m, p);\n    int a_m_inv = mod_inv(a_m, p);\n    for (int i = 0, t = b; i &lt;= m; i++) {\n        if (R.count(t) == 1)  // \u627e\u5230\u7b26\u5408\u7684 j\n            return i * m + R[t];\n        t = 1ll * t * a_m_inv % p;\n    }\n    return -1;  // \u627e\u4e0d\u5230 x\n}\n</code></pre>"},{"location":"math/comb/","title":"\u7d44\u5408","text":""},{"location":"math/comb/#_1","title":"\u7d44\u5408\u6578\u8a08\u7b97","text":""},{"location":"math/comb/#_2","title":"\u4e00\u89bd","text":"<ul> <li> <p>\u7b54\u6848\u4e0d\u505a mod</p> <ul> <li>\\(10^6\\) \u6b21\u67e5\u8a62 \\(n,k\\le 64\\) \u2192 \u66b4\u529b\u5efa\u8868</li> </ul> </li> <li> <p>\u7b54\u6848 mod \\(P\\) \uff0c \\(P\\) \u662f\u8cea\u6578</p> <ul> <li>\\(10^6\\) \u6b21\u67e5\u8a62 \\(n,k\\le 10^6,P=10^9+7\\) \u2192 \u6a21\u9006\u5143\u5efa\u8868</li> <li>\\(10^6\\) \u6b21\u67e5\u8a62 \\(n\\le 10^9, k\\le 30,P=10^9+7\\) \u2192 \u4e58\u6cd5 + \u6a21\u9006\u5143</li> <li>\\(10^5\\) \u6b21\u67e5\u8a62 \\(n,k\\le 10^{18},P\\le 10^6\\) \u2192 Lucas \u5b9a\u7406</li> </ul> </li> </ul>"},{"location":"math/comb/#_3","title":"\u4e00\u3001\u66b4\u529b\u5efa\u8868","text":"<p>\u7bc4\u570d : </p> <ul> <li>\u7b54\u6848\u4e0d\u505a mod\uff0c\\(10^6\\) \u67e5\u8a62\uff0c\\(n,k\\le 64\\)</li> </ul> <p>\u7b2c \\(n\\) \u500b\u6771\u897f\u62ff or \u4e0d\u62ff\uff0c\u5f97 \\(C^n_k=C^{n-1}_{k-1}+C^{n-1}_k\\)</p> code <pre><code>void build() {\n    C[0][0] = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= i; j++) {\n            if (j == 0) C[i][j] = 1;\n            else C[i][j] = C[i - 1][j] + C[i - 1][j - 1];\n        }\n    }\n}\n</code></pre>"},{"location":"math/comb/#_4","title":"\u4e8c\u3001\u6a21\u9006\u5143\u5efa\u8868","text":"<p>\u7bc4\u570d : \u7b54\u6848 mod \u8cea\u6578\uff0c\\(10^6\\) \u6b21\u67e5\u8a62 \\(n,k\\le 10^6,P=10^9+7\\)</p> \u63a8\u5c0e\u8f49\u79fb\u5f0f <p>\u4ee4 \\(m=k\\times i + r\\)\uff0c\u5176\u4e2d \\(k = \\left\\lfloor \\frac{m}{i} \\right\\rfloor,r = m \\bmod i\\)\uff0c\u5247</p> \\[ \\begin{align*} &amp; \\implies &amp; 0          &amp; \\equiv k \\cdot i + r   &amp; \\mod m \\\\ &amp; \\iff &amp; r              &amp; \\equiv -k \\cdot i      &amp; \\mod m \\\\ &amp; \\iff &amp; r \\cdot i^{-1} &amp; \\equiv -k              &amp; \\mod m \\\\ &amp; \\iff &amp; i^{-1}         &amp; \\equiv -k \\cdot r^{-1} &amp; \\mod m \\end{align*} \\] code <pre><code>long long pre[MAXN];   // i! % m\nlong long inv[MAXN];   // i \u5c0d m \u6a21\u9006\u5143\nlong long prei[MAXN];  // i! \u5c0d m \u7684\u6a21\u9006\u5143\n\nvoid build(int n) {\n    pre[1] = pre[0] = 1, inv[1] = inv[0] = 1, prei[1] = prei[0] = 1;\n    for (int i = 2; i &lt;= n; i++) {\n        pre[i] = pre[i - 1] * i % M;\n        inv[i] = (M - M / i * inv[M % i] % M) % M;\n        prei[i] = prei[i - 1] * inv[i] % M;\n    }\n}\n\nint C(int n, int k) {\n    return pre[n] * prei[k] % M * prei[n - k] % M;\n}\n</code></pre>"},{"location":"math/comb/#_5","title":"\u4e09\u3001\u4e58\u6cd5 + \u6a21\u9006\u5143","text":"<p>\u7bc4\u570d: \\(10^6\\) \u6b21\u67e5\u8a62 \\(n\\le 10^9, k\\le 30,P=10^9+7\\) </p> \\[ C^n_k = \\frac{n \\times (n - 1) \\times \\ldots \\times (n - k + 1)}{1 \\times 2 \\times \\ldots \\times k} \\] <p>\u4e00\u9805\u4e00\u9805\u4e58\u5373\u53ef\uff0c\u9664\u6cd5\u90e8\u5206\u9700\u4f7f\u7528\u6a21\u9006\u5143</p> <ul> <li> <p>\u6cd51: </p> <ul> <li>\\(A =  n \\times (n - 1) \\times \\ldots \\times (n - k + 1) \\mod{P}\\)</li> <li>\\(B = (k!) \\mod{P}\\)</li> <li>\\((A / B) \\mod{P} = A \\times \\texttt{inv}(B) \\mod{P}\\)</li> <li>\u6240\u4ee5\u53ea\u9700\u8981 \\(O(k)\\) \u53bb\u8a08\u7b97 \\(A,B\\) \u7136\u5f8c\u53d6 \\(\\texttt{inv}(B)\\) \u5373\u53ef\uff0c\u7e3d\u8907\u96dc\u5ea6 \\(O(k+\\log P)\\)</li> </ul> </li> <li> <p>\u6cd52:</p> <ul> <li>\\(n/1 \\times (n-1) / 2 \\times (n-2) / 3 \\times \\ldots \\times (n-i+1) / i\\)</li> <li>\u4e5f\u53ef\u4ee5\u8aaa\u662f\u5728\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u300c\u6a6b\u8457\u8d70\u300d</li> <li>\u6bcf\u9805\u90fd\u53d6\u6a21\u9006\u5143\uff0c\u7e3d\u8907\u96dc\u5ea6 \\(O(k\\log P)\\)</li> </ul> </li> </ul> Atcoder abc156 D - Bouquet <p>\u6709 \\(n\\) \u500b\u4e0d\u540c\u7684\u82b1\uff0c\u8981\u6311\u5176\u4e2d\u975e \\(0\\) \u500b\u51fa\u4f86\uff0c\u4f46\u4e0d\u80fd\u6311 \\(a\\) \u500b\u6216 \\(b\\)  \u500b</p> <p>\\(n\\le 10^9,a,b\\le 10^5\\)</p> \u601d\u8def <p>\u7b54\u6848\u70ba \\(2^n-1-\\binom{n}{a}-\\binom{n}{b}\\)</p>"},{"location":"math/comb/#lucas","title":"\u56db\u3001Lucas \u5b9a\u7406","text":"<p>\u7bc4\u570d : </p> <ul> <li> <p>\u7b54\u6848 mod \u8cea\u6578\uff0c\\(10^5\\) \u6b21\u67e5\u8a62 \\(n,k\\le 10^{18},P\\le 10^6\\)</p> </li> <li> <p>\u7b54\u6848 mod \u5408\u6578\uff0c\\(n \\le 10^9, k=30, M \\approx 10^9\\)</p> <ul> <li>\u4e2d\u570b\u5269\u9918\u5b9a\u7406\u5206\u89e3\u51fa\u8cea\u6578\uff0c\u7136\u5f8c\u5957\u7528 Lucas \u5b9a\u7406<sup>2</sup></li> </ul> </li> </ul> \\[ C^n_m\\equiv C^{n \\space \\text{mod}\\space p}_{m \\space \\text{mod}\\space p}\\cdot C^{\\lfloor n/p\\rfloor}_{\\lfloor m/p \\rfloor} \\pmod{p} \\] <p>\u4f8b\u5982\u6211\u5011\u8981\u6c42 \\(C^5_2 \\pmod{2}\\)\uff0c\u90a3\u53ef\u4ee5\u5148\u5217\u51fa:</p> <p>\\(5=1\\times 2^2+0\\times 2^1+1\\times 2^0\\)</p> <p>\\(2=0\\times 2^2+1\\times 2^1 + 0\\times 2^0\\)</p> <p>\u90a3\u9ebc\u7b54\u6848\u5c31\u6703\u662f \\(C^1_0\\times C^0_1\\times C^1_0\\)\u3002\u7279\u5225\u5730\uff0c\u82e5 \\(C^n_k\\) \u7684 \\(k&gt;n\\)\uff0c\u4ee3\u8868\u5f9e \\(n\\) \u500b\u6771\u897f\u53d6\u51fa\u5927\u65bc \\(n\\) \u500b\u6771\u897f\uff0c\u986f\u7136\u662f\u4e0d\u53ef\u80fd\uff0c\u6240\u4ee5\u65b9\u6cd5\u6578\u70ba \\(0\\)</p> Lucas \u5b9a\u7406\u8b49\u660e <p>\u5047\u8a2d\u6211\u5011\u662f\u6c42 \\(C^n_m\\)\uff0c\u4ee4 \\(n=sp+q,m=tp+r\\)</p> <p>\u8003\u616e \\((1+x)^n\\) \uff0c\u5176\u4e2d \\(C^n_m\\) \u6703\u662f \\(x^m\\) \u7684\u4fc2\u6578</p> <p>\\((1+x)^n=(1+x)^{sp+q}=((1+x)^p)^s\\times (1+x)^q\\)</p> <p>\u800c\u53c8\u53ef\u4ee5\u5beb\u6210 \\((1+x^p)^s\\times (1+x)^q\\)\uff08\u6700\u4e0b\u9762\u6709\u8b49\u660e\uff09</p> <p>\\(\\Rightarrow (1+x^p)^s\\times (1+x)^q\\)</p> <p>\\(\\Rightarrow (1+C^s_1 x^p+C^s_2 x^{2p}+\\ldots)\\times(1+C^q_1 x^1 + C^q_2 x_2 + \\ldots)\\)</p> <p>\u53ef\u4ee5\u767c\u73fe \\(x^m\\) \u7684\u4fc2\u6578\u5c31\u6703 \\(=\\) \\(x^{tp}\\) \u7684\u4fc2\u6578 \\(\\times\\) \\(x^r\\) \u7684\u4fc2\u6578\uff0c\u4e5f\u5c31\u662f \\(C^n_m=C^s_t\\times C^q_r\\)</p> <p>\u8ddf Lucas \u5b9a\u7406\u7684 \\(C^n_m=C^{n/p}_{m/p}\\times C^{n\\% p}_{m\\% p}\\) \u662f\u4e00\u6a23\u7684</p> <p>\u8b49\u660e: \\((1+x)^p \\equiv 1+x^p \\pmod{p}\\)</p> <p>\\(C^p_i=\\frac{p!}{i!\\times (p-i)!}\\) \u5728 \\(i=1\\ldots (p-1)\\) \u6642\uff0cmod \\(p\\) \u6703\u662f \\(0\\)</p> \\[ \\begin{align} (1+x)^p &amp;= C^p_0x^0+C^p_1x^1+C^p_2x^2+\\ldots + C^p_px^p \\\\ &amp;\\equiv 1+0+0+x^p \\pmod{p} \\\\ &amp;\\equiv x^p \\pmod{p} \\end{align} \\] code <pre><code>const int M = 31;\n\nint Lucas(int n, int k) {\n    if (k == 0) return 1;\n    return (Lucas(n / M, k / M) * C(n % M, k % M)) % M;\n}\n</code></pre> <p>\u8b49\u660e\u8a73\u898b : \u9019\u7bc7\u535a\u5ba2</p>"},{"location":"math/comb/#_6","title":"\u5e38\u7528\u7684\u7d44\u5408\u7b49\u5f0f","text":"<ul> <li> <p>\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u6027\u8cea</p> <ul> <li>\\(C^n_k=C^{n-1}_k+C^{n-1}_k\\)</li> <li>\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u7b2c \\(n\\) \u5c64\u7b2c \\(k\\) \u9805\u70ba \\(C^n_k\\)</li> <li> <p>\u6a6b\u5411\u8d70 \\(C^n_k=C^n_{k-1}\\times \\frac{(n - k + 1)}{k}\\)</p> </li> <li> <p>\u540c\u4e00\u5c64\u7e3d\u548c</p> <ul> <li>\u7b2c \\(n\\) \u5c64\u7684\u6578\u5b57\u7e3d\u548c\u70ba \\(2^n\\)</li> <li>\u7b2c \\(n\\) \u5c64\u7684\u5947\u6578\u9805\u7e3d\u548c \\(2^{n-1}\\)\uff08\\(\\frac{(1+1)^n - (1-1)^n}{2}\\)\uff09</li> </ul> </li> </ul> </li> <li> <p>\u4e8c\u9805\u5f0f\u5b9a\u7406</p> <ul> <li>\\(\\displaystyle (x+y)^n = \\sum \\binom{n}{i} \\times x^i \\times y^{(n-i)}\\)</li> </ul> </li> </ul> <p> </p> \u5e15\u65af\u5361\u4e09\u89d2\u5f62"},{"location":"math/comb/#n-m","title":"n \u7403 m \u7bb1\u554f\u984c","text":"<p>\u5148\u4f86\u6b78\u985e\u4e00\u4e0b\u5dee\u5225</p> <ul> <li> <p>\u7403: \u7bb1\u5b50\u5167\u653e\u5165\u4e86\u4ec0\u9ebc\u7403\u6709\u5dee </p> </li> <li> <p>\u7bb1: \u7bb1\u5b50\u7684\u9806\u5e8f\u6709\u5dee</p> </li> </ul>"},{"location":"math/comb/#_7","title":"\u4e00\u3001\u7403\u7570\u7bb1\u7570","text":"<p>\u6bcf\u9846\u7403\u6709 \\(m\\) \u7a2e\u53ef\u80fd\u6027\uff0c\u6240\u4ee5\u7b54\u6848\u70ba \\(m \\times m \\times ..=m^n\\)</p>"},{"location":"math/comb/#_8","title":"\u4e8c\u3001\u7403\u540c\u7bb1\u7570","text":"<p>\u9694\u677f\u6cd5\uff0c\u5728 \\(n+(m-1)\\) \u500b\u5167\u9078 \\(m-1\\) \u500b\u7576\u4f5c\u9694\u677f\uff0c\u4e5f\u5c31\u662f \\(C^{n+m-1}_{m-1}\\)</p> CSES - Distributing Apples <p>\u6709 \\(n\\) \u500b\u76f8\u7570\u7bb1\u5b50\uff0c\\(m\\) \u500b\u76f8\u540c\u7403\uff0c\u6c42\u5206\u914d\u65b9\u6cd5\u6578</p> <p>\\(n,m\\le 10^6\\)</p>"},{"location":"math/comb/#_9","title":"\u4e09\u3001\u7403\u7570\u7bb1\u540c","text":"<p>\u4ee4 \\(dp(i, j)\\) \u70ba\u5df2\u653e\u5b8c\u7de8\u865f \\(1\\ldots i\\) \u7269\u54c1\uff0c\u5df2\u4f7f\u7528 \\(j\\) \u7bb1\u3002</p> <p>\u8f49\u79fb \\(dp(i, j) =dp(i-1, j-1)+ dp(i-1, j)\\times j\\)</p>"},{"location":"math/comb/#_10","title":"\u56db\u3001\u7403\u540c\u7bb1\u540c","text":"<p>\u7b49\u540c\u65bc\u627e\u6709\u5e7e\u500b\u9577\u5ea6\u70ba \\(m\\) \u7e3d\u548c\u70ba \\(n\\) \u7684\u975e\u905e\u6e1b\u6578\u5217\u3002\u8003\u616e \\(dp(i, j)\\) \u70ba\u9577\u5ea6\u70ba \\(i\\) \u7684\u905e\u589e\u9663\u5217\uff0c\u7e3d\u548c\u70ba \\(j\\)\uff0c\u6bcf\u9805\u81f3\u5c11\u90fd\u662f\u6b63\u6574\u6578\u3002</p> <p>\u8f49\u79fb \\(dp(i, j) = dp(i-1, j-1) + dp(i, j - i)\\)</p> <p></p>"},{"location":"math/comb/#_11","title":"\u74b0\u4e0a\u8272","text":"\u554f\u984c <p>\u5c07 \\(n\\) \u500b\u9ede\u93c8\u5857\u4e0a \\(k\\) \u7a2e\u984f\u8272\uff0c\u76f8\u540c\u984f\u8272\u7684\u5169\u500b\u9ede\u81f3\u5c11\u8981\u9593\u9694 \\(m\\) \u500b\u7bc0\u9ede\uff0c\u6c42\u51fa\u65b9\u6cd5\u6578</p>"},{"location":"math/comb/#m1","title":"m=1","text":"<ul> <li>dp(i, 0/1) \u8ddf\u7b2c\u4e00\u500b\u662f\u4e0d\u540c\u984f\u8272/\u76f8\u540c</li> <li>\\(dp(i, 0)=dp(i-1, 0) \\times (k-2) + dp(i-1, 1) \\times (k-1)\\)</li> <li>\\(dp(i, 1)=dp(i-1, 0)\\)</li> <li>\u521d\u59cb\u5316 dp(1, 1) = k</li> <li>ans = dp(n, 0)</li> </ul>"},{"location":"math/comb/#m2","title":"m=2","text":"<ul> <li>dp(i, s): \u8003\u616e\u524d i \u7684\u6771\u897f\uff0cs \u6700\u5f8c\u4e09\u500b\u5206\u5225\u6709\u6c92\u6709\u8ddf\u7b2c\u4e00\u500b\u4e00\u6a23\u984f\u8272\uff0c\u5176\u4e2d s \u53ef\u80fd\u662f 000, 001, 010, 100</li> <li>\\(dp(i, 000)=dp(i-1, 100) \\times (k-3) + dp(i-1, 000) \\times (k-4)\\)</li> <li>\\(dp(i, 001)=dp(i-1, 000)\\)</li> <li>\\(dp(i, 010)=dp(i-1, 001) \\times (k-3)\\)</li> <li>\\(dp(i, 100)=dp(i-1, 010) \\times (k-3)\\)</li> <li>\u521d\u59cb\u5316 \\(dp(3, 100) = k \\times (k - 1) \\times (k - 2)\\)</li> <li>ans = dp(n, 000)</li> </ul>"},{"location":"math/comb/#_12","title":"\u74b0\u6392\u5217","text":"<p>\u53c8\u70ba\u7b2c\u4e00\u985e\u65af\u7279\u6797\u51fd\u6578\u3002\u4ee4 \\(s(n,k)\\) \u70ba\u6709 \\(n\\) \u500b\u4eba\uff0c\\(k\\) \u7d44\u7684\u5faa\u74b0\u6392\u5217\u65b9\u6cd5\u6578\uff0c\u4f9d\u7167\u5716\u8ad6\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u4ed6\u8f49\u6210\u4e00\u5806\u6709\u5411\u74b0<sup>1</sup>\u3002\u8f49\u79fb\u5f0f\u8003\u616e\u7b2c \\(n\\) \u500b\u4eba\u8981\u300c\u63a5\u300d\u5728\u54ea\u500b\u4eba\u7684\u5f8c\u9762\uff0c\u6216\u81ea\u5df1\u958b\u4e00\u7d44\uff0c\u5f97 </p> \\[s(n,k)=(n-1) \\times s(n-1,k)+s(n-1,k-1)\\] Zerojudge b685. 5. \u8ab2\u5802\u62bd\u7c64 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4ee3\u8868 \\(i\\) \u8207 \\(a_i\\) \u540c\u7d44\u3002\u73fe\u5728\u6709\u4e9b \\(a_i\\) \u662f \\(0\\)\uff0c\u4ee3\u8868\u6c92\u5206\u5230\u7d44\uff0c\u554f\u6709\u5e7e\u7a2e\u65b9\u6cd5\u53ef\u5206\u6210 \\(m\\) \u7d44</p> <p>\\(n\\le 10^7\\)</p> \u601d\u8def <p>\u6703\u767c\u73fe\u662f\u7531\u4e00\u4e9b\u9023\u901a\u584a\uff0c\u6bcf\u500b\u9023\u901a\u584a\u662f\u74b0 or chain\uff0c\u74b0\u7684\u90e8\u5206\u4ee3\u8868\u5df2\u7d93\u5206\u597d\u7d44\uff0c\u6211\u5011\u5c31\u9700\u8981\u5c07 <code>m--</code>\uff0cchain \u7684\u90e8\u5206\u8996\u70ba\u4e00\u500b\u7269\u54c1\uff08\u5b64\u7acb\u9ede\u4e5f\u662f\uff09\uff0c\u5c31\u8b8a\u6210\u554f \\(s(n,k)\\) \u4e86</p> <p>\u9019\u500b\u5176\u5be6\u5c31\u662f Stirling number</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 1024;\nconst long long MOD = 1000007;\nlong long dp[MAXN][MAXN];\nint A[MAXN], used[MAXN];\n\nint main() {\n    dp[0][0] = dp[1][1] = 1;\n    for (int i = 2; i &lt; MAXN; i++) {\n        for (int j = 1; j &lt;= i; j++)\n            dp[i][j] = (dp[i-1][j-1] + dp[i-1][j] * (i-1))%MOD;\n    }\n    int testcase, n, m;\n    scanf(\"%d\", &amp;testcase);\n    while (testcase--) {\n        scanf(\"%d %d\", &amp;n, &amp;m);\n        for (int i = 1; i &lt;= n; i++) {\n            scanf(\"%d\", &amp;A[i]);\n        }\n        memset(used, 0, sizeof(used));\n        int cnt = 0;\n        for (int i = 1; i &lt;= n; i++) {\n            if (used[i]) {\n                continue;\n            }\n            int x = i;\n            while (x &amp;&amp; used[x] == 0) {\n                used[x] = 1;\n                x = A[x];\n            }\n            if (x == i) {\n                m--;\n            }\n            if (x == 0) {\n                cnt++;\n            }\n        }\n        if (m &lt; 0) {\n            puts(\"0\");\n        } else {\n            printf(\"%lld\\n\", dp[cnt][m]);\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"math/comb/#_13","title":"\u5361\u7279\u862d\u6578","text":"<p>\u5361\u7279\u862d\u6578\u7684\u4e00\u822c\u9805\u516c\u5f0f\u70ba</p> \\[ C_n = \\dfrac{1}{n+1} \\binom{2n}{n} \\]"},{"location":"math/comb/#_14","title":"\u8d70\u683c\u5b50","text":"\u8d70\u683c\u5b50\u554f\u984c <p>\u7d66 \\(n\\times n\\) \u7684 Grid\uff0c\u5f9e\u683c\u5b50\u7684\u5de6\u4e0b\u89d2\u8d70\u5230\u683c\u5b50\u7684\u53f3\u4e0a\u89d2\uff0c\u53ea\u80fd\u5411\u4e0a\u6216\u5411\u53f3\u8d70\uff0c\u4e14\u4e0d\u8d85\u904e\u5c0d\u7a31\u8ef8\uff08\u4e0d\u7d93\u904e\u7d05\u8272\u7684\u7dda\uff09\uff0c\u6709\u5e7e\u7a2e\u8d70\u6cd5</p> <p> </p> <p></p> <p>\u5f9e s \u958b\u59cb\u6709\u8d70\u5230\u6709\u7d05\u8272\u7dda\u7684\u683c\u5b50\uff0c\u76f8\u7576\u65bc\u5f9e s' \u958b\u59cb\u8d70\u5230\u6709\u7d05\u8272\u7dda\u7684\u683c\u5b50\uff08\u5f9e\u7d05\u8272\u7dda\u5c0d\u7a31\u904e\u53bb\uff09\u3002</p> <p></p> <p>\u6240\u4ee5\u4e0d\u5408\u6cd5\u65b9\u6cd5\u6578 </p> <p>= \u5f9e s \u7d93\u904e\u7d05\u8272\u7dda\uff0c\u5728\u5230 t \u7684\u65b9\u6cd5\u6578 </p> <p>= \u5f9e s\u2019 \u7d93\u904e\u7d05\u8272\u7dda\uff0c\u5728\u5230 t \u7684\u65b9\u6cd5\u6578</p> <p>\u800c\u5f9e s\u2019 \u5230 t \u5fc5\u7136\u6703\u7d93\u904e\u7d05\u8272\u7dda\uff0c\u6240\u4ee5\u53c8\u76f8\u7576\u65bc s\u2019 \u5230 t \u7684\u65b9\u6cd5\u6578\uff0c\u4e5f\u5c31\u662f \\(C^{2n-2}_{n-2}\\)\u3002\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\(C^{2n-2}_{n-1}-C^{2n-2}_{n-2}\\)</p> \u4f8b\u984c <p>\u6709\u4e00\u500b \\(n\\times n\\) \u7684\u68cb\u76e4\u683c\uff0c\u5f9e \\((1,1)\\) \u8d70\u5230 \\((n,n)\\)\uff0c\u6bcf\u6b21\u53ea\u80fd\u5c07 \\(x\\) \u52a0\u4e0a 1 \u6216\u662f\u5c07 \\(y\\) \u52a0\u4e0a 1\uff0c\u904e\u7a0b\u4e2d\u4e0d\u80fd\u7d93\u904e \\(y = x - 1\\) \u7684\u683c\u5b50\uff0c\u6709\u5e7e\u7a2e\u8d70\u6cd5</p> \u601d\u8def <p>\u4e0b\u9762\u5ef6\u4f38\u51fa\u4f86\u4e00\u500b\u5bec\u70ba \\(n-2\\) \u7684\u77e9\u5f62\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\(C^{2n-2}_{n-1}-C^{2n-2}_{n-2}\\)</p> <p> </p> Atocder abc205 E - White and Black Balls <p>\u6709\u4e00\u500b \\(n\\times m\\) \u7684 Grid\uff0c\u53ea\u80fd\u5f80\u53f3\u6216\u5f80\u4e0a\uff0c\u554f\u5f9e \\((0, 0)\\) \u5230\u9054 \\((n,m)\\) \u4e14 \\(y\\le x+k\\) \u7684\u65b9\u6cd5\u6578</p> <p>\\(0\\le n,m\\le 10^6, 1\\le n + m, 0\\le k\\le n\\)</p> \u601d\u8def <p>\u986f\u7136\u4e00\u5b9a\u5f97\u7d93\u904e\u7d42\u9ede\uff0c\u6240\u4ee5\u9700\u8981\u7b26\u5408 \\(n\\le m+k\\)</p> <p>\\(y\\le x+k\\Rightarrow\\) \u4e0d\u80fd\u7d93\u904e \\(y=x+k+1\\)</p> <p> </p> <p>\u4ee3\u8868\u6211\u5011\u7528\u5361\u7279\u862d\u6578\u60f3\u6cd5\u6240\u756b\u51fa\u4f86\u7684\u77e9\u5f62\u7684\u9ad8\u6703\u662f \\(n-(k+1)+1\\)\uff0c\u4ee3\u8868\u8981\u8d70 \\(n-(k+1)\\) \u6b65\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f </p> \\[ C^{n+m}_n-C^{n+m}_{n-(k+1)} \\] code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 2e6 + 10;\nconst int M = 1e9 + 7;\nint prei[MAXN], pinv[MAXN], pref[MAXN];\n\nvoid build() {\n    prei[0] = prei[1] = pinv[0] = pinv[1] = pref[0] = pref[1] = 1;\n    for (int i = 2; i &lt; MAXN; i++) {\n        pref[i] = pref[i - 1] * i % M;\n        pinv[i] = (M - (M/i) * pinv[M % i] % M) % M;\n        prei[i] = prei[i - 1] * pinv[i] % M;\n    }\n} \n\nint C(int n, int k) {\n    return pref[n] * prei[k] % M * prei[n - k] % M;\n}\n\nsigned main() {\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    build();\n    if (n &gt; m + k) {\n        cout &lt;&lt; 0 &lt;&lt; '\\n';\n    } else {\n        cout &lt;&lt; (C(n + m, n) - C(n + m, n - (k + 1)) + M) % M &lt;&lt; '\\n';\n    }\n} \n</code></pre>"},{"location":"math/comb/#_15","title":"\u62ec\u865f","text":"\u554f\u984c <p>\u6c42 n \u5c0d\u62ec\u865f\u5f62\u6210\u7684\u5408\u6cd5\u5e8f\u5217\u6578\u91cf</p> <p>\u7b2c\u4e00\u500b\u89c0\u9ede\u662f\u628a\u554f\u984c\u8f49\u63db\u6210\u300c\u8d70\u683c\u5b50\u554f\u984c\u300d\u3002\u7b2c\u4e8c\u7a2e\u89c0\u9ede\u5c31\u662f\u5047\u8a2d\u76ee\u524d\u5df2\u7d93\u9078\u4e86\u4e00\u7d44\u62ec\u865f\uff0c\u90a3\u5269\u4e0b\u7684\u53ef\u4ee5\u9078\u62ec\u865f\u5167\uff0c\u6216\u62ec\u865f\u5916\uff0c\u8a2d\u7b54\u6848\u70ba \\(f(n)\\)\uff0c\u6211\u5011\u5217\u51fa\u8f49\u79fb\u5f0f</p> \\[ \\begin{align} f(n) = &amp;f(0)\\times f(n-1) \\\\ + &amp;f(1) \\times f(n-2) \\\\ + &amp;f(2)\\times f(n-3) \\\\ + &amp; \\ldots \\end{align} \\] <p>\u90a3\u9ebc\u4f9d\u7167\u300c\u8d70\u683c\u5b50\u554f\u984c\u300d\u554f\u984c\u7684\u7d50\u8ad6\uff0c\u6211\u5011\u53ef\u4ee5\u5f97\u77e5 \\(f(n)=C^{2n}_{n}-C^{2n}_{n-1}\\)</p> CSES - Bracket Sequences I <p>\u554f\u9577\u5ea6\u662f \\(n\\) \u5408\u6cd5\u62ec\u865f\u5e8f\u5217\u6709\u5e7e\u500b</p> <p>\\(n\\le 10^6\\)</p> \u601d\u8def <p>\u770b\u6210\u8d70\u683c\u5b50\u554f\u984c</p> <ul> <li> <p>opening \u2194 \u5f80\u53f3</p> </li> <li> <p>closing \u2194 \u5f80\u4e0a</p> </li> </ul> <p>\u4ee5 \\(n=6\\) \u4f86\u8aaa\uff0c\u5716\u6703\u9577\u9019\u6a23:</p> <p> </p> CSES - Bracket Sequences II <p>\u7d66\u4f60\u4e00\u500b\u672a\u5b8c\u6210\u7684\u62ec\u865f\u5e8f\u5217\uff0c\u6c42\u4ee5\u6b64\u5ef6\u4f38\u9577\u5ea6\u70ba \\(n\\) \u500b\u5408\u6cd5\u62ec\u865f\u5e8f\u5217\u6709\u5e7e\u500b</p> <p>\\(n\\le 10^6\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u4e00\u984c\u4e00\u6a23\uff0c\u53ea\u662f\u8b8a\u6210\u8d70\u4e86\u4e00\u4e9b\u683c\u5b50\uff0c\u628a\u591a\u9918\u7684\u683c\u5b50\u53bb\u6389\u4e00\u6a23\u7528\u5361\u7279\u862d\u6578\u89e3\u6c7a</p> <p> s = ((), n = 6 </p> code <pre><code>int solve(int strlen, string s) {\n    int n = strlen / 2, m = strlen / 2;\n    int cnt = 0;\n    for (int i = 0; i &lt; s.size(); i++) {\n        if (s[i] == '(') {\n            m--;\n            cnt++;\n        } else {\n            n--;\n            cnt--;\n        }\n    }\n    return (C(n + m, n) - C(n + m, m + cnt + 1) + M) % M;\n} \n</code></pre> \u68e7\u7684\u51fa\u68e7\u9806\u5e8f <p>\u7d66\u5b9a \\(n\\) \u500b\u6578\uff0c\u4e00\u500b\u7a7a\u68e7\uff08stack\uff09 \\(S\\)\uff0c\u6bcf\u6b21\u68e7\u6307\u5411\u5165\u68e7\u6216\u51fa\u68e7\u64cd\u4f5c\uff0c\u4ed6\u5011\u7684\u51fa\u68e7\u9806\u5e8f\u6709\u591a\u5c11\u7a2e ?</p> \u601d\u8def <p>\u60f3\u6210\u300c\u6c42 n \u5c0d\u62ec\u865f\u5f62\u6210\u7684\u5408\u6cd5\u5e8f\u5217\u6578\u91cf\u300d</p>"},{"location":"math/comb/#_16","title":"\u51f8\u591a\u908a\u5f62\u5283\u5206\u70ba\u4e09\u89d2\u5f62","text":"\u554f\u984c <p>\u6c42 n + 2 \u908a\u5f62\u5340\u57df\u5283\u5206\u6210 n \u500b\u4e09\u89d2\u5f62\u5340\u57df\u7684\u65b9\u6cd5\u6578</p> <p>\u6211\u5011\u5148\u56fa\u5b9a\u5e95\u908a\uff0c\u7136\u5f8c\u679a\u8209\u5e95\u908a\u7684 traingle\uff0c\u518d\u770b\u5e95\u908a\u7684 traingle \u7684\u5de6\u908a\u3001\u53f3\u908a\u9084\u80fd\u653e\u5e7e\u500b</p> <p> </p> \u4ee5\u9019\u500b\u4f8b\u5b50\u4f86\u8aaa\uff0c\u5de6\u908a\u80fd\u653e n - 2 \u500b\uff0c\u53f3\u908a\u80fd\u653e 1 \u500b <p>\u4ee4\u80fd\u69cb\u51fa n \u500b traingle \u7684\u89e3\u70ba \\(f(n)\\)\uff0c\u6211\u5011\u53ef\u4ee5\u5217\u51fa:</p> \\[ \\begin{align} f(n) = &amp;f(0)\\times f(n-1) \\\\ + &amp;f(1) \\times f(n-2) \\\\ + &amp;f(2)\\times f(n-3) \\\\ + &amp; \\ldots \\end{align} \\] <p>\u767c\u73fe\u8f49\u79fb\u5f0f\u8ddf\u62ec\u865f\u554f\u984c\u4e00\u6a21\u4e00\u6a23\uff0c\u6240\u4ee5\u7b54\u6848\u4e5f\u5c31\u662f \\(f(n)=C^{2n}_{n}-C^{2n}_{n-1}\\)</p>"},{"location":"math/comb/#_17","title":"\u4e8c\u5143\u6a39\u6578\u91cf","text":"\u554f\u984c <p>\u6c42 n \u500b\u7bc0\u9ede\u7684\u5408\u6cd5\u4e8c\u5143\u6a39\u6578\u91cf</p> <p>\u6211\u5011\u53ef\u4ee5\u770b\u6210\u300cn \u5c0d\u62ec\u865f\u5f62\u6210\u7684\u5408\u6cd5\u5e8f\u5217\u6578\u91cf\u300d\uff0c\u5c07\u5de6\u62ec\u865f\u60f3\u6210\u5f80\u4e0b\u8d70\uff0c\u5c07\u53f3\u62ec\u865f\u60f3\u6210\u5f80\u56de\u8d70\uff0c\u4ee5\u4e0b\u9762\u9019\u68f5 binary tree \u4f86\u8aaa</p> <p></p> <p>\u9019\u5c31\u662f\u4ed6\u6240\u5f62\u6210\u7684\u62ec\u865f\u5e8f\u5217:</p> <p></p>"},{"location":"math/comb/#_18","title":"\u6392\u5bb9\u539f\u7406","text":""},{"location":"math/comb/#-","title":"\u7403\u7570\u7bb1\u7570 - \u6c92\u7a7a\u7bb1","text":"\u7b2c\u4e8c\u985e\u65af\u7279\u6797\u51fd\u6578 <p>\\(n\\) \u500b\u4e0d\u540c\u6771\u897f\u8981\u5206\u5230 \\(m\\) \u500b\u4e0d\u540c\u7bb1\u5b50\uff0c\u6bcf\u500b\u7bb1\u5b50\u81f3\u5c11\u653e\u4e00\u500b\u6771\u897f\uff0c\u7e3d\u5171\u6709\u5e7e\u7a2e\u653e\u6cd5\u3002</p> <p>\u8003\u616e\u300c\u5168\u90e8 \\(-\\) \u975e\u6cd5\u300d\uff0c\u4e5f\u5c31\u662f\u300c\u5168\u90e8\u653e\u6cd5 \\(-\\) \u4e00\u7bb1\u4ee5\u4e0a\u6c92\u6771\u897f\u300d = \\(m^n  - m \\times (m-1)^n\\)\u3002\u4f46\u9019\u6a23\u662f\u5426\u6703\u591a\u6263? \u82e5\u6709\u5169\u500b\u7a7a\u7bb1\u7684 case\uff0c\u6703\u88ab\u6263\u6389\u5169\u6b21\uff0c\u6709 \\(k\\) \u500b\u7a7a\u7bb1\u7684 case\uff0c\u6703\u88ab\u6263\u6389 \\(k\\) \u6b21\u3002</p> <p>\u6211\u5011\u4f7f\u7528\u6392\u5bb9\u539f\u7406\uff0c\u7b54\u6848\u5c31\u662f</p>   \u5168 $-$ \u81f3\u5c111\u7bb1\u7a7a $+$ \u81f3\u5c112\u7bb1\u7a7a $+...+$ \u81f3\u5c11 $m$ \u7bb1\u7a7a  $m^n-C^{m}_{1} \\times (m-1)^{n}+C^{m}_{2} \\times (m-2)^{n}+\\ldots+C^{m}_{m} \\times (m-m)^{n}$   <p>\u5c0d\u65bc\u81f3\u5c11 \\(m\\) \u7bb1\u7a7a\u5176\u5be6\u7121\u610f\u7fa9\uff0c\u56e0\u70ba \\((m-m)^{n}=0\\)\uff0c\u4e5f\u5c31\u662f\u53ef\u52a0\u53ef\u4e0d\u52a0</p> code <pre><code>int F(int n, int m) {\n    int ret = 0;\n    for (int i = 0; i &lt;= m; i++) {\n        ret += ((i &amp; 1) ? -1 : 1) * fastpow(m - i, n, M) * C(m, i) % M;\n        ret = (ret % M + M) % M;\n    }\n    return ret;\n}\n</code></pre> CSES - Counting Sequences <p>\u554f\u6709\u5e7e\u7a2e\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\u6eff\u8db3\u6bcf\u9805\u90fd\u4ecb\u65bc \\([1, k]\\)\uff0c\u4e14 \\(1\\ldots k\\) \u7686\u81f3\u5c11\u51fa\u73fe\u4e00\u6b21</p> <p>\\(k\\le n\\le 10^6\\)</p> \u601d\u8def <p>\u82e5\u8003\u616e\u5c0d\u65bc\u6bcf\u4e00\u9805\u8981\u9078\u4ec0\u9ebc\uff0c\u6703\u767c\u73fe\u5f88\u96e3\u505a\u3002\u6211\u5011\u9006\u5411\u601d\u8003\uff0c\u8b8a\u6210\u770b \\(1\\ldots k\\) \u6bcf\u500b\u8981\u9078\u90a3\u4e9b index\uff0c\u66f4\u5177\u9ad4\u4f86\u8aaa\uff0c\u6709 \\(k\\) \u500b\u4e0d\u540c\u7bb1\u5b50\uff0c\u8981\u653e\u5165 \\(n\\) \u500b\u4e0d\u540c\u7684\u7403\uff0c\u6bcf\u7bb1\u81f3\u5c11\u653e\u4e00\u500b\u6709\u591a\u5c11\u7a2e\u653e\u6cd5\u3002\u9019\u500b\u5c31\u53ef\u4ee5\u7528\u6211\u5011\u4e0a\u9762\u8b1b\u5230\u7684\u6392\u5bb9\u539f\u7406\u4f86\u5be6\u73fe\u3002</p> CF 1935 D. Exam in MAC <p>\u7d66\u4e00\u500b\u5927\u5c0f\u70ba n \u7684\u96c6\u5408 s\uff0c\u554f\u6709\u5e7e\u7d44 \\(0\\le x\\le y\\le c\\) \u7684 \\((x,y)\\) \u6eff\u8db3 \\(x+y\\) \u4e0d\u5728\u96c6\u5408\u5167\u4e14 \\(y-x\\) \u4e0d\u5728\u96c6\u5408\u5167</p> <p>\\(n\\le 3\\times 10^5, 1\\le c\\le 10^9\\)</p> \u601d\u8def <p>\u56e0\u70ba\u76f4\u63a5\u53bb\u8a08\u7b97\u6703\u767c\u73fe\u6709\u96e3\u5ea6\uff0c\u6240\u4ee5\u6211\u5011\u8003\u616e\u9006\u5411\u8a08\u7b97\uff0c\u4e5f\u5c31\u662f\u5229\u7528\u6392\u5bb9\u539f\u7406\uff0c\u5168\u90e8\u7684\u65b9\u6848\u6578\u6263\u6389\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u554f\u984c\u7684\u7b54\u6848\u5c07\u662f\uff1a</p> <p> \u300c\u5168\u90e8\u7684 (x, y) \u65b9\u6848\u6578\u300d-\u300cx+y \u5728\u96c6\u5408\u5167\u300d-\u300cy-x \u5728\u96c6\u5408\u5167\u300d+\u300cx+y \u8207 y-x \u90fd\u5728\u96c6\u5408\u5167\u300d </p> <p>\u4ee5\u4e0b\u5206\u5225\u8a08\u7b97\u6bcf\u500b\u503c\u3002</p> <ol> <li>\u5c0d\u65bc\u6240\u6709\u53ef\u80fd\u7684 \\(x,y\\)\uff0c\u82e5 x = 0\uff0cy \u53ef\u4ee5\u662f [0, c]\uff0c\u82e5 x = 1\uff0cy \u53ef\u4ee5\u662f [1, c]\uff0c...\u3002\u6240\u4ee5\u4e8b\u5be6\u4e0a\u679a\u8209 x\uff0c\u6eff\u8db3\u7684 y \u7684\u7e3d\u548c\u5c31\u662f\u4e00\u500b\u7b49\u5dee\u6578\u5217\u3002\u4e5f\u5c31\u662f \\((c+1)\\cdot (c+2)/2\\) \u500b\u3002</li> <li>\u6eff\u8db3 \\(x+y\\in s\\) \u7684\u914d\u5c0d\u6578\u91cf\u3002\u6211\u5011\u904d\u6b77 \\(s_i\\)\uff0c\u4ee4 \\(x+y=s_i\\)\uff0c\u90a3\u9ebc\u5c0d\u65bc \\(0\\le x\\le \\lfloor \\dfrac{s_i}{2}\\rfloor\\)\uff0c\u6703\u5c0d\u61c9\u5230\u6b63\u597d\u4e00\u500b \\(y\\)\uff0c\u5373\u5177\u6709\u6b64\u7e3d\u548c\u7684\u914d\u5c0d\u6578\u91cf\u70ba \\(\\lfloor \\dfrac{s_i}{2} \\rfloor+1\\)\u3002</li> <li>\u6eff\u8db3 \\(y\u2212x\\in s\\) \u7684\u914d\u5c0d\u6578\u91cf\u3002\u6211\u5011\u904d\u6b77\u5dee\u503c \\(s_i\\)\uff0c\u4ee4 \\(y\u2212x=s_i\\)\uff0c\u79fb\u5411\u70ba \\(x = y - s_i\\)\uff0c\u90a3\u9ebc\u5c0d\u65bc \\(s_i\\le y\\le c\\)\uff0c\u6703\u5c0d\u61c9\u5230\u6b63\u597d\u4e00\u500b \\(x\\)\uff0c\u5373\u5177\u6709\u6b64\u5dee\u503c\u7684\u914d\u5c0d\u6578\u91cf\u70ba \\(c\u2212s_i+1\\)\u3002</li> <li>\u6eff\u8db3 \\(x+y\\) \u548c \\(y\u2212x\\) \u540c\u6642\u5728 \\(s\\) \u4e2d\u7684\u914d\u5c0d\u6578\u91cf\u3002\u4ee4 \\(x+y=s_i\\)\uff0c\\(y\u2212x=s_j\\)\uff0c\u90a3\u9ebc \\(x=\\dfrac{s_i\u2212s_j}{2}\\)\uff0c\\(y=\\dfrac{s_i+s_j}{2}\\)\u3002\u53ea\u6709 \\(x+y,y-x\\) \u662f\u5947\u6578\u548c\u5947\u6578\u6216\u5076\u6578\u548c\u5076\u6578\u6642\uff0c\u89e3\u51fa\u4f86\u7684 \\(x,y\\) \u624d\u6703\u662f\u6574\u6578\u3002\u5047\u8a2d\u6211\u5011\u8a08\u7b97 \\(s\\) \u4e2d\u5076\u6578\u548c\u5947\u6578\u6578\u91cf\u5206\u5225\u70ba even \u548c odd\u3002\u56e0\u6b64\uff0c\u6b64\u985e\u914d\u5c0d\u7684\u6578\u91cf\u662f  \\(\\dfrac{\\text{even}\\cdot (\\text{even}+1)}{2}+\\dfrac{\\text{odd}\\cdot (\\text{odd}+1)}{2}\\)\u3002</li> </ol> <p>\u7e3d\u6642\u9593\u8907\u96dc\u5ea6\u662f \\(O(n)\\)\u3002</p>"},{"location":"math/comb/#_19","title":"\u932f\u6392","text":"CSES - Christmas Party <p>\u6709 \\(n\\) \u500b\u4eba\uff0c\u6bcf\u4eba\u5404\u8981\u9001\u4e00\u500b\u79ae\u7269\u3002\u554f\u6709\u5e7e\u7a2e\u65b9\u6cd5\uff0c\u4f7f\u6bcf\u4eba\u6536\u5230\u4e00\u500b\u79ae\u7269\uff08\u81ea\u5df1\u9001\u81ea\u5df1\u6536\uff09</p> <p>\\(n\\le 10^6\\)</p> \u601d\u8def <p>\u7b2c\u4e00\u500b\u4eba\u53ef\u4ee5\u9001 n \u500b\u4eba\uff0c\u7b2c\u4e8c\u500b\u4eba\u53ef\u4ee5\u9001 n - 1 \u500b\u4eba\uff0c\u7b2c\u4e09\u500b\u4eba\u53ef\u4ee5\u9001 n - 2 \u500b\u4eba\uff0c...\u3002\u6240\u4ee5\u65b9\u6cd5\u6578\u70ba n!\uff0c\u4f46\u9019\u6a23\u53ef\u80fd\u6703\u767c\u751f\u81ea\u5df1\u9001\u81ea\u5df1\u7684\u60c5\u6cc1\uff0c\u6211\u5011\u4f7f\u7528\u6392\u5bb9\u539f\u7406\u6c42\u89e3</p> <p>n! - C(n, 1) * (n - 1)! + C(n, 2) * (n - 2)! + ...</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\nusing namespace std;\n\nconst int MAXN = 1e6 + 5;\nconst int M = 1e9 + 7;\nint prei[MAXN], pinv[MAXN], pref[MAXN];\n\nvoid build() {\n    prei[0] = prei[1] = pinv[0] = pinv[1] = pref[0] = pref[1] = 1;\n    for (int i = 2; i &lt; MAXN; i++) {\n        pref[i] = pref[i - 1] * i % M;\n        pinv[i] = (M - (M / i) * pinv[M % i] % M) % M;\n        prei[i] = prei[i - 1] * pinv[i] % M;\n    }\n}\n\nint C(int n, int k) {\n    return pref[n] * prei[k] % M * prei[n - k] % M;\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    int ans = 0;\n    build();\n    for (int i = 0; i &lt;= n; i++) {\n        if ((n - i) &amp; 1) {\n            ans -= C(n, i) * pref[i];\n        } else {\n            ans += C(n, i) * pref[i];\n        }   \n        ans = (ans % M + M) % M;\n    }\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"math/comb/#_20","title":"\u7d93\u5178\u554f\u984c","text":"n \u500b p \u9762\u9ab0\u5b50 <p>\u6709 \\(n\\) \u500b \\(K\\) \u9762\u9ab0\uff08\u6578\u5b57\u5206\u5225\u662f \\(1\\sim K\\)\uff09\uff0c\u5404\u4e1f\u4e00\u6b21\uff0c\u6c42 \\(n\\) \u500b\u9ab0\u5b50\u4e2d\u51fa\u73fe\u9ede\u6578\u6700\u5927\u503c\u7684\u671f\u671b\u503c\uff0c\u8a2d\u8a08 DP \u72c0\u614b\u4e26\u5217\u51fa\u8f49\u79fb\u6c42\u89e3\u6b64\u984c\u3002</p> \u6cd5 1 <ul> <li> <p>\u601d\u8003 \\(\\texttt{max}\\) \u5df2\u7d93\u56fa\u5b9a\u7684\u60c5\u6cc1</p> <ul> <li>\u9ab0\u5230 \\(\\texttt{max}\\) \u7684\u6a5f\u7387 \\(\\texttt{?}\\) </li> </ul> </li> <li> <p>\u8a2d\u76ee\u524d\u9ab0\u5230\u7684 \\(\\texttt{max}\\) \u7684\u9ede\u6578\u70ba \\(i\\)</p> <ul> <li>\u5171\u6709 \\(i^n-(i-1)^n\\) \u7a2e\u65b9\u6cd5\u6578\u9ab0\u5230\u7684\u6700\u5927\u9ede\u6578\u662f \\(i\\)</li> <li>\u6700\u591a\u5230 \\(i\\) \u7684\u65b9\u6cd5\u6578 \\(-\\) \u6700\u591a\u53ea\u6709\u5230 \\(i-1\\) \u7684\u65b9\u6cd5\u6578 \\(=i^n-(i-1)^n\\)</li> <li>\u53ea\u8981\u8a72\u65b9\u6cd5\u6578\u5167\u6c92\u6709\u4e00\u500b\u662f \\(i\\) \u5c31\u6703\u88ab\u6263\u6389\u7684\u6982\u5ff5</li> <li>\u6545\u9ab0\u5230\u9ede\u6578 \\(i\\) \u7684\u6a5f\u7387\u70ba \\(P_i=(\\frac{i}{K}^n-\\frac{i - 1}{K}^n)\\)</li> <li>\\(E[x]=\\sum \\limits_{i=1}^n P_i \\times i\\)</li> </ul> </li> </ul> <pre><code>void solve1 () {\n    double ans = 0, pre = 0;\n\n    vector&lt;double&gt; p (K + 1, 1);\n    for (int i = 1; i &lt;= K; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            p[i] = (double) p[i] * i / K;\n        }\n    }\n\n    for (int i = 1; i &lt;= K; i++) {\n        double now = p[i];\n        ans += (double) (now - pre) * i;\n        pre = now;\n    }\n    cout &lt;&lt; fixed &lt;&lt; setprecision(6) &lt;&lt; ans;\n}\n</code></pre> \u6cd52 <ul> <li> <p>\u4ee4 \\(dp(n,k)\\) \u8868\u793a\u4e1f \\(n\\) \u6b21\u9ab0\u5b50\u7684\u60c5\u6cc1\u4e0b\uff0c\u6700\u5927\u503c\u70ba \\(k\\) \u7684\u6a5f\u7387</p> </li> <li> <p>\\(dp(n,k)=P(\\)\u5df2\u7d93\u6709\\(k)+P(\\)\u9019\u5c40\u624d\u9ab0\u5230\\(k)\\)</p> </li> <li> <p>\\(\\begin{align} dp(n, k)  \\end{align}\\)</p> </li> <li> <p>\u5728\u914d\u5408\u524d\u7db4\u512a\u5316</p> </li> </ul> \\[\\begin{align}dp(n,k) &amp;= \\frac{k}{K}dp(n-1, k) + \\frac{1}{K} [ dp(n-1, k-1) + dp(n-1, k-2) + dp(n-1, k-3) + \\dots + dp(n-1, 1) ] \\\\ &amp;= \\frac{k}{K}dp(n-1, k)+dp(n,k-1)-\\frac{k-1}{K}dp(n-1, k-1)+\\frac{1}{K}dp(n-1,k-1) \\end{align}\\] <pre><code>void solve2 () {\n    for (int k = 1; k &lt;= K; k++) dp[1][k] = (double) 1 / K;\n\n    // O (nk^2)\n    for (int i = 2; i &lt;= n; i++) {\n        for (int k = 1; k &lt;= K; k++) {\n            double ret = 0;\n            for (int j = 1; j &lt;= k - 1; j++) {\n                ret = (double) ret + dp[i - 1][j];\n            }\n            ret = (double) ret / K;\n            dp[i][k] = (double) ret + ((double) k / K) * dp[i - 1][k]; \n        }   \n    }\n\n    // O (nk)\n    for (int i = 2; i &lt;= n; i++) {\n        for (int k = 1; k &lt;= K; k++) {\n            double ret = 0;\n\n            dp[i][k] = ((double)k / K) * dp[i - 1][k] + dp[i][k - 1] \n                       - ((double)(k - 1) / K) * dp[i - 1][k - 1] \n                       + ((double)1 / K) * dp[i - 1][k - 1];\n        }\n    }\n\n    double res = 0;\n    for (int k = 1; k &lt;= K; k++) {\n        res = (double) res + dp[n][k] * k;\n    }\n\n    cout &lt;&lt; fixed &lt;&lt; setprecision (6) &lt;&lt; res &lt;&lt; \"\\n\";\n} \n</code></pre> \u671f\u671b\u62bd\u53d6\u6b21\u6578 <p>\u6709 \\(n\\) \u7a2e\u7269\u54c1\uff0c\u6bcf\u7a2e\u7269\u54c1\u88ab\u62bd\u5230\u7684\u6a5f\u7387\u90fd\u662f \\(1/n\\)\u3002\u6c42\u5728 \\(n\\) \u500b\u7269\u54c1\u4e2d\u81f3\u5c11\u62bd\u904e \\(i\\) \u7a2e\u4e0d\u540c\u7269\u54c1\u81f3\u5c11\u4e00\u6b21\u7684\u671f\u671b\u6240\u9700\u62bd\u53d6\u6b21\u6578\uff0c\u8a2d\u8a08 DP \u72c0\u614b\u4e26\u5217\u51fa\u8f49\u79fb\u6c42\u89e3\u6b64\u984c\u3002</p> \u601d\u8def <ul> <li> <p>\\(dp[i]=dp[i-1]+\\frac{n}{n-i-1}\\)</p> </li> <li> <p>\\(10\\) \u6b21\u6709\u5169\u6b21\u6703\u4e2d</p> </li> <li> <p>\u4ee3\u8868 \\(5\\) \u6b21\u4e2d \\(1\\) \u6b21</p> </li> </ul> \u74b0\u6392\u5217\u985e\u4f3c\u984c Hackerrank - Construct the Array <p>\u7d66 \\(n,k,x\\)\uff0c\u554f\u6709\u5e7e\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217\u4ee5 \\(1\\) \u70ba\u958b\u982d\uff0c\\(x\\) \u70ba\u7d50\u5c3e\uff0c\u4e2d\u9593\u7684\u6578\u5b57\u7686\u5728 \\(1\\ldots k\\)\uff0c\u4e14\u76f8\u9130\u7684\u7686\u4e0d\u540c</p> <p>\\(3\\le n\\le 10^5, 2\\le k\\le 10^5, 1\\le x\\le k\\)</p> \u601d\u8def <p>\u985e\u4f3c\u74b0\u6392\u5217\u4f86\u5b9a\u7fa9 dp \u72c0\u614b\uff0cdp(i, 0 / 1) = \u7b2c i \u683c\u6709\u6c92\u6709\u653e 1\uff0c\u76f8\u9130\u63a5\u4e0d\u540c\u7684\u65b9\u6cd5\u6578</p> <p>\u521d\u59cb\u72c0\u614b\u7684\u8a71\u6211\u5011\u53ef\u4ee5\u5f9e\u5f8c\u9762\u5f80\u524d\u770b\uff0c\u4e5f\u5c31\u662f \\(x\\) \u7576\u958b\u982d\uff0c\\(1\\) \u7576\u7d50\u5c3e\uff0c\u9019\u6a23\u6211\u5011\u7d50\u5c3e\u90fd\u662f\u56fa\u5b9a\u7684\u3002</p> <ul> <li> <p>\u82e5 \\(x=1:\\) dp(0, 0) = 0, dp(0, 1) = 1</p> </li> <li> <p>otherwise: dp(0, 0) = 1, dp(0, 1) = 0</p> </li> </ul> <p>\u8f49\u79fb\u7684\u8a71 :</p> <ul> <li> <p>dp(i, 0) = dp(i - 1, 1) * (k - 1) + dp(i - 1, 0) * (k - 2)</p> </li> <li> <p>dp(i, 1) = dp(i - 1, 0)</p> </li> </ul> <p>\u6700\u5f8c\u7684\u7b54\u6848\u81ea\u7136\u5c31\u662f\u6700\u5f8c\u4e00\u683c\u653e 1 \u7684\u65b9\u6cd5\u6578\uff0c\u4e5f\u5c31\u662f dp(n - 1, 1)</p> code <pre><code>long long countArray(int n, int k, int x) {\n    const int M = 1e9 + 7;\n    vector&lt;vector&lt;long long&gt;&gt; dp(n, vector&lt;long long&gt;(2));\n    dp[0][1] = (x == 1);\n    dp[0][0] = !dp[0][1];\n    for (int i = 1; i &lt; n; i++) {\n        dp[i][0] = (dp[i - 1][1] * (k - 1) + dp[i - 1][0] * (k - 2)) % M;\n        dp[i][1] = dp[i - 1][0] % M;\n    }\n    return dp[n - 1][1];\n}\n</code></pre> LeetCode 903. Valid Permutations for DI Sequence <p>\u7d66\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u5b57\u4e32 \\(s\\)\uff0c\u5b57\u5143\u53ea\u5305\u542b D \u548c I\u3002\u8a08\u7b97\u6709\u5e7e\u500b \\(0\\ldots n\\) \u7684permutation\uff0c\u6eff\u8db3 :</p> <ul> <li> <p>\u82e5 \\(s_i=\\) <code>D</code>\uff0c\\(p_i &gt; p_{i+1}\\)</p> </li> <li> <p>\u82e5 \\(s_i=\\) <code>I</code>\uff0c\\(p_i &lt; p_{i+1}\\)</p> </li> </ul> <p>\\(n\\le 200\\)</p> \u601d\u8def <p>\u8003\u616e\u524d\u9762 i \u500b\u6771\u897f\u662f 0~i \u7684\u6392\u5217\uff0c\u7d00\u9304\u6700\u5f8c\u4e00\u9805\u662f\u4ec0\u9ebc</p> <p>dp(i, j) : p[0] ~ p[i] \u662f 0~i \u7684\u6392\u5217\uff0c\u4e14 p[i] \u70ba j \u7684\u5408\u6cd5\u6392\u5217\u6578\u91cf</p> <p>dp(i, j) = </p> <ul> <li> <p>if (s[i] == 'I'): dp(i-1, 0) + dp(i-1, 1) + ... + dp(i-1, j-1)</p> </li> <li> <p>if (s[i] == 'D'): dp(i-1, j) + dp(i-1, j+1) + ... + dp(i-1, i-1)</p> </li> </ul> <p>Decrease \u7684\u8f49\u79fb\u5c31\u662f\u6700\u5f8c\u4e00\u9805\u653e j\uff0c\u5c07\u524d\u9762 p[0, i-1] \u5927\u65bc\u7b49\u65bc j \u7684\u901a\u901a +1</p> EOJ 3029. \u4e0d\u91cd\u590d\u6b63\u6574\u6570 <p>\u7d66 \\(n\\)\uff0c\u554f\u5c07 \\(n\\) \u62c6\u5206\u70ba\u82e5\u5e72\u4e0d\u91cd\u8907\u7684\u6b63\u6574\u6578\u4e4b\u548c\uff0c\u4e14\u6578\u5b57\u7686\u4e0d\u540c\uff0c\u4e14\u6bcf\u500b\u6578\u5b57\u7686\u5728 \\([1, m]\\) \u4e4b\u9593\uff0c\u6709\u5e7e\u7a2e\u65b9\u6848 </p> <p>\\(n\\le 50, m\\le 20\\)</p> \u601d\u8def <p>\u8a2d \\(dp(i,j)=\\) \u7528  \\(1\\ldots i\\) \u88e1\u4e0d\u91cd\u8907\u7684\u6578\u5b57\u8868\u793a \\(j\\) \u7684\u65b9\u6cd5\u6578\u3002\u8f49\u79fb\u7684\u5316\u6709\u5169\u7a2e\u9078\u6cd5: \u9078 \\(i\\)\uff0c\u4e0d\u9078 \\(i\\)\uff0c\u6240\u4ee5\u5217\u51fa</p> \\[ dp(i,j)=dp(i-1,j)+dp(i-1,j-i) \\] <p>\u985e\u4f3c\u80cc\u5305\u554f\u984c\uff0c\u6642\u9593\u8907\u96dc\u5ea6 \\(O(\\sum \\limits_{i=1}^t n_im_i)\\)</p> code <pre><code>#include \"bits/stdc++.h\"\n\nusing namespace std;\nusing u64 = uint64_t;\n\nint main() {\n    u64 t;\n    cin &gt;&gt; t;\n    for (u64 query = 0; query &lt; t; ++query) {\n        cout &lt;&lt; \"case #\" &lt;&lt; query &lt;&lt; \":\\n\";\n        u64 n, m;\n        cin &gt;&gt; n &gt;&gt; m;\n        vector&lt;u64&gt; dp(n + 1, 0);\n        dp[0] = 1;\n        for (u64 i = 1; i &lt;= m; ++i) {\n            for (u64 j = n; j &gt;= i; --j) {\n                dp[j] += dp[j - i];\n            }\n        }\n        cout &lt;&lt; dp[n] &lt;&lt; '\\n';\n    }\n}\n</code></pre> CSES - Xor Pyramid <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u5c07\u9019\u500b\u5e8f\u5217\u653e\u5728\u91d1\u5b57\u5854\u7684\u6700\u5e95\u5c64\uff0c\u91d1\u5b57\u5854\u7684\u6bcf\u4e00\u9805\u70ba\u5de6\u4e0b xor \u53f3\u4e0b\uff0c\u554f\u91d1\u5b57\u5854\u7684\u9802\u5c64\u6578\u5b57</p> <p>\\(n\\le 2\\times 10^5, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u91d1\u5b57\u5854\u7684\u4e00\u9805\uff0c\u88ab\u7b97\u5230\u7684\u6b21\u6578\u70ba\u300c\u5de6\u4e0a\u88ab\u7b97\u5230\u7684\u6b21\u6578 + \u53f3\u4e0a\u88ab\u7b97\u5230\u7684\u6b21\u6578\u300d\uff0c\u90a3\u9ebc\u56e0\u70ba\u9802\u5c64\u88ab\u7b97\u5230\u7684\u6b21\u6578\u6703\u662f \\(1\\)\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u5617\u8a66\u5c07\u6bcf\u4e00\u9805\u88ab\u7b97\u5230\u7684\u6b21\u6578\u5beb\u51fa\u4f86\uff0c\u6703\u767c\u73fe\u6070\u597d\u662f\u5e15\u65af\u5361\u4e09\u89d2\u5f62\u3002\u6240\u4ee5\u5c0d\u65bc \\(a_i\\)\uff0c\u88ab\u7b97\u5230\u7684\u6b21\u6578\u70ba \\(C^{n-1}_{i-1}\\)\uff0c\u56e0\u70ba xor \u53ea\u5728\u610f\u5947\u5076\u6027\uff0c\u6240\u4ee5\u82e5 mod 2 \u70ba 0 \u5c31\u4e0d\u7528\u7b97\uff0c\u5426\u5247\u5c31\u5c07\u7b54\u6848 xor \u4e00\u6b21\u5c31\u597d\u3002\\(C^n_k\\) \u53ef\u4ee5\u7528 Lucas \u5b9a\u7406\u6216\u7dda\u6027\u84cb\u51fa\u4f86</p> CF 1444 B. Divide and Sum <p>\u7d66\u4f60\u4e00\u500b\u9577\u5ea6\u70ba \\(2n\\) \u7684\u5e8f\u5217 \\(a\\)\uff0c\u5c07\u5b83\u5011\u5e73\u5747\u5206\u6210\u5169\u7d44\uff0c\u5c0d\u7b2c\u4e00\u7d44\u505a\u905e\u589e\u6392\u5e8f\uff0c\u5f97\u5230\u5e8f\u5217 \\(x\\)\uff0c\u7b2c\u4e8c\u7d44\u505a\u905e\u6e1b\u6392\u5e8f\uff0c\u5f97\u5230\u5e8f\u5217 \\(y\\)\uff0c\u6c42\u5c0d\u65bc\u6240\u6709\u53ef\u80fd\u7684 \\(x,y\\)\uff0c\\(\\sum \\limits_{i=1}^n |x_i-y_i|\\) \u7684\u7e3d\u548c</p> <p>\\(n\\le 1.5\\times 10^5, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u6253\u8868\u6703\u767c\u73fe\uff0c\u5c0d\u65bc\u6bcf\u4e00\u500b partition\uff0c\\(\\sum |x_i - y_i|\\) \u6703\u4e00\u6a23\uff0c\u7136\u5f8c\u6211\u5011\u5c31\u8981\u53bb\u89c0\u5bdf\u9019\u500b\u4e00\u6a23\u7684\u503c\u662f\u600e\u9ebc\u7b97\u51fa\u4f86\u7684\uff0c\u6703\u767c\u73fe\u6070\u597d\u5c31\u662f\u5c07 a sort \u597d\u5f8c\u5f8c\u534a\u7684\u7e3d\u548c - \u524d\u534a\u7684\u7e3d\u548c\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f </p> \\[\\binom{2n}{n}\\times (\\sum \\limits_{i=n+1}^{2n}a_i - \\sum \\limits_{i=1}^n a_i)\\] <p>\u8003\u616e \\(x_i,y_i\\) \u7684\u95dc\u4fc2\uff0c\u5c07 \\(a\\) \u5c0f\u5230\u5927\u6392\u5e8f\u5f8c\uff0c\u6703\u767c\u73fe  \\(x_i,y_i\\) \u6070\u597d\u662f\u4e00\u500b\u5728\u524d \\(n\\) \u500b\uff0c\u4e00\u500b\u5728\u5f8c \\(n\\) \u500b\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f </p> \\[\\binom{2n}{n}\\times (\\sum \\limits_{i=n+1}^{2n}a_i - \\sum \\limits_{i=1}^n a_i)\\] comb 8-10 <p>\u7d66\u5b9a\u56db\u500b\u6578\u5b57 \\(a,b,c,l\\)\uff0c\u554f\u540c\u6642\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6\u7684 tuple\\((i,j,k)\\) \u6709\u5e7e\u7a2e</p> <ul> <li> <p>\\((i+a,j+b,k+c)\\) \u53ef\u69cb\u6210\u9762\u7a4d\u5927\u65bc 0 \u7684\u4e09\u89d2\u5f62\u7684\u4e09\u908a\u9577</p> </li> <li> <p>\\(i+j+k\\le l\\)</p> </li> </ul> \u601d\u8def <p>\u9019\u984c\u70ba\u6392\u5bb9\u539f\u7406\u7684\u61c9\u7528\uff0c\u4e3b\u8981\u96e3\u9ede\u5728\u63a8\u5f0f\u5b50\uff0c\u5229\u7528\u300c\u6240\u6709\u7684\u7d44\u5408\u60c5\u6cc1 - \u4e0d\u6eff\u8db3\u689d\u4ef6\u7684\u60c5\u6cc1\u300d\u8a08\u7b97\u7b54\u6848\u3002</p> <ol> <li>\u6240\u6709\u7684\u7d44\u5408\u60c5\u6cc1</li> </ol> <p>\\(l=i\\) \u6642\uff0c\u70ba \\(n\\) \u500b\u540c\u7269\u5206 3 \u500b\u4e0d\u540c\u7bb1\uff0c\u65b9\u6cd5\u6578 \\(C^{i+2}_2\\)\uff0c\u679a\u8209 \\(i=0\\ldots l\\) \u52a0\u7e3d\u3002</p> <ol> <li> <p>\u4e0d\u6eff\u8db3\u689d\u4ef6\u7684\u60c5\u6cc1\uff1a</p> <p>\u4e09\u89d2\u5f62\u9808\u6eff\u8db3\u5169\u908a\u4e4b\u548c\u5927\u65bc\u7b2c\u4e09\u908a\uff0c\u4e0d\u6eff\u8db3\u6642\u5247\u7b2c\u4e09\u908a\u5927\u65bc\u7b49\u65bc\u5176\u5b83\u5169\u908a\u4e4b\u548c\u3002\u679a\u8209 \\(a, b, c\\) \u7576\u7b2c\u4e09\u908a\u7684\u60c5\u6cc1\uff0c\u8a08\u7b97\u4e0d\u5408\u6cd5\u7684\u60c5\u6cc1\u3002\u5c0d\u65bc\u5408\u6cd5\u7684\u60c5\u6cc1\uff0c\u8a2d a + i, b + j, c + k \u8981\u5f62\u6210\u4e09\u89d2\u5f62\uff0c\u82e5 a+i \u662f\u6700\u5927\u908a\uff0c\u5247:</p> </li> </ol> \\[ \\begin{cases} (a+i) &lt; (b+j) + (c+k) \\\\ i+j+k\\le l \\end{cases} \\] <p>\u4e0d\u5408\u6cd5\u7684\u60c5\u6cc1\u5c31\u662f</p> \\[ \\begin{cases} (a+i) \\ge (b+j) + (c+k) \\\\ i+j+k\\le l \\end{cases} \\] <p>\u7576\u6211\u5011\u56fa\u5b9a a+i \u5f8c\uff0cj, k \u7684\u7bc4\u570d\u5c31\u662f</p> \\[ \\begin{cases} j+k\\le a-b-c+i  \\\\ j+k\\le i+l \\end{cases} \\] <p>\u4ee4 \\(j+k\\le x\\)\uff0c\u90a3\u9ebc </p> <ul> <li> <p>\\(j=0\\) \u6642\uff0c\\(k=0\\ldots x\\)\uff0c\u5171 \\(x+1\\) \u7a2e\u53ef\u80fd</p> </li> <li> <p>\\(j=1\\) \u6642\uff0c\\(k=0\\ldots (x-1)\\)\uff0c\u5171 \\(x\\) \u7a2e\u53ef\u80fd</p> </li> <li> <p>...</p> </li> <li> <p>\\(j=x\\) \u6642\uff0c\\(k=0\\)\uff0c\u5171 \\(1\\) \u7a2e\u53ef\u80fd</p> </li> </ul> <p>\u6240\u4ee5\u7e3d\u5171 \\(1+\\ldots +(x+1)=\\frac{(x+2)\\times (x+1)}{2}\\)</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nlong long cal(long long a, long long b, long long c, long long l) {\n    long long ans = 0;\n    for (long long i = max(b + c - a, 0LL); i &lt;= l; i++) {\n        long long x = min(l - i, a + i - b - c);\n        ans += (1 + x) * (2 + x) / 2;\n    }\n    return ans;\n}\n\nint main() {\n    long long a, b, c, l;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; l;\n    long long ans = 0;\n    for (long long i = 0; i &lt;= l; i++) ans += (i + 1) * (i + 2) / 2;\n    ans -= cal(a, b, c, l);\n    ans -= cal(b, a, c, l);\n    ans -= cal(c, a, b, l);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> CSES - Grid Paths <p>\u7d66\u4e00\u500b \\(n\\times n\\) \u7684 Grid\uff0c\u4e00\u958b\u59cb\u5728 \\((1, 1)\\)\uff0c\u76ee\u6a19\u8d70\u5230 \\((n,n)\\)\u3002\u7d66 \\(m\\) \u500b\u653e\u7f6e\u969c\u7919\u7269\u7684\u4f4d\u7f6e\uff0c\u53ea\u80fd\u5f80\u5de6\u6216\u5f80\u53f3\uff0c\u554f\u5728\u4e0d\u7d93\u904e\u969c\u7919\u7269\u7684\u524d\u63d0\u4e0b\u6709\u5e7e\u7a2e\u8d70\u6cd5</p> <p>\\(n\\le 10^6, m\\le 1000\\)</p> \u601d\u8def <p>dp(i) = \u8d70\u5230 i \u5408\u6cd5\u7684\u8def\u5f91\u6578</p> <p>\u8f49\u79fb\u5f0f\u7684\u8a71\uff0c\u5c31\u662f\u300c\u5168 - \u8d70\u5230 j \u4e4b\u5f8c\u624d\u4e0d\u5408\u6cd5\u7684\u8def\u5f91\u6578\u91cf\u300d</p> \\[dp(i)=\\binom{x+y-2}{x-1}-\\sum\\limits_{x_j \\leq x_i, y_j \\leq y_i}{dp_j \\times \\binom{x_i - x_j + y_i - y_j}{x_i - x_j}}\\] <p>\u6700\u5f8c\u7684\u7b97\u7b54\u6848\u53ef\u4ee5\u5728\u7d42\u9ede\u653e\u4e00\u500b\u969c\u7919\u7269\uff0c\u7b54\u6848\u5c31\u662f dp(m + 1)</p> CF 1342 E. Placing Rooks <p>\u7d66\u4e00\u500b n * n \u7684\u68cb\u76e4\u683c\uff0c\u554f\u8981\u653e n \u500b\u300c\u8eca\u300d\uff0c\u4e26\u4e14\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6\uff0c\u6709\u5e7e\u7a2e\u653e\u6cd5</p> <ul> <li> <p>\u6bcf\u4e00\u500b\u7a7a\u683c\u5b50\u90fd\u80fd\u88ab\u81f3\u5c11\u4e00\u500b\u8eca\u8d70\u5230</p> </li> <li> <p>\u6070\u597d\u5b58\u5728 k \u7d44\u80fd\u4e92\u76f8\u8d70\u5230\u7684\u8eca</p> </li> </ul> <p>\\(n\\le 2\\times 10^5, 0\\le k\\le \\frac{n(n-1)}{2}\\)</p> \u601d\u8def <p>\u3010\u89c0\u5bdf\u3011: \u5408\u6cd5\u5fc5\u5b9a\u6eff\u8db3\u6bcf\u4e00\u5217\u6216\u6bcf\u4e00\u884c\u90fd\u6709\u4e00\u500b\u8eca</p> <p>\u8b49\u660e: \u5047\u8a2d\u7b2c i \u5217\u6c92\u6709\u8eca\uff0c\u56e0\u70ba\u6bcf\u4e00\u500b\u683c\u5b50\u90fd\u8981\u88ab\u653b\u64ca\u5230\uff0c\u6240\u4ee5\u7b2c i \u5217\u4e0a\u7684\u6bcf\u4e00\u500b\u683c\u5b50\u90fd\u8981\u88ab\u653b\u64ca\u5230\uff0c\u56e0\u70ba\u7b2c i \u5217\u4e0a\u6c92\u6709\u8eca\uff0c\u6240\u4ee5 \u61c9\u8a72\u88ab\u540c\u884c\u7684\u8eca\u653b\u64ca\u5230\uff0c\u6240\u4ee5\u6b64\u6642\u6bcf\u4e00\u884c\u90fd\u6709\u8eca\u3002</p> <p>\u5047\u8a2d\u6240\u6709 row \u90fd\u6709\u8eca\uff0c\u90a3\u9ebc\u6211\u5011\u5c31\u53ea\u8981\u8003\u616e column \u5c31\u597d\uff0c\u82e5\u6211\u5011\u628a\u6240\u6709\u8eca\u90fd\u653e\u5728\u4e86 1 \u500b column\uff0c\u5247\u6703\u7522\u751f n - 1 \u7d44\u4e92\u76f8\u8d70\u5230\u7684\u8eca\uff0c\u82e5\u6211\u5011\u628a\u6240\u6709\u8eca\u653e\u5728\u4e86 2 \u500b column\uff0c\u5247\u6703\u7522\u751f n - 2 \u7d44\u4e92\u76f8\u8d70\u5230\u7684\u8eca\uff0c...\u3002\u89c0\u5bdf\u5230\u9700\u8981\u7684 column \u8ddf\u7522\u751f\u7684 pair \u76f8\u52a0\u6070\u70ba n\uff0c\u4ee3\u8868\u82e5\u6211\u5011\u60f3\u8981\u7522\u751f k \u7d44\u4e92\u76f8\u8d70\u5230\u7684\u8eca\uff0c\u5247\u5fc5\u5b9a\u8981\u653e n - k \u500b column\u3002</p> <p>\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\((n-k)^n\\) \u55ce ? \u4f46\u9019\u6a23\u6703\u7b97\u5230\u6709 1 \u500b\u7a7a\u884c\u7684\u60c5\u6cc1\uff0c\u9084\u9700\u8981\u518d\u52a0\u4e0a 2 \u500b\u7a7a\u884c\u7684\u60c5\u6cc1\uff0c\u6e1b\u6389 3 \u500b\u7a7a\u884c\u7684\u60c5\u6cc1\uff0c...</p> <p>\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\((n-k)^n-(n-k-1)^n C^{n-k}_1+(n-k-2)^n C^{n-k}_2 \\ldots\\)\uff0c\u9084\u8981\u8a18\u5f97\u518d\u4e58\u4e0a\u9078 k \u500b column \u7684\u65b9\u6cd5\u6578 \\(C^{n}_{n-k}\\)\uff0c\u548c\u63db\u56fa\u5b9a column \u8981 * 2</p> <p>\u7279\u5224: </p> <ul> <li> <p>\u7576 k &gt;= n \u6642\uff0c\u4e0d\u53ef\u80fd\u6709\u5408\u6cd5\u89e3\uff0c\u7b54\u6848\u70ba 0</p> </li> <li> <p>\u7576 k = 0 \u6642\uff0c\u76f8\u7576\u65bc\u53ef\u4ee5\u653e n \u500b column\uff0c\u9019\u6642\u56fa\u5b9a row \u8ddf\u56fa\u5b9a column \u662f\u4e00\u6a23\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u4e0d\u7528 * 2</p> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define mk make_pair\n#define pb push_back\nusing namespace std;\n\nint fastpow(int a, int b, int m) {\n    int ret = 1;\n    while (b != 0) {\n        if (b &amp; 1) ret = ret * a % m;\n        a = a * a % m;\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nconst int MAXN = 3e6 + 5;\nconst int M = 998244353;\nint prei[MAXN], pinv[MAXN], pref[MAXN];\n\nvoid build() {\n    prei[0] = prei[1] = pinv[0] = pinv[1] = pref[0] = pref[1] = 1;\n    for (int i = 2; i &lt; MAXN; i++) {\n        pref[i] = pref[i - 1] * i % M;\n        pinv[i] = (M - (M / i) * pinv[M % i] % M) % M;\n        prei[i] = prei[i - 1] * pinv[i] % M;\n    }\n}\n\nint C(int n, int k) {\n    return pref[n] * prei[k] % M * prei[n - k] % M;\n}\n\nsigned main() {\n    int n, m, k;\n    build();\n    cin &gt;&gt; n &gt;&gt; k;\n    if (k &gt; n - 1) {\n        cout &lt;&lt; 0;\n        exit(0);\n    }\n    int ans = 0;\n    for (int i = 0; i &lt;= n - k; i++) {\n        ans += ((i &amp; 1) ? -1 : 1) * fastpow((n - k) - i, n, M) * C(n - k, i) % M;\n        ans = (ans % M + M) % M;\n    }\n    ans = (ans * C(n, n - k)) % M;\n    if (k) {\n        ans = (ans * 2) % M;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> \u505c\u8eca\u554f\u984c <p>\u505c\u8eca\u5834\u6709 n \u500b\u7a7a\u7684\u505c\u8eca\u4f4d\uff0c\u4f9d\u5e8f\u7de8\u865f 1, 2, ..., n\uff0c\u6709 n \u81fa\u8eca\u60f3\u9032\u53bb\u505c\u8eca\uff0c\u7b2c i \u53f0\u8eca\u60f3\u505c\u5728 p[i] \u9019\u500b\u4f4d\u7f6e\uff0c\u82e5 p[i] \u9019\u500b\u4f4d\u7f6e\u5df2\u7d93\u505c\u8eca\u7684\u8a71\uff0c\u5c31\u6703\u958b\u5230 p[i] \u4e4b\u5f8c\u7b2c\u4e00\u500b\u7a7a\u7684\u505c\u8eca\u4f4d\uff0c\u5982\u679c\u90fd\u6c92\u6709\u9019\u53f0\u8eca\u5c31\u6703\u96e2\u958b\u3002\u6c42\u591a\u5c11\u500b permutation p[1], ..., p[n] \u53ef\u4f7f\u6bcf\u4e00\u53f0\u8eca\u6700\u7d42\u90fd\u5728\u505c\u8eca\u5834\u4e2d</p> \u601d\u8def <p>\u5c07\u503c\u57df\u8b8a\u6210 {1, ..., n + 1}\uff0c\u7b54\u6848\u4f9d\u7136\u4e0d\u8b8a\uff0c\u56e0\u70ba</p> <ul> <li>\u6709\u7528\u5230\u74b0\u72c0\u529f\u80fd \u2192 \u4ee3\u8868 n + 1 \u5df2\u7d93\u505c\u8eca \u2192 \u4e0d\u5408\u6cd5<ul> <li>\u21d2 \u5408\u6cd5\u89e3\u4e0d\u6703\u7528\u5230\u74b0\u72c0\u529f\u80fd</li> </ul> </li> </ul> <p>\u767c\u73fe n + 1 \u7d44\u4e00\u500b\u5faa\u74b0\uff0c\u7b54\u6848\u70ba \\(\\frac{(n + 1) ^ n}{n+1}\\)</p> 2018 \u5168\u570b\u8cfd pC. \u5e73\u5747\u8b8a\u7570\u6b21\u6578 <p>\u5df2\u77e5\u9577\u5ea6 n \u7684\u5b57\u4e32\u5167\uff0c\u6709 k \u500b\u76f8\u7570\u7684\u5b57\u5143\uff0c\u7b2c i \u7a2e\u5b57\u5143\u6709 c[i] \u500b\uff0c\u554f\u6240\u6709 permutation \u7576\u4e2d\uff0c\u76f8\u9130\u4e0d\u540c\u7684\u5b57\u5143\u5c0d\u7684\u5e73\u5747\u70ba\u4f55 ?</p> <p>\\(n,k \\le 1000\\)</p> \u601d\u8def <p>\u5148\u55ae\u770b\u7b2c\u4e00\u500b\u8207\u7b2c\u4e8c\u500b\u5b57\u5143\u76f8\u7570\u7684\u6a5f\u7387\u70ba</p> <p> (c[1] / n) * ((n - c[1]) / (n - 1)) + (c[2] / n) * ((n - c[2]) / (n - 1)) + ... </p> <p>\u800c\u6bcf\u500b gap \u7684\u76f8\u7570\u6a5f\u7387\u90fd\u662f\u4e00\u6a23\u7684\uff08\u985e\u4f3c\u62bd\u7c64\u8ddf\u9806\u5e8f\u7121\u95dc\uff0c\u662f\u4e00\u500b\u5e73\u5747\u8d77\u4f86\u7684\u6982\u5ff5\uff09\uff0c\u6240\u4ee5\u5c07\u4e0a\u9762\u7684\u5f0f\u5b50\u4e58\u4e0a n - 1 \u5c31\u662f\u7b54\u6848</p>"},{"location":"math/comb/#_21","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>https://zhuanlan.zhihu.com/p/609104268</li> </ul> <ol> <li> <p>\u4f8b\u5982 (D), (A, B, C)\uff0c\u898b\u6b64\u5716 \u21a9</p> </li> <li> <p>\u898b\u6b64\u5716 \u53c3\u8003\u81ea stackexchange \u535a\u5ba2 \u21a9</p> </li> </ol>"},{"location":"math/crt/","title":"\u4e2d\u570b\u5269\u9918\u5b9a\u7406","text":""},{"location":"math/crt/#_1","title":"\u4e92\u8cea","text":"\u4e92\u8cea\u7684\u7248\u672c <p>\u7d66\u4f60\u4e00\u5957\u65b9\u7a0b\u7d44\u5982\u4e0b\uff0c\u5176\u4e2d\u6a21\u6578 \\(k_i\\) \u5169\u5169\u4e92\u8cea\uff0c\u6c42\u51fa\u6700\u5c0f\u6b63\u6574\u6578\u89e3 \\(x\\) \uff0c\u5982\u679c\u6c92\u6709\u5247\u8f38\u51fa \\(-1\\)</p> \\[ \\begin{align} \\begin{aligned} x &amp;\\equiv p_1 \\pmod {k_1} \\\\ x &amp;\\equiv p_2 \\pmod {k_2} \\\\ &amp;\\ \\vdots \\\\ x &amp;\\equiv p_n \\pmod {k_n} \\end{aligned} \\end{align} \\]"},{"location":"math/crt/#_2","title":"\u60f3\u6cd5","text":"<p>\u5148\u8003\u616e\u5169\u500b\u5f0f\u5b50\u7684\u7248\u672c</p> \\[ \\begin{align} x &amp;\\equiv p_1 \\pmod {k_1} \\\\ x &amp;\\equiv p_2 \\pmod {k_2} \\\\ \\end{align} \\] <p>\u7531\u65bc \\(\\gcd(k_1,k_2)=1\\)\uff0c\u6240\u4ee5 \\(x\\) \u7684\u5f62\u5f0f\u6703\u662f \\(x=t\\times k_1\\times k_2+P\\)\u3002\u6211\u5011\u5217\u51fa </p> \\[x \\pmod{k_1\\times k_2}  \\equiv P\\] <p>\u6211\u5011\u73fe\u5728\u8981\u4f86\u8a08\u7b97 \\(P\\)\uff0c\u4f7f\u5f97 \\(\\begin{cases} P \\pmod{k_1} \\equiv p_1 \\\\ P \\pmod{k_2} \\equiv p_2 \\end{cases}\\)</p> <p></p> \\[\\Rightarrow P=p_1\\times k_2\\times (k_2^{-1} \\pmod{k_1}) + p_2 \\times k_1 \\times (k_1^{-1}\\pmod{k_2})\\]"},{"location":"math/crt/#_3","title":"\u5be6\u4f5c","text":"pseudocode <pre><code>pair&lt;int, int&gt; CRT(int k1, int p1, int k2, int p2) {\n    int K = k1 * k2;\n    int P = (p1 * k2 * get_inv(k2, k1) + p2 * k1 * get_inv(k1, k2));\n    P = (P % K + K) % K;\n    return {K, P};\n}\n</code></pre> \u4e92\u8cea\u6a21\u677f\u6e2c\u8a66 LOJ 10212 #10212. \u300c\u4e00\u672c\u901a 6.4 \u4f8b 4\u300d\u66f9\u51b2\u517b\u732a <p>\u7d66\u597d n \u500b x % a[i] = b[i]\uff0ca[i] \u5169\u5169\u4e92\u8cea\uff0c\u554f\u6700\u5c0f\u7684 x</p> <p>\\(n\\le 10, 1\\le b_i\\le a_i\\le 1000\\)</p> \u5be6\u4f5c\u7d30\u7bc0 <p>\u53ef\u80fd\u6703 overflow\uff0c\u8981\u958b <code>__int128</code></p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\npair&lt;int, int&gt; extgcd(int a,int b) {\n    if (b == 0) {\n        // a * x + 0 * y = gcd(a, 0) = a\n        return {1, 0};\n    }\n    auto p = extgcd(b, a % b);\n    return {p.S, p.F - (a / b) * p.S};\n}\n\nint get_inv(int a, int m) {\n    pair&lt;int, int&gt; p = extgcd(a, m);\n    int x = p.F;\n    return (x % m + m) % m;\n}\n\npair&lt;int, int&gt; CRT(int k1, int p1, int k2, int p2) {\n    int K = k1 * k2;\n    int P = ((__int128)((p1 * k2) % K) * get_inv(k2, k1)) % K \n                + ((__int128)((p2 * k1) % K) * get_inv(k1, k2)) % K;\n    P = (P % K + K) % K;\n    return {K, P};\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    pair&lt;int, int&gt; cur;\n    for (int i = 1; i &lt;= n; i++) {\n        int k, p;\n        cin &gt;&gt; k &gt;&gt; p; // x % k = p\n        if (i == 1) {\n            cur.F = k, cur.S = p;\n        } else {\n            cur = CRT(cur.F, cur.S, k, p);\n        }   \n    }\n    cout &lt;&lt; cur.S &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"math/crt/#_4","title":"\u4e0d\u4e92\u8cea","text":"\u4e0d\u4e92\u8cea\u7684\u7248\u672c <p>\u7d66\u4f60\u4e00\u5957\u65b9\u7a0b\u7d44\u5982\u4e0b\uff0c\u5176\u4e2d\u6a21\u6578 \\(k_i\\) \u4e0d\u4e00\u5b9a\u4e92\u8cea\uff0c\u6c42\u51fa\u6700\u5c0f\u6b63\u6574\u6578\u89e3 \\(x\\) \uff0c\u5982\u679c\u6c92\u6709\u5247\u8f38\u51fa \\(-1\\)</p> \\[ \\begin{align} \\begin{aligned} x &amp;\\equiv p_1 \\pmod {k_1} \\\\ x &amp;\\equiv p_2 \\pmod {k_2} \\\\ &amp;\\ \\vdots \\\\ x &amp;\\equiv p_n \\pmod {k_n} \\end{aligned} \\end{align} \\]"},{"location":"math/crt/#_5","title":"\u60f3\u6cd5","text":"<p>\u5148\u4ee5\u5169\u5169\u4f86\u770b</p> \\[\\begin{cases} x\\equiv p_1\\pmod {k_1} \\\\x\\equiv p_2\\pmod {k_2} \\end{cases}\\] <p>\\(\\Rightarrow \\begin{cases} x=k_1x_1+p_1 \\tag{1} \\\\x=k_2x_2+p_2 \\end{cases}\\)</p> <p>\\(k_1x_1+p_1=k_2x_2+p_2\\)</p> <p>\\(k_1x_1+k_2(-x_2)=p_2-p_1\\space \\space \\space \\space \\text{(1)}\\)</p> <p>\u6211\u5011\u4e0b\u9762\u4e3b\u8981\u8981\u89e3\u7684\u662f \\(x_1\\) \u6240\u4ee5\u8ddf \\(x_2\\) \u4fc2\u6578\u7684\u6b63\u8ca0\u6c92\u4ec0\u9ebc\u95dc\u897f\uff0c\u6240\u4ee5\u4ee5\u4e0b\u90fd\u5beb\u6b63\u865f</p> <p>\u8c9d\u7956\u5b9a\u7406: \u5728 \\(ax+by=m\\) \u4e2d\uff0c \u82e5\u4e14\u552f\u82e5 \\(m\\) \u662f \\(a\\) \u53ca \\(b\\) \u7684\u6700\u5927\u516c\u56e0\u6578 \\(\\gcd(a,b)\\) \u7684\u500d\u6578\uff0c\u6709\u6574\u6578\u89e3</p> <p>\u82e5 \\(x_1,x_2\\) \u6709\u89e3\uff0c\u5247 \\(\\gcd(k_1,k_2) \\mid p_2-p_1\\) \uff0c \u5982\u679c\u4e0d\u662f\u7684\u8a71\u4ee3\u8868\u7121\u89e3</p> <p>\u4ee4 \\(\\gcd(k_1,k_2)=d\\)\uff0c\u8207 \\(p_2 - p_1 = c\\)</p> <p>\\(\\Rightarrow \\frac{k_1}{d} \\times x_1 + \\frac{k_2}{d} \\times x_2 = \\frac{c}{d} \\space \\space \\space \\space \\text{(2)}\\)</p> <p>\u5176\u4e2d \\(\\frac{k_1}{d}\\) \u8207 \\(\\frac{k_2}{d}\\) \u4e92\u8cea</p> <p>\u8a2d \\(x^\\prime_1\\) \u70ba \\(\\frac{k_1}{d} \\times x^\\prime_1 + \\frac{k_2}{d} \\times x^\\prime_2 = 1\\) \u7684\u89e3\uff0c\u9019\u500b\u53ef\u4ee5\u7528 extgcd \u7b97\u51fa\u4f86\u3002\u6545 \\((2)\\) \u5f0f\u4e2d \\(x_1\\) \u7684\u89e3\u70ba \\(x_1 = \\frac{c}{d} \\times x^\\prime_1\\)\u3002\u5c07 \\(x_1 = \\frac{c}{d} \\times x^\\prime_1\\) \u4ee3\u56de \\((1)\\)\uff0c\u4e0d\u904e\u5be6\u4f5c\u4e0a\u9019\u908a\u8981 \\(x_1\\) \u53ef\u80fd\u6703 overflow\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u4f7f \\(x_1\\) \u88e1\u9762 \\(\\frac{k_2}{d}\\) \u7684\u6574\u6578\u500d\u5206\u5230 \\(x_2\\)<sup>1</sup>\uff0c\u7562\u7adf\u6211\u5011\u4e0d\u9700\u7dad\u8b77 \\(x_2\\)\uff0c\u4e5f\u5c31\u4e0d\u6703\u6709 overflow \u7684\u554f\u984c\u3002\u6240\u4ee5 \\(x_1 \\equiv \\frac{c}{d} \\times x^\\prime_1 \\pmod{\\frac{k_2}{d}}\\)\u3002</p> <p>\u6700\u5f8c\uff0c\u6211\u5011\u5f97\u5230\u65b0\u7684\u9650\u5236\u5f0f :</p> \\[x\\equiv k_1 \\times x_1 + p_1 \\pmod{\\text{lcm}(k_1,k_2)}\\]"},{"location":"math/crt/#_6","title":"\u5be6\u4f5c","text":"pseudocode <pre><code>pair&lt;int, int&gt; CRT(int k1, int p1, int k2, int p2) {\n    int c = p2 - p1; \n    int d = __gcd(k2, k1);\n    assert(c % d == 0); // c % d != 0 \u7121\u89e3\n\n    int x = (c * extgcd(k1/d, k2/d).F) / d % (k2 / d);\n\n    int K = (k1 * k2) / d; // lcm = (a * b) / gcd(a, b)\n    int P = (p1 + k1 * x) % K; \n\n    return {K, ((P &gt; 0) ? P : P + K)};\n}\n</code></pre> \u4e0d\u4e92\u8cea\u6a21\u677f\u6e2c\u8a66 \u6d1b\u8c37 P4777 \u3010\u6a21\u677f\u3011\u6269\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff08EXCRT\uff09 <p>\u7d66\u597d n \u500b x % a[i] = b[i]\uff0ca[i] \u4e0d\u4e00\u5b9a\u5169\u5169\u4e92\u8cea\uff0c\u554f\u6700\u5c0f\u7684 x</p> <p>\\(n\\le 10, 1\\le b_i\\le a_i\\le 1000\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\nusing namespace std;\n\nint p[100005], k[100005]; \nint n;\n\npair&lt;int, int&gt; extgcd(int a,int b) {\n    if (b == 0) {\n        // a * x + 0 * y = gcd(a, 0) = a\n        return {1, 0};\n    }\n    auto p = extgcd(b, a % b);\n    return {p.S, p.F - (a / b) * p.S};\n}\n\npair&lt;int, int&gt; CRT(int k1, int p1, int k2, int p2) {\n    int c = p2 - p1; \n    int d = __gcd(k2, k1);\n\n    int x = (__int128) ((__int128) c * extgcd(k1/d, k2/d).F) / d % (k2 / d);\n\n    int K = (__int128) ((__int128) k1 * k2) / d;\n    int P = (__int128) (p1 + k1*x) % K; \n\n    return {K, ((P &gt; 0) ? P : P + K)};\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    pair&lt;int, int&gt; cur;\n    for (int i = 1; i &lt;= n; i++) {\n        int k, p;\n        cin &gt;&gt; k &gt;&gt; p; // x % k = p\n        if (i == 1) {\n            cur.F = k, cur.S = p;\n        } else {\n            cur = CRT(cur.F, cur.S, k, p);\n        }   \n    }\n    cout &lt;&lt; cur.S &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"math/crt/#_7","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>\u8cc7\u65991</li> <li> <p>\u8cc7\u65992</p> </li> <li> <p>https://hackmd.io/@coffee5427/CRT</p> </li> </ul> <ol> <li> <p>\u898b\u6b64\u8655 \u21a9</p> </li> </ol>"},{"location":"math/facts/","title":"\u56e0\u6578","text":""},{"location":"math/facts/#_1","title":"\u8cea\u6578\u6e2c\u8a66","text":"\u554f\u984c <p>\u6aa2\u67e5\u4e00\u500b\u6578 \\(n\\) \u662f\u5426\u70ba\u8cea\u6578</p> <p>\u6211\u5011\u53ea\u9700\u8981\u53bb\u679a\u8209\u5728 \\([2, \\sqrt{n}]\\)<sup>1</sup> \u5167\u7684\u6578\u662f\u5426\u80fd\u6574\u9664 \\(n\\) \u5373\u53ef\uff0c\u8907\u96dc\u5ea6 \\(O(\\sqrt{n})\\)</p> code <pre><code>bool isPrime(int n) {    \n    if (n == 1) return false;\n    for (int i = 2; i * i &lt;= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n     }\n     return true;\n}\n</code></pre>"},{"location":"math/facts/#_2","title":"\u56e0\u6578\u5206\u89e3","text":"\u8cea\u56e0\u6578\u5206\u89e3 <p>\u5c07 \\(n\\) \u505a\u8cea\u56e0\u6578\u5206\u89e3</p> <p>\u679a\u8209 \\(i = 2 \\ldots \\sqrt{n}\\)\uff0c\u82e5 \\(n/i\\) \u53ef\u4ee5\u6574\u9664\uff0c\u5247\u6301\u7e8c \\(n\\) /= \\(i\\) \u5c07 \\(n\\) \u4e2d\u7684\u8cea\u56e0\u6578 \\(i\\) \u90fd\u6d88\u6389\uff0c\u6700\u5f8c\u53ea\u6709 1 \u500b\u8cea\u56e0\u6578\u6703\u5927\u65bc\u7b49\u65bc \\(\\sqrt{n}\\)\uff0c\u5728\u7279\u5224\u5c31\u597d\u3002\u8907\u96dc\u5ea6 \\(O(\\sqrt{n})\\)</p> code <pre><code>vector&lt;int&gt; prime_factors(int n) {\n    vector&lt;int&gt; ret;\n    for (int i = 2; i * i &lt;= n; i++) {\n        if (n % i == 0) {\n            while (n % i == 0) {\n                ret.push_back(i);\n                n /= i;\n            }\n        }\n    }\n    if (n &gt; 1) ret.push_back(n);\n    return ret;\n}\n</code></pre>"},{"location":"math/facts/#_3","title":"\u7be9\u6cd5","text":"\u554f\u984c <p>\u7d66 \\(n\\)\uff0c\u554f \\(\\le n\\) \u7684\u6578\u5b57\u5167\u6709\u90a3\u4e9b\u6578\u662f\u8cea\u6578\u5462 ?</p>"},{"location":"math/facts/#_4","title":"\u57c3\u5f0f\u7be9\u6cd5","text":"<p>\u5f9e\u5c0f\u5230\u5927\u8003\u616e\u6bcf\u500b\u6578\uff0c\u82e5\u4ed6\u9084\u6c92\u88ab\u7be9\u6389\uff0c\u4ee3\u8868\u4ed6\u662f\u8cea\u6578\uff0c\u5247\u6211\u5011\u5c07\u4ed6\u7684\u500d\u6578\u90fd\u7be9\u6389\u3002 \u5982\u679c\u7528\u7c97\u4f30\uff0c\u6839\u64da\u8abf\u548c\u7d1a\u6578\uff0c\u5167\u8ff4\u5708\u6b21\u6578\u986f\u7136\u4e0d\u6703\u591a\u904e \\(O(n \\log n)\\)\u3002\u5be6\u4e0a\uff0c\u56e0\u70ba\u8cea\u6578\u5f88\u7a00\u758f\uff0c\u6709\u4eba\u7b97\u51fa\u4f86\u5b83\u662f \\(O(n \\log \\log n)\\)\u3002</p> code <pre><code>bitset&lt;MAXN&gt; is_prime;\n\nvoid sieve() {\n    is_prime.set();\n    is_prime[0] = is_prime[1] = false;\n    for (int i = 2; i &lt; MAXN; i++) {\n        if (!is_prime[i]) continue;\n        for (int j = i + i; j &lt; MAXN; j += i) {\n            is_prime[j] = false;\n        }\n    }\n}\n</code></pre>"},{"location":"math/facts/#_5","title":"\u7dda\u6027\u7be9\u6cd5","text":"<p>\u53ef\u4ee5\u767c\u73fe\u6709\u4e9b\u6578\u5b57\u6703\u88ab\u91cd\u8907\u7be9\u6389\u5f88\u591a\u6b21\u3002\u6211\u5011\u8b93\u6bcf\u500b\u6578\u5b57\u90fd\u53ea\u6703\u88ab\u6700\u5c0f\u7684\u8cea\u6578\u7be9\u6389\uff0c\u8907\u96dc\u5ea6 \\(O(n)\\)\u3002\u4f8b\u5982\u8aaa\u4e00\u500b\u6578\u5b57 n \u53ef\u4ee5\u8868\u793a\u6210 n = p * k\uff0c\u5176\u4e2d p \u662f n \u7684\u6700\u5c0f\u8cea\u56e0\u6578\uff0ck \u70ba\u5269\u4e0b\u4f86\u7684\u6578\u5b57\uff0cn \u5c31\u53ea\u6703\u88ab p * k \u9019\u500b\u7d44\u5408\u7d66\u7be9\u6389\u3002\u5047\u8a2d\u76ee\u524d\u8dd1\u5230 i\uff0c\u90a3\u9ebc\u6211\u5011\u5c31\u679a\u8209 j\uff0c\u8b93 i * prime[j] \u90fd\u6a19\u8a18\u70ba\u5408\u6578\uff08\u9019\u908a prime[j] \u5c31\u662f i * prime[j] \u7684\u6700\u5c0f\u8cea\u6578\uff0ci \u7684\u610f\u7fa9\u53ea\u662f\u4e0a\u9762\u7684 k \u800c\u5df2\uff09\uff0c\u7576\u8dd1\u5230 i % prime[j] == 0 \u7684\u6642\u5019\uff0c\u4ee3\u8868 i * prime[j + 1], i * prime[j + 2], ... \u7684\u6700\u5c0f\u8cea\u6578\u5c31\u4e0d\u6703\u662f prime[j + 1], prime[j + 2], ... \u800c\u662f prime[j]\uff0c\u4e5f\u5c31\u4ee3\u8868\u6211\u5011\u7e7c\u7e8c\u7be9\u7684\u8a71\u5c31\u4e0d\u80fd\u4fdd\u8b49\u6bcf\u500b\u6578\u5b57\u90fd\u53ea\u88ab\u7be9\u6389\u4e00\u6b21\u3002\u800c\u4e14\u9019\u4e9b\u6578\u5b57\u53ef\u4ee5\u8868\u793a\u6210 (\u6bd4 i \u5927\u7684\u6578\u5b57) * prime[j]\uff0c\u6240\u4ee5\u4e00\u5b9a\u6703\u5728\u5f8c\u9762\u8dd1\u5230\u3002 </p> <p>\u6211\u5011\u5c07\u7dda\u6027\u7be9\u6cd5\u6bcf\u4e00\u8f2a\u6703\u7be9\u6389\u7684\u6578\u5b57\u5217\u51fa\u4f86\u770b\u770b:</p> <p></p> <p>\u5f9e\u5716\u4e0a\u6211\u5011\u770b\u5230\uff0c\u7b2c\u4e00\u5217\u7be9\u6389\u7684\u662f\u6700\u5c0f\u8cea\u56e0\u6578\u662f 2 \u7684\u6578\uff0c\u7b2c\u4e8c\u5217\u7be9\u6389\u7684\u662f\u6700\u5c0f\u8cea\u56e0\u6578\u70ba 3 \u7684\u6578\uff0c\u4f9d\u6b21\u985e\u63a8\uff0c\u53ef\u4ee5\u628a\u6240\u6709\u7684\u5408\u6578\u90fd\u7be9\u6389\u3002</p> code <pre><code>bitset&lt;MAXN&gt; is_prime;\nvector&lt;int&gt; prime;\n\nvoid linear_sieve() {\n    is_prime.set(); \n    is_prime[0] = is_prime[1] = false;\n    for (int i = 2; i &lt; MAXN; i++) {\n        if (is_prime[i]) prime.push_back(i);\n        for (int j = 0; i * prime[j] &lt; MAXN; j++) {\n            is_prime[i * prime[j]] = false;\n            if (i % prime[j] == 0) break;\n        }\n    }\n}\n</code></pre>"},{"location":"math/facts/#_6","title":"\u61c9\u7528","text":"<p>\u57c3\u5f0f\u7be9\u6cd5\u96d6\u7136\u8907\u96dc\u5ea6\u8f03\u5dee\uff0c\u4f46\u80fd\u7528\u4f86\u8a08\u6578\uff0c\u5be6\u7528\u6027\u8f03\u9ad8\uff0c\u5f88\u591a\u554f\u984c\u80fd\u642d\u914d\u7be9\u6cd5\u52a0\u4e0a\u5176\u4ed6\u8cc7\u6599\u7d50\u69cb\u4f86\u8655\u7406\uff0c\u800c\u7dda\u6027\u7be9\u5c31\u53ea\u80fd\u7528\u4f86\u627e\u8cea\u6578</p> CSES - Counting Coprime Pairs <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217\uff0c\u554f\u4e92\u8cea\u7684 pair\\((a_i, a_j)\\) \u6709\u5e7e\u5c0d</p> <p>\\(n\\le 10^5, 1\\le a_i \\le 10^6\\)</p> \u601d\u8def <p>cnt[x] \u8868\u793a x \u7684\u500d\u6578\u6709\u5e7e\u500b\uff0cd(x) \u8868\u793a gcd \u662f x \u7684 pair \u6709\u5e7e\u500b\uff0c\\(d(x) = C^{cnt[x]}_2 - d(2\\times x) - d(3\\times x)-d(4\\times x)-\\ldots\\)\uff0c\u5f9e\u5927\u5230\u5c0f\u8dd1\u904e\u4f86\u5c31\u4e0d\u6703\u6709\u91cd\u8907\u7b97\u7684\u554f\u984c</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\n\nlong long cnt[maxn];\nlong long dp[maxn];\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1 ; i &lt;= n ; i++) {\n        int x;\n        cin &gt;&gt; x;\n        cnt[x]++;\n    }\n    for (int i = maxn ; i &gt;= 1 ; i--) {\n        long long tot = 0;\n        long long minus = 0;\n        for (int j = i ; j &lt;= maxn ; j += i) {\n            tot += cnt[j];\n            minus += dp[j];\n        }\n        dp[i] = tot * (tot - 1) / 2 - minus;\n    }\n    cout &lt;&lt; dp[1] &lt;&lt; '\\n';\n}\n</code></pre> \u985e\u984c <p>\u7d66 \\(n\\) \u500b\u4ecb\u65bc \\([1,M]\\) \u7684\u6574\u6578\uff0c\u8a08\u7b97\u6709\u5e7e\u5c0d\u6578\u5b57\u7684 \\(\\gcd\\) \u662f\u4e8c\u7684\u51aa\u6b21\u65b9\u3002\u8acb\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(M\\log M)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c</p> \u601d\u8def <p>\u76f4\u63a5\u8a08\u7b97\u6bcf\u500b\u6578\u5b57\u5206\u5225\u70ba\u591a\u5c11\u500b pair \u7684 gcd\u3002</p> <p>\u4f7f\u7528 DP</p> <ul> <li> <p>DP \u72c0\u614b</p> <p>dp(i) = gcd \u70ba i \u7684 pair \u6578\u91cf</p> </li> <li> <p>DP \u8f49\u79fb</p> <p>x \u70ba i \u7684\u500d\u6578\u6578\u91cf</p> <p>dp(i) = C(x,2) - dp(i\u22172) - dp(i\u22173) - ....</p> </li> <li> <p>DP \u7b54\u6848</p> <p>\u6240\u6709 2 \u7684\u51aa\u6b21 DP \u503c\u52a0\u7e3d</p> </li> <li> <p>\u6642\u9593\u8907\u96dc\u5ea6</p> <p>\u4f7f\u7528\u7be9\u6cd5\u5be6\u4f5c O(nlogn)</p> </li> </ul> code <pre><code>long long cnt[maxn];\nlong long dp[maxn];\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1 ; i &lt;= n ; i++) {\n        int x;\n        cin &gt;&gt; x;\n        cnt[x]++;\n    }\n    long long ans = 0;\n    for (int i = 1000000 ; i &gt;= 1 ; i--) {\n        long long tot = 0;\n        long long mi = 0;\n        for (int j = i ; j &lt;= 1000000 ; j += i) {\n            tot += cnt[j];\n            mi += dp[j];\n        }\n        dp[i] = tot * (tot - 1) / 2 - mi;\n        if (__builtin_popcount(i) == 1) {\n            ans += dp[i];\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> CSES - Prime Multiples <p>\u7d66 \\(k\\) \u500b\u5169\u5169\u76f8\u7570\u7684\u8cea\u6578 \\(a_1,\\ldots, a_k\\)\uff0c\u554f \\(1\\ldots n\\) \u6709\u591a\u5c11\u500b\u6578\u5b57\u53ef\u88ab\u81f3\u5c11\u4e00\u500b\u7d66\u5b9a\u7684\u8cea\u6578\u6574\u9664</p> <p>\\(n\\le 10^{18},k\\le 20,2\\le a_i\\le n\\)</p> \u601d\u8def <p>\u56e0\u70ba k = 20\uff0c\u6211\u5011\u53ef\u4ee5\u679a\u8209\u7528\u5230\u7684\u8cea\u6578\uff0c\u770b\u5728 [1, n] \u5167\uff0c\u540c\u6642\u64c1\u6709\u9019\u4e9b\u8cea\u6578\u7684\u6578\u5b57\u6709\u5e7e\u500b</p> <p>\u53ef\u662f\u9019\u6a23\u6703\u7b97\u5230\u91cd\u8907\u7684\uff0c\u6211\u5011\u5229\u7528\u6392\u5bb9\u539f\u7406\uff0c\u5c07\u770b\u96c6\u5408\u5927\u5c0f\u7684\u5947\u5076\u6027\u4f86\u5224\u65b7\u662f\u52a0\u662f\u6e1b</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 2e5 + 5;\nint n, k;\nint a[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 0; i &lt; k; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    int ans = 0;\n    for (int mask = 1; mask &lt; (1 &lt;&lt; k); mask++) {\n        int x = 1;\n        int sz = __builtin_popcountll(mask);\n        for (int i = 0; i &lt; k; i++) {\n            if (mask &amp; (1 &lt;&lt; i)) {\n                if (x * a[i] &gt; n) {\n                    // \u8d85\u904e\u7bc4\u570d\u4e86\u4e0d\u7528\u7b97\n                    x = n + 1;\n                    break;\n                }\n                x *= a[i];\n            }\n        }\n        // n/x \u70ba x \u7684\u500d\u6578\u500b\u6578\n        if (sz &amp; 1) {\n            ans += n / x;\n        } else {\n            ans -= n / x;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"math/facts/#_7","title":"\u56e0\u6578","text":"n \u7684\u56e0\u6578\u6578\u91cf\u5e73\u5747\u6709 O(log n) \u500b <p>\u6839\u64da\u7be9\u6cd5\uff0c1~n \u7684\u56e0\u6578\u500b\u6578\u7e3d\u548c\u70ba O(n log n)\uff0c\u4e5f\u5c31\u662f\u5e73\u5747\u6709 O(log n) \u500b\u56e0\u6578</p> \\(n\\) \u7684\u56e0\u6578\u6578\u91cf\u4e0a\u9650\u53ef\u4ee5\u7528 \\(O(n^{1/3})\\) \u4f86\u4f30\u8a08 <p>\u898b CF Blog</p>"},{"location":"math/facts/#_8","title":"\u56e0\u6578\u500b\u6578,\u548c,\u4e58\u7a4d","text":"CSES - Divisor Analysis <p>\u7d66 \\(p_1, \\ldots ,p_n\\)\uff0c\u8207 \\(k_1, \\ldots ,k_n\\)\uff0c\u4ee3\u8868 \\(x=p_1^{k_1}\\times p_n^{k_n}\\)\uff0c\u6c42 \\(x\\) \u7684:</p> <ul> <li> <p>\u56e0\u6578\u500b\u6578</p> </li> <li> <p>\u56e0\u6578\u548c</p> </li> <li> <p>\u56e0\u6578\u4e58\u7a4d</p> </li> </ul> <p>\\(n\\le 10^5, 2\\le p_i\\le 10^6, 1\\le k_i\\le 10^9\\)</p> \u601d\u8def <p>\u56e0\u6578\u500b\u6578</p> <p>\u6839\u64da\u516c\u5f0f\uff0c\u56e0\u6578\u500b\u6578 \\((k_1 +1)\\times (k_2 + 1) \\times (k_3 + 1)\\times ..\\)</p> <p>\u56e0\u6578\u548c</p> <p>\u5c0d\u65bc\u6bcf\u500b\u8cea\u56e0\u6578\u6211\u5011\u90fd\u53ef\u4ee5\u7528\u7b49\u6bd4\u7d1a\u6578\u548c\u516c\u5f0f\u5c07\u4ed6\u52a0\u8d77\u4f86\uff0c\u4f8b\u5982 \\(12=2^2\\times 3^1\\)\uff0c\\(\\texttt{sum}=(2^0+2^1+2^2)\\times (3^0+3^1)\\)\uff0c\\((2^0+2^1+2^2)\\) \u5c31\u53ef\u4ee5\u7528 \\(\\displaystyle \\frac{a\\times (r^n - 1)}{r - 1}\\) \u5c07\u4ed6\u52a0\u8d77\u4f86</p> <p>\u56e0\u6578\u4e58\u7a4d</p> <p>\u4e5f\u5c31\u662f\u8981\u8a08\u7b97 \\(x^{d \\div 2}\\)\uff0c\u5176\u4e2d \\(d=(k_1 +1)\\times \\ldots \\times (k_n + 1)\\)\uff0c\u56e0\u70ba\u53ef\u4ee5\u89c0\u5bdf\u5230\u5c31\u662f\u56e0\u6578\u4e58\u7a4d\u597d\u5e7e\u500b\u4e58\u8d77\u4f86\u662f \\(x\\) \u7684 pair\u3002\u6211\u5011\u4ee5\u4e0b\u5206 case \u8a0e\u8ad6:</p> <ul> <li> <p>\u7576 \\(d\\) \u662f\u5947\u6578</p> <ul> <li>\u4ee3\u8868 \\(k_1, \\ldots ,k_n\\) \u90fd\u662f\u5076\u6578</li> <li>\u53ef\u4ee5\u628a \\(x^{d \\div 2}\\) \u62c6\u6210 \\(\\sqrt{x}^{d}\\)</li> </ul> </li> <li> <p>\\(d\\) \u662f\u5076\u6578</p> <ul> <li>\u76f4\u63a5\u628a\u67d0\u500b\u70ba\u5076\u6578\u7684 \\(k_i+1\\) \u9664 \\(2\\) \u5c31\u597d</li> </ul> </li> </ul> <p>bug</p> <p>\\(d\\) \u5728\u8a08\u7b97\u7684\u6642\u5019(\u56e0\u6578\u4e58\u7a4d)\uff0c\u56e0\u70ba \\(d\\) \u662f\u6b21\u65b9\uff0c\u70ba \\(M-1\\) \u4e00\u5faa\u74b0\uff0c\u6240\u4ee5\u5fc5\u9808 \\(\\pmod{M-1}\\) </p> <p>\\(\\texttt{Fermat's little theorem}\\)</p> <p>\\(a\\times a^{p-2}\\equiv 1 \\pmod{p}\\) \\(a^{p-1}\\equiv 1 \\pmod{p}\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int M = 1e9 + 7;\nint n, k;\n\nint fastpow(int a, int b, int m) {\n    int ret = 1;\n    while (b != 0) {\n        if (b &amp; 1) ret = (ret * a) % m;\n        a = (a * a) % m;\n        b &gt;&gt;= 1;\n    }\n\n    return ret;\n}\n\nint inv(int x) {\n    return fastpow(x, M - 2, M);\n}\n\nsigned main() {\n    int ans2 = 1, ans1 = 1, num = 1, sqt = 1;\n    cin &gt;&gt; n;\n    int fg = 0, d = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        int p, k;\n        cin &gt;&gt; p &gt;&gt; k;\n        ans1 = (ans1 * ((k + 1) % M)) % M;\n        ans2 = (ans2 * ((fastpow(p, k + 1, M) - 1) * inv(p - 1) % M)) % M;\n\n        // calculate ans3\n        num = (num * (fastpow(p, k, M) % M)) % M;\n        sqt = (sqt * (fastpow(p, k / 2, M) % M)) % M;\n        if ((k + 1) % 2 == 0) {\n            if (fg) {\n                d = (d * (k + 1)) % (M - 1);\n                continue;\n            }\n            d = (d * ((k + 1) / 2)) % (M - 1);\n            fg = 1;\n        } else {\n            d = (d * (k + 1)) % (M - 1);\n        }\n    }\n\n    int ans3 = (fg ? fastpow(num, d, M) : fastpow(sqt, d, M));\n    cout &lt;&lt; ans1 &lt;&lt; \" \" &lt;&lt; ans2 &lt;&lt; \" \" &lt;&lt; ans3 &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"math/facts/#_9","title":"\u7d00\u9304\u51fa\u73fe\u7684\u8cea\u56e0\u6578","text":"<p>fact[i] \u7d00\u9304 i \u6700\u5c0f\u7684\u8cea\u56e0\u6578\uff0c\u5728\u505a\u8cea\u56e0\u6578\u5206\u89e3\u7684\u6642\u5019\u5c31\u53ef\u4ee5\u505a \\(O(\\log n)\\) \u6b21 \\(O(1)\\) \u67e5\u8868\u7684\u8cea\u56e0\u6578\u5206\u89e3</p> \u7d00\u9304\u51fa\u73fe\u7684\u8cea\u56e0\u6578 code <pre><code>for (int i = 2; i &lt;= maxn; i++) {\n    if (!prime[i]) {\n        fact[i].pb(i); // \u7d00\u9304\u8cea\u56e0\u6578\n        for (int j = 2 * i; j &lt;= maxn; j += i) {\n            fact[j].pb(i);\n            prime[j] = 1;\n        }\n    }\n}\n</code></pre> n \u7684\u8cea\u56e0\u6578\u5206\u89e3 <p>\u7d66 \\(q\\) \u500b\u7bc4\u570d\u5728 \\([1, M]\\) \u6b63\u6574\u6578\uff0c\u9700\u8f38\u51fa\u9019 \\(q\\) \u500b\u6578\u5b57\u8cea\u56e0\u6578\u5206\u89e3\u7684\u7d50\u679c\uff0c\u4f8b\uff1a\\(720\\) \u8981\u8f38\u51fa \\(720=2^4 \\times 3^2 \\times 5\\)\u3002\u8acb\u8a2d\u8a08\u4e00\u500b\u6f14\u7b97\u6cd5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c\uff0c\u9700\u8981\u6eff\u8db3 :</p> <ul> <li> <p>\u6642\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(M \\log M + q \\log M)\\)</p> </li> <li> <p>\u7a7a\u9593\u8907\u96dc\u5ea6\u81f3\u591a \\(O(M)\\)</p> </li> </ul> code <pre><code>void solve () {\n    for (int i = 2; i &lt;= maxn; i++) {\n        if (!prime[i]) {\n            fact[i].pb(i);\n            for (int j = 2 * i; j &lt;= maxn; j += i) {\n                if(fact[j].empty()) fact[j].pb(i);\n                prime[j] = 1;\n            }\n        }\n    }\n    int q;\n    cin &gt;&gt; q;\n    while (q--) {\n        cin &gt;&gt; n;\n        while (n != 1) {\n            int fct = fact[n][0], cnt = 0;\n            while (n % fct == 0) {\n                n /= fct;\n                cnt++;\n            }\n            cout &lt;&lt; fct &lt;&lt; \"^\" &lt;&lt; cnt &lt;&lt; (n != 1 ? \" x \" : \"\");\n        }\n        cout &lt;&lt; \"\\n\";   \n    }\n}\n</code></pre> \u591a\u6b21\u8a62\u554f n \u7684\u56e0\u6578 <p>\u7d66 \\(q\\) \u7b46\u67e5\u8a62\uff0c\u6bcf\u7b46\u8a62\u554f\u9700\u8981\u5217\u51fa \\(n\\) \u7684\u6240\u6709\u56e0\u6578</p> \u601d\u8def <p>CF Blog</p> <p>\u4f7f\u7528\u4e0a\u9762\u7684\u6280\u5de7\u5728 \\(O(n)\\) \u9810\u8655\u7406\uff0c\\(O(\\log n)\\) \u5f97\u5230 \\(n={p_1}^{a_1}{p_2}^{a_2}{p_3}^{a_3}\\ldots\\)\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u679a\u8209 \\(0 \\leq b_i \\leq a_i\\) \u4f86\u5f97\u5230\u56e0\u6578 \\({p_1}^{b_1}{p_2}^{b_2}{p_3}^{b_3}\\ldots\\)\uff0c\u6839\u64da\u56e0\u6578\u6578\u91cf\u7684\u4f30\u8a08\uff0c\u9019\u500b\u6703\u82b1 \\(O(n^{1/3})\\)\uff0c\u6240\u4ee5\u6574\u9ad4\u7684\u8907\u96dc\u5ea6\u662f \\(O(n^{1/3})\\)</p>"},{"location":"math/facts/#_10","title":"\u6b50\u62c9\u51fd\u6578\u6027\u8cea","text":""},{"location":"math/facts/#_11","title":"\u6027\u8cea\u4e00","text":"<p>\u6b50\u62c9\u51fd\u6578\uff08Euler's totient function\uff09\uff0c\u5373 \\(\\varphi(n)\\)\uff0c\u8868\u793a\u7684\u662f\u5c0f\u65bc\u7b49\u65bc \\(n\\) \u548c \\(n\\) \u4e92\u8cea\u7684\u6578\u7684\u500b\u6578\uff0c\\(\\varphi(1)=1\\)\u3002</p> <p>\u5176\u4e2d </p> \\[\\displaystyle \\varphi(n)=n \\left ( 1-\\frac{1}{p_1} \\right )\\left( 1-\\frac{1}{p_2} \\right)\\ldots \\left( 1-\\frac{1}{p_r} \\right)\\] \u8b49\u660e <p>\u4ee4 \\(n=6\\)</p> \\[\\begin{align}\\phi(n) &amp;= n- n\\times \\frac{1}{2}-n\\times \\frac{1}{3}+n\\times (\\frac{1}{2}\\times \\frac{1}{3}) \\\\ &amp;=n\\times (1-\\frac{1}{2}-\\frac{1}{3}+\\frac{1}{2}\\times \\frac{1}{3}) \\\\ &amp;= n\\times (1-\\frac{1}{2})\\times (1-\\frac{1}{3}) \\end{align}\\] <p>\u5176\u4e2d\u7b2c\u4e8c\u5230\u7b2c\u4e09\u90e8\u662f\u56e0\u5f0f\u5206\u89e3\u3002\u53ef\u4ee5\u770b\u5f97\u51fa\u4f86\u6211\u5011\u662f\u5148\u5c07 n \u88e1\u9762 2 \u7684\u500d\u6578\u5148\u522a\u6389\uff0c3 \u7684\u500d\u6578\u522a\u6389\uff0c\u518d\u5c07 6 \u7684\u500d\u6578\u52a0\u56de\u4f86\u3002</p> \u554f\u984c <p>\u7d66\u5b9a\u6b63\u6574\u6578 \\(n\\)\uff0c\u8f38\u51fa \\(\\varphi (n)\\)</p> <p>\\(n\\le 10^{12}\\)</p> \u601d\u8def <p>\\(O(\\sqrt{n})\\) \u627e\u51fa\u6240\u6709\u8cea\u56e0\u6578</p> code <pre><code>int euler_phi(int n) {\n    int ans = n;\n    for (int i = 2; i * i &lt;= n; i++) {\n        if (n % i == 0) {\n            ans = ans / i * (i - 1);\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n &gt; 1) ans = ans / n * (n - 1);\n    return ans;\n}\n</code></pre> \u554f\u984c <p>\u7d66\u5b9a\u6b63\u6574\u6578 \\(n\\)\uff0c\u8f38\u51fa \\(\\varphi(1), \\varphi(2), \\ldots ,\\varphi(n)\\)</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5728\u7be9\u6cd5\u904e\u7a0b\u9806\u4fbf\u8a08\u7b97</p> build phi <pre><code>vector&lt;int&gt; build_phi(int n) {    \n    vector&lt;int&gt; phi(n, 0);\n    for (int i = 1; i &lt;= n; i++) {\n        phi[i] = i;\n    }\n    for (int i = 2; i &lt;= n; i++){\n        if (phi[i] == i) {            \n            for (int j = i; j &lt;= n; j += i) {\n                phi[j] = phi[j] / i * (i - 1);\n            }                   \n        }    \n    } \n    return phi;\n}\n</code></pre>"},{"location":"math/facts/#_12","title":"\u6027\u8cea\u4e8c","text":"\\(n=\\sum \\varphi(d)\\)\uff0c\u5176\u4e2d \\(d\\) \u662f \\(n\\) \u7684\u56e0\u6578 <p>\u4f8b\u5982 \\(12\\) \u7684\u56e0\u6578\u6709 \\(\\{1,2,3,4,6,12\\}\\) \uff0c\u6211\u5011\u53ef\u4ee5\u628a \\(1..12\\) \u7684\u6578\u5206\u6210\u5e7e\u985e</p> <ul> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(12\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{12\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(6\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{6\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(4\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{4,8\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(3\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{3,9\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(2\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{2,10\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(1\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{1,5,7,11\\}\\)</p> </li> </ul> <p>\u90a3\u9ebc\u8981\u4f7f \\(x\\) \u8ddf \\(n\\) \u7684 gcd \u662f \\(d\\)\uff0c\u53ea\u80fd\u662f \\(x=d\\times\\)(\u8ddf \\(\\frac{n}{d}\\) \u4e92\u8cea\u7684\u6578\u5b57)\uff0c\u5176\u5be6\u5c31\u662f \\(\\varphi(d)\\) \u88e1\u9762\u6240\u5305\u542b\u7684\u6578</p> <ul> <li>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(12\\)\uff0c\\(\\varphi(1)=1\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{1\\times 12\\}\\)</li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(6\\)\uff0c\\(\\varphi(2)=1\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{1\\times 6\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(4\\)\uff0c\\(\\varphi(3)=2\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{1\\times 4, 2\\times 4\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(3\\)\uff0c\\(\\varphi(4)=2\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{1\\times 3,3\\times 3\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(2\\)\uff0c\\(\\varphi(6)=2\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{1\\times 2, 5\\times 2\\}\\)</p> </li> <li> <p>\\(x\\) \u8ddf \\(12\\) \u7684 \\(\\gcd\\) \u662f \\(1\\)\uff0c\\(\\varphi(12)=4\\)\uff0c\\(x\\) \u53ef\u80fd\u662f \\(\\{1\\times 1,1\\times 5,1\\times 7,1\\times 11\\}\\)</p> </li> </ul> \u6c42 phi(\u56e0\u6578\u7e3d\u548c) <p>\u6c42 phi(\u56e0\u6578\u7e3d\u548c)\uff0c\u4e0d\u80fd\u5229\u7528\u4e0a\u9762\u7684\u516c\u5f0f</p> \u601d\u8def <p>\u5148\u82b1\u8cbb O(sqrt(n)) \u5e6b n \u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u9084\u6709\u627e\u5230\u6240\u6709\u7684\u56e0\u6578\u3002\u800c n \u7684\u56e0\u6578\u500b\u6578\u6700\u591a O(n^{1/3})\u3002</p> <p>\u5728\u4f86\u6211\u5011\u6703\u9047\u5230\u7684\u554f\u984c\u5c31\u662f: \u5c0d\u65bc\u6bcf\u500b\u56e0\u6578 x\uff0c\u8a08\u7b97 phi(x) \u8981\u82b1\u591a\u5c11\u6642\u9593 ?</p> <p>\u56e0\u70ba x \u7684\u8cea\u56e0\u6578\uff0c\u4e00\u5b9a\u4e5f\u90fd\u662f n \u7684\u8cea\u56e0\u6578\uff0c\u6240\u4ee5\u53ea\u9700\u8981 O(log n) \u5373\u53ef\u8a08\u7b97\uff0c\u7e3d\u8907\u96dc\u5ea6\u662f O(n^{\u00bd} + n^{\u2153} * log n) = O(n^0.5) </p> \u985e\u984c <p>\u6c42 \\(\\gcd(1,n) + \\gcd(2,n) + \\ldots + \\gcd(n,n)\\)</p> \u601d\u8def <p>\\(\\gcd=\\frac{n}{d}\\) \u7684\u6709 \\(\\phi(d)\\) \u500b\uff0c\u7b54\u6848\u5c31\u662f \\(\\sum \\phi(d) \\times \\frac{n}{d}\\) \u5176\u4e2d \\(d\\) \u662f \\(n\\) \u7684\u56e0\u6578</p> TOI 2019 \u56db\u6a21 pC. \u6b50\u62c9\u8207TOT"},{"location":"math/facts/#_13","title":"\u984c\u76ee","text":"2020 TOI pC. \u9280\u6cb3\u6377\u904b <p>\u7d66\u6578\u5c0d \\((x_1,y_1),(x_2,y_2)\\)\uff0c\u8207\u6a21\u6578 \\(M\\)\uff0c\u554f \\((x_3, y_3)\\)\u3002\\((x_1,y_1),(x_2,y_2),(x_3,y_3)\\) \u90fd\u7b26\u5408:</p> \\[ y\\equiv mx+k\\pmod{M} \\] <p>\u5df2\u77e5:</p> <ul> <li> <p>\\(m=(y_2-y_1)\\cdot (x_2-x_1)^{M-2}\\)</p> </li> <li> <p>\\(x_1+x_2+x_3=m^2\\pmod{m}\\)</p> </li> </ul> <p>\u6709 \\(t\\) \u7b46\u8f38\u5165\uff0c\\(t\\le 10^5,2\\le M&lt;2^{31}\\)</p> \u601d\u8def <ol> <li>\\(m=(y_2-y_1)\\cdot (x_2-x_1)^{M-2}\\)</li> <li>\\(k=(y_1-mx_1)\\) % \\(M\\)</li> <li>\\(x_3=(m^2-x_1-x_2)\\) % \\(M\\)</li> <li>\\(y_3=(mx_3+k)\\) % \\(M\\)</li> </ol> CF 1445 C. Division <p>t \u7b46\u67e5\u8a62\uff0c\u6bcf\u7b46\u7d66\u5b9a p, q\uff0c\u6c42\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6\u7684\u6700\u5927 x</p> <ul> <li> <p>p % x == 0</p> </li> <li> <p>x % q != 0</p> </li> </ul> <p>\\(t\\le 50, 1\\le p\\le 10^{18}, 1\\le q\\le 10^9\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u89c0\u5bdf\u5230\u82e5 p % q != 0 \u5247 x = p\u3002\u82e5 p % q == 0 \u7684\u6642\u5019\uff0c\u8003\u616e\u6a19\u6e96\u56e0\u5f0f\uff0c\u6211\u5011\u53ea\u8981\u5c07 p \u8207 q \u5171\u540c\u7684\u67d0\u4e00\u9805\u964d\u5230 q \u7684\u6b21\u65b9\u5e95\u4e0b\u5373\u53ef</p> <p>\u4f8b\u5982:</p> <ul> <li> <p>p = 2<sup>1</sup> * 3<sup>3</sup> * 5<sup>2</sup></p> </li> <li> <p>q = 3<sup>2</sup> * 5<sup>1</sup></p> </li> </ul> <p>x \u53ea\u80fd\u662f p \u524a\u6389\u8207 q \u5171\u540c\u7684\u9805\u624d\u5408\u6cd5\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u8003\u616e 3, 5\u3002</p> <ul> <li> <p>\u524a\u6389 3: x = 2<sup>1</sup> * 3<sup>1</sup> * 5<sup>2</sup></p> </li> <li> <p>\u524a\u6389 5: x = 2<sup>1</sup> * 3<sup>3</sup> * 5<sup>0</sup></p> </li> </ul> <p>\u986f\u7136\u524a\u6389 3 \u53ef\u4ee5\u8b93 x \u66f4\u5927</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 10001;\nint t, p, q;\n\nint f(int i) {\n    if (i == 1) return 1;\n    int k = p;\n    while (k % q == 0) {\n        k /= i;\n    }\n    return k;\n}\n\nsigned main() {\n    cin &gt;&gt; t;\n    while (t--) {\n        cin &gt;&gt; p &gt;&gt; q;\n        int ans = -1e18;\n        if (p % q != 0) {\n            cout &lt;&lt; p &lt;&lt; \"\\n\";\n        } else {\n            for (int i = 1; i * i &lt;= q; i++) {\n                if (q % i == 0) {\n                    ans = max(ans, f(i));\n                    ans = max(ans, f(q / i)); // \u53ef\u80fd\u6703\u6709\u8cea\u6578 &gt; sqrt(n)\n                }\n            }\n            cout &lt;&lt; ans &lt;&lt; \"\\n\";\n        }\n    }\n}\n</code></pre> <ol> <li> <p>\u82e5 \\(n=p\\times q\\)\uff0c\u5247 \\(\\min(p,q)\\le \\sqrt{n}\\) \u21a9</p> </li> </ol>"},{"location":"math/game_theory/","title":"\u8cfd\u5c40","text":""},{"location":"math/game_theory/#dp","title":"\u8cfd\u5c40 DP","text":"<p>\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u66b4\u529b\u8dd1</p> CSES - Stick Game <p>\u6709 \\(n\\) \u500b\u77f3\u982d\uff0c\u6bcf\u6b21\u53ef\u4ee5\u62ff\u8d70 \\(P=\\{p_1,p_2,\\ldots,p_k\\}\\) \u500b\uff0cA, B \u8f2a\u6d41\u53d6\uff0c\u4e0d\u80fd\u62ff\u5c31\u8f38\u3002\u554f\u8ab0\u8d0f</p> <p>\\(n\\le 10^6,k\\le 100,1\\le p_i\\le n\\)</p> \u601d\u8def LeetCode 877. Stone Game Atcoder DP Contest L - Deque Atcoder DP Contest K - Stones"},{"location":"math/game_theory/#nim-game","title":"Nim Game","text":""},{"location":"math/game_theory/#_1","title":"\u8b49\u660e","text":"<ul> <li> <p>\u300c\u5148\u624b\u6703\u8d0f\u300d\u7684\u72c0\u614b\uff0c\u5b58\u5728\u4e00\u500b\u8d70\u6cd5\u8d70\u5230\u300c\u5148\u624b\u6703\u8f38\u300d\u7684\u72c0\u614b</p> </li> <li> <p>\u300c\u5148\u624b\u6703\u8f38\u300d\u7684\u72c0\u614b\uff0c\u4e0d\u7ba1\u600e\u9ebc\u8d70\u90fd\u662f\u8d70\u5230\u300c\u5148\u624b\u6703\u8d0f\u300d\u7684\u72c0\u614b</p> </li> </ul>"},{"location":"math/game_theory/#_2","title":"\u4f8b\u984c","text":"\u55ae\u5806 Nim Game <p>\u6709 \\(n\\) \u500b\u77f3\u982d\uff0c\u6bcf\u6b21\u8981\u62ff \\(1\\ldots 5\\) \u500b\uff0cA, B \u8f2a\u6d41\u62ff\uff0c\u4e0d\u80fd\u62ff\u77f3\u982d\u7684\u4eba\u5c31\u8f38\u4e86\u3002\u554f\u8ab0\u8d0f</p> \u601d\u8def <p>\u4ee5\u4e0d\u56b4\u8b39\u7684\u89d2\u5ea6\u770b\uff0c\u82e5\u5148\u624b\u53d6\u4e86 \\(x\\) \u500b\uff0c\u90a3\u9ebc\u5f8c\u624b\u4e00\u5b9a\u53ef\u4ee5\u53d6 \\(y\\) \u4f7f \\(x+y=6\\)\uff0c\u9019\u9ebc\u4e00\u4f86\u7576 n % 6 == 0 \u6642\uff0c\u5148\u624b\u5c31\u8f38\u4e86\u3002\u90a3\u7576 n % 6 != 0 \u6642\uff0c\u5148\u624b\u5c31\u53ef\u4ee5\u5148\u62ff\u8d70 \\(x\\) \u500b\u4f7f\u5f97 n % 6 == 0\uff0c\u9019\u6a23\u53c8\u8b8a\u56de\u4e0a\u9762\u7684 n % 6 == 0 \u5148\u624b\u5fc5\u8f38\u7684 case \u4e86\u3002</p> <p>\u5148\u624b\u53ef\u4ee5\u8d0f iff n % 6 != 0</p> <ul> <li> <p>n % 6 != 0 \u7684\u72c0\u614b\u5b58\u5728\u4e00\u500b\u8d70\u6cd5\u8d70\u5230 n % 6 = 0 \u7684\u72c0\u614b</p> </li> <li> <p>n % 6 = 0 \u7684\u72c0\u614b\u4e0d\u7ba1\u600e\u9ebc\u8d70\u90fd\u662f\u8d70\u5230 n % 6 != 0 \u7684\u72c0\u614b</p> </li> </ul> CSES - Nim Game I <p>\u6709 \\(n\\) \u5806\u77f3\u982d\uff0c\u5206\u5225\u6709 \\(a_1, \\ldots , a_n\\) \u500b\uff0cAlice, Bob \u8f2a\u6d41\u73a9\u4e00\u500b game\uff0c\u8f2a\u5230\u81ea\u5df1\u6642\u53ef\u4ee5\u9078\u5176\u4e2d\u4e00\u5806\uff0c\u62ff\u81f3\u5c11\u4e00\u500b\u77f3\u982d\uff0c\u4e0d\u80fd\u62ff\u5c31\u8f38\u3002\u554f\u8ab0\u8d0f</p> <p>\\(1\\le n \\le 2\\times 10^5,1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>n = 1\uff0c\u5148\u624b\u8d0f\uff0ciff \\(a_1 &gt; 0\\)\u3002</p> <p>n = 2\uff0c\u5148\u624b\u8d0f iff \\(a_1 \\neq a_2\\)\u3002</p> <ul> <li> <p>\\(a_1 \\neq a_2\\) \u7684\u72c0\u614b : </p> <p>\u5b58\u5728\u4e00\u500b\u8d70\u6cd5\u8d70\u5230 \\(a_1 = a_2\\) \u7684\u72c0\u614b</p> </li> <li> <p>\\(a_1 = a_2\\) \u7684\u72c0\u614b : </p> <p>\u4e0d\u7ba1\u600e\u9ebc\u8d70\u90fd\u662f\u8d70\u5230 \\(a_1 \\neq a_2\\) \u72c0\u614b</p> </li> </ul> <p>general \\(n\\) : \u5148\u624b\u6703\u8d0f iff \\(a_1 \\oplus a_2 \\oplus \\ldots a_n \\neq 0\\)</p> <ul> <li> <p>\\(a_1 \\oplus a_2 \\oplus \\ldots a_n \\neq 0\\) \u7684\u72c0\u614b : </p> <p>\u5b58\u5728\u4e00\u500b\u8d70\u6cd5\u8d70\u5230 \\(a_1 \\oplus a_2 \\oplus \\ldots a_n = 0\\) \u7684\u72c0\u614b</p> </li> <li> <p>\\(a_1 \\oplus a_2 \\oplus \\ldots a_n = 0\\) \u7684\u72c0\u614b : </p> <p>\u4e0d\u7ba1\u600e\u9ebc\u8d70\u90fd\u662f\u8d70\u5230 \\(a_1 \\oplus a_2 \\oplus \\ldots a_n \\neq 0\\) \u7684\u72c0\u614b</p> <ul> <li> <p>[11011, 01000, 00101] xor = 10110 \u2192 [01101, 01000, 00101] xor = 00000</p> </li> <li> <p>[01011, 11001, 10101] xor = 00111 \u2192 [01011, 11001, 10010] xor = 00000</p> </li> </ul> </li> </ul>"},{"location":"math/game_theory/#grundy-number","title":"Grundy number","text":"<p>\u5e6b\u6bcf\u500b\u72c0\u614b\u5b9a\u7fa9\u4e00\u500b Grundy number\uff08\u53c8\u7a31 SG \u51fd\u6578\uff09 \\(G(x)\\)\uff0c\u8f38\u7684\u72c0\u614b\u7684 \\(G(x) = 0\\)</p> <p>\u5176\u4ed6\u7684\u72c0\u614b \\(G(x) = \\text{mex} \\{ G(y) \\mid x \\space \u53ef\u4ee5\u5230 \\space y\\}\\)<sup>1</sup></p> \u55ae\u5806 Nim Game - \u5957\u7528 Grundy number <p>\u6709 \\(n\\) \u500b\u77f3\u982d\uff0c\u6bcf\u6b21\u8981\u62ff \\(1\\ldots 5\\) \u500b\uff0cA, B \u8f2a\u6d41\u62ff\uff0c\u4e0d\u80fd\u62ff\u77f3\u982d\u7684\u4eba\u5c31\u8f38\u4e86\u3002\u554f\u8ab0\u8d0f</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u5217\u51fa\u8f49\u79fb\u5f0f\uff0c\\(G(n)=\\text{mex}\\{G(n-1),\\ldots ,G(n-5) \\}\\)\uff0c\u6211\u5011\u5c07\u8868\u683c\u5217\u51fa\u4f86</p> \\[ \\begin{array}{c|ccccccccccccc}     n &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 10 &amp; 11 &amp; 12\\\\     \\hline     G(n) &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 0\\\\ \\end{array} \\] <p>\u53ef\u4ee5\u767c\u73fe\u5728\u9019\u500b\u984c\u76ee G(n) = n % 6</p>"},{"location":"math/game_theory/#spraguegrundy-theorem","title":"Sprague\u2013Grundy theorem","text":"<p>\u53c8\u7a31 SG \u5b9a\u7406\uff0c\u6709 k \u76e4 Game\uff08\u4e0d\u7ba1\u5b8c\u4efb\u4f55 Game \u90fd\u53ef\u4ee5\uff09\uff0c\u6bcf\u6b21\u53ef\u4ee5\u9078\u64c7\u4e00\u500b\u76e4\u9762\u505a\u64cd\u4f5c\uff0c\u76f4\u5230\u6c92\u6709\u4efb\u4f55\u76e4\u9762\u80fd\u505a\u64cd\u4f5c\u70ba\u6b62\uff0c\u6703\u6709 </p> \\[ G(\\{x_1,x_2,\\ldots, x_k\\})=G(x_1)\\oplus G(x_2)\\oplus \\ldots \\oplus G(x_k) \\] \u8b49\u660e <p>\u3010\u6578\u5b78\u6b78\u7d0d\u6cd5 - \u8b49\u660e\u3011: G({X, Y}) = G(X) \\(\\oplus\\) G(Y) </p> <p>Base case: G(0, 0) = 0 = G(0) \\(\\oplus\\) G(0)</p> <p>Induction step: \u5df2\u77e5 G({X, Y}) = mex{ G({x, y}) }\uff0c\u53c8\u80fd\u8d70\u5230\u7684 G({x, y}) \u5df2\u6eff\u8db3 G({x, y}) = G(x) \\(\\oplus\\) G(y)</p> <p>\u7576 G(x) = t\uff0c\u4e00\u5b9a\u6703\u6eff\u8db3 x \u53ef\u4ee5\u8d70\u5230 grundy \u503c\u662f 0 ... (t-1) \u7684\u72c0\u614b</p> <p>\u4ee4 G(X) \\(\\oplus\\) G(Y) = t\uff0c\u6211\u5011\u8981\u8b49\u660e 0 ... (t-1) \u7684 grundy number \u90fd\u53ef\u4ee5\u8d70\u5230\uff0c\u4e14 t \u8d70\u4e0d\u5230</p> <ul> <li> <p>G({x, y}) \u7121\u6cd5\u5305\u542b\u5230 t :</p> <p>\u4ee4 u = G(X), v = G(Y)\uff0cu \\(\\oplus\\) v = t\u3002X, Y \u53ea\u80fd\u52d5\u4e00\u500b\uff0c\u5206\u5169\u7a2e case :</p> <ul> <li> <p>\u52d5 X \u2192 x: (\u975e u) \\(\\oplus\\) v != t</p> </li> <li> <p>\u52d5 Y \u2192 y: u \\(\\oplus\\) (\u975e v) != t</p> </li> </ul> <p>\u6240\u4ee5\u52d5\u4e86\u4e00\u6b65\u4e4b\u5f8c G(x) \\(\\oplus\\) G(y) \u4e00\u5b9a\u4e0d\u662f t</p> </li> <li> <p>G({x, y}) \u53ef\u4ee5\u5b8c\u5168\u5305\u542b\u5230 0 ... (t-1) :</p> <p>\u4ee4 u = G(X), v = G(Y)\uff0c\u5982\u679c\u60f3\u8981\u8b8a\u6210 s\uff0c\u770b s \u8ddf t \u5f9e\u9ad8\u4f4d\u770b\u904e\u53bb\u54ea\u4e00\u4f4d\u958b\u59cb t[i] = 1, s[i] = 0\uff0c\u53bb\u770b u[i], v[i] \u54ea\u4e00\u500b\u662f 1 \u5c31\u662f\u53bb\u6539\u52d5\u4ed6</p> </li> </ul> <p>\u6709\u4e86\u9019\u500b\u8b49\u660e\u5f8c\uff0ck \u76e4 Game \u5c31\u53ea\u662f\u5c07 x[1], ..., x[k] \u5169\u5169\u5408\u4f75\uff0c\u4e5f\u5c31\u662f\u5169\u5169 xor \u5373\u53ef</p> CSES - Nim Game II <p>\u6709 \\(n\\) \u5806\u77f3\u982d\uff0c\u5206\u5225\u6709 \\(a_1, \\ldots , a_n\\) \u500b\uff0cAlice, Bob \u8f2a\u6d41\u73a9\u4e00\u500b game\uff0c\u8f2a\u5230\u81ea\u5df1\u6642\u53ef\u4ee5\u9078\u5176\u4e2d\u4e00\u5806\uff0c\u62ff 1...3 \u500b\u77f3\u982d\uff0c\u4e0d\u80fd\u62ff\u5c31\u8f38\u3002\u554f\u8ab0\u8d0f</p> <p>\\(1\\le n \\le 2\\times 10^5,1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u5148\u628a\u6bcf\u4e00\u5806\u60f3\u6210\u4e00\u500b\u55ae\u7368\u7684 game, \u8a08\u7b97 G(x) = x % 4\uff0c\u5229\u7528 SG \u5b9a\u7406\u5c07\u4ed6\u5011 xor \u8d77\u4f86</p> \u4f8b\u984c <p>\u6709 \\(n\\) \u5806\u77f3\u982d\uff0c\u5206\u5225\u6709 \\(a_1, \\ldots , a_n\\) \u500b\uff0cAlice, Bob \u8f2a\u6d41\u73a9\u4e00\u500b game\uff0c\u6bcf\u6b21\u53ef\u4ee5\u505a\u5176\u4e2d\u4e00\u500b\u64cd\u4f5c </p> <ul> <li> <p>\u5f9e\u67d0\u4e00\u5806\u62ff\u8d70 \\(1\\) \u500b\u77f3\u982d</p> </li> <li> <p>\u6216\u5e73\u5206\u6210\u76f8\u540c\u6578\u91cf\u7684\u5f88\u591a\u5806</p> </li> </ul> <p>\u4e0d\u80fd\u62ff\u5c31\u8f38\u3002\u554f\u8ab0\u8d0f</p> \u601d\u8def <p>[12] \u2192 [4, 4, 4] \u2192 [3, 4, 4] \u2192 [3, 2, 2, 4]</p> <p>SG(6)  = mex{ SG(5), SG(3) \\(\\oplus\\) SG(3), SG(2) \\(\\oplus\\) SG(2) \\(\\oplus\\) SG(2), SG(1) \\(\\oplus\\) SG(1) \\(\\oplus\\) SG(1) \\(\\oplus\\) SG(1) \\(\\oplus\\) SG(1) \\(\\oplus\\) SG(1)} = mex{SG(5), SG(2)}</p> <p>n = 10^5 \uff0c\u76f4\u63a5\u8a08\u7b97 SG(1) \u2026 SG(n)\uff08\u679a\u8209\u56e0\u6578\uff0c\u985e\u4f3c\u7be9\u6cd5\uff09\uff0ctime: O(n log n)</p> <p>n = 10^9 \u5e6b SG(i) \u627e\u898f\u5f8b</p> YTP 2022 \u9ad8\u4e2d\u7a0b\u5f0f\u6311\u6230\u71df p11 <p>\u6709 n \u7b46 query\u3002\u6bcf\u7b46\u7d66\u51fa x \u5806\u77f3\u982d\uff0c\u5169\u7a2e\u64cd\u4f5c\uff0c\u7121\u6cd5\u64cd\u4f5c\u5c31\u8f38</p> <ul> <li>\u9078\u4e00\u5806\uff0c\u79fb\u9664 1 \u500b</li> <li>\u9078\u4e00\u5806\uff0c\u62c6\u6210 1, 2, 3, \u2026, k \u500b\uff0c\u524d\u63d0 n = 1+2+\u2026+k</li> </ul> <p>[2, 5, 10] \u2192 [1, 5, 10] \u2192 [1, 5, 1, 2, 3, 4]</p> <p>x &lt;= C = 10^9, n &lt;= 2 * 10^5</p> \u601d\u8def <ul> <li> <p>SG(x) =</p> <ul> <li> <p>mex{ SG(x-1) } if x != k(k+1)/2</p> </li> <li> <p>mex{ SG(x-1), SG(1) \\(\\oplus\\) SG(2)\\(\\oplus\\) ... \\(\\oplus\\) SG(k) } if x = k(k+1)/2</p> </li> </ul> </li> <li> <p>x = k(k+1)/2 \u7684\u72c0\u614b\u4e0d\u6703\u592a\u591a\uff0c\u53ea\u6709 O( sqrt(C) ) \u500b</p> </li> <li> <p>\u5047\u8a2d SG( k * (k+1)/2 ) = 2, \u5982\u4f55\u8a08\u7b97 SG( (k+1) * (k+2)/2 )?</p> <ul> <li> <p>if x \\(\\in\\) [ k * (k+1)/2 + 1, (k+1) * (k+2)/2 - 1], SG(x) = 0 \u2192 SG(x+1) = 1</p> </li> <li> <p>0, 1 \u4ea4\u66ff\uff0c\u53ef\u4ee5\u5f9e\u4e0a\u4e00\u500b k * (k + 1) / 2 \u5f88\u5feb\u7684\u63a8\u51fa\u4f86</p> </li> </ul> </li> <li> <p>\u5be6\u4f5c\u4e0a\u628a x = k(k+1)/2 \u90fd\u5efa\u8868\u7b97\u597d\uff0c\u904e\u7a0b\u4e2d\u53ef\u4ee5\u7528\u4e00\u500b\u53ea\u6703\u55ae\u8abf\u905e\u589e\u7684 pointer \u7d00\u9304 k \u7b97\u5230\u54ea\u88e1\uff0c\u6bcf\u500b a[i] binary search \u627e\u5230\u5c0f\u65bc a[i] \u7684\u7b2c\u4e00\u500b k * (k+1)/2 \u7684\u5730\u65b9\uff0c\u5373\u53ef\u63a8\u51fa\u662f 0 \u9084\u662f 1</p> </li> </ul>"},{"location":"math/game_theory/#tree","title":"Tree","text":""},{"location":"math/game_theory/#min-max-tree","title":"Min Max Tree","text":"\u984c\u76ee <p>\u7d66\u4e00\u500b Tree\uff0c\u6bcf\u500b leaf \u4e0a\u90fd\u6709\u4e00\u500b\u6578\u5b57\u3002\u5f9e root \u958b\u59cb\uff0cA, B \u8f2a\u6d41\uff0c\u6bcf\u6b21\u8981\u5f80\u4e0b\u8d70\u4e00\u5c64\uff0cA \u5e0c\u671b\u505c\u5728\u5c0f\u7684\uff0cB \u5e0c\u671b\u505c\u5728\u5927\u7684\uff0c\u554f\u6700\u5f8c\u6703\u505c\u5728\u54ea\u88e1</p> \u601d\u8def <p> </p> <p>\u5f9e leaf \u5f80\u4e0a\u505a\u4e0a\u53bb</p> TIOJ  1092 . A.\u8df3\u683c\u5b50\u904a\u6232 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684 DAG\u3002A, B \u5f9e\u8d77\u9ede\u5f80\u7d42\u9ede\u8f2a\u6d41\u8df3\uff0c\u8df3\u5230\u7d42\u9ede\u7684\u4eba\u7372\u52dd\uff0c\u554f\u8ab0\u7372\u52dd</p> <p>\\(n\\le 10^4,m\\le 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u5148\u5c07 DAG \u5c55\u958b\uff0c\u8b8a\u6210 Tree \u6bd4\u8f03\u597d\u5957\u7528 Min Max Tree \u7684\u6982\u5ff5\u3002\u8a2d\u5148\u624b\u662f \\(0\\)\uff0c\u5f8c\u624b\u662f \\(1\\)\uff0c\u90a3\u9ebc\u5148\u624b\u5c31\u8981\u53d6 min\uff0c\u5f8c\u624b\u53d6 max\u3002</p> <p> </p> <p>\u6211\u5011\u91cd\u65b0\u56de\u5230 DAG \u4e0a\u8003\u616e\uff0cDAG \u4e0a\u7d42\u9ede\u5c31\u662f\u6211\u5011 Tree \u4e0a\u7684 Leaf\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5f9e\u7d42\u9ede\u6162\u6162\u63a8\u56de\u8d77\u9ede\uff0c\u6bcf\u500b\u9ede\u7dad\u8b77\u5148\u624b\uff0c\u8207\u5f8c\u624b\u7684\u503c\uff08\u9019\u6a23\u5169\u500b\u9ede\u4e4b\u9593\u624d\u80fd\u8f49\u79fb\uff0cu \u7684\u5148\u624b\u5f9e v \u7684\u5f8c\u624b\u8f49\u79fb\uff0c...\uff09\uff0c\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f\u8d77\u9ede\u7684\u5148\u624b\u503c</p> <p> </p> <p>\u9019\u984c\u4e5f\u53ef\u4ee5\u7528\u4e0b\u9762\u7684 Game Tree \u505a\uff0c\u4e00\u6a23\u662f\u5c07 Leaf\uff08\u7d42\u9ede\uff09 \u5148\u5b9a Grundy Number = 0\uff0c\u7136\u5f8c\u6162\u6162\u505a\u56de\u8d77\u9ede\u53bb</p>"},{"location":"math/game_theory/#game-tree","title":"Game Tree","text":"LOJ #10243. \u300c\u4e00\u672c\u901a 6.7 \u4f8b 3\u300d\u79fb\u68cb\u5b50\u6e38\u620f <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684 DAG\u3002\u7d66\u5b9a \\(k\\) \u500b\u68cb\u5b50\uff0cA, B \u8f2a\u6d41\uff0c\u6bcf\u6b65\u53ef\u4ee5\u5c07\u4efb\u610f\u4e00\u9846\u68cb\u5b50\u6cbf\u4e00\u689d\u6709\u5411\u908a\u79fb\u52d5\u5230\u53e6\u4e00\u500b\u9ede\uff0c\u7121\u6cd5\u79fb\u52d5\u8005\u8f38\u6389\u904a\u6232\uff0c\u554f\u8ab0\u5148\u624b\u8d0f\u9084\u8f38\u3002</p> <p>\\(n\\le 2000,m\\le 6000,1\\le k\\le n\\)</p> \u601d\u8def <p>\u56e0\u70ba\u6bcf\u500b\u554f\u984c\u90fd\u662f\u7368\u7acb\u7684\uff0c\u53ef\u4ee5\u5229\u7528 SG \u5b9a\u7406\u5c07\u4ed6\u5011\u7684 Grundy Number xor \u8d77\u4f86\u3002\u6bcf\u500b\u554f\u984c\u6211\u5011\u53ef\u4ee5\u5c07 DAG \u60f3\u6210 Tree\uff0c\u9019\u6a23 Leaf \u5c31\u6703\u662f\u90a3\u4e9b out degree \u662f 0 \u7684\u9ede\u3002\u5148\u5b9a\u9019\u4e9b\u9ede\u7684 Grundy Number = 0\uff0c\u7136\u5f8c\u6162\u6162\u505a\u56de\u8d77\u9ede\u53bb</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, m, k;\nvector&lt;int&gt; G[maxn];\nint vis[maxn], sg[maxn];\n\nint mex(vector&lt;int&gt;&amp; a) {\n    int n = a.size();\n\n    vector&lt;bool&gt; v(n + 1, false);\n    for (int x : a) {\n        if (x &lt;= n) v[x] = true;\n    }\n\n    for (int i = 0; i &lt;= n; i++) {\n        if (v[i] == false) return i;\n    }\n    return -1;\n}\n\nint dfs(int u) {\n    if (vis[u]) return sg[u];\n    if (G[u].size() == 0) {\n        sg[u] = 0;\n        return sg[u];\n    }\n    vis[u] = true;\n\n    vector&lt;int&gt; used;\n    for (auto v : G[u]) {\n        used.pb(dfs(v));\n    }\n    sg[u] = mex(used);\n    return sg[u];\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        G[u].pb(v);\n    }\n\n    int res = 0;\n    while(k--) {\n        int x;\n        cin &gt;&gt; x;\n        res ^= dfs(x);\n    }\n    cout &lt;&lt; (res == 0 ? \"lose\" : \"win\") &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"math/game_theory/#_3","title":"\u984c\u76ee","text":"CSES - Stair Game <p>\u6709 \\(n\\) \u500b\u77f3\u5806\u7de8\u865f \\(1,2,\\ldots ,n\\)\uff0c\u6bcf\u5806\u4e00\u958b\u59cb\u6709 \\(a_i\\) \u500b\u3002A, B \u8f2a\u6d41\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5c07\u4efb\u610f\u6578\u91cf\u7684\u77f3\u982d\u5f9e \\(k\\) \u79fb\u5230 \\(k-1\\)\uff0c\u5176\u4e2d \\(k\\neq 1\\)\uff0c\u4e0d\u80fd\u52d5\u5c31\u8f38\u3002\u554f\u8ab0\u8d0f</p> <p>\\(1\\le n\\le 2\\times 10^5,0\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u76f8\u7576\u65bc\u5728 even \u9805\u73a9 Nim Game</p> <p>\u7d50\u8ad6 : \u5148\u624b\u6703\u8d0f iff \\(a_2\\oplus a_4\\oplus a_6\\oplus \\ldots \\neq 0\\)</p> <ul> <li> <p>\u300c\u5148\u624b\u6703\u8d0f\u300d\u7684\u72c0\u614b\uff0c\u5b58\u5728\u4e00\u500b\u8d70\u6cd5\u8d70\u5230\u300c\u5148\u624b\u6703\u8f38\u300d\u7684\u72c0\u614b</p> <p>\u76f8\u7576\u65bc\u73a9 Nim Game\uff0c\u5148\u624b\u76f4\u63a5\u52d5 even \u9805\u7684\u5230 odd \u9805</p> </li> <li> <p>\u300c\u5148\u624b\u6703\u8f38\u300d\u7684\u72c0\u614b\uff0c\u4e0d\u7ba1\u600e\u9ebc\u8d70\u90fd\u662f\u8d70\u5230\u300c\u5148\u624b\u6703\u8d0f\u300d\u7684\u72c0\u614b</p> <p>\u5206\u5169\u7a2e case \u8a0e\u8ad6 :</p> <ul> <li> <p>\u52d5 odd \u5230 even</p> <p>\u4e0b\u4e00\u8f2a\uff0c\u5148\u624b\u518d\u628a\u540c\u500b\u6578\u7684\u77f3\u982d\u5f9e even \u52d5\u5230 odd\uff0c\u53c8\u56de\u5230\u5148\u624b\u6703\u8f38\u7684\u72c0\u614b</p> </li> <li> <p>\u52d5 even \u5230 odd</p> <p>\u76f8\u7576\u65bc\u73a9 Nim Game\uff0c\u4e0d\u7ba1\u600e\u9ebc\u8d70\u90fd\u662f\u8d70\u5230 \\(a_2\\oplus a_4\\oplus a_6\\oplus \\ldots \\neq 0\\) \u7684\u72c0\u614b</p> </li> </ul> </li> </ul> CSES - Grundy's Game <p>\u6709\u4e00\u5806 \\(n\\) \u500b\u77f3\u982d\uff0cA, B \u8f2a\u6d41\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5c07\u4e00\u5806 Split \u6210\u5169\u5806\u6578\u91cf\u4e0d\u540c\u7684\uff0c\u4e0d\u80fd\u52d5\u5c31\u8f38\uff0c\u554f\u8ab0\u8d0f\u3002\u5171 \\(t\\) \u7b46\u6e2c\u8cc7</p> <p>\\(t\\le 10^5,n\\le 10^6\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u5230\u82e5 \\(n &gt; 2000\\) \u6642\u5148\u624b\u5fc5\u52dd\uff0c\\(n\\le 2000\\) \u66b4\u529b\u8dd1\uff0c\\(&gt;2000\\) \u76f4\u63a5\u8f38\u51fa first</p> CSES - Another Game <p>\u6709 \\(n\\) \u5806\u77f3\u982d\uff0c\u5206\u5225\u6709 \\(a_1, \\ldots , a_n\\) \u500b\uff0cAlice, Bob \u8f2a\u6d41\u73a9\u4e00\u500b game\uff0c\u8f2a\u5230\u81ea\u5df1\u6642\u53ef\u4ee5\u9078\u5176\u4e2d\u597d\u5e7e\u5806\uff0c\u6bcf\u5806\u62ff\u81f3\u5c11\u4e00\u500b\u77f3\u982d\uff0c\u4e0d\u80fd\u62ff\u5c31\u8f38\uff0c\u554f\u8ab0\u8d0f</p> <p>\\(1\\le n\\le 2\\times 10^5,1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u6253\u8868\u5f8c\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c\\(a_i\\) \u90fd\u662f\u5076\u6578\u6642\uff0c\u5148\u624b\u5fc5\u8f38</p> <p>\u3010\u8b49\u660e\u3011:</p> <ul> <li> <p>\u300c\\(a_i\\) \u6709\u4e00\u4e9b\u5947\u6578\u300d\u7684\u72c0\u614b\uff0c\u5b58\u5728\u4e00\u500b\u8d70\u6cd5\u8d70\u5230\u300c\\(a_i\\) \u90fd\u662f\u5076\u6578\u300d\u7684\u72c0\u614b</p> </li> <li> <p>\u300c\\(a_i\\) \u90fd\u662f\u5076\u6578\u300d\u7684\u72c0\u614b\uff0c\u4e0d\u7ba1\u600e\u9ebc\u8d70\u90fd\u662f\u8d70\u5230\u300c\\(a_i\\) \u6709\u4e00\u4e9b\u5947\u6578\u300d\u7684\u72c0\u614b</p> </li> </ul> 2016 \u5168\u570b\u8cfd p3. \u62c8 (Nim) <p>\u6709\u4e00\u5806 \\(n\\) \u500b\u77f3\u982d\uff0cA, B \u8f2a\u6d41\uff0c\u6bcf\u6b21\u53ef\u5f9e\u9019\u5806\u77f3\u982d\u4e2d\u53d6\u8d70 \\(1\\ldots \\lfloor n/k \\rfloor\\) \u9846\u77f3\u982d\uff0c\u554f Grundy number \\(G(n)\\)</p> <p>\\(n\\le 10^9,k=1\\) or \\(2\\)</p> \u601d\u8def <p>\\(k=1\\) \u7684 case \u4e00\u5b9a\u662f n % (n + 1) = n</p> <p>\\(k=2\\) \u7684 case \u53bb\u89c0\u5bdf\u6703\u767c\u73fe even \u9805\u90fd\u662f n / 2\uff0codd \u9805\u6070\u597d\u662f\u81ea\u5df1\u80fd\u8986\u84cb\u7684\u5340\u9593\u7684\u524d\u4e00\u500b\u6578\uff0c\u53ef\u4ee5\u53bb\u905e\u8ff4\uff0c\u8907\u96dc\u5ea6 \\(O(\\log n)\\)</p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nint f(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 0;\n    if (n % 2 == 0) return n / 2;\n    else return f(n / 2);\n}\n\nsigned main() {\n    int n, k;\n    cin &gt;&gt; k &gt;&gt; n;\n    if (k == 1) {\n        cout &lt;&lt; n &lt;&lt; '\\n';\n    } else {\n        cout &lt;&lt; f(n) &lt;&lt; '\\n';\n    }\n} \n</code></pre> Wythoff's game \u6d1b\u8c37 P2252 [SHOI2002] \u53d6\u77f3\u5b50\u6e38\u620f|\u3010\u6a21\u677f\u3011\u5a01\u4f50\u592b\u535a\u5f08 <p>\u4e00\u958b\u59cb\u6709\u5169\u5806\u500b\u77f3\u982d\uff0c\u6bcf\u500b\u56de\u5408\u53ef\u4ee5\u9078\u4e00\u5806\uff0cA, B \u8f2a\u6d41\uff0c\u6bcf\u8f2a\u53ef\u4ee5\u505a\u5176\u4e2d\u4e00\u500b\u64cd\u4f5c </p> <ul> <li> <p>\u5f9e\u5176\u4e2d\u4e00\u5806\u53d6\u8d70\u4efb\u610f\u6578\u91cf\u7684\u77f3\u982d</p> </li> <li> <p>\u6216\u5f9e\u5169\u5806\u53d6\u8d70\u76f8\u540c\u6578\u91cf\u7684\u77f3\u982d</p> </li> </ul> <p>\u4e0d\u80fd\u62ff\u5c31\u8f38\u3002\u554f\u8ab0\u8d0f</p> 2022 IONC C. \u53d6\u77f3\u5b50\u904a\u6232 (kgame) <p>\u4e00\u958b\u59cb\u6709 \\(n\\) \u9846\u77f3\u982d\u8207\u4e00\u500b\u6b63\u6574\u6578 \\(k\\)\uff0c\u6709\u5169\u500b\u4eba\u6703\u8f2a\u6d41\u53d6\u51fa\u4e00\u4e9b\u77f3\u982d\u3002</p> <p>\u5047\u8a2d\u904a\u6232\u9032\u884c\u4e86 \\(m\\) \u8f2a\uff0c\u4e26\u4e14\u53d6\u51fa\u7684\u77f3\u982d\u6578\u91cf\u7684\u5e8f\u5217\u70ba \\(a_1, a_2, \\ldots, a_m\\)\uff0c\u90a3\u9ebc\u5fc5\u9808\u8981\u6eff\u8db3\u4ee5\u4e0b\u5169\u500b\u689d\u4ef6\uff1a</p> <ul> <li> <p>\u5c0d\u65bc \\(i = 1, 2, \\ldots, m\\)\uff0c\\(1 \\le a_i \\le k-1\\)\u3002</p> </li> <li> <p>\u5c0d\u65bc \\(j = 1, 2, \\ldots, m-1\\)\uff0c\\(a_j + a_{j+1} \\le k\\)\u3002</p> </li> </ul> <p>\u5148\u5c07\u77f3\u982d\u53d6\u5b8c\u7684\u90a3\u500b\u4eba\u7372\u52dd\uff0c\u82e5\u662f\u96d9\u65b9\u90fd\u7121\u6cd5\u5c07\u77f3\u982d\u53d6\u5b8c\u5373\u8996\u70ba\u5e73\u624b\u3002\u5728\u5df2\u77e5 \\(n\\)\u3001\\(k\\) \u7684\u60c5\u6cc1\u4e0b\uff0c\u8acb\u554f\u8ab0\u6709\u5fc5\u52dd\u7b56\u7565\uff1f\u5728\u4e00\u7b46\u6e2c\u8cc7\u4e2d\uff0c\u4f60\u9700\u8981\u8655\u7406 \\(T\\) \u7d44\u8f38\u5165\u3002</p> <p>\\(1 \\le T \\le 10^5,1 \\le k \\le 10^{18},1 \\le k \\le n\\)</p> \u601d\u8def <p>\u4f8b\u5982\u8aaa\u5148\u624b\u53d6\u4e86 \\(x\\) \u4e4b\u5f8c\uff0c\u5f8c\u624b\u4e00\u5b9a\u53ef\u4ee5\u53d6 \\(y\\) \u4f7f \\(x+y=K\\)\uff0c\u4e5f\u5c31\u4ee3\u8868\u7576 n % k = 0 \u6642\u5148\u624b\u5fc5\u8f38\u3002\u90a3\u9ebc\u7121\u89e3\u7684 case \u5462 ? \u7576 k = 1 \u6642\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nsigned main() {\n    int q;\n    cin &gt;&gt; q;\n    while(q--) {\n        int n, k;\n        cin &gt;&gt; n &gt;&gt; k;\n        if (k == 1) {\n            cout &lt;&lt; \"RedLeaf\\n\";\n        } else if (n % k == 0) {\n            cout &lt;&lt; \"Leaf\\n\";\n        } else {\n            cout &lt;&lt; \"Red\\n\";\n        }\n    }\n} \n</code></pre> TOI 2021 \u4e8c\u6a21 p1. \u77f3\u982d\uff08Stone\uff09 <p>\u6709 \\(n\\) \u5806\u77f3\u982d\uff0c\u7b2c \\(i\\) \u5806 \\(a_i\\) \u500b\uff0cAlice, Bob \u9032\u884c Nim\uff0c\u4f46\u6bcf\u6b21\u62ff\u7684\u77f3\u982d\u6578\u91cf\u55ae\u8abf\u905e\u6e1b\uff0c\u4e14\u7b2c\u4e00\u6b65\u4e0d\u80fd\u62ff\u8d85\u904e \\(r\\) \u500b\u77f3\u982d\uff0c\u554f\u7b2c\u4e00\u6b65\u6709\u5e7e\u7a2e\u53ef\u80fd\u7684\u62ff\u53d6\u65b9\u5f0f</p> <p>\\(1 \\le n \\le 10^5, 1 \\le r, a_i \\le 10^9\\)</p> \u601d\u8def <p>\u3010subtask 1: 1 &lt;= n &lt;= 3, 1 &lt;= r, a[i] &lt;= 100\u3011</p> <p>\u4ee4 dp(A, B, C, r) \u70ba\u9019\u4e00\u8f2a\u62ff r \u500b\uff0c\u662f\u5426\u6703\u8d0f\u3002\u53ef\u4ee5\u4ee4 S(A, B, C, r) = S(A, B, C, r-1) or dp(A, B, C, r)\uff0c\u4f7f\u7528 prefix or \u512a\u5316\u3002  </p> <p> dp(A, B, C, r) = {dp(A-r, B, C, 1~r) or dp(A, B-r, C, 1~r) or dp(A, B, C-r, 1~r) } </p> <p>\u3010subtask 3: n = 1\u3011</p> <p>\u4ee4 dp(A, B, C, r) \u70ba\u76ee\u524d\u6700\u591a\u62ff r \u500b\uff0c\u6211\u5011\u5206\u5225\u8003\u616e r = 1, 2, 3 \u7684\u8f49\u79fb:</p> <p>r = 1 \u6642\u6211\u5011\u53ea\u9700\u8981\u8003\u616e A \u7684\u5947\u5076\u6027\uff0c\u6240\u4ee5\u5217\u51fa\uff1a</p> <p>dp(A, r = 1) = max{ 1-dp(A-1, r = 1) } = A % 2\u3002</p> <p>r = 2 \u6211\u5011\u53ef\u4ee5\u62ff\u4e00\u500b\u6216\u5169\u500b\uff0c\u6240\u4ee5 dp(A, r = 2) = max{ 1-dp(A-2, r = 2), 1-dp(A-1, r = 1) }\uff0c\u53ef\u4ee5\u767c\u73fe 1-dp(A-1, r = 1) \u6070\u597d\u662f\u4e0a\u9762 dp(A, r = 1) \u7684\u72c0\u614b\uff0c\u6240\u4ee5\u6211\u5011\u53c8\u53ef\u4ee5\u5217\u51fa</p> <p>dp(A, r = 2) = max{ 1-dp(A-2, r = 2), dp(A, r = 1) }</p> <p>\u540c\u7406\uff0c r = 3 \u6642\u5217\u51fa</p> <p>dp(A, r = 3) = max{ 1-dp(A-3, r = 3), 1-dp(A-2, r = 2), 1-dp(A-1, r = 1) }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0= max{ 1-dp(A-3, r = 3), dp(A, r=2) }</p> <p>\u5982\u679c\u6253\u8868\u7684\u8a71\u6703\u767c\u73fe\u6070\u597d\u662f\u4ee5 0111... \u7684\u5faa\u74b0\u7bc0\u51fa\u73fe\uff0c\u4f8b\u5982\u82e5 r = 1\uff0c\u5faa\u74b0\u7bc0\u70ba 01\uff0c\u9577\u5ea6\u70ba 2\uff1b\u82e5 r = 2 ~ 3\uff0c\u5faa\u74b0\u7bc0\u70ba 0111\uff0c\u9577\u5ea6\u70ba 4\uff1b\u82e5 r = 4 ~ 7\uff0c\u5faa\u74b0\u7bc0\u70ba 01111111\uff0c\u9577\u5ea6\u70ba 8\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7e3d\u7d50\u51fa dp(A, r) \u5c31\u662f [A % r \u4ee5\u4e0b\u6700\u5927\u7684\u4e8c\u7684\u51aa\u6b21] % 4 != 0\uff0c\u4f8b\u5982\u8aaa r = 2 \u5c31\u662f [A % 4] != 0\u3002</p> <p> </p> <p>\u7528\u5206\u6790\u7684\u89d2\u5ea6\u60f3\uff0c\u5c31\u662f\u6211\u5011\u53ef\u4ee5\u767c\u73fe\u6bcf\u683c\u90fd\u662f\u4e0a\u9762\u90a3\u683c\u8207 1 - \u524d\u9762\u90a3\u683c\u53d6 max\uff0c\u6240\u4ee5\u5728\u8dd1 r \u7684\u6642\u5019\u5e7e\u4e4e\u53ef\u4ee5\u628a r - 1 \u90a3\u4e00\u500b row \u7d66\u6284\u4e0b\u4f86\uff0c\u770b 0 \u7684\u5730\u65b9\u7684\u524d r \u683c\u662f\u4e0d\u662f 0\uff0c\u662f\u7684\u8a71\u9019\u683c\u5c31\u662f 1\u3002\u6211\u5011\u767c\u73fe r = 2 \u8207 r = 3 \u662f\u4e00\u6a21\u4e00\u6a23\u7684\uff0c\u56e0\u70ba r = 3 \u5728 r = 2 \u70ba 0 \u7684\u5730\u65b9\u5f80\u524d 3 \u683c\u4e26\u6c92\u6709\u78b0\u5230 0\uff08\u624b\u4e0d\u5920\u9577\uff09\uff0c\u4f46\u5230 r = 4 \u6642\u5c31\u525b\u597d\u53ef\u4ee5\u6478\u5230\u4e86\uff0c\u7136\u5f8c\u8981\u4e00\u76f4\u5230 r = 8 \u624d\u80fd\u4f7f\u9023\u7e8c\u7684 1 \u518d\u8b8a\u7684\u66f4\u9577\u3002</p> <p> </p> <p>\u3010subtask 2: r = 1, r = 2\u3011</p> <p>\u6211\u5011\u7528\u7a0b\u5f0f\u5c07 dp(A, B, C, r = 2) \u90fd\u6253\u8868\u51fa\u4f86\uff0c\u6703\u767c\u73fe\u6211\u5011\u5b8c\u5168\u627e\u4e0d\u5230\u898f\u5f8b\uff0c\u6240\u4ee5\u6211\u5011\u5c31\u5148\u628a\u662f\u4f4d\u7f6e (A, B, C) \u7d66\u5370\u51fa\u4f86\uff0c\u8003\u616e\u8cfd\u5c40\u7406\u8ad6\u5e38\u5e38\u7528 xor\uff0c\u6211\u5011\u8a66\u8457\u5c07 A xor B xor C\uff0c\u7d50\u679c\u767c\u73fe\u4ed6\u5011\u90fd\u525b\u525b\u597d\u662f 2 \u7684\u500d\u6578\uff0c\u4e5f\u5c31\u662f % 2 = 0\uff0c\u56e0\u70ba\u6211\u5011\u4e0a\u9762\u7684\u5b50\u984c\u6709\u63a8\u7406\u904e\u6703\u6bcf r \u500b\u5faa\u74b0\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5217\u51fa\u5982\u679c dp(A, B, C, r) \u662f 0 iff (A ^ B ^ C) % 2 == 0 \u3002</p> <p>\u3010subtask all\u3011</p> <p>\u6211\u5011\u4e00\u6a23\u7528\u7a0b\u5f0f\u53bb\u6aa2\u67e5 dp(A, B, C, r) \u5728 r = 1, 2, 4, 8 \u6703\u4e0d\u6703\u50cf\u4e0a\u9762\u4e00\u6a23\u5177\u6709\u8b93\u5faa\u74b0\u7bc0\u8b8a\u9577\uff0c\u4e14\u6070\u597d\u662f 2 \u7684\u51aa\u6b21\u7684\u8de1\u8c61\uff0c\u4e5f\u5c31\u662f\u4f8b\u5982  dp(A, B, C, 2) \u9700\u8981\u53bb\u7b49\u65bc dp(A, B, C, 3)\u3002\u6211\u5011\u767c\u73fe\u662f\u78ba\u5be6\u7684\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5f97\u51fa\u6700\u5f8c\u7684\u7d50\u8ad6\uff1aans = 0 iff xor{ a[i] } % d == 0\uff0c\u5176\u4e2d d \u70ba r \u4ee5\u4e0b\u6700\u5927\u7684\u4e8c\u7684\u51aa\u6b21\u3002</p> POI2016 Nim z utrudnieniem <p>\u6709 \\(n\\) \u5806\u77f3\u982d\uff0c\u5206\u5225\u6709 \\(a_1, \\ldots , a_n\\) \u500b\uff0cAlice, Bob \u8f2a\u6d41\u73a9\u4e00\u500b game\uff0c\u8f2a\u5230\u81ea\u5df1\u6642\u53ef\u4ee5\u9078\u5176\u4e2d\u4e00\u5806\uff0c\u62ff\u81f3\u5c11\u4e00\u500b\u77f3\u982d\uff0c\u4e0d\u80fd\u62ff\u5c31\u8f38\u3002\u5728\u904a\u6232\u958b\u59cb\u524d\u554f\uff0cB \u53ef\u4ee5\u4e1f\u6389\u82e5\u5e72\u5806\u77f3\u5b50\uff0c\u4f46\u662f\u5fc5\u9808\u4fdd\u8b49\u4e1f\u6389\u7684\u5806\u6578\u662f \\(d\\) \u7684\u500d\u6578\uff0c\u4e14\u4e0d\u80fd\u4e1f\u6389\u6240\u6709\u77f3\u5b50\u3002\u554f Bob \u6709\u5e7e\u7a2e\u4e1f\u6389\u65b9\u6848\uff0c\u53ef\u4ee5\u8b93 Bob \u8d0f</p> <p>\\(1\\le n \\le 2\\times 10^5,1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u9996\u5148\u6211\u5011\u8981\u77e5\u9053\u4e00\u500b\u7d50\u8ad6\uff1aBob \u5fc5\u52dd\u7576\u4e14\u50c5\u7576\u6700\u521d\u7684\u6240\u6709\u77f3\u5b50\u6578\u7570\u6216\u548c = 0\u3002\u9019\u662f Nim \u904a\u6232\u7684\u7d50\u8ad6\u3002\u6211\u5011\u4ee4 \\(dp(i, j, k)\\) \u8868\u793a\u73fe\u5728\u770b\u5230 \\(i\\)\uff0c\u5df2\u4e1f\u6389\u7684\u5806\u6578\\(\\mod d = j\\)\uff0c\u5269\u4e0b\u7684\u77f3\u5806 xor \u8d77\u4f86\u662f \\(k\\)\uff0c\u8f49\u79fb\u5f0f\u70ba \\(dp(i, j , k)=dp(i - 1,j,k) + dp(i-1,j-1,k\\oplus a_i)\\)\u3002\u9019\u6a23\u7684\u8907\u96dc\u5ea6\u662f \\(O(n\\times d\\times \\max \\{ a_i \\})\\)\uff0c\u6703 TLE\u3002\u6709\u4e00\u500b\u5f88\u5de7\u5999\u7684\u6027\u8cea\u662f\uff1a\u5c0d\u65bc\u4e00\u500b\u4efb\u610f\u7684\u6578\u5b57 \\(x\\)\uff0c\u4ed6\u548c\u6bd4\u81ea\u5df1\u5c0f\u7684\u6578\u5b57 xor \u8d77\u4f86\u4e0d\u6703\u8d85\u904e \\(2x\\)\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5c07 \\(a\\) \u6578\u7d44\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9019\u6a23\u6383\u5230\u7b2c \\(i\\) \u5806\u7684\u6642\u5019\u6211\u5011 \\(k\\) \u9019\u7dad\u4e0d\u7528\u679a\u8209\u5230 \\(m\\)\uff0c\u53ea\u9700\u8981\u679a\u8209\u5230 \\(2a_i\\) \u5c31\u884c\u4e86\uff0c\u9019\u6a23\u5747\u6524\u4e0b\u4f86\u6703\u8b8a \\(O(d\\times (2a_1+2a_2+\\ldots +2a_n))\\)\uff0c\u5dee\u4e0d\u591a\u662f \\(O(d\\times \\sum a_i)=O(md)\\)\u3002\u7a7a\u9593\u7684\u90e8\u5206\u53ef\u80fd\u6709\u9ede\u5927\uff0c\u6211\u5011\u4f7f\u7528\u6efe\u52d5\u6578\u7d44\u7701\u7565 \\(i\\) \u7684\u90a3\u7dad\u5373\u53ef\u3002\u6211\u5011\u63a1\u7528\u6efe\u52d5\u6578\u7d44\u662f\u7531 \\(j\\) \u5927\u5230\u5c0f\u53bb\u66f4\u65b0\uff0c\u9019\u6a23\u624d\u628a\u65b0\u7684\u72c0\u614b\u7b97\u904e\u4f86\uff0c\u4f46\u7576 \\(j=0\\) \u6642\u61c9\u8a72\u8981\u5f9e \\(j=d-1\\) \u9019\u908a\u8f49\u79fb\u904e\u4f86\uff0c\u4f46\u6b64\u6642 \\(j=d-1\\) \u5df2\u7d93\u662f\u65b0\u7684\u72c0\u614b\uff0c\u6240\u4ee5\u6211\u5011\u9019\u500b\u53ef\u80fd\u8981\u958b\u500b tmp \u9663\u5217\u53e6\u5916\u5b58\u4e00\u4e0b \\(j=d-1\\) \u7684 \\(dp(j,k)\\)\u3002\u6700\u5f8c\u7684\u7b54\u6848 xor \u51fa\u4f86\u61c9\u8a72\u8981\u662f xor{a_i} ^ [\u522a\u6389\u7684] \u8981 = 0\uff0c\u6240\u4ee5 [\u522a\u6389\u7684] = xor{a_i}</p> code <pre><code> #include &lt;bits/stdc++.h&gt;\n #define int long long\n using namespace std;\n\n const int N = 500000 + 5;\n const int mod = 1e9 + 7;\n\n int sum, n, d, a[N], dp[11][1 &lt;&lt; 20], tmp[1 &lt;&lt; 20];\n\n signed main() {\n     cin &gt;&gt; n &gt;&gt; d;\n     for (int i = 1; i &lt;= n; ++i) {\n         cin &gt;&gt; a[i];\n         sum ^= a[i];\n     }\n     sort(a + 1, a + 1 + n);\n     dp[0][0] = 1;\n     for (int i = 1; i &lt;= n; ++i) {\n         int max = 1;\n         while (max &lt;= a[i]) {\n             max &lt;&lt;= 1;\n         }\n         for (int k = 0; k &lt; max; ++k) {\n             tmp[k] = dp[d - 1][k];\n         }\n         for (int j = d - 1; j &gt; 0; j--) {\n             for (int k = 0; k &lt; max; k++) {\n                 dp[j][k] = (dp[j][k] + dp[j - 1][k ^ a[i]]) % mod;\n             }\n         }\n         for (int k = 0; k &lt; max; k++) {\n             dp[0][k] = (dp[0][k] + tmp[k ^ a[i]]) % mod;\n         }\n     }\n     if (n % d == 0) {\n         dp[0][sum] -= 1;\n         // \u6263\u9664\u6240\u6709\u90fd\u9078\u7684\u72c0\u614b\n     }\n     cout &lt;&lt; (dp[0][sum] + mod) % mod;\n     return 0;\n }\n</code></pre> USACO 2022 DEC Circular Barn S <p>\u6709 n \u5806\u77f3\u5b50\uff0cAlice \u8ddf Bob \u8f2a\u6d41\u5f9e\u6bcf\u4e00\u5806\u4f9d\u5e8f\u53d6\u8d70 1 \u6216\u4efb\u610f\u8cea\u6578\u679a\uff0c\u5148\u7121\u6cd5\u64cd\u4f5c\u8005\u6557\u3002\u7d66\u5b9a\u521d\u59cb\u72c0\u614b\uff0c\u6c42\u52dd\u8005\u3002</p> <p>\\(n\\le 2\\times 10^5, 1\\le a_i\\le 5\\times 10^6\\)</p> \u601d\u8def <p>\u5148\u8003\u616e n = 1\uff0c\u6253\u8868\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c\u7576 a[i] % 4 == 0 \u6642\uff0c\u5148\u624b\u5fc5\u6557\u3002\u518d\u8003\u616e\u5230 n &gt; 1 \u7684\u60c5\u6cc1\u3002\u8003\u616e\u5c0d\u65bc\u4e00\u500b\u623f\u9593\uff0c\u90a3\u500b\u8d0f\u7684\u4eba\u5fc5\u5b9a\u60f3\u7e2e\u77ed\u64cd\u4f5c\u6b21\u6578\uff08\u539f\u56e0\u662f\u5c0d\u65bc\u9019\u500b\u623f\u9593\u53ef\u4ee5\u76e1\u5feb\u8d0f\uff0c\u4ee5\u9632\u6b62\u5230\u5f8c\u9762\u7684\u623f\u9593\u8b93\u8f38\u7684\u4eba\u7ffb\u76e4\uff09\uff0c\u8f38\u7684\u4eba\u60f3\u4f7f\u64cd\u4f5c\u6b21\u6578\u8d8a\u591a\u8d8a\u597d\uff08\u539f\u56e0\u662f\u9019\u500b\u623f\u9593\u64cd\u4f5c\u6b21\u6578\u591a\u4e86\uff0c\u7d50\u675f\u7684\u6642\u9593\u6703\u62d6\u5ef6\uff0c\u4ee5\u7d66\u5f8c\u9762\u7684\u623f\u9593\u88fd\u9020\u6a5f\u6703\uff09\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u8981\u6309\u7167\u96d9\u65b9\u7684\u7b56\u7565\u7b97\u51fa\u64cd\u4f5c\u6b21\u6578\uff0c\u53d6\u6700\u65e9\u7d50\u675f\u7684\u90a3\u500b\u623f\u9593\u5373\u53ef\u3002</p> <p>\u63a5\u4e0b\u4f86\u5c31\u8981\u60f3\u5982\u4f55\u5feb\u901f\u5730\u7b97\u4e00\u500b\u623f\u9593\u6703\u64cd\u4f5c\u5e7e\u6b21\uff08\u4e00\u4eba\u64cd\u4f5c\u7b97\u4e00\u6b21\uff09\u3002\u6211\u5011\u7e7c\u7e8c\u5206\u985e\u8a0e\u8ad6\uff1a \u7576 a[i] \u70ba\u5fc5\u6557\u9ede\u6642\uff0c\u4e5f\u5c31\u662f a[i] % 4 == 0\uff0c\u56e0\u70ba\u4e0d\u7ba1\u600e\u9ebc\u6a23\u90fd\u662f\u5fc5\u6557\uff0c\u6240\u4ee5\u6211\u5011\u8981\u76e1\u91cf\u60f3\u8fa6\u6cd5\u62d6\u5ef6\u5f8c\u624b\u7684\u64cd\u4f5c\u6b21\u6578\uff0c\u6211\u5011\u767c\u73fe\u7576\u6211\u5011\u53d6\u5947\u6578\u9846\u77f3\u982d\uff08\u4f8b\u5982 1 \u9846\uff09\u5f8c\uff0c\u4e0b\u4e00\u6b65\u5f8c\u624b\u53ef\u80fd\u5c31\u6709\u6a5f\u6703\u4e00\u6b21\u53d6\u597d\u5e7e\u9846\uff08\u4f8b\u5982 7 \u9846\uff0c\u8b93 (1 + 7) % 4 == 0\uff09\uff0c\u4f46\u5982\u679c\u6211\u5011\u53d6 2 \u9846\uff0c\u56e0\u70ba 2 \u4f5c\u70ba\u552f\u4e00\u7684\u5076\u8cea\u6578\uff0c\u53d6\u5b8c\u5f8c\u5f8c\u624b\u5c31\u53ea\u80fd\u53d6 2 \u9846\u4e86\uff0c\u56e0\u70ba\u53ea\u6709\u9019\u6a23\u624d\u80fd\u5230\u9054 4 \u7684\u500d\u6578\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5f97\u5230\u64cd\u4f5c\u6b21\u6578\u5c31\u662f a[i] / 2 \u7684\u7d50\u8ad6\u3002</p> <p>\u7576 a[i] \u70ba\u5fc5\u52dd\u9ede\u6642\uff0c\u4e5f\u5c31\u662f a[i] % 4 != 0\uff0c\u6211\u5011\u8981\u53d6\u8d8a\u5927\u8d8a\u597d\u8b93\u904a\u6232\u76e1\u5feb\u7d50\u675f\uff0c\u800c\u4e14\u53c8\u8981\u5230\u9054\u5148\u624b\u5fc5\u6557\u7684\u72c0\u614b\uff0c\u6240\u4ee5\u4ee4 p \u70ba\u6700\u5927\u7684\u8cea\u6578\uff0c\u4f7f (a[i] - p % 4) == 0\uff0c\u63a5\u4e0b\u4f86\u5c31\u662f a[i] \u70ba\u5fc5\u6557\u9ede\u7684\u5b50\u554f\u984c\u3002\u6240\u4ee5\u64cd\u4f5c\u6b21\u6578\u5c31\u662f (a[i] - p) / 2 + 1 \u6b21\u3002</p> <p>\u5be6\u4f5c\u4e0a\uff0c\u6211\u5011\u4f7f\u7528\u7be9\u6cd5\u5148\u9810\u8655\u7406\u51fa\u7bc4\u570d\u5167\u7684\u5168\u90e8\u8cea\u6578\uff0c\u9806\u4fbf\u9810\u8655\u7406\u6bcf\u500b\u6578\u5b57\u7684 p\u3002\u6700\u5f8c\u5c31\u770b\u6bcf\u500b a[i] \u7684\u56de\u5408\u6578\u7684\u6700\u5c0f\u503c\u662f\u54ea\u4e00\u500b\uff0c\u7136\u5f8c\u518d\u53bb\u770b\u8a72 a[i] \u662f\u5c0d\u61c9\u5230\u8ab0\u8d0f\u5373\u53ef\u3002\u6ce8\u610f\u5230\u56de\u5408\u6578\u662f\u64cd\u4f5c\u6b21\u6578\u7684\u4e00\u534a\uff0c\u56e0\u70ba\u4e00\u56de\u5408\u662f\u6709\u5169\u6b21\u64cd\u4f5c\u7684\uff0c\u6240\u4ee5\u4f8b\u5982\u4e09\u6b21\u64cd\u4f5c\u8207\u56db\u6b21\u64cd\u4f5c\u5be6\u969b\u4e0a\u90fd\u662f\u7b2c\u4e8c\u56de\u5408\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e5 + 10, M = 5e6;\nint T, n, x, cnt, ans, mx[4], v[M + 10], vis[M + 10], prime[M];\n\nvoid get_prime(int n) {\n    vis[1] = 1;\n    mx[1] = 1;\n    v[1] = 1;\n    for (int i = 2; i &lt;= n; i++) {\n        if (!vis[i]) {\n            prime[++cnt] = i;\n            mx[i % 4] = i;\n        }\n        for (int j = 1; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= n; j++) {\n            vis[i * prime[j]] = 1;\n            if (!(i % prime[j])) {\n                break;\n            }\n        }\n        v[i] = !(i % 4) ? i / 2 : (i - mx[i % 4]) / 2 + 1;\n    }\n}\n\nint main() {\n    scanf(\"%d\", &amp;T);\n    get_prime(M);\n    while (T--) {\n        scanf(\"%d\", &amp;n);\n        ans = 1e9;\n        for (int i = 1; i &lt;= n; i++) {\n            scanf(\"%d\", &amp;x);\n            if (v[x] / 2 &lt; ans / 2)\n                ans = v[x];\n        }\n        if (ans &amp; 1) {\n            puts(\"Farmer John\");\n        } else {\n            puts(\"Farmer Nhoj\");\n        }\n    }\n    return 0;\n}\n</code></pre> CF 1194 D. 1-2-K Game <p>\u6709 \\(n\\) \u500b\u77f3\u982d\uff0c\u6bcf\u6b21\u62ff \\(1\\) \u500b, \\(2\\) \u500b, \u6216 \\(k\\) \u500b\uff0cA, B \u8f2a\u6d41\u62ff\uff0c\u4e0d\u80fd\u62ff\u77f3\u982d\u7684\u4eba\u5c31\u8f38\u4e86\u3002\u554f\u8ab0\u8d0f</p> <p>\\(0\\le n\\le 10^9,3\\le k\\le 10^9\\)</p> \u601d\u8def <p>\u6253\u8868\uff0c\u89c0\u5bdf\uff0c\u8a73\u7d30\u53ef\u898b Yuihuang's \u984c\u89e3</p> codeforces 603C. Lieges of Legendre codeforces 305E. Playing with String 2022 npsc \u9ad8\u4e2d\u7d44\u521d\u8cfd pF.\u53d6\u871c\u67d1 \u601d\u8def <p>\u5982\u679c\u6578\u5b57&gt;1\uff0c\u90a3\u53ef\u4ee5\u90fd\u8996\u70ba2\uff0c\u56e0\u70ba(x&gt;1) x\u5c31\u53ef\u4ee5\u6c7a\u5b9a\u8981\u4e00\u6b21\u62ff\u5168\u90e8\u6216\u8005\u62ff\u5230\u52691\u500b\uff0c\u9664\u4e861,1,...1,x \u548c 1,1,1,1,1 \u90fd\u662f1/2 \uff0c1,11..x\u5982\u679c\u4f4d\u6578\u662f\u5076\u6578\u90a3\u662f1/2,\u5947\u6578\u662f (x/2+1)/x</p>"},{"location":"math/game_theory/#_4","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://blog.csdn.net/a_forever_dream/article/details/104813148</p> </li> <li> <p>https://hackmd.io/@cOBW6f27TLewMLxYuitcdw/BktH-2A6_</p> </li> </ul> <ol> <li> <p>mex : \u6700\u5c0f\u4e0d\u5b58\u5728\u7684\u975e\u8ca0\u6574\u6578\u3002\u66f4\u8a73\u7d30\u4ecb\u7d39\u898b\u6b64\u8655 \u21a9</p> </li> </ol>"},{"location":"math/geometry/","title":"\u8a08\u7b97\u5e7e\u4f55","text":""},{"location":"math/geometry/#_1","title":"\u5411\u91cf\u904b\u7b97","text":""},{"location":"math/geometry/#dot","title":"\u5411\u91cf\u5167\u7a4d dot","text":"<p>\u4ee5\u4e0b\u5716\u4f86\u8aaa\uff0cdot(AB, AC) = dot(AC, AB) = |AD| * |AB| </p> <p></p>"},{"location":"math/geometry/#cross","title":"\u5411\u91cf\u5916\u7a4d cross","text":"<p>\u53f3\u624b\u5b9a\u5247\uff0c\u9806\u6642\u9418\u70ba\u8ca0\uff0c\u9006\u6642\u9418\u70ba\u6b63\u3002\u4ee5\u4e0b\u5716\u4f86\u8aaa\uff0ccross(AB, AC) = |AB| * |AD|</p> <p></p> \u6a21\u677f\u6574\u7406 <pre><code>using Point = pair&lt;double, double&gt;;\n#define x first\n#define y second\nPoint operator+(Point a, Point b) {\n    return {a.x + b.x, a.y + b.y};\n}\nPoint operator-(Point a, Point b) {  \n    return {a.x - b.x, a.y - b.y};\n}\nPoint operator*(Point a, double d) { \n    return {d * a.x, d * a.y};\n}\ndouble dot(Point a, Point b) {  \n    return a.x * b.x + a.y * b.y;\n}\ndouble cross(Point a, Point b) { \n    return a.x * b.y - a.y * b.x;\n}\n</code></pre>"},{"location":"math/geometry/#_2","title":"\u51f8\u591a\u908a\u5f62\u9762\u7a4d","text":"<p>\u5c07\u591a\u908a\u5f62\u7684\u5404\u9802\u9ede\u9006\u6642\u9418\u6392\u5217\uff0c\u5c0d\u65bc\u6bcf\u500b\u9ede\u5229\u7528\u5916\u7a4d\u4e4b\u548c\u53ef\u4ee5\u6c42\u51fa\u4e00\u591a\u908a\u5f62\u9762\u7a4d\uff0c \u76f8\u95dc\u8cc7\u8a0a\u53ef\u67e5\u8a62\uff1a\u6e2c\u91cf\u5e2b\u516c\u5f0f(Surveyor\u2019s Formula)</p> <p></p> code <pre><code>double area(vector&lt;Point&gt; &amp;points) {\n    int n = points.size();\n    double ret = 0;\n    for (int i = 1; i &lt; n; i++) {\n        ret += cross(points[i], points[i - 1]);\n    }\n    ret += cross(points[0], points[n - 1]);\n    return fabs((double)ret / 2);\n}\n</code></pre> CSES - Polygon Area <p>\u7d66\u4e00\u500b n \u500b\u9ede\u69cb\u6210\u7684\u591a\u908a\u5f62\uff0c\u6c42\u5176\u9762\u7a4d\uff0c\u9ede\u7684\u9806\u5e8f\u53ef\u80fd\u662f\u9806\u6642\u91dd\u6216\u662f\u9006\u6642\u91dd</p> <p>\\(1\\le n\\le 1000\\)</p>"},{"location":"math/geometry/#_3","title":"\u7dda\u6bb5\u76f8\u4ea4\u5224\u5b9a","text":"\u554f\u984c <p>\u7d66\u5169\u500b\u7dda\u6bb5\u7684\u7aef\u9ede\u5ea7\u6a19\uff0c\u5224\u65b7\u662f\u5426\u6709\u4ea4\u9ede</p> <p> </p> <p>\u6211\u5011\u5148\u5224\u65b7 A, B \u662f\u5426\u5728 CD \u5169\u5074\uff0c\u4e5f\u5c31\u662f\u770b cross(AB, AC) \u8207 cross(AB, AD) \u662f\u5426\u6b63\u8ca0\u865f\u4e0d\u540c\uff0c\u7136\u5f8c\u5224\u65b7\uff0c\u5224\u65b7 C, D \u662f\u5426\u5728 AB \u5169\u5074\uff0c\u4e5f\u5c31\u662f\u770b corss(AB, AC) \u8207 cross(AB, AD) \u662f\u5426\u6b63\u8ca0\u865f\u4e0d\u540c\uff0c\u5169\u8005\u90fd\u7b26\u5408\u6642\uff0c\u5fc5\u5b9a\u76f8\u4ea4</p> <p></p> \u76ee\u524d\u7684 code <pre><code>int sign(long long x) {\n    if (x &lt; 0) {\n        return -1;\n    } else if (x == 0) {\n        return 0;\n    } else {\n        return 1;\n    }\n}\nbool intersection(Point a, Point b, Point c, Point d) {\n    int c1 = sign(cross(b - a, c - a)) * sign(cross(b - a, d - a));\n    int c2 = sign(cross(d - c, a - c)) * sign(cross(d - c, b - c));\n    if (c1 == -1 &amp;&amp; c2 == -1) return true;\n    return false;\n}\n</code></pre> <p>\u4f46\u82e5\u767c\u751f cross = 0 \u7684 case \u5462 ? \u53ef\u80fd\u6703\u767c\u751f\u4e09\u9ede\u5171\u7dda</p> <p></p> <p>cross \u6709 0 \u7684\u5408\u6cd5 case \u81f3\u5c11\u6703\u6709\u4e09\u9ede\u5171\u7dda\uff0c\u6240\u4ee5\u6211\u5011\u76f4\u63a5\u5c07\u53ef\u80fd\u7684 case \u5217\u51fa\u4f86:</p> <ul> <li> <p>A \u5728 CD \u7dda\u6bb5\u4e0a\uff0c\u56de\u50b3 true</p> </li> <li> <p>B \u5728 CD \u7dda\u6bb5\u4e0a\uff0c\u56de\u50b3 true</p> </li> <li> <p>C \u5728 AB \u7dda\u6bb5\u4e0a\uff0c\u56de\u50b3 true</p> </li> <li> <p>D \u5728 AB \u7dda\u6bb5\u4e0a\uff0c\u56de\u50b3 true</p> </li> </ul> \u5982\u4f55\u5224\u65b7\u4e00\u500b\u9ede C \u5728\u4e00\u500b\u7dda\u6bb5 AB \u4e0a ? <p>\u9996\u5148\u8981\u5224\u65b7 C \u662f\u5426\u5728\u300c\u76f4\u7dda\u300d AB \u4e0a\uff0c\u4e5f\u5c31\u662f cross(AB, AC) \u662f\u5426\u70ba 0</p> <p>\u82e5\u5728\u300c\u76f4\u7dda\u300d AB \u4e0a\u7684\u8a71\uff0c\u518d\u4f86\u5c31\u8981\u5224\u65b7\u662f\u5426\u5728 A, B \u4e4b\u9593</p> <p> </p> <pre><code>bool onseg(Point a, Point b, Point c) {\n    if (cross(b - a, c - a) != 0) return false;\n    if (sign(dot(b - a, c - a)) &lt; 0) return false;\n    if (sign(dot(a - b, c - b)) &lt; 0) return false;\n    return true;\n}\n</code></pre> code <pre><code>bool onseg(Point a, Point b, Point c) {\n    if (cross(b - a, c - a) != 0) return false;\n    if (sign(dot(b - a, c - a)) &lt; 0) return false;\n    if (sign(dot(a - b, c - b)) &lt; 0) return false;\n    return true;\n}\nbool intersection(Point a, Point b, Point c, Point d) {\n    int c1 = sign(cross(b - a, c - a)) * sign(cross(b - a, d - a));\n    int c2 = sign(cross(d - c, a - c)) * sign(cross(d - c, b - c));\n    if (c1 == 1 || c2 == 1) return false;\n    if (c1 &lt; 0 &amp;&amp; c2 &lt; 0) return true;\n    if (onseg(a, b, c)) return true;\n    if (onseg(a, b, d)) return true;\n    if (onseg(c, d, a)) return true;\n    if (onseg(c, d, b)) return true;\n    return false;\n}\n</code></pre> CSES - Line Segment Intersection <p>\u6709 \\(t\\) \u7b46\u8a62\u554f\uff0c\u6bcf\u7b46\u7d66\u5b9a\u5169\u500b\u7dda\u6bb5\uff0c\u8a62\u554f\u662f\u5426\u76f8\u4ea4\uff08\u53ef\u80fd\u6709\u4e09\u9ede\u5171\u7dda\uff09</p> <p>\\(t\\le 10^5, -10^9 \\le x, y\\le 10^9\\)</p>"},{"location":"math/geometry/#_4","title":"\u627e\u5230\u5169\u500b\u76f4\u7dda\u7684\u4ea4\u9ede","text":"\u554f\u984c <p>\u7d66\u5b9a\u5169\u689d\u76f4\u7dda\uff0c\u627e\u51fa\u4ea4\u9ede\u5ea7\u6a19</p> <p> </p> <p>\u5229\u7528\u5411\u91cf\u4f38\u7e2e\uff0c\\(\\begin{align}\\overrightarrow{CP}=\\frac{\\ell_2}{\\ell_1}\\times\\overrightarrow{CD}\\end{align}\\)</p> <p></p> <p>\u81f3\u65bc \\(\\ell_1, \\ell_2\\) \u6211\u5011\u90fd\u53ef\u4ee5\u7528\u5916\u7a4d\u6c42\u51fa\u4f86:</p> <ul> <li> <p>\\(\\begin{align}\\ell_1=\\frac{\\overrightarrow{AB}\\times{\\overrightarrow{CD}}}{|\\overrightarrow{AB}|}\\end{align}\\)</p> </li> <li> <p>\\(\\begin{align}\\ell_2=\\texttt{-}\\frac{\\overrightarrow{AB}\\times{\\overrightarrow{AC}}}{|\\overrightarrow{AB}|}\\end{align}\\)</p> </li> </ul> <p>\u6ce8\u610f\u9019\u908a \\(\\ell_2\\) \u7684\u8a08\u7b97\u6211\u5011\u6709\u52a0\u8ca0\u865f\uff0c\u8981\u4f7f \\(\\ell_1, \\ell_2\\) \u6b63\u8ca0\u865f\u76f8\u540c\u3002\u6700\u5f8c\uff0c\u53ef\u5f97\u5230</p> \\[ \\begin{align}P=C+(\\texttt{-}\\frac{\\overrightarrow{AB}\\times\\overrightarrow{AC}}{\\overrightarrow{AB}\\times \\overrightarrow{CD}})\\times\\overrightarrow{CD}\\end{align} \\] code <pre><code>Point intersection_point(Point a, Point b, Point c, Point d) {\n    double ratio = (double)cross(b - a, c - a) / cross(b - a, d - c);\n    return c - ratio * (d - c);\n}\n</code></pre>"},{"location":"math/geometry/#_5","title":"\u8ddd\u96e2","text":""},{"location":"math/geometry/#_6","title":"\u4e00\u3001\u9ede\u5230\u7dda\u6bb5","text":"<p>\u82e5\u9ede\u5728\u7dda\u77ed\u7aef\u9ede\u4e4b\u5167\uff0c\u5c31\u770b\u9ede\u8207\u7dda\u6bb5\u7684\u5782\u76f4\u8ddd\u96e2\uff0c\u82e5\u9ede\u5728\u7dda\u6bb5\u7aef\u9ede\u4e4b\u5916\uff0c\u5c31\u770b\u9ede\u5230\u7aef\u9ede\u7684\u8ddd\u96e2\u3002</p> <p></p> code <pre><code>double disPS(Point a, Point b, Point c) {\n    // Seg(a, b) Point(c)\n    if (onseg(a, b, c)) return 0;\n    if (dot(c - a, b - a) &lt; 0) return dis(c, a);\n    if (dot(c - b, a - b) &lt; 0) return dis(b, a);\n\n    return (double)abs(cross(c - a, b - a)) / len(b - a);\n}\n</code></pre>"},{"location":"math/geometry/#_7","title":"\u4e8c\u3001\u7dda\u6bb5\u5230\u7dda\u6bb5","text":"<p>\u5169\u7dda\u6bb5\u76f8\u4ea4\uff0c\u8ddd\u96e2\u70ba\u96f6\uff1b\u5169\u7dda\u6bb5\u4e0d\u76f8\u4ea4\uff0c\u7aae\u8209\u6240\u6709\u7684\u7aef\u9ede\u5230\u7dda\u6bb5\u8ddd\u96e2\uff0c\u53d6\u6700\u77ed\u8005\uff08\u4e0d\u53ef\u80fd\u662f\u9078\u5728\u4e2d\u9593\uff0c\u56e0\u70ba\u628a\u4e2d\u9593\u9078\u7684\u9ede\u5f80\u5169\u7aef\u5176\u4e2d\u4e00\u7aef\u79fb\u52d5\u4e00\u5b9a\u6703\u66f4\u597d\uff09</p> <p></p> code <pre><code>double disSS(Point a, Point b, Point c, Point d) {\n    // Seg(a, b) Seg(c, d)\n    if (intersect(a, b, c, d)) return 0;\n\n    return min({disPS(a, b, c), disPS(a, b, d),\n                disPS(c, d, a), disPS(c, d, b)});\n}\n</code></pre>"},{"location":"math/geometry/#_8","title":"\u5224\u65b7\u9ede\u662f\u5426\u5728\u5716\u5f62\u5167","text":""},{"location":"math/geometry/#_9","title":"\u51f8\u5305\u5305\u542b\u6e2c\u8a66","text":"<p>\u628a\u51f8\u5305\u60f3\u6210\u7531\u4e00\u4e9b\u4e09\u89d2\u5f62\u7d44\u6210\uff0c\u53ef\u7528\u4e8c\u5206\u641c\u5728\u54ea\u500b\u4e09\u89d2\u5f62\u5167</p> <p></p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define x first\n#define y second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\nusing Point = pair&lt;long long, long long&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst int EPS = 1e-7;\n\nPoint operator+(Point a, Point b) {\n    return {a.x + b.x, a.y + b.y};\n}\n\nPoint operator-(Point a, Point b) {\n    return {a.x - b.x, a.y - b.y};\n}\n\nPoint operator*(Point a, double d) {\n    return {a.x * d, a.y * d};\n}\n\nint dot(Point a, Point b) {\n    return a.x * b.x + a.y * b.y;\n}\n\nint cross(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint abs2(Point a) {\n    // \u8a08\u7b97 a \u7684\u9577\u5ea6\u5e73\u65b9\n    return dot(a, a);\n}\n\nint sign(double x) {\n    if (abs(x) &lt; EPS) return 0;\n    return x &gt; 0 ? 1 : -1;\n}\n\nint onseg(Point a, Point b, Point c) {\n    if (cross(c - a, b - a) != 0) return false;\n    if (dot(c - a, b - a) &lt; 0) return false;\n    if (dot(a - b, c - b) &lt; 0) return false;\n\n    return true;\n}\n\nbool traingle(Point a, Point b, Point c, Point d) {\n    // \u5224\u65b7\u9ede\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5167 traingle(a, b, c), Point(d)\n    if (onseg(a, b, d)) return 1;\n    if (onseg(b, c, d)) return 1;\n    if (onseg(c, a, d)) return 1;\n\n    int c1 = sign(cross(b - a, d - a));\n    int c2 = sign(cross(c - b, d - b));\n    int c3 = sign(cross(a - c, d - c));\n\n    if (c1 == 1 &amp;&amp; c2 == 1 &amp;&amp; c3 == 1) return 1;\n    return 0;\n}\n\nvector&lt;Point&gt; prep(vector&lt;Point&gt; p) {\n    int n = p.size();\n\n    auto comp = [&amp;](Point a, Point b) {\n        return a.x &lt; b.x || (a.x == b.x &amp;&amp; a.y &lt; b.y);\n        // x \u505a\u70ba\u6392\u5e8f\u7684\u7b2c\u4e00\u9806\u4f4d\uff0c\u518d\u4f86\u662f y\n    };\n\n    int pos = 0;\n    for (int i = 1; i &lt; n; i++) {\n        if (comp(p[i], p[pos])) pos = i;\n    }\n    rotate(p.begin(), p.begin() + pos, p.end());\n    // new p = [pos ~ end] + [begin ~ pos - 1]\n    // ex: p = {1,2,3,4,5,6,7}\n    // rotate (p.begin(), p.begin() + 3, p.end())\n    // new p = {3,4,5,6,7,1,2}\n\n    for (int i = 1; i &lt; n; i++) {\n        p[i] = p[i] - p[0];\n    }\n    return p;\n}\n\nint inconvex(vector&lt;Point&gt; p, Point a) {\n    p = prep(p); // input \u7684 p \u5fc5\u9808\u662f\u9006\u6642\u9418\n    a = a - p[0];\n    int n = p.size();\n\n    // \u5728\u51f8\u5305\u4e0b\u65b9\n    if (cross(p[1], a) != 0 &amp;&amp;\n        sign(cross(p[1], a)) != sign(cross(p[1], p[n - 1])))\n        return false;\n\n    // \u5728\u51f8\u5305\u4e0a\u65b9\n    if (cross(p[n - 1], a) != 0 &amp;&amp;\n        sign(cross(p[n - 1], a)) != sign(cross(p[n - 1], p[1])))\n        return false;\n\n    // \u5728 p[1]~p[0]\n    if (cross(p[1], a) == 0)\n        return abs2(p[1]) &gt;= abs2(a);\n\n    int l = 1, r = n - 1;\n    while (l &lt; r - 1) {\n        int mid = (l + r) &gt;&gt; 1;\n        if (cross(p[mid], a) &gt;= 0)\n            l = mid;\n        else\n            r = mid;\n    }\n\n    return traingle({0, 0}, p[l], p[l + 1], a);\n}\n\nsigned main() {\n    vector&lt;Point&gt; p = {{5, 1}, {8, 3}, {7, 6}, {3, 8}, {1, 2}};\n    Point tar = {-3, 3};\n\n    cout &lt;&lt; (inconvex(p, tar) ? \"YES\" : \"NO\") &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"math/geometry/#_10","title":"\u591a\u908a\u5f62\u5305\u542b\u6e2c\u8a66","text":"<p>\u627e\u5c04\u7dda\uff0c\u7b97\u7dda\u6bb5\u4ea4\u7684\u6b21\u6578\uff0c\u5947\u6578\u6b21\u70ba\u5167\u90e8\uff0c\u5076\u6578\u6b21\u70ba\u5916\u90e8\u3002\u4f46\u5c04\u7dda\u53ef\u80fd\u6070\u597d\u76f8\u4ea4\u65bc\u7aef\u9ede\u4e0a\uff0c\u9019\u6a23\u6703\u58de\u6389\uff0c\u89e3\u6c7a\u8fa6\u6cd5\u5c31\u662f\u8b93\u5c04\u7dda\u7684\u659c\u7387\u5c04\u70ba\u7121\u9650\u5927\uff0c\u4f7f\u5f97\u6c92\u6709\u984c\u76ee\u7bc4\u570d\u5167\u7684\u6574\u6578\u9ede\u6703\u5728\u4e0a\u9762\uff0c\u4f8b\u5982\u8aaa\u5c04\u7dda\u5411\u91cf = (1, 2e9 + 1)</p> <p></p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define x first\n#define y second\nusing namespace std;\nusing Point = pair&lt;double, double&gt;;\n\nint n, m;\nvector&lt;Point&gt; p; \n\nPoint operator+(Point a, Point b) {\n    return {a.x + b.x, a.y + b.y};\n}\n\nPoint operator-(Point a, Point b) {\n    return {a.x - b.x, a.y - b.y};\n}\n\nPoint operator*(Point a, double d) {\n    return {a.x * d, a.y * d};\n}\n\nint dot(Point a, Point b) {\n    return a.x * b.x + a.y * b.y;\n}\n\nint cross(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint sign(int x) {\n    if (x &lt; 0) return -1;\n    if (x == 0) return 0;\n    return 1;\n}\n\nbool onseg(Point a, Point b, Point c) {\n    if (cross(c - a, b - a) != 0) return false;\n    if (dot(c - a, b - a) &lt; 0) return false;\n    if (dot(a - b, c - b) &lt; 0) return false;\n\n    return true;\n}\n\nint intersect(Point a, Point b, Point c, Point d) {\n    int c1 = sign(cross(b - a, c - a)) * sign(cross(b - a, d - a));\n    int c2 = sign(cross(d - c, b - c)) * sign(cross(d - c, a - c));\n    if (c1 == 1 || c2 == 1) return false; \n    if (c1 == -1 &amp;&amp; c2 == -1) return true; \n    if (onseg(a, b, c)) return true;\n    if (onseg(a, b, d)) return true;\n    if (onseg(c, d, a)) return true;\n    if (onseg(c, d, b)) return true;\n    return false;\n}\n\nvoid solve() {\n    Point tar;\n    cin &gt;&gt; tar.x &gt;&gt; tar.y;\n    for (int i = 1; i &lt; n; i++) {\n        if (onseg(p[i - 1], p[i], tar)) {\n            cout &lt;&lt; \"BOUNDARY\";\n            return;\n        }\n    }\n    if (onseg(p[0], p[n - 1], tar)) {\n        cout &lt;&lt; \"BOUNDARY\";\n        return;\n    }\n    Point cmp = tar + (Point){1, 2e9 + 1};\n    int cnt = 0;\n    for (int i = 1; i &lt; n; i++) {\n        if (intersect(p[i - 1], p[i], cmp, tar)) {\n            cnt++;\n        }\n    }\n    if (intersect(p[0], p[n - 1], cmp, tar)) {\n        cnt++;\n    }\n    if (cnt &amp; 1) cout &lt;&lt; \"INSIDE\";\n    else cout &lt;&lt; \"OUTSIDE\";\n}\n\nsigned main(){\n    cin &gt;&gt; n &gt;&gt; m;\n    p.resize(n);\n    for (int i = 0; i &lt; n; i ++) {\n        cin &gt;&gt; p[i].x &gt;&gt; p[i].y;\n    }\n    while (m--) {\n        solve();\n        cout &lt;&lt; \"\\n\";\n    }\n}\n</code></pre>"},{"location":"math/geometry/#_11","title":"\u51f8\u5305","text":"\u554f\u984c <p>\u7d66\u4e00\u4e9b\u5728\u4e8c\u70ba\u5e73\u9762\u4e0a\u7684\u9ede\uff0c\u9078\u4e00\u4e9b\u9ede\u4f7f\u5f97\u9019\u4e9b\u9ede\u9023\u7dda\u80fd\u5920\u5305\u4f4f\u6240\u6709\u9ede</p> <p>\u4e8c\u7dad\u5e73\u9762\u4e0a\u7684\u51f8\u5305\u662f\u4e00\u500b\u51f8\u591a\u908a\u5f62\uff0c\u5728\u6240\u6709\u9ede\u7684\u5916\u570d\u7e5e\u4e00\u5708\u5373\u5f97\u51f8\u5305\u3002\u53e6\u5916\uff0c\u6700\u9802\u7aef\u3001\u6700\u5e95\u7aef\u3001\u6700\u5de6\u7aef\u3001\u6700\u53f3\u7aef\u7684\u9ede\uff0c\u4e00\u5b9a\u662f\u51f8\u5305\u4e0a\u7684\u9ede\uff08\u56e0\u70ba\u5982\u679c\u4e0d\u662f\u7684\u8a71\uff0c\u5c31\u6c92\u4efb\u4f55\u9ede\u80fd\u5305\u4f4f\u4ed6\u5011\uff09</p> <p></p>"},{"location":"math/geometry/#andrew-monotone-chain","title":"Andrew Monotone Chain(\u55ae\u8abf\u93c8)","text":"<p>\u9996\u5148\u5c07\u6240\u6709\u9ede\u4ee5 x \u5ea7\u6a19\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7576 x \u5ea7\u6a19\u76f8\u540c\u5247\u4ee5 y \u5ea7\u6a19\u5c0f\u5230\u5927\u6392\u5e8f\u3002</p> <p>\u7528\u6700\u5de6\u908a\u7684\u9ede\uff0c\u8207\u6700\u53f3\u908a\u7684\u9ede\uff0c\u53ef\u4ee5\u628a\u5e73\u9762\u5206\u6210\u4e0a\u4e0b\u5169\u534a\uff0c\u4e0a\u9762\u7684\u5c31\u662f\u4e0a\u51f8\u5305\uff0c\u4e0b\u9762\u7684\u5c31\u662f\u4e0b\u51f8\u5305\u3002\u5148\u5f9e\u8d77\u9ede\u958b\u59cb\uff0c\u6309\u7167\u9806\u5e8f\u6383\u63cf\uff0c\u627e\u5230\u4e0b\u534a\u51f8\u5305\u3002\u518d\u5f9e\u7d42\u9ede\u958b\u59cb\uff0c\u6309\u7167\u76f8\u53cd\u9806\u5e8f\u6383\u63cf\uff0c\u627e\u5230\u4e0a\u534a\u51f8\u5305\u3002\u5408\u8d77\u4f86\u5c31\u662f\u5b8c\u6574\u7684\u51f8\u5305</p> <p></p> <p>\u9019\u908a\u5c31\u4ee5\u627e\u4e0b\u51f8\u5305\u70ba\u4f8b\uff0c\u6392\u5e8f\u597d\u5f8c\u7b2c\u4e00\u500b\u9ede\uff0c\u4e5f\u5c31\u662f\u6700\u5de6\u908a\u7684\u9ede\uff0c\u4e00\u5b9a\u6703\u5728\u51f8\u5305\u88e1\u9762\uff0c\u6240\u4ee5\u6211\u5011\u5c07\u4ed6\u52a0\u5165\uff0c\u4e4b\u5f8c\uff0c\u7576\u65b0\u7684\u9ede\u65b0\u589e\u9032\u4f86\u6642\uff0c\u82e5\u52a0\u4f86\u767c\u73fe\u6703\u8207\u524d\u9762\u7684\u5411\u91cf\u5448\u73fe\u300c\u51f9\u9677\u72c0\u614b\u300d\uff0c\u4e5f\u5c31\u662f cross &lt; 0<sup>1</sup>\uff0c\u5247\u4e00\u76f4 pop \u7576\u524d\u51f8\u5305\u5c3e\u7aef\u7684\u9ede\u76f4\u5230\u4e0d\u6703\u51f9\u9677\uff0c\u56e0\u70ba\u9019\u4e9b\u88ab pop \u7684\u9ede\u90fd\u6703\u88ab\u65b0\u7684\u9ede\u8207\u4e4b\u524d\u7684\u9ede\u6240\u9023\u63a5\u7684\u5411\u91cf\u5305\u542b\u4f4f</p> <p></p> <p>\u8907\u96dc\u5ea6\u7684\u74f6\u9838\u5728\u6392\u5e8f\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u662f O(n log n)</p> code <pre><code>vector&lt;Point&gt; convex_hull(vector&lt;Point&gt; p) {\n    int n = p.size(), m = 0;\n    sort(p.begin(), p.end());\n\n    vector&lt;Point&gt; h;\n    for (int i = 0; i &lt; n; i++) {\n        while (m &gt;= 2 &amp;&amp; cross(p[i] - h[m - 1], h[m - 1] - h[m - 2]) &lt; 0) {\n            h.pop_back(), m--;\n        }\n        h.push_back(p[i]), m++;\n    }\n\n    // \u56e0\u70ba h.back() \u4e00\u5b9a\u662f p[n - 1], \u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u63a5\u5728\u4e0a\u9762\u7e7c\u7e8c\u505a\n    for (int i = n - 2; i &gt;= 0; i--) {\n        while (m &gt;= 2 &amp;&amp; cross(p[i] - h[m - 1], h[m - 1] - h[m - 2]) &lt; 0) {\n            h.pop_back(), m--;\n        }\n        h.push_back(p[i]), m++;\n    }\n    return h;\n}\n</code></pre> CSES - Convex Hull <p>\u7d66 n \u500b\u4e8c\u7dad\u5ea7\u6a19\u9ede\uff0c\u6c42\u51fa\u51f8\u5305</p> <p>\\(3\\le n\\le 2\\times 10^5, |x|, |y| \\le 10^9\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define mk make_pair\n#define pb push_back\n#define x first\n#define y second\n#define ALL(x) x.begin(), x.end()\nusing namespace std;\nusing Point = pair&lt;int, int&gt;;\n\nint n;\nvector&lt;Point&gt; p; \n\nPoint operator+(Point a, Point b) {\n    return {a.x + b.x, a.y + b.y};\n}\n\nPoint operator-(Point a, Point b) {\n    return {a.x - b.x, a.y - b.y};\n}\n\nPoint operator*(Point a, double d) {\n    return {a.x * d, a.y * d};\n}\n\nint dot(Point a, Point b) {\n    return a.x * b.x + a.y * b.y;\n}\n\nint cross(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nint sign(int x) {\n    if (x &lt; 0) return -1;\n    if (x == 0) return 0;\n    return 1;\n}\n\nbool onseg(Point a, Point b, Point c) {\n    if (cross(c - a, b - a) != 0) return false;\n    if (dot(c - a, b - a) &lt; 0) return false;\n    if (dot(a - b, c - b) &lt; 0) return false;\n\n    return true;\n}\n\nint intersect(Point a, Point b, Point c, Point d) {\n    int c1 = sign(cross(b - a, c - a)) * sign(cross(b - a, d - a));\n    int c2 = sign(cross(d - c, b - c)) * sign(cross(d - c, a - c));\n    if (c1 == 1 || c2 == 1) return false; \n    if (c1 == -1 &amp;&amp; c2 == -1) return true; \n    if (onseg(a, b, c)) return true;\n    if (onseg(a, b, d)) return true;\n    if (onseg(c, d, a)) return true;\n    if (onseg(c, d, b)) return true;\n    return false;\n}\n\nvector&lt;Point&gt; convex_hull(vector&lt;Point&gt; p) {\n    int n = p.size(), m = 0;\n    sort(p.begin(), p.end());\n\n    vector&lt;Point&gt; h;\n    for (int i = 0; i &lt; n; i++) {\n        while (m &gt;= 2 &amp;&amp; cross(p[i] - h[m - 1], h[m - 1] - h[m - 2]) &lt; 0) {\n            h.pop_back(), m--;\n        }\n        h.push_back(p[i]), m++;\n    }\n\n    // \u56e0\u70ba h.back() \u4e00\u5b9a\u662f p[n - 1], \u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u63a5\u5728\u4e0a\u9762\u7e7c\u7e8c\u505a\n    for (int i = n - 2; i &gt;= 0; i--) {\n        while (m &gt;= 2 &amp;&amp; cross(p[i] - h[m - 1], h[m - 1] - h[m - 2]) &lt; 0) {\n            h.pop_back(), m--;\n        }\n        h.push_back(p[i]), m++;\n    }\n    return h;\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    p.resize(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; p[i].x &gt;&gt; p[i].y;\n    }\n\n    vector&lt;Point&gt; h = convex_hull(p);\n    cout &lt;&lt; h.size() - 1 &lt;&lt; \"\\n\";\n    for (int i = 0; i &lt; h.size() - 1; i++) {\n        cout &lt;&lt; h[i].x &lt;&lt; \" \" &lt;&lt; h[i].y &lt;&lt; \"\\n\";\n    }\n}\n</code></pre> Kattis - Robot Protection <p>\u7d66 \\(n\\) \u500b\u9ede\uff0c\u8981\u5148\u6c42\u51fa\u51f8\u5305\uff0c\u518d\u6c42\u51f8\u5305\u7684\u9762\u7a4d</p> <p>\\(1\\le n\\le 10^4, |x_i|,|y_i|\\le 10^4\\)</p> \u7d30\u7bc0 <p>\u6ce8\u610f\u76f4\u63a5\u5957\u6211\u5011\u4e0a\u9762\u7684\u51f8\u5305\u6a21\u677f\uff0c\u52a0\u4e0a\u9762\u7a4d\u516c\u5f0f\u5373\u53ef\uff0c\u5c31\u7b97\u51f8\u5305\u6a21\u677f\u8d77\u9ede\u6703\u73fe\u5169\u6b21\u4e5f\u662f ok \u7684\uff0c\u4e0d\u80fd\u5728\u6700\u5f8c\u628a\u8d77\u9ede pop \u6389</p> <p>\u628a\u6700\u5f8c\u91cd\u8907\u51fa\u73fe\u7684\u8d77\u9ede pop \u6389\u4e5f\u53ef\u4ee5\uff0c\u4f46\u8981\u8a18\u5f97\u5c07 area() \u51fd\u5f0f\u5167\u7684\u7d30\u7bc0\u6539\u4e00\u4e0b\uff0c\u9632\u6b62 n = 1 \u6642\uff0c\u51f8\u5305\u628a\u6240\u6709\u9ede\u90fd pop \u6389\u7684 edge case</p> <pre><code>double area(vector&lt;Point&gt; &amp;points) {\n    int n = points.size();\n    int ret = 0;\n    for (int i = 1; i &lt; n; i++) {\n        ret += cross(points[i], points[i - 1]);\n    }\n    // \u524d\u9762\u52a0\u4e0a if (n)\uff0c\u9632\u6b62 n = 0\n    if (n) ret += cross(points[0], points[n - 1]);\n    return fabs((double)ret / 2);\n}\n</code></pre> <p>submission: http://codepad.org/EYXy2YG2</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define mk make_pair\n#define pb push_back\n#define x first\n#define y second\n#define ALL(x) x.begin(), x.end()\nusing namespace std;\nusing Point = pair&lt;int, int&gt;;\n\nPoint operator+(Point a, Point b) {\n    return {a.x + b.x, a.y + b.y};\n}\n\nPoint operator-(Point a, Point b) {\n    return {a.x - b.x, a.y - b.y};\n}\n\nPoint operator*(Point a, double d) {\n    return {a.x * d, a.y * d};\n}\n\nint dot(Point a, Point b) {\n    return a.x * b.x + a.y * b.y;\n}\n\nint cross(Point a, Point b) {\n    return a.x * b.y - a.y * b.x;\n}\n\ndouble area(vector&lt;Point&gt; &amp;points) {\n    int n = points.size();\n    int ret = 0;\n    for (int i = 1; i &lt; n; i++) {\n        ret += cross(points[i], points[i - 1]);\n    }\n    ret += cross(points[0], points[n - 1]);\n    return fabs((double)ret / 2);\n}\n\nvector&lt;Point&gt; convex_hull(vector&lt;Point&gt; p) {\n    int n = p.size(), m = 0;\n    sort(p.begin(), p.end());\n\n    vector&lt;Point&gt; h;\n    for (int i = 0; i &lt; n; i++) {\n        while (m &gt;= 2 &amp;&amp; cross(p[i] - h[m - 1], h[m - 1] - h[m - 2]) &lt; 0) {\n            h.pop_back(), m--;\n        }\n        h.push_back(p[i]), m++;\n    }\n\n    for (int i = n - 2; i &gt;= 0; i--) {\n        while (m &gt;= 2 &amp;&amp; cross(p[i] - h[m - 1], h[m - 1] - h[m - 2]) &lt; 0) {\n            h.pop_back(), m--;\n        }\n        h.push_back(p[i]), m++;\n    }\n    return h;\n}\n\nint n;\nvoid solve() {\n    vector&lt;Point&gt; p; \n    p.resize(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; p[i].x &gt;&gt; p[i].y;\n    }\n    vector&lt;Point&gt; h = convex_hull(p);\n    cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; area(h) &lt;&lt; '\\n';\n}\nsigned main() {\n    while (cin &gt;&gt; n) {\n        if (n == 0) break;\n        solve();\n    }\n}\n</code></pre>"},{"location":"math/geometry/#_12","title":"\u6975\u89d2\u6392\u5e8f","text":"<p>\u4e00\u822c\u7528\u9019\u500b\u5373\u53ef\uff0c\u4e0d\u7528\u81ea\u5b9a\u7fa9 cmp\uff0c\u5176\u4e2d atan2 \u7684\u503c\u57df\u662f [-180, 180]</p> code <pre><code>bool cmp(Point a, Point b) {\n    return atan2(a.y, a.x) &lt; atan2(b.y, b.x) ;\n}\n</code></pre> TOI 2020 pD. \u8cea\u611f\u6e2c\u8a66 <p>\u7d66 \\(n\\) \u500b\u4e8c\u7dad\u5ea7\u6a19\u5e73\u9762\u7684\u9ede\uff0c\u7b2c \\(i\\) \u500b\u9ede\u6709\u6b0a\u91cd \\(w_i\\)\uff0c\u554f\u4efb\u610f\u901a\u904e\u539f\u9ede\u7684\u76f4\u7dda\uff0c\u80fd\u6383\u904e\u7684\u9ede\u7684\u6b0a\u91cd\u7e3d\u548c\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(n\\le 3\\times 10^5, -1000\\le w_i\\le 1000, |x_i|, |y_i| \\le 10^5\\)</p> \u601d\u8def <p>\u3010\u89c0\u5bdf\u3011: \u4efb\u610f\u901a\u904e\u539f\u9ede\u7684\u76f4\u7dda \u2194 \u4e00\u689d\u659c\u7387\u70ba m \u7684\u76f4\u7dda</p> <p>\u6309\u7167\u659c\u7387\u6392\u5e8f\uff0c\u554f\u984c\u5c31\u8b8a\u6210\u4e86 Maximum Cirricular Subarray</p> TOI 2019 pA. \u56db\u9ede\u5171\u7dda (collinearity) <p>\u7d66 n \u500b\u9ede\uff0c\u554f\u8f38\u51fa\u56db\u9ede\u5171\u7dda\u4e2d\u6700\u5c0f\u5b57\u5178\u5e8f\u7684</p> <p>\\(n\\le 3000\\)</p> \u601d\u8def <p>\u958b\u4e00\u500b map \u5b58\u659c\u7387</p> <p>\u679a\u8209\u7b2c\u4e00\u500b\u9ede i\uff0c\u518d\u679a\u8209\u5176\u4ed6\u9ede j\uff0c\u5c07 (key, value) = (i \u8ddf j \u7684\u659c\u7387, j) \u52a0\u5165 map \u4e2d\uff0c\u770b\u53ef\u80fd\u7684\u659c\u7387\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u90a3\u500b\u5373\u53ef</p> <p>\u5ef6\u4f38\u4e3b\u9ad4: </p> <ul> <li> <p>https://codeforces.com/blog/entry/121537</p> </li> <li> <p>https://blog.51cto.com/u_15707419/5442937</p> </li> </ul>"},{"location":"math/geometry/#_13","title":"\u6700\u8fd1\u9ede\u5c0d\u554f\u984c","text":""},{"location":"math/geometry/#_14","title":"\u5206\u6cbb","text":"<p>\u5148\u628a\u6574\u500b\u9663\u5217 p \u6309\u7167 x \u5c0f\u5230\u5927 sort\u3002\u4ee5\u4e2d\u4f4d\u6578\u7576 pivot\uff0c\u4f9d\u7167 x \u8ef8\u5206\u6210\u5de6\u3001\u53f3\u5169\u5806\uff0c\u905e\u8ff4\u6c42\u89e3\u5b50\u554f\u984c\uff0c\u518d\u4f86 Combine \u7684\u90e8\u5206\uff0c\u6211\u5011\u628a\u4ee5\u4e2d\u4f4d\u6578\u90a3\u689d\u7dda\u5de6\u53f3\u8ddd\u96e2 &lt;= d \u7684\u9ede\u90fd\u62ff\u51fa\u4f86\uff0c\u6309\u7167 y \u5c0f\u5230\u5927 sort\uff0c\u5c0d\u65bc\u6bcf\u500b\u9ede\u90fd\u53ea\u8981\u770b\u5468\u570d\u81f3\u591a 6 \u500b\u9ede\u7684\u8ddd\u96e2\u5373\u53ef\uff0c\u56e0\u70ba\u6211\u5011\u53ef\u4ee5\u5229\u7528\u985e\u4f3c Merge sort \u7684\u65b9\u5f0f\u5f97\u5230\u5df2 y \u5c0f\u5230\u5927 sort \u7684 p'\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u662f O(n log n)</p> <pre><code>combine(d, P, mid) {\n    P \u53ea\u7559 x \\in [mid - d, mid + d]\n    \u6bcf\u500b P \u5167\u7684 point\uff0c\u53ea\u548c\u4e0a\u4e0b 8 \u500b\u9ede\u7b97 distance\n    \u7528\u985e\u4f3c\u96d9\u6307\u91dd\u7dad\u8b77\n}\n\nDC(P) {\n    (d1, P_L') = DC(P.\u524d\u534a)\n    (d2, P_R') = DC(P.\u5f8c\u534a)\n    P' = merge(P_L', P_R') by y \u5c0f\u5230\u5927\n    d = min(d1, d2)\n    combine(d, P', mid)\n}\n</code></pre>"},{"location":"math/geometry/#sweep-line","title":"sweep line","text":"<p>sweep line \u5f9e y \u5c0f\u5230\u5927\u6383\u904e\u6bcf\u500b\u9ede\uff0c\u7dad\u8b77\u4e00\u500b set\u8868\u793a\u76ee\u524d\u9084\u8207 sweep line \u7684\u9ede\u8ddd\u96e2 &lt;= d \u7684\u9ede\uff0c\u6bcf\u6b21\u53ea\u8981\u8ddf\u8ddd\u96e2 sweep line \u524d\u5f8c 6 \u500b\u9ede\u7b97\u8ddd\u96e2\u5373\u53ef</p> <pre><code>sort(p) y \u5c0f\u5230\u5927\nset \u7531 x \u5c0f\u5230\u5927\nl = 1\nfor r = 1...n:\n    while p[l].y &lt;= p[r].y - D:\n        \u522a p[l]\n    \u627e set \u5167, p[r].x \u524d\u5f8c 6 \u500b\u9ede lower_bound \u66f4\u65b0 D\n    set.insert(p[r])\n</code></pre> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define x first\n#define y second\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nconst int INF = 9e18;\n\nint dis(pii a, pii b) {\n    int x = a.x - b.x, y = a.y - b.y;\n    return x * x + y * y;\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;pair&lt;int, int&gt;&gt; p(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; p[i].x &gt;&gt; p[i].y;\n    }\n    sort(p.begin(), p.end());\n    set&lt;pair&lt;int, int&gt;&gt; s;\n    s.clear();\n    s.insert({p[0].y, p[0].x});\n    int l = 0, ans = INF;\n    for (int i = 1; i &lt; n; i++) {\n        int d = ceil(sqrt(ans));\n        while (l &lt; i &amp;&amp; p[l].x &lt; p[i].x - d) {\n            s.erase({p[l].y, p[l].x});\n            l++;\n        }\n        auto it_l = s.lower_bound({p[i].y - d, 0});\n        auto it_r = s.upper_bound({p[i].y + d, 0});\n        for (auto it = it_l; it != it_r; it++) {\n            ans = min(ans, dis({it-&gt;y, it-&gt;x}, p[i]));\n        }\n        s.insert({p[i].y, p[i].x});\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> <ol> <li> <p>\u898b\u6b64\u5716 \u21a9</p> </li> </ol>"},{"location":"math/josephus_problem/","title":"Josephus Problem","text":"<p>\u90fd\u662f\u60f3\u8fa6\u6cd5\u7576\u524d\u7684\u554f\u984c\u8f49\u79fb\u5230\u5b50\u554f\u984c\uff0c\u5728\u67d0\u4e9b\u984c\u76ee\u53ef\u4ee5\u914d\u5408\u8cc7\u6599\u7d50\u69cb\u8a08\u7b97\u7b54\u6848</p>"},{"location":"math/josephus_problem/#k","title":"\u6c42\u7b2c k \u6b21\u88ab\u522a\u7684","text":"CSES - Josephus Queries <p>\u6709 \\(n\\) \u500b\u4eba\uff0c\u6bcf\u6b21\u683c\u4e00\u500b\u522a\uff0c\u6709 \\(q\\) \u6b21\u8a62\u554f :</p> <ul> <li>\\(\\text{query}(k):\\) \u8f38\u51fa\u7b2c \\(k\\) \u6b21\u88ab\u522a\u7684</li> </ul> <p>\\(n,k\\le 10^9,q\\le 10^5\\)</p> \u601d\u8def <p>n \u662f\u5947\u6578\u8207\u5076\u6578\u7684 case \u5206\u958b\u8a0e\u8ad6\uff0c\u7136\u5f8c\u60f3\u8fa6\u6cd5\u8b8a\u5b50\u554f\u984c\uff0c\u8a18\u5f97\u7576 n = 1 \u6642\u8981\u7279\u5224\u3002</p> <p>\u8907\u96dc\u5ea6 T(n, k) = T(n/2, k - (n / 2)) + O(1) \\(\\Rightarrow O(\\log n)\\)\u3002 </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\nusing namespace std;\n\nint ifloor(int a, int b){\n    if(b &lt; 0) a *= -1, b *= -1;\n    if(a &lt; 0) return (a - b + 1) / b;\n    else return a / b;\n}\n\nint iceil(int a, int b){\n    if(b &lt; 0) a *= -1, b *= -1;\n    if(a &gt; 0) return (a + b - 1) / b;\n    else return a / b;\n}\n\nint F (int n, int k) {\n    if (n == 1) return 1;\n    if (k &lt;= iceil(n, 2)) {\n        if (n % 2 == 0) return 2 * k;\n        else return (2 * k) % n;\n    }\n\n    int idx;\n    if (n % 2 == 0) idx = F(n / 2, k - (n / 2));\n    else idx = F(ifloor(n, 2), k - iceil(n, 2));\n\n    int now_index;\n    if (n % 2 == 0) now_index = 2 * idx - 1;\n    else now_index = 2 * idx + 1;\n    return now_index;\n}\n\nvoid solve() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    cout &lt;&lt; F (n, k) &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre>"},{"location":"math/josephus_problem/#_1","title":"\u6c42\u522a\u6389\u9806\u5e8f","text":"CSES - Josephus Problem II <p>\u6709 \\(n\\) \u500b\u4eba\uff0c\u6bcf\u9694 \\(k\\) \u500b\u522a\uff0c\u6c42\u522a\u6389\u9806\u5e8f</p> <p>\\(1\\le n\\le 2\\times 10^5,0\\le k\\le 10^9\\)</p> \u601d\u8def <p> </p> <p>\u7576\u7b2c 3 \u9805\u88ab\u522a\u9664\u5f8c\uff0cstart \u5c31\u8b8a\u6210\u5b50\u554f\u984c\u7b2c 3 \u9805\u3002\u4e5f\u5c31\u4ee3\u8868\u7b2c x \u9805\u88ab\u79fb\u9664\u5f8c\uff0c\u6703\u8b8a\u6210\u5b50\u554f\u984c (x + k) % n \u9805\uff080-base\uff09</p> code <pre><code>#include&lt;bits/stdc++.h&gt;\n#include &lt;bits/extc++.h&gt;\n\nusing namespace __gnu_pbds;\ntemplate &lt;typename T&gt;\nusing rank_set = tree&lt;T, null_type, std::less&lt;T&gt;, rb_tree_tag,\n                                           tree_order_statistics_node_update&gt;;\nusing namespace std;\n\nsigned main() {\n    int n, k;\n    rank_set&lt;int&gt; s;\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        s.insert(i);\n    }\n\n    int start = k % n;\n    while(n--) {\n        auto y = s.find_by_order(start); // 0-base\n        cout&lt;&lt; *y &lt;&lt; ' ';\n        s.erase(y);\n        if (n) {\n            start = start % n;\n            start = (start + k) % n;\n        }\n    }\n}\n</code></pre>"},{"location":"math/josephus_problem/#_2","title":"\u6c42\u6700\u5f8c\u5b58\u6d3b\u7684","text":"\u7d04\u745f\u592b\u554f\u984c <p>\u6709 \\(n\\) \u500b\u4eba\uff080-base\uff09\uff0c\u6bcf\u9694 \\(k-1\\) \u522a\uff0c\u6c42\u6700\u5f8c\u5b58\u6d3b\u7684</p> <p>\\(1\\le k\\le n\\le 10^5\\)</p> \u601d\u8def <p>\u4e00\u6a23\u53bb\u89c0\u5bdf\u5982\u4f55\u8f49\u79fb\u5230\u5b50\u554f\u984c\uff0c\u56e0\u70ba\u5728\u522a\u6389\u7576\u524d\u9019\u8f2a\u7684\u6578\u5b57\u5f8c\uff0c\u6703\u767c\u73fe\u5b50\u554f\u984c\u7684 start \u6070\u70ba\u7576\u524d\u9663\u5217\u7b2c \\(k\\) \u9805\u3002\u53c8\u56e0\u70ba\u662f 0-base\uff0c\u6240\u4ee5\u53ef\u63a8\u51fa\u4ee5\u4e0b\u8f49\u79fb\u5f0f </p> \\[F(1)=0,F(n)=F(n-1)+k \\pmod{n}\\] code <pre><code>void solve () {\n    int F = 0;\n    for (int i = 2; i &lt;= n; i++) {\n        F = (F + k) % i;\n    }\n    cout &lt;&lt; F &lt;&lt; \"\\n\"; // 0-base\n}\n</code></pre> \u7d04\u745f\u592b\u554f\u984c special case: k = 2 <p>\u6709 \\(n\\) \u500b\u4eba\uff080-base\uff09\uff0c\u6bcf\u9694 \\(1\\) \u683c\u522a\uff0c\u6c42\u6700\u5f8c\u5b58\u6d3b\u7684</p> <p>\\(n=10^{18},k=2\\)</p> \u601d\u8def <p>\u5148\u66b4\u529b\u5efa\u8868\uff0c\u7136\u5f8c\u89c0\u5bdf</p> <p> </p> code <pre><code>int getSafePosition(int n) {\n    int L = n - highestOneBit(n);\n    return 2 * L  + 1;\n}\n</code></pre>"},{"location":"math/matrix/","title":"\u77e9\u9663","text":""},{"location":"math/matrix/#_1","title":"\u77e9\u9663\u5feb\u901f\u51aa","text":""},{"location":"math/matrix/#_2","title":"\u77e9\u9663\u4e58\u6cd5","text":"code <pre><code>using Matrix = vector&lt;vector&lt;int&gt;&gt;;\nMatrix operator*(const Matrix &amp;a, const Matrix &amp;b) {\n    Matrix c(n, vector&lt;int&gt;(n));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            for (int k = 0; k &lt; n; k++) {\n                c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % M;\n            }\n        }\n    }\n    return C;\n}\n</code></pre>"},{"location":"math/matrix/#_3","title":"\u5feb\u901f\u51aa","text":"code <pre><code>Matrix pow(Matrix a, int k) {\n    int n = a.size();\n    Matrix ret(n, vector&lt;int&gt;(n));\n    // \u521d\u59cb\u5316\u70ba\u55ae\u4f4d\u77e9\u9663\n    for (int i = 0; i &lt; n; i++) {\n        ret[i][i] = 1;\n    }     \n    while (k &gt; 0) {\n        if (k &amp; 1) ret = ret * A;\n        A = A * A;\n        k &gt;&gt;= 1;\n    }\n    return ret;\n}\n</code></pre>"},{"location":"math/matrix/#_4","title":"\u4f8b\u984c","text":"CSES - Graph Path I <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u6709\u5411\u5716\uff0c\u554f\u5f9e 1 \u5230 n \u6070\u7d93 k \u689d\u908a\u7684 path \u6709\u5e7e\u689d</p> <p>\\(n\\le 100, m\\le n(n-1), k\\le 10^9\\)</p> \u601d\u8def <ul> <li> <p>Matrix[d1]: A[i][j] \u70ba\u5f9e i \u8d70 d1 \u6b65\u5230 j \u7684\u65b9\u6cd5\u6578</p> </li> <li> <p>Matrix[d2]: B[i][j] \u70ba\u5f9e i \u8d70 d2 \u6b65\u5230 j \u7684\u65b9\u6cd5\u6578</p> </li> <li> <p>Matrix[d1 + d2]: C[i][j] \u70ba\u5f9e i \u8d70 d1 + d2 \u6b65\u5230 j \u7684\u65b9\u6cd5\u6578</p> <ul> <li>C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % M</li> </ul> </li> </ul> CSES - Graph Path II <p>\u7d66\u4e00\u5f35 n \u9ede m \u908a\u6709\u5411\u5716\uff0c\u908a\u6709\u6b0a\u91cd\uff0c\u554f\u5f9e 1 \u5230 n \u6070\u7d93 k \u689d\u908a\u7684 path \u4e2d\uff0c\u7d93\u904e\u7684\u908a\u6b0a\u548c\u6700\u5c0f\u662f\u591a\u5c11</p> <p>\\(n\\le 100, m\\le n(n-1), k\\le 10^9\\)</p> \u601d\u8def <ul> <li> <p>Matrix[d1] : A[i][j] \u70ba\u5f9e i \u8d70 d1 \u6b65\u5230 j \u7684\u6700\u77ed\u8ddd\u96e2</p> </li> <li> <p>Matrix[d2] : B[i][j] \u70ba\u5f9e i \u8d70 d2 \u6b65\u5230 j \u7684\u6700\u77ed\u8ddd\u96e2</p> </li> <li> <p>Matrix[d1 + d2] : C[i][j] = min(A[i][k] + B[k][j]) for k = 1~n (\u5217\u8209\u4e2d\u9593\u9ede)</p> </li> </ul> CSES - Fibonacci Numbers <p>\u5b9a\u7fa9\u8cbb\u5f0f\u6578\u5217 f(0) = 0, f(1) = 1\uff0c\u6c42 f(n)</p> <p>\\(0\\le n\\le 10^{18}\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing Matrix = vector&lt;vector&lt;int&gt;&gt;;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\nconst int M = 1e9 + 7;\n\nint n = 3;\n\nMatrix operator*(const Matrix &amp;A, const Matrix &amp;B) {\n    Matrix C = Matrix(n, vector&lt;int&gt;(n, 0));\n\n    for (int i = 0; i &lt; n; i++) {                     // A row\n        for (int j = 0; j &lt; (int)B[0].size(); j++) {  // B col\n            for (int k = 0; k &lt; n; k++) {\n                C[i][j] += A[i][k] * B[k][j];\n                C[i][j] %= M;\n            }\n        }\n    }\n\n    return C;\n}\n\nMatrix pow(Matrix A, int b) {\n    Matrix C = Matrix(n, vector&lt;int&gt;(n, 0));\n    for (int i = 0; i &lt; n; i++) C[i][i] = 1;\n\n    while (b != 0) {\n        if (b &amp; 1) C = C * A;\n        A = A * A;\n\n        b &gt;&gt;= 1;\n    }\n\n    return C;\n}\n\nsigned main() {\n    int k;\n    cin &gt;&gt; k;\n\n    Matrix A = {{1, 1, 0}, {1, 0, 0}, {0, 1, 0}};\n    Matrix B = {{1}, {1}, {0}};\n\n    if (k == 0) {\n        cout &lt;&lt; 0 &lt;&lt; '\\n';\n        exit(0);\n    }\n    if (k == 1) {\n        cout &lt;&lt; 1 &lt;&lt; '\\n';\n        exit(0);\n    }\n\n    Matrix C = pow(A, k - 2) * B;\n    cout &lt;&lt; C[0][0] &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"math/matrix/#_5","title":"\u77e9\u9663\u58d3\u7e2e","text":"CF 223 C. Partial Sums <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u6578\u7d44 \\(a_1,\\ldots ,a_n\\)\uff0c\u6bcf\u6b21\u7528\u7576\u524d \\(a\\) \u7684\u524d\u7db4\u548c\u6578\u7d44\u4ee3\u66ff\\(a\\)\uff0c\u6c42\u57f7\u884c \\(k\\) \u6b21\u64cd\u4f5c\u5f8c\u7684\u6578\u7d44</p> <p>\\(n\\le 2000,k,a_i\\le 10^9\\)</p> \u601d\u8def <p>\u5217\u51fa\u8f49\u79fb\u5f0f</p> \\[\\begin{pmatrix} a[k][1] \\\\ a[k][2] \\\\ a[k][3] \\\\ a[k][4] \\end{pmatrix}\\times \\begin{pmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix} = \\begin{pmatrix} a[k + 1][1] \\\\ a[k + 1][2] \\\\ a[k + 1][3] \\\\ a[k + 1][4] \\end{pmatrix}\\] \\[\\begin{pmatrix} a_1 \\\\ a_2 \\\\ a_3 \\\\ a_4 \\end{pmatrix}\\times \\begin{pmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}^k = \\begin{pmatrix} a[k][1] \\\\ a[k][2] \\\\ a[k][3] \\\\ a[k][4] \\end{pmatrix}\\] <p>\u4f46\u77e9\u9663\u4e58\u6cd5\u8981 \\(O(n^3)\\)\uff0c\u6211\u5011\u5fc5\u9808\u60f3\u8fa6\u6cd5\u5c07\u4ed6\u62bc\u5230 \\(O(n^2)\\)\uff0c\u6211\u5011\u5c07\u8f49\u79fb\u77e9\u9663\u7684 \\(k=1,2,\\ldots\\) \u6b21\u65b9\u5217\u51fa\u4f86\u770b\u770b</p> \\[\\begin{pmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}\\Rightarrow\\begin{pmatrix} 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 0 &amp; 1 &amp; 2 &amp; 3 \\\\ 0 &amp; 0 &amp; 1 &amp; 2 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}\\Rightarrow \\begin{pmatrix} 1 &amp; 4 &amp; 10 &amp; 20 \\\\ 0 &amp; 1 &amp; 4 &amp; 10 \\\\ 0 &amp; 0 &amp; 1 &amp; 4 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}\\Rightarrow \\cdots\\] <p>\u6211\u5011\u6703\u767c\u73fe\u6211\u5011\u53ea\u9700\u8981\u7528\u77e9\u9663\u7684\u7b2c\u4e00\u500b row \u5373\u53ef\u6c42\u5f97\u6574\u500b\u77e9\u9663\uff0c\u5728\u5be6\u73fe\u4e58\u6cd5\u6642\u5373\u5132\u5b58\u7b2c\u4e00\u500b row \u4e26\u4fee\u6539\u77e9\u9663\u4e58\u6cd5\u7684 code \u5373\u53ef</p> <p>\u53c3\u8003 : https://blog.csdn.net/sdz20172133/article/details/97273071</p>"},{"location":"math/matrix/#_6","title":"\u9ad8\u65af\u6d88\u53bb","text":"<ul> <li>https://github.com/NCTU-PCCA/NCTU_Fox/blob/master/codebook/Math/GaussElimination.cpp</li> </ul>"},{"location":"math/mod/","title":"\u6a21\u904b\u7b97","text":""},{"location":"math/mod/#modular-arithmetic","title":"Modular Arithmetic","text":"<ul> <li>(a + b) % m \u2261 (a % m + b % m) % m</li> <li>(a * b) % m \u2261 (a % m * b % m) % m</li> <li>(a - b) % m \u2261 (a % m - b % m) % m</li> </ul> \u8ca0\u6578 mod \u8981\u5beb\u6210 ((a - b) % m + m) % m <p>\u901a\u5e38\u6703\u628a (a - b) % m \u5beb\u6210 ((a - b) % m + m) % m \u4f86\u4fdd\u8b49\u5728\u9032\u884c mod m \u904b\u7b97\u6642\u662f\u6b63\u6578</p>"},{"location":"math/mod/#_1","title":"\u6a21\u9006\u5143","text":"<p>\\(a\\times b \\equiv 1 \\pmod{m}\\)\uff0c\u5176\u4e2d \\(a\\) \u548c \\(m\\) \u4e92\u8cea\u3002</p> <p>\\(b  \\equiv a^{-1} \\pmod{m}\\)\uff0c\u7a31 \\(b\\) \u662f \\(a\\) \u5728\u6a21 \\(m\\) \u4e0b\u7684\u6a21\u9006\u5143</p> \u70ba\u4ec0\u9ebc\u9664\u4ee5\u4e00\u500b\u6578\u53d6\u6a21\u7b49\u65bc\u4e58\u4ee5\u9019\u500b\u6578\u7684\u6a21\u9006\u5143 <p>\u4ee4 \\(c\\) \u70ba \\(b\\) \u5728 \\(\\text{mod } p\\) \u4e4b\u4e0b\u7684\u6a21\u9006\u5143</p> <p>\\(\\text{proof : }(a/b) \\pmod{p} \\equiv a \\times c \\pmod{p}\\)</p> <p>\\((b\\times c)\\equiv 1\\)</p> <p>\\(b\\times c\\equiv 1 \\pmod{p}\\)</p> <p>\\(a/b=(a/b)\\times 1 \\equiv (a/b)\\times (b\\times c) \\pmod{p}=a\\times c\\pmod{p}\\)</p> <p>\u627e\u6a21\u9006\u5143\u4ee5\u4e0b\u6703\u5206\u6210 m \u662f\u8cea\u6578\u8207 m \u4e0d\u662f\u8cea\u6578\u6709\u5c0d\u61c9\u7684\u505a\u6cd5</p>"},{"location":"math/mod/#_2","title":"\u5c0f\u8cbb\u99ac\u5b9a\u7406","text":"\u5c0f\u8cbb\u99ac\u5b9a\u7406 <p>\\(a^{p - 1} = 1 \\pmod{p}\\)\uff0c\u5176\u4e2d \\(p\\) \u70ba\u8cea\u6578\u4e14 \\(a\\) \u8207 \\(p\\) \u4e92\u8cea</p> <p>\u3010\u8b49\u660e\u3011</p> <p>\u56e0\u70ba \\(\\gcd(a,p)=1\\)\uff0c\u8003\u616e \\(1\\times a, 2\\times a, 3\\times a, \\ldots, (p - 1)\\times a\\)\uff0c\u5728 \\(\\text{mod } p\\) \u7684\u96c6\u5408\u6070\u70ba \\(\\{1,2,3,\\ldots ,(p-1) \\}\\) \u7684\u91cd\u65b0\u6392\u5217<sup>1</sup>\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u5217\u51fa</p> \\[\\begin{align*} &amp; (1\\times a)\\times (2\\times a) \\times \\cdots \\times ((p-1)\\times a) \\equiv 1\\times 2\\times  \\cdots \\times (p-1)   \\pmod{p} \\\\ &amp; \\Rightarrow a^{p-1} \\times 1 \\times 2\\times \\cdots \\times (p-1)\\equiv 1\\times 2\\times \\cdots \\times (p-1)  \\pmod{p} \\\\ &amp; \\Rightarrow (a^{p-1} - 1)\\times (1\\times 2\\times \\cdots \\times (p-1))\\equiv 0 \\pmod{p} \\end{align*}\\] <p>\u56e0\u70ba \\(p\\) \u8207 \\(1\\times 2\\times \\cdots \\times (p-1)\\) \u4e92\u8cea\uff0c\u6240\u4ee5</p> \\[a^{p-1}-1\\equiv 0 \\pmod{p} \\Rightarrow a^{p-1}\\equiv 1\\pmod{p}\\]"},{"location":"math/mod/#_3","title":"\u5c0f\u8cbb\u99ac\u5b9a\u7406\u6c42\u6a21\u9006\u5143","text":"\\[a^{p-2}\\equiv a\\times a^{p-2}\\equiv 1 \\pmod{p}\\] <p>\u6545 \\(a\\) \u5728\u6a21 \\(p\\) \u4e0b\u7684\u6a21\u9006\u5143\u70ba \\(a^{p-2}\\)\uff0c\u53ef\u7528\u5feb\u901f\u51aa\u5728 \\(O(\\log n)\\) \u4e0b\u6c42\u89e3</p> <p>\u3010\u6ce8\u610f\u3011 : \u5c0f\u8cbb\u99ac\u5b9a\u7406\u6c42\u6a21\u9006\u5143\u53ea\u9069\u7528\u65bc m \u662f\u8cea\u6578</p> code <pre><code>int fastpow(int a, int b, int M) {\n    int ret = 1;\n    while (b != 0) {\n        if (b &amp; 1) ret = (ret * a) % M;\n        a = (a * a) % M;\n\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nint get_inv(int a, int m) {\n    return fastpow(a, m - 2, m);\n}\n</code></pre>"},{"location":"math/mod/#extended-gcd","title":"Extended GCD","text":"\u8f3e\u8f49\u76f8\u9664\u6cd5 : \\(\\gcd(a,b)=\\gcd(b,b \\% a)\\) <p>\u4ee4 \\(d=\\gcd(a,b),a=n\\times d,b=m\\times d\\)\uff0c\u4e00\u76f4\u4e92\u76f8\u76f8\u6e1b\u4e4b\u5f8c\u5c31\u6703\u5f97\u5230 \\(d\\)</p> <p>\u8a73\u898b : https://hackmd.io/@Koios/rJ_lER719</p> \u8c9d\u7956\u5b9a\u7406 <p>\u5728 \\(ax+by=m\\) \u4e2d\uff0c \u82e5\u4e14\u552f\u82e5 \\(m\\) \u662f \\(a\\) \u53ca \\(b\\) \u7684\u6700\u5927\u516c\u56e0\u6578 \\(\\gcd(a,b)\\) \u7684\u500d\u6578\uff0c\u6709\u6574\u6578\u89e3</p> <p>\u3010\u8b49\u660e\u3011</p> <p>\u6839\u64da\u8c9d\u7956\u5b9a\u7406\uff0c\u6211\u5011\u5217\u51fa </p> \\[ax+by =\\gcd(a,b)\\] <p>\u5957\u7528\u8f3e\u8f49\u76f8\u9664\u6cd5</p> \\[\\begin{align}&amp; bx_1+(a \\% b)y_1=\\gcd(a,b) \\\\ \\Rightarrow\\space  &amp; bx_1+(a-b\\times \\lfloor{\\frac{a}{b}} \\rfloor) y_1=\\gcd(a,b)\\end{align}\\] <p>\u5169\u5f0f\u7686\u70ba \\(\\gcd(a,b)\\)\uff0c\u5217\u51fa :</p> \\[ax+by=bx_1+(a-b\\times \\lfloor{\\frac{a}{b}} \\rfloor) y_1\\] <p>\u5f97</p> \\[x=y_1,y=x_1 - \\lfloor{\\frac{a}{b}} \\rfloor y_1\\] code <pre><code>pii extgcd(int a,int b) {\n    if (b == 0) {\n        // a * x + 0 * y = gcd(a, 0) = a\n        return {1, 0};\n    }\n    pii p = extgcd(b, a % b);\n    return {p.S, p.F - (a / b) * p.S};\n}\n</code></pre>"},{"location":"math/mod/#_4","title":"\u8c9d\u7956\u5b9a\u7406\u6c42\u6a21\u9006\u5143","text":"<p>\u8c9d\u7956\u5b9a\u7406: \\(ax + by = \\gcd(a, b)\\)</p> <p>\\(b = m\\) \u4ee3\u5165\u5f97 \\(ax + my = \\gcd(a, m) = 1\\)</p> <p>\u5169\u908a\u540c \\(\\text{mod}\\space  m\\) \u5f97  \\(ax = 1 \\pmod{m}\\)</p> <p>\\(x = a^{-1}\\) \u70ba \\(a\\) \u5728\u6a21 \\(m\\) \u4e0b\u7684\u6a21\u9006\u5143</p> <p>\u3010\u6ce8\u610f\u3011 : \u5728 m \u4e0d\u662f\u8cea\u6578\u7684\u6642\u5019\u4e5f\u53ef\u4ee5\u7528\u8c9d\u7956\u5b9a\u7406\u6c42\u6a21\u9006\u5143</p> code <pre><code>pii extgcd(int a,int b) {\n    if (b == 0) {\n        // a * x + 0 * y = gcd(a, 0) = a\n        return {1, 0};\n    }\n    pii p = extgcd(b, a % b);\n    return {p.S, p.F - (a / b) * p.S};\n}\n\nint get_inv(int a, int m) {\n    pii p = extgcd(a, m);\n    int x = p.F;\n    return (x % m + m) % m;\n}\n</code></pre> <ol> <li> <p>\u898b\u6b64\u8655 \u21a9</p> </li> </ol>"},{"location":"math/sirpinski_triangle/","title":"Sirpinski triangle","text":"<p>2023 TOI 3 \u6a21 pB</p>"},{"location":"math/xor_basis/","title":"Xor basis","text":""},{"location":"math/xor_basis/#maximum-xor-subset","title":"Maximum Xor Subset","text":"LOJ 113. \u6700\u5927\u5f02\u6216\u548c <p>\u7d66 \\(a_1\\sim a_n\\)\uff0c\u554f\u9078\u4e00\u4e9b\u5143\u7d20 \\(\\texttt{XOR}\\) \u8d77\u4f86\uff0c\u6700\u5927\u662f\u591a\u5c11</p> <ul> <li>\\(O(n\\log n)\\)</li> </ul> \u60f3\u6cd5 <ul> <li> <p>\u9ad8\u65af\u6d88\u53bb</p> </li> <li> <p>\u7dda\u6027\u57fa</p> </li> </ul> full code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n#define bit(i) (1LL &lt;&lt; i)\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst int K = 60;\n\nint n;\nvector&lt;int&gt; a;\n\nstruct gauss {\n    vector&lt;int&gt; v;\n\n    void init () {\n        v.resize (K);\n        fill (ALL(v), -1);\n    }\n\n    void insert (int x) {\n        for (int i = K - 1; i &gt;= 0; i--) {\n            if ((x &amp; bit (i)) &amp;&amp; v[i] != -1) {\n                x ^= v[i];\n            }\n            else if ((x &amp; bit (i)) &amp;&amp; v[i] == -1) {\n                v[i] = x;\n                return;\n            }\n        }\n    }\n\n    int query () {\n        int x = 0;\n        for (int i = K - 1; i &gt;= 0; i--) {\n            if (v[i] != -1 &amp;&amp; (x &amp; bit (i)) == 0) {\n                x ^= v[i];\n            }\n        }\n        return x;\n    }\n};\n\nvoid init () {\n    cin &gt;&gt; n;\n    a.clear ();\n    a.resize (n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    } \n}\n\nvoid solve () {\n    gauss G;\n    G.init ();\n\n    for (int x : a) {\n        G.insert (x);\n    }\n\n    cout &lt;&lt; G.query () &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init ();\n        solve();\n    }\n}\n</code></pre> \u985e\u4f3c\u984c XORSUB <p>\u7d66 \\(a_1\\sim a_n\\)\uff0c\u548c \\(x\\)\uff0c\u554f\u9078\u4e00\u4e9b\u5143\u7d20 \\(\\texttt{XOR}\\) \u8d77\u4f86\uff0c\u518d\u8ddf \\(x\\texttt{ XOR}\\) \u6700\u5927\u662f\u591a\u5c11</p> <ul> <li>\\(O(n\\log n)\\)</li> </ul> full code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n#define bit(i) (1LL &lt;&lt; i)\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst int K = 60;\n\nint n, x;\nvector&lt;int&gt; a;\n\nstruct gauss {\n    vector&lt;int&gt; v;\n\n    void init () {\n        v.resize (K);\n        fill (ALL(v), -1);\n    }\n\n    void insert (int x) {\n        for (int i = K - 1; i &gt;= 0; i--) {\n            if ((x &amp; bit (i)) &amp;&amp; v[i] != -1) {\n                x ^= v[i];\n            }\n            else if ((x &amp; bit (i)) &amp;&amp; v[i] == -1) {\n                v[i] = x;\n                return;\n            }\n        }\n    }\n\n    int query (int tar) {\n        int x = tar;\n        for (int i = K - 1; i &gt;= 0; i--) {\n            if (v[i] != -1 &amp;&amp; (x &amp; bit (i)) == 0) {\n                x ^= v[i];\n            }\n        }\n        return x;\n    }\n};\n\nvoid init () {\n    cin &gt;&gt; n &gt;&gt; x;\n    a.clear ();\n    a.resize (n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    } \n}\n\nvoid solve () {\n    gauss G;\n    G.init ();\n\n    for (int x : a) {\n        G.insert (x);\n    }\n\n    cout &lt;&lt; G.query (x) &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        init ();\n        solve();\n    }\n}\n</code></pre>"},{"location":"math/xor_basis/#k-th-xor-subset","title":"k-th Xor Subset","text":"HDU 3949 <p>\u7d66 \\(a_1,...,a_n\\) \u554f\u7b2c \\(k\\) \u5c0f\u7684 \\(\\texttt{XOR subset}\\) \u662f\u591a\u5c11</p> \u60f3\u6cd5 <ul> <li>\u5047\u8a2d\u5728\u6d88\u53bb\u7684\u4e4b\u5f8c\u7dda\u6027\u57fa\u5927\u5c0f\u53ea\u6709 \\(r\\)</li> <li>\u82e5\u7b54\u6848\u6bd4 \\(2^r\\) \u9084\u5927\uff0c\u90a3\u5c31\u6e4a\u4e0d\u51fa\u4f86</li> <li>\u5269\u4e0b\u5c31\u662f\u628a \\(k\\) \u505a\u4e8c\u9032\u5236\u5206\u89e3\u5982\u679c\u7b2c \\(i\\) \u500b \\(\\texttt{bit}\\) \u662f \\(1\\) \u5c31\u628a \\(\\texttt{ans XOR }\\) \u6709\u88ab\u63a7\u5236\u7684\u7b2c \\(i\\) \u5927\u7684 \\(\\texttt{bit}\\)</li> </ul> <p> </p> code <pre><code>struct gauss {\n    vector&lt;int&gt; v;\n    vector&lt;int&gt; u;\n\n    void init () {\n        v.resize (K);\n        fill (ALL(v), -1);\n    }\n\n    void insert (int x) {\n        for (int i = 0; i &lt; K; i++) {\n            if (v[i] != -1 &amp;&amp; (x &amp; (1LL &lt;&lt; i))) {\n                x ^= v[i];\n            }\n        }\n        if (x == 0) return;\n        int p = K;\n        while ((x &amp; (1LL &lt;&lt; p)) == 0) p--;\n        v[p] = x;\n        for (int i = 0; i &lt; K; i++) {\n            if (i == p) continue;\n            if (v[i] == -1) continue;\n\n            if (v[i] &amp; (1LL &lt;&lt; p)) v[i] ^= v[p];\n        }\n    }\n\n    int query () {\n        int x = 0;\n        for (int i = K - 1; i &gt;= 0; i--) {\n            if (v[i] != -1 &amp;&amp; (x &amp; bit (i)) == 0) {\n                x ^= v[i];\n            }\n        }\n        return x;\n    }\n\n    void rebuild () {\n        u.clear ();\n        for (int i = K - 1; i &gt;= 0; i--) {\n            if (v[i] != -1) {\n                u.pb (i);\n            } \n        }\n    }\n\n    int find (int k) {\n        // \u8a18\u5f97 find \u4e4b\u524d\u5148 rebuild \u4f86\u521d\u59cb\u5316 u\n        int sz = u.size (); \n        if (sz != n) k--; // \u53ef\u4ee5\u6e4a\u51fa 0\uff0c\u8981\u6263\u6389 0 \u7684\u90a3\u4f4d\n        if (k &gt;= bit (sz)) return -1; \n\n        int cnt = sz - 1, ret = 0;\n        for (auto i : u) {\n            if (k &amp; bit (cnt)) {\n                ret ^= v[i];\n            } \n            cnt--;\n        }\n        return ret;\n    }\n};\n</code></pre> \u985e\u4f3c\u984c <ul> <li>\u7d66 \\(a_1,...,a_n\\) \u548c \\(x\\)\uff0c\u554f \\(x\\) \u662f\u7b2c\u5e7e\u5c0f\u7684 </li> </ul> \u60f3\u6cd5 <ul> <li>\u770b\u4ed6\u54ea\u500b \\(\\texttt{bit}\\) \u6709\u9078\uff0c\u5c0d\u61c9\u51fa\u4f86\u6709\u9078\u6c92\u9078\u7684\u4e8c\u9032\u4f4d\u5c31\u662f\u4ed6\u7684 \\(\\texttt{rank}\\)</li> </ul>"},{"location":"math/xor_basis/#atcoder-xor","title":"Atcoder Xor","text":"Atcoder XOR 2 \u60f3\u6cd5 <ul> <li>\u96d9\u6307\u91dd\uff0c\u524d\u7db4\u548c</li> </ul> Atcoder XOR 3 \u60f3\u6cd5 <ul> <li> <p>\u4ee4\u5206\u6210\u7684\u5169\u5806 \\(\\texttt{XOR}\\) \u548c \\(s_1,s_2\\)</p> </li> <li> <p>\u82e5\u5728\u4e8c\u9032\u4f4d\u4e0b\u7b2c \\(i\\) \u4f4d\u662f \\(1\\) \u7684\u500b\u6578\u662f\u5947\u6578</p> <ul> <li>\u5947 \\(=\\) \u5947 \\(+\\) \u5076</li> <li>\u6545 \\(s_1,s_2\\) \u5176\u4e2d\u4e00\u500b\u7684\u7b2c \\(i\\) \u4f4d\u4e5f\u4e00\u5b9a\u662f\u5947\u6578</li> <li>\u76f4\u63a5\u5148\u628a\u6240\u6709\u7684 \\(a_i\\) \u7684\u7b2c \\(i\\) \u4f4d\u8a2d\u70ba \\(0\\)</li> <li>\u7b54\u6848\u76f4\u63a5\u52a0\u4e0a\u5947\u6578\u4f4d\u6578\u7684\u7e3d\u548c</li> </ul> </li> <li> <p>\u5076\u6578\u7684\u90e8\u5206\u767c\u73fe \\(s_1'\\oplus s_2'=0\\) (\u88ab\u522a\u6389\u5947\u6578\u4f4d\u6578\u7684\u7570\u6216\u548c)</p> <ul> <li>\u56e0\u70ba\u6bcf\u4f4d\u90fd\u53ea\u5269\u4e0b\u5076\u6578\u500b\u6578\uff0c\u81ea\u7136\u5c31\u662f \\(0\\)</li> <li>\\(\\Rightarrow s_1'=s_2'\\)</li> <li>\u4e0d\u7ba1 \\(s_1'\\) \u9078\u5565\uff0c\\(s_2'\\) \u7684\u503c\u4e5f\u4e00\u5b9a\u8ddf \\(s_1'\\) \u76f8\u540c</li> </ul> </li> <li> <p>\u6700\u5f8c\u53ea\u8981\u5728\u76ee\u524d\u7684 \\(a_1'\\sim a_n'\\) \u505a \\(\\texttt{Maximum Xor Subset}\\) \u5373\u53ef</p> </li> </ul> Atcoder XOR 4 \u60f3\u6cd5 <ul> <li>\u5c0d\u65bc\u6bcf\u500b \\(\\texttt{bit}\\) \u7b97\u524d\u9762\u51fa\u73fe\u5e7e\u500b \\(1,0\\)</li> </ul> full code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n#define bit(x) (1LL &lt;&lt; x)\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst int K = 60;\n\nint n;\nint a[maxn];\n\nvoid init () {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n}\n\nint get (int j) {\n    int x = 0, y = 0, ret = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (a[i] &amp; bit (j)) {\n            ret = (ret + (y * (bit (j) % M)) % M) % M;\n            x++;\n        } \n        else {\n            ret = (ret + (x * (bit (j) % M)) % M) % M;\n            y++;\n        }\n    }\n    return ret;\n}\n\nvoid solve () {\n    int ans = 0;\n    for (int i = 0; i &lt; K; i++) {\n        ans = (ans + get (i)) % M;\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre>"},{"location":"math/xor_basis/#_1","title":"\u7dda\u6027\u57fa\u5927\u5c0f","text":"\u4f8b\u984c <ul> <li>\u7d66\u5b9a\u9663\u5217 \\(a_1,...,a_n\\) \u554f\u53ef\u4ee5 \\(\\texttt{XOR}\\) \u6210\u591a\u5c11\u7a2e\u6578\u5b57</li> </ul> \u60f3\u6cd5 <ul> <li>\u5047\u8a2d\u5728\u6d88\u53bb\u7684\u4e4b\u5f8c\u7dda\u6027\u57fa\u5927\u5c0f\u53ea\u6709 \\(r\\)\uff0c\u90a3\u7b54\u6848\u5c31\u662f \\(2^{r}\\)</li> </ul> \u5ef6\u4f38 <ul> <li>\u7d66\u4e00\u500b\u9663\u5217 \\(a_1,...,a_n\\)\uff0c\u554f\u6709\u591a\u5c11\u500b\u5b50\u96c6 \\(\\texttt{XOR}\\) \u70ba \\(0\\)</li> </ul> \u60f3\u6cd5 <ul> <li>\u5047\u8a2d\u5728\u6d88\u53bb\u7684\u4e4b\u5f8c\u7dda\u6027\u57fa\u5927\u5c0f\u53ea\u6709 \\(r\\)\uff0c\u90a3\u7b54\u6848\u5c31\u662f \\(2^{n-r}\\)</li> </ul> \u8b8a\u5316 <ul> <li>\u7d66\u4e00\u500b\u9663\u5217 \\(a_1,...,a_n\\)\uff0c\u554f\u6709\u591a\u5c11\u7a2e \\(\\texttt{subset}\\) \u53ef\u4ee5\u7d44\u6210 \\(x\\)</li> </ul> \u60f3\u6cd5 <ul> <li> <p>\u6211\u5011\u5148\u5224\u65b7\u662f\u5426\u53ef\u4ee5\u6e4a\u51fa \\(x\\)</p> </li> <li> <p>\u5982\u679c\u53ef\u4ee5\uff0c\u6211\u5011\u53ef\u4ee5\u900f\u904e \\(\\texttt{XOR}\\) \u4e00\u4e9b \\(0\\) \u4e5f\u53ef\u4ee5\u5f97\u5230 \\(x\\)</p> </li> <li> <p>\u5047\u8a2d\u5728\u6d88\u53bb\u7684\u4e4b\u5f8c\u7dda\u6027\u57fa\u5927\u5c0f\u53ea\u6709 \\(r\\)</p> </li> <li> <p>\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\(2^{n-r}\\) (\u4e5f\u5c31\u662f\u7528\u90a3\u4e9b \\(0\\) \u4f86\u7d44\u5408)</p> </li> </ul>"},{"location":"math/xor_basis/#_2","title":"\u8cc7\u6599\u7d50\u69cb","text":"\u4f8b\u984c1 <p>\u7d66\u5b9a\u4e00\u9846\u6a39\uff0c\u554f\u5c0d\u65bc\u6bcf\u500b\u9ede\uff0c\u4ed6\u4ee5\u4e0b\u7684 \\(\\texttt{subtree}\\) \u53ef\u4ee5 \\(\\texttt{XOR}\\) \u51fa\u591a\u5c11\u7a2e\u7570\u6216\u548c</p> \u60f3\u6cd5 <ul> <li> <p>\u628a\u6a39\u958b\u6210\u7dda\u6bb5\u6a39\uff0c\u6bcf\u500b\u7bc0\u9ede\u7dad\u8b77\u4e00\u500b\u7dda\u6027\u57fa</p> </li> <li> <p>\u6bcf\u500b\u7dda\u6027\u57fa\u7684\u5927\u5c0f\u6700\u591a\u662f \\(O(\\log C)\\)</p> <ul> <li>\u56e0\u70ba\u6700\u591a\u53ea\u6703\u63a7\u5236\u5168\u90e8\u7684 \\(\\texttt{bit}\\)</li> </ul> </li> <li> <p>\u6bcf\u6b21 \\(\\texttt{insert}\\) \u82b1 \\(O(\\log C)\\)</p> </li> <li> <p>\\(O(n\\log^2 C)\\)</p> </li> </ul> \u4f8b\u984c2 <p>\u7d66\u4e00\u500b\u9663\u5217 \\(a_1,...,a_n\\)\uff0c\\(q\\) \u7b46\u4ee5\u4e0b\u8a62\u554f</p> <ul> <li> <p>\\(\\text{query}(l,r):a_l\\sim a_r\\) \u7684 \\(\\texttt{Maximum Xor Subset}\\) </p> </li> <li> <p>\u6bcf\u7b46\u8a62\u554f\u8907\u96dc\u5ea6 \\(O(\\log^3 C)\\) \u56de\u7b54</p> </li> </ul> \u60f3\u6cd5 <ul> <li> <p>\u7dda\u6bb5\u6a39\u7dad\u8b77</p> </li> <li> <p>\u5408\u4f75 \\(O(\\log^2 C)\\)</p> </li> <li> <p>\\(O(\\log C)\\) \u5c64</p> </li> </ul> \u4f8b\u984c3 <p>\u7d66\u4e00\u500b\u9663\u5217 \\(a_1,...,a_n\\)\uff0c\\(q\\) \u7b46\u4ee5\u4e0b\u8a62\u554f</p> <ul> <li> <p>\\(\\text{query}(l,r):a_l\\sim a_r\\) \u7684 \\(\\texttt{Maximum Xor Subset}\\) </p> </li> <li> <p>\u6bcf\u7b46\u8a62\u554f\u8907\u96dc\u5ea6 \\(O(\\log^2 C)\\) \u56de\u7b54</p> </li> </ul> \u60f3\u6cd5 <p> </p> <ul> <li> <p>\u5efa\u69cb \\(\\texttt{pre}\\)\uff0c\\(\\texttt{suf}\\)\uff0c\u6bcf\u5c64\u6709 \\(n\\) \u500b\u6771\u897f</p> </li> <li> <p>\u6bcf\u6b21\u518d \\(\\texttt{insert}\\) \u4e00\u500b\u6771\u897f\u82b1 \\(O(\\log C)\\)</p> </li> <li> <p>\u67e5\u8a62\u76f8\u7576\u65bc\u5408\u4f75\u67d0\u500b \\(\\texttt{suf}\\) \u8ddf\u6bcf\u500b \\(\\texttt{pre}\\)</p> <ul> <li>\\(O(\\log^2 C)\\)</li> </ul> </li> <li> <p>\\(\\begin{cases} \\text{total build: } O(n\\log^2 C) \\\\ \\text{total query:}O(q\\log^2 C)\\end{cases}\\)</p> </li> </ul>"},{"location":"math/xor_basis/#_3","title":"\u53c3\u8003","text":"<ul> <li>https://taodaling.github.io/blog/2020/12/25/%E7%BA%BF%E6%80%A7%E5%9F%BA/</li> </ul>"},{"location":"math/images/7/","title":"7","text":"<p>proof : \\(\\{1\\times a, 2\\times a, 3\\times a, \\ldots, (p - 1)\\times a\\}\\) \u5728 mod \\(p\\) \u4e0b\u70ba \\(\\{1,2,3,\\ldots ,(p-1) \\}\\) \u7684\u91cd\u65b0\u6392\u5217\uff0c\u5176\u4e2d \\(a,p\\) \u4e92\u8cea</p> <p>\u53cd\u8b49\u6cd5 : \u5047\u8a2d \\(xa\\equiv ya\\pmod{p}\\) \u6210\u7acb</p> <p>\u79fb\u5411\u5f97 \\((x-y)a\\equiv 0\\pmod{p}\\)\u3002\u56e0\u70ba \\(a,p\\) \u4e92\u8cea\uff0c\u6240\u4ee5 \\(p \\mid (x-y)\\)\uff0c\u4f46 \\(x,y\\in \\{ 1,2,\\ldots ,(p-1) \\}\\)\uff0c\u4e14 \\(p\\) \u70ba\u8cea\u6578\uff0c\u6545\u4efb\u5169\u500b \\(x,y\\) \u76f8\u6e1b\u4e0d\u53ef\u80fd\u88ab \\(p\\) \u6574\u9664\uff0c\u77db\u76fe\uff0c\u6545\u5047\u8a2d\u932f\u8aa4\u3002\u5c0d\u65bc\u8a8d\u5169\u500b \\(x,y\\in \\{ 1,2,\\ldots ,(p-1) \\}\\)\uff0c \\(xa \\not\\equiv ya\\pmod{p}\\)\uff0c\u800c \\(xa\\pmod{p}\\) \u53c8\u4e0d\u53ef\u80fd\u70ba \\(0\\)\uff08\u56e0\u70ba \\(x,a\\) \u5747\u8207 \\(p\\) \u4e92\u8cea\uff09\uff0c\u6240\u4ee5\u53ea\u80fd\u662f \\(\\{ 1,2,\\ldots ,(p-1)\\}\\)</p>"},{"location":"math/images/C.%20%E5%8F%96%E7%9F%B3%E5%AD%90%E9%81%8A%E6%88%B2%20%28kgame%29/","title":"C. \u53d6\u77f3\u5b50\u904a\u6232 (kgame)","text":"<p>\u4e00\u958b\u59cb\u6709 \\(N\\) \u9846\u77f3\u982d\u8207\u4e00\u500b\u6b63\u6574\u6578 \\(K\\)\uff0c\u6709\u5169\u500b\u4eba\u6703\u8f2a\u6d41\u53d6\u51fa\u4e00\u4e9b\u77f3\u982d\u3002</p> <p>\u5047\u8a2d\u904a\u6232\u9032\u884c\u4e86 \\(m\\) \u8f2a\uff0c\u4e26\u4e14\u53d6\u51fa\u7684\u77f3\u982d\u6578\u91cf\u7684\u5e8f\u5217\u70ba \\(a_1, a_2, \\ldots, a_m\\)\uff0c\u90a3\u9ebc\u5fc5\u9808\u8981\u6eff\u8db3\u4ee5\u4e0b\u5169\u500b\u689d\u4ef6\uff1a</p> <ul> <li> <p>\u5c0d\u65bc \\(i = 1, 2, \\ldots, m\\)\uff0c\\(1 \\le a_i \\le K-1\\)\u3002</p> </li> <li> <p>\u5c0d\u65bc \\(j = 1, 2, \\ldots, m-1\\)\uff0c\\(a_j + a_{j+1} \\le K\\)\u3002</p> </li> </ul> <p>\u5148\u5c07\u77f3\u982d\u53d6\u5b8c\u7684\u90a3\u500b\u4eba\u7372\u52dd\uff0c\u82e5\u662f\u96d9\u65b9\u90fd\u7121\u6cd5\u5c07\u77f3\u982d\u53d6\u5b8c\u5373\u8996\u70ba\u5e73\u624b\u3002</p> <p>\u5728\u5df2\u77e5 \\(N\\)\u3001\\(K\\) \u7684\u60c5\u6cc1\u4e0b\uff0c\u8acb\u554f\u8ab0\u6709\u5fc5\u52dd\u7b56\u7565\uff1f</p> <p>\u5728\u4e00\u7b46\u6e2c\u8cc7\u4e2d\uff0c\u4f60\u9700\u8981\u8655\u7406 \\(T\\) \u7d44\u8f38\u5165\u3002</p> <ul> <li>\\(1 \\le T \\le 10^5\\)</li> <li>\\(1 \\le K \\le 10^{18}\\)</li> <li>\\(1 \\le K \\le N\\)</li> </ul> \u5b50\u4efb\u52d9 \u5206\u6578 \u984d\u5916\u8f38\u5165\u9650\u5236 \\(1\\) \\(5\\) \\(T\\) \u7d44\u8f38\u5165\u4e2d\u7684 \\(N\\) \u7684\u7e3d\u548c \\(\\le 500\\)\u3002 \\(2\\) \\(95\\) \u7121\u984d\u5916\u9650\u5236\u3002"},{"location":"math/images/C.%20%E5%8F%96%E7%9F%B3%E5%AD%90%E9%81%8A%E6%88%B2%20%28kgame%29/#example","title":"Example","text":""},{"location":"math/images/C.%20%E5%8F%96%E7%9F%B3%E5%AD%90%E9%81%8A%E6%88%B2%20%28kgame%29/#input","title":"input","text":"<pre><code>2\n5 3\n12 4\n</code></pre>"},{"location":"math/images/C.%20%E5%8F%96%E7%9F%B3%E5%AD%90%E9%81%8A%E6%88%B2%20%28kgame%29/#output","title":"output","text":"<pre><code>Red\nLeaf\n</code></pre>"},{"location":"math/images/C.%20%E5%8F%96%E7%9F%B3%E5%AD%90%E9%81%8A%E6%88%B2%20%28kgame%29/#note","title":"Note","text":"<p>\u5728\u7bc4\u4f8b\u7684\u7b2c\u4e00\u7b46\u8f38\u5165\u4e2d\uff0c\u5c0f\u7d05\u53ef\u4ee5\u9078\u64c7\u5148\u62ff\u8d70 \\(22\\) \u9846\u77f3\u982d\uff0c\u9019\u6a23\u4e0b\u4e00\u8f2a\u5c0f\u8449\u53ea\u80fd\u62ff \\(11\\) \u9846\u77f3\u982d\uff0c\u6700\u5f8c\u5c0f\u7d05\u53ef\u4ee5\u518d\u628a\u5269\u4e0b \\(22\\) \u9846\u77f3\u982d\u62ff\u8d70\uff0c\u7372\u5f97\u52dd\u5229\u3002</p>"},{"location":"math/special/average/","title":"\u5e73\u5747\u6578","text":"<ul> <li>\u8caa\u5fc3 - APCSC</li> <li>https://atcoder.jp/contests/abc236/tasks/abc236_e</li> </ul>"},{"location":"math/special/average/#_1","title":"\u5e73\u5747\u6700\u5927\u5316","text":"P1570 KC \u559d\u5496\u5561 <p>\\(N\\) \u500b\u7269\u54c1\u91cd\u91cf\u8207\u50f9\u503c\u5206\u5225\u70ba \\(w_i\\), \\(v_i\\)\uff0c\u9078 \\(K\\) \u500b\uff0c\u6c42\u55ae\u4f4d\u91cd\u91cf\u7684\u50f9\u503c\u6700\u5927\u591a\u5c11</p> \u601d\u8def \\[\\begin{align}&amp; \\dfrac{\\sum v_i}{\\sum w_i}\\ge x \\\\ \\\\ \\Rightarrow &amp; \\sum v_i \\ge \\sum(x\\times w_i) \\\\ \\\\  \\Rightarrow &amp; \\sum (v_i - x\\times w_i) \\ge 0 \\end{align}\\] <p>\u4e8c\u5206\u641c \\(x\\)\uff0c\u9078 \\((v_i - x\\times w_i)\\) \u6700\u5927\u7684 \\(K\\) \u500b\u5224\u65b7</p> code <pre><code>bool check (double x) {\n    for (int i = 0; i &lt; n; i++) {\n        c[i] = w[i]- x * v[i];\n    }\n    sort(c, c + n,greater&lt;double&gt;());\n\n    float sum = 0;\n    for (int i = 0; i &lt; k; i++) {\n        sum += c[i];\n    }\n\n    return sum &gt;= 0;\n}\n\nwhile (R - L &gt; 0.0001) {\n    double m = (L + R) / 2;\n    if (check (m)) {\n        L = m;\n    } else {\n        R = m;\n    }\n}\n</code></pre>"},{"location":"math/special/average/#_2","title":"\u5340\u9593\u5e73\u5747","text":"\u5340\u9593\u5e73\u5747 <p>\u7d66\u5b9a \\(a_1,...,a_n\\) \u554f\u53ef\u5426\u9078\u51fa \\(a_l,..., a_r\\) \u4f7f\u5f97\u5e73\u5747\u70ba \\(x\\)</p> \u601d\u8def <p>\u5c07 \\(a_i\\)  \u7684\u8b8a\u6210 \\(a_i - x\\)</p> <p>\u554f\u984c\u5c31\u8b8a\u6210\u53d6 \\(pre_i- pre_j = 0\\)</p>"},{"location":"math/special/average/#_3","title":"\u6700\u5927\u5e73\u5747\u5340\u9593","text":"CF EDU A. Maximum Average Segment <p>\u7d66\u5b9a \\(a_1,...,a_n\\) \u554f\u53ef\u5426\u9078\u51fa\u9577\u5ea6 \\(\\ge k\\) \u7684 subarray \u4f7f\u5f97\u5e73\u5747\u6700\u5927\uff0c\u8f38\u51fa\u9019\u500b subarray \u7684\u5de6\u53f3\u754c</p> <ul> <li>\\(k\\le n \\le 10^5,0\\le a_i\\le 100\\)</li> </ul> \u601d\u8def <p>\u4e8c\u5206\u641c\u5e73\u5747\u503c \\(x\\)</p> <p>\\(\\texttt{check} (x)\\) \u662f\u6aa2\u67e5\u6709\u6c92\u6709\u5e73\u5747\u5927\u65bc\u7b49\u65bc \\(x\\) \u7684</p> <p>\u4e5f\u5c31\u662f\u770b \\(pre(i) - pre(j) \\ge 0\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, k;\nint ansl, ansr;\nint a[maxn];\ndouble b[maxn];\n\nbool check(double x) {\n    for (int i = 1; i &lt;= n; i++) {\n        b[i] = (double)b[i - 1] + a[i] - x;\n    }\n    double mn = 0;\n    int idx = 1;\n    for (int i = k; i &lt;= n; i++) {\n        if (b[i - k] &lt; mn) { // \u6280\u5de7\n            mn = b[i - k];\n            idx = i - k + 1;\n        }\n        if (b[i] - mn &gt;= 0) {\n            ansl = idx, ansr = i;\n            return true;\n        }\n    }\n    return false;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    double l = 0, r = 105;\n    for (int i = 0; i &lt; 100; i++) {\n        double mid = (double)(l + r) / 2;\n        if (check(mid)) l = mid;\n        else r = mid;\n    }\n    check(l);\n    cout &lt;&lt; ansl &lt;&lt; ' ' &lt;&lt; ansr &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"math/special/average/#_4","title":"\u6700\u77ed\u5e73\u5747\u8def","text":"\u6700\u77ed\u5e73\u5747\u8def CF EDU B. Minimum Average Path <p>\u7d66\u5b9a\u4e00\u500b \\(n\\) \u9ede \\(m\\) \u908a\u7684 DAG\uff0c\u908a\u5e36\u6b0a\uff0c\u554f\u5f9e \\(1\\to n\\) \u7684 path \u4e0a\u6b0a\u91cd\u7684\u5e73\u5747\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(n\\le 10^5,m\\le 10^5\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u9762\u6700\u5927\u5e73\u5747\u5340\u9593\u4e00\u6a23\uff0c\u6211\u5011\u53bb\u4e8c\u5206\u641c\u5e73\u5747\u503c \\(x\\)\uff0c\u5c07\u908a\u6b0a\u90fd \\(-x\\)\uff0c\u770b\u6709\u6c92\u6709\u4e00\u689d path \u7684\u7e3d\u548c \\(\\le 0\\)\u3002\u6211\u5011\u53ef\u4ee5\u4ee4 \\(dp[i]=\\) \u8d70\u5230\u9ede \\(i\\) \u7684\u6700\u5c0f\u6b0a\u503c\u662f\u591a\u5c11\uff0c\\(dp[v]=\\min \\{dp[u]+w \\}\\) </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst double INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, m;\ndouble dp[maxn];\nint par[maxn];\nvector&lt;pii&gt; G[maxn];\n\nbool check(double x) {\n    fill(dp, dp + n + 1, INF);\n    fill(par, par + n + 1, -1);\n    dp[1] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        for (auto [v, w] : G[i]) {\n            double val = (double)dp[i] + w - x;\n            if (dp[v] &gt; val) {\n                dp[v] = val;\n                par[v] = i;\n            }\n        }\n    }\n    return dp[n] &lt;= 0;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        G[u].pb({v, w});\n    }\n\n    double l = 0, r = 105;\n    for (int i = 0; i &lt; 100; i++) {\n        double mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n    check(l);\n\n    stack&lt;int&gt; stk;\n    int x = n;\n    stk.push(x);\n    while (par[x] != -1) {\n        x = par[x];\n        stk.push(x);\n    }\n    cout &lt;&lt; stk.size() - 1 &lt;&lt; '\\n';\n    while (stk.size()) {\n        cout &lt;&lt; stk.top() &lt;&lt; ' ';\n        stk.pop();\n    }\n} \n</code></pre>"},{"location":"math/special/median/","title":"\u4e2d\u4f4d\u6578","text":""},{"location":"math/special/median/#_1","title":"\u5167\u9375\u51fd\u5f0f","text":""},{"location":"math/special/median/#_2","title":"\u7d93\u5178\u4f8b\u984c","text":""},{"location":"math/special/median/#_3","title":"\u6700\u5927\u4e2d\u4f4d\u6578","text":"<ul> <li>atcoder average and median number</li> </ul> CF 1486 D. Max Median <p>\u7d66\u4f60\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1,a_2,\\ldots, a_n\\)\uff0c\u554f\u5c0d\u65bc\u6bcf\u500b\u9577\u5ea6 \\(\\ge k\\) \u7684 subarray \u7684\u4e2d\u4f4d\u6578\u6700\u5927\u662f\u591a\u5c11\uff08\u4e2d\u4f4d\u6578\u662f\u6392\u5e8f\u5f8c\u7b2c \\(\\lfloor \\frac{n+1}{2}\\rfloor\\) \u4f4d\u7f6e\u7684\u503c\uff09</p> <p>\\(n,k \\le 2\\times 10^5,a_i \\le n\\)</p> \u601d\u8def <p>\u4e8c\u5206\u7b54\u6848\uff0ccheck \u7b54\u6848\u662f\u5426\u5927\u65bc\u7b49\u65bc threshold \\(t\\)\u3002\u5177\u9ad4\u5c07 \\(\\le t\\) \u7684\u6578\u5b57\u8a2d\u6210 \\(-1\\)\uff0c\\(&gt;t\\) \u7684\u8a2d\u6210 \\(+1\\)\uff0c\u53ea\u8981\u6aa2\u67e5\u9019\u500b\u65b0\u7684\u5e8f\u5217\u4e2d\u6709\u6c92\u6709\u4e00\u6bb5 \\(\\ge k\\) \u7684 subarray \u7684\u548c\u662f \\(\\ge 0\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 2e5 + 5, INF = 0x3f3f3f3f;\nint n, k, a[N];\nint b[N], mn[N];\n\nbool check(int x) {\n    for (int i = 1; i &lt;= n; i++) {\n        if (a[i] &gt;= x) {\n            b[i] = 1;\n        } else {\n            b[i] = -1;\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        b[i] += b[i - 1];\n        mn[i] = min(b[i], mn[i - 1]);\n        if (i &gt;= k &amp;&amp; b[i] - mn[i - k] &gt;= 1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    int l = 1, r = n + 1;\n    while (r - l &gt; 1) {\n        int mid = (l + r) / 2;\n        if (check(mid)) l = mid;\n        else r = mid;\n    }\n\n    cout &lt;&lt; l &lt;&lt; '\\n';\n}\n</code></pre> <p>\u82e5\u5c07\u984c\u76ee\u4e2d\u7684\u4e2d\u4f4d\u6578\u63db\u6210\u7b97\u6578\u5e73\u5747\u503c\uff0c\u5982\u4f55\u505a\u3002 check \u7b54\u6848\u7684\u6642\u5019\uff0c\u5c07\u5e8f\u5217\u6bcf\u500b\u6578\u540c\u6642\u6e1b\u53bb x \u7136\u5f8c\u627e\u5230\u4e00\u500b\u5340\u9593\u7d2f\u548c\u5927\u65bc\u7b49\u65bc 0 \u7684\u5373\u5408\u6cd5\u3002 \u56e0\u70ba\u5c07\u6bcf\u500b\u6578\u540c\u6642\u6e1b\u53bb\u7b54\u6848 x \u5f8c\uff0c\u7b97\u6578\u5e73\u5747\u503c &gt;= 0 \u7684\u5373\u539f\u5e8f\u5217\u7b97\u6578\u5e73\u5747\u503c &gt;= x</p>"},{"location":"math/special/median/#_4","title":"\u52d5\u614b\u7dad\u8b77\u4e2d\u4f4d\u6578","text":"Leetcode 295. Find Median from Data Stream <p>\u7dad\u8b77\u4e00\u500b\u96c6\u5408\uff0c\u4e00\u958b\u59cb\u96c6\u5408\u70ba\u7a7a\uff0c\\(q\\) \u7b46\u4ee5\u4e0b\u64cd\u4f5c</p> <ul> <li> <p><code>void addNum(int num)</code> \u5c07 num \u9019\u500b\u6578\u5b57 insert \u9032\u53bb\u96c6\u5408\u88e1\u9762</p> </li> <li> <p><code>double findMedian()</code> \u56de\u50b3\u7576\u524d\u96c6\u5408\u7684\u4e2d\u4f4d\u6578\uff08\u82e5 size \u70ba\u5076\u6578\uff0c\u4e2d\u4f4d\u6578\u70ba\u4e2d\u9593\u5169\u500b\u6578\u7684\u5e73\u5747\uff09</p> </li> </ul> <p>\\(-10^5 \\le\\) num \\(\\le 10^5,q\\le 5 \\times 10^4\\)</p>"},{"location":"math/special/median/#_5","title":"\u6cd5\u4e00 : \u5927\u5c0f\u5806","text":"<p>\u958b\u5169\u500b priority_queue\uff0c\u5c07\u8f38\u5165\u7684\u6578\u5b57\u5206\u5225\u5206\u6210\u5927\u5c0f\u5169\u5806 p1, p2\uff0cp1 \u5b58\u524d\u534a\u5c0f\u7684\u6578\u5b57\uff0c\u662f\u7531 Max Heap\uff0cp2 \u5b58\u5f8c\u534a\u5927\u6578\u5b57\uff0c\u662f Min Heap\uff0c\u9019\u6a23\u53d6 p1.top() \u548c p2.top() \u5728\u5076\u6578\u500b\u60c5\u6cc1\u5c31\u53ef\u4ee5\u53d6\u4e2d\u4f4d\u6578\u5e73\u5747\uff0c\u5728 n \u70ba\u5947\u6578\u7684\u6642\u5019\u6211\u5011\u9650\u5236 p1 \u61c9\u6bd4 p2 \u7684 size \u5c11 1\uff0c\u9019\u6a23\u53ea\u8981\u53d6 p2.top() \u5c31\u662f\u4e2d\u4f4d\u6578\u3002\u7dad\u8b77\u7684\u904e\u7a0b\u898b\u4ee3\u78bc</p> using heap code <pre><code>class MedianFinder {\npublic:\n    priority_queue&lt;int&gt; p1;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; p2;\n    int n = 0;\n\n    MedianFinder() {\n    }\n\n    void addNum(int num) {\n        n++;\n\n        // \u5c07 p2 \u6700\u5c0f\u7684\u6578\u5b57\u63a8\u5165 p1\n        p2.push(num);\n        p1.push(p2.top());\n        p2.pop();\n\n        // \u5e73\u8861\u4ed6\u5011\u7684 size\n        if (p1.size() &gt; p2.size()) {\n            p2.push(p1.top());\n            p1.pop();\n        }\n    }\n\n    double findMedian() {\n        if (n % 2) return p2.top();\n        else return (p1.top() + p2.top()) / 2.0;\n    }\n};\n</code></pre>"},{"location":"math/special/median/#rank-tree","title":"\u6cd5\u4e8c : rank tree","text":""},{"location":"math/special/median/#sliding-median","title":"Sliding Median","text":"CSES - Sliding Median"},{"location":"math/special/median/#_6","title":"\u984c\u76ee","text":"\u6d77\u725b B \u73ed class 4 p1 <p>\u7d66 \\(n\\) \u500b\u6574\u6578 \\(a_1,a_2,\\ldots,a_n\\)\uff0c\u6bcf\u8f38\u5165\u4e00\u500b\u6574\u6578\u5c31\u8981\u8f38\u51fa\u76ee\u524d\u5df2\u7d93\u8f38\u5165\u7684\u6578\u5b57\u7684\u4e2d\u4f4d\u6578\u3002\u4f8b\u5982\u8f38\u5165\u70ba \\([1,7,4,2,5,9]\\)\uff0c\u8f38\u51fa\u4f9d\u5e8f\u61c9\u70ba \\([1,4,4,3,4,4.5]\\)\u3002</p> <p>\u8a2d\u8a08\u4e00\u500b\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n \\log n)\\) \u7684\u6f14\u7b97\u6cd5\u89e3\u6c7a\u6b64\u554f\u984c\u3002</p> <p>hint : rank tree</p>"},{"location":"math/special/mex/","title":"mex","text":""},{"location":"math/special/mex/#_1","title":"\u4ecb\u7d39","text":"<p>\\(\\text{mex}(S)\\) : \u56de\u50b3\u6700\u5c0f\u6c92\u6709\u51fa\u73fe\u5728\u96c6\u5408 \\(S\\) \u7684\u975e\u8ca0\u6574\u6578</p> <p>\u4f8b\u5982 : </p> <ul> <li> <p>\\(\\text{mex}( \\{1, 2, 4\\} ) = 0\\)</p> </li> <li> <p>\\(\\text{mex}( \\{0, 1, 2, 4\\} ) = 3\\)</p> </li> <li> <p>\\(\\text{mex}( \\{0, 1, 2, 3\\} ) = 4\\)</p> </li> </ul> code <pre><code>int mex(vector&lt;int&gt;&amp; a) {\n    int n = a.size();\n\n    vector&lt;bool&gt; v(n + 1, false);\n    for (int x : a) {\n        if (x &lt;= n) v[x] = true;\n    }\n\n    for (int i = 0; i &lt;= n; i++) {\n        if (v[i] == false) return i;\n    }\n    return -1;\n}\n</code></pre> \u6a21\u7248\u6e2c\u8a66 YOJ 1376. Mex <p>\u7d66\u4f60\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u9663\u5217 \\(a_1,a_2,\\ldots ,a_n\\)\uff0c\u8acb\u4f60\u6c42\u51fa \\(\\text{mex}(\\{a_1,a_2,\\ldots ,a_n\\})\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint mex(vector&lt;int&gt;&amp; a) {\n    int n = a.size();\n\n    vector&lt;bool&gt; v(n + 1, false);\n    for (int x : a) {\n        if (x &lt;= n) {\n            v[x] = true;\n        }\n    }\n\n    for (int i = 0; i &lt;= n; i++) {\n        if (v[i] == false) return i;\n    }\n    return -1;\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n\n    }\n    cout &lt;&lt; mex(a) &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"math/special/mex/#_2","title":"\u4f8b\u984c","text":"\u5340\u9593 mex \u6d1b\u8c37 P4137 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\\(\\text{mex}(\\{a_l,\\ldots ,a_r\\}):\\) \u56de\u50b3\u6700\u5c0f\u6c92\u6709\u51fa\u73fe\u5728 \\(\\{a_l,\\ldots ,a_r\\}\\) \u7684\u975e\u8ca0\u6574\u6578</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u96e2\u7dda\u8655\u7406\uff0c\u5c07 query \u6309\u7167 \\(l_i\\) \u5c0f\u5230\u5927 sort</p> <p>\u6211\u5011\u958b\u4e00\u9846\u503c\u57df\u7dda\u6bb5\u6a39\u7b2c i \u9805\u7d00\u9304 i \u5728\u7576\u524d\u96e2\u7dda\u7684\u5de6\u754c\u5f8c\u7b2c\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e</p> <p>\u6211\u5011\u5c31\u53ea\u8981\u5728\u7dda\u6bb5\u6a39\u4e0a\u4e8c\u5206\u5230\u6700\u5c0f\u7684 i \u4f7f max(0, i) &gt; r</p> <p>\u8907\u96dc\u5ea6 O((n + q) log n)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 2e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Node {\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int l, r;\n    int mx;\n    Node(int l, int r) : l(l), r(r) {}\n\n    void pull() {\n        mx = max(lc-&gt;mx, rc-&gt;mx);\n    }\n};\n\nNode* build(int l, int r) {\n    Node *root = new Node(l, r);\n    if (l == r) {\n        root-&gt;mx = INF;\n        return root;\n    }\n    int mid = (l + r) / 2;\n    root-&gt;lc = build(l, mid);\n    root-&gt;rc = build(mid + 1, r);\n    root-&gt;pull();\n    return root;\n}\n\nvoid update(Node* root, int pos, int val) {\n    if (root-&gt;l == root-&gt;r) {\n        root-&gt;mx = val;\n        return;\n    }\n    if (pos &lt;= root-&gt;lc-&gt;r) {\n        update(root-&gt;lc, pos, val);\n    } else {\n        update(root-&gt;rc, pos, val);\n    }\n    root-&gt;pull();\n    return;\n}\n\nint walk(Node *root, int val) {\n    if (root-&gt;l == root-&gt;r) {\n        return root-&gt;l;\n    }\n    if (root-&gt;lc-&gt;mx &gt; val) {\n        return walk(root-&gt;lc, val);\n    } else {\n        return walk(root-&gt;rc, val);\n    }\n}\n\nstruct Queries {\n    int l, r, id;\n\n    bool operator&lt;(const Queries &amp;rhs) const {\n        return l &lt; rhs.l;\n    }\n};\n\nint n, q;\nint a[maxn], ans[maxn], ptr[maxn];\nvector&lt;int&gt; pos[maxn];\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    Node *root = build(0, maxn);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        if (pos[a[i]].empty()) {\n            update(root, a[i], i);\n        }\n        pos[a[i]].pb(i);\n    }\n\n    vector&lt;Queries&gt; queries;\n    for (int i = 0; i &lt; q; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        l--, r--;\n        queries.pb({l, r, i});\n    }\n    sort(ALL(queries));\n\n    int prel = 0;\n    for (auto [l, r, id] : queries) {\n        while (prel &lt; l) {\n            if (ptr[a[prel]] + 1 &lt;= pos[a[prel]].size() - 1) {\n                ptr[a[prel]]++;\n                update(root, a[prel], pos[a[prel]][ptr[a[prel]]]);\n            } else {\n                update(root, a[prel], INF);\n            }\n            prel++;\n        }\n        ans[id] = walk(root, r);\n    }\n    for (int i = 0; i &lt; q; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n} \n</code></pre> 2022 \u82b1\u4e2d\u4e00\u6a21 pE Atcoder abc272 E. Add and Mex CF 1844 B. Permutations &amp; Primes <p>\u554f \\(1,2,\\ldots ,n\\) \u7684 permutation \u88e1\u9762\uff0c\u6700\u591a\u80fd\u6709\u5e7e\u500b\u5340\u9593\u88e1\u9762\u7684\u6578\u81ea \\(\\text{MEX}\\) \u8d77\u4f86\u662f\u8cea\u6578\uff0c\u8f38\u51fa\u9019\u500b permutation</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u9996\u5148\u89c0\u5bdf\u6bcf\u500b\u4f4d\u7f6e\u6703\u6709\u5e7e\u500b\u5340\u9593 \\((l,r)\\) \u8986\u84cb\u5230\uff0c\u4ee5 \\(n=5\\) \u70ba\u4f8b\uff0c\u6bcf\u500b \\(cnt_i=\\)\u5de6\u908a\u7684\u6578\u5b57\u500b\u6578 \\(\\times\\) \u53f3\u908a\u7684\u6578\u5b57\u500b\u6578 :</p> \\[cnt=[5,8,9,8,5]\\] <p>\u5982\u679c\u4e00\u500b subarray \u88e1\u9762\u6c92\u6709 \\(1\\) \u90a3 \\(\\text{MEX}\\) \u5c31\u662f \\(1\\)\uff0c\u6240\u4ee5 \\(1\\) \u9700\u8981\u653e\u5728\u6700\u591a\u500b\u5340\u9593 \\((l,r)\\) \u6703\u8986\u84cb\u5230\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u6700\u4e2d\u9593</p> <p>\u986f\u7136 \\(\\text{MEX}\\) \u8981\u662f\u8d8a\u5927\u7684\u6578\u5b57\u8d8a\u96e3\u9054\u5230\uff0c\u90a3\u4e0d\u5982\u6211\u5011\u5c31\u5148\u8003\u616e\u6bd4 \\(1\\) \u5927\u4e00\u9ede\u7684\u8cea\u6578 \\(2\\)\u3002\u6211\u5011\u60f3\u8981\u4f7f\u76e1\u91cf\u5c11\u7684\u5340\u9593\u8986\u84cb\u5230 \\(2\\)\uff0c\u4f7f\u5f97\u76e1\u91cf\u591a\u7684\u5340\u9593 \\(\\text{MEX}\\) \u662f \\(2\\)\uff0c\u90a3\u9ebc\u653e\u5728\u6700\u908a\u908a\u4e00\u5b9a\u662f\u6700\u597d\u7684\uff0c\u4e0d\u5931\u4e00\u822c\u6027\u5047\u8a2d \\(2\\) \u662f\u653e\u5728\u6700\u524d\u9762\u3002</p> <p>\u6211\u5011\u4f86\u6574\u7406\u4e00\u4e0b\u76ee\u524d\u7684\u5340\u9593\u5305\u542b \\(1,2\\) \u7684\u60c5\u6cc1</p> <ol> <li> <p>\u6c92\u6709 \\(1\\)\uff0c\u6709 \\(2\\) \\(\\Rightarrow \\text{MEX}=1\\)</p> </li> <li> <p>\u6c92\u6709 \\(1\\)\uff0c\u6c92\u6709 \\(2\\) \\(\\Rightarrow \\text{MEX}=1\\)</p> </li> <li> <p>\u6709 \\(1\\)\uff0c\u6c92\u6709 \\(2\\) \\(\\Rightarrow \\text{MEX}=2\\)</p> </li> <li> <p>\u6709 \\(1\\)\uff0c\u6709 \\(2\\) \\(\\Rightarrow \\text{MEX} &gt; 2\\)</p> </li> </ol> <p>\u767c\u73fe\u524d\u4e09\u7a2e\u60c5\u6cc1\u7684 \\(\\text{MEX}\\) \u5df2\u7d93\u56fa\u5b9a\uff0c\u6240\u4ee5\u6211\u5011\u8981\u60f3\u8fa6\u6cd5\u4f7f\u7b2c\u56db\u7a2e\u7684 \\(\\text{MEX}\\) \u662f\u8cea\u6578\u7684\u5340\u9593\u500b\u6578\u76e1\u91cf\u591a\u3002\u6709 \\(1\\)\uff0c\u6709 \\(2\\) \u7684\u5340\u9593\u4e00\u5b9a\u662f \\(l=1,r\\ge \\text{mid}\\)\uff0c\u800c \\(3\\) \u662f\u5927\u65bc \\(2\\) \u7684\u7b2c\u4e00\u500b\u8cea\u6578\uff0c\u4e5f\u5c31\u662f \\(\\text{MEX}\\) \u6700\u597d\u9054\u5230\u7684\u8cea\u6578\uff0c\u6240\u4ee5\u6211\u5011\u8981\u4f7f \\(l=1,r\\ge \\text{mid}\\) \u7684\u5340\u9593\u5305\u542b \\(3\\) \u7684\u500b\u6578\u8981\u8d8a\u5c11\u8d8a\u597d\uff0c\u90a3\u7576\u7136\u5c31\u662f\u628a \\(3\\) \u653e\u5728\u9663\u5217\u7684\u5c3e\u7aef\u3002</p> <p>\u5be6\u4f5c\u4e0a\u5c07 \\(2\\) \u653e\u982d\uff0c\\(3\\) \u653e\u5c3e\uff0c\\(1\\) \u7f6e\u4e2d\uff0c\u5176\u4ed6\u6578\u5b57\u96a8\u4fbf\u653e\uff0c\u5c31\u6a23\u5c31\u5b8c\u6210\u6b64\u984c\u4e86</p>"},{"location":"math/special/mex/#_3","title":"\u8cc7\u6599","text":"<ul> <li>CSDN Blog</li> </ul>"},{"location":"math/special/mode/","title":"\u7d55\u5c0d\u773e\u6578","text":""},{"location":"math/special/mode/#majority-voting","title":"Majority Voting","text":"LeetCode 169. Majority Element <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217\uff0c\u8f38\u51fa\u51fa\u73fe\u8d85\u904e \\(\\lfloor n/2\\rfloor\\) \u6b21\u7684\u6578\u5b57</p> <p>\\(n\\le 5\\times 10^4\\)</p> code <pre><code>class Solution {\npublic:\n    int majorityElement(vector&lt;int&gt;&amp; nums) {\n        int v = -1, c = 0;\n        for(int x : nums) {\n            if (v == -1 &amp;&amp; c == 0) {\n                v = x;\n                c = 1;\n                continue;\n            }\n\n            if (v != x) {\n                c--;\n                if (c == 0) v = -1;\n            } else {\n                c++;\n            }\n        }\n\n        c = 0;\n        for(int x : nums) {\n            if (x == v) c++;\n        }\n\n        int n = nums.size();\n        if (c &gt; (n / 2)) return v;\n        else return -1;\n    }\n};\n</code></pre> <p>\\(x,y\\) \u6253\u67b6\uff0c\u5206\u5169\u7a2e case :</p> <ul> <li> <p>\\(x,y\\) \u4e0d\u540c \\(\\Rightarrow x,y\\) \u5404\u6e1b\u5c11\u4e00\u500b</p> </li> <li> <p>otherwise \\(\\Rightarrow\\) \u90fd\u4fdd\u7559</p> </li> </ul> \u53ef\u5426\u518d\u7dda\u6bb5\u6a39\u4e0a\u5be6\u73fe ? <p>\u53c3\u8003\u6b64\u8655</p>"},{"location":"math/special/mode/#1k","title":"1/k","text":"LeetCode 229. Majority Element II <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217\uff0c\u8f38\u51fa\u6240\u6709\u51fa\u73fe\u8d85\u904e \\(\\lfloor n/3\\rfloor\\) \u6b21\u7684\u6578\u5b57</p> <p>\\(n\\le 5\\times 10^4\\)</p> \u601d\u8def <p>\\(x,y,z\\) \u6253\u67b6\uff0c\u5206\u5169\u7a2e case :</p> <ul> <li> <p>\\(x,y,z\\) \u90fd\u4e0d\u540c \\(\\Rightarrow x,y,z\\) \u5404\u6e1b\u5c11\u4e00\u500b</p> </li> <li> <p>otherwise \\(\\Rightarrow\\) \u90fd\u4fdd\u7559</p> </li> </ul> \u53e6\u89e3 <p>nth_element \u627e rank n/3, 2n/3, 3n/3\uff0c\u7136\u5f8c\u6aa2\u67e5\u9019\u4e9b\u4f4d\u7f6e\u7684\u6578\u5b57\u51fa\u73fe\u6b21\u6578\u662f\u5426 &gt;= [n / 3]</p> <p>\u56e0\u70ba\u5982\u679c\u4e00\u500b\u6578\u5b57\u51fa\u73fe\u8d85\u904e n/3 \u7684\u8a71\u90a3\u4e00\u5b9a\u81f3\u5c11\u78b0\u5230 n/3, 2n/3, 3n/3 \u5176\u4e2d\u4e00\u500b</p> <pre><code>------O------O------O\n</code></pre> code <pre><code>class Solution {\npublic:\nconst int INF = 1e9 + 7;\n    vector&lt;int&gt; majorityElement(vector&lt;int&gt;&amp; nums) {\n        int v1 = -INF, c1 = 0;\n        int v2 = -INF, c2 = 0;\n\n        for (int x : nums) {\n            if (c1 &gt; 0 &amp;&amp; x == v1) {\n                c1++;\n                continue;\n            }\n            if (c2 &gt; 0 &amp;&amp; x == v2) {\n                c2++;\n                continue;\n            }\n\n            if (c1 == 0) {\n                v1 = x;\n                c1 = 1;\n            } else if (c2 == 0) {\n                v2 = x;\n                c2 = 1;\n            } else {\n                c1--;\n                if (c1==0) v1 = -INF;\n                c2--;\n                if (c2==0) v2 = -INF;\n            }\n        }\n        c1 = 0, c2 = 0;\n        for (int x : nums) {\n            if (x == v1) c1++;\n            if (x == v2) c2++;\n        }\n        vector&lt;int&gt; ans;\n        int n = nums.size();\n        if (c1 &gt; n/3) ans.push_back(v1);\n        if (c2 &gt; n/3) ans.push_back(v2);\n        return ans;\n    }\n};\n</code></pre> \u6b63\u78ba\u6027\u8b49\u660e <p>\u5982\u679c\u6709\u4e00\u500b\u6771\u897f\u51fa\u73fe\u8d85\u904e \\(\\lfloor n/3\\rfloor\\)\uff0c\u90a3\u4ed6\u4e0d\u53ef\u80fd\u5168\u90e8\u90fd\u88ab\u4e1f\u6389\uff0c\u56e0\u70ba\u7576\u4e14\u50c5\u7576 \\(x,y,z\\) \u53ea\u6709\u5728\u90fd\u4e0d\u4e00\u6a23\u7684\u6642\u5019\u624d\u6703\u88ab\u4e1f\u6389</p>"},{"location":"math/special/mode/#_1","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://abc864197532.github.io/2021/02/07/tioj-2140/</p> </li> <li> <p>https://codeforces.com/blog/entry/89880</p> </li> <li> <p>https://zh.wikipedia.org/zh-tw/\u591a\u6570\u6295\u7968\u7b97\u6cd5</p> </li> </ul>"},{"location":"offline/DC/","title":"\u57fa\u790e\u6280\u5de7","text":""},{"location":"offline/DC/#_1","title":"\u9006\u5e8f\u6578\u5c0d","text":"TIOJ 1080 \u9006\u5e8f\u6578\u5c0d <p>\u7d66\u5b9a\u4e00\u500b\u5e8f\u5217 \\(A=(a_1, a_2, \\ldots, a_n)\\)\u3002\u6211\u5011\u8aaa\u4e00\u500b\u9006\u5e8f\u6578\u5c0d\u662f \\(i &lt; j\\) \u4e14 \\(a_i &gt; a_j\\)\uff0c\u7b97\u51fa\u9019\u500b\u5e8f\u5217\u6709\u5e7e\u500b\u9006\u6558\u6578\u5c0d</p>"},{"location":"offline/DC/#1-","title":"\u89e3\u6cd5 1 - \u5206\u6cbb","text":"<ul> <li>merge sort</li> </ul>"},{"location":"offline/DC/#2-","title":"\u89e3\u6cd5 2 - \u503c\u57df\u5206\u6cbb","text":"<ul> <li> <p>\u5047\u8a2d\u4e2d\u4f4d\u6578<sup>1</sup>\u70ba \\(\\text{mid}\\)</p> </li> <li> <p>\u6e96\u5099\u4e00\u500b\u65b0\u7684\u9663\u5217 \\(b\\)\uff0c\\(a\\) \u9663\u5217\u4e2d\u5927\u65bc \\(\\text{mid}\\) \u7684\u8a2d\u70ba \\(1\\)\uff0c\u5176\u4ed6\u8a2d\u70ba \\(0\\)</p> </li> <li> <p>\u5c0d\u65bc \\(b\\) \u5167\u7684\u6bcf\u500b \\(0\\)\uff0c\u8a08\u7b97\u8a08\u7b97\u524d\u65b9\u6709\u5e7e\u500b \\(1\\)</p> </li> </ul> \\[\\begin{array}{|c|c|c|c|c|c|c|c|c|} \\hline a &amp; 6 &amp; 3 &amp; 1 &amp; 7 &amp; 5 &amp; 8 &amp; 2 &amp; 4 \\\\\\\\ \\hline b &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\\\\\\\ \\hline \\end{array}\\] <ul> <li>\u8907\u96dc\u5ea6 : \\(O(n\\log n)\\) </li> </ul> <p>\u8f38\u5165\u6709\u5f88\u591a\u76f8\u540c\u7684\u6578\u5b57\u6642\uff0c\u6309\u7167\u6578\u503c\u505a\u5206\u6cbb\u6cd5\u6703\u4e0d\u6703\u6709\u4ec0\u9ebc\u554f\u984c ?</p> <p>\u56e0\u70ba\u662f\u4e2d\u4f4d\u6578\uff0c\u6bcf\u6b21\u6578\u5b57\u7a2e\u985e\u6703\u6e1b\u5c11\u4e00\u534a\uff0c\u905e\u8ff4\u5230\u53ea\u5269\u4e00\u7a2e\u6578\u5b57\u5373\u53ef\u505c\u6b62\uff0c\u6240\u4ee5\u5176\u5be6\u6c92\u6709\u5f71\u97ff</p> <p>\u6ce8\u610f\u5982\u679c \\(\\begin{align}\\text{mid} = \\frac{l+r}{2}\\end{align}\\) \u6578\u503c\u5206\u5e03\u4e0d\u6703\u5747\u8861</p>"},{"location":"offline/DC/#3-","title":"\u89e3\u6cd5 3 - \u8cc7\u6599\u7d50\u69cb","text":"<ul> <li>BIT</li> </ul>"},{"location":"offline/DC/#4-","title":"\u89e3\u6cd5 4 - \u6383\u63cf\u7dda","text":"<ul> <li>\u628a\u8f38\u5165\u60f3\u6210 \\(n\\) \u500b\u5e73\u9762\u4e0a\u7684\u9ede,\u7b2c \\(i\\) \u500b\u9ede\u5ea7\u6a19\u70ba \\((i, a_i)\\)</li> <li>\u9006\u5e8f\u6578\u5c0d\u500b\u6578\u5373\u70ba : \u6bcf\u500b\u9ede\u7684\u53f3\u4e0b\u89d2\u9ede\u6578\u7e3d\u548c</li> </ul>"},{"location":"offline/DC/#implace-merge","title":"Implace Merge","text":"<p>\u5c07\u4e00\u500b\u9663\u5217\u4e2d\u7684\u5169\u500b\u6709\u5e8f\u6578\u5217\u5340\u9593 [l, mid), [mid, r) \u5408\u4f75\u6210\u4e00\u500b\u6709\u5e8f\u6578\u5217</p>"},{"location":"offline/DC/#karasuba","title":"Karasuba","text":"<ol> <li> <p>\u627e\u4e2d\u4f4d\u6578\u7528 <code>nth_element</code> \u51fd\u5f0f\u00a0\u21a9</p> </li> </ol>"},{"location":"offline/cdq/","title":"CDQ \u5206\u6cbb","text":""},{"location":"offline/cdq/#_1","title":"\u6a21\u677f","text":"<p>\u6309\u7167\u503c\u57df\u9032\u884c\u5206\u6cbb\uff0c\u4e26\u975e index</p>"},{"location":"offline/cdq/#_2","title":"\u975e\u56b4\u683c","text":"\u6d1b\u8c37 P3810 \u4e09\u7ef4\u504f\u5e8f <p>\u7d66 \\(n\\) \u500b\u4e09\u7dad\u7a7a\u9593\u7684\u9ede \\((x,y,z)\\)\uff0c\u554f\u5c0d\u65bc\u7b2c \\(i\\) \u500b\u9ede\uff0c\u6709\u5e7e\u500b \\(j\\) \u6eff\u8db3 \\(x_j\\ge x_i,y_j\\ge y_i,z_j\\ge z_i\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define lowbit(x) (x &amp; (-x))\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, C;\nint ans[maxn];\n\nstruct triple {\n    int a, b, c, cnt, res;\n\n    bool operator== (triple &amp;other) {\n        if (a == other.a &amp;&amp; b == other.b &amp;&amp; c == other.c)\n            return true;\n        return false;\n    }\n} a[maxn];\n\nint cmpA (triple A, triple B) {\n    if (A.a != B.a) return A.a &lt; B.a;\n    if (A.b != B.b) return A.b &lt; B.b;\n    return A.c &lt; B.c;\n}\n\nint cmpB (triple A, triple B) {\n    if (A.b != B.b) return A.b &lt; B.b;\n    return A.c &lt; B.c;\n}\n\nstruct BIT {\n    int n;\n    vector&lt;int&gt; bit;\n\n    void init (int _n) {\n        n = _n;\n        bit.resize (n + 1);\n    }\n\n    void add (int x, int d) {\n        while (x &lt;= n) {\n            bit[x] += d;\n            x += lowbit (x);\n        }\n    }\n\n    int query (int x) {\n        int ret = 0;\n        while (x &gt; 0) {\n            ret += bit[x];\n            x -= lowbit (x);\n        }\n        return ret;\n    }\n} bit;\n\nvoid CDQ (int l, int r) {\n    if (l == r) return;\n\n    int mid = (l + r) / 2;\n    CDQ (l, mid), CDQ (mid + 1, r);\n\n    sort (a + l, a + mid + 1, cmpB);\n    sort (a + mid + 1, a + r + 1, cmpB);\n\n    int i = l, j = mid + 1;\n    while (j &lt;= r) {\n        while (i &lt;= mid &amp;&amp; a[i].b &lt;= a[j].b) {\n            bit.add (a[i].c, a[i].cnt);\n            i++;\n        }\n        a[j].res += bit.query (a[j].c);\n        j++;\n    }   \n\n    // undo\n    for (int k = l; k &lt; i; k++) {\n        bit.add (a[k].c, -a[k].cnt);\n    }\n    return;\n}\n\nvoid solve () {\n    cin &gt;&gt; n &gt;&gt; C;\n\n    vector&lt;triple&gt; tmp (n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; tmp[i].a &gt;&gt; tmp[i].b &gt;&gt; tmp[i].c;\n    }\n    sort (ALL (tmp), cmpA);\n\n    int m = 0, cnt = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (i &amp;&amp; tmp[i] == tmp[i - 1]) {\n            a[m].cnt++;\n        }\n        else {\n            m++;\n            a[m].a = tmp[i].a;\n            a[m].b = tmp[i].b;\n            a[m].c = tmp[i].c;\n            a[m].cnt = 1;\n        } \n    }\n    bit.init (C);\n\n\n    CDQ (1, m);\n    for (int i = 1; i &lt;= m; i++) ans[a[i].res + a[i].cnt - 1] += a[i].cnt;\n\n    for (int i = 0; i &lt; n; i++) cout &lt;&lt; ans[i] &lt;&lt; \"\\n\"; \n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n} \n</code></pre>"},{"location":"offline/cdq/#_3","title":"\u56b4\u683c","text":"Zerojudge c571.\u4e09\u7dad\u504f\u5e8f <p>\u7d66 \\(n\\) \u500b\u4e09\u7dad\u7a7a\u9593\u7684\u9ede \\((x,y,z)\\)\uff0c\u554f\u5c0d\u65bc\u7b2c \\(i\\) \u500b\u9ede\uff0c\u6709\u5e7e\u500b \\(j\\) \u6eff\u8db3 \\(x_j&gt;x_i,y_j&gt;y_i,z_j&gt;z_i\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n#define lowbit(x) (x &amp; (-x))\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct triple {\n    int x, y, z, id;\n};\n\nstruct BIT {\n    int n;\n    vector&lt;int&gt; bit;\n\n    void init (int _n) {\n        n = _n;\n        bit.resize (n + 1);\n    }\n\n    void add (int x, int d) {\n        x++;\n        while (x &gt; 0) {\n            bit[x] += d;\n            x -= lowbit (x);\n        }\n    }\n\n    int query (int x) {\n        x++;\n        int ret = 0;\n        while (x &lt;= n) {\n            ret += bit[x];\n            x += lowbit (x);\n        }\n        return ret;\n    }\n}bit;\n\nbool cmpX (triple &amp;A, triple &amp;B) {\n    if (A.x != B.x) return A.x &lt; B.x;\n    if (A.y != B.y) return A.y &gt; B.y;\n    return A.z &gt; B.z;\n}\n\nbool cmpY (triple &amp;A, triple &amp;B) {\n    if (A.y != B.y) return A.y &gt; B.y;\n    return A.z &gt; B.z;\n}\n\nint n;\nint ans[maxn];\n\nvoid solve (int l, int r, vector&lt;triple&gt; &amp;a) {\n    int mid = (l + r) / 2;\n    if (l == r) return;\n\n\n    vector&lt;triple&gt; aLeft, aRight;\n    for (auto [x, y ,z, id] : a) {\n        if (x &lt;= mid) aLeft.pb ({x, y, z, id});\n        else aRight.pb ({x, y, z, id});\n    }\n    solve (l, mid, aLeft); solve (mid + 1, r, aRight);\n\n    sort (ALL (aLeft), cmpY); sort (ALL (aRight), cmpY);\n\n    int i = 0, j = 0;\n    while (i &lt; aLeft.size ()) {\n        while (j &lt; aRight.size () &amp;&amp; aRight[j].y &gt; aLeft[i].y) {\n            bit.add (aRight[j].z, 1);\n            j++;\n        }\n        ans[aLeft[i].id] += bit.query (aLeft[i].z + 1);\n        i++;\n    }\n\n    for (int k = 0; k &lt; j; k++) {\n        bit.add (aRight[k].z, -1);\n    }\n}\n\nvector&lt;triple&gt; a;\n\nvoid init () {\n    cin &gt;&gt; n;\n    a.resize (n);\n\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i].x &gt;&gt; a[i].y &gt;&gt; a[i].z;\n        a[i].id = i;\n        a[i].x--, a[i].y--, a[i].z--;\n    }\n}\n\nvoid work () {\n    sort (ALL (a), cmpX);\n\n    bit.init (n);\n    solve (0, n - 1, a);\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n    }\n} \n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n} \n</code></pre>"},{"location":"offline/cdq/#_4","title":"\u4f8b\u984c","text":""},{"location":"offline/cdq/#_5","title":"\u77e9\u5f62\u52a0\u77e9\u5f62\u6c42\u548c","text":"CSES Forest Queries II <p>\u5728\u4e8c\u7dad\u5e73\u9762\u4e0a\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c</p> <ul> <li> <p>\u652f\u6301\u5728\u4e00\u500b\u77e9\u5f62\u5340\u57df\u5167\u52a0\u4e00\u500b\u6578\u5b57</p> </li> <li> <p>\u6bcf\u6b21\u8a62\u554f\u4e00\u500b\u77e9\u5f62\u5340\u57df\u7684\u548c</p> </li> </ul> \u601d\u8def <p>\u300c\u8a62\u554f\u4e00\u500b\u77e9\u5f62\u5340\u57df\u7684\u548c\u300d\u53ef\u4ee5\u770b\u505a\u662f\u56db\u500b\u8a62\u554f \\((x_i,y_i)\\) \u7684\u6578\u503c\u7e3d\u548c</p> \\[\\small ans=sum(x_2,y_2)-sum(x_1-1,y_2)-sum(x_2,y_1-1)+sum(x_1-1,x_2-1)\\] <p>\u90a3\u8981\u600e\u9ebc\u7dad\u8b77\u64cd\u4f5c\u5148\u5f8c\u9806\u5e8f\u5462 ? \u6211\u5011\u53ef\u4ee5\u591a\u52a0\u4e00\u70ba \\(z\\) \u8868\u793a\u6b64\u64cd\u4f5c\u7684\u6642\u9593\u6233\u8a18\uff0c\u554f\u984c\u5c31\u8b8a\u6210</p> <p>\u7d66\u5b9a\u4e00\u500b \\((x_i,y_i,z_i)\\) \u8a62\u554f \\(\\begin{cases}x_j \\le x_i \\\\ y_j \\le y_i \\\\ z_j \\le z_i \\end{cases}\\) \u7684\u6b0a\u503c\u7e3d\u548c</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;cassert&gt;\n#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define lowbit(x) (x &amp; (-x))\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int maxn = 3e5 + 5;\n\nint n, q;\nint ans[maxn], op[maxn];\nint g[1005][1005], pre[1005][1005];\n\nstruct triple {\n    int a, b, c, cnt, x, id;\n    // (z, x, y), cnt, multiply, org qry idx\n};\n\nvector&lt;triple&gt; a;\nint t = 0;\n\nvoid add_event(int i, int j, int cnt, int x, int id) {\n    if (i &lt;= 0) return;\n    if (j &lt;= 0) return;\n    a.pb({t++, i, j, cnt, x, id});\n}\n\nint cmpA(const triple &amp;A, const triple &amp;B) {\n    if (A.a != B.a) return A.a &lt; B.a;\n    if (A.b != B.b) return A.b &lt; B.b;\n    return A.c &lt; B.c;\n}\n\nint cmpB(const triple &amp;A, const triple &amp;B) {\n    if (A.b != B.b) return A.b &lt; B.b;\n    return A.c &lt; B.c;\n}\n\nstruct BIT {\n    vector&lt;int&gt; bit;\n    int n;\n\n    void init(int _n) {\n        n = _n;\n        bit.resize(n + 1);\n    }\n\n    void add(int x, int d) {\n        assert(x != 0);\n        while (x &lt;= n) {\n            bit[x] += d;\n            x += lowbit(x);\n        }\n    }\n\n    int query(int x) {\n        int ret = 0;\n        while (x &gt; 0) {\n            ret += bit[x];\n            x -= lowbit(x);\n        }\n        return ret;\n    }\n} bit;\n\nvoid CDQ(int l, int r) {\n    if (l == r) return;\n    // cout &lt;&lt; l &lt;&lt; ' ' &lt;&lt; r &lt;&lt; endl;\n\n    int mid = (l + r) / 2;\n    CDQ(l, mid);\n    CDQ(mid + 1, r);\n    // sort(a.begin() + l, a.begin() + mid + 1, cmpB);\n    // sort(a.begin() + mid + 1, a.begin() + r + 1, cmpB);\n\n    int i = l;\n    for (int j = mid + 1; j &lt;= r; j++) {\n        while (i &lt;= mid &amp;&amp; a[i].b &lt;= a[j].b) {\n            bit.add(a[i].c, a[i].cnt);\n            i++;\n        }\n\n        ans[a[j].id] += a[j].x * bit.query(a[j].c);\n    }\n\n    for (int k = l; k &lt; i; k++) {\n        bit.add(a[k].c, -a[k].cnt);\n    }\n\n    inplace_merge(a.begin() + l, a.begin() + mid + 1, a.begin() + r + 1, cmpB);\n}\n\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; q;\n\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            char c;\n            cin &gt;&gt; c;\n            if (c == '*') {\n                g[i][j] = 1;\n                pre[i][j]++;\n            }\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            pre[i][j] =\n                pre[i][j] + pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1];\n            // cout &lt;&lt; \"i:\" &lt;&lt; i &lt;&lt; \",j:\" &lt;&lt; j &lt;&lt; \",pre:\" &lt;&lt; pre[i][j] &lt;&lt; \"\\n\";\n        }\n    }\n\n    for (int cs = 1; cs &lt;= q; cs++) {\n        cin &gt;&gt; op[cs];\n        if (op[cs] == 1) {\n            int i, j;\n            cin &gt;&gt; i &gt;&gt; j;\n\n            if (g[i][j] == 1) {\n                add_event(i, j, -1, 0, 0);\n                g[i][j] = 0;\n            } else {\n                add_event(i, j, +1, 0, 0);\n                g[i][j] = 1;\n            }\n        } else {\n            int i1, i2, j1, j2;\n            cin &gt;&gt; i1 &gt;&gt; j1 &gt;&gt; i2 &gt;&gt; j2;\n            i1--, j1--;\n            add_event(i2, j2, 0, +1, cs);\n            add_event(i1, j2, 0, -1, cs);\n            add_event(i2, j1, 0, -1, cs);\n            add_event(i1, j1, 0, +1, cs);\n            ans[cs] += pre[i2][j2] - pre[i1][j2] - pre[i2][j1] + pre[i1][j1];\n        }\n    }\n\n    sort(ALL(a), cmpA);\n\n    bit.init(1024);\n    CDQ(0, (int)a.size() - 1);\n\n    for (int i = 1; i &lt;= q; i++) {\n        if (op[i] == 1) continue;\n\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    solve();\n}\n</code></pre> <ul> <li>\u985e\u4f3c\u984c : APIO 2019 \u8def\u71c8</li> </ul>"},{"location":"offline/cdq/#npsc","title":"NPSC \u5fd9\u788c\u7684\u570b\u5ea6","text":"NPSC 2019 \u9ad8\u4e2d\u7d44 pB. \u5fd9\u788c\u7684\u570b\u5ea6 <p>\u6709 \\(n\\) \u9593\u516c\u53f8\u548c \\(m\\) \u9593\u9910\u5ef3\uff0c\u6bcf\u500b\u54e1\u5de5\u6709\u4f4d\u7f6e \\((x_i,y_i)\\) \u548c\u4e0b\u73ed\u6642\u9593 \\(t_i\\)\uff0c\u6bcf\u9593\u9910\u5ef3\u6709\u4f4d\u7f6e \\((p_i,q_i)\\)\uff0c\u95dc\u9589\u6642\u9593 \\(c_i\\) \u548c\u7f8e\u5473\u7a0b\u5ea6 \\(v_i\\)</p> <p>\u7b2c \\(i\\) \u500b\u4eba\u53ef\u4ee5\u5403\u5230\u7b2c \\(j\\) \u500b\u9910\u5ef3\u5fc5\u9808\u6eff\u8db3</p> \\[ t_i + |p_j \u2212 x_i| + |q_j \u2212 y_i| \\le c_j\\] <p>\u554f\u5c0d\u6bcf\u500b\u54e1\u5de5\u80fd\u5403\u5230\u7684\u9910\u5ef3(\u6700\u591a\u4e00\u9593)\u7684\u6700\u5927\u7f8e\u5473\u7a0b\u5ea6</p> \u601d\u8def <p>\u5047\u8a2d \\(\\begin{cases} p_j \\le x_i \\\\ q_j \\le y_i \\end{cases}\\) \u90a3\u6211\u5011\u53ef\u5c07\u5f0f\u5b50\u62c6\u6210</p> \\[\\begin{align}&amp; t_i + (x_i - p_j) + (y_i \u2212 q_i) \\le c_j \\\\ \\Rightarrow\\space &amp; t_i + x_i  + y_i \\le p_j + q_j + c_j\\end{align}\\] <p>\u5169\u9ede\u5373\u8b8a\u6210 \\((x,y,z)=\\begin{cases}(x_i, \\space y_i,\\space  t_i + x_i  + y_i) \\\\ (p_j,\\space q_j,\\space  p_j + q_j + c_j) \\end{cases}\\)</p> <p>\u554f\u984c\u5c31\u8b8a\u6210\u7d66 \\((x_i,y_i,z_i)\\) \u554f </p> \\[\\large \\max\\limits_{x_j \\space \\le  \\space x_i \\space \\wedge\\space  y_j \\space \\le \\space y_i \\space \\wedge \\space z_j \\space \\ge \\space z_i} \\{v_j \\}\\] <p>\u53e6\u5916 3 \u7a2e\u5927\u5c0f\u95dc\u897f\u4e5f\u540c\u7406</p>"},{"location":"offline/cdq/#_6","title":"\u5168\u570b\u8cfd \u767e\u842c\u522e\u522e\u6a02","text":"2022 \u5168\u570b\u8cfd pF. \u767e\u842c\u522e\u522e\u6a02 <p>\u7d66\u5b9a \\((a_i,b_i,c_i)\\) \u8207 \\(w_i\\) \u554f\u5c0d\u65bc\u6240\u6709\u76f8\u7570\u4e14\u7b26\u5408\u4ee5\u4e0b\u689d\u4ef6\u7684 \\(i,j\\)\uff0c \\(w_i+w_j\\) \u53ef\u80fd\u662f\u591a\u5c11</p> \\[\\begin{cases}w_i+w_j\\le a_i + a_j \\\\ w_i+w_j\\le b_i + b_j \\\\ w_i + w_j \\le c_i+c_j\\end{cases}\\] <p><li>\\(1\\le n \\le 2\\times 10^5\\) <li>\\(0\\le a_i,b_i,c_i \\le 6\\times 10^6\\) <li>\\(w_i \\in \\{10^6,2\\times 10^6, 3\\times 10^6\\}\\) \u601d\u8def <p>\u6cd5 1 : CDQ \u5206\u6cbb</p> \\[\\begin{cases}w_j - a_j\\le -w_i + a_i \\\\ w_j - b_j\\le -w_i + b_i \\\\ w_j - c_j \\le -w_i + c_i\\end{cases} \\Rightarrow \\begin{cases}x_j\\le -x_i \\\\ y_j \\le -y_i \\\\ z_j \\le -z_i \\end{cases}\\] <p>\u6240\u4ee5\u5c0d\u65bc\u7b26\u5408 \\(\\begin{cases}x_j\\le -x_i \\\\ y_j \\le -y_i \\\\ z_j \\le -z_i \\end{cases}\\) \u7684\u9019\u4e9b \\(j\\) \u6211\u5011\u53ef\u4ee5\u53bb\u770b </p> <p>\u8a18\u5f97\u8981\u7279\u5224 \\(w_i=w_j\\) \u7684 case\uff0c\u53ef\u4ee5\u9810\u5148\u5728 ans[i] \u88e1\u6d88\u9664\u5176\u8ca2\u737b</p> <p>\u6642\u9593\u8907\u96dc\u5ea6 : \\(O(n\\log^2 n)\\)</p> <p>\u6cd5 2 : \u7dda\u6bb5\u6a39\u7dad\u8b77</p> <p>\u53e6\u4e00\u7a2e\u65b9\u6cd5\u4e5f\u5dee\u4e0d\u591a\uff0c\u6211\u5011\u5148\u5206\u5225\u679a\u8209\u597d \\(w_i,w_j\\) \u7684\u503c</p> <p>\u554f\u984c\u5c31\u8b8a\u6210\u627e\u5c0d\u65bc\u6bcf\u500b \\(i\\) \u6709\u6c92\u6709 \\(j\\) \u7b26\u5408 \\(\\begin{cases}x_j\\le -x_i \\\\ y_j \\le -y_i \\\\ z_j \\le -z_i \\end{cases}\\) \u7684\u5c31\u597d</p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u76f4\u63a5\u5c07\u7528\u6383\u63cf\u7dda\u5f9e\u5de6\u5230\u53f3\u6383\uff0c\u7136\u5f8c\u5c0d\u65bc \\((-x_i,-y_i,-z_i)\\) \u8981\u53bb </p> \\[\\texttt{query_min} (-y_i)\\] <p>\u5c31\u662f\u770b\u4e4b\u524d \\(y_j \\le -y_i\\) \u7684\u6700\u5c0f \\(z_j\\) \u6709\u5e7e\u500b</p> <p>\\(w_i=w_j\\) \u6642\u4e5f\u9700\u9810\u5148\u6263\u6389\u81ea\u5df1\u7684\u8ca2\u737b</p> <p> </p> <p>\u6642\u9593\u8907\u96dc\u5ea6 : \\(O(n\\log n)\\)</p> <p>\u6cd5 3 : BIT</p> <p>\u5c07\u9019\u4e9b tuple \u4ee5 \\(w_i\\) \u5206\u6210 \\(S_1,S_2,S_3\\) \u4e09\u7d44\uff0c\u4e26\u5728\u6bcf\u7d44\u88e1\u9762\u4f9d\u7167 \\(a_i\\) \u5c0f\u5230\u5927 sort\u3002</p> <p>\u5c0d\u65bc\u5169\u7d44 \\(S_p\\) \u8207 \\(S_q\\) \u505a\u4ee5\u4e0b\u7684\u4e8b\u60c5 :</p> <ul> <li> <p>\u4ee4 \\(T=w_p+w_q\\)</p> </li> <li> <p>\u958b\u4e00\u500b data structure D</p> </li> <li> <p>for each \\((a,b,c)\\) in \\(S_p\\) :</p> <ul> <li>\u5c07 \\(S_q\\) \u88e1\u9762\u7b26\u5408 \\(x+a\\ge T\\) \u7684 tuple \u7684 \\((y,z)\\) insert \u9032\u53bb D\uff08\u5177\u6709\u55ae\u8abf\u6027\uff09</li> <li>\u5982\u679c D \u88e1\u9762\u6709 pair \u7b26\u5408 \\((\\ge T - b, \\ge T - c)\\) \u90a3\u5c31 return true</li> </ul> </li> <li> <p>\u5176\u4e2d D \u53ef\u4ee5\u7528\u503c\u57df BIT \u7dad\u8b77\uff0cindex \u7dad\u8b77 pair \u7684 \\(x\\)\uff0cvalue \u7dad\u8b77 pair \u7684 \\(y\\)\uff0c\u6bcf\u6b21\u8981\u53bb query \u7684\u6642\u5019\u53ea\u8981\u67e5\u8a62\u4e00\u500b\u5f8c\u7db4\u7684\u6700\u5927\u503c\u5373\u53ef!</p> </li> </ul>"},{"location":"offline/cdq/#tioj-2030","title":"TIOJ 2030","text":"TIOJ 2030.\u76e9\u50f0\u9e8c\u904e\u8857 \u4eba\u4eba\u558a\u6253 <p>\u7d66\u4f60\u9577\u5ea6\u70ba \\(N\\) \u7684\u5e8f\u5217 \\(a_1\\sim a_N\\)\uff0c\u8acb\u652f\u63f4 \\(Q\\) \u6b21\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p>\\(1\\space p\\space v:\\) \u628a \\(a_p\\) \u6539\u6210 \\(v\\)</p> </li> <li> <p>\\(2\\space L\\space R\\space V:\\) \u8a2d\u7f6e\u4e00\u9053\u96f7\u5c04\u5149\u5728 \\([L,R]\\)\uff0c\u5f37\u5ea6\u70ba \\(V\\)\uff0c\u4fdd\u8b49\u4e4b\u524d\u6c92\u6709\u5de6\u754c\u5728 \\(L\\) \u7684\u96f7\u5c04\u5149</p> </li> <li> <p>\\(3\\space L:\\) \u79fb\u9664\u5de6\u754c\u5728 \\(L\\) \u7684\u96f7\u5c04\u5149\uff0c\u4fdd\u8b49\u4e4b\u524d\u6709\u4e00\u500b\u5de6\u754c\u5728 \\(L\\) \u7684\u96f7\u5c04\u5149</p> </li> <li> <p>\\(4\\space L\\space R:\\) \u8a08\u7b97 \\([L,R]\\) \u4e4b\u9593\u7684\u4e0d\u91cd\u8907\u6578\u5b57\uff0c\u4ee5\u53ca \\([L,R]\\) \u4e4b\u9593\u6240\u6709\u88ab\u5b8c\u5168\u8986\u84cb\u5728\u5167\u7684\u96f7\u5c04\u5149\u5f37\u5ea6\u7e3d\u548c</p> </li> </ul> <p>\\(N,Q\\le 10^5\\)</p> \u601d\u8def <p>\\((L_j,R_j,t_j)\\)</p> <p>\u66f4\u6539\u60f3\u6210\u5169\u500b\u6b65\u9a5f\uff0c\u6d88\u9664 \\(a_p\\) \u7684\u8ca2\u737b\uff0c\u52a0\u5165 \\(v\\) \u7684\u8ca2\u737b</p> <p>\\(-a_p\\) :</p> <p>\u5b58 \\((idx,nxt,t_i),-1:\\) </p> <p>index, \u5728\u4e4b\u524d \\(a_p\\) \u51fa\u73fe\u7684\u90a3\u500b\u6642\u523b\u4e0b\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e, \u73fe\u5728\u7684\u6642\u9593\u6233\u8a18 </p> \\[\\begin{cases}L_j \\le idx\\\\ idx \\le R_j \\\\ t_i &lt; t_j \\\\ nxt &gt; R_j \\end{cases}\\] <p>\u6539\u6210 \\(v:\\)</p> <p>\u5b58 \\((idx,nxt,t_i),+1:\\) </p> <p>index, \u5728\u73fe\u5728 \\(v\\) \u4e0b\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e, \u73fe\u5728\u7684\u6642\u9593\u6233\u8a18 </p> \\[\\begin{cases}L_j \\le idx\\\\ idx \\le R_j \\\\ t_i &lt; t_j \\\\ nxt &gt; R_j \\end{cases}\\] <p> </p> <p>\\(+(L_i, R_i, t_i),+V:\\) \u52a0\u5165\u7684\u6642\u523b</p> <p>\\(-(L_i, R_i, t_i),-V:\\) \u52a0\u5165\u7684\u6642\u523b</p> \\[\\begin{cases}t_j &gt; t_i\\\\ L_j \\ge L_i \\\\ R_i \\ge R_j\\end{cases}\\] <p> </p>"},{"location":"offline/cdq/#_7","title":"\u6d1b\u8c37 \u52a8\u6001\u9006\u5e8f\u5bf9","text":"\u6d1b\u8c37 P3157 [CQOI2011]\u52a8\u6001\u9006\u5e8f\u5bf9 <p>\u73fe\u5728\u7d66\u51fa \\(1\\sim n\\) \u7684\u4e00\u500b\u6392\u5217\uff0c\u6309\u7167\u67d0\u7a2e\u9806\u5e8f\u4f9d\u6b21\u522a\u9664 \\(m\\) \u500b\u5143\u7d20</p> <p>\u5728\u6bcf\u6b21\u522a\u9664\u4e00\u500b\u5143\u7d20\u4e4b\u524d\u7d71\u8a08\u6574\u500b\u5e8f\u5217\u7684\u9006\u5e8f\u6578\u5c0d\u7684\u500b\u6578</p> <p>\\(n\\le 10^5,m\\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u521d\u59cb\u7684\u9663\u5217\uff0c\u6211\u5011\u7684 tuple \u5c31\u662f \\((i,a_i,t_i=1),+1\\)</p> <p>\u7136\u5f8c\u5148\u7b97\u597d\u9006\u5e8f\u6578\u5c0d\u500b\u6578</p> <p>\u518d\u4f86\u5c0d\u6bcf\u4e00\u6b21\u7684\u522a\u9664\uff0c\u6211\u5011\u5148 query\\((i,a_i,t_i)\\)\uff0c\u7136\u5f8c\u52a0\u5165 tuple \\((i,a_i,t_i),-1\\)</p> <p>\u5c0d\u65bc\u6bcf\u500b query \\((i,a_i,t_i)\\) \u6211\u8981\u7b97\u90a3\u4e9b \\(j\\) \u6eff\u8db3 \\(\\begin{cases}i&lt;j\\\\ a_i &gt; a_j \\\\ t_i \\ge t_j\\end{cases}\\)</p>"},{"location":"offline/cdq/#cf-1093e","title":"CF 1093E","text":"CF 1093 E.Intersection of Permutations <p>\u7d66\u4f60\u5169\u500b\u9663\u5217 \\(a,b\\)\uff0c\u5169\u500b\u9663\u5217\u90fd\u6070\u597d\u5305\u542b \\(1 \\sim n\\) \u7684\u6bcf\u500b\u6578\u5b57</p> <p>\u63a5\u4e0b\u4f86\u6709 m \u6b21\u64cd\u4f5c:</p> <ul> <li> <p>\u8a62\u554f \\(1 \\sim n\\) \u6709\u591a\u5c11\u7a2e\u6578\u5b57\u540c\u6642\u51fa\u73fe\u5728 \\(a\\) \u9663\u5217\u7684\u5340\u9593 \\([l_a, r_a]\\) \u548c \\(b\\) \u9663\u5217\u7684\u5340\u9593 \\([l_b, r_b]\\)</p> </li> <li> <p>\u4ea4\u63db \\(b_x\\) \u548c \\(b_y\\)</p> </li> </ul> <p>\\(1 \\le n, m \\le 2 \\times 10^5\\)</p>"},{"location":"offline/mo-algo/","title":"\u83ab\u968a\u7b97\u6cd5","text":""},{"location":"offline/mo-algo/#_1","title":"\u4ecb\u7d39","text":""},{"location":"offline/mo-algo/#query","title":"\u5c07 query \u6392\u5e8f","text":"<p>\u5206\u6210 sqrt(n) \u500b block</p> <p>\u6bcf\u7b46 Query \u6309\u7167 : </p> <ol> <li> <p>\u5de6\u754c\u6240\u5c6c Block \u5f9e\u5c0f\u6392\u81f3\u5927</p> </li> <li> <p>\u82e5\u5de6\u754c block \u76f8\u540c\uff0c\u5247\u5c07\u53f3\u754c\u5f9e\u5c0f\u6392\u81f3\u5927</p> </li> </ol> code <pre><code>struct Query {\n    int l, r, block_id;\n\n    bool operator&lt;(const Query &amp;rhs) const {\n        if (block_id != rhs.block_id) {\n            return block_id &lt; rhs.block_id;\n        } else {\n            return r &lt; rhs.r;\n        }\n    }\n};\n</code></pre>"},{"location":"offline/mo-algo/#pointer","title":"\u66b4\u529b\u79fb\u52d5 pointer","text":"<p>\u6ce8\u610f\u5148\u64f4\u5927\uff08add\uff09\uff0c\u518d\u7e2e\u5c0f\uff08del\uff09<sup>1</sup></p> code <pre><code>int l = -1, r = 0;\nfor (auto &amp;i : Query) {\n    while (l &gt; i.l) add(--l);\n    while (r &gt; i.r) add(++r);\n    while (l &lt; i.l) del(l++);\n    while (r &gt; i.r) del(r--);\n}\n</code></pre>"},{"location":"offline/mo-algo/#data-structure","title":"\u7dad\u8b77 data structure","text":"<ul> <li> <p>O(1) \u65b0\u589e/\u522a\u9664</p> </li> <li> <p>O(sqrt(n)) \u67e5\u8a62</p> <ul> <li>\u7e3d\u548c</li> <li>x \u51fa\u73fe\u7684\u6b21\u6578</li> <li>mode</li> <li>\u7b2c k \u5c0f</li> </ul> </li> </ul>"},{"location":"offline/mo-algo/#_2","title":"\u8907\u96dc\u5ea6","text":"<ul> <li> <p>left pointer</p> <ul> <li>\u540c\u584a : \u540c\u500b block \u88e1\u9762 l \u6700\u591a\u79fb\u52d5 sqrt(n) \u683c\uff0cO(Q * sqrt(n))</li> <li>\u4e0d\u540c : \u4e0d\u540c block \u4e4b\u9593\u7684\u7e3d\u79fb\u52d5\u8ddd\u96e2\u70ba O(N)</li> </ul> </li> <li> <p>right pointer</p> <ul> <li>\u540c\u584a : \u6bcf\u500b block \u88e1\u9762 r \u6700\u591a\u6703\u79fb\u52d5 N \u683c\uff0c\u5171 sqrt(N) \u500b block\uff0cO(N * sqrt(N))</li> <li>\u4e0d\u540c : \u63db block \u6700\u591a sqrt(N) \u6b21\uff0c\u6bcf\u6b21\u6700\u591a\u79fb\u52d5 N \u683c\uff0cO(N * sqrt(N))</li> </ul> </li> </ul> <p>\u6bcf k \u500b\u7576\u4e00\u500b block :</p> <ul> <li> <p>left: \u540c\u500b block \u6bcf\u6b21\u79fb\u52d5 k\uff0c\u5171 Q \u6b21 \u21d2 O(Q * k)</p> </li> <li> <p>right: N / k \u500b block\uff0c\u6bcf\u500b block O(N) \u21d2 O(N * (N / k))</p> </li> </ul>"},{"location":"offline/mo-algo/#_3","title":"\u984c\u76ee","text":"<p>\u628a\u554f\u984c\u8f49\u63db\u63db\u6210 add, del, query\uff0c\u5176\u4e2d\u8b93 add, del \u5feb\uff0cquery \u6162</p> CF 86 D. Powerful Array <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\u7d66\u4e00\u500b\u5340\u9593 \\([l,r]\\)\uff0c\u5c07\u5340\u9593\u5167\u6bcf\u7a2e\u6578\u5b57\u8207\u5176\u51fa\u73fe\u7684\u6b21\u6578\u5e73\u65b9\u7684\u4e58\u7a4d\u52a0\u7e3d\u5f8c\u8f38\u51fa</li> </ul> <p>\\(n,q\\le 2\\times 10^5,1\\le a_i \\le 10^6\\)</p> \u601d\u8def Zerojudge b417. \u5340\u9593\u773e\u6578 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\\(q\\) \u6b21\u8a62\u554f\u4e00\u500b\u5340\u9593\u7684 :</p> <ul> <li> <p>\u773e\u6578\u51fa\u73fe\u7684\u6b21\u6578</p> </li> <li> <p>\u591a\u5c11\u7a2e\u6578\u5b57\u53ef\u7576\u773e\u6578</p> </li> </ul> <p>\\(n\\le 10^5,q\\le 10^6\\)</p> \u601d\u8def <ul> <li> <p>freq[i] : i \u51fa\u73fe\u6b21\u6578</p> </li> <li> <p>cnt[i] : \u5e7e\u7a2e\u6578\u5b57\u7684\u51fa\u73fe\u6b21\u6578\u70ba i</p> </li> <li> <p>mode : \u773e\u6578\u7684\u51fa\u73fe\u6b21\u6578</p> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define mk make_pair\n#define pb push_back\nusing namespace std;\n\nconst int maxn = 1e5 + 5;\nint cnt[maxn], freq[maxn], a[maxn], mode;\nint n, q;\n\nstruct Query {\n    int l, r, block_id, query_id;\n\n    bool operator&lt;(const Query &amp;rhs) const {\n        if (block_id != rhs.block_id) {\n            return block_id &lt; rhs.block_id;\n        } else {\n            return r &lt; rhs.r;\n        }\n    }\n};\n\nvoid add(int x) {\n    cnt[freq[x]]--;\n    freq[x]++;\n    cnt[freq[x]]++;\n    if (freq[x] &gt; mode) mode = freq[x];\n}\n\nvoid del(int x) {\n    cnt[freq[x]]--;\n    freq[x]--;\n    cnt[freq[x]]++;\n    if (cnt[mode] == 0) mode--;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    vector&lt;Query&gt; query;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    int lb, rb;\n    int k = sqrt(n);\n    for (int i = 0; i &lt; q; i++) {\n        cin &gt;&gt; lb &gt;&gt; rb;\n        lb--, rb--;\n        query.pb({lb, rb, lb / k, i});\n    }\n    sort(query.begin(), query.end());\n\n    int l = 0, r = -1;\n    vector&lt;pii&gt; ans(q);\n    for (int i = 0; i &lt; q; i++) {\n        Query now = query[i];\n\n        while (l &gt; now.l) add(a[--l]);\n        while (r &lt; now.r) add(a[++r]);\n        while (l &lt; now.l) del(a[l++]);\n        while (r &gt; now.r) del(a[r--]);\n\n        ans[now.query_id] = {mode, cnt[mode]};\n    } \n\n    for (auto &amp;p : ans) {\n        cout &lt;&lt; p.first &lt;&lt; \" \" &lt;&lt; p.second &lt;&lt; \"\\n\";\n    }\n}\n</code></pre> LOJ #6285. \u6570\u5217\u5206\u5757\u5165\u95e8 9 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\\(n\\) \u6b21\u8a62\u554f\u4e00\u500b\u5340\u9593\u7684\u6700\u5c0f\u773e\u6578</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u96e2\u6563\u5316\uff0c\u9810\u8655\u7406 dp[i][j] = block(i) ~ block(j) \u7684\u773e\u6578\uff0c\u53ef\u4ee5\u679a\u8209 i \u7136\u5f8c O(n) \u505a\u4e0b\u53bb\uff0c\u6642\u9593\u8907\u96dc\u5ea6 O(n * sqrt(n))\uff0c\u7576\u9810\u5230\u4e00\u500b query(l, r) \u6642\uff0c\u53ef\u4ee5\u5206\u6210 l ~ r \u4e4b\u9593\u7684\u5b8c\u6574 block\uff0c\u8207\u5de6\u53f3\u4e0d\u5b8c\u6574\u7684 block \u4f86\u505a\uff0c\u5b8c\u6574 block \u76f4\u63a5\u67e5\u8868\uff0c\u4e0d\u5b8c\u6574 block \u76f4\u63a5\u66b4\u529b\u8dd1\u5373\u53ef\uff0c\u904e\u7a0b\u4e2d\u8981\u6aa2\u67e5 l r \u4e4b\u9593 x \u51fa\u73fe\u7684\u6b21\u6578\u53ef\u7528 vector[x] \u5b58 x \u51fa\u73fe\u7684 index \u7136\u5f8c\u53bb lower bound\uff0c\u8907\u96dc\u5ea6 O(q * sqrt(n) * log n)</p> <p>\u53c3\u8003 : https://blog.csdn.net/hypHuangYanPing/article/details/81260095</p> LOJ #6762. \u300cTHUPC 2021\u300d\u672c\u8d28\u4e0d\u540c\u9006\u5e8f\u5bf9 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\\(q\\) \u6b21\u8a62\u554f\u4e00\u500b\u5340\u9593\u7684\u9006\u5e8f\u6578\u5c0d\u6578\u91cf</p> <p>\\(n\\le 10^5,m\\le 5\\times 10^5\\)</p>"},{"location":"offline/mo-algo/#_4","title":"\u5176\u4ed6\u7df4\u7fd2","text":"<ul> <li> <p>CSES - Distinct Value Query (\u591a\u7a2e\u4f5c\u6cd5)</p> </li> <li> <p>TIOJ 1699 Problem I \u5bb3\u87f2\u6c7a\u6230\u6642\u523b</p> </li> <li> <p>atcoder ABC 174 F</p> </li> <li> <p>codeforces 86 D</p> </li> </ul>"},{"location":"offline/mo-algo/#_5","title":"\u5e36\u4fee\u6539\u83ab\u968a","text":""},{"location":"offline/mo-algo/#_6","title":"\u4ecb\u7d39","text":"<p>\u628a\u8a62\u554f\u7684\u5340\u9593 [l, r] \u64f4\u5145\u6642\u9593\u9019\u500b\u7dad\u5ea6 \u21d2 (l, r, t)\u3002(l, r, t) \u53ef\u4ee5\u7ffb\u8b6f\u70ba\u300c\u5728\u8a62\u554f [l, r] \u4e4b\u524d\u8981\u5148\u8655\u7406 0~t \u7684\u4fee\u6539\u300d\uff0c\u6392\u5e8f\u8ddf\u666e\u901a\u83ab\u968a\u4e0d\u592a\u4e00\u6a23\uff0c\u662f L_block \u2192 R_block \u2192 t</p> struct code <pre><code>struct Query {\n    int l, r, t, l_block, r_block, qid;\n\n    bool operator&lt;(const Query &amp;rhs) const {\n        if (l_block == rhs.l_block) {\n            if (r_block == rhs.r_block) {\n                return t &lt; rhs.t;\n            } else {\n                return r_block &lt; rhs.r_block;\n            }\n        } \n        return l_block &lt; rhs.l_block;\n    }\n};\n</code></pre> \u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n^{\\frac{5}{3}})\\) <p>\u76f8\u7576\u65bc \\(n \\times n\\times n\\) \u7684\u4e09\u7dad\u7a7a\u9593\uff0c\u653e \\(n\\) \u500b\u9ede\uff0c\u627e\u4e00\u500b\u8def\u5f91\u7d93\u904e\u6240\u6709\u9ede\u79fb\u52d5\u8ddd\u96e2\u6700\u5c0f\u503c\u6700\u5dee\u662f\u591a\u5c11\u5462\uff1f</p> <p>\u4e00\u500b\u7dad\u5ea6\u653e \\(n^{1/3}\\) \u500b\uff0c\u6bcf\u500b\u7dad\u5ea6\u7684\u9577\u5ea6\u662f \\(n\\)\uff0c\u6240\u4ee5\u9593\u8ddd\u53d6 \\(n / n^{1/3} = n^{2/3}\\)\u3002\u5171\u8981\u8d70 \\(n - 1\\) \u908a\uff0c\u6bcf\u908a\u9577 \\(n^{2/3}\\)\uff0c\u6240\u4ee5\u662f \\(O(n \\times n^{2/3}) = O(n^{5/3})\\)\u3002</p> <p>Block \u7684\u5927\u5c0f\u53ef\u4ee5\u53d6 \\(n^{2/3}\\)\uff0c\u8b93\u6bcf\u500b\u7dad\u5ea6\u7684\u6578\u91cf\u6700\u5e73\u5747</p> <p>\u6b64\u8b49\u660e\u4e0d\u56b4\u8b39\uff0c\u82e5\u8981\u56b4\u8b39\u8b49\u660e\u53ef\u898b\u83ab\u961f\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5757\u957f\u5206\u6790</p>"},{"location":"offline/mo-algo/#_7","title":"\u6307\u91dd\u79fb\u52d5","text":"<p>\u7576 updates \u6709\u5f71\u97ff\u5230\u7576\u524d [ql, qr] \u7684\u8a71\uff0c\u624d\u9700\u8981 add, del\uff0c\u4e0d\u7136\u5c31\u76f4\u63a5\u4fee\u6539\u9663\u5217\u4e0a\u7684\u5143\u7d20\u5373\u53ef</p> code <pre><code>int l = 0, r = -1, t = -1;\nfor (auto [ql, qr, qt, l_block, r_block, qid] : query) {\n    while (ql &lt; l) ds.add(--l);\n    while (r &lt; qr) ds.add(++r);\n    while (l &lt; ql) ds.del(l++);\n    while (qr &lt; r) ds.del(r--);\n    while (t &lt; qt) ds.modify_add(ql, qr, ++t);\n    while (t &gt; qt) ds.modify_del(ql, qr, t--);\n    ans[qid] = ds.ans;\n}\n</code></pre> CF 940 F. Machine Learning <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u500b\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u6709\u4ee5\u4e0b \\(q\\) \u500b\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{mex}(l,r):\\) \u8f38\u51fa\u5340\u9593\u6578\u5b57\u51fa\u73fe\u6b21\u6578\u7684 mex</p> </li> <li> <p>\\(\\text{update}(i,x):\\) \u5c07 \\(a_i\\) \u6539\u6210 \\(x\\)</p> </li> </ul> <p>\\(n,q\\le 10^5,1\\le a_i \\le 10^9\\)</p> \u6d1b\u8c37 P1903 [\u56fd\u5bb6\u96c6\u8bad\u961f] \u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0cq \u7b46\u4ee5\u4e0b\u64cd\u4f5c\uff1a </p> <ul> <li> <p>\u55ae\u9ede\u6539\u503c </p> </li> <li> <p>\u554f\u5340\u9593 \\([l, r]\\) \u4e2d distinct number \u6578\u91cf</p> </li> </ul> <p>\\(n,q\\le 1.4 \\times 10^5\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\n\nstruct Query {\n    int l, r, t, l_block, r_block, qid;\n\n    bool operator&lt;(const Query &amp;rhs) const {\n        if (l_block == rhs.l_block) {\n            if (r_block == rhs.r_block) {\n                return t &lt; rhs.t;\n            } else {\n                return r_block &lt; rhs.r_block;\n            }\n        } \n        return l_block &lt; rhs.l_block;\n    }\n};\n\nint n, q;\nint ans[maxn];\nvector&lt;Query&gt; query;\n\nstruct DS {\n    static const int N = 1e6 + 5;\n    int ans = 0;\n    vector&lt;int&gt; cnt;\n    vector&lt;int&gt; a;\n    vector&lt;pii&gt; updates;\n    stack&lt;pii&gt; stk;\n\n    DS(vector&lt;int&gt; b) {\n        cnt.resize(N);\n        a = b;\n    }\n\n    void add_event(int idx, int val) {\n        updates.pb({idx, val});\n    }\n    void add(int x) {\n        x = a[x];\n        if (cnt[x] == 0) {\n            ans++;\n        }\n        cnt[x]++;\n    }\n    void del(int x) {\n        x = a[x];\n        cnt[x]--;\n        assert(cnt[x] &gt;= 0);\n        if (cnt[x] == 0) {\n            ans--;\n        }\n    }\n    void modify_add(int l, int r, int t) {\n        auto [idx, val] = updates[t];\n        if (l &lt;= idx &amp;&amp; idx &lt;= r) {\n            stk.push({idx, a[idx]});\n            del(idx);\n            a[idx] = val;\n            add(idx);\n        } else {\n            stk.push({idx, a[idx]});\n            a[idx] = val;\n        }\n    }\n    void modify_del(int l, int r, int t) {\n        assert(stk.size());\n        auto [idx, val] = stk.top();\n        stk.pop();\n        if (l &lt;= idx &amp;&amp; idx &lt;= r) {\n            del(idx);\n            a[idx] = val;\n            add(idx);\n        } else {\n            a[idx] = val;\n        }\n    } \n};\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; q;\n    int k = pow(n, (double)2/(double)3);\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    DS ds(a);\n    int uid = -1, qid = -1;\n    for (int i = 0; i &lt; q; i++) {\n        char c;\n        cin &gt;&gt; c;\n        if (c == 'R') {\n            int idx, val;\n            cin &gt;&gt; idx &gt;&gt; val;\n            idx--;\n            uid++;\n            ds.add_event(idx, val);\n        } else if (c == 'Q') {\n            int l, r;\n            cin &gt;&gt; l &gt;&gt; r;\n            l--, r--;\n            qid++;\n            query.pb({l, r, uid, l / k, r / k, qid});\n        }\n    }\n    sort(ALL(query));\n    int l = 0, r = -1, t = -1;\n    for (auto [ql, qr, qt, l_block, r_block, qid] : query) {\n        while (ql &lt; l) ds.add(--l);\n        while (r &lt; qr) ds.add(++r);\n        while (l &lt; ql) ds.del(l++);\n        while (qr &lt; r) ds.del(r--);\n        while (t &lt; qt) ds.modify_add(ql, qr, ++t);\n        while (t &gt; qt) ds.modify_del(ql, qr, t--);\n        ans[qid] = ds.ans;\n    }\n    for (int i = 0; i &lt;= qid; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n} \n</code></pre>"},{"location":"offline/mo-algo/#_8","title":"\u56de\u6efe\u83ab\u968a","text":"<p>\u53ef\u8655\u7406\u52a0\u503c\u6613\uff0c\u522a\u9664\u96e3\u7684\u554f\u984c\u3002\u4e00\u500b\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\u5340\u9593\u6700\u503c\u3002\u6dfb\u52a0\u6642\uff0c\u6211\u4ecd\u7136\u53ef\u4ee5\u53ea\u770b\u65b0\u52a0\u9032\u4f86\u7684\u6578\uff0c\u5c07\u5176\u8207\u76ee\u524d\u7684\u6700\u503c\u6bd4\u8f03\uff0c\u4f46\u7531\u65bc ans \u662f\u55ae\u500b\u503c\uff0c\u4e00\u65e6\u522a\u9664\u6642\u628a\u6700\u503c\u7d66\u522a\u4e86\uff0c\u90a3\u9ebc\u6211\u5011\u5c31\u53c8\u5f97\u91cd\u65b0\u679a\u8209\u5340\u9593\u3002</p> <p>\u56de\u6efe\u83ab\u968a\u7684\u601d\u60f3\uff0c\u5c31\u662f\u628a\u6240\u6709\u522a\u9664\u64cd\u4f5c\u7d66\u53bb\u6389\uff08\u7576\u7136\uff0c\u5982\u679c\u662f\u6dfb\u52a0\u64cd\u4f5c\u4e0d\u597d\u8655\u7406\uff0c\u56de\u6efe\u83ab\u968a\u5247\u662f\u628a\u6240\u6709\u6dfb\u52a0\u64cd\u4f5c\u53bb\u6389\uff09</p>"},{"location":"offline/mo-algo/#_9","title":"\u7b97\u6cd5","text":"<p>\u521d\u59cb\u5316 : </p> <ul> <li>L \u5728 block \u7684\u53f3\u7aef\u9ede\u52a0 1</li> <li>R \u5728 block \u7684\u53f3\u7aef\u9ede</li> <li>\u5c07\u540c\u4e00\u500b block \u5167\u7684\u6309\u7167 r \u5c0f\u5230\u5927\u6392\u5e8f\uff08\u76f8\u53cd\u5247\u70ba\u5927\u5230\u5c0f\uff09</li> </ul> <p></p> <p>\u5982\u679c\u8a62\u554f\u7684 ql, qr \u6240\u5c6c\u7684\u584a\u76f8\u540c\uff0c\u90a3\u9ebc\u66b4\u529b\u6383\u63cf\u5340\u9593\u56de\u7b54\u8a62\u554f</p> <p>\u5982\u679c\u8a62\u554f\u7684\u5de6\u53f3\u7aef\u9ede\u6240\u5c6c\u7684\u584a\u4e0d\u540c\uff1a</p> <ul> <li>\u4e0d\u65b7\u5c07 R \u64f4\u5c55\u5230 qr</li> <li>\u4e0d\u65b7\u5c07 L \u64f4\u5c55\u5230 ql</li> <li>\u56de\u7b54\u8a62\u554f</li> <li>\u5c07 L rollback \u56de block \u7684\u53f3\u7aef\u9ede\u52a0 1</li> </ul> <p>\u6700\u5f8c\u8981\u5230\u4e0b\u4e00\u500b block \u7684\u6642\u5019\uff0c\u518d\u5c07 R \u7d66 rollback \u56de\u4f86\uff0c\u7136\u5f8c\u4e00\u6a23\u521d\u59cb\u5316 L, R\uff0c...</p>"},{"location":"offline/mo-algo/#_10","title":"\u8907\u96dc\u5ea6","text":"<p>\u5047\u8a2d\u56de\u6efe\u83ab\u968a\u7684\u5206\u584a\u5927\u5c0f\u662f \\(k\\)\uff1a </p> <ul> <li> <p>\u5c0d\u65bc\u5de6\u3001\u53f3\u7aef\u9ede\u5728\u540c\u4e00\u500b\u584a\u5167\u7684\u8a62\u554f\uff0c\u53ef\u4ee5\u5728 \\(O(k)\\) \u6642\u9593\u5167\u8a08\u7b97</p> </li> <li> <p>\u5c0d\u65bc\u5176\u4ed6\u8a62\u554f\uff0c\u8003\u616e\u5de6\u7aef\u9ede\u5728\u76f8\u540c\u584a\u5167\u7684\u8a62\u554f\uff0c\u5b83\u5011\u7684\u53f3\u7aef\u9ede\u55ae\u8abf\u905e\u589e\uff0c\u79fb\u52d5\u53f3\u7aef\u9ede\u7684\u6642\u9593\u8907\u96dc\u5ea6\u662f \\(O(n)\\)\uff0c\u800c\u5de6\u7aef\u9ede\u55ae\u6b21\u8a62\u554f\u7684\u79fb\u52d5\u4e0d\u8d85\u904e \\(k\\)\uff0c\u56e0\u70ba\u6709 \\(\\displaystyle \\frac{n}{k}\\) \u500b\u584a\uff0c\u6240\u4ee5\u7e3d\u8907\u96dc\u5ea6\u662f \\(\\displaystyle O(qk+\\frac{n^2}{k})\\)\uff0c\u53d6 \\(\\displaystyle k=\\frac{n}{\\sqrt {q}}\\) \u6700\u512a\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n\\sqrt{q})\\)\u3002</p> </li> </ul> JOISC 2014 Day1 \u5386\u53f2\u7814\u7a76 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\) \u548c \\(q\\) \u7b46\u8a62\u554f\uff0c\u6bcf\u6b21\u8a62\u554f\u4e00\u500b\u5340\u9593 \\([l, r]\\) \u5167\u91cd\u8981\u5ea6\u6700\u5927\u7684\u6578\u5b57\uff0c\u8981\u6c42\u8f38\u51fa\u5176\u91cd\u8981\u5ea6\u3002\u4e00\u500b\u6578\u5b57 \\(x\\) \u91cd\u8981\u5ea6\u7684\u5b9a\u7fa9\u70ba \\(x\\) \u4e58\u4e0a \\(x\\) \u5728\u5340\u9593\u5167\u51fa\u73fe\u7684\u6b21\u6578\u3002</p> <p>\\(1\\le n,m\\le 10^5,1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u56de\u6efe\u83ab\u968a\uff0c\u904e\u7a0b\u4e2d\u5728 add \u7dad\u8b77\u7b54\u6848\u4e26\u66f4\u65b0\u7b54\u6848\uff0cdel \u53ea\u7dad\u8b77\u7b54\u6848\uff08\u898b\u4ee3\u78bc\uff09</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Query {\n    int l, r, l_block, r_block, qid;\n\n    bool operator&lt;(const Query &amp;rhs) const {\n        if (l_block == rhs.l_block) {\n            return r &lt; rhs.r;\n        }\n        return l_block &lt; rhs.l_block;\n    }\n};\n\nint n, q, k;\nvector&lt;int&gt; a, b;\nvector&lt;Query&gt; query;\nint cnt[maxn], L[maxn], R[maxn], ans[maxn];\n\nvoid add(int x, int &amp;ans) {\n    cnt[x]++;\n    ans = max(ans, cnt[x] * b[x]);\n}\n\nvoid del(int x) {\n    cnt[x]--;\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; q;\n\n    a = vector&lt;int&gt;(n);\n    b = vector&lt;int&gt;(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        b[i] = a[i];\n    }\n    sort(ALL(b));\n    b.resize(unique(ALL(b)) - b.begin());\n\n    for (int i = 0; i &lt; n; i++) {\n        a[i] = lower_bound(ALL(b), a[i]) - b.begin();\n    }\n    k = sqrt(n);\n    int l, r;\n    for (int i = 0; i &lt; q; i++) {\n        cin &gt;&gt; l &gt;&gt; r;\n        l--, r--;\n        query.pb({l, r, l / k, r / k, i});\n    }\n    sort(ALL(query));\n\n    // \u70ba\u4e86\u65b9\u4fbf, \u5148\u9810\u8655\u7406\u597d\u6bcf\u500b block \u7684\u5de6\u53f3\u754c\n    int tot = n / k;\n    for (int i = 0; i &lt; tot; i++) {\n        L[i] = i * k;\n        R[i] = (i + 1) * k - 1;\n    }\n    if (R[tot - 1] &lt; n - 1) {\n        tot++;\n        L[tot - 1] = R[tot - 2] + 1;\n        R[tot - 1] = n - 1;\n    }\n}\n\nvoid solve() {\n    int l = 0, r = -1, last_block = -1, res = 0;\n    for (auto [ql, qr, l_block, r_block, qid] : query) {\n        if (last_block &lt; l_block) {\n            while (last_block != -1 &amp;&amp; r &gt; R[last_block]) del(a[r--]);\n            l = R[l_block] + 1;\n            r = R[l_block];\n            last_block = l_block;\n            res = 0;\n        }\n\n        if (l_block == r_block) {\n            vector&lt;int&gt; cnt(b.size());\n            for (int i = ql; i &lt;= qr; i++) {\n                cnt[a[i]]++;\n                ans[qid] = max(ans[qid], cnt[a[i]] * b[a[i]]);\n            }\n        } else {\n            while (r &lt; qr) add(a[++r], res);\n            int tmp = res;\n            while (l &gt; ql) add(a[--l], tmp);\n            ans[qid] = tmp;\n            while (l &lt; R[l_block] + 1) del(a[l++]);\n        }\n    }\n    for (int i = 0; i &lt; q; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n}\n\nsigned main() {\n    init();\n    solve();\n} \n</code></pre> CF edu dsu B. Number of Connected Components on Segments <p>\u7d66\u4e00\u5f35 n \u500b\u9ede\uff0c\u7d66 m \u689d\u908a\uff0c\u6709 q \u7b46\u67e5\u8a62 :</p> <ul> <li>query(l, r): \u53ea\u4fdd\u7559 edge[l ... r] \u7684\u908a\uff0c\u5716\u4e0a\u5171\u6709\u5e7e\u500b\u9023\u901a\u584a</li> </ul> <p>\\(1\\le n,m,q \\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u56de\u6efe\u83ab\u968a\u601d\u8def\uff0c\u914d\u5408 rollback dsu\uff0c\u8a73\u898b\u4ee3\u78bc</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Edge {\n    int u, v;\n};\n\nstruct DSU {\n    DSU (int n) : n(n) {\n        sz = vector&lt;int&gt;(n, 1);\n        par = vector&lt;int&gt;(n);\n        cnt = n;\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    void merge(Edge e) {\n        int x = find (e.u), y = find (e.v);\n        if (x == y) {\n            stk.push ({x, x});\n            return;\n        }\n\n        if (sz[x] &lt; sz[y]) swap(x, y);\n        sz[x] += sz[y]; par[y] = x;\n        cnt--;\n        stk.push({x, y});\n    }\n    void undo() {\n        assert(stk.size());\n        auto [x, y] = stk.top ();\n        stk.pop ();\n        if (x == y) return;\n        sz[x] -= sz[y]; par[y] = y;\n        cnt++;\n    }\n    int cc() {\n        return cnt;\n    }\n\nprivate :\n    int n, cnt;\n    vector&lt;int&gt; sz;\n    vector&lt;int&gt; par;\n    stack&lt;pii&gt; stk;\n\n    int find(int x) {\n        if (par[x] == x) return x;\n        else return find(par[x]);\n    }\n};\n\nstruct Query {\n    int l, r, l_block, r_block, qid;\n\n    bool operator&lt;(const Query &amp;rhs) const {\n        if (l_block == rhs.l_block) {\n            return r &lt; rhs.r;\n        }\n        return l_block &lt; rhs.l_block;\n    }\n};\n\nint n, m, q, k;\nvector&lt;Edge&gt; edges;\nvector&lt;Query&gt; query;\nint L[maxn], R[maxn], ans[maxn];\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        u--, v--;\n        edges.pb({u, v});\n    }\n    k = sqrt(m);\n\n    cin &gt;&gt; q;\n    int l, r;\n    for (int i = 0; i &lt; q; i++) {\n        cin &gt;&gt; l &gt;&gt; r;\n        l--, r--;\n        query.pb({l, r, l / k, r / k, i});\n    }\n    sort(ALL(query));\n\n    int tot = m / k;\n    for (int i = 0; i &lt; tot; i++) {\n        L[i] = i * k;\n        R[i] = (i + 1) * k - 1;\n    }\n    if (R[tot - 1] &lt; m - 1) {\n        tot++;\n        L[tot - 1] = R[tot - 2] + 1;\n        R[tot - 1] = m - 1;\n    }\n}\n\nvoid solve() {\n    DSU dsu(n);\n    int l = -1, r = m, last_block = -1, r_cnt = 0;\n    for (auto [ql, qr, l_block, r_block, qid] : query) {\n        if (last_block &lt; l_block) {\n            while (r_cnt &gt; 0) {\n                dsu.undo();\n                r_cnt--;\n            }        \n            l = R[l_block] + 1;\n            r = R[l_block];\n            last_block = l_block;\n        }\n        if (l_block == r_block) {\n            for (int i = ql; i &lt;= qr; i++) {\n                dsu.merge(edges[i]);\n            }\n            ans[qid] = dsu.cc();\n            for (int i = ql; i &lt;= qr; i++) {\n                dsu.undo();\n            }\n        } else {\n            while (r &lt; qr) {\n                dsu.merge(edges[++r]);\n                r_cnt++;\n            }\n\n            int l_cnt = 0;\n            while (l &gt; ql) {\n                dsu.merge(edges[--l]);\n                l_cnt++;\n            }\n            ans[qid] = dsu.cc();\n            while (l_cnt &gt; 0) {\n                dsu.undo();\n                l_cnt--;\n            }\n            l = R[l_block] + 1;\n        }\n    }\n    for (int i = 0; i &lt; q; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n}\n\nsigned main() {\n    init();\n    solve();\n} \n</code></pre> TIOJ 1902 . \u300c\u6bbf\u4ec1\uff0e\u738b\uff0c\u4e0d\u8a8d\u8b58\uff0c\u8ab0\u554a\uff1f\u300d\uff0c\u7136\u5f8c\u4ed6\u5c31\u6b7b\u4e86\u2026\u2026 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f : </p> <ul> <li>\u7d66\u5340\u9593 [l, r]\uff0c\u554f\u5728\u9019\u500b\u5340\u9593\u5167\u7684 maximum xor sum</li> </ul> <p>\\(n,q\\le 10^5,a_i\\le 10^9\\)</p>"},{"location":"offline/mo-algo/#_11","title":"\u6a39\u4e0a\u83ab\u968a","text":"SPOJ COT2 <p>\u7d66\u4e00\u500b n \u500b\u9ede\u7684\u6a39\uff0c\u6bcf\u500b\u9ede\u6709\u4e00\u500b\u6b0a\u503c \\(w_i\\)\uff0c\u6709 q \u7b46\u8a62\u554f\u5982\u4e0b :</p> <ul> <li>\\(\\text{query}(u,v):\\) \u8f38\u51fa u \u5230 v \u7684\u8def\u5f91\u4e0a distinct number \u6578\u91cf</li> </ul> <p>\\(n\\le 4\\times 10^4,q\\le 10^5\\)</p> \u601d\u8def <p>\u6253\u6210 dfs order\uff0c\u4e0d\u59a8\u8a2d in[x] &lt; in[y] \uff08\u4e5f\u5c31\u662f\u5148\u8a2a\u554f x\uff0c\u518d\u8a2a\u554f y\uff09\uff0c\u5206 2 \u7a2e case \u8a0e\u8ad6 :</p> <p> </p> <p>\u82e5 lca(x,y) = x\uff0c\u9019\u6642 x, y \u5728\u4e00\u689d\u93c8\u4e0a\uff0c\u90a3\u9ebc in[x] \u5230 in[y] \u9019\u6bb5\u5340\u9593\u4e2d\uff0c\u6709\u7684\u9ede\u51fa\u73fe\u4e86\u5169\u6b21\uff0c\u6709\u7684\u9ede\u6c92\u6709\u51fa\u73fe\u904e\uff0c\u9019\u4e9b\u9ede\u90fd\u662f\u5c0d\u7b54\u6848\u6c92\u6709\u8ca2\u737b\u7684\uff0c\u6211\u5011\u53ea\u9700\u8981\u7d71\u8a08\u51fa\u73fe\u904e 1 \u6b21\u7684\u9ede\u5c31\u597d\u6bd4\u5982\u7576\u8a62\u554f\u70ba 2, 6 \u6642\uff0c[ in[x], in[y] ] = 2, 3, 4, 4, 5, 5, 6\uff0c4, 5 \u9019\u5169\u500b\u9ede\u90fd\u51fa\u73fe\u4e86\u5169\u6b21\uff0c\u56e0\u6b64\u4e0d\u7d71\u8a08\u9032\u5165\u7b54\u6848</p> <p>\u82e5 lca(x,y) != x\uff0c\u6b64\u6642 x, y \u4f4d\u65bc\u4e0d\u540c\u7684\u5b50\u6a39\u5167\uff0c\u6211\u5011\u53ea\u9700\u8981\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u7d71\u8a08out[x] \u5230 in[y] \u9019\u6bb5\u5340\u9593\u5167\u7684\u9ede\u3002\u6bd4\u5982\u7576\u8a62\u554f\u70ba 4, 7 \u6642\uff0c[ out[4], in[7] ] = 4, 5, 5, 6, 6, 3, 7\u3002\u5927\u5bb6\u767c\u73fe\u4e86\u4ec0\u9ebc\uff1f\u6c92\u932f\uff01\u6211\u5011\u6c92\u6709\u7d71\u8a08 lca\uff0c\u56e0\u6b64\u6211\u5011\u9700\u8981\u7279\u5224 lca</p> <p>\u53c3\u8003 : https://www.cnblogs.com/zwfymqz/p/9223425.html</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 40005;\nconst int MAXM = 100005;\nconst int LN = 19;\n\nint N, M, K, cur, A[MAXN], LVL[MAXN], DP[LN][MAXN];\nint BL[MAXN &lt;&lt; 1], ID[MAXN &lt;&lt; 1], VAL[MAXN], ANS[MAXM];\nint d[MAXN], l[MAXN], r[MAXN];\nbool VIS[MAXN];\nvector &lt; int &gt; adjList[MAXN];\n\nstruct query{\n    int id, l, r, lc;\n    bool operator &lt; (const query&amp; rhs){\n        return (BL[l] == BL[rhs.l]) ? (r &lt; rhs.r) : (BL[l] &lt; BL[rhs.l]);\n    }\n}Q[MAXM];\n\n// Set up Stuff\nvoid dfs(int u, int par){\n    l[u] = ++cur; \n    ID[cur] = u;\n    for (int i = 1; i &lt; LN; i++) DP[i][u] = DP[i - 1][DP[i - 1][u]];\n    for (int i = 0; i &lt; adjList[u].size(); i++){\n        int v = adjList[u][i];\n        if (v == par) continue;\n        LVL[v] = LVL[u] + 1;\n        DP[0][v] = u;\n        dfs(v, u);\n    }\n    r[u] = ++cur; ID[cur] = u;\n}\n\n// Function returns lca of (u) and (v)\ninline int lca(int u, int v){\n    if (LVL[u] &gt; LVL[v]) swap(u, v);\n    for (int i = LN - 1; i &gt;= 0; i--)\n        if (LVL[v] - (1 &lt;&lt; i) &gt;= LVL[u]) v = DP[i][v];\n    if (u == v) return u;\n    for (int i = LN - 1; i &gt;= 0; i--){\n        if (DP[i][u] != DP[i][v]){\n            u = DP[i][u];\n            v = DP[i][v];\n        }\n    }\n    return DP[0][u];\n}\n\ninline void check(int x, int&amp; res){\n    // If (x) occurs twice, then don't consider it's value \n    if ( (VIS[x]) and (--VAL[A[x]] == 0) ) res--; \n    else if ( (!VIS[x]) and (VAL[A[x]]++ == 0) ) res++;\n    VIS[x] ^= 1;\n}\n\nvoid compute(){\n\n    // Perform standard Mo's Algorithm\n    int curL = Q[0].l, curR = Q[0].l - 1, res = 0;\n\n    for (int i = 0; i &lt; M; i++){\n\n        while (curL &lt; Q[i].l) check(ID[curL++], res);\n        while (curL &gt; Q[i].l) check(ID[--curL], res);\n        while (curR &lt; Q[i].r) check(ID[++curR], res);\n        while (curR &gt; Q[i].r) check(ID[curR--], res);\n\n        int u = ID[curL], v = ID[curR];\n\n        // Case 2\n        if (Q[i].lc != u and Q[i].lc != v) check(Q[i].lc, res);\n\n        ANS[Q[i].id] = res;\n\n        if (Q[i].lc != u and Q[i].lc != v) check(Q[i].lc, res);\n    }\n\n    for (int i = 0; i &lt; M; i++) printf(\"%d\\n\", ANS[i]);\n}\n\nint main(){\n\n    int u, v, x;\n\n    while (scanf(\"%d %d\", &amp;N, &amp;M) != EOF){\n\n        // Cleanup\n        cur = 0;\n        memset(VIS, 0, sizeof(VIS));\n        memset(VAL, 0, sizeof(VAL));\n        for (int i = 1; i &lt;= N; i++) adjList[i].clear();\n\n        // Inputting Values\n        for (int i = 1; i &lt;= N; i++) scanf(\"%d\", &amp;A[i]);\n        memcpy(d + 1, A + 1, sizeof(int) * N);\n\n        // Compressing Coordinates\n        sort(d + 1, d + N + 1);\n        K = unique(d + 1, d + N + 1) - d - 1;\n        for (int i = 1; i &lt;= N; i++) A[i] = lower_bound(d + 1, d + K + 1, A[i]) - d;\n\n        // Inputting Tree\n        for (int i = 1; i &lt; N; i++){\n            scanf(\"%d %d\", &amp;u, &amp;v);\n            adjList[u].push_back(v);\n            adjList[v].push_back(u);\n        }\n\n        // Preprocess\n        DP[0][1] = 1;\n        dfs(1, -1);\n        int size = sqrt(cur);\n\n        for (int i = 1; i &lt;= cur; i++) BL[i] = (i - 1) / size + 1;\n\n        for (int i = 0; i &lt; M; i++){\n            scanf(\"%d %d\", &amp;u, &amp;v);\n            Q[i].lc = lca(u, v);\n            if (l[u] &gt; l[v]) swap(u, v);\n            if (Q[i].lc == u) Q[i].l = l[u], Q[i].r = l[v];\n            else Q[i].l = r[u], Q[i].r = l[v];\n            Q[i].id = i;\n        }\n\n        sort(Q, Q + M);\n        compute();\n    }\n}\n</code></pre>"},{"location":"offline/mo-algo/#_12","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://sam571128.codes/2020/10/03/MO-Algorithm/</p> </li> <li> <p>https://cp.wiwiho.me/mo-algorithm/</p> </li> <li> <p>https://docs.google.com/document/d/11-Ho9_nnds76VdfBfDQC7U1sYjXVrlNgEurdZ4ykL4s/edit#heading=h.isbo4ewxeenw</p> </li> <li> <p>https://drive.google.com/file/d/1F73WYrDtwoH_VtjYK4qicKDuEFDu9OqY/view</p> </li> <li> <p>https://hackmd.io/@iceylemon157/HkdBTBJEK</p> </li> <li> <p>https://www.cnblogs.com/RioTian/p/15113195.html</p> </li> <li> <p>https://zhuanlan.zhihu.com/p/369836899</p> </li> <li> <p>https://codeforces.com/blog/entry/43230</p> </li> </ul> <ol> <li> <p>[2, 5] \u2192 [6, 7] \u5982\u679c\u5148\u79fb\u52d5\u5de6\u908a\uff0c\u53ef\u80fd\u6703\u8b8a\u6210 [6, 5]\uff0c\u7121\u6cd5\u4fdd\u8b49\u5de6\u754c\u5c0f\u65bc\u7b49\u65bc\u53f3\u754c\u00a0\u21a9</p> </li> </ol>"},{"location":"offline/offline/","title":"\u96e2\u7dda\u64cd\u4f5c","text":""},{"location":"offline/offline/#cses-1734","title":"CSES 1734","text":"CSES - Distinct Values Queries <p>\u7d66\u4f60\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,...,a_n\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <ul> <li>\u8f38\u51fa \\(a_i,...,a_j\\) \u4e4b\u9593\u6709\u5e7e\u7a2e\u4e0d\u540c\u7684\u6578\u5b57</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def\u4e00 <p>\u8003\u616e\u5c0d\u65bc\u6bcf\u500b\u6578\u5b57\u4e0b\u4e00\u500b\u6578\u5b57\u51fa\u73fe\u5728\u54ea\u88e1</p> <p>\u4ee4\u76ee\u524d\u7684 index \u5728 \\(i\\)\uff0c\u4e0b\u4e00\u6b21\u51fa\u73fe\u5728 \\(j\\)</p> <p>\u554f\u984c\u5c31\u8b8a\u6210\u5c0d\u65bc\u6bcf\u500b \\([L,R]\\) \u4f60\u8981\u627e\u51fa\u6709\u5e7e\u500b \\((i,j)\\) \u7b26\u5408 \\(\\begin{cases}L \\le i \\\\ i \\le R \\\\ j&gt;R \\end{cases}\\)</p> <p>\u53ef\u4ee5\u5c07\u554f\u984c\u8f49\u63db\u5728\u4e8c\u7dad\u5e73\u9762\u4e0a</p> <p> </p> \u601d\u8def\u4e8c <p>\u5148\u5c07 \\([L_i,R_i]\\) \u6309\u7167 \\(R_i\\) \u5c0f\u5230\u5927 sort</p> <p>\u5c0d\u65bc\u6bcf\u500b\u9ede\u7dad\u8b77\u4e00\u500b\u6b0a\u503c\uff0c\u82e5\u662f\u7576\u524d\u6700\u5f8c\u4e00\u500b\u51fa\u73fe\u7684\u8a71\u6b0a\u503c\u5c31\u662f \\(1\\)\uff0c\u5426\u5247\u662f \\(0\\)</p> <p>\u6bcf\u500b \\([L_i,R_i]\\) \u53ea\u9700\u5340\u9593\u6c42\u548c\u5373\u53ef</p> <p> </p> CF 1858 E2. Rollbacks (Hard Version) <p>\u7dad\u8b77\u4e00\u500b DS\uff0c\u652f\u63f4 :</p> <ul> <li> <p>push_back(x)</p> </li> <li> <p>pop_back(k) : pop back \u6700\u5f8c k \u500b</p> </li> <li> <p>rollback : \u8df3\u56de\u4e0a\u4e00\u6b21 push_back \u6216 pop_back \u4e4b\u524d\u7684\u72c0\u614b</p> </li> <li> <p>query : \u554f\u7576\u524d DS \u88e1\u9762\u6709\u5e7e\u500b distinct number</p> </li> </ul> <p>\\(1\\le q\\le 10^6,1\\le x\\le 10^6\\)</p> \u5099\u8a3b <p>\u6b64\u984c\u4e5f\u6709\u96e2\u7dda\u505a\u6cd5\uff0c\u53ea\u662f\u4e0b\u9762\u5206\u4eab\u7684\u662f\u8ddf\u96e2\u7dda\u7121\u95dc\u7684\uff0c\u4f46\u8ddf distinct number \u6709\u95dc\u7684</p> \u601d\u8def <p>\u6211\u5011\u53ea\u9700\u8981\u7dad\u8b77\u6bcf\u500b\u6578\u5b57\u6700\u4e00\u958b\u59cb\u51fa\u73fe\u7684\u4f4d\u7f6e\uff0c\u8207\u7576\u524d\u9663\u5217\u6bcf\u4e00\u9805\u662f\u591a\u5c11\u3002</p> <ul> <li> <p>push_back(x)</p> <p>\u6211\u5011\u53ea\u8981\u6aa2\u67e5\u7576\u524d\u7684 x \u662f\u5426\u70ba\u7b2c\u4e00\u6b21\u51fa\u73fe\uff0c\u662f\u7684\u8a71 ans[n] = ans[n - 1] + 1</p> </li> <li> <p>pop_back(k)</p> <p>\u5c07\u7576\u524d n -= k \u5373\u53ef</p> </li> <li> <p>rollback</p> <p>\u958b\u4e00\u500b stack \u5c07\u4e4b\u524d push_back, pop_back \u6709\u6539\u5230\u7684\u6771\u897f\u5168\u90e8\u8b8a\u6210\u4ed6\u5011\u4e4b\u524d\u7684\u503c\u5373\u53ef</p> </li> <li> <p>query</p> <p>\u76f4\u63a5\u8f38\u51fa ans[n]</p> </li> </ul> <p>\u53c3\u8003 : codeforces comment</p> code <pre><code>#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n#include &lt;cstring&gt;\nusing namespace std;\nconst int N = 1e6 + 1;\n\nint q, a[N], n, occur[N], ans[N];\nchar c;\n\n\nstruct change {\n    int *pos, val;\n    change(int *pos, int val) : pos(pos), val(val) {}\n};\nvector&lt;vector&lt;change&gt;&gt; stk;\n\nint main(){\n    memset(occur, 0x3f, sizeof(occur));\n    scanf(\"%d\", &amp;q);\n    for (int i = 1; i &lt;= q; i++) {\n        scanf(\" %c\", &amp;c);\n        if(c == '+') {\n            vector&lt;change&gt; cng;\n            int x;\n            scanf(\"%d\", &amp;x);\n            if(occur[x] &gt; n || a[occur[x]] != x) {\n                cng.push_back(change(&amp;occur[x], occur[x]));\n                occur[x] = n + 1;\n                cng.push_back(change(&amp;ans[n + 1], ans[n + 1]));\n                ans[n + 1] = ans[n] + 1;\n            } else {\n                cng.push_back(change(&amp;ans[n + 1], ans[n + 1]));\n                ans[n + 1] = ans[n];\n            }\n            cng.push_back(change(&amp;a[n + 1], a[n + 1]));\n            a[n + 1] = x;\n            cng.push_back(change(&amp;n, n));\n            n = n + 1;\n            stk.push_back(cng);\n        } else if(c == '-') {\n            vector&lt;change&gt; cng;\n            int x;\n            scanf(\"%d\", &amp;x);\n            cng.push_back(change(&amp;n, n));\n            n = n - x;\n            stk.push_back(cng);\n        } else if(c == '!') {\n            vector&lt;change&gt; lst = stk.back();\n            stk.pop_back();\n            for(change elem : lst)\n                *elem.pos = elem.val;\n        } else {\n            printf(\"%d\\n\", ans[n]);\n            fflush(stdout);\n        }\n    }\n    return 0;\n}\n</code></pre> \u985e\u4f3c\u984c CF 1000F <p>\u7d66\u4f60 \\(a_1,...,a_n\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <ul> <li>\u96a8\u4fbf\u8f38\u51fa\u4e00\u500b \\(a_l,...,a_r\\)  \u4e4b\u9593\u53ea\u51fa\u73fe\u4e00\u6b21\u7684\u6578</li> </ul> \u601d\u8def <ul> <li> <p>\u6211\u5011\u5047\u8a2d \\(a_i\\) \u4e0a\u4e00\u6b21\u51fa\u73fe\u7684\u5730\u65b9\u662f \\(a_j\\) \u5176\u4e2d \\(i&lt;j\\)</p> </li> <li> <p>\\(\\texttt{seg}[i]:\\begin{cases} j &amp; \\texttt{if j exist} \\\\ -\\texttt{INF} &amp;\\texttt{otherwise}\\end{cases}\\)</p> </li> <li> <p>\u5c0d\u65bc \\(\\texttt{query(l,r)}\\) \u53ea\u8981\u53bb \\(\\texttt{query_min(l,r)}\\) \u6aa2\u67e5\u662f\u5426\u6bd4 \\(l\\) \u5c0f\u5373\u53ef</p> </li> <li> <p>\u8a18\u5f97\u5728 \\(\\texttt{query_min(l,r)}\\) \u8981\u5b58\u4efb\u610f\u4e00\u500b\u7b26\u5408\u7b54\u6848\u7684\u6578</p> </li> </ul> \u81ea\u5275\u984c <p>\u7d66\u4f60 \\(a_1,...,a_n\\)\uff0c\u548c\u4e00\u500b\u6578 \\(x\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <p>\u8f38\u51fa\u5728 \\(a_l,..., a_r\\) \u4e4b\u9593\u5b58\u5728\u5e7e\u500b\u53ea\u51fa\u73fe\u4e00\u6b21\u7684\u6578</p> \u601d\u8def <ul> <li> <p>\u53ea\u8981\u5c07 \\(\\texttt{CSES}\\) \u4e0a\u9762\u90a3\u984c</p> </li> <li> <p>\u628a\u67e5\u8a62 \\([l, r]\\) \u6309\u7167 \\(l\\) \u5f9e\u5927\u5230\u5c0f\u8655\u7406</p> </li> <li> <p>\u5c0d\u65bc\u5728\u4f4d\u7f6e \\(l\\) \u5f8c\u9762\u7684\u6578\u5b57 \\(x\\)</p> </li> <li> <p>\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u51fa\u73fe\u8a2d\u5b9a\u6210 \\(+1\\)</p> </li> <li> <p>\u5982\u679c\u662f\u7b2c\u4e8c\u6b21\u51fa\u73fe\u8a2d\u5b9a\u6210 \\(-1\\)</p> </li> </ul>"},{"location":"offline/offline/#atcoder-abc250_e","title":"Atcoder abc250_e","text":"E - Prefix Equality <p>\u7d66\u4f60 \\(a_1,...,a_n\\) \u8207 \\(b_1,...,b_n\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <ul> <li>\u554f \\(\\texttt{set}(a_1,...,a_i)\\) \u548c \\(\\texttt{set}(b_1,...,b_j)\\) \u662f\u5426\u76f8\u540c</li> </ul> <p>\u66b4\u529b\u4f5c\u6cd5\u7121\u6cd5\u901a\u904e</p> \u601d\u8def <ul> <li> <p>\\(\\texttt{seg}[i]\\) \u5b58 \\(a_i\\) \u9019\u500b\u6578\u5b57\u5728 \\(b\\) \u9663\u5217\u9996\u6b21\u51fa\u73fe\u7684 \\(\\texttt{index}\\)</p> </li> <li> <p>\\(\\text{query}\\) \u5c31\u76f4\u63a5\u770b \\(\\texttt{seg.query_max(1,i)}\\) \u662f\u5426\u6bd4 \\(\\texttt{j}\\) \u5c0f\uff0c\u6bd4 \\(\\texttt{j}\\) \u5c0f\u4ee3\u8868\u662f\u76f8\u540c\u7684</p> </li> </ul>"},{"location":"offline/offline/#_1","title":"\u985e\u4f3c\u984c","text":"\u9009\u6570\u5f02\u6216 <p>\u7d66\u4f60 \\(a_1,...,a_n\\)\uff0c\u548c\u4e00\u500b\u6578 \\(x\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <ul> <li>\u554f \\([l,r]\\) \u4e2d\u662f\u5426\u6709\u5169\u500b\u6578 \\(\\texttt{XOR}\\) \u8d77\u4f86\u7b49\u65bc \\(x\\)</li> </ul> \u601d\u8def <ul> <li>\u89e3\u7b54</li> </ul>"},{"location":"offline/offline/#rmq","title":"RMQ","text":"Static Range Minimum Queries <p>\u7d66\u4f60 \\(a_1,...,a_n\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <ul> <li>\u554f \\(a_l,...,a_r\\) \u7684\u6700\u5c0f\u503c</li> </ul> <p>\u8a3b\\(\\texttt{:}\\) \u4f7f\u7528\u55ae\u8abf \\(\\texttt{stack}\\) \u4f86\u89e3\u6c7a\u6b64\u554f\u984c</p> \u601d\u8def <ul> <li> <p>\u4f9d\u7167 \\(r\\) \\(\\texttt{sort}\\)</p> </li> <li> <p>\u5c0d\u65bc\u76f8\u540c \\(r\\) \u7684 \\(\\texttt{query}\\)\uff0c\u6309\u7167 \\(l\\) \u53bb \\(\\texttt{lower_bound}\\)</p> </li> <li> <p>\u56e0\u70ba\u55ae\u8abf \\(\\texttt{stack}\\) \u662f\u905e\u589e\u7684\uff0c\u6240\u4ee5\u627e\u5230\u7b2c\u4e00\u500b \\(idx \\ge l\\)  \u4e00\u5b9a\u662f\u6700\u597d\u7684 \\(\\texttt{min}\\)</p> </li> <li> <p>\u5c0f\u7684\u4e00\u5b9a\u90fd\u6703\u628a\u5927\u7684\u780d\u6389</p> </li> </ul>"},{"location":"offline/offline/#cses-2416","title":"CSES  2416","text":"Increasing Array Queries <p>\u7d66\u4f60 \\(a_1,...,a_n\\)\uff0c\u6709 \\(q\\) \u500b\u67e5\u8a62</p> <ul> <li> <p>\u5982\u679c\u4f60\u4e00\u500b\u6b65\u9a5f\u53ef\u4ee5 \\(\\texttt{modify}(a[i],+1)\\) </p> </li> <li> <p>\u8acb\u554f\u4f60\u6700\u5c11\u9700\u8981\u5e7e\u500b\u6b65\u9a5f\u53ef\u4ee5\u4f7f \\(a_l,...,a_r\\) \u975e\u56b4\u683c\u905e\u589e</p> </li> </ul>"},{"location":"offline/offline/#tioj","title":"TIOJ \u6700\u5c0f\u516c\u500d\u6578","text":"TIOJ 1872.\u6700\u5c0f\u516c\u500d\u6578 <p>\u7d66\u4f60 \\(N\\) \u500b\u6578\uff0c\\(Q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\u8a08\u7b97 \\(c_l,\\ldots ,c_r\\) \u7684\u6700\u5c0f\u516c\u500d\u6578</li> </ul> <p>\\(N,Q\\le 10^6, c_i\\le 10^6\\)</p> <p>\u200b   </p> <ul> <li> <p>CSES - Pizzeria Queries</p> </li> <li> <p>CSES - Polynomial Queries</p> </li> </ul>"},{"location":"offline/parallel-binsearch/","title":"\u6574\u9ad4\u4e8c\u5206","text":""},{"location":"offline/parallel-binsearch/#_1","title":"\u4ecb\u7d39","text":""},{"location":"offline/parallel-binsearch/#_2","title":"\u7b97\u6cd5\u7cbe\u795e","text":"<p>\u5148\u60f3\u55ae\u4e00\u8a62\u554f\u7684\u6642\u5019\u53ef\u4ee5\u600e\u9ebc\u5229\u7528\u503c\u57df\u4e8c\u5206\u641c</p> <p>\u4e00\u5b9a\u6703\u5728\u300c\u7b54\u6848\u300d\u6240\u5728\u7684\u503c\u57df\u9032\u884c\u5206\u6cbb\uff0c\u6211\u5011\u5c07\u7b54\u6848\u7684\u503c\u57df\u5217\u70ba \\([l,r]\\)</p> <p>\u540c\u6642\u4e5f\u9700\u8981\u7dad\u8b77\u5728\u7576\u524d\u5206\u6cbb\u5230\u7684\u503c\u57df\u4e0b\u7684\u8a62\u554f\u7de8\u865f\uff0c\u6211\u5011\u628a\u5b83\u53eb\u505a \\([ql,qr]\\)</p> <p>\u82e5\u8a62\u554f\u4e26\u6c92\u6709\u55ae\u8abf\u6027\uff0c\u90a3\u5c31\u5fc5\u9808\u81ea\u5df1\u8dd1\u904e \\(ql\\sim qr\\)\uff0c\u518d\u958b\u5169\u500b\u9663\u5217\u5c07\u4ed6\u5011\u5206\u6210\u5de6\u53f3\u5169\u985e</p> <p>\u82e5\u8a62\u554f\u6709\u55ae\u8abf\u6027\uff0c\u5c0b\u627e\u5207\u9ede\uff0c\u76f4\u63a5\u5206\u6cbb (\u9023\u7d50 : dp \u512a\u5316 - \u6c7a\u7b56\u6027\u55ae\u8abf)</p> <p>\u6211\u5011\u5047\u8a2d \\([ql,qr]\\) \u7684\u5207\u9ede\u53eb\u505a \\(t\\)\uff0c \\(\\displaystyle\\text{mid}=\\frac{l+r}{2}\\)</p> \\[ \\texttt{solve (l, r, qL, qR)}=\\begin{cases} \\texttt{solve (l, mid, qL, t)} \\\\ \\texttt{solve (mid + 1, r, t + 1, qR)}\\end{cases} \\]"},{"location":"offline/parallel-binsearch/#_3","title":"\u6b65\u9a5f","text":"<ol> <li>\u5c07\u554f\u984c\u8f49\u6210\u55ae\u4e00\u8a62\u554f (\u5982\u679c\u53ea\u6709\u4e00\u500b\u8981\u600e\u9ebc\u505a)</li> <li>\u5982\u4f55\u8a08\u7b97 cost</li> <li>\u4e8c\u5206\u641c\u7684\u7bc4\u570d (\u4e0a\u754c\uff0c\u4e0b\u754c)</li> <li>\u5982\u4f55\u5206\u6cbb</li> </ol>"},{"location":"offline/parallel-binsearch/#_4","title":"\u8907\u96dc\u5ea6\u5206\u6790","text":"<p>\u82e5\u6bcf\u6b21\u5207\u4e2d\u4f4d\u6578\uff0c\u905e\u8ff4\u6df1\u5ea6\u70ba \\(O(\\log n)\\)\uff0c\u82e5\u5207\u503c\u57df\u7bc4\u570d\u7684 mid\uff0c\u6df1\u5ea6\u5247\u70ba \\(O(\\log C)\\)\uff08\u5176\u4e2d \\(C\\) \u70ba\u503c\u57df\u7bc4\u570d\uff09</p>"},{"location":"offline/parallel-binsearch/#_5","title":"\u7bc4\u4f8b","text":""},{"location":"offline/parallel-binsearch/#k","title":"\u975c\u614b\u5340\u9593 k \u5c0f","text":"\u975c\u614b\u5340\u9593\u7b2c k \u5c0f \u6d1b\u8c37 P3834 - \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 2 <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\\(q\\) \u7b46\u8a62\u554f</p> <ul> <li>\\(\\text{query(}a_l\\sim a_r,k):\\) \u56de\u7b54 \\(a_l\\sim a_r\\) \u4e2d\u7b2c \\(k\\) \u5c0f\u7684\u6578\u503c\u662f\u591a\u5c11</li> </ul> <p>\\(n,q\\le 2\\times 10^5,|a_i|\\le 10^9\\)</p> \u5206\u6790 <p>BIT \u8907\u96dc\u5ea6 \\(O(n\\log n \\log C)\\)\uff0c\u82e5\u7528\u524d\u7db4\u548c\u5247\u70ba \\(O(n\\log C)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n#define lowbit(x) (x &amp; (-x))\n\nusing namespace std;\n\nconst int MAXN = 3e5 + 5;\n\nstruct BIT {\n    int n;\n    vector&lt;int&gt; bit;\n\n    void init(int _n) {\n        n = _n;\n        bit.resize(n + 1);\n    }\n\n    void add(int x, int d) {\n        while (x &lt;= n) {\n            bit[x] += d;\n            x += lowbit(x);\n        }\n    }\n\n    int query(int x) {\n        int ret = 0;\n        while (x &gt; 0) {\n            ret += bit[x];\n            x -= lowbit(x);\n        }\n        return ret;\n    }\n} bit;\n\nstruct qry {\n    int l, r, k, id;\n};\n\nint n, q;\nint arr[MAXN], a[MAXN], ans[MAXN];\n\nvoid solve(int l, int r, vector&lt;int&gt; &amp;idx, vector&lt;qry&gt; &amp;q) {\n    if (l == r) {\n        for (auto [ql, qr, k, id] : q) {\n            ans[id] = l;\n        }\n        return;\n    }\n\n    int mid = (l + r) / 2;\n\n    vector&lt;int&gt; iLeft, iRight;\n    for (auto id : idx) {\n        if (a[id] &lt;= mid) {\n            bit.add(id, 1);\n            iLeft.pb(id);\n        } else {\n            iRight.pb(id);\n        }\n    }\n\n    vector&lt;qry&gt; qLeft, qRight;\n    for (auto [ql, qr, k, id] : q) {\n        int t = bit.query(qr) - bit.query(ql - 1);\n        if (k &lt;= t) {\n            qLeft.pb({ql, qr, k, id});\n        } else {\n            qRight.pb({ql, qr, k - t, id});\n        }\n    }\n\n    for (auto id : idx) {\n        if (a[id] &lt;= mid) bit.add(id, -1);\n    }\n    vector&lt;int&gt;().swap(idx);\n    vector&lt;qry&gt;().swap(q);\n\n    solve(l, mid, iLeft, qLeft);\n    solve(mid + 1, r, iRight, qRight);\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    vector&lt;int&gt; d;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; arr[i];\n        d.pb(arr[i]);\n    }\n    sort(ALL(d));\n    d.resize(unique(ALL(d)) - d.begin());\n\n    vector&lt;int&gt; idx;\n    for (int i = 1; i &lt;= n; i++) {\n        a[i] = lower_bound(ALL(d), arr[i]) - d.begin() + 1;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        idx.pb(i);\n    }\n    vector&lt;qry&gt; qry;\n    for (int i = 1; i &lt;= q; i++) {\n        int l, r, k;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n        qry.pb({l, r, k, i});\n    }\n    bit.init(n);\n\n    solve(1, d.size(), idx, qry);\n    for (int i = 1; i &lt;= q; i++) {\n        cout &lt;&lt; d[ans[i] - 1] &lt;&lt; \"\\n\";\n    }\n}\n</code></pre>"},{"location":"offline/parallel-binsearch/#k_1","title":"\u52d5\u614b\u5340\u9593 k \u5c0f","text":"\u6d1b\u8c37 P2617 - Dynamic Rankings <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\\(q\\) \u7b46\u8a62\u554f</p> <ul> <li>\\(\\text{query(}a_l\\sim a_r,k):\\) \u56de\u7b54 \\(a_l\\sim a_r\\) \u4e2d\u7b2c \\(k\\) \u5c0f\u7684\u6578\u503c\u662f\u591a\u5c11</li> <li>\\(\\text{modify(}a_i,x):\\) \u5c07 \\(a_i\\) \u7684\u6578\u503c\u6539\u6210 \\(x\\)</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <ol> <li>\u628a\u539f\u5148 \\(a_i\\) \u7684\u8ca2\u737b\u7d66\u6263\u9664</li> <li>\u5c07 \\(x\\) \u7684\u8ca2\u737b\u52a0\u5165</li> </ol> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define lowbit(x) (x &amp; (-x))\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, m, cnt = 0, tot = 0;\nint a[maxn], ans[maxn];\n\nstruct query {\n    int type, x, y, k, id;\n    // 0, l, r, k, qry id\n    // 1, index, number, 1/-1 add or del, qry id\n};\n\nquery q1[2 * maxn], q2[2 * maxn], q[2 * maxn];\nquery qry[maxn];\n\nstruct BIT {\n    vector&lt;int&gt; bit;\n\n    void init() {\n        bit.resize(n + 1);\n    }\n\n    void add(int x, int d) {\n        while (x &lt;= n) {\n            bit[x] += d;\n            x += lowbit(x);\n        }\n    }\n\n    int query(int x) {\n        int ret = 0;\n        while (x &gt; 0) {\n            ret += bit[x];\n            x -= lowbit(x);\n        }\n        return ret;\n    }\n} bit;\n\nvoid divide(int l, int r, int qL, int qR) {\n    if (l &gt; r || qL &gt; qR) return;\n    if (l == r) {\n        for (int i = qL; i &lt;= qR; i++) {\n            if (q[i].type == 0) {\n                ans[q[i].id] = l;\n            }\n        }\n        return;\n    }\n\n    int mid = (l + r) / 2;\n\n    int cnt1 = 0, cnt2 = 0;\n    for (int i = qL; i &lt;= qR; i++) {\n        if (q[i].type == 0) {\n            int t = bit.query(q[i].y) - bit.query(q[i].x - 1);\n            if (q[i].k &lt;= t) {\n                q1[++cnt1] = q[i];\n            } else {\n                q[i].k -= t, q2[++cnt2] = q[i];\n            }\n        } else {\n            if (q[i].y &lt;= mid) {\n                bit.add(q[i].x, q[i].k);  // q[i].x\n                q1[++cnt1] = q[i];\n            } else {\n                q2[++cnt2] = q[i];\n            }\n        }\n    }\n\n    // undo\n    for (int i = 1; i &lt;= cnt1; i++)\n        if (q1[i].type == 1) bit.add(q1[i].x, -q1[i].k);\n    for (int i = 1; i &lt;= cnt1; i++) q[qL + i - 1] = q1[i];\n    for (int i = 1; i &lt;= cnt2; i++) q[qL + cnt1 + i - 1] = q2[i];\n\n    divide(l, mid, qL, qL + cnt1 - 1);\n    divide(mid + 1, r, qL + cnt1, qR);\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n\n    int x;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; x;\n        a[i] = x;\n        q[++cnt] = {1, i, a[i], 1, -1};\n    }\n\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, k;\n        char type;\n        cin &gt;&gt; type;\n        if (type == 'Q') {\n            cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;\n            q[++cnt] = {0, x, y, k, ++tot};\n        } else {\n            cin &gt;&gt; x &gt;&gt; y;\n            q[++cnt] = {1, x, a[x], -1, 0};\n            q[++cnt] = {1, x, a[x] = y, 1, 0};\n        }\n    }\n\n    bit.init();\n\n    divide(-2e9, 2e9, 1, cnt);\n\n    for (int i = 1; i &lt;= tot; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n    }\n}\n</code></pre>"},{"location":"offline/parallel-binsearch/#_6","title":"\u4f8b\u984c","text":""},{"location":"offline/parallel-binsearch/#apcs","title":"APCS \u771f\u5047\u5b50\u5716","text":"zerojudge g598. 4. \u771f\u5047\u5b50\u5716 <p>\u6709 \\(n\\) \u500b\u9ede\uff0c\\(m\\) \u500b \\(\\texttt{pair}(x,y)\\) \u4ee3\u8868 \\(x\\) \u8ddf \\(y\\) \u5728\u4e0d\u540c\u7d44</p> <p>\u518d\u7d66\u4f60 \\(p\\) \u7d44\u8cc7\u6599\uff0c\u6bcf\u7d44\u8cc7\u6599\u6709 \\(k\\) \u500b \\(\\texttt{pair}(x,y)\\) \u4ee3\u8868 \\(x\\) \u8ddf \\(y\\) \u5728\u4e0d\u540c\u7d44</p> <p>\u4f60\u8981\u8f38\u51fa\u54ea\u5e7e\u7b46\u8cc7\u6599\u8ddf\u539f\u672c\u7684 \\(m\\) \u500b \\(\\texttt{pair}\\) \u7522\u751f\u77db\u76fe</p> <p>\u984c\u76ee\u4fdd\u8b49\u8f38\u5165\u7684\u8cc7\u6599\u5169\u5169\u4e4b\u9593\u4e0d\u77db\u76fe</p> \u601d\u8def <p>\u6cd5 1 : </p> <p>\u6280\u5de7 : \u6700\u5927\u908a\u6700\u5c0f\u5316\u751f\u6210\u6a39 \u6cd53</p> <p>\u8003\u616e\u627e\u7b2c\u4e00\u500b\u51fa\u932f\u7684\u5730\u65b9\uff0c\\(\\displaystyle \\text{mid}=\\frac{l+r}{2}=t\\)</p> <p>\u6aa2\u67e5\u53ea\u7528 \\(\\le t\\) \u7684\u8cc7\u6599\u806f\u96c6\u662f\u5426\u77db\u76fe</p> <ul> <li>\u82e5\u77db\u76fe\uff0c\u4ee3\u8868 \\(ans\\le t\\)\uff0c\u522a\u6389\u5f8c\u9762\u7684\uff0c\u5c11\u4e00\u534a</li> <li>\u82e5\u6c92\u77db\u76fe\uff0c\u4ee3\u8868 \\(ans&gt; t\\)\uff0c\u5c07\u524d\u9762\u7684\u4e8c\u5206\u5716\u7e2e\u9ede\uff0c\u5c11\u4e00\u534a</li> </ul> <p>\u8907\u96dc\u5ea6 : \\(\\displaystyle T(p)=T(\\frac{p}{2})+O(p\\times k)\\Rightarrow O(p\\times k)\\)</p> <p>\u6cd5 2 : rollback DSU</p> <p>\u8a3b : \u5982\u679c\u8cc7\u6599\u5169\u5169\u4e4b\u9593\u53ef\u4ee5\u77db\u76fe\u4e5f\u662f\u53ef\u4ee5\u505a\u7684</p> <p>\u5c07\u7b2c \\(i\\) \u500b\u8cc7\u6599\u7684 \\(k\\) \u500b \\(\\texttt{pair}\\) \u52a0\u9032 DSU\uff0c\u5224\u65b7\uff0croll back</p> <p>\u8907\u96dc\u5ea6 : \\(O(p\\times k \\times \\log C)\\)</p>"},{"location":"offline/parallel-binsearch/#atcoder-stamp-rally","title":"Atcoder Stamp Rally","text":"Atcoder AGC002 D - Stamp Rally <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u908a\u7684\u7de8\u865f \\(1 \\sim m\\)</p> <p>\\(q\\) \u7b46\u8a62\u554f \\(x, y, z\\)</p> <p>\u56de\u7b54\u5f9e \\(x\\) \u9ede\u51fa\u767c\u548c\u5f9e \\(y\\) \u9ede\u8d70\u7684\u300c\u9ede\u96c6\u806f\u96c6\u5927\u5c0f\u300d\u81f3\u5c11\u662f \\(z\\) \u7684\u6700\u5927\u300c\u908a\u300d\u7de8\u865f\u6700\u5c0f\u503c</p> <ul> <li>\\(n,m,q \\le 10^5\\)</li> </ul> \u601d\u8def <p>\u66b4\u529b\u4f5c\u6cd5</p> <p>\u6211\u5011\u4e8c\u5206\u641c \\(\\displaystyle \\text{mid}=\\frac{l+r}{2}=t\\) </p> <p>\u6aa2\u67e5\u5982\u679c\u53ea\u8d70 \\(\\le t\\) \u7684\u908a : </p> <ul> <li> <p>\\(x\\) \u548c \\(y\\) \u662f\u5426\u5728\u540c\u4e00\u500b\u9023\u901a\u584a</p> </li> <li> <p>\u9023\u901a\u584a\u5927\u5c0f\u662f\u5426 \\(\\ge z\\)</p> </li> </ul> <p>\u8907\u96dc\u5ea6 : \\(O(q\\times (n+m))\\)</p> <p>\u9019\u908a\u6211\u5011\u5f15\u5165\u4e00\u500b\u6280\u5de7\uff0c\u4e0b\u9762\u7684\u65b9\u6cd5\u6703\u7528\u5230</p> <p>\u6280\u5de7\u8a73\u898b : \u6700\u5927\u908a\u6700\u5c0f\u5316\u751f\u6210\u6a39 \u6cd53</p> <p>\u65b9\u6cd5\u4e00 : \u628a graph \u62c6\u534a\uff0c\u5169\u500b\u5b50\u554f\u984c\u5716\u90fd\u53ea\u6709\u672c\u4f86\u7684\u4e00\u534a</p> <ul> <li> <p>\\(ans \\le t\\) \u5c11\u4e00\u534a\u7684 edge</p> </li> <li> <p>\\(ans &gt; t\\) \u5c11\u4e00\u534a\u7684 edge\uff0c\u7e2e\u9ede</p> </li> </ul> <p>\u6642\u9593\u8907\u96dc\u5ea6 : \\(O(m \\log m)\\)</p> <p>\u7a7a\u9593\u8907\u96dc\u5ea6 : \\(O(m)\\)<sup>1</sup></p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Edge {\n    int u, v, w;\n};\n\nstruct qry {\n    int x, y, z, id;\n};\n\nstruct Graph {\n   public:\n    Graph(int n) : n(n) {\n        par = vector&lt;int&gt;(n);\n        sz = vector&lt;int&gt;(n, 1);\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    void add_edge(const Edge&amp; e) {\n        int u = find(e.u), v = find(e.v);\n        if (u == v) return;\n        par[u] = v;\n        sz[v] += sz[u];\n        sz[u] = 0;\n    }\n    bool check(const qry&amp; q) {\n        int u = find(q.x), v = find(q.y);\n        if (u != v) {\n            return sz[u] + sz[v] &gt;= q.z;\n        }\n        return sz[u] &gt;= q.z;\n    }\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n    int size() {\n        return n;\n    }\n\n    vector&lt;int&gt; sz;\n\n   private:\n    int n;\n    vector&lt;int&gt; par;\n};\n\nconst int maxn = 3e5 + 5;\nint ans[maxn];\nvector&lt;Edge&gt; edges;\nvector&lt;qry&gt; queries;\nvector&lt;Graph&gt; g;\n\nvoid shrink(vector&lt;Edge&gt;&amp; edge, vector&lt;qry&gt;&amp; q, Graph&amp; G) {\n    // query \u6709\u7528\u5230\u7684 node \u624d\u8981\u5b58\n    // \u76f8\u540c CC \u7684\u9ede\uff0c\u8981\u8b8a\u6210\u540c\u6a23\u7de8\u865f\n    // \u65b0\u5716\u7684\u9ede\u908a\u865f\u662f 0 ~ (k-1)\n    int n = G.size();\n    vector&lt;bool&gt; need(n, false);\n\n    for (auto [x, y, z, id] : q) {\n        need[G.find(x)] = true;\n        need[G.find(y)] = true;\n    }\n    for (auto [u, v, w] : edge) {\n        need[G.find(u)] = true;\n        need[G.find(v)] = true;\n    }\n\n    vector&lt;int&gt; new_id(n, -1);\n    vector&lt;int&gt; sz;\n    int k = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (need[i]) {\n            new_id[i] = k++;\n            sz.push_back(G.sz[i]);\n        }\n    }\n\n    for (auto&amp; [x, y, z, id] : q) {\n        x = new_id[G.find(x)];\n        y = new_id[G.find(y)];\n    }\n    for (auto&amp; [u, v, w] : edge) {\n        u = new_id[G.find(u)];\n        v = new_id[G.find(v)];\n    }\n    G = Graph(k);\n    for (int i = 0; i &lt; k; i++) G.sz[i] = sz[i];\n}\n\nvoid solve(int el, int er, vector&lt;Edge&gt;&amp; edge, vector&lt;qry&gt;&amp; q, Graph&amp; G) {\n    int emid = (el + er) / 2;\n\n    if (el == er) {\n        for (auto [x, y, z, id] : q) {\n            ans[id] = el;\n        }\n        return;\n    }\n\n    shrink(edge, q, G);\n\n    Graph gLeft = G;\n    Graph&amp; gRight = G;\n\n    vector&lt;Edge&gt; eLeft, eRight;\n    for (auto [u, v, w] : edge) {\n        if (w &lt;= emid) {\n            G.add_edge({u, v, w});\n            eLeft.pb({u, v, w});\n        } else {\n            eRight.pb({u, v, w});\n        }\n    }\n    vector&lt;qry&gt; qLeft, qRight;\n    for (auto query : q) {\n        if (G.check(query)) {\n            qLeft.pb(query);\n        } else {\n            qRight.pb(query);\n        }\n    }\n\n    solve(el, emid, eLeft, qLeft, gLeft);\n    solve(emid + 1, er, eRight, qRight, gRight);\n}\n\nint n, m, q;\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n\n    int u, v;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        u--, v--;\n        edges.pb({u, v, i});\n    }\n    cin &gt;&gt; q;\n    int x, y, z;\n    for (int i = 0; i &lt; q; i++) {\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        x--, y--;\n        queries.pb({x, y, z, i});\n    }\n}\n\nvoid work() {\n    // g.resize(21);\n    Graph G(n);\n    solve(0, m - 1, edges, queries, G);\n\n    for (int i = 0; i &lt; q; i++) {\n        cout &lt;&lt; ans[i] + 1 &lt;&lt; '\\n';\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n}\n</code></pre> <p>\u65b9\u6cd5\u4e8c : \u5b58 \\(\\log m\\) \u500b \\(n\\text{-vertex graph}\\)</p> <p>\u70ba\u4e86\u907f\u514d\u6bcf\u6b21\u90fd\u8907\u88fd\u4e00\u6b21\u8cc7\u6599\u7d50\u69cb\uff0c\u53ef\u4ee5\u958b \\(\\log m\\) \u500b\u8cc7\u6599\u7d50\u69cb\u6162\u6162\u9577</p> <p> </p> <p>\u6642\u9593\u8907\u96dc\u5ea6 : \\(O(m \\log m + q)=O(m\\log m)\\)</p> <p>\u7a7a\u9593\u8907\u96dc\u5ea6 : \\(O(m \\log m)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Edge {\n    int u, v, w;\n};\n\nstruct qry {\n    int x, y, z, id;\n};\n\nint n, m, q;\n\nstruct Graph {\n    Graph() {\n        par = vector&lt;int&gt;(n + 1);\n        sz = vector&lt;int&gt;(n + 1);\n        for (int i = 1; i &lt;= n; i++) {\n            par[i] = i;\n            sz[i] = 1;\n        }\n    }\n    void add_edge(const Edge&amp; e) {\n        int u = find(e.u), v = find(e.v);\n        if (u == v) return;\n        par[u] = v;\n        sz[v] += sz[u];\n        sz[u] = 0;\n    }\n    bool check(const qry&amp; q) {\n        int u = find(q.x), v = find(q.y);\n        if (u != v) {\n            return sz[u] + sz[v] &gt;= q.z;\n        }\n        return sz[u] &gt;= q.z;\n    }\n\n   private:\n    vector&lt;int&gt; par;\n    vector&lt;int&gt; sz;\n\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n};\n\nint ans[maxn];\nvector&lt;Edge&gt; edges;\nvector&lt;qry&gt; queries;\nvector&lt;Graph&gt; g;\n\nvoid solve(int depth, int el, int er, vector&lt;Edge&gt;&amp; edge, vector&lt;qry&gt;&amp; q) {\n    int emid = (el + er) / 2;\n    Graph&amp; G = g[depth];\n\n    if (el == er) {\n        for (auto [x, y, z, id] : q) {\n            ans[id] = el;\n        }\n\n        for (auto [u, v, w] : edge) {\n            if (w &lt;= emid) {\n                G.add_edge({u, v, w});\n            }\n        }\n\n        vector&lt;qry&gt;().swap(q);\n        vector&lt;Edge&gt;().swap(edge);\n        return;\n    }\n\n    vector&lt;Edge&gt; eLeft, eRight;\n    for (auto [u, v, w] : edge) {\n        if (w &lt;= emid) {\n            G.add_edge({u, v, w});\n            eLeft.pb({u, v, w});\n        } else {\n            eRight.pb({u, v, w});\n        }\n    }\n    vector&lt;qry&gt; qLeft, qRight;\n    for (auto query : q) {\n        if (G.check(query)) {\n            qLeft.pb(query);\n        } else {\n            qRight.pb(query);\n        }\n    }\n\n    for (auto [u, v, w] : edge) {\n        if (w &gt; emid) {\n            G.add_edge({u, v, w});\n        }\n    }\n    vector&lt;qry&gt;().swap(q);\n    vector&lt;Edge&gt;().swap(edge);\n\n    solve(depth + 1, el, emid, eLeft, qLeft);\n    solve(depth + 1, emid + 1, er, eRight, qRight);\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n\n    int u, v;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        edges.pb({u, v, i});\n    }\n    cin &gt;&gt; q;\n\n    int x, y, z;\n    for (int i = 1; i &lt;= q; i++) {\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        queries.pb({x, y, z, i});\n    }\n}\n\nvoid work() {\n    g.resize(21);\n    solve(0, 1, m, edges, queries);\n\n    for (int i = 1; i &lt;= q; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n    }\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n}\n</code></pre>"},{"location":"offline/parallel-binsearch/#gcd","title":"\u5340\u9593 gcd","text":"\u539f\u5275 - \u5340\u9593 gcd <p>\u7d66\u4e00\u500b\u6b63\u6574\u6578\u9663\u5217\uff0c\u67e5\u8a62\u6709\u5e7e\u500b\u5340\u9593\u7684 \\(\\gcd = 1\\) </p> <ul> <li>\\(O(n\\log n)\\) </li> </ul> \u601d\u8def <p>\u9019\u984c\u5176\u5be6\u5c31\u76f4\u63a5 sparse table \u9810\u8655\u7406\uff0ctwo pointer \u7dad\u8b77\u5373\u53ef</p> <p>\u4f46\u662f\u6211\u5011\u9084\u662f\u53ef\u4ee5\u8a66\u8a66\u770b\u4ee5\u6574\u9ad4\u4e8c\u5206\u641c\u7684\u89c0\u9ede\u5207\u5165</p> <p>\u5c0d\u65bc\u6bcf\u500b \\(l\\)\uff0c\u770b\u6700\u8fd1\u7684 \\(r\\) \u4f7f\u5f97 \\(\\gcd (a_l,\\cdots a_r)=1\\)</p> <p>\u65b9\u6cd51 : \u6574\u9ad4\u4e8c\u5206</p> <p>\u5047\u8a2d\u76ee\u524d\u6211\u5011\u5728\u8655\u7406\u5de6\u754c \\(=[ql,qr]\\) \u7684\u9019\u4e9b query\uff0c\u4ed6\u5011\u7684\u53f3\u754c\u5728 \\([l, r]\\) \u9019\u500b\u7bc4\u570d</p> <p>\\(\\displaystyle \\text{mid}=\\frac{l+r}{2}\\)\uff0c\u5de6\u754c\u5728 \\([\\text{mid}+1,r]\\) \u9019\u4e9b\u7bc4\u570d\u7684\u90fd\u53ef\u4ee5\u5f80\u53f3\u905e\u8ff4</p> <p>\u518d\u4f86\u8003\u616e\u5de6\u754c\u5728 \\([ql, \\text{mid}]\\) \u7684\u9019\u4e9b query</p> <p>\u6211\u5011\u8981\u5c0b\u627e\u5207\u9ede \\(p\\) \u4f7f\u5f97\u5de6\u754c\u5728 \\(p\\) \u9019\u500b\u4f4d\u7f6e\u4ed6\u7684\u53f3\u754c\u525b\u597d \\(\\ge \\text{mid}\\) </p> <p>\\(\\texttt{solve (ql, p - 1, l, mid)},\\texttt{solve (p, qr, mid + 1, r)}\\)</p> <p>\u65b9\u6cd52 : \u500d\u589e\u6cd5</p> <p>\u5047\u8a2d \\(n=32\\)\uff0c\u6211\u5011\u8003\u616e\u7b2c \\(i\\) \u500b query</p> <p>\u6211\u5011\u4ee4\u7576\u524d\u5408\u6cd5\u5340\u9593\u70ba \\([i, r_i]\\)</p> <p>\u770b\u80fd\u4e0d\u80fd\u5c07 \\(r_i\\) \u5f80\u53f3\u79fb\u52d5 \\(32\\) \u6b65</p> <p>\u770b\u80fd\u4e0d\u80fd\u5c07 \\(r_i\\) \u5f80\u53f3\u79fb\u52d5 \\(16\\) \u6b65</p> <p>\u770b\u80fd\u4e0d\u80fd\u5c07 \\(r_i\\) \u5f80\u53f3\u79fb\u52d5 \\(8\\) \u6b65</p> <p>\\(\\vdots\\)</p> \u865b\u64ec\u78bc <pre><code>init r[i] = i - 1, g[i] = 0;\n\nfor (d = n, n / 2, n / 4, ...)\n    build v[i] = gcd(a[i],..., a[i + d - 1])\n\n    for i = 1 ~ Q :\n        if gcd(g[i], v[r[i] + 1]) != 1 :\n            g[i] = gcd(g[i], v[r[i] + 1])\n            r_i = r_i + d\n</code></pre>"},{"location":"offline/parallel-binsearch/#_7","title":"\u6210\u5927\u8cfd \u8eab\u5206\u8abf\u67e5","text":"2023 \u6210\u5927\u8cfd\u521d\u8cfd pD.\u8eab\u5206\u8abf\u67e5 <p>\u4f9d\u5e8f\u7d66\u4f60 \\(K\\) \u500b \\(\\texttt{pair}(x_i,y_i)\\) \u4ee3\u8868 \\(x\\) \u8ddf \\(y\\) \u5728\u4e0d\u540c\u7d44</p> <p>\u5df2\u77e5\u7de8\u865f \\(1\\) \u7684\u7d44\u5225\uff0c\u6c42\u79fb\u9664 \\([l,r]\\) \u7684 \\(\\texttt{pair}\\) \u6eff\u8db3</p> <ol> <li>\u5269\u4e0b\u7684 \\(\\texttt{pair}\\) \u9084\u662f\u80fd\u78ba\u5b9a \\(X\\) \u7684\u7d44\u5225</li> <li>\\([l,r]\\) \u9577\u5ea6\u6700\u5927</li> <li>\u82e5\u9084\u662f\u6709\u591a\u7d44\u89e3\uff0c\u8f38\u51fa\u5de6\u754c\u6bd4\u6700\u5c0f\u7684</li> </ol> <p>\u6c42 \\(l,r\\)</p> \u601d\u8def <p>\u5982\u679c\u79fb\u9664 [i, emid] \u53ef\u4ee5\u9023\u901a\uff0c\u90a3\u4f60\u7684 ans[i] \u6709\u53ef\u80fd\u662f emid\uff0c\u4e5f\u6709\u53ef\u80fd\u5728 emid \u4e4b\u5f8c</p> <p>\u90a3\u4e0d\u5982\u6211\u5011\u628a ans[i] \u7684\u5b9a\u7fa9\u5f80\u5f8c\u632a\u4e00\u683c\u5462 ?</p> <p>ans[i] \u8868\u793a</p> <ul> <li> <p>\u79fb\u9664 [i, ans[i] - 1] \u6703\u9023\u901a</p> </li> <li> <p>\u79fb\u9664 [i, ans[i]] \u5247\u4e0d\u6703\u9023\u901a\uff0c\u6216\u8005 ans[i] = m</p> </li> </ul> <p>\u5c0d\u65bc\u6bcf\u500b i \u8981\u4e8c\u5206\u641c\u5230 ans[i] \u6eff\u8db3\uff1a\u79fb\u9664 [i, ans[i]] \u662f\u4e0d\u9023\u901a\u7684</p> <p>\u4e00\u958b\u59cb\u5728 main \u88e1\u9762\u8981\u5148\u627e qr \u7684\u76ee\u7684\u5c31\u662f\u70ba\u4e86\u4fdd\u8b49 i = [ql, qr] \u4e4b\u9593\u7684 i \u90fd\u53ef\u4ee5\u627e\u5230\u4e0a\u9762\u5b9a\u7fa9\u7684 ans[i] \u5982\u679c main \u6c92\u6709\u5148\u627e qr\uff0c\u6709\u4e9b i \u53ef\u80fd\u4e0d\u7ba1\u5f80\u5f8c\u79fb\u9664\u591a\u5c11\u908a\u90fd\u4e0d\u53ef\u80fd\u4e0d\u9023\u901a</p> <p>DC \u7684\u4efb\u4f55\u5b50\u554f\u984c\u90fd\u8981\u6eff\u8db3\uff1a \u5c0d\u65bc\u5728 i = [ql, qr] \u4e4b\u9593\u7684, ans[i] \u4e00\u5b9a\u4ecb\u65bc [el, er]</p> <p>\u4e8c\u5206\u641c\u5c0b\u7684\u8d77\u59cb\u689d\u4ef6\u5f88\u91cd\u8981\uff0c\u4e0a\u9762\u505a\u5f88\u591a\u4e8b\u60c5\u90fd\u662f\u5728\u78ba\u4fdd\uff1a\u641c\u5c0b\u7684\u904e\u7a0b\u4e2d\u7b54\u6848\u6703\u4ecb\u65bc\u76ee\u524d         \u7684\u4e0b\u754c\u8ddf\u4e0a\u754c\u4e4b\u9593</p> <p>ans[i] : \u79fb\u9664 [i, ans[i]] \u4e0d\u80fd\u9023\u901a, \u79fb\u9664 [i, ans[i]-1] \u53ef\u4ee5\u9023\u901a</p> <p>\u5982\u679c\u79fb\u9664 [i, emid] \u53ef\u4ee5\u9023\u901a \u21d2 emid &lt; ans[i]</p> <p>\u5982\u679c\u79fb\u9664 [i, emid] \u4e0d\u80fd\u9023\u901a \u21d2 ans[i] &lt;= emid</p> code (44 points) <pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nstruct Edge {\n    int u, v, w;\n};\n\nstruct Graph {\n    Graph(int n, int s, int t) : s(s), t(t) {\n        par = vector&lt;int&gt;(n);\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    void add_edge(const Edge&amp; e) {\n        int u = find(e.u), v = find(e.v);\n        par[u] = v;\n    }\n    bool connected() {\n        return find(s) == find(t);\n    }\n\n   private:\n    int s, t;\n    vector&lt;int&gt; par;\n\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n};\n\nint n, m, x;\nvector&lt;Edge&gt; edges;\nvector&lt;int&gt; ans;\n\nint s = 0, t;\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;\n    t--;  // to 0-base\n\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--, v--;  // to 0-base\n        w--;\n        edges.push_back({u, v, w});\n    }\n}\n\n// ans[i] : \u79fb\u9664 [i, ans[i]] \u4e0d\u80fd\u9023\u901a, \u79fb\u9664 [i, ans[i]-1] \u53ef\u4ee5\u9023\u901a\n// \u5982\u679c\u79fb\u9664 [i, emid] \u53ef\u4ee5\u9023\u901a \\imply emid &lt; ans[i]\n// \u5982\u679c\u79fb\u9664 [i, emid] \u4e0d\u80fd\u9023\u901a \\imply ans[i] &lt;= emid\n//\nvoid DC(Graph g, int el, int er, int ql, int qr) {\n    // \u5047\u8a2d edges[0, ql-1] \u548c edges[er+1, m-1] \u90fd\u5df2\u7d93\u52a0\u5165 g\n    // \u5982\u679c\u79fb\u9664 [qr, er] \u4e00\u5b9a\u4e0d\u9023\u901a\u3002 TODO: \u5beb\u4e00\u500b\u8ff4\u5708\u6aa2\u67e5\n    if (el == er) {\n        for (int i = ql; i &lt;= qr; i++) ans[i] = er;\n        return;\n    }\n    int emid = (el + er) / 2;\n\n    Graph h = g;\n    for (int i = emid + 1; i &lt;= er; i++) {\n        h.add_edge(edges[i]);\n    }\n\n    int qmid = emid;\n    for (int i = ql; i &lt;= emid; i++) {\n        if (i &gt; ql) h.add_edge(edges[i - 1]);\n        if (h.connected()) {\n            // \u79fb\u9664 [i, emid] \u6703\u9023\u901a\n            // \u79fb\u9664 [i-1, emid] \u4e0d\u9023\u901a\n            qmid = i - 1;\n            break;\n        }\n    }\n\n    Graph gl = g;\n    Graph gr = g;\n    for (int i = emid + 1; i &lt;= er; i++) gl.add_edge(edges[i]);\n    for (int i = ql; i &lt;= qmid; i++) gr.add_edge(edges[i]);\n    DC(gl, el, emid, ql, qmid);\n    DC(gr, emid + 1, er, qmid + 1, qr);\n}\n\nvector&lt;int&gt; color;\nvector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; wg;\nvoid dfs(int u) {\n    for (auto [v, c] : wg[u]) {\n        if (color[v] == -1) {\n            color[v] = color[u] ^ c;\n            dfs(v);\n        }\n    }\n}\n\nint main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    init();\n\n    if (s == t) {\n        cout &lt;&lt; n &lt;&lt; ' ' &lt;&lt; 1 &lt;&lt; ' ' &lt;&lt; n &lt;&lt; ' ' &lt;&lt; 1 &lt;&lt; '\\n';\n        return 0;\n    }\n\n    Graph tmp(n, s, t);\n    int ql = 0, qr = m;\n    for (int i = 0; i &lt; m; i++) {\n        tmp.add_edge(edges[i]);\n        if (tmp.connected()) {\n            qr = i;\n            break;\n        }\n    }\n    if (qr == m) {\n        cout &lt;&lt; -1 &lt;&lt; '\\n';\n        return 0;\n    }\n\n    ans = vector&lt;int&gt;(m, m);\n    DC(Graph(n, s, t), 0, m - 1, ql, qr);\n\n    int len = 0, best_l = -1, best_r = -1;\n    for (int i = 0; i &lt; m; i++) {\n        if (ans[i] - i &gt; len) {\n            len = ans[i] - i;\n            best_l = i;\n            best_r = ans[i] - 1;\n        }\n    }\n\n    color = vector&lt;int&gt;(n, -1);\n    wg.resize(n);\n    for (int i = 0; i &lt; m; i++) {\n        if (best_l &lt;= i &amp;&amp; i &lt;= best_r) continue;\n        Edge e = edges[i];\n        wg[e.u].push_back({e.v, e.w});\n        wg[e.v].push_back({e.u, e.w});\n    }\n    color[s] = 0;\n    dfs(s);\n\n    cout &lt;&lt; len &lt;&lt; ' ';\n    cout &lt;&lt; best_l + 1 &lt;&lt; ' ' &lt;&lt; best_r + 1 &lt;&lt; ' ';\n    cout &lt;&lt; color[t] + 1 &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> code(by algoseacow) <pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nstruct Edge {\n    int u, v, w;\n};\n\nstruct Graph {\n    Graph(int n, int s, int t) : s(s), t(t) {\n        par = vector&lt;int&gt;(n);\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    void add_edge(const Edge&amp; e) {\n        int u = find(e.u), v = find(e.v);\n        par[u] = v;\n    }\n    bool connected() {\n        return find(s) == find(t);\n    }\n    void shrink(vector&lt;Edge&gt;&amp; edges) {\n        int n = par.size();\n\n        vector&lt;bool&gt; used(n);\n        used[find(s)] = true;\n        used[find(t)] = true;\n        for (Edge e : edges) {\n            used[find(e.u)] = true;\n            used[find(e.v)] = true;\n        }\n\n        vector&lt;int&gt; cc(n, -1);\n        int cnt = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (i == find(i) &amp;&amp; used[i] == true) {\n                cc[i] = cnt++;\n            }\n        }\n\n        for (Edge&amp; e : edges) {\n            e.u = cc[find(e.u)];\n            e.v = cc[find(e.v)];\n        }\n        s = cc[find(s)];\n        t = cc[find(t)];\n\n        par = vector&lt;int&gt;(cnt);\n        for (int i = 0; i &lt; cnt; i++) par[i] = i;\n    }\n\n   private:\n    int s, t;\n    vector&lt;int&gt; par;\n\n    int find(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find(par[x]);\n    }\n};\n\nint n, m, x;\nvector&lt;Edge&gt; edges;\nvector&lt;int&gt; ans;\n\nint s = 0, t;\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;\n    t--;  // to 0-base\n\n    for (int i = 0; i &lt; m; i++) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        u--, v--;  // to 0-base\n        w--;\n        edges.push_back({u, v, w});\n    }\n}\n\n// ans[i] : \u79fb\u9664 [i, ans[i]] \u4e0d\u80fd\u9023\u901a, \u79fb\u9664 [i, ans[i]-1] \u53ef\u4ee5\u9023\u901a\n// \u5982\u679c\u79fb\u9664 [i, emid] \u53ef\u4ee5\u9023\u901a \\imply emid &lt; ans[i]\n// \u5982\u679c\u79fb\u9664 [i, emid] \u4e0d\u80fd\u9023\u901a \\imply ans[i] &lt;= emid\n//\nvoid DC(Graph g, int el, int er, int ql, int qr) {\n    // \u5047\u8a2d edges[0, ql-1] \u548c edges[er+1, m-1] \u90fd\u5df2\u7d93\u52a0\u5165 g\n    // \u5982\u679c\u79fb\u9664 [qr, er] \u4e00\u5b9a\u4e0d\u9023\u901a\n    if (ql &gt; qr) return;\n    if (el == er) {\n        for (int i = ql; i &lt;= qr; i++) ans[i] = er;\n        return;\n    }\n\n    // \u5148\u628a\u5716\u8b8a\u5c0f\n    vector&lt;Edge&gt; edges_old(edges.begin() + ql, edges.begin() + er + 1);\n    vector&lt;Edge&gt; edges_new = edges_old;\n    g.shrink(edges_new);\n\n    // \u628a edge[ql, er] \u63db\u6210\u7e2e\u9ede\u5f8c\u7684\n    for (int i = 0; i &lt;= er - ql; i++) edges[ql + i] = edges_new[i];\n\n    int emid = (el + er) / 2;\n    Graph h = g;\n    for (int i = emid + 1; i &lt;= er; i++) {\n        h.add_edge(edges[i]);\n    }\n\n    int qmid = emid;\n    for (int i = ql; i &lt;= emid; i++) {\n        if (i &gt; ql) h.add_edge(edges[i - 1]);\n        if (h.connected()) {\n            // \u79fb\u9664 [i, emid] \u6703\u9023\u901a\n            // \u79fb\u9664 [i-1, emid] \u4e0d\u9023\u901a\n            qmid = i - 1;\n            break;\n        }\n    }\n\n    Graph gl = g;\n    for (int i = emid + 1; i &lt;= er; i++) gl.add_edge(edges[i]);\n    DC(gl, el, emid, ql, qmid);  // edge [0, ql-1], [emid+1, m-1]\n\n    Graph gr = std::move(g);\n    for (int i = ql; i &lt;= qmid; i++) gr.add_edge(edges[i]);\n    DC(gr, emid + 1, er, qmid + 1, qr);  // edge[0, qmid], [er+1,m-1]\n\n    // \u628a edge[ql, qr] \u63db\u56de\u820a\u7de8\u865f\n    for (int i = 0; i &lt;= er - ql; i++) edges[ql + i] = edges_old[i];\n}\n\nvector&lt;int&gt; color;\nvector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; wg;\nvoid dfs(int u) {\n    for (auto [v, c] : wg[u]) {\n        if (color[v] == -1) {\n            color[v] = color[u] ^ c;\n            dfs(v);\n        }\n    }\n}\n\nint main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    init();\n\n    if (s == t) {\n        cout &lt;&lt; n &lt;&lt; ' ' &lt;&lt; 1 &lt;&lt; ' ' &lt;&lt; n &lt;&lt; ' ' &lt;&lt; 1 &lt;&lt; '\\n';\n        return 0;\n    }\n\n    int ql = 0, qr = m;\n\n    Graph tmp(n, s, t);\n    for (int i = 0; i &lt; m; i++) {\n        tmp.add_edge(edges[i]);\n        if (tmp.connected()) {\n            qr = i;\n            break;\n        }\n    }\n    if (qr == m) {\n        cout &lt;&lt; -1 &lt;&lt; '\\n';\n        return 0;\n    }\n\n    //\n    ans = vector&lt;int&gt;(m, m);  // \u79fb\u9664 edge[i, ans[i]-1] \u4e4b\u5f8c\u4f9d\u7136\u662f\u806f\u901a\u7684\n    DC(Graph(n, s, t), 0, m - 1, ql, qr);\n\n    int len = 0, best_l = -1, best_r = -1;\n    for (int i = 0; i &lt; m; i++) {\n        if (ans[i] - i &gt; len) {\n            len = ans[i] - i;\n            best_l = i;\n            best_r = ans[i] - 1;\n        }\n    }\n\n    // \u91cd\u5efa\u4e00\u5f35\u6709\u6b0a\u91cd\u7684\u5716\uff0cdfs \u5224\u65b7 s t \u662f\u4e0d\u662f\u76f8\u540c\u984f\u8272\n    color = vector&lt;int&gt;(n, -1);\n    wg.resize(n);\n    for (int i = 0; i &lt; m; i++) {\n        if (best_l &lt;= i &amp;&amp; i &lt;= best_r) continue;\n        Edge e = edges[i];\n        wg[e.u].push_back({e.v, e.w});\n        wg[e.v].push_back({e.u, e.w});\n    }\n    color[s] = 0;\n    dfs(s);\n\n    // output\n    cout &lt;&lt; len &lt;&lt; ' ';\n    cout &lt;&lt; best_l + 1 &lt;&lt; ' ' &lt;&lt; best_r + 1 &lt;&lt; ' ';\n    cout &lt;&lt; color[t] + 1 &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre>"},{"location":"offline/parallel-binsearch/#boi-2020-joker","title":"BOI 2020 Joker","text":"LOJ #3334. \u300cBalticOI 2020\u300d\u5c0f\u4e11 <p>\u7d66\u4f60 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u7121\u5411\u5716\uff0c\u908a\u4ee5 \\(1\\sim m\\) \u7de8\u865f\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f\uff0c\u7b2c \\(i\\) \u7b46\u8a62\u554f\u554f</p> <ul> <li>\u79fb\u9664\u7de8\u865f\u5728 \\([l_i,r_i]\\) \u5167\u7684\u908a\u662f\u5426\u53ef\u4ee5\u8b93\u5716\u6c92\u6709\u5947\u74b0</li> </ul> <p>\\(n,m,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>ans[i] \u8868\u793a </p> <ul> <li> <p>\u79fb\u9664 [i, ans[i] - 1] \u6709 odd cycle</p> </li> <li> <p>\u79fb\u9664 [i, ans[i]] \u6c92 odd cycle</p> </li> </ul> <p>\u5c0d\u65bc\u6bcf\u500b i\uff0c\u4e8c\u5206\u641c ans[i]\uff0c\u4f7f [i, ans[i]] \u6c92 odd cycle</p> <p>\u518d\u4f86\u8981\u5b9a\u7fa9\u4e0a\u754c\u4e0b\u754c</p> <p>\u4e0b\u754c\u7684\u90e8\u5206\u6709\u53ef\u80fd\u53ea\u79fb\u9664\u7b2c i \u500b\u908a\u5c31\u6c92\u6709 odd cycle \u4e86</p> <p>\u4e0a\u754c\u7684\u90e8\u5206\u5c31\u8981\u4fdd\u8b49\u79fb\u9664 [i, m - 1] \u5c31\u6c92\u6709 odd cycle</p> <p>\u6240\u4ee5\u6211\u5011\u627e\u5230\u7b2c\u4e00\u500b prefix[0, qr] \u6eff\u8db3 :</p> <ul> <li> <p>\u53ea\u7528 [0, qr - 1] \u7684\u908a\u6c92\u6709 odd cycle</p> </li> <li> <p>\u53ea\u7528 [0, qr] \u7684\u908a\u6709 odd cycle</p> </li> </ul> <p>i &gt; qr \u7684\u90e8\u5206\u4e0d\u7ba1\u79fb\u9664\u591a\u5c11\u500b\u908a\u90fd\u9084\u662f\u6703\u6709 odd cycle</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct Edge {\n    int u, v;\n};\n\nstruct Graph {\n    Graph(int n) : n(n) {\n        sz = vector&lt;int&gt;(n, 1);\n        par = vector&lt;int&gt;(n);\n        dis = vector&lt;int&gt;(n);\n        cnt = 0;\n        for (int i = 0; i &lt; n; i++) {\n            par[i] = i;\n        }\n    }\n    void add_edge(const Edge &amp;e) {\n        auto [x, disx] = find(e.u);\n        auto [y, disy] = find(e.v);\n        if (x == y) {\n            // if (disx == disy) =&gt; odd cycle\n            cnt += (disx == disy);\n            stk.push({-1, (disx == disy)});\n            return;\n        }\n\n        if (sz[x] &lt; sz[y]) swap(x, y);\n        sz[x] += sz[y];\n        par[y] = x;\n        dis[y] = disx ^ disy ^ 1;\n        stk.push({x, y});\n    }\n    void undo() {\n        auto [x, y] = stk.top();\n        stk.pop();\n        if (x == -1) {\n            cnt -= y;\n            return;\n        }\n        sz[x] -= sz[y];\n        par[y] = y;\n        dis[y] = 0;\n    }\n    bool check() {\n        // return : \u6709\u6c92\u6709 odd cycle\n        return (cnt &gt; 0);\n    }\n\n   private:\n    int n, cnt;\n    vector&lt;int&gt; sz;\n    vector&lt;int&gt; par;\n    vector&lt;int&gt; dis;\n    stack&lt;pii&gt; stk;\n\n    pii find(int x) {\n        if (par[x] == x)\n            return {x, 0};\n        else {\n            auto [fa, d] = find(par[x]);\n            return {fa, d ^ dis[x]};\n        }\n    }\n};\n\nint n, m, q;\nint ans[maxn];\nvector&lt;Edge&gt; edges;\n\nvoid solve(Graph &amp;g, int el, int er, int ql, int qr) {\n    // [0, ql - 1] and [er + 1, m - 1] \u90fd\u5df2\u52a0\u5165 g\n    if (ql &gt; qr) return;\n    if (el == er) {\n        for (int i = ql; i &lt;= qr; i++) {\n            ans[i] = el;\n        }\n        return;\n    }\n    int emid = (el + er) / 2, qmid = min(emid, qr);\n\n    for (int i = emid + 1; i &lt;= er; i++) {\n        g.add_edge(edges[i]);\n    }\n    int cnt = 0;\n    for (int i = ql; i &lt;= min(emid, qr); i++) {\n        if (i &gt; ql) g.add_edge(edges[i - 1]), cnt++;\n        if (g.check()) {\n            // \u79fb\u9664 [i, emid] \u6709 odd cycle\n            // \u79fb\u9664 [i - 1, emid] \u6c92 odd cycle\n            qmid = i - 1;\n            break;\n        }\n    }\n\n    while (cnt--) {\n        g.undo();\n    }\n\n    solve(g, el, emid, ql, qmid);  // [0, ql - 1] [emid + 1, m - 1]\n\n    for (int i = emid + 1; i &lt;= er; i++) {\n        g.undo();\n    }\n\n    for (int i = ql; i &lt;= qmid; i++) {\n        g.add_edge(edges[i]);\n    }\n\n    solve(g, emid + 1, er, qmid + 1, qr);  // [0, qmid] [er + 1, m - 1]\n    for (int i = ql; i &lt;= qmid; i++) {\n        g.undo();\n    }\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n    int u, v;\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; u &gt;&gt; v;\n        u--, v--;\n        edges.pb({u, v});\n    }\n}\n\n// \u627e\u5230\u6700\u5c0f\u7684 ans[i], \u4f7f\u79fb\u9664 [i, ans[i]] \u6c92 odd cycle\n// \u79fb\u9664 [i, ans[i] - 1] \u6709 odd cycle\n// \u79fb\u9664 [i, ans[i]] \u6c92 odd cycle\n\nvoid build() {\n    // \u4f7f\u5f97 ans[i] \u6709\u4e0a\u754c\n    // TODO : \u627e\u5230\u7b2c\u4e00\u500b i \u4f7f\u5f97 \u7528 [0, i] \u7684 edge \u6709 odd cycle\n    Graph tmp(n);\n    int ql = 0, qr = m;\n    for (int i = 0; i &lt; m; i++) {\n        tmp.add_edge(edges[i]);\n        if (tmp.check()) {\n            qr = i;\n            break;\n        }\n    }\n    if (qr == m) {\n        for (int i = 0; i &lt; m; i++) {\n            ans[i] = i;\n        }\n        return;\n    }\n    for (int i = qr + 1; i &lt; m; i++) {\n        ans[i] = m;\n    }\n\n    Graph g(n);\n    solve(g, 0, m - 1, ql, qr);\n}\n\nvoid work() {\n    build();\n\n    while (q--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        l--, r--;\n        if (ans[l] &lt;= r)\n            cout &lt;&lt; \"NO\\n\";\n        else\n            cout &lt;&lt; \"YES\\n\";\n    }\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n}\n</code></pre>"},{"location":"offline/parallel-binsearch/#poi-2011-meteors","title":"POI 2011 Meteors","text":"POI2011 R3 Day2 Meteors <p>\u7d66\u4f60 \\(N\\) \u500b\u4eba\u7684\u76ee\u6a19\u91d1\u984d \\(V_1,V_2,\\ldots ,V_n\\)\uff0c\u548c \\(M\\) \u584a\u8fb2\u5730 \\(a_1,a_2\\ldots ,a_M\\)\uff0c\u4ee3\u8868\u7b2c \\(i\\) \u584a\u8fb2\u5730\u7684\u4e3b\u4eba\uff0c\u7b2c \\(M\\) \u584a\u8fb2\u5730\u9023\u63a5\u7b2c \\(1\\) \u584a</p> <p>\\(Q\\) \u6b21\u5c0d\u5340\u9593 \\([L,R]\\) \u7684\u8fb2\u5730\u52a0\u4e0a \\(C\\)\uff0c\u554f\u6bcf\u500b\u4eba\u5206\u5225\u5728\u54ea\u6b21\u64cd\u4f5c\u5f8c\u9054\u5230\u76ee\u6a19\uff0c\u6216\u662f\u6c92\u6709\u9054\u5230</p> <p>\\(1\\le N,M,Q\\le 3\\times 10^5,1\\le V_i,C_i\\le 10^9\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b\u4eba\u4e8c\u5206\u641c\u54ea\u4e00\u6b21\u64cd\u4f5c\u5f8c\u9054\u5230\u76ee\u6a19</p> <p>\u90a3\u5c0d\u65bc\u6bcf\u500b\u4eba\u8981\u600e\u9ebc\u8a08\u7b97\u4e00\u5806 query \u7684\u8ca2\u737b\u5462 ?</p> <p>\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 BIT \u7684\u55ae\u9ede\u67e5\u8a62\uff0c\u5340\u9593\u4fee\u6539\u7684\u6280\u5de7</p> <p>\u5c0d\u65bc\u6bcf\u500b\u4eba\u679a\u8209\u4ed6\u6709\u652f\u914d\u7684\u571f\u5730\uff0c\u55ae\u9ede\u67e5\u8a62\u8a72\u571f\u5730\u76ee\u524d\u7684\u6b0a\u503c</p>"},{"location":"offline/parallel-binsearch/#tioj","title":"TIOJ \u738b\u8001\u5148\u751f","text":"TIOJ 1919.\u738b\u8001\u5148\u751f <p>\u7d66\u4f60 \\(N\\) \u500b\u4eba\u7684\u76ee\u6a19\u91d1\u984d \\(V_1,V_2,\\ldots ,V_n\\)\uff0c\u548c \\(M\\) \u584a\u8fb2\u5730 \\(a_1,a_2\\ldots ,a_M\\)\uff0c\u4ee3\u8868\u7b2c \\(i\\) \u584a\u8fb2\u5730\u7684\u4e3b\u4eba</p> <p>\\(Q\\) \u6b21\u5c0d\u5340\u9593 \\([L,R]\\) \u7684\u8fb2\u5730\u52a0\u4e0a \\(C\\)\uff0c\u5982\u679c\u6709\u4eba\u5728\u9019\u500b\u5340\u9593\u5167\u64c1\u6709\u591a\u500b\u571f\u5730\uff0c\u4ed6\u9084\u662f\u53ea\u6703\u88ab\u52a0\u5230\u4e00\u6b21 \\(C\\)\uff0c\u554f\u6bcf\u500b\u4eba\u5206\u5225\u5728\u54ea\u6b21\u64cd\u4f5c\u5f8c\u9054\u5230\u76ee\u6a19\uff0c\u6216\u662f\u6c92\u6709\u9054\u5230</p> <p>\\(1\\le N,M,Q\\le 10^5,1\\le V_i,C_i\\le 10^9\\)</p> \u63d0\u793a <p>\u5982\u679c\u53ea\u6709 \\(1\\) \u500b\u4e3b\u4eba</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b\u4eba\u4e8c\u5206\u641c\u54ea\u4e00\u6b21\u64cd\u4f5c\u5f8c\u9054\u5230\u76ee\u6a19</p> <p>\u90a3\u5c0d\u65bc\u6bcf\u500b\u4eba\u8981\u600e\u9ebc\u8a08\u7b97\u4e00\u5806 query \u7684\u8ca2\u737b\u5462 ?</p> <p>\u5c0d\u65bc \\(i\\) \u652f\u914d\u7684\u6bcf\u584a\u5730\uff0c\u6211\u5011\u8003\u616e\u4ed6\u5f8c\u9762\u7b2c\u4e00\u500b\u51fa\u73fe\u7684\u4f4d\u7f6e</p> <p>\u6211\u5011\u628a\u9019\u584a\u5730\u7684 index \u53eb\u505a \\(i\\)\uff0c\u5f8c\u9762\u7b2c\u4e00\u500b\u51fa\u73fe\u7684 index \u53eb\u505a \\(j\\)</p> <p>\u90a3\u5c31\u662f\u8981\u8a08\u7b97\u7b26\u5408 \\(\\begin{cases}L\\le i \\\\ j &gt; R \\\\ i \\le R\\end{cases}\\) \u7684 \\([L,R]\\) \u7684\u8ca2\u737b\u7e3d\u548c</p> <p>\u5c31\u662f\u4e00\u500b\u4e8c\u7dad\u5e73\u9762\u554f\u984c\uff0c\u6211\u5011\u53ea\u8981\u5c07\u7b2c\u4e00\u7dad\u6392\u5e8f\uff0c\u7b2c\u4e8c\u7dad\u4f7f\u7528 BIT \u5373\u53ef</p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n#define lowbit(x) (x &amp; (-x))\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct opr {\n    int l, r, c;\n\n    bool operator&lt;(const opr &amp;other) {\n        return l &lt; other.l;\n    }\n};\n\nstruct qry {\n    // farmer id, need how much\n    int id, goal;\n};\n\nstruct BIT {\n    BIT(int n) : n(n) {\n        bit.resize(n + 1);\n    }\n\n    void add(int x, int d) {\n        while (x &lt;= n) {\n            bit[x] += d;\n            x += lowbit(x);\n        }\n    }\n\n    int query(int x) {\n        int ret = 0;\n        while (x &gt; 0) {\n            ret += bit[x];\n            x -= lowbit(x);\n        }\n        return ret;\n    }\n\n    bool clean() {\n        for (int i = 1; i &lt;= n; i++) {\n            if (bit[i]) return false;\n        }\n        return true;\n    }\n\n   private:\n    int n;\n    vector&lt;int&gt; bit;\n};\n\nint n, m, q;\nvector&lt;int&gt; G[maxn];\nvector&lt;opr&gt; operation;\nvector&lt;qry&gt; queries;\nint nxt[maxn], a[maxn], ans[maxn];\n\nvoid solve(BIT &amp;bit, int el, int er, vector&lt;qry&gt; &amp;q) {\n    // \u5728 [el, er] \u7684\u9019\u4e9b\u64cd\u4f5c\u4e2d\uff0c\u6211\u5728\u54ea\u500b\u64cd\u4f5c\u53ef\u4ee5\u9054\u5230\u76ee\u6a19\n    if (el == er) {\n        for (auto [id, goal] : q) {\n            ans[id] = el;\n        }\n        return;\n    }\n\n    int emid = (el + er) / 2;\n    vector&lt;opr&gt; op(operation.begin() + el - 1, operation.begin() + emid);\n\n    sort(ALL(op));\n    vector&lt;pii&gt; query;\n    vector&lt;int&gt; cost;\n\n    int cnt = 0;\n    for (auto &amp;[id, goal] : q) {\n        for (auto i : G[id]) {\n            query.pb({i, cnt});\n        }\n        cnt++;\n    }\n    cost.resize(cnt);\n    sort(ALL(query));\n    int ptr = 0;\n\n    for (auto [i, idx] : query) {\n        int j = nxt[i];\n        while (ptr &lt; op.size() &amp;&amp; op[ptr].l &lt;= i) {\n            bit.add(op[ptr].r, op[ptr].c);\n            ptr++;\n        }\n\n        if (j == 0) {\n            int t = bit.query(m) - bit.query(i - 1);\n            cost[idx] += t;\n        } else {\n            int t = bit.query(j - 1) - bit.query(i - 1);\n            cost[idx] += t;\n        }\n    }\n\n    cnt = 0;\n    vector&lt;qry&gt; qLeft, qRight;\n    for (auto &amp;[id, goal] : q) {\n        if (goal &lt;= cost[cnt]) {\n            qLeft.pb({id, goal});\n        } else {\n            qRight.pb({id, goal - cost[cnt]});\n        }\n        cnt++;\n    }\n\n    for (int i = 0; i &lt; ptr; i++) {\n        bit.add(op[i].r, -op[i].c);\n    }\n\n    vector&lt;pii&gt;().swap(query);\n    vector&lt;int&gt;().swap(cost);\n    vector&lt;opr&gt;().swap(op);\n    vector&lt;qry&gt;().swap(q);\n\n    solve(bit, el, emid, qLeft);\n    solve(bit, emid + 1, er, qRight);\n}\n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; a[i];\n        if (G[a[i]].size()) nxt[G[a[i]].back()] = i;\n        G[a[i]].pb(i);\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        queries.pb({i, x});\n    }\n\n    for (int i = 1; i &lt;= q; i++) {\n        int l, r, c;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;\n        operation.pb({l, r, c});\n    }\n}\n\nvoid work() {\n    q++;\n    operation.pb({1, m, (int)2e9});\n    BIT bit(m);\n    solve(bit, 1, q, queries);\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (ans[i] == q)\n            cout &lt;&lt; -1 &lt;&lt; \"\\n\";\n        else\n            cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n    }\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        work();\n    }\n}\n</code></pre>"},{"location":"offline/parallel-binsearch/#npsc","title":"NPSC \u4e0a\u53f8\u7684\u85aa\u6c34","text":"NPSC 2015 \u9ad8\u4e2d\u7d44\u6c7a\u8cfd pB.\u4e0a\u53f8\u7684\u85aa\u6c34 <p>\u7d66\u4f60\u4e00\u9846 \\(N\\) \u500b\u9ede\u7684\u6709\u6839\u6a39\u9084\u6709\u4e00\u500b\u6b63\u6574\u6578 \\(k\\)\uff0c\u6bcf\u4e00\u500b\u9ede\u4e00\u958b\u59cb\u7684\u503c\u90fd\u662f \\(0\\)\uff0c\u6709 \\(Q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9078\u64c7\u4e00\u500b\u9ede \\(u\\) \u8ddf\u4e00\u500b\u6b63\u6574\u6578 \\(x\\)\uff0c\u4ee3\u8868\u628a \\(u\\) \u8d70\u5230\u6839\u6bcf\u500b\u9ede\u7684\u503c\u90fd\u52a0\u4e0a \\(x\\)\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5b8c\u554f\u6709\u6574\u68f5\u6a39\u6709\u5e7e\u500b\u9ede\u7684\u503c \\(\\ge k\\)</p> <p>\\(N,Q\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u88fd\u9020 DFS \u5e8f\u5217</p> <p>\u5c0d\u6bcf\u500b \\(i\\) \u4e8c\u5206\u641c\u7b2c\u5e7e\u6b21\u64cd\u4f5c\u5f8c\u6b0a\u91cd \\(\\ge k\\)</p> <p>\u5c0d\u6bcf\u500b \\(j\\) \u8a08\u7b97\u6709\u5e7e\u500b \\(i\\) \u6eff\u8db3 \\(\\begin{cases}\\texttt{in}_i \\ge \\texttt{in}_j \\\\ \\texttt{out}_i \\le \\texttt{out}_j \\end{cases}\\)\uff0ccost \u5c31\u662f\u9019\u4e9b\u7684 \\(x\\) \u76f8\u52a0</p>"},{"location":"offline/parallel-binsearch/#cses-new-roads-queries","title":"CSES New Roads Queries","text":"CSES - New Roads Queries <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u4f9d\u5e8f\u52a0\u5165 \\(m\\) \u689d\u908a\uff0c\u56de\u7b54 \\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\\(a,b\\) \u5728\u52a0\u5165\u7b2c\u5e7e\u689d\u908a\u6642\u9023\u901a\uff0c\u6216\u6c92\u6709\u9023\u901a</li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u7528 Atcoder \u90a3\u984c\u7684\u300c\u5b58 \\(\\log m\\) \u500b \\(n\\text{-vertex graph}\\)\u300d\u6280\u5de7</p> <p>\u53e6\u89e3 : \u4e5f\u6709\u4e26\u67e5\u96c6\u751f\u6210\u6a39\u7684\u89e3\u6cd5</p>"},{"location":"offline/parallel-binsearch/#ytp-when2meet","title":"YTP When2meet","text":"2023 YTP \u521d\u8cfd p5 When2meet <p>\u7d66\u4e00\u5f35 \\(n\\) \u500b\u9ede\u7684\u5716\uff0c\u6709 \\(q\\) \u7b46\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{union}(i,a_i,b_i):\\) \u5728\u6642\u9593 \\(i\\) \u5728 \\(a_i,b_i\\) \u9593\u5efa\u908a</p> </li> <li> <p>\\(\\text{query}(k,\\{x_1,x_2,\\ldots, x_k \\}):\\) \\(x_1,x_2,\\ldots, x_k\\) \u5728\u4f55\u6642\u9023\u901a\uff0c\u6216\u6c92\u6709\u9023\u901a</p> </li> </ul> <p>\\(n,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u4e0a\u4e00\u984c\u7684\u8b8a\u5316\u7248\uff0c\u9084\u662f\u300c\u5b58 \\(\\log m\\) \u500b \\(n\\text{-vertex graph}\\)\u300d\u6280\u5de7</p> <p>\u4e26\u67e5\u96c6\u751f\u6210\u6a39\u7684\u8a71 \\(\\text{LCA(a,b,c)}=\\text{LCA}(\\text{LCA}(a,b),c)\\)\uff0c\u4e00\u6a23\u627e\u8def\u5f91\u4e0a\u6700\u5927\u503c</p>"},{"location":"offline/parallel-binsearch/#ytp","title":"YTP \u53ec\u559a\u5230\u7570\u4e16\u754c","text":"2023 YTP \u521d\u8cfd p7 \u53ec\u559a\u5230\u7570\u4e16\u754c <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u5716\uff0c\u5716\u4e0d\u4e00\u5b9a\u9023\u901a\uff0c\u6709\u91cd\u908a\uff0c\u6709 \\(q\\) \u7b46\u4ee5\u4e0b\u67e5\u8a62 :</p> <ul> <li>\u7d66\u5169\u9ede \\(x,y\\)\uff0c\u627e\u4e00\u689d \\(x\\) \u5230 \\(y\\) \u7684\u8def\u5f91\uff0c\u8f38\u51fa\u8def\u5f91\u4e0a\u7b2c\u4e8c\u5927\u908a\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11</li> </ul> <p>\\(n,m,q\\le 10^5\\)</p> \u601d\u8def <p>\u4e00\u958b\u59cb\u628a\u6240\u6709 edge \u6a19\u8a18\u6210\u9ed1\u8272\uff0c\u6309\u7167\u908a\u6b0a\u7531\u5c0f\u5230\u5927\u7684\u9806\u5e8f\u4f9d\u5e8f\u628a\u908a\u8b8a\u6210\u767d\u8272</p> <p>query(x, y) \u5c31\u662f\u5728\u554f\uff1a\u6700\u65e9\u5728\u54ea\u500b\u6642\u9593\u9ede\u958b\u59cb\uff0c\u5b58\u5728\u4e00\u689d x \u5230 y \u7684\u8def\u5f91\uff0c\u4e14\u9019\u500b\u8def\u5f91\u4e0a\u53ea\u6709\u4e00\u689d\u9ed1\u8272\u908a</p> <p>\u53ef\u4ee5\u7528\u6574\u9ad4\u4e8c\u5206\uff0c\u5148\u628a\u4e00\u534a\u7684\u908a\u8b8a\u6210\u767d\u8272\uff0c\u7136\u5f8c\u767d\u908a\u4e4b\u9593\u7e2e\u9ede\uff0c\u67e5\u8a62\u6bcf\u500b query(x, y) \u662f\u5426 x \u8207 y \u53ea\u76f8\u9694\u4e00\u689d\u9ed1\u908a\u3002\u905e\u8ff4\u5169\u500b\u5b50\u554f\u984c\uff0c\u6642\u9593\u5c0f\u7684\u5b50\u554f\u984c\uff0c\u4e0d\u6703\u7528\u5230\u7de8\u865f [mid + 1, r] \u4e4b\u9593\u7684\u908a\uff0c\u6240\u4ee5\u908a\u6578\u5269\u4e0b\u4e00\u534a\uff0c\u6642\u9593\u5927\u7684\u5b50\u554f\u984c\uff0c\u767d\u8272\u908a\u90fd\u7e2e\u9ede\u4e86\uff0c\u6240\u4ee5\u908a\u6578\u4e5f\u53ea\u5269\u4e0b\u4e00\u534a</p> <ol> <li> <p>\u6bcf\u500b\u908a\u53ea\u6703\u5f80\u4e00\u908a\u8d70\uff0c\u4e0a\u4e00\u5c64\u7528\u5b8c\u4e86\u5c31\u53ef\u4ee5\u522a\u6389\uff0c\u6240\u4ee5\u540c\u4e00\u6642\u9593\u53ea\u6709 \\(m\\) \u689d\u908a\u5728\u8dd1\uff0c\u6bcf\u500b\u908a\u53ea\u51fa\u73fe\u5728\u4e00\u500b\u5730\u65b9\u00a0\u21a9</p> </li> </ol>"},{"location":"offline/sqrt/","title":"\u6839\u865f\u5206\u584a","text":"<p>\u96d6\u7136\u6642\u9593\u8907\u96dc\u5ea6\u6bd4\u7dda\u6bb5\u6a39\u9084\u5dee\uff0c\u4f46\u5206\u584a\u7684\u5f37\u8655\u5728\u7dad\u8b77\u8cc7\u8a0a\u4e0a\u66f4\u52a0\u5f48\u6027\uff0c\u7279\u5225\u662f\u4fee\u6539\u6642\u96e3\u4ee5\u5feb\u901f\u66f4\u65b0\u7684\u985e\u578b\uff0c\u9019\u90e8\u5206\u662f\u7dda\u6bb5\u6a39\u6240\u4e0d\u53ca\u7684</p>"},{"location":"offline/sqrt/#_1","title":"\u5e8f\u5217\u5206\u584a","text":"<p>\u6211\u5011\u5c07\u5e8f\u5217\u6bcf k \u500b\u7576\u6210\u4e00\u500b Block\uff0c\u5c0d\u65bc\u6bcf\u7b46 query\uff0c\u6703\u5305\u542b\u4e2d\u9593\u5b8c\u6574\u7684 Block \u8207\u65c1\u908a\u5169\u500b\u4e0d\u5b8c\u6574\u7684 Block\uff0c\u5c0d\u65bc\u5b8c\u6574\u7684\u6211\u5011\u9700\u8981\u5148\u9810\u8655\u7406\u597d\u7b54\u6848\uff0c\u5c0d\u65bc\u4e0d\u5b8c\u6574\u7684\u76f4\u63a5\u66b4\u529b\u7b97\uff0c\u8907\u96dc\u5ea6 O(n / k + k)</p> <p></p> CS Academy Modulo Queries <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots, a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u67e5\u8a62\u5982\u4e0b :</p> <ul> <li>\\(\\text{query}(l, r, k):\\) \u8f38\u51fa \\(\\max \\limits_{i=l\\ldots r} a_i\\) % \\(k\\)</li> </ul> <p>\\(1\\le n,q,a_i,k\\le 4\\times 10^4\\)</p> \u601d\u8def <p>\u5148\u5c07 a \u8907\u88fd\u4e00\u500b\u65b0\u9663\u5217\uff0c\u5c07\u65b0\u9663\u5217 sort \u597d\u7136\u5f8c\u6162\u6162\u653e\u5bec threshold\uff0c\u5c07\u6bcf\u500b\u5143\u7d20\u52a0\u5230\u5404\u81ea\u7684 block \u88e1\u9762\uff0c\u5c0d\u65bc\u6bcf\u500b block \u4ee4 mx[i] \u70ba block \u5167 &lt; i \u7684\u6700\u5927\u503c\uff0c\u9019\u53ef\u4ee5\u7528\u985e\u4f3c\u524d\u7db4\u548c\u7684\u65b9\u5f0f\u5efa\u597d\uff0c\u5c0d\u65bc\u6bcf\u500b block \u6211\u5011\u4ee4 dp[i] \u70ba block \u5167 mod i \u4e4b\u4e0b\u7684\u6700\u5927\u503c\uff0c\u9019\u500b\u53ef\u4ee5\u53bb\u8dd1 mx[i], mx[i * 2], mx[i * 3], ... \u53d6 max\u3002\u6700\u5f8c\uff0c\u5c0d\u65bc\u6bcf\u7b46\u8a62\u554f\u66b4\u529b\u8655\u7406\u4e0d\u5b8c\u6574\u584a\uff0cO(1) \u67e5\u8868\u5b8c\u6574\u584a\u5373\u53ef\u3002\u9019\u6a23\u8907\u96dc\u5ea6 \\(O(\\frac{n}{B}\\times k\\log k + qB)\\)\uff0c\\(B\\) \u53d6 \\(k \\log k\\) \u53ef\u5f97 \\(O(k\\sqrt{k \\log k})\\)</p> CF 785 E. Anton and Permutation <p>\u7d66\u4e00\u500b \\(1\\ldots n\\) \u7684 permutation\uff0c\\(q\\) \u6b21 swap\\((i,j)\\)\uff0c\u6bcf\u6b21 swap \u5b8c\u8f38\u51fa\u9006\u5e8f\u6578\u5c0d\u6578\u91cf</p> <p>\\(n\\le 2\\times 10^5, q\\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u5c07\u5e8f\u5217\u6bcf sqrt(n) \u500b\u7576\u6210\u4e00\u500b block\u3002\u5047\u5982\u4ea4\u63db i \u4f4d\u7f6e\u548c j \u4f4d\u7f6e\uff08\u5047\u8a2d i &lt; j\uff09\uff0c\u90a3\u9ebc\u53ea\u9700\u8981\u7d71\u8a08 [i + 1, j - 1] \u9019\u500b\u5340\u9593\u5167\u6bd4 a[i] \u5927\u7684\u6709\u5e7e\u500b, \u5c0f\u7684\u6709\u5e7e\u500b\uff0c\u6bd4 a[j] \u4f4d\u7f6e\u7684\u6578\u5927\u7684\u6709\u5e7e\u500b, \u5c0f\u7684\u6709\u5e7e\u500b\u5373\u53ef\u3002\u6240\u4ee5\u5728 query \u6642\u5c0d\u65bc\u5b8c\u6574\u7684 block \u76f4\u63a5\u5728 block \u5167\u4e8c\u5206\uff08\u5c0d\u65bc\u6bcf\u500b block \u958b\u4e00\u500b\u5927\u5c0f\u70ba n \u7684 BIT\uff09\u3002</p> CF 617 E. XOR and Favorite Number <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u8207 \\(q\\) \u6b21\u8a62\u554f :</p> <ul> <li>\\(\\text{query}(l,r):\\) \u8f38\u51fa\u5340\u9593\u5167\u6709\u591a\u5c11\u500b subarray \u7684 \\(a_i \\oplus \\ldots \\oplus a_j=k\\)</li> </ul> <p>\\(n,q\\le 10^5,0\\le k\\le 10^6\\)</p> \u601d\u8def <p>\u5148\u5efa\u597d\u524d\u7db4 xor pre[i]\u3002\u5c0d\u65bc\u4e00\u500b pre[j]\uff0c\u80fd\u6e4a\u5230 k \u7684 pre[i] \u5c31\u662f cnt[pre[j] \\(\\oplus\\) k] \u500b\u3002add, del \u7684\u4ee3\u78bc\u5982\u4e0b</p> <pre><code>void add(int x) {\n    ans += cnt[x ^ k];\n    cnt[x]++;\n}\nvoid del(int x) {\n    cnt[x]--;\n    ans-=flag[x ^ k];\n}\n</code></pre>"},{"location":"offline/sqrt/#_2","title":"\u503c\u57df\u5206\u584a","text":"<p>\u4e00\u822c\u4f86\u8aaa\uff0c\u503c\u57df\u5206\u584a\u6703\u4f5c\u70ba\u4e00\u500b\u8f14\u52a9\u5de5\u5177\u51fa\u73fe\u5728\u984c\u76ee\u7576\u4e2d\u3002</p> <p>\u4f9d\u7167\u5c07\u503c\u57df\u5206\u6210\u6bcf k \u500b\u4e00\u584a\uff0c\u4fee\u6539\u64cd\u4f5c\u5c31\u76f4\u63a5 O(1) \u66f4\u65b0\u300c\u503c\u57df\u300d\u6240\u5728\u7684 block \u7684\u8cc7\u8a0a\uff0c\u67e5\u8a62\u64cd\u4f5c\u5c31\u4e00\u6a23\u5206\u6210\u5b8c\u6574\u7684 block \u8207\u4e0d\u5b8c\u6574\u7684\uff0c\u4e0d\u5b8c\u6574\u7684 block \u5c31\u76f4\u63a5\u66b4\u529b\u7b97\uff0c\u5b8c\u6574\u7684\u76f4\u63a5\u53d6\u6574\u500b block \u7684\u8cc7\u8a0a</p> \u96c6\u5408\u7b2c k \u5c0f <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\u7dad\u8b77\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{insert}(x):\\) \u63d2\u5165 \\(x\\)</p> </li> <li> <p>\\(\\text{erase}(x):\\) \u522a\u9664 \\(x\\)</p> </li> <li> <p>\\(\\text{query}(k):\\) \u8a62\u554f\u96c6\u5408\u4e2d\u7b2c \\(k\\) \u5c0f\u7684\u5143\u7d20</p> </li> </ul> <p>\\(n,x\\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u5c07\u503c\u57df C \u5206\u6210\u6bcf sqrt(C) \u4e00\u584a</p> <p>\u5c0d\u65bc\u6bcf\u500b insert\uff0c\u6211\u5011\u76f4\u63a5\u5c07\u503c\u57df x \u6240\u5728\u7684\u584a\u7684 cnt++\uff0c\u4e26\u5c07 v[x]++</p> <p>\u5c0d\u65bc\u6bcf\u500b query\uff0c\u6211\u5011\u4e00\u6b21 jump \u4e00\u6574\u500b block \u76f4\u5230\u6211\u5011\u767c\u73fe\u7576\u524d jump \u904e\u7684 block \u7684\u7e3d\u548c &lt;= k\uff0c\u518d\u53bb\u66b4\u529b\u6383\u904e\u8a72 block\uff0c\u770b v[x] \u7e3d\u548c\u4f55\u6642\u6703 &gt;= k</p> \u6c42\u7b2c k \u5c0f\uff08\u652f\u6301\u55ae\u9ede\u4fee\u6539\uff09 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a\\)\uff0c\u6709 \\(q\\) \u7b46\u64cd\u4f5c :</p> <ul> <li> <p>\u55ae\u9ede\u4fee\u6539</p> </li> <li> <p>\u8a62\u554f\u5340\u9593\u7b2c k \u5c0f</p> </li> </ul> <p>\\(1\\le n\\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u5206\u6210 sqrt(n) \u584a\uff0c \u584a\u7684\u5927\u5c0f\u70ba sqrt(n)\uff0c\u584a\u5167\u7dad\u8b77\u6709\u5e8f\u6578\u5217\u3002\u4fee\u6539\u5c31\u66b4\u529b\u91cd\u69cb\u584a\uff0c\u9019\u4e0d\u6703\u8d85\u6642\u3002\u5c0d\u65bc\u6bcf\u4e00\u500b\u8a62\u554f\uff0c\u5148\u4e8c\u5206\u4e00\u500b\u5340\u9593\u6b0a\u503c\uff08\u767c\u73fe\u9019\u9053\u984c\u662f1~1e9\uff09\uff0c\u7136\u5f8c\u53bb\u7d71\u8a08\u6240\u6c42\u7684\u5340\u9593\u5167\u5c0f\u65bc\u9019\u500b\u6578\u7684\u500b\u6578\u6709\u591a\u5c11\u3002\u5c0d\u65bc\u5169\u908a\u4e0d\u5b8c\u6574\u7684\u584a\u66b4\u529b\u7d71\u8a08\uff0c\u5c0d\u65bc\u5b8c\u6574\u7684\u584a\uff0c\u5247\u4e8c\u5206\u67e5\u627e\u6700\u5c0f\u7684\u6578\uff0c\u5373\u53ef\u5728 log \u6642\u9593\u5167\u5f97\u5230\u7b54\u6848\u3002</p> <p>\u53c3\u8003\u81ea : \u6d1b\u8c37\u984c\u89e3</p> \u6d1b\u8c37 P4867 Gty\u7684\u4e8c\u903c\u59b9\u5b50\u5e8f\u5217 <p>\u7d66 \\(n\\) \u500b\u6578 \\(a_1, \\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u67e5\u8a62\u5982\u4e0b :</p> <ul> <li>\\(\\text{query}(l,r,a,b):\\) \u554f\u5728 \\(a_l,\\ldots ,a_r\\) \u4e2d\uff0c\u503c\u57df\u5728 \\([a,b]\\) \u4e4b\u9593\u6709\u5e7e\u7a2e</li> </ul> <p>\\(n\\le 10^5, m\\le 10^6, 1\\le l,r,a,b\\le n\\)</p> \u601d\u8def <p>\u5229\u7528\u83ab\u968a\u96e2\u7dda\u7dad\u8b77 query\uff0c\u5c0d\u65bc\u8a62\u554f [a, b] \u4e4b\u9593\u7684\u6578\u5b57\uff0c\u4f7f\u7528\u503c\u57df\u5206\u584a</p> <p>\u56e0\u70ba\u4e0d\u7ba1\u662f\u9663\u5217\u5927\u5c0f\u9084\u662f\u503c\u57df\u90fd\u662f \\(\\le n\\)\uff0c\u6240\u4ee5\u83ab\u968a\u8207\u503c\u57df\u5206\u584a\u7684 block size \u90fd\u53ef\u8a2d\u6210 \\(O(\\sqrt{n})\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define pb push_back\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int N = 1e5 + 5;\nconst int Q = 1e6 + 5;\nint n, q, k;\nint a[N], lb[N], rb[N], cnt[N], sum[N], block[N], ans[Q];\n\nstruct Query {\n    int l, r, x, y, id;\n\n    bool operator&lt;(const Query &amp;rhs) const {\n        if (block[l] == block[rhs.l]) {\n            return r &lt; rhs.r;\n        }\n        return block[l] &lt; block[rhs.l];\n    }\n};\n\nvoid add(int x) {\n    if (cnt[x] == 0) {\n        sum[block[x]]++;\n    }\n    cnt[x]++;\n}\n\nvoid del(int x) {\n    cnt[x]--;\n    if (cnt[x] == 0) {\n        sum[block[x]]--;\n    }\n}\n\nint query(int l, int r) {\n    int ans = 0;\n    if (block[l] == block[r]) {\n        for (int i = l; i &lt;= r; i++) {\n            if (cnt[i]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n    for (int i = block[l] + 1; i &lt;= block[r] - 1; i++) {\n        ans += sum[i];\n    }\n    for (int i = l; i &lt;= rb[l]; i++) {\n        if (cnt[i]) {\n            ans++;\n        }\n    }\n    for (int i = lb[r]; i &lt;= r; i++) {\n        if (cnt[i]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; q;\n    k = sqrt(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        a[i]--;\n    }\n    for (int i = 0; i &lt; n; i++) {\n        block[i] = i / k;\n        lb[i] = (i / k) * k;\n        rb[i] = lb[i] + k - 1;\n        if (rb[i] &gt; n - 1) rb[i] = n - 1;\n    }\n    vector&lt;Query&gt; queries;\n    for (int i = 0; i &lt; q; i++) {\n        int l, r, x, y;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; x &gt;&gt; y;\n        l--, r--, x--, y--;\n        queries.pb({l, r, x, y, i});\n    }\n    sort(ALL(queries));\n    int l = 0, r = -1;\n    for (auto i : queries) {\n        while (i.l &lt; l) add(a[--l]);\n        while (r &lt; i.r) add(a[++r]);\n        while (l &lt; i.l) del(a[l++]);\n        while (i.r &lt; r) del(a[r--]);\n        ans[i.id] = query(i.x, i.y); \n    }\n    for (int i = 0; i &lt; q; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n} \n</code></pre>"},{"location":"offline/sqrt/#_3","title":"\u64cd\u4f5c\u5206\u584a","text":"<p>\u5e38\u5e38\u51fa\u73fe\u5728\u300c\u4e0d\u5e36\u4fee\u6539\u5f88\u53ef\u505a\uff0c\u4f46\u5e36\u4e86\u4fee\u5c31\u90fd\u6c92\u6cd5\u7dad\u8b77\u4e86\uff0c\u800c\u4e14\u53ea\u6709\u4fee\u6539\u7684\u8a71\u4e0d\u96e3\u7dad\u8b77\u300d\u7684\u984c\u4e0a\u3002</p> <p>\u64cd\u4f5c\u5206\u584a\u5c31\u662f\u5c0d\u64cd\u4f5c\u5e8f\u5217\uff08\u8a62\u554f + \u4fee\u6539\uff09\u9032\u884c\u5206\u584a\u3002\u8655\u7406\u5230\u4e00\u584a\u6642\uff0c\u6211\u5011\u5df2\u7d93\u5c07\u64cd\u4f5c\u5206\u6210\u4e86\u5169\u500b\u90e8\u5206\uff1a</p> <ol> <li>\u5148\u524d\u584a\u5167\u7684\u4fee\u6539\u3002\u9019\u500b\u5728\u6bcf\u6b21\u505a\u5b8c\u4e00\u500b Block \u7684\u6642\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u539f\u672c\u7684\u9663\u5217\u3002</li> <li>\u7576\u524d\u584a\u5167\u7684\u4fee\u6539\u3002\u800c\u9019\u4e9b\u4fee\u6539\u7e3d\u6578\u4e0d\u6703\u9054\u5230\u584a\u5927\u5c0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u6a38\u7d20\u5730\u8a08\u7b97\u9019\u90e8\u5206\u7684\u8ca2\u737b\u3002</li> </ol> <p>\u5728 block \u88e1\u7684\uff0c\u66b4\u529b\u6383\u904e\uff0c\u8907\u96dc\u5ea6 O(q * k)</p> <p>\u6bcf\u6b21\u770b\u5b8c\u4e00\u500b block \u5c07\u76f4\u63a5\u4fee\u6539\u539f\u672c\u7684\u9663\u5217\uff0c\u8907\u96dc\u5ea6 O((q / k) * q)</p> LOJ #6280. \u6570\u5217\u5206\u5757\u5165\u95e8 4 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a\\)\uff0c\u6709 \\(q\\) \u7b46\u64cd\u4f5c :</p> <ul> <li> <p>\u5340\u9593\u52a0\u503c</p> </li> <li> <p>\u5340\u9593\u6c42\u548c</p> </li> </ul> <p>\\(1\\le n\\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u5c07\u64cd\u4f5c\u4f9d\u7167\u6642\u9593\u5c0f\u5230\u5927\u5206\u584a\uff0c\u6bcf k \u500b\u4e00\u7d44\u3002\u5c0d\u65bc\u6bcf\u500b query(ql, qr)\uff0c\u66b4\u529b\u6383\u904e\u8dd1\u8a72 block \u88e1\u9762\u6240\u6709\u7684 add(l, r)\uff0c\u8a08\u7b97 [l, r] \u5728 [ql, qr] \u7684\u8ca2\u737b\u3002\u5c0d\u65bc\u6bcf\u500b block \u7d50\u675f\u5f8c\u518d\u91cd\u65b0\u57f7\u884c\u4e00\u6b21\u524d\u7db4\u548c\uff0c\u8907\u96dc\u5ea6 O(q * k + (n / k) * n)</p> APIO2019 \u6865\u6881 <p>\u7d66\u5b9a\u4e00\u5f35 \\(n\\) \u500b\u9ede \\(m\\) \u908a\u7684\u7121\u5411\u5716\u548c \\(q\\) \u6b21\u8a62\u554f\u3002\u53ef\u4ee5\uff1a  </p> <ol> <li> <p>\u4fee\u6539\u67d0\u689d\u908a\u7684\u908a\u6b0a</p> </li> <li> <p>\u5f9e\u9ede \\(u\\) \u51fa\u767c\uff0c\u53ea\u7d93\u904e\u908a\u6b0a \\(\\le k\\) \u7684\u908a\uff0c\u53ef\u4ee5\u5230\u5e7e\u500b\u9ede</p> </li> </ol> <p>\\(1\\le n\\le 5\\times 10^4,0\\le m\\le 10^5,1\\le q\\le 10^5\\)</p> \u601d\u8def <p>\u5c07\u64cd\u4f5c\u4f9d\u7167\u6642\u9593\u5c0f\u5230\u5927\u5206\u584a\uff0c\u6bcf k \u500b\u4e00\u7d44\u3002\u6bcf\u7d44\u5c07\u88e1\u9762\u7684 query \u5f9e\u5927\u5230\u5c0f\u8655\u7406\uff0c\u5c0d\u65bc\u6bcf\u4e00\u500b query\uff0c\u4f9d\u5e8f\u52a0\u5165\u975e\u4fee\u6539\u7684\u908a\uff0c\u6709\u4fee\u6539\u7684\u908a\u5c31\u76f4\u63a5\u5168\u90e8\u66b4\u529b\u6383\u904e\uff0c\u6383\u5b8c\u4e4b\u5f8c\u8981\u5230\u4e0b\u4e00\u500b query \u7684\u6642\u5019\u9700\u8981 rollback\u3002</p> <p>\u975e\u4fee\u6539\u908a\u5728\u4e00\u500b block \u4e2d\u6700\u591a\u6383\u5230 m \u500b\uff0c\u5171 O(m * (q / k))\uff0c\u4fee\u6539\u7684\u908a O(q * k)\uff0c\u9084\u8981\u4e58\u4e0a rollback dsu \u7684 O(log n)\uff0c\u8907\u96dc\u5ea6 O(m * (q / k) * logn + q * k * log n) </p>"},{"location":"offline/sqrt/#_4","title":"\u6578\u8ad6\u5206\u584a","text":"Zerojudge d193. 11526 - H(n) <p>\u7d66\u5b9a \\(1\\le n\\le 10^9\\)\uff0c\u6c42</p> \\[ \\sum \\limits_{i=1}^n \\lfloor\\frac{n}{i}\\rfloor \\] <p></p> <p>\u5c0d\u65bc \\(i\\le \\sqrt{n}\\)\uff0c\u6700\u591a\u53ea\u6709 \\(\\sqrt{n}\\) \u7a2e\u4e0d\u540c\u7684\u503c</p> <p>\u5c0d\u65bc \\(i &gt; \\sqrt{n}\\)\uff0c\\(\\frac{n}{i}\\) \u6700\u591a\u53ea\u6709 \\(\\sqrt{n}\\) \u7a2e\u4e0d\u540c\u7684\u503c</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n\n    int total = 0, at = 1;\n    while (at &lt;= n) {\n        int cur = n / at;  // n / i \u5230\u591a\u5c11\u4e86\n        int last_same = n / cur; // \u9019\u500b n/i \u7684\u8cea\u6700\u591a\u53ef\u4ee5\u5ef6\u7e8c\u5230\u54ea\u683c\n\n        total += cur * (last_same - at + 1);\n        at = last_same + 1;\n    }\n\n    cout &lt;&lt; total &lt;&lt; endl;\n}\n\nsigned main() {\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n}\n</code></pre> CSES - Sum of Divisors <p>\u4ee4 \\(\\sigma(n)\\) \u70ba \\(n\\) \u7684\u56e0\u6578\u76f8\u52a0\u7e3d\u548c\uff0c\u554f \\(\\sum \\limits_{i=1}^n \\sigma(n)\\)</p> <p>\\(1\\le n\\le 10^{12}\\)</p> \u601d\u8def <p>\u89c0\u5bdf 12</p> <p> </p> <p>\u6bcf\u500b\u6578\u5b57\u51fa\u73fe \\(\\frac{n}{i}\\) \u6b21\uff0c\u7b54\u6848\u5c31\u662f \\(\\sum\\frac{n}{i}\\times i\\) \u5176\u4e2d \\(i=1...n\\)</p> <p> </p> <p>\u5c31\u8b8a\u6210 zerojudge - H(n) \u7684\u984c\u76ee\u4e86</p> code <pre><code>#include &lt;iostream&gt;\n\nusing std::cout;\nusing std::endl;\n\nconst int MOD = 1e9 + 7;\n\nint main() {\n    long long n;\n    std::cin &gt;&gt; n;\n\n    long long total = 0;\n    long long at = 1;\n    while (at &lt;= n) {\n        long long add_amt = n / at;  // n / i \u5230\u591a\u5c11\u4e86\n        long long last_same = n / add_amt; // \u9019\u500b n/i \u7684\u8cea\u6700\u591a\u53ef\u4ee5\u5ef6\u7e8c\u5230\u54ea\u683c\n\n        total = (total + add_amt * (last_same - at + 1));\n        at = last_same + 1;\n    }\n\n    cout &lt;&lt; total &lt;&lt; endl;\n}\n</code></pre> \u6d1b\u8c37 P2261 [CQOI2007] \u4f59\u6570\u6c42\u548c <p>\u7d66 \\(n,k\\) \u554f</p> \\[ \\sum _ {i=1}^n k \\% i \\] <p>\\(n,k\\le 10^9\\)</p> \u601d\u8def <p>\u539f\u5f0f\u53ef\u4ee5\u5beb\u6210 \\(\\displaystyle \\sum _ {i=1}^n k - i\\times \\lfloor \\frac{k}{i} \\rfloor = n\\times k - \\sum \\limits_{i=1}^n \\lfloor \\frac{k}{i} \\rfloor \\times i\\)</p>"},{"location":"offline/sqrt/#_5","title":"\u6839\u865f\u5206\u6cbb","text":"\u6d1b\u8c37 P3396 \u54c8\u5e0c\u51b2\u7a81 <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6 \\(n\\) \u9663\u5217 \\(a_0 \\dots, a_{n-1}\\)\uff0c\u521d\u59cb\u6bcf\u6578\u7686\u70ba \\(0\\)\uff0c</p> <ol> <li>\\(\\text{add}(i,v):\\) \u5c07 \\(a_i\\) \u52a0 \\(v\\)</li> <li>\\(\\text{query}(p, x):\\) \u8f38\u51fa\u6240\u6709 \\(i\\) % \\(p = x\\) \u7684 \\(a_i\\) \u503c\u52a0\u7e3d</li> </ol> <p>\\(n,m\\le 1.5 \\times 10^5, 1\\le a_i \\le 1000\\)</p> \u601d\u8def <p>\u5b9a\u7fa9 \\(sum[p][x]\\) \u70ba \\(i\\) % \\(p = x\\) \u7684 \\(a_i\\) \u503c\u52a0\u7e3d\uff0c\u4f46 \\(p\\le \\sqrt{n}\\)\u3002</p> <p>\u5728 \\(\\text{add}(i,v)\\) \u7684\u6642\u5019\u5c07 \\(a_i\\) += \\(v\\)\uff0c\u4e5f\u5c07 \\(sum[x][i\\% x]\\) += \\(v,x\\in \\{ 1, 2, \\ldots ,\\sqrt{n} \\}\\)</p> <p>\u9019\u6a23\u7576 \\(p \\le \\sqrt{n}\\)\uff0c\u6211\u5011\u76f4\u63a5\u8f38\u51fa \\(sum[p][x]\\)\uff0c\\(p &gt; \\sqrt{n}\\)\uff0c\u76f4\u63a5\u66b4\u529b\u52a0\u7e3d \\(a[x] + a[p + x] + a[2 \\times p + x] + \\ldots\\)</p> \u4f8b\u984c <p>\u7d66\u4e00\u500b \\(n\\) \u500b\u9ede \\(m\\) \u908a\u7121\u5411\u5716\uff0c\u6bcf\u500b\u7bc0\u9ede\u4e0a\u6709\u4e00\u500b\u6578\u5b57\uff0c\u4e00\u958b\u59cb\u90fd\u662f \\(0\\)\u3002\u63a5\u4e0b\u6709\u6709 \\(q\\) \u500b\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{query}(x):\\) \u8f38\u51fa\u7de8\u865f \\(x\\) \u7684\u7bc0\u9ede\u4e0a\u9762\u7684\u6578\u5b57</p> </li> <li> <p>\\(\\text{add}(x):\\) \u628a\u7de8\u865f \\(x\\) \u7684\u7bc0\u9ede\u4ee5\u53ca\u5b83\u7684\u6240\u6709\u9130\u5c45\u4e0a\u9762\u7684\u6578\u5b57\u90fd\u52a0\u4e0a \\(1\\)</p> </li> </ul> <p>\\(O(q \\sqrt{m})\\) </p> \u601d\u8def <ul> <li> <p>add(v)</p> <ul> <li> <p>\\(\\deg(v) \\le \\sqrt{m}\\) :  \u66b4\u529b\u66f4\u65b0\u81ea\u5df1\u548c\u9130\u5c45\u7684\u6578\u503c</p> </li> <li> <p>\\(\\deg(v)&gt;\\sqrt{m}\\) : \u53ea\u66f4\u65b0\u81ea\u5df1\uff0c\u4e26\u5728\u81ea\u5df1\u5c07 lazy tag++</p> </li> </ul> </li> <li> <p>query(v):</p> <ul> <li>\u56de\u50b3\u81ea\u5df1\u9ede\u4e0a\u7684\u6578\u503c\u548c\u66b4\u529b\u67e5\u8a62 \\(\\deg(v) &gt; \\sqrt{m}\\) \u7684\u9130\u5c45\uff0c\u56e0\u70ba \\(\\deg(v) &gt; \\sqrt{m}\\) \u7684\u6578\u91cf \\(&lt;O(\\sqrt{m})\\)</li> </ul> </li> <li> <p>degree \u7e3d\u548c\u70ba \\(2m\\)</p> </li> </ul> CF 13 E. Holes <p>\u6709 \\(n\\) \u500b\u9ede\uff0c\u9ede \\(i\\) \u6709\u4e00\u500b\u6b0a\u503c \\(a_i\\)\uff0c\u8868\u793a\u7ad9\u4e0b\u4e00\u6b65\u6703\u8df3\u5230\u9ede \\(i+a_i\\)\uff0c\u53ef\u80fd\u8df3\u51fa\u5340\u9593 \\([1,n]\\)\u3002\u7d66 \\(q\\) \u7b46\u64cd\u4f5c :</p> <ul> <li> <p>\\(\\text{update}(i,x):\\) \u5c07\u67d0\u500b \\(a_i\\) \u6539\u6210 \\(x\\)</p> </li> <li> <p>\\(\\text{query}(x):\\) \u8a62\u554f\u5f9e\u9ede \\(x\\) \u958b\u59cb\uff0c\u9700\u8981\u591a\u5c11\u6b65\u624d\u80fd\u8df3\u5230 \\(n\\) \u4ee5\u5916\uff0c\u4ee5\u53ca\u6700\u5f8c\u4e00\u500b\u7d93\u904e\u7684\u9ede\u662f\u54ea\u4e00\u500b\u3002</p> </li> </ul> <p>\\(n,m\\le 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b\u584a\uff0c\u5c0d\u65bc\u6bcf\u500b\u9ede\uff0c\u7dad\u8b77\u9700\u8981\u591a\u5c11\u6b65\u8df3\u51fa\u6b64\u584a\uff0c\u4e26\u4e14\u8df3\u51fa\u6b64\u584a\u5f8c\u5c07\u8df3\u5411\u54ea\u500b\u9ede\u3002\u55ae\u9ede\u4fee\u6539\u53ea\u9700\u8981\u52d5\u4e00\u584a\u5c31\u597d\uff0cquery \u53ea\u6703\u8df3 \\(\\sqrt{n}\\) \u6b21</p> code <pre><code># include &lt;bits/stdc++.h&gt;\n\ntypedef long long ll;\nusing namespace std;\n\nconst int N = 1e5 + 5;\nconst int M = 4e2 + 50;\nint n, m;\nint l[N], r[N], belong[N];\nint cnt, num, x, v, ans;\nint a[N], tot[M], go[N], nxt[N];\n\nvoid init() {\n    num = sqrt(n);\n    cnt = n / num;\n    if (n % num)\n        cnt++;\n    for (int i = 1; i &lt;= n; i++) {\n        belong[i] = (i - 1) / num + 1;\n    }\n    for (int i = 1; i &lt;= cnt; i++) {\n        l[i] = (i - 1) * num + 1;\n        r[i] = min(n, i * num);\n        for (int j = r[i]; j &gt;= l[i]; j--) {\n            if (nxt[j] &gt; r[i]) {\n                tot[j] = 1;\n                go[j] = nxt[j];\n            } else {\n                tot[j] = tot[nxt[j]] + 1;\n                go[j] = go[nxt[j]];\n            }\n        }\n    }\n}\n\nint main() {\n    int op, ll, rr, x, y;\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;a[i]);\n        nxt[i] = min(n + 1, a[i] + i);\n    }\n    init();\n    while (m--) {\n        scanf(\"%d\", &amp;op);\n        if (!op) {\n            scanf(\"%d%d\", &amp;x, &amp;y);\n            int b = belong[x];\n            nxt[x] = min(n + 1, x + y);\n            for (int j = r[b]; j &gt;= l[b]; j--) {\n                if (nxt[j] &gt; r[b]) {\n                    tot[j] = 1;\n                    go[j] = nxt[j];\n                } else {\n                    tot[j] = tot[nxt[j]] + 1;\n                    go[j] = go[nxt[j]];\n                }\n            }\n        } else {\n            scanf(\"%d\", &amp;x);\n            int b, y;\n            int ans1, ans2 = 0;\n            while (x &lt;= n) {\n                ans2 += tot[x];\n                if (go[x] &gt; n) y = x;\n                x = go[x];\n            }\n            while (y &lt;= n) {\n                ans1 = y;\n                y = nxt[y];\n            }\n            printf(\"%d %d\\n\", ans1, ans2);\n        }\n    }\n    return 0;\n}\n</code></pre> CF 797 E. Array Queries <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots, a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f :</p> <ul> <li>\\(\\text{query(p, k):}\\) \u4e0d\u65b7\u9032\u884c\u64cd\u4f5c \\(p=p + a_p + k\\)\uff0c\u76f4\u5230 \\(p &gt; n\\) \u70ba\u6b62\uff0c\u5171\u5e7e\u6b21\u64cd\u4f5c</li> </ul> <p>\\(n,\\le 10^5, 1\\le a_i, p, k\\le n\\)</p> \u601d\u8def <p>\u82e5 k &gt;= sqrt(n)\uff0c\u90a3\u9ebc\u66b4\u529b\u8df3\uff0c\u505a\u591a sqrt(n) \u6b21</p> <p>\u82e5 k &lt; sqrt(n)\uff0c\u4ee4 sum[p][k] \u70ba\u8a62\u554f\u7684\u7b54\u6848\uff0cO(n * sqrt(n)) \u9810\u8655\u7406</p> <p>\u53c3\u8003 : https://blog.csdn.net/weixin_44178736/article/details/110395582</p> NPSC 2020 \u9ad8\u4e2d\u7d44\u521d\u8cfd pA. \u908a\u7de3\u4eba <p>\u6709 \\(N\\) \u500b\u4eba\uff0c\u7576 \\(x\\) \u500b\u4eba\u5206\u6210\u4e00\u7d44\u6642\uff0c\u6700\u5f8c \\(N \\space \\text{mod} \\space x\\) \u6703\u81ea\u6210\u4e00\u7d44\uff0c\u7a31\u9019\u4e9b\u4eba\u70ba\u908a\u7de3\u4eba\u3002\u4ee4 \\(f(i)=\\) \u6240\u6709 \\(1\\le x\\le N\\) \u4e2d\uff0c\u6703\u4f7f\u7b2c \\(i\\) \u4eba\u662f\u908a\u7de3\u4eba\u7684\u6578\u91cf\u3002\u7d66\u5b9a \\(L, R\\)\uff0c\u8acb\u6c42\u51fa \\(f(L), f(L + 1), \\ldots , f(R)\\)\u3002</p> <p>\\(1\\le N\\le 2^{30}, L\\le R\\le N, R - L \\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u5217\u51fa \\(i\\) \u5728 \\(x\\) \u4eba\u4e00\u7d44\u6642\u662f\u908a\u7de3\u4eba\u7684\u7bc4\u570d\u662f [1 + [N/x] * x, N]</p> <p>\u6211\u5011\u5148\u60f3\u66b4\u529b\u600e\u9ebc\u505a :</p> <pre><code>f[] = 0\nfor x = 1 ~ N:\n    u = 1 +[N/x] * x\n    v = N\n    f[u] += 1, f[v+1] -= 1\n</code></pre> <p>\u6211\u5011\u767c\u73fe\u5c0d\u65bc \\(\\lfloor \\frac{N}{x} \\rfloor\\) \u662f\u4e00\u6a23\u7684 \\(x\\)\uff0c\\(\\lfloor \\frac{N}{x} \\rfloor\\times x\\) \u6703\u5f62\u6210\u4e00\u500b\u7b49\u5dee\u6578\u5217\uff0c\u9019\u6a23\u6211\u5011\u5c31\u5f97\u5230\u4e86\u4e00\u500b\u985e\u4f3c\u585e\u6cd5\u7684\u505a\u6cd5</p> <pre><code>f[] = 0\nfor d = 1 ~ sqrt(N):\n    minx = ???\n    maxx = ???\n    u = 1 + d * x\n    v = N\n    for (i = minx; i&lt;= maxx; i++) {\n            if (1 + d*i &lt;= L): f[L] += 1\n            else: f[1 + d*i] += 1     // O( (R-L+1) / d )\n            f[v+1] -= 1; \n    }\n</code></pre> <p>\u5176\u4e2d\uff0c\u5728 \\(1 + d\\times i\\) \u5728 \\(L\\) \u4ee5\u4e0b\u7684\u53ef\u4ee5\u7528\u6578\u5b78\u7b97\uff0c\u6240\u4ee5\u6211\u5011\u5176\u5be6\u53ea\u8981\u679a\u8209 \\(\\lfloor \\frac{N}{x} \\rfloor\\times x\\) \u5728 \\([L, R]\\) \u4e4b\u9593\u7684\u5373\u53ef\uff0c\u9019\u6a23\u5c0d\u65bc \\(\\lfloor \\frac{N}{x} \\rfloor\\) \u70ba \\(d\\) \u6642\u8907\u96dc\u5ea6\u662f \\(O( (R-L+1) / d )\\)\uff0c\u985e\u4f3c\u7be9\u6cd5\uff0c\u52a0\u8d77\u4f86\u5c31\u662f \\(O((R - L + 1) \\times \\log \\sqrt{N})\\)</p> <p>\u5176\u4ed6\u7df4\u7fd2\u53ef\u4e0aLOJ \u984c\u55ae</p>"},{"location":"offline/sqrt/#_6","title":"\u8cc7\u6599","text":"<ul> <li> <p>https://zhuanlan.zhihu.com/p/452977429</p> </li> <li> <p>https://www.tw511.com/a/01/51322.html</p> </li> <li> <p>https://blog.csdn.net/weixin_45675097/article/details/119709367</p> </li> <li> <p>https://zhuanlan.zhihu.com/p/594018645</p> </li> </ul>"},{"location":"other/bitwise/","title":"Bitwise Problem","text":""},{"location":"other/bitwise/#_1","title":"\u89e3\u6cd5","text":"<ul> <li> <p>\u5206\u6cbb</p> </li> <li> <p>trie</p> </li> <li> <p>sos dp</p> </li> <li> <p>greedy\uff08high bit \u2192 low bit\uff09</p> </li> </ul>"},{"location":"other/bitwise/#_2","title":"\u4f8b\u984c","text":""},{"location":"other/bitwise/#maximum-and","title":"Maximum AND","text":"CF 1721 D. Maximum AND <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a\\) \u548c \\(b\\)\uff0c\u6211\u5011\u5b9a\u7fa9 \\(f(a,b)\\) :</p> <ul> <li> <p>\\(c_i=a_i \\oplus b_i\\)</p> </li> <li> <p>\\(f(a,b)=c_1 \\mathbin{\\&amp;} c_2 \\mathbin{\\&amp;} \\cdots \\mathbin{\\&amp;} c_n\\)</p> </li> </ul> <p>\u4f60\u53ef\u4ee5 reorder \\(b\\)\uff0c\u8f38\u51fa \\(f(a,b)\\) \u6700\u5927\u53ef\u4ee5\u5230\u591a\u5c11</p> <p>\\(1\\le n\\le 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u5f9e\u9ad8\u4f4d\u8003\u616e\u5230\u4f4e\u4f4d\uff0c\u82e5 \\(a_i\\) \u6700\u9ad8\u4f4d\u662f 1 \u7684 bit \u8ddf \\(b_i\\) \u6700\u9ad8\u4f4d\u662f 0 \u7684 bit \u4e00\u6a23\u591a\uff0c\u4e14 \\(a_i\\) \u6700\u9ad8\u4f4d\u662f 0 \u7684 bit \u8ddf \\(b_i\\) \u6700\u9ad8\u4f4d\u662f 1 \u7684 bit \u4e00\u6a23\u591a\uff0cans \u7684\u6700\u9ad8\u4f4d\u5c31\u53ef\u4ee5\u662f 1\uff0c\u7136\u5f8c\u6211\u5011\u5728\u5206\u5169\u7d44\u89e3\u5b50\u554f\u984c</p> <p>\u4e0d\u904e\u9019\u5176\u5be6\u5c31\u662f\u5728\u554f\u76f8\u53cd\u7684\u6578\u91cf\u4e00\u4e0d\u4e00\u6a23\uff0c\u4f8b\u5982 010 \u7684\u6578\u91cf\u8ddf 101 \u7684\u6578\u91cf\u4e00\u4e0d\u4e00\u6a23\uff0c\u5982\u679c\u4e00\u6a23\u7684\u5316\u9019\u500b bit \u5c31\u53ef\u4ee5\u662f 1\uff0c\u5be6\u4f5c\u4e0a\u4e00\u6a23\u5f9e\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u8003\u616e\uff0c\u4f8b\u5982\u73fe\u5728\u8003\u616e\u7b2c i \u500b bit\uff0c\u5c31\u8981\u53bb\u770b ans | (1 &lt;&lt; i) \u88e1\u6709 1 \u7684 bit\uff0ca, b \u5169\u908a\u7684\u6578\u91cf\u662f\u5426\u4e00\u6a23</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0);\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        int n;\n        cin &gt;&gt; n;\n        vector&lt;int&gt; a(n), b(n);\n        for (int&amp; x : a) cin &gt;&gt; x;\n        for (int&amp; x : b) cin &gt;&gt; x;\n\n        auto check = [&amp;](int ans) {\n            map&lt;int, int&gt; cnt;\n            for (int x : a) ++cnt[x &amp; ans];\n            for (int x : b) --cnt[~x &amp; ans];\n            bool ok = true;\n            for (auto it : cnt) ok &amp;= it.second == 0;\n            return ok;\n        };\n\n        int ans = 0;\n        for (int bit = 29; bit &gt;= 0; --bit) \n            if (check(ans | (1 &lt;&lt; bit)))\n                ans |= 1 &lt;&lt; bit;\n\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    }\n}\n</code></pre> 2019 \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd pC. \u5e8f\u5217\u69cb\u9020 (Sequence) <p>\u7d66 \\(n,q\\)\uff0c\u6709 \\(q\\) \u7b46\u689d\u4ef6\uff0c\u6bcf\u7b46\u689d\u4ef6 \\((l,r,c)\\) \u4ee3\u8868 \\(a_l \\oplus \\ldots \\oplus a_r\\) \u8981\u662f \\(c\\)\uff0c\u69cb\u9020\u7e3d\u548c\u6700\u5c0f\u7684 \\(a_1, \\ldots ,a_n\\)</p> <p>\\(n,q\\le 5\\times 10^5,0\\le c &lt; 2^{30}\\)</p> \u601d\u8def <p>Subtask 3</p> <p>\u5c0d\u65bc\u4e00\u500b interval(l, r)\uff0c\u82e5\u5b58\u5728\u4e00\u500b x \u6eff\u8db3 [x, r] \u90fd\u8981\u662f 0\uff0c\u90a3\u6211\u5011\u5c31\u5c07 r \u8a2d\u70ba x - 1\u3002\u8655\u7406\u904e\u5f8c\uff0c\u5c07\u6bcf\u500b interval \u4ee5 pair(l, r) \u7684\u5f62\u5f0f\u5b58\u5230\u5230 vector v[r] \u88e1\u9762\uff0c\u6211\u5011\u5f9e 1 \u904d\u6b77\u5230 n\uff0c\u5047\u5982\u6211\u5011\u73fe\u5728\u5230\u4e86 i\uff0c\u82e5 i \u4e00\u5b9a\u8981\u586b 0\uff0c\u90a3\u5c31\u8df3\u904e\uff0cotherwise \u82e5 v[i] \u6709 pair\uff0c\u6211\u5011\u5c31\u6aa2\u67e5\u5f9e [l, i) \u6709\u6c92\u6709\u5df2\u7d93\u88ab\u9078\u7684\uff0c\u5982\u679c\u6c92\u6709\u5c31\u9078\u4e0a i</p> <p>Subtask 4 &amp; 5</p> <p>\u5c0d\u65bc\u6bcf\u500b bit\uff0c\u90fd\u7368\u7acb\u505a\u00a0Subtask 3\uff0c\u82e5\u5728\u8655\u7406\u7684\u904e\u7a0b\u4e2d\u591a\u5e36\u4e00\u500b\u00a0log n\u00a0\uff0c\u5247\u53ea\u6703\u62ff\u5230 Subtask 4 \u7684\u5206\u6578\uff0c\u7e3d\u8907\u96dc\u5ea6\u00a0O( (n + q) log C )\u00a0\u3002</p> <p>\u53c3\u8003\u81ea : 108 \u5b78\u5e74\u5ea6 \u5168\u570b\u8cc7\u8a0a\u5b78\u79d1\u80fd\u529b\u6a21\u64ec\u8cfd \u984c\u76ee\u8b1b\u89e3</p> Atcoder abc281 F. Xor Minimization <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,a_2,\\ldots ,a_n\\)\uff0c\u9078\u4e00\u500b\u975e\u8ca0\u6574\u6578 \\(x\\)\uff0c\u4f7f \\(a_i\\) \u8b8a\u6210 \\(a_i \\oplus x\\)\u3002\u8f38\u51fa\u9663\u5217\u7684\u6700\u5927\u503c\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(1\\le n\\le 1.5\\times 10^5,0\\le a_i &lt; 2^{30}\\)</p> \u601d\u8def <p>\u5f9e high bit \u5230 low bit \u8003\u616e\uff0c\u53ef\u4ee5\u89c0\u5bdf\u5230\u82e5\u5927\u5bb6\u90fd\u662f 0 \u6216 1 \u53ef\u4ee5\u76f4\u63a5 greedy \u7684\u9078\uff0c\u5426\u5247\u6211\u5011\u5c31\u8981\u5206\u6210\u5169\u7a2e\u60c5\u6cc1\u905e\u8ff4\u4e0b\u53bb\uff0c\u7136\u5f8c\u5c07\u6bd4\u8f03\u5c0f\u7684\u60c5\u6cc1\u591a\u589e\u52a0 (1 &lt;&lt; i)\uff0c\u518d\u5c07\u5169\u7a2e\u60c5\u6cc1\u53d6 max</p> <p>\u5be6\u4f5c\u4e0a\u53ef\u5c07\u5168\u90e8\u7684\u9ede\u6253\u5728 Trie \u4e0a\u9762\uff0c</p> code <pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint n;\nint son[4500005][2],cnt = 1;\nvoid insert(int x) {\n    int u = 1;\n    for (int i = 29; i &gt;= 0; i--) {\n        int v = x &gt;&gt; i &amp; 1;\n        if (!son[u][v]) son[u][v] = ++cnt;\n        u = son[u][v];\n    }\n}\nint query(int x, int dep) {\n    if (!son[x][0] &amp;&amp; !son[x][1]) return 0;\n    if (!son[x][0]) return query(son[x][1], dep - 1);\n    if (!son[x][1]) return query(son[x][0], dep - 1);\n    return min(query(son[x][0], dep - 1),query(son[x][1], dep - 1)) | 1 &lt;&lt; dep;\n}\nint main() {\n    scanf(\"%d\", &amp;n);\n    for (int _ = 1; _ &lt;= n; _++) {\n        int a;\n        scanf(\"%d\", &amp;a);\n        insert(a);\n    }\n    printf(\"%d\\n\",query(1, 29));\n    return 0;\n}\n</code></pre> CF 1851 F. Lisa and the Martians <p>\u7d66 \\(n,k\\)\uff0c\u548c\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u554f\u662f\u5426\u5b58\u5728 \\((a_i \\oplus x) \\&amp; (a_j \\oplus x)\\) \u6700\u5927\uff0c\u8f38\u51fa\u4efb\u610f\u4e00\u7d44 \\(i,j,x\\)</p> <p>\\(2\\le n\\le 2\\times 10^5, 1\\le k\\le 30, 0\\le a_i,x &lt; 2^k, i\\neq j\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u767c\u73fe\u8981\u4f7f \\(a_i, a_j\\) \u7684 bit \u8981\u76e1\u91cf\u4e00\u6a23\uff0c\u662f 0, 0 \u6216 1, 1\u3002\u5229\u7528 Trie\uff0c\u53bb Greedy \u7684\u627e\u5373\u53ef</p> <p>\u53e6\u89e3 :</p> <p>\u5c07\u9663\u5217\u5c0f\u5230\u5927 sort\uff0c\u5c0d\u65bc \\(a_i\\)\uff0c\u6211\u5011\u53ef\u4ee5\u767c\u73fe index \u5c0f\u65bc \\(i\\)\uff0c\u4e14\u4e8c\u9032\u5236\u8ddf \\(a_i\\) \u6700\u50cf\u7684\u5c31\u662f \\(a_{i-1}\\)\uff0c\u56e0\u70ba \\(a_i,a_{i-1}\\) \u53ef\u80fd\u6709\u4e00\u500b\u76f8\u7b49\u7684 prefix\uff0c\u7136\u5f8c\u63a5\u8457\u624d\u662f\u4e00\u500b bit \\(a_i\\) \u662f \\(1\\)\uff0c\\(a_{i-1}\\) \u662f \\(0\\)\u3002\u6709\u4e86\u9019\u500b\u7d50\u8ad6\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u5c07\u9663\u5217 sort\uff0c\u679a\u8209\u76f8\u9130\u5169\u9805\u914d\u8d77\u4f86\uff0c\u69cb\u9020 \\(x\\)\uff0c\u53d6 max \u5373\u53ef</p>"},{"location":"other/bitwise/#and","title":"AND","text":"<p>\u5c0d\u65bc\u4e00\u500b\u5e8f\u5217\u4f86\u8aaa\uff0cdistinct \u7684\u5340\u9593 AND \u6700\u591a\u53ea\u6703\u6709 \\(30\\times n\\) \u500b</p> 2023 IOIC 201 . \u7368\u4e00\u7121\u4e8c\u7684\u5340\u9593\u548c(\u310f\u3122\u02cb) <p>\u7d66 \\(n\\)\uff0c\u554f\u662f\u5426\u5b58\u5728\u4e00\u500b\u5e8f\u5217 \\(a_1 ,\\ldots ,a_n\\)\uff0c\u4f7f\u4efb\u610f\u5340\u9593 AND \u662f distinct \u7684\uff0c\u5982\u679c\u6709\uff0c\u8981\u8f38\u51fa\u4e00\u7d44\u89e3</p> <p>\\(1\\le n\\le 5000,0\\le a_i &lt; 2^{30}\\)</p> \u601d\u8def <p>\\(n &gt; 30\\) \u6642\u7121\u89e3</p> <p>\\(n \\leq 30\\) \u6642\u7e3d\u662f\u6709\u89e3\uff0c\u4e14 \\(a_i = 2^{30} - 1 - 2^{i}\\) \u662f\u500b\u5408\u6cd5\u69cb\u9020\u3002</p> CF 1847 F. The Boss's Identity <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u5c0d\u65bc \\(i&gt;n\\)\uff0c\\((a_{i-n}\\mid a_{i-n+1})\\)\u3002\u7d66\u4f60 \\(q\\) \u7b46 query :</p> <ul> <li>\\(\\text{query}(v):\\) \u8f38\u51fa\u6700\u5c0f\u7684 index \\(i\\) \u6eff\u8db3 \\(a_i &gt; v\\)</li> </ul> <p>\\(n, q\\le 2\\times 10^5, 0\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u6027\u8cea : \u4efb\u610f\u4e00\u500b \\(a_i\\) \u5176\u5be6\u5c31\u662f\u539f\u9663\u5217\u7684\u67d0\u4e00\u6bb5\u5340\u9593\u7684\u300c\u6216\u300d\u3002\u53ef\u4ee5\u7528\u6253\u8868\u627e\u51fa\u4f86\u3002</p> <p>\u8aaa\u660e : </p> <p>\u4ee4 \\(a=[1, 2, 3, 4, 5]\\)\uff0c\u6253\u8868 \\([1,2,3,4,5,12,23,34,45,512,123,234,345]\\)</p> 2 3 4 5 12 23 34 45 512 123 234 345 <p>\u53ef\u4ee5\u767c\u73fe\u898f\u5f8b\u6070\u597d\u662f (n - 1) \u4e00\u7d44</p> <p>\u5c0d\u65bc\u4e00\u500b\u300c\u74b0\u72c0\u300d subarray [l, r]\uff0creal_index = (n - 1) * (r - l) + 1 + (r - n)</p> <p>\u8d0f\u904e\u7684\u6578\u91cf = \u4e00\u500b\u5faa\u74b0\u7684\u6578\u91cf * \u8d0f\u904e\u5e7e\u7d44 + 1 + \u8d0f\u904e\u81ea\u5df1\u9019\u7d44\u7684\u5e7e\u500b\u4eba</p> <p>\u6240\u4ee5\u554f\u984c\u5c31\u8b8a\u6210 : \u7d66\u5b9a \\(v\\)\uff0c\u5728\u539f\u9663\u5217\u4e2d\u627e\u51fa\u4e00\u6bb5\u5340\u9593\uff0c\u4f7f\u5f97\u5340\u9593\u300c\u6216\u300d\\(&gt;v\\)\u3002</p> <p>\u8003\u616e\u5f9e \\(i\\) \u5f80\u524d\u7684\u4e00\u6bb5\u5b50\u5340\u9593\uff0c\u6700\u591a\u53ea\u6709 \\(30\\) \u500b\u4e0d\u540c\u7684\u7d50\u679c\u3002\u9019\u6a23\u5c31\u6709 \\(30\\times n\\) \u500b\u5b50\u5340\u9593\u4e86\uff0c\u8a18\u9304\u4ed6\u5011\u5728\u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u5340\u9593\u6216\u8d77\u4f86\u7684\u503c\uff0c\u5c0d\u65bc query \u4e8c\u5206\u67e5\u627e\u5373\u53ef</p> <p>\u53c3\u8003 : \u3010Codeforces Round #882(Div. 2)\u9898\u89e3(A-D,F)\u3011</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 9e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nvoid solve() {\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    vector&lt;pair&lt;int, int&gt;&gt; f;\n    vector&lt;pair&lt;int, int&gt;&gt; info;\n    info.pb({1, a[0]});\n    for (int i = 0; i &lt; 2 * n; i++) {\n        vector&lt;pair&lt;int, int&gt;&gt; g;\n        f.pb({0, i});\n        for (auto [value, pos] : f) {\n            value |= a[i % n];\n            if (!g.empty() &amp;&amp; g.back().F == value) {\n                g.pop_back();\n            }\n            g.pb({value, pos});\n        }\n        f.swap(g);\n        if (i &gt; n) {\n            for (auto [value, pos] : f) {\n                info.pb({(n - 1) * (i - pos) + 1 + i - n, value});\n            }\n        }\n    }\n\n    sort(info.begin(), info.end());\n    vector&lt;pair&lt;int, int&gt;&gt; res;\n    for (auto [pos, value] : info) {\n        if (res.empty() || value &gt; res.back().F) {\n            res.pb({value, pos});\n        }\n    }\n\n    while (q--) {\n        int v;\n        cin &gt;&gt; v;\n        auto it = upper_bound(res.begin(), res.end(), make_pair(v, INF));\n        if (it == res.end()) {\n            cout &lt;&lt; \"-1\\n\";\n        } else {\n            cout &lt;&lt; it-&gt;S &lt;&lt; '\\n';\n        }\n    }\n}\n\nsigned main() {\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n} \n</code></pre>"},{"location":"other/bitwise/#ioic","title":"IOIC","text":"2023 IOIC 301 . SOS <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_0 ,\\ldots ,a_{n-1}\\)\u3002\u6709\u4e00\u500b\u51fd\u6578 \\(f\\)\uff0c\u5b9a\u7fa9\u57df\u662f \\(0\\) \u5230 \\(n-1\\) \u7684\u6574\u6578\uff0c\u5c0d\u65bc\u4e00\u500b\u975e\u8ca0\u6574\u6578 \\(x\\)\uff0c\u5b9a\u7fa9</p> \\[f(x) = a_x + \\sum \\limits_ {y \\subseteq x} \\left( \\bigoplus \\limits_{z \\subseteq y} f(z) \\right)\\] <p>\u8f38\u51fa \\(f(n-1)\\) \u6a21 \\(2^{30}\\) \u7684\u6578\u503c\u3002</p> <p>\\(1 \\leq n \\leq 2 ^  {20}, 0 \\leq a_i &lt; 2^ {30}\\)</p> \u601d\u8def <p>\u4ee4 \\(g(x) = \\bigoplus \\limits_ {y \\subseteq x} f(y)\\) \u5247\uff0c\\(f(x) = a_x + \\sum \\limits_ {y \\subseteq x} g(y)\\)</p> <p>\u56e0\u70ba\u6211\u5011\u7684 mask \u662f 0 ~ (n-1)\uff0c\u6240\u4ee5\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u7528 SOS \u7684\u6a21\u677f\u6982\u5ff5\uff0c\u5c07\u6a21\u677f\u7684\u9806\u5e8f\u6539\u4e00\u4e0b\uff0c\u8b8a\u6210\u5982\u4e0b</p> <pre><code>for (int i = 0; i &lt; n; i++) {\n    for (int j = 0; j &lt; 20; j++) {\n        ....\n    }\n}\n</code></pre> <p>\u90a3\u9ebc\u53ef\u4ee5\u679a\u8209 \\(i\\) \u7531\u5c0f\u5230\u5927\uff0c\u5148\u8a08\u7b97\u5229\u7528  sum_g(i) \u5f97\u5230 f(i)\uff0c\u5c07 f(i) \u5c0d sum_f(i) \u7684\u8ca2\u737b\u7b97\u9032\u53bb\uff0c\u518d\u5229\u7528 sum_f(i) \u8a08\u7b97 g(i)\uff0c\u6700\u5f8c\u518d\u8a08\u7b97 g(i) \u5c0d sum_g(i) \u7684\u8ca2\u737b\u3002\u56e0\u70ba SOS dp \u7684\u8ff4\u5708\u9806\u5e8f\u985b\u5012\u4e86\uff0c\u6240\u4ee5\u4e0d\u80fd\u58d3\u6210\u6efe\u52d5\u9663\u5217\uff0c\u5fc5\u9808\u6ce8\u610f\u3002</p> <p>\u53c3\u8003\u81ea : https://hackmd.io/@cychien/SyX3xYJTo</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\nusing namespace std;\n\nconst int maxn = 1050005;\nconst int S = (1 &lt;&lt; 30) - 1;\nint sum_g[maxn][21], sum_f[maxn][21];\nint f[maxn], g[maxn];\n\nvoid add(int &amp;x, int y) {\n    x = (x + y) &amp; S;\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; f[i];\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        // \u8a08\u7b97 f(i)\n        for (int j = 0; j &lt; 20; j++) {\n            if (j) add(sum_g[i][j], sum_g[i][j - 1]);\n            if (i &amp; (1 &lt;&lt; j)) add(sum_g[i][j], sum_g[i ^ (1 &lt;&lt; j)][j]);\n        }\n\n        // sum_f(i) \u2190 f(i)\n        f[i] += sum_g[i][19];\n        f[i] &amp;= S;\n        sum_f[i][0] ^= f[i];\n\n        // \u8a08\u7b97 g(i)\n        for (int j = 0; j &lt; 20; j++) {\n            if (j) sum_f[i][j] ^= sum_f[i][j - 1];\n            if (i &amp; (1 &lt;&lt; j)) sum_f[i][j] ^= sum_f[i ^ (1 &lt;&lt; j)][j];\n        }\n        g[i] = sum_f[i][19];\n\n        // sum_g \u2190 g(i)\n        for (int j = 0; j &lt; 20; j++) {\n            add(sum_g[i][j], g[i]);\n        }\n    }\n    cout &lt;&lt; f[n - 1] &lt;&lt; \"\\n\";\n}\n</code></pre> 2023 IOIC 305 . \u62ec\u865f\u570b <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u62ec\u865f\u5b57\u4e32\uff0c\u554f\u6240\u6709 substring \u7684\u300c\u6700\u9577\u5408\u6cd5\u62ec\u865f\u5b50\u5e8f\u5217\u9577\u5ea6\u300d\u7e3d\u548c\u70ba\u4f55\uff1f</p> <p>\\(1\\le n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u4f7f\u7528\u4e00\u822c\u7528 stack \u62ec\u865f\u5e8f\u5217\u7684\u65b9\u5f0f\uff0c\u82e5\u6211\u5011\u73fe\u5728\u9047\u5230\u4e86\u4e00\u500b closing\uff0c\u90a3\u524d\u4e00\u500b opening \u8207\u76ee\u524d\u9019\u500b closing \u7684\u8ca2\u737b\u5c31\u662f opening \u5f80\u524d\u7684\u9577\u5ea6 \\(\\times\\) closing \u5f80\u5f8c\u7684\u9577\u5ea6\uff0c\u9019\u4e9b l, r \u5728\u9019\u4e9b\u7bc4\u570d\u5167\u7684\u90fd\u6703\u7b97\u5230\u6211\u5011</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int N = 2e5 + 5;\nint st[N];\n\nsigned main() {\n    int n;\n    string s;\n    cin &gt;&gt; n &gt;&gt; s;\n    s = \"$\" + s;\n\n    int ans = 0, r = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (s[i] == '(') st[++r] = i;\n        else if (s[i] == ')' &amp;&amp; r &gt; 0) ans += 1ll * st[r--] * (n - i + 1);\n    }\n    cout &lt;&lt; 2 * ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"other/bracket_problem/","title":"\u62ec\u865f\u554f\u984c","text":""},{"location":"other/bracket_problem/#_2","title":"\u89e3\u6cd5\u4e00\u89bd","text":"<ul> <li> <p>\u4e00\u3001\u5361\u7279\u862d\u6578</p> </li> <li> <p>\u4e8c\u3001stack \u89e3\u6cd5</p> </li> <li> <p>\u4e09\u3001\u5340\u9593 dp\uff08\u9069\u7528\u65bc\u6709\u5f88\u591a\u7a2e\u62ec\u865f\u985e\u578b\u6642\uff09</p> </li> <li> <p>\u56db\u3001\u524d\u7db4 dp\uff08\u9069\u7528\u65bc\u53ea\u6709\u4e00\u7a2e\u62ec\u865f\u985e\u578b\uff09</p> </li> <li> <p>\u4e94\u3001\u5de6\u62ec\u865f\u60f3\u6210 +1\uff0c\u53f3\u62ec\u865f\u60f3\u6210 -1\uff0cmin prefix sum &gt;= 0\uff0csum = 0</p> <ul> <li> <p>greedy \u4fee\u6539</p> </li> <li> <p>\u8cc7\u6599\u7d50\u69cb\u512a\u5316</p> </li> </ul> </li> </ul>"},{"location":"other/bracket_problem/#1-1","title":"\u5de6\u62ec\u865f+1\uff0c\u53f3\u62ec\u865f-1","text":"2023 \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd pF. \u95dc\u5361\u8a2d\u8a08 (level) <p>\u7d66\u4e00\u500b\u62ec\u865f\u5e8f\u5217\uff0c\u4e00\u6b21\u64cd\u4f5c\u53ef\u5c07\u4e00\u500b\u62ec\u865f\u6539\u8b8a\u65b9\u5411\uff0c\u554f\u662f\u5426\u80fd\u6070\u597d\u505a k \u6b21\u64cd\u4f5c\u4f7f\u62ec\u865f\u5e8f\u5217\u5408\u6cd5\uff0c\u82e5\u53ef\u4ee5\u7684\u8a71\u8f38\u51fa\u4e00\u7d44\u89e3</p> <p>\\(n, k \\le 2 \\times 10^6\\)</p> \u601d\u8def <p>\u3010\u4e00\u3001\u8f49\u63db\u554f\u984c\u3011</p> <p>\u5982\u679c\u5c07\u5de6\u62ec\u865f\u60f3\u6210 +1\uff0c\u53f3\u62ec\u865f\u60f3\u6210 -1\uff0c \u90a3\u9ebc\u5408\u6cd5\u7684\u689d\u4ef6\u662f</p> <ol> <li>\u6bcf\u500b prefix sum \u90fd\u5927\u65bc\u7b49\u65bc 0</li> <li>\u7e3d\u548c\u70ba 0</li> </ol> <p>\u3010\u4e8c\u3001\u4fee\u6539\u7684 greedy \u7b56\u7565\u3011</p> <p>\u4e5f\u5c31\u662f\u6211\u5011\u9700\u8981\u5c07\u4e00\u4e9b -1 \u8981\u8b8a\u6210 +1\uff0c\u4e00\u4e9b +1 \u8981\u8b8a\u6210 -1\u3002\u56e0\u70ba\u8981\u76e1\u91cf\u8b93\u6bcf\u500b prefix sum \u90fd\u5927\u65bc\u7b49\u65bc 0\uff0c\u6211\u5011\u5f97\u5230\u4e86\u4e00\u500b greedy \u7684\u7b56\u7565:</p> <ul> <li> <p>-1 \u6539\u6210 +1 \u7684\uff0c\u512a\u5148\u6539\u6108\u5de6\u908a\u7684\u6108\u597d</p> </li> <li> <p>+1 \u6539\u6210 -1 \u7684\uff0c\u512a\u5148\u6539\u6108\u53f3\u908a\u7684\u6108\u597d</p> </li> </ul> <p>\u3010\u4e09\u3001\u6c42\u5f97\u4fee\u6539\u500b\u5225\u7684\u6578\u91cf\u3011</p> <p>\u6211\u5011\u5047\u8a2d\u4e00\u958b\u59cb\u6709 x \u500b +1, y \u500b -1\uff0c-1 \u6539\u6210 +1 \u7684\u6709 u \u500b\uff0c+1 \u6539\u6210 -1 \u7684\u6709 v \u500b\u3002\u90a3\u9ebc\u6211\u5011\u662f\u5426\u53ef\u4ee5\u76f4\u63a5\u900f\u904e x, y, k \u5f97\u5230 u, v ?</p> <p>\u56e0\u70ba\u7e3d\u5171\u5c31\u53ea\u80fd\u6539 k \u500b\uff0c\u6240\u4ee5 u + v = k\uff0c\u4e00\u958b\u59cb\u7684 sum = x - y\uff0c\u4e4b\u5f8c\u7684\u6bcf\u500b u \u6703\u8b93 sum += 2\uff0c\u6bcf\u500b v \u6703\u8b93 sum -= 2\u3002\u800c\u6700\u5f8c\u7684 sum \u8981\u662f 0\uff0c\u6240\u4ee5  sum = (x-y) + 2u - 2v = 0\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u89e3\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u5f0f\u5f97\u5230 u, v\uff0c\u518d\u5957\u7528\u6b65\u9a5f\u4e8c\u7684 greedy \u7b56\u7565\u5373\u53ef\u3002\u7121\u89e3\u7684\u8a71\u53ef\u4ee5\u5728\u89e3 u, v \u6216\u662f\u505a greedy \u5b8c\u5f8c\u5f97\u5230\u3002</p> <p>\u53e6\u4e00\u7a2e\u60f3\u6cd5:</p> <p>\u70ba\u4e86\u7c21\u5316\u984c\u76ee\uff0c\u6211\u5011\u5c07\u539f\u672c\u7684\u62ec\u865f\u5e8f\u5217\u6bcf\u4e00\u9805\u90fd\u66ff\u63db\u6210\u5de6\u62ec\u865f\u3002\u63a5\u8457\uff0c\u6211\u5011\u4ee4\u539f\u672c\u7684\u62ec\u865f\u5e8f\u5217\u70ba a\uff0c\u4f9d\u7167\u4e0a\u4e00\u53e5\u8a71\u66ff\u63db\u5f8c\u7684\u5e8f\u5217\u70ba b\uff0c\u5247\u5c0d\u65bc\u4fee\u6539\u7684\u8ca2\u737b\uff0c\u6211\u5011\u53ef\u4ee5\u9019\u9ebc\u60f3: \u5047\u8a2d\u6709\u4e00\u500b\u9663\u5217 v\uff0c\u82e5 a[i] != b[i]\uff0c\u5247 v[i] = -1\uff0c\u4ee3\u8868\u53cd\u6094\u64cd\u4f5c\uff0c\u53cd\u5247\u82e5 a[i] = b[i]\uff0c\u5247 v[i] = 1\uff0c\u4ee3\u8868\u82b1\u8cbb\u4e00\u55ae\u4f4d\u7684\u8ca2\u737b\u6539\u8b8a\u7b2c i \u9805\u3002\u6211\u5011\u7684\u76ee\u6a19\u5c31\u662f\u8981\u5f9e b \u9078\u51fa n / 2 \u9805\uff0c\u8b93\u4ed6\u5011\u91cd\u65b0\u8b8a\u56de\u53f3\u62ec\u865f\uff0c\u800c\u4e14\u8981\u6eff\u8db3: \u62ec\u865f\u5e8f\u5217\u9808\u5408\u6cd5\u3001\u6700\u5f8c\u7684\u5e8f\u5217\u53ea\u80fd\u662f\u66f4\u52d5 k \u9805\uff0c\u90a3\u5176\u5be6\u9019\u5c31\u7b49\u50f9\u65bc\u5728 v \u5167\u9078 n/2 \u9805\uff0c\u8b93\u4ed6\u5011\u7684\u7e3d\u548c\u662f k'\uff08k' \u5c31\u662f a \u6539\u6210 b \u5f8c\u9084\u80fd\u4fee\u6539\u7684\u6b21\u6578\uff09\u3002\u6211\u5011\u5c07\u5f0f\u5b50\u5217\u51fa\u4f86\uff0c\u4ee4\u8981\u9078\u7684 1 \u7684\u7e3d\u548c\u70ba x\uff0c-1 \u7684\u7e3d\u5408\u70ba y\uff0c\u5247\u53ef\u4ee5\u5217\u51fa</p> <p>      x - y = n / 2      x + y = k'    </p> <p>\u8209\u500b\u5be6\u969b\u7684\u4f8b\u5b50\uff0c\u4f8b\u5982\u8aaa n = 10\uff0ck = 6\uff0c<code>a = )))))(((((</code>\uff0c\u5247 <code>b = ((((((((((</code>\uff0c\u6240\u4ee5 <code>v = [-1, -1, -1, -1, -1, 1, 1, 1, 1, 1]</code>\u3002\u6b64\u6642 k' = 6 - 5 = 1\u3002\u6211\u5011\u4f86\u89e3\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u5f0f</p> <p>      x - y = 5      x + y = 1    </p> <p>\u5f97\u5230 x = 3, y = -2\u3002</p> <p>x, y \u82e5\u6703\u4e0d\u5408\u6cd5\uff0c\u6b64\u6642\u53ef\u8f38\u51fa\u7121\u89e3\uff0c\u5426\u5247\u5728\u5f97\u5230 x, y \u4e4b\u5f8c\uff0c\u6211\u5011\u5c31\u53ef\u4ee5 greedy \u7684\u7531\u5f8c\u5f80\u524d\uff0c\u5c07 b \u8b8a\u6210\u6211\u5011\u6700\u7d42\u7684\u7b54\u6848\uff0c\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u5f9e\u5f8c\u5f80\u524d\u8003\u616e\uff0c\u5047\u5982\u6b64\u6642\u770b\u5230\u7b2c i \u9805\uff0c\u6211\u5011\u5c31\u770b v[i] \u662f\u5c0d\u61c9\u5230 x \u6216 y\uff0c\u82e5\u5c0d\u61c9\u5230\u7684\uff08\u5047\u5982\u662f x\uff09\u9084\u6709\u5269\uff0c\u5247\u5c31\u5c07 b[i] \u6539\u52d5\uff0c\u5426\u5247\uff0c\u6211\u5011\u5c31\u7e7c\u7e8c\u5f80\u524d\u9762\u4e00\u9805\u8003\u616e\u3002\u6ce8\u610f\uff0c\u6700\u5f8c\u6539\u5b8c\u7684\u6642\u5019\uff0c\u4e5f\u8981\u8a18\u5f97\u6aa2\u67e5\u662f\u5426\u70ba\u4e0d\u5408\u6cd5\u7684\u62ec\u865f\u5e8f\u5217\u3002\u4f8b\u5982\u8aaa n = 10, k = 2, <code>a = )))))(((((</code>\uff0c\u5247 <code>b = ((((((((((</code>\uff0c\u6240\u4ee5 <code>v = [-1, -1, -1, -1, -1, 1, 1, 1, 1, 1]</code>\u3002\u6b64\u6642 k' = 2 - 5 = -3\u3002\u6211\u5011\u89e3\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u5f0f\u53ef\u5f97\u5230 x = 1, y = -4\uff0c\u4f46\u9019\u6a23\u6539\u5b8c\u5f8c\u7e8c\u5217\u70ba <code>())))(((()</code>\uff0c\u4e0d\u5408\u6cd5\u3002</p> \u6700\u5c11\u4fee\u6539\u6b21\u6578 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u62ec\u865f\u5e8f\u5217\uff0c\u4e00\u6b21\u64cd\u4f5c\u53ef\u5c07\u4e00\u500b\u62ec\u865f\u6539\u8b8a\u65b9\u5411\uff0c\u554f\u81f3\u5c11\u5e7e\u6b21\u64cd\u4f5c\u624d\u53ef\u4ee5\u4f7f\u62ec\u865f\u5e8f\u5217\u5408\u6cd5</p> <p>\\(n\\le 2\\times 10^6\\)</p> \u601d\u8def <p>\u4e00\u6a23\u4f7f\u7528\u4e0a\u9762\u5206\u6790\u7684\u89c0\u9ede\uff0c\u5047\u8a2d\u9700\u8981 u \u500b -1 \u8b8a\u6210 +1\uff0cv \u500b +1 \u8b8a\u6210 -1\uff0c\u6211\u5011\u7684\u76ee\u6a19\u662f\u6700\u5c0f\u5316 u + v\u3002\u6211\u5011\u5206\u6210\u5169\u500b\u6b65\u9a5f: </p> <ol> <li>\u4f7f sum \u8b8a\u6210 0: \u4f9d\u7167 (x-y) + 2u - 2v = 0\uff0c\u6211\u5011\u53ef\u6c42\u5f97 u - v\uff0c\u6211\u5011\u5148\u5c07 u, v \u5176\u4e2d\u4e00\u500b\u8a2d\u6210 0\uff0c\u4f7f u + v \u6700\u5c0f</li> <li>\u4f7f min prefix sum &gt;= 0: \u82e5\u6b64\u6642 min prefix sum &lt; 0\uff0c\u6211\u5011\u5c31\u5fc5\u9808\u5c07\u4e00\u4e9b-1 \u8b8a\u6210 +1\uff0c\u4e5f\u5c31\u662f u \u8981\u589e\u52a0\u5230\u8b93 min prefix sum = 0\uff0c\u800c u \u589e\u52a0 v \u4e5f\u8981\u8ddf\u8457\u589e\u52a0\uff0c\u56e0\u6b64\u6211\u5011\u5c31\u53ef\u4ee5\u78ba\u5b9a u + v \u8981\u662f\u591a\u5c11\u4e86</li> </ol> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\u5047\u8a2d\u6b64\u6642\u5e8f\u5217\u70ba <code>- + - - + + + - + +</code>\uff0c\u7b97\u51fa x = 6, y = 4\uff0c\u6240\u4ee5\u53ef\u4ee5\u7531 (x-y) + 2u - 2v = 0 \u5f97\u5230 u - v = -1\uff0c\u6211\u5011\u5c07 u \u8a2d\u70ba 0\uff0c\u9019\u6642 u = 0, v = 1\uff0c\u76ee\u524d\u7684 prefix sum:</p> <pre><code> -  +  -  -  +  +  +  -  +  -\n-1  0 -1 -2 -1  0  1  0  1  0\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 min prefix sum \u70ba -2\uff0c\u5247\u6211\u5011\u9700\u8981 u = 1 \u4f86\u4f7f min prefix sum &gt;= 0\uff0c\u7528 greedy \u7684\u7b56\u7565\u5f9e\u524d\u9762\u4fee\u6539 u\uff0c\u5f9e\u5f8c\u9762\u4fee\u6539 v\uff0c\u5f97:</p> <pre><code> +  +  -  -  +  +  +  -  -  -\n 1  2  1  0  1  2  3  2  1  0\n</code></pre> <p>\u6240\u4ee5\u6700\u5f8c\u662f u = 1, v = 2</p> <p>\u53e6\u5916\u4e00\u7a2e\u65b9\u6cd5\u662f\u5148\u4f7f min prefix sum &gt;= 0\uff0c\u518d\u8abf\u6574\u8b93 sum = 0\u3002\u6211\u5011\u5f9e\u7b2c\u4e00\u9805\u958b\u59cb\u5f80\u5f8c\u4f9d\u5e8f\u8003\u616e\uff0c\u82e5\u7576\u524d\u53f3\u62ec\u865f - \u5de6\u62ec\u865f\u7684\u6578\u91cf &lt; 0 \u4e86\uff0c\u5247\u5c07\u76ee\u524d\u7684\u53f3\u62ec\u865f\u6539\u6210\u5de6\u62ec\u865f\uff0c\u5426\u5247\u5c31\u5f80\u4e0b\u4e00\u9805\u770b\uff0c\u9019\u6a23\u505a\u5230\u6700\u5f8c\u53ef\u4ee5\u4fdd\u8b49 min prefix sum &gt;= 0\uff0c\u800c\u4e14\u53ef\u80fd\u6703\u591a\u653e\u4e86\u5e7e\u500b\u5de6\u62ec\u865f\uff0c\u4e5f\u5c31\u662f\u6211\u5011\u9700\u8981\u53bb\u589e\u52a0 v \u7684\u6578\u91cf\uff0c\u6240\u4ee5\u6211\u5011\u5f9e\u5f8c\u9762\u5f80\u524d\u5c07\u770b\u5230\u7684\u53f3\u62ec\u865f\u6539\u6210\u5de6\u62ec\u865f\u76f4\u5230 sum = 0 \u5373\u53ef</p> \u5408\u6cd5\u5224\u65b7/\u6700\u5927\u5339\u914d\u6df1\u5ea6 CF 1263 E. Editor <p>\u73fe\u5728\u6709\u4e00\u500b\u6253\u5b57\u6a5f\uff0c\u6709\u4ee5\u4e0b\u64cd\u4f5c :</p> <ul> <li> <p><code>L</code> : \u5c07 pointer \u5f80\u5de6\u79fb 1 \u683c</p> </li> <li> <p><code>R</code> : \u5c07 pointer \u5f80\u53f3\u79fb 1 \u683c</p> </li> <li> <p>\u4e00\u500b\u5c0f\u5beb\u5b57\u6bcd\u6216\u8005 <code>(</code>, <code>)</code> : \u5c07 pointer \u4e0a\u7684\u5b57\u5143\u66ff\u63db\u70ba\u7d66\u5b9a\u5b57\u5143</p> </li> </ul> <p>\u5728\u6bcf\u6b21\u64cd\u4f5c\u5f8c\uff0c\u5224\u65b7\u9019\u4e00\u884c\u662f\u5426\u662f\u5408\u6cd5\u62ec\u865f\u5e8f\u5217\u3002\u5982\u679c\u662f\u7684\u8a71\uff0c\u8f38\u51fa\u6700\u5927\u5339\u914d\u6df1\u5ea6</p> \u601d\u8def <p>\u5c0d\u65bc\u4e00\u500b\u5340\u9593\u800c\u8a00\uff0c\u62ec\u865f\u80fd\u5426\u6210\u529f\u5339\u914d\u6709\u5169\u500b\u5224\u65b7\u6a19\u6e96: </p> <ol> <li>\u5de6\u53f3\u62ec\u865f\u6578\u91cf\u8981\u76f8\u540c</li> <li>\u4efb\u610f\u524d\u7db4\u4e2d\uff0c\u53f3\u62ec\u865f\u7684\u6578\u76ee\u4e0d\u80fd\u5927\u65bc\u5de6\u62ec\u865f\u7684\u6578\u76ee.</li> </ol> <p>\u5982\u679c\u6211\u5011\u628a\u5de6\u62ec\u865f\u770b\u70ba +1\uff0c\u53f3\u62ec\u865f\u770b\u70ba -1\uff0c\u5247\u4e0a\u8ff0\u6a19\u6e96\u7b49\u50f9\u65bc: </p> <ol> <li>\u5340\u9593\u548c\u70ba 0</li> <li>\u5340\u9593\u6700\u5c0f\u524d\u7db4\u548c\u4e5f\u61c9\u7b49\u65bc 0</li> </ol> <p>\u6b64\u6642\u6700\u5927\u5339\u914d\u6df1\u5ea6\u61c9\u662f\u5340\u9593\u6700\u5927\u9023\u7e8c\u5b50\u6bb5\u548c\u3002\u5047\u8a2d\u5340\u9593\u53ef\u4ee5\u6b63\u78ba\u5339\u914d\uff0c\u5247\u524d\u7db4\u548c\u4e0d\u6703\u51fa\u73fe\u8ca0\u6578\u60c5\u6cc1\uff0c\u56e0\u6b64\u6700\u5927\u9023\u7e8c\u5b50\u6bb5\u548c\u7b49\u50f9\u65bc\u6700\u5927\u524d\u7db4\u548c\uff0c\u6211\u5011\u53ea\u9700\u8981\u7dad\u8b77\u6700\u5927\u524d\u7db4\u548c\u5373\u53ef\u3002</p> <p>\u56e0\u6b64\u5c0d\u65bc\u9019\u985e\u554f\u984c\uff0c\u6211\u5011\u53ea\u9700\u8981\u7dad\u8b77 :</p> <ul> <li> <p>\u6700\u5927\u524d\u7db4\u548c\uff08\u6700\u5927\u6df1\u5ea6\uff09</p> </li> <li> <p>\u6700\u5c0f\u524d\u7db4\u548c\uff08\u5224\u65b7\u5408\u6cd5\uff09</p> </li> <li> <p>\u5340\u9593\u548c\uff08\u5224\u65b7\u5408\u6cd5\uff09</p> </li> </ul> <p>\u53c3\u8003 : https://blog.csdn.net/weixin_45799835/article/details/120182104</p>"},{"location":"other/bracket_problem/#_3","title":"\u5408\u6cd5\u9577\u5ea6/\u65b9\u6cd5\u6578","text":"Leetcode 32. Longest Valid Parentheses <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u62ec\u865f\u5e8f\u5217\uff0c\u554f\u6700\u9577\u5408\u6cd5\u5b50\u5b57\u4e32\uff08\u9023\u7e8c\uff09\u9577\u5ea6</p> <p>\\(0\\le n\\le 3\\times 10^4\\)</p> code <pre><code>class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int res = 0, start = 0, n = s.size();\n        stack&lt;int&gt; st;\n        for (int i = 0; i &lt; n; ++i) {\n            if (s[i] == '(') {\n                st.push(i);\n            } else if (s[i] == ')') {\n                if (st.empty()) {\n                    start = i + 1;\n                } else {\n                    st.pop();\n                    res = st.empty() ? max(res, i - start + 1) : max(res, i - st.top());\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre> \u5408\u6cd5\u5b50\u5b57\u4e32\u65b9\u6cd5\u6578 51Nod 1791 \u5408\u6cd5\u62ec\u53f7\u5b50\u6bb5 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u62ec\u865f\u5e8f\u5217\uff0c\u6c42\u5408\u6cd5\u5b50\u5b57\u4e32\u500b\u6578</p> <p>\\(n\\le 1.1\\times 10^6\\)</p> \u601d\u8def <p>\u8003\u616e dp \u6c42\u89e3\uff0c\u4ee4 dp(i) \u8868\u793a\u4ee5 i \u7d50\u5c3e\u7684\u5408\u6cd5\u62ec\u865f\u5b50\u5b57\u4e32\u500b\u6578\uff0c\u7b54\u6848\u5c31\u6703\u662f \\(\\sum dp(i)\\)</p> <p>\u4f7f\u7528 stack \u5c0d\u65bc\u6bcf\u4e00\u500b\u5de6\u62ec\u865f\u958b\u59cb\u8a18\u9304\u5b83\u7684\u4f4d\u7f6e\uff0c\u7576\u9047\u5230\u4e00\u500b\u53f3\u62ec\u865f\uff0c\u5b83\u53ef\u4ee5\u7531\u548c\u81ea\u5df1\u5339\u914d\u7684\u4f4d\u7f6e\u6e1b\u53bb 1 \u7684\u4f4d\u7f6e\u8f49\u79fb\u800c\u4f86\uff0c\u5373</p> \\[ dp(i)=dp(j-1)+1 \\] <p>\u8981 + 1 \u662f\u56e0\u70ba\u53ef\u4ee5\u9078\u64c7\u8981\u4e0d\u8981\u7e7c\u7e8c\u5f80\u524d\u63a5\uff0c\u6216\u662f\u7528\u8ddf\u81ea\u5df1\u5339\u914d\u7684\u5c31\u597d\u3002\u4ee5\u9019\u500b\u4f8b\u5b50\u4f86\u8aaa ( ) ( ( ) ( ) )\uff0c\u8ddf\u6700\u5f8c\u4e00\u500b\u53f3\u62ec\u865f\u5339\u914d\u7684\u5de6\u62ec\u865f\u4ee5\u85cd\u8272\u6a19\u8a3b: ( ) ( ( ) ( ) )\uff0c\u7531\u65bc\u5b50\u5b57\u4e32\u4e00\u5b9a\u8981\u9023\u7e8c\uff0c\u6240\u4ee5\u53ea\u80fd\u5f9e\u5339\u914d\u7684\u5de6\u62ec\u865f\u4e4b\u524d\u7e7c\u7e8c\u63a5</p> <p>\u53c3\u8003\u81ea: https://www.luogu.com.cn/blog/corleonefamily/kuo-hao-xu-lie-wen-ti</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nint countValidSubstrings(string s) {\n    int n = s.length();\n    s = \"$\" + s;\n    vector&lt;int&gt; dp(n + 1, 0);\n    stack&lt;int&gt; stk;\n    int ans = 0;\n\n    for (int i = 1; i &lt;= n; ++i) {\n        if (s[i] == '(') {\n            stk.push(i);\n        } else if (!stk.empty()) {\n            dp[i] = dp[stk.top() - 1] + 1;\n            stk.pop();\n            ans += dp[i];\n        }\n    }\n\n    return ans;\n}\n\nsigned main() {\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        string s;\n        cin &gt;&gt; s;\n        cout &lt;&lt; countValidSubstrings(s) &lt;&lt; '\\n';\n    }\n}\n</code></pre> AcWing 4207. \u6700\u957f\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u62ec\u865f\u5e8f\u5217\uff0c\u554f\u6700\u9577\u5408\u6cd5\u5b50\u5e8f\u5217\uff08\u4e0d\u4e00\u5b9a\u9023\u7e8c\uff09\u9577\u5ea6</p> <p>\\(1\\le n\\le 10^6\\)</p> \u601d\u8def <p>\u6211\u5011\u5f9e\u7b2c\u4e00\u9805\u958b\u59cb\u5f80\u5f8c\u4f9d\u5e8f\u8003\u616e\uff0c\u82e5\u7576\u524d\u53f3\u62ec\u865f - \u5de6\u62ec\u865f\u7684\u6578\u91cf &lt; 0 \u4e86\uff0c\u5c31\u4e0d\u53d6\u7576\u524d\u9019\u4e00\u9805\u7684\u53f3\u62ec\u865f\uff0c\u5426\u5247\u5c31\u5c07 ans++</p> code <pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nchar str[N];\n\nint main() {\n    scanf(\"%s\", str);\n\n    int cnt = 0, ans = 0;\n    for (int i = 0; str[i]; i++) {\n        if (str[i] == '(') {\n            cnt++;\n            ans++;\n        } else if (cnt &gt; 0) {\n            cnt--;\n            ans++;\n        }\n    }\n\n    printf(\"%d\", ans);\n\n    return 0;\n}\n</code></pre> \u6700\u9577\u5408\u6cd5\u62ec\u865f\u5e8f\u5217 CF 380 C. Sereja and Brackets <p>\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u62ec\u865f\u5e8f\u5217 \\(s\\)\uff0c\u6709 \\(q\\) \u500b\u8a62\u554f :</p> <ul> <li>\\(\\text{query}(l, r):\\) \u8f38\u51fa \\(s_l,\\ldots ,s_r\\) \u7684\u6700\u9577\u5408\u6cd5\u62ec\u865f\u5e8f\u5217\u9577\u5ea6</li> </ul> <p>\\(1\\le n\\le 10^6, 1\\le m\\le 10^5\\)</p> \u601d\u8def <p>\u8003\u616e\u4e00\u500b\u62ec\u865f\u5e8f\u5217\uff0c\u6211\u5011\u628a\u80fd\u5339\u914d\u7684\u62ec\u865f\u5168\u90fd\u522a\u6389\uff0c\u5269\u4e0b\u7684\u62ec\u865f\u4e00\u5b9a\u5f62\u5982 <code>))))))(((((((((</code></p> <p>\u6211\u5011\u8003\u616e\u7528\u7dda\u6bb5\u6a39\u53bb\u7dad\u8b77\u3002\u8003\u616e\u8a18\u9304\u6bcf\u500b\u5340\u9593</p> <ul> <li> <p>\u672a\u5339\u914d\u7684\u5de6\u62ec\u865f\u6578\u91cf</p> </li> <li> <p>\u672a\u5339\u914d\u7684\u53f3\u62ec\u865f\u6578\u91cf</p> </li> <li> <p>\u7576\u524d\u5340\u9593\u5df2\u7d93\u7522\u751f\u7684\u8ca2\u737b\u548c</p> </li> </ul> <p>\u5728\u5408\u4f75\u5169\u500b\u5340\u9593\u6642: \u65b0\u5340\u9593\u7684\u8ca2\u737b = \u5de6\u5340\u9593\u539f\u5148\u7684\u8ca2\u737b + \u53f3\u5340\u9593\u539f\u5148\u7684\u8ca2\u737b + \u5408\u4f75\u5f8c\u65b0\u7522\u751f\u7684\u8ca2\u737b\u3002\u5176\u4e2d\uff0c\u5408\u4f75\u5f8c\u65b0\u7522\u751f\u7684\u8ca2\u737b = 2 * min(\u5de6\u5340\u9593\u672a\u5339\u914d\u7684\u5de6\u62ec\u865f\u6578, \u53f3\u5340\u9593\u672a\u5339\u914d\u7684\u53f3\u62ec\u865f\u6578)\u3002</p> <pre><code>struct Node {\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int l, r;\n    int sum, vl, vr;\n\n    void pull() {\n        int macthes = min(l-&gt;vl, r-&gt;vr);\n        sum = lc-&gt;sum + rc-&gt;sum + 2 * macthes;\n        vl = l-&gt;vl + r-&gt;vl - matches;\n        vr = l-&gt;vr + r-&gt;vr - matches;\n    }\n};\n</code></pre> <p>\u53c3\u8003 : https://blog.csdn.net/weixin_45799835/article/details/120037468</p> \u5408\u6cd5\u62ec\u865f\u5b50\u5e8f\u5217\u65b9\u6cd5\u6578 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217\uff0c\u6c42\u62ec\u865f\u5e8f\u5217\u7684\u5408\u6cd5\u300c\u5b50\u5b57\u4e32\u300d\u500b\u6578</p> <p>\\(n\\le 5000\\)</p> \u601d\u8def <p>dp(i, k) \u8868\u793a\u8003\u616e 1~i\uff0c\u5de6\u62ec\u865f\u6bd4\u53f3\u62ec\u865f\u591a k \u500b\u7684\u5b50\u5e8f\u5217\u6578\u91cf</p> <p>\u8f49\u79fb\u5982\u4e0b</p> <pre><code>dp(i, k) += dp(i - 1, k)\nif s[i] == '(': dp(i, k) += dp(i - 1, k - 1)\nelse s[i] == ')': dp(i, k) += dp(i - 1, k + 1)\n</code></pre>"},{"location":"other/bracket_problem/#_4","title":"\u5176\u4ed6","text":"\u6700\u5c11\u4ea4\u63db\u6b21\u6578 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u62ec\u865f\u5e8f\u5217\uff0c\u6bcf\u6b21\u53ef\u4ee5 swap \u76f8\u9130\u7684\u5169\u9805\uff0c\u554f\u81f3\u5c11\u5e7e\u6b21\u624d\u80fd\u8b8a\u5408\u6cd5</p> <p>\\(n\\le 2\\times 10^6\\)</p> \u601d\u8def <p>\u5229\u7528 stack \u8655\u7406\u62ec\u865f\u7684\u65b9\u5f0f\uff0c\u4ee4 cnt \u70ba\u7576\u524d\u5de6\u62ec\u865f - \u53f3\u62ec\u865f\u7684\u6578\u91cf\uff0c\u82e5\u7576\u524d cnt &lt; 0\uff0c\u5247\u8981\u5c07\u7576\u524d\u6700\u8fd1\u7684\u5de6\u62ec\u865f\u7d66 swap \u904e\u4f86\uff0c\u5177\u9ad4\u4f86\u8aaa\uff0c\u5047\u8a2d\u7576\u524d\u7684 index \u662f i\uff0c\u5728\u53f3\u5074\u96e2 i \u6700\u8fd1\u7684\u5de6\u62ec\u865f\u5728 j\uff0c\u5247\u9700\u8981\u82b1 j - i \u7684 cost \u5c07\u9019\u500b\u5de6\u62ec\u865f\u7d66\u642c\u904e\u4f86\uff0c\u7136\u5f8c\u6211\u5011\u518d\u5c07 i, j swap \u5373\u53ef\u3002\u5be6\u4f5c\u4e0a\uff0c\u53ef\u4ee5\u7528\u4e00\u500b queue \u5b58\u6240\u6709\u5de6\u62ec\u865f\u500b\u4f4d\u7f6e\uff0c\u7136\u5f8c\u7528\u4e00\u500b\u6307\u91dd\u5728\u88e1\u9762\u55ae\u8abf\u5f80\u53f3\u79fb\u52d5\u5373\u53ef\uff0c\u8a73\u898b\u4ee3\u78bc\u3002</p> <p>\u53c3\u8003\u81ea: https://cloud.tencent.com/developer/news/395689</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nlong swapCount(string s) {\n    vector&lt;int&gt; pos;\n    for (int i = 0; i &lt; s.length(); ++i) {\n        if (s[i] == '(') {\n            pos.push_back(i);\n        }\n    }\n\n    int counter = 0;\n    int p = 0; \n    long sum = 0; \n    for (int i = 0; i &lt; s.length(); ++i) {\n        if (s[i] == '(') {\n            ++counter;\n            ++p;\n        } else if (s[i] == ')') {\n            --counter;\n        }\n        if (counter &lt; 0) {\n            sum += pos[p] - i;\n            swap(s[i], s[pos[p]]);\n            ++p;\n            counter = 1;\n        }\n    }\n    return sum;\n}\n\nint main() { \n    string s = \"())()(\";\n    cout &lt;&lt; swapCount(s) &lt;&lt; endl;\n\n    s = \"(()())\";\n    cout &lt;&lt; swapCount(s) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> AcWing 3420. \u62ec\u53f7\u5e8f\u5217 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u62ec\u865f\u5e8f\u5217\uff0c\u76e1\u53ef\u80fd\u5c11\u5730\u6dfb\u52a0\u82e5\u5e72\u62ec\u865f\u4f7f\u5e8f\u5217\u5408\u6cd5\uff0c\u554f\u6709\u5e7e\u7a2e\u6dfb\u52a0\u7684\u65b9\u6cd5\u6578</p> <p>\\(n\\le 5000\\)</p> \u601d\u8def <p>\u3010\u5206\u6790\uff0c\u7c21\u5316\u554f\u984c\u3011</p> <p>\u5de6\u62ec\u865f\u8207\u53f3\u62ec\u865f\u6240\u65b0\u589e\u7684\u4f4d\u7f6e\u65b9\u6848\u662f\u76f8\u4e92\u7368\u7acb\u7684\uff0c\u4e0d\u6703\u76f8\u4e92\u5f71\u97ff\uff0c\u5373\u4f7f\u5de6\u3001\u53f3\u62ec\u865f\u6dfb\u52a0\u5728\u540c\u4e00\u500b\u9593\u9699\uff0c\u56e0\u70ba\u4e0d\u80fd\u5b58\u5728 \"()\" \u7684\u5f62\u5f0f\uff0c\u6b64\u8655\u53ea\u80fd\u70ba\u985e\u4f3c \"))((\" \u7684\u4e00\u7a2e\u5f62\u5f0f\uff0c\u6545\u7e3d\u7684\u65b9\u6848\u6578\u7b49\u65bc\u5de6\u62ec\u865f\u7684\u65b9\u6848\u6578 * \u53f3\u62ec\u865f\u7684\u65b9\u6848\u6578\u3002</p> <p>\u55ae\u7368\u8003\u616e\u6dfb\u52a0\u5de6\u62ec\u865f\uff0c\u82e5\u4ee5\u53f3\u62ec\u865f\u70ba\u5206\u5272\u9ede\uff0c\u5c07\u6574\u500b\u5e8f\u5217\u9032\u884c\u5206\u5272\uff0c\u56e0\u70ba\u5206\u5272\u5f8c\u7684\u5b50\u5b57\u4e32\u4e2d\u5747\u70ba\u5de6\u62ec\u865f\uff0c\u6dfb\u52a0\u4efb\u610f\u6578\u76ee\u7684\u5de6\u62ec\u865f\u65b9\u6848\u6578\u5747\u70ba\u4e00\u7a2e\uff0c\u90a3\u9ebc\u6b64\u6642\uff0c\u6211\u5011\u50c5\u9700\u8003\u616e\u6dfb\u52a0\u4e0d\u540c\u6578\u91cf\u7684\u5de6\u62ec\u865f\u7684\u65b9\u6848\u6578\u5373\u53ef\u3002\u53f3\u62ec\u865f\u540c\u7406\u3002</p> <p>\u3010\u524d\u7db4 dp\u3011 dp(i, j) \u8868\u793a\u53ea\u8003\u616e\u524d i \u90e8\u5206\uff0c\u5de6\u62ec\u865f\u6bd4\u53f3\u62ec\u865f\u591a j \u500b\u7684\u6240\u6709\u65b9\u6848\u6578</p> <p>\u8f49\u79fb\u5982\u4e0b:</p> <ul> <li> <p>\u82e5 s[i] == '('\uff0c\u8f49\u79fb\u5f0f\u70ba dp(i, j) = dp(i - 1, j - 1)</p> </li> <li> <p>\u82e5 s[i] == ')'\uff0c\u8f49\u79fb\u5f0f\u70ba dp(i, j) = dp(i - 1, j + 1) + dp(i - 1, j) + ... + dp(i - 1, 0)\u3002\u53ef\u4ee5\u900f\u904e\u524d\u7db4\u512a\u5316\u5f97\u5230 dp(i, j) = dp(i - 1, j + 1) + dp(i, j - 1)\u3002\u70ba\u4e86\u9632\u6b62\u8d8a\u754c\uff0cdp(i, 0) \u9700\u8981\u7279\u5224\u3002</p> </li> </ul> <p>\u53c3\u8003\u81ea: https://www.acwing.com/solution/content/75383/</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int N = 5010, MOD = 1e9 + 7;\nint n;\nchar str[N];\nll dp[N][N];\n\nll add(ll x, ll y) {\n    return (x + y) % MOD;\n}\n\nll brackets() {\n    memset(dp, 0, sizeof dp);\n    dp[0][0] = 1;\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (str[i] == '(') {\n            for (int j = 1; j &lt;= n; j++) {\n                dp[i][j] = dp[i - 1][j - 1];\n            }\n        } else {\n            dp[i][0] = add(dp[i - 1][0], dp[i - 1][1]);\n            for (int j = 1; j &lt;= n; j++) {\n                dp[i][j] = add(dp[i - 1][j + 1], dp[i][j - 1]);\n            }\n        }\n    }\n\n    for (int i = 0; i &lt;= n; i++) {\n        if (dp[n][i]) {\n            return dp[n][i];\n        }       \n    }\n    return -1;\n}\n\nint main() {\n    scanf(\"%s\", str + 1);\n    n = strlen(str + 1);\n\n    ll ans_l = brackets();\n\n    reverse(str + 1, str + n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        if (str[i] == '(') {\n            str[i] = ')';\n        } else {\n            str[i] = '(';\n        }\n    }\n    ll ans_r = brackets();\n\n    printf(\"%lld\\n\", ans_l * ans_r % MOD);\n\n    return 0;\n}\n</code></pre> 2022 \u5168\u570b\u8cfd pD. \u6587\u5b57\u7de8\u8f2f\u5668 (editor) <p>\u6709\u4e00\u500b\u7531 \\(\\texttt{+}, \\texttt{[}, \\texttt{]}, \\texttt{x}\\) \u7d44\u6210\u5408\u6cd5\u5e8f\u5217\uff0c\u6b64\u6642\u5c07\u5176\u4e2d\u4e00\u500b \\(\\texttt{+}\\) \u6539\u6210 \\(\\texttt{|}\\)\uff0c\u4e26\u5c07\u6240\u6709 \\(\\texttt{[}, \\texttt{]}\\) \u63db\u6210 \\(\\texttt{|}\\)\u3002\u7d66\u4f60\u9019\u500b\u6539\u5b8c\u7684\u5e8f\u5217 \\(s\\)\uff0c\u8f38\u51fa\u4efb\u610f\u4e00\u500b\u539f\u4f86\u7684\u5408\u6cd5\u5e8f\u5217\u3002</p> <p>\\(|s| \\le 10^6\\)</p> \u601d\u8def <p>\u5169\u500b \\(\\texttt{x}\\) \u4e2d\u4e00\u5b9a\u8981\u6709 \\(\\texttt{+}\\)\uff0c\u770b\u54ea\u5169\u500b \\(\\texttt{x}\\) \u4e4b\u9593\u6c92\u6709 \\(\\texttt{+}\\)\uff0cGreedy \u7684\u653e\u5373\u53ef</p> 2023 IOIC 305 . \u62ec\u865f\u570b <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u62ec\u865f\u5b57\u4e32\uff0c\u554f\u6240\u6709 substring \u7684\u300c\u6700\u9577\u5408\u6cd5\u62ec\u865f\u5b50\u5e8f\u5217\u9577\u5ea6\u300d\u7e3d\u548c\u70ba\u4f55\uff1f</p> <p>\\(1\\le n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u4f7f\u7528\u4e00\u822c\u7528 stack \u62ec\u865f\u5e8f\u5217\u7684\u65b9\u5f0f\uff0c\u82e5\u6211\u5011\u73fe\u5728\u9047\u5230\u4e86\u4e00\u500b closing\uff0c\u90a3\u524d\u4e00\u500b opening \u8207\u76ee\u524d\u9019\u500b closing \u7684\u8ca2\u737b\u5c31\u662f opening \u5f80\u524d\u7684\u9577\u5ea6 \\(\\times\\) closing \u5f80\u5f8c\u7684\u9577\u5ea6\uff0c\u9019\u4e9b l, r \u5728\u9019\u4e9b\u7bc4\u570d\u5167\u7684\u90fd\u6703\u7b97\u5230\u6211\u5011</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int N = 2e5 + 5;\nint st[N];\n\nsigned main() {\n    int n;\n    string s;\n    cin &gt;&gt; n &gt;&gt; s;\n    s = \"$\" + s;\n\n    int ans = 0, r = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (s[i] == '(') st[++r] = i;\n        else if (s[i] == ')' &amp;&amp; r &gt; 0) ans += 1ll * st[r--] * (n - i + 1);\n    }\n    cout &lt;&lt; 2 * ans &lt;&lt; '\\n';\n}\n</code></pre> UVA 1626. Brackets Sequence <p>\u7d66\u4e00\u500b\u9577\u5ea6 n \u7684\u62ec\u865f\u5e8f\u5217 s\uff0c\u53ef\u4efb\u610f\u589e\u52a0\u62ec\u865f\uff0c\u554f\u6700\u5c11\u589e\u52a0\u5e7e\u6b21\u624d\u80fd\u4f7f s \u6210\u70ba\u5408\u6cd5\u62ec\u865f\u5e8f\u5217 ? </p> <p>\\(n\\le 100\\)</p> \u601d\u8def <p>dp(l, r) = s[l..r] \u6700\u5c11\u8981\u52a0\u5165\u5e7e\u500b\u62ec\u865f\u53ef\u4ee5\u8b8a\u6210\u5408\u6cd5\u7684</p> <p>\u8f49\u79fb\u7684\u8a71\u6211\u5011\u5206\u6210\u770b\u770b\u80fd\u4e0d\u80fd\u62c6\u6210\u524d\u5f8c\u5169\u6bb5\uff0c\u4e0d\u80fd\u7684\u8a71\u4ee3\u8868\u4e00\u5b9a\u662f\u524d\u5f8c\u914d\u5c0d</p> <p>dp(l, r) = min{</p> <ul> <li> <p>dp(l, k) + dp(k + 1, r) // \u53ef\u4ee5\u5206\u6210\u524d\u5f8c\u5169\u6bb5</p> </li> <li> <p>dp(l + 1, r - 1) if ok(s[l], s[r]) // \u524d\u5f8c\u5169\u500b\u525b\u597d\u53ef\u4ee5\u914d\u5c0d</p> </li> <li> <p>dp(l, r - 1) + 1 // \u4f8b\u5982\u8aaa [ ( [ ( ] </p> </li> <li> <p>dp(l + 1, r) + 1 // \u4f8b\u5982\u8aaa ( [ ( ] )</p> </li> </ul> TOI 2021 \u4e8c\u6a21 pC. \u914d\u5c0d\u554f\u984c\uff08Pairing\uff09 <p>\u7d66\u5b9a\u4e00\u500b\u5e8f\u5217 \\(a_1, a_2, ..., a_n\\)\uff0c\u4e00\u500b\u9ede\u53ea\u80fd\u88ab\u5339\u914d\u6700\u591a\u4e00\u6b21\uff0c\u7576\u5169\u500b\u9ede \\(i\\) \u8207 \\(j\\) \u914d\u5c0d\u6642\uff0c\u5c31\u6703\u7372\u5f97 \\(a_i + a_{i+1} + \\cdots + a_j\\) \u7684\u5206\u6578\u3002\u4efb\u4f55\u914d\u5c0d\u90fd\u4e0d\u80fd\u51fa\u73fe\u90e8\u4efd\u76f8\u4ea4\u7684\u60c5\u5f62\u3002\u5339\u914d\u7d50\u675f\u5f8c\uff0c\u6240\u6709\u6c92\u6709\u88ab\u5339\u914d\u5230\u7684\u9ede \\(i\\) \uff0c\u5982\u679c \\(a_i &gt; 0\\)\uff0c\u53ef\u4ee5\u7372\u5f97 \\(a_i\\) \u5206\u3002\u554f\u5206\u6578\u6700\u5927\u662f\u591a\u5c11</p> <p>\\(1 \\leq n \\leq 10^5, -10^9 \\leq a_i \\leq 10^9\\)</p> \u601d\u8def <p>\u3010\u5340\u9593 dp: O(n^3)\u3011</p> <p>dp(l, r) : l ~ r \u7684\u6700\u591a cost</p> <ul> <li> <p>dp(l+1, r) + a[l]</p> </li> <li> <p>dp(l, r-1) + a[r]</p> </li> <li> <p>\u5207\u5169\u534a dp(l, k) + dp(k+1, r)</p> </li> <li> <p>l \u548c r \u914d\u5c0d dp(l+1, r-1) + (a[l]+...+a[r])</p> </li> </ul> <p>\u3010\u524d\u7db4 dp: O(n^2)\u3011</p> <p>dp(i, k) : 1~i \u7684 (#\u5de6\u62ec\u865f - #\u53f3\u62ec\u865f) = k</p> <p>ans = dp(n, 0)</p> <p>\u8f49\u79fb</p> <ul> <li> <p>i \u662f \"(\" : dp(i-1, k-1) - pre[i-1]</p> </li> <li> <p>i \u662f \")\" : dp(i-1, k+1) + pre[i]</p> </li> <li> <p>i \u662f \"X\" : dp(i-1, k) + pre[i] - pre[i-1]</p> </li> </ul> <p>\u3010Greedy \u89c0\u5bdf\u6027\u8cea, \u5f8c\u6094\u6cd5: O(n log n)\u3011</p> <p>\u5982\u679c\u6709\u8fa6\u6cd5\u5339\u914d\uff08\u8207 pq.top \u7684\u8ca2\u737b\u662f\u6b63\u7684\uff09\uff0c\u5c31\u5c07\u76ee\u524d\u9019\u9805\u9078\u70ba\u53f3\u62ec\u5f27\uff0c\u4e26 push \u5230 heap \u4e2d\u3002\u82e5\u6c92\u8fa6\u6cd5\u5339\u914d\uff0c\u4e5f push \u5230 heap \u4e2d\u3002</p> <p>\u90a3\u9ebc\u8981\u5982\u4f55\u8655\u7406\u300c\u4e0d\u9078\u300d\u7684\u8ca2\u737b\u5462\uff0c\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u5c07\u6709\u9078\u7684\u8ca2\u737b\u4e2d\u52a0\u5165 -a[i]\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u7528\u6263\u5f97\u7b97\u4e86</p> <p>\u9019\u908a\u63d0\u4f9b\u4e00\u7d44\u7bc4\u4f8b</p> <pre><code>        i         1   2   3  4  5  6  7  8\n        a[i]:     3  -1  -5  3  8  4 -3  4\n        pre[i]:   3   2  -3  0  8 12  9 13\n</code></pre> <p>\u53c3\u8003\u81ea : TOI 2021 Solutions - p3 pairing</p> USACO 2017 OPEN Modern Art 2 G <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217\uff0c\u4e00\u958b\u59cb\u5168\u90e8\u90fd\u662f\u70ba\u672a\u5857\u8272\uff0c\u4e00\u6b21\u64cd\u4f5c\u4e2d\u53ef\u5c07\u82e5\u5e72\u500b\u5340\u9593\u8986\u84cb\u4e0a\u6307\u5b9a\u7684\u984f\u8272\uff0c\u4e14\u4e00\u7a2e\u984f\u8272\u53ea\u80fd\u5857\u4e00\u6b21\u3002\u7d66\u4e00\u500b\u76ee\u6a19\u5e8f\u5217 a\uff0c\u554f\u6700\u5c11\u505a\u5e7e\u6b21\u64cd\u4f5c\u624d\u80fd\u539f\u59cb\u5e8f\u5217\u8b8a\u6210 a</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u4e00\u7a2e\u984f\u8272 i\uff0c\u56e0\u70ba\u4ed6\u53ea\u80fd\u5857\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u627e\u51fa\u9019\u7a2e\u984f\u8272\u7b2c\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e l[i]\uff0c\u8207\u6700\u5f8c\u4e00\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e r[i]\uff0c[l[i], r[i]] \u5c31\u662f\u4ed6\u7576\u521d\u6240\u8986\u84cb\u7684\u5340\u9593\u3002\u90a3\u5982\u4f55\u5340\u5206\u5857\u8272\u7684\u5148\u5f8c\u95dc\u4fc2\uff1f\u6211\u5011\u767c\u73fe\u5982\u679c\u8981\u5408\u6cd5\u7684\u8a71\uff0c\u6c42\u51fa\u4f86\u7684\u6bcf\u500b\u503c\u7684 l[i] \u548c r[i] \u53ea\u6703\u662f\u4e92\u4e0d\u91cd\u758a\uff0c\u6216\u662f\u5b8c\u5168\u91cd\u758a\uff0c\u4e0d\u6703\u6709\u90e8\u5206\u91cd\u758a\u7684\u60c5\u6cc1\uff0c\u9019\u5c31\u6709\u9ede\u50cf\u6211\u5011\u62ec\u865f\u554f\u984c\u7684\u611f\u89ba\u4e86\uff0c\u540c\u6642\uff0c\u984c\u76ee\u8981\u554f\u6700\u5c11\u64cd\u4f5c\u6b21\u6578\uff0c\u5c0d\u61c9\u5230\u62ec\u865f\u5c31\u662f\u554f\u6700\u5927\u5339\u914d\u6df1\u5ea6\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u5148\u9810\u8655\u7406\u597d\u6bcf\u500b\u984f\u8272\u7684 l[i], r[i]\uff0c\u7136\u5f8c\u5f9e\u5de6\u5230\u53f3\u6383\u904e\u53bb\uff0c\u6bcf\u9047\u5230\u4e00\u500b l[i] \u5c31\u52a0\u4e0a\u4e00\u500b\u5d4c\u5957\u5c64\u6578\uff0c\u6bcf\u9047\u5230\u4e00\u500b r[i] \u5c31\u6e1b\u53bb\u4e00\u500b\u5d4c\u5957\u5c64\u6578\uff0c\u90a3\u9ebc\u7b54\u6848\u5c31\u662f\u7576\u524d\u4f4d\u7f6e\u5d4c\u5957\u5c64\u6578\u7684\u6700\u5927\u503c\u3002</p> <p> </p> <p>\u4e0d\u5408\u6cd5\u7684\u60c5\u6cc1\u5c31\u662f\u6709\u90e8\u5206\u91cd\u758a\u7684\u6642\u5019\uff0c\u4f8b\u5982 1 2 1 2\uff0c\u5176\u5be6\u5c31\u76f8\u7576\u65bc\u5728\u6383\u63cf\u7684\u904e\u7a0b\u4e2d\uff0c\u82e5\u52a0\u5165\u7684\u9ede\u4e0d\u662f\u5de6\u7aef\u9ede\uff0c\u4e5f\u4e0d\u8207\u7576\u524d\u5728\u5857\u7684\u984f\u8272\uff08stack \u7684\u9802\u7aef\uff09\u76f8\u540c\u3002</p> <p>\u81f3\u65bc\u7121\u8272\u7684\u60c5\u6cc1\u600e\u9ebc\u8655\u7406? \u5047\u8a2d\u6211\u5011\u7684\u5e8f\u5217\u662f 1-base\uff0c\u6211\u5011\u53ef\u4ee5\u628a\u7121\u8272\u60f3\u6210\u662f\u4e00\u500b\u5f9e [0, n + 1] \u7684\u5857\u8272\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int MAXN = 1e5 + 5;\nint n, ans, a[MAXN], l[MAXN], r[MAXN];\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        if (l[a[i]] == 0) {\n            l[a[i]] = i;  \n        }\n        r[a[i]] = i;             \n    }\n    l[0] = 0, r[0] = n + 1, a[n + 1] = 0;\n    stack&lt;int&gt; stk;\n    for (int i = 0; i &lt;= n + 1; i++) {\n        int x = a[i];\n        if (i == l[x]) {  \n            stk.push(x);\n            ans = max(ans, 1ll * (int)stk.size());  \n        }\n        if (x != stk.top()) { \n            cout &lt;&lt; \"-1\" &lt;&lt; '\\n';\n            return 0;\n        }\n        if (i == r[x]) {\n            stk.pop();\n        }\n    }\n    cout &lt;&lt; ans - 1 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"other/bracket_problem/#_5","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>\u9032\u968e\u5ef6\u4f38<ul> <li>https://taodaling.github.io/blog/2020/12/07/%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</li> <li>https://www.cnblogs.com/Zeardoe/p/16213505.html</li> </ul> </li> </ul>"},{"location":"other/cmd/","title":"terminal \u7684\u4e00\u4e9b\u6307\u4ee4","text":""},{"location":"other/cmd/#_1","title":"\u5275\u5efa\u6a94\u6848","text":"<pre><code>echo .&gt; main.cpp\n</code></pre>"},{"location":"other/cmd/#input","title":"\u8b80\u53d6 input \u6a94\u6848","text":"<p>\u5c07 <code>1.in</code> \u4f5c\u70ba input file\uff0c\u4e26\u5728 terminal \u8f38\u51fa :</p> <pre><code>type 1.in | .\\main.exe\n</code></pre> <p>\u5c07 <code>1.in</code> \u4f5c\u70ba input file\uff0c\u4e26\u5c07\u8f38\u51fa\u653e\u5728 <code>1.out</code> \u88e1\u9762</p> <pre><code>type 1.in | .\\main.exe &gt; 1.out\n</code></pre>"},{"location":"other/cmd/#_2","title":"\u5224\u65b7\u8f38\u51fa\u6a94\u7684\u5167\u5bb9","text":"<p>\u4f8b\u5982\u9019\u662f\u6211\u7684\u6a94\u6848</p> 1.out2.out <pre><code>5\n1 2\n2 2\n4 4\n5 6\n</code></pre> <pre><code>5\n1 2\n2 3\n4 5\n5 6\n</code></pre> <p>\u8f38\u5165\u4ee5\u4e0b\u6307\u4ee4 :</p> <pre><code>Compare-Object -ReferenceObject (Get-Content 1.out) -DifferenceObject (Get-Content 2.out)\n</code></pre> <p>\u5373\u986f\u793a</p> <pre><code>InputObject SideIndicator\n----------- -------------\n2 3         =&gt;\n4 5         =&gt;\n2 2         &lt;=\n4 4         &lt;=\n</code></pre>"},{"location":"other/constant/","title":"\u58d3\u5e38","text":""},{"location":"other/constant/#_1","title":"\u5e38\u6578\u512a\u5316","text":"<pre><code>#pragma GCC optimize(\"O3,unroll-loops\")\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\n</code></pre> <ul> <li>https://codeforces.com/blog/entry/96344</li> </ul>"},{"location":"other/constant/#_2","title":"\u5361\u5e38","text":"<ul> <li> <p>mod </p> </li> <li> <p>\u628a <code>#define int long long</code> \u53bb\u6389</p> </li> </ul>"},{"location":"other/debug/","title":"Debug","text":""},{"location":"other/debug/#_1","title":"\u8b80\u53d6\u6e2c\u8cc7","text":"<pre><code>inline void debugMode(const char* in, const char* out) {\n    if(in) freopen(in, \"r\", stdin);\n    if(out) freopen(out, \"w\", stdout);\n}\n</code></pre>"},{"location":"other/debug/#_2","title":"\u7bc4\u4f8b","text":"<p>\u4ee5\u4e0b\u7a0b\u5f0f\u7684\u8f38\u51fa\u90fd\u6703\u4e1f\u5728 <code>1.out</code> \u88e1\u9762</p> code <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\ninline void debugMode(const char* in, const char* out) {\n    if(in) freopen(in, \"r\", stdin);\n    if(out) freopen(out, \"w\", stdout);\n}\n\nint main() {\n    debugMode(NULL, \"1.out\");\n    cout &lt;&lt; \"hi\\n\";\n}\n</code></pre>"},{"location":"other/debug/#debugging","title":"debugging","text":""},{"location":"other/debug/#_3","title":"\u8a9e\u6cd5","text":"<pre><code>#define debug_(x) cerr &lt;&lt; #x &lt;&lt; \" = \" &lt;&lt; x &lt;&lt; ' '\n#define debug(x) cerr &lt;&lt; #x &lt;&lt; \" = \" &lt;&lt; x &lt;&lt; '\\n'\n</code></pre> <p>\u547c\u53eb <code>debug(x)</code> \u53ef\u4ee5\u5728 terminal \u770b\u5230\u8f38\u51fa\uff0c\u53ea\u662f\u5728 OnlineJudge \u4e2d\u4e0d\u6703\u88ab\u8fa8\u8b58\u5230</p>"},{"location":"other/debug/#_4","title":"\u7bc4\u4f8b","text":"code <pre><code>#include&lt;bits/stdc++.h&gt;\n#define debug(x) cerr &lt;&lt; #x &lt;&lt; \" = \" &lt;&lt; x &lt;&lt; '\\n'\n\nusing namespace std;\n\nint main() {\n    int n = 10;\n    debug(n); // This will output : n = 10\n}\n</code></pre>"},{"location":"other/debug/#_5","title":"\u9032\u968e","text":"<p> \u53c3\u8003\u81ea caido</p>"},{"location":"other/debug/#_6","title":"\u7528\u6cd5","text":"<p>\u5c07\u7a0b\u5f0f\u78bc\u7247\u6bb5\u4fdd\u5b58\u5230\u540d\u70ba <code>debug_example.cpp</code> \u7684\u6a94\u6848\u4e2d</p> debug_example.cpp <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\n#ifdef WAIMAI\n#define debug(HEHE...) std::cout &lt;&lt; \"[\" &lt;&lt; #HEHE &lt;&lt; \"] : \", dout(HEHE)\nvoid dout() { std::cout &lt;&lt; '\\n'; }\ntemplate&lt;typename T, typename... U&gt;\nvoid dout(T t, U... u) { std::cout &lt;&lt; t &lt;&lt; (sizeof...(u) ? \", \" : \"\"); dout(u...); }\n#else\n#define debug(...) 7122\n#endif\n\nint main() {\n    int x = 10;\n    double y = 3.14;\n    std::string message = \"Hello, world!\";\n\n    debug(x, y, message);  // This will print: [x] : 10, [y] : 3.14, [message] : Hello, world!\n\n    return 0;\n}\n</code></pre> <p>\u4f7f\u7528 <code>-DWAIMAI</code> marco \u4f86\u7de8\u8b6f\u7a0b\u5f0f\u78bc\uff0c\u5f9e\u800c\u5b9a\u7fa9 <code>WAIMAI</code> \u7684 marco\uff1a</p> <pre><code>g++ -DWAIMAI debug_example.cpp -o debug_example\n</code></pre> <p>\u9019\u500b\u6307\u4ee4\u544a\u8a34\u7de8\u8b6f\u5668\u5728\u7de8\u8b6f\u904e\u7a0b\u4e2d\u5b9a\u7fa9 <code>WAIMAI</code></p> <p>\u57f7\u884c\u7de8\u8b6f\u5f8c\u7684\u7a0b\u5f0f :</p> <pre><code>./debug_example\n</code></pre> <p>\u5373\u53ef\u770b\u5230\u8f38\u51fa</p>"},{"location":"other/debug/#_7","title":"\u5c0d\u62cd","text":"code <pre><code>#include&lt;bits/stdc++.h&gt;\n\nnamespace AC {\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; solve(const int _d[]) {\n    vector&lt;int&gt; ans;\n    return ans;\n}\n};  // namespace AC\n\nnamespace TEST {\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; work(const int _d[]) {\n    vector&lt;int&gt; ans;\n    return ans;\n}\n}  // namespace TEST\n\nusing namespace std;\n\nbool check(vector&lt;int&gt; d) {\n    vector&lt;int&gt; X = AC::solve(d.data());\n    vector&lt;int&gt; Y = TEST::work(d.data());\n    return X == Y;\n}\n\nbool gen_random() {\n    int n = rand();\n\n    vector&lt;int&gt; d(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        d[i] = rand() % (n - 1) + 1;  // [1, n-1]\n    }\n\n    return check(d);\n}\n\nsigned main() {\n    for (int i = 0; i &lt; 100; i++) {\n        cout &lt;&lt; i &lt;&lt; \" : \"&lt;&lt; gen_random() &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"other/debug/#_8","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li> <p>https://charlottehong.blogspot.com/2021/05/cc_23.html</p> </li> <li> <p>https://codeforces.com/blog/entry/65543</p> </li> </ul>"},{"location":"other/distance/","title":"\u5e73\u9762\u8ddd\u96e2","text":""},{"location":"other/distance/#_1","title":"\u4ecb\u7d39","text":"<ul> <li> <p>\u6b50\u5e7e\u91cc\u5fb7\uff1a\\(\\sqrt{(x_i - x_j)^2 + (y_i - y_j)^2}\\)</p> </li> <li> <p>\u66fc\u54c8\u9813\uff08\u8a08\u7a0b\u8eca\u5e7e\u4f55\uff09\uff1a\\(|x_i - x_j| + |y_i - y_j|\\)</p> </li> <li> <p>\u5207\u6bd4\u96ea\u592b\uff1a\\(\\max(|x_i - x_j|, |y_i - y_j|)\\)</p> </li> </ul>"},{"location":"other/distance/#_2","title":"\u8f49\u63db","text":"<p>\u5148\u4f86\u770b\u5716</p> <p></p> <ul> <li> <p>\u66fc\u54c8\u9813 \u21d2 \u5207\u6bd4\u96ea\u592b</p> <ul> <li> <p>\\((x,y)\\Rightarrow (x+y,x-y)\\)</p> </li> <li> <p>\u539f\u672c\u5ea7\u6a19\u7684\u66fc\u54c8\u9813\u8ddd\u96e2 = \u65b0\u5ea7\u6a19\u4e2d\u7684\u5207\u6bd4\u96ea\u592b\u8ddd\u96e2</p> </li> </ul> </li> <li> <p>\u5207\u6bd4\u96ea\u592b \u21d2 \u66fc\u54c8\u9813</p> <ul> <li> <p>\\((x,y)\\Rightarrow (\\frac{x+y}{2},\\frac{x-y}{2})\\)</p> </li> <li> <p>\u539f\u672c\u5ea7\u6a19\u7684\u5207\u6bd4\u96ea\u592b\u8ddd\u96e2 = \u65b0\u5ea7\u6a19\u4e2d\u7684\u66fc\u54c8\u9813\u8ddd\u96e2 </p> </li> </ul> </li> </ul>"},{"location":"other/distance/#_3","title":"\u4f8b\u984c","text":"IOI 2007 Pairs <p>\u6709\u4e00\u500b\u76e4\u9762\u5927\u5c0f\u70ba \\(m\\)\uff0c\u7d66 \\(n\\) \u500b \\(B\\) \u5ea7\u6a19\u9ede \\(p_i\\)\uff0c\u554f\u6709\u5e7e\u5c0d \\((i,j)\\) \u4f7f\u66fc\u54c8\u9813\u8ddd\u96e2 \\(dis(p_i,p_j)\\) \u4e0d\u8d85\u904e \\(D\\)</p> <p>\\(B\\in \\{1,2,3\\}, n\\le 10^5,m\\le \\{7.5\\times 10^7, 7.5\\times 10^4, 75\\}\\)</p> \u601d\u8def <p>\u4e00\u7dad: two pointer</p> <p>\u4e8c\u7dad: sweep line</p> <ul> <li> <p>(x-d, y) \u21d2 +1</p> </li> <li> <p>(x, y) \u21d2 query[y-d, y+d]</p> </li> <li> <p>(x+d, y) \u21d2 -1</p> </li> </ul> <p>\u4e09\u7dad: m^2 \u679a\u8209 z\uff0c\u8b8a\u4e8c\u7dad\u7684\u554f\u984c\uff0c\u6ce8\u610f\u81ea\u5df1\u6703\u7b97\u5230\u81ea\u5df1\uff0c\u6240\u4ee5\u7b54\u6848\u8981\u6e1b n</p> JOI 2023 Advertisement 2 <p>\u4e00\u7dad\u5ea7\u6a19\u4e0a\uff0c\u6709 \\(n\\) \u500b\u9ede\uff0c\u7b2c \\(i\\) \u500b\u9ede\u5728 \\(x_i\\)\uff0c\u5f71\u97ff\u529b\u70ba \\(e_i\\)\u3002\u82e5\u9078\u64c7\u4e00\u500b\u9ede \\(i\\)\uff0c\u80fd\u8986\u84cb\u9ede \\(j\\) \u82e5\u4e14\u552f\u82e5 \\(|x_i-x_j| \\le e_i - e_j\\)\uff0c\u554f\u6700\u5c11\u8981\u9078\u5e7e\u500b\u9ede\u624d\u80fd\u4f7f\u6240\u6709\u9ede\u90fd\u88ab\u8986\u84cb</p> <p>\\(n\\le 5\\times 10^5, 1\\le x_i, e_i\\le 10^9\\)</p> \u601d\u8def <p>\u60f3\u6210\u5728\u4e8c\u7dad\u5ea7\u6a19\u5e73\u9762\u4e0a\u7684\u9ede \\((x_i, e_i)\\)\uff0c\u6703\u767c\u73fe\u8981\u9078\u7684\u5340\u57df\u6070\u597d\u662f</p> <p> </p> <p>\u8f49 45 \u5ea6\u5f8c\uff0c\u554f\u984c\u5c31\u8b8a\u6210\uff0c\u6709\u9078\u7684\u9ede\u6703\u8986\u84cb\u5de6\u4e0b\uff0c\u81f3\u5c11\u8981\u9078\u5e7e\u500b\u9ede\u624d\u80fd\u4f7f\u5168\u90e8\u88ab\u8986\u84cb\u3002\u6703\u767c\u73fe\u7b54\u6848\u5c31\u662f\u5f9e x \u5de6\u5f80\u53f3\u770b\u904e\u53bb y \u5ea7\u6a19\u905e\u6e1b\u7684\u4e00\u4e9b\u9ede\uff0c\u53ef\u7528\u55ae\u8abf stack \u7dad\u8b77</p> <p> </p> 2023 YTP 13_\u7d50\u675f\u6a02\u5718\u51fa\u904a\uff01(Kessoku_Band_at_Enoshima) <p>\u7d66 \\(n\\) \u500b\u4e8c\u7dad\u5ea7\u6a19\u9ede\uff0c\u9ede\u8ddf\u9ede\u4e4b\u9593\u7684\u8ddd\u96e2\u70ba\u66fc\u54c8\u9813\u8ddd\u96e2\uff0c\u6709 \\(q\\) \u7b46\u64cd\u4f5c:</p> <ul> <li> <p>\\(\\text{query}(x,y):\\) \u554f\u96e2 \\((x,y)\\) \u6700\u8fd1\u7684\u9ede\u7684\u8ddd\u96e2</p> </li> <li> <p>\\(\\text{insert}(x,y):\\) \u5728 \\((x,y)\\) \u4e0a\u52a0\u5165\u4e00\u500b\u65b0\u7684\u9ede</p> </li> </ul> <p>\\(n,q\\le 3\\times 10^5, |x|,|y| \\le 5\\times 10^4\\)</p> \u601d\u8def <p>\u6c92\u6709 insert \u7684 subtask:</p> <p>\u5047\u5982\u76ee\u524d\u7684\u9ede\u662f \\(j\\)\uff0c\u7b54\u6848\u5728 \\(i\\)\uff0c\u8003\u616e \\(|x_i-x_j|+|y_i-y_j|\\)\uff0c\u5047\u5982 \\(x_i \\ge x_j\\) \u4e14 \\(y_i \\ge y_j\\)\uff0c\u90a3\u9ebc\u5176\u5be6\u53ef\u4ee5\u770b\u6210 \\((x_i+y_i)-(x_j+y_j)\\)\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6383\u63cf\u7dda\uff0c\u6bcf\u500b\u9ede\u7684\u6b0a\u503c\u8a2d\u70ba \\((x_i+y_i)\\) \u5373\u53ef\u3002</p> <p>\u984c\u89e3: https://hackmd.io/IiUWbMv1TNq07XBxTuXibA?view#Kessoku-Band-at-Enoshima</p> <ul> <li>https://hackmd.io/@FHVirus/SJ0kzMGM_#/9/5</li> </ul>"},{"location":"other/fraction/","title":"\u5206\u6578\u904b\u7b97","text":"<pre><code>struct Fraction {\n    int b, a; // b/a\n\n    bool operator&lt;(const Fraction &amp;rhs) const {\n        return b * rhs &lt; a * rhs;\n    }\n    Fraction operator+(const Fraction &amp;rhs) const {\n        Fraction ret;\n        ret.b = b * rhs.a + rhs.b * a;\n        ret.a = a * rhs.a;\n        int d = __gcd (ret.a, ret.b);\n        ret.a /= d, ret.b /= d;\n        return ret;\n    }\n    Fraction operator*(const Fraction &amp;rhs) const {\n        int d1 = __gcd (b, rhs.a);\n        int d2 = __gcd (a, rhs.b);\n\n        Fraction ret;\n\n        ret.b = b / d1 * rhs.b / d2;\n        ret.a = a / d1 * rhs.a / d2;\n        return ret;\n    }\n}\n</code></pre>"},{"location":"other/lexicographic/","title":"\u5b57\u5178\u5e8f","text":""},{"location":"other/lexicographic/#_1","title":"\u5b9a\u7fa9","text":"<p>string \\(a\\) \u6bd4 string \\(b\\) \u5b57\u5178\u5e8f\u9084\u5c0f\u7b26\u5408\u4ee5\u4e0b\u689d\u4ef6\u4e4b\u4e00</p> <ul> <li> <p>\\(a\\) \u662f \\(b\\) \u7684 prefix</p> </li> <li> <p>\u5b58\u5728 \\(1\\le i\\le \\min(|a|, |b|)\\) \u4f7f\u5f97 \\(a_i &lt; b_i\\)\uff0c\u4e14 \\(1\\le j &lt; i\\)\uff0c\\(a_j=b_j\\)</p> </li> </ul> <p>\u5229\u7528 c++ string operator <code>&lt;</code> \u53ef\u4ee5\u5224\u65b7\u5169\u500b\u5b57\u4e32\u7684\u5b57\u5178\u5e8f\uff0c\u8907\u96dc\u5ea6 O(n)</p> \u6027\u8cea\u61c9\u7528 CF 1886 C. Decreasing String <p>\u7d66\u4e00\u500b\u5b57\u4e32 \\(s\\)\uff0c\u6bcf\u6b21\u6703\u5c07 \\(s\\) \u79fb\u9664\u4e00\u500b\u5b57\u5143\uff0c\u4f7f\u5269\u4e0b\u7684 \\(s\\) \u5b57\u5178\u5e8f\u6700\u5c0f\u3002\u5c07\u9019\u500b\u904e\u7a0b\u7684 \\(s\\) \u4f75\u8d77\u4f86\u8b8a\u6210\u4e00\u500b\u5927\u5b57\u4e32\uff0c\u554f\u7b2c \\(k\\) \u9805\u662f\u591a\u5c11</p> <p>\\(1\\le |s| \\le 10^6,s\\) \u70ba a-z</p> \u601d\u8def <p>\u6211\u5011\u5148\u4f86\u601d\u8003\u8981\u600e\u9ebc\u522a\u9664\u6bd4\u8f03\u597d\uff0c\u4f9d\u7167\u5b57\u5178\u5e8f\u7684\u5b9a\u7fa9\uff0c\u4ed6\u662f\u5f9e\u5de6\u5f80\u53f3\u770b\uff0c\u76f4\u5230\u770b\u5230\u4e00\u500b i \u6eff\u8db3 \\(a_i&lt;b_i\\)\u3002\u6211\u5011\u4e5f\u662f\u4e00\u6a23\u5f9e\u5de6\u5f80\u53f3\u770b\uff0c\u82e5\u767c\u73fe\u7576\u524d\u5143\u7d20\u6eff\u8db3 \\(s_{i} &gt; s_{i+1}\\)\uff0c\u90a3\u6211\u5011\u5f97\u522a\u9664 \\(s_i\\)\uff0c\u7136\u5f8c\u76e1\u91cf\u5c07 \\(s_{i+1}\\) \u79fb\u5f80\u958b\u982d\uff08\u4e5f\u5c31\u662f pop \u5230\u524d\u9762\u662f\u7b2c\u4e00\u500b\u6bd4 \\(s_{i+1}\\) \u5c0f\u7684\uff09\u6703\u662f\u6700\u597d\u7684\uff0c\u9019\u500b\u904e\u7a0b\u5176\u5be6\u5c31\u662f\u53ef\u7528\u55ae\u8abf stack \u4f86\u7dad\u8b77\u3002\u82e5\u767c\u73fe\u7576\u524d\u6574\u500b\u5e8f\u5217 \\(s\\) \u90fd\u662f\u905e\u589e\u7684\uff0c\u90a3\u9ebc\u6211\u5011\u5c07\u6700\u5f8c\u4e00\u500b\u5143\u7d20\u522a\u9664\u6703\u662f\u6700\u597d\u7684\uff0c\u56e0\u70ba\u5982\u679c\u522a\u9664\u5176\u4ed6\u5143\u7d20\u6703\u4f7f\u5927\u7684\u88ab\u5f80\u524d\u63a8\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u4e0a\u9762\u90a3\u7a2e\u65b9\u5f0f\u6a21\u64ec\uff0c\u7136\u5f8c\u6bcf\u6b21\u6a21\u64ec\u51fa\u4e00\u500b\u5b57\u4e32\u5f8c\uff08\u522a\u6389\u4e00\u500b\u5143\u7d20\u5f8c\uff09\uff0c\u8b93 k \u6e1b\u6389\u7576\u524d\u5e8f\u5217\u7684\u9577\u5ea6\uff0c\u76f4\u5230\u7121\u6cd5\u518d\u6e1b\u5373\u6a21\u64ec\u5230\u6211\u5011\u8981\u7684\u7b54\u6848\u6240\u5728\u7684\u5b57\u4e32 \\(s\\)\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint t;\nlong long p, n;\nstring s;\n\nint main() {\n    cin &gt;&gt; t;\n    while (t--) {\n        cin &gt;&gt; s &gt;&gt; p;\n        n = s.length();\n        s = \" \" + s + \" \";\n        vector&lt;char&gt; stk;\n        bool done = (p &lt;= n);\n        for (int i = 1; i &lt;= s.length() + 1; ++i) {\n            while ((!done) &amp;&amp; (!stk.empty()) &amp;&amp; (stk.back() &gt; s[i])) {\n                stk.pop_back();\n                p -= (n--);\n                done = (p &lt;= n);\n            }\n            stk.push_back(s[i]);\n        }\n        cout &lt;&lt; stk[p - 1];\n    }\n    return 0;\n}\n</code></pre>"},{"location":"other/lexicographic/#k","title":"\u5b57\u5178\u5e8f\u7b2c k \u5c0f","text":"<p>\u4e00\u822c\u9019\u7a2e\u554f\u984c\u6703\u554f\u4ee5\u5b57\u5178\u5e8f\u6392\u5217\u5f8c\uff0c\u5b57\u5178\u5e8f\u7b2c k \u5c0f\u7684\u662f\u591a\u5c11\uff0c\u4f8b\u5982\u8aaa\u8f38\u51fa\u4e00\u500b\u5b57\u5178\u5e8f\u7b2c k \u5c0f\u7684 permutation\u3002\u6211\u5011\u5c07 k \u5b9a\u7fa9\u70ba\u300c\u5fc5\u9808\u8df3\u904e k \u9805\u300d\uff0c\u4e5f\u5c31\u662f 0-base\uff0c\u9019\u6a23\u5728\u5be6\u4f5c\u4e0a\u6703\u6bd4\u8f03\u5bb9\u6613\u601d\u8003\u3002</p> <p></p> <p>\u6211\u5011\u6bcf\u6b21\u78ba\u5b9a\u4e00\u4f4d\uff0c\u8a08\u7b97\u76ee\u524d\u78ba\u5b9a\u7684\u524d\u7db4 + \u8a72\u4f4d\u70ba\u958b\u982d\u7684\u6578\u5b57\u6709\u591a\u5c11\u500b\uff0c\u6211\u5011\u628a\u5b83\u53eb\u505a num\uff0ck &lt; num\uff0c\u5247\u6211\u5011\u5c31\u78ba\u5b9a\u4e86\u7576\u524d\u4f4d\uff0c\u53ef\u4ee5\u5f80\u4e0b\u4e00\u4f4d\u53bb\u78ba\u5b9a\uff0c\u5426\u5247 k \u6e1b\u53bb num\uff0c\u4e26\u7e7c\u7e8c\u8003\u616e\u7576\u524d\u4f4d\u9700\u8981\u653e\u4ec0\u9ebc\u3002</p> pseudocode<pre><code>while (k &gt; 0) {\n    int num = f(); // \u8a08\u7b97\u4ee5\u7576\u524d\u524d\u7db4\u958b\u982d\u7684\u6578\u91cf\n    if (k &gt;= num) {\n        // \u53ef\u5c07\u9019 num \u9805\u8df3\u904e\uff0c\u540c\u5c64\u79fb\u52d5\n        // \u82e5 k = num\uff0c\u4ee3\u8868\u6211\u5fc5\u9808\u8df3\u904e num \u9805\n        k -= num;\n    } else {\n        // \u5f80\u4e0b\u5c64\u8003\u616e\n    }\n}\n</code></pre> \u5be6\u969b\u4f8b\u5b50 <p>\u5047\u5982\u6211\u5011\u8981\u6c42\u5b57\u4e32 \"abc\" \u7684\u7b2c 5 \u5c0f\u7684 permutation\uff0c\u4e5f\u5c31\u662f\u8981\u8df3\u904e k = 4 \u9805</p> <p> </p> <p>\u6211\u5011\u770b\u4ee5 a \u958b\u982d\u7684 permutation \u6709\u5e7e\u500b\uff0c\u767c\u73fe\u662f 2 \u500b\uff0c\u4f46 k &gt;= 2\uff0c\u6240\u4ee5\u6211\u5011\u5fc5\u9808\u7e7c\u7e8c\u627e\u9019\u4e00\u4f4d\u8981\u653e\u4ec0\u9ebc\uff0c\u4e26\u5c07 k -= 2\uff0c\u6240\u4ee5\u76ee\u524d k = 2\u3002\u4ee5 b \u958b\u982d\u7684 permutation \u4e5f\u6709 2 \u500b\uff0c\u6211\u5011\u767c\u73fe k = 2\uff0c\u6240\u4ee5\u6211\u5011\u5fc5\u9808\u8df3\u904e 2 \u500b\uff0c\u4e5f\u5c31\u662f\u5c07 b \u958b\u982d\u7684\u9019 2 \u500b permutation \u7d66\u8df3\u904e\uff0c\u7136\u5f8c\u7e7c\u7e8c\u627e\u9019\u4e00\u4f4d\u8981\u653e\u4ec0\u9ebc\uff0c\u4e26\u5c07 k -= 2\uff0c\u6240\u4ee5\u76ee\u524d k = 0\u3002c \u958b\u982d\u6578\u91cf\u4e5f\u662f 2 \u500b\uff0c\u800c\u6b64\u6642 k &lt; 2\uff0c\u4ee3\u8868\u6211\u5011\u5df2\u7d93\u78ba\u5b9a\u9019\u4e00\u4f4d\u8981\u653e c\uff0c\u53ef\u4ee5\u5f80\u4e0b\u4e00\u4f4d\u7e7c\u7e8c\u8003\u616e\uff0c\u4ee5 ca \u70ba\u958b\u982d\u7684\u6578\u91cf\u662f 1 \u500b\uff0c\u800c\u6b64\u6642 k = 0\uff0c\u53c8 k &lt; 2\uff0c\u4ee3\u8868\u6211\u5011\u78ba\u5b9a\u4e86\u4ee5 ca \u70ba\u958b\u982d\uff0c\u7e7c\u7e8c\u5750\u4e0b\u53bb\u5f8c\u6700\u5f8c\u5c31\u5f97\u5230\u4e86 cab </p> Leetcode 440.K-th Smallest in Lexicographical Order <p>\u5c07 [1, n] \u5167\u7684\u5143\u7d20\u6309\u7167\u5b57\u5178\u5e8f\u5c0f\u5230\u5927\u6392\u5e8f\u5f8c\uff0c\u554f\u7b2c k \u9805\uff081-base\uff09\u662f\u591a\u5c11</p> <p>\\(1 \\le k \\le n \\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u5148\u5c07\u7b54\u6848\u7684\u7b2c\u4e00\u4f4d\u78ba\u5b9a\u4e0b\u4f86\uff0c\u518d\u78ba\u5b9a\u7b2c\u4e8c\u4f4d\uff0c\u7b2c\u4e09\u4f4d\uff0c...\u3002\u4f8b\u5982\u8aaa\u4ee5 1 \u958b\u982d\u7684\u4e0d\u8db3 k\uff0ck -= 1 \u958b\u982d\u7684\u6578\u91cf\uff0c\u6211\u5011\u5c31\u8981\u8003\u616e 2\uff0c\u5982\u679c\u9019\u6642\u5920\u4e86\uff0c\u5c31\u5148\u5c07 k -= 1\uff08\u6263\u6389\u55ae\u7d14\u662f 2 \uff09\uff0c\u6211\u5011\u4e0b\u4e00\u4f4d\u5c31\u662f\u8981\u78ba\u5b9a 2 \u5f8c\u9762\u8981\u653e\u4ec0\u9ebc\uff0c\u53ef\u80fd\u662f 0~9\uff0c\u6240\u4ee5\u6211\u5011\u518d\u770b 20 \u958b\u982d\u7684\u6578\u91cf\u5920\u4e0d\u5920 k\uff0c...\u3002</p> <p> </p> <p>\u5982\u679c\u9084\u662f\u4e0d\u61c2\u5f97\u8a71\uff0c\u9019\u908a\u6709bilibili\u7684\u5f71\u7247\u53ef\u4ee5\u53c3\u8003</p> code <pre><code>class Solution {\npublic:\n    int f(int cur, long long n) {\n        // return \u4ee5 cur \u958b\u982d\u7684\u6578\u5b57\u6578\u91cf\n        long long le = cur, ri = cur;\n        int ans = 0;\n        while (le &lt;= n) {\n            ans += min(ri, n) - le + 1;\n            le = le * 10;\n            ri = ri * 10 + 9;\n        }\n        return ans;\n    }\n    int findKthNumber(int n, int k) {\n        int cur = 1;\n        k--;\n        while (k &gt; 0) {\n            int num = f(cur, n);\n            if (k &gt;= num) {\n                // \u6539\u8b8a\u7576\u524d\u4f4d\u7684\u6578\u5b57\n                k -= num;\n                cur++;\n            } else {\n                // \u78ba\u5b9a\u4e86\u7576\u524d\u4f4d\uff0c\u4e4b\u5f8c\u63db\u6210\u8003\u616e\u4e0b\u4e00\u4f4d\n                k -= 1;\n                cur = cur * 10;\n            }\n        }\n        return cur;\n    }\n};\n</code></pre> 2018 TOI \u521d\u9078 pB. \u6392\u5217\u7b2c\u5e7e\u500b\uff1f\uff08Permutation\uff09 <p>\u7d66\u4e00\u500b\u5b57\u4e32 s\uff0c\u554f\u9019\u662f\u5b57\u5178\u5e8f\u5e7e\u5c0f\u7684\u6392\u5217</p> <p>\\(|s|\\le 1024\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u9762\u7684\u65b9\u6cd5\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u73fe\u5728\u662f\u52a0\u4e0a\u53bb\u7684</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 1200 + 5;\n\nint n, M;\nstring s;\nint C[MAXN][MAXN];\n\nvoid build() {\n    C[0][0] = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 0; j &lt;= i; j++) {\n            if (j == 0) {\n                C[i][j] = 1;\n            } else {\n                C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % M;\n            }\n        }\n    }\n}\n\nmap&lt;int, int&gt; mp;\n\nint get(int i) {\n    int cnt = n - i;\n    int res = 1;\n    for (auto [u, v] : mp) {\n        if (v &gt; 0) {\n            res = (res * C[cnt][v]) % M;\n            cnt -= v;\n        }\n    }\n    return res;\n}\n\nint convert(char c) {\n    if ('a' &lt;= c &amp;&amp; c &lt;= 'z') {\n        return c - 'a' + 1 + 26;\n    } else if ('A' &lt;= c &amp;&amp; c &lt;= 'Z') {\n        return c - 'A' + 1;\n    }\n}\n\nsigned main() {\n    cin &gt;&gt; M &gt;&gt; s;\n    n = s.size();\n    s = \"$\" + s;\n    for (int i = 1; i &lt;= n; i++) {\n        mp[convert(s[i])]++;\n    }\n\n    build();\n    int k = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        // \u8a08\u7b97\u4ee5\u7576\u524d\u4f4d\u5b57\u5178\u5e8f\u5c0f\u65bc s[i] \u6642\u7684 permutation \u6578\u91cf\n        for (auto [u, v] : mp) {\n            if (convert(s[i]) == u) {\n                mp[u]--;\n                break;\n            }\n            if (v &gt; 0) {\n                mp[u]--;\n                k += get(i);\n                k %= M;\n                mp[u]++;\n            }\n        }\n    }\n    cout &lt;&lt; k &lt;&lt; '\\n';\n}\n</code></pre> 2022 \u5168\u570b\u8cfd pG. \u7b97\u6a39 (tree) <p>\u8a2d \\(T\\) \u70ba\u4e00\u68f5\u6709 \\(n\\) \u500b\u7bc0\u9ede\u7684\u6a39\uff0c\u7bc0\u9ede\u7de8\u865f \\(1, 2, \\ldots , n\\)\uff0c\u5df2\u77e5 \\(T\\) \u6bcf\u500b\u7bc0\u9ede\u7684 degree \u70ba \\(d_1,d_2,\\ldots ,d_n\\)\uff0c\u5176\u4e2d \\(d_i\\) \u70ba\u9ede \\(i\\) \u7684 degree\uff0c\u6c42\u51fa \\(T\\) \u6240\u6709\u53ef\u80fd\u7684 Pr\u00fcfer \u5e8f\u5217\u4e2d\uff0c\u5b57\u5178\u5e8f\u7b2c \\(k\\) \u5c0f\u7684\uff0c\u5982\u679c\u6c92\u6709\u8f38\u51fa \\(-1\\)</p> <p>\\(3&lt;n\\le 10^3,1\\le k\\le 10^9\\)</p> \u601d\u8def <p>\u6839\u64da\u4e0a\u9762 Pr\u00fcfer \u5e8f\u5217\u7684\u6027\u8cea 2\uff0c\u984c\u76ee\u5c31\u8b8a\u6210 :</p> <p>\u6709\u4e00\u500b\u9663\u5217\uff0c\u7b2c \\(i\\) \u500b\u6578\u5b57\u51fa\u73fe \\(d_i-1\\) \u6b21\uff0c\u6c42\u5b57\u5178\u5e8f\u7b2c \\(k\\) \u5c0f\u7684\uff0c\u81f3\u65bc\u8981\u600e\u9ebc\u6c42\u5b57\u5178\u5e8f\u7b2c \\(k\\) \u5c0f\uff0c\u6211\u5011\u53ef\u4ee5\u6cbf\u7528\u4e0a\u9762\u63d0\u5230\u7684\u6280\u5de7\u3002\u6211\u5011\u4e00\u4f4d\u4e00\u4f4d\u586b\uff0c\u7136\u5f8c\u679a\u8209\u7576\u524d\u9019\u4f4d\u8981\u586b\u7684\u6578\u5b57\uff0c\u5047\u8a2d\u7576\u524d\u9084\u5269 \\(n\\) \u500b\u7a7a\u683c\u53ef\u4ee5\u586b\uff0c\u6211\u5011\u7684\u65b9\u6cd5\u6578\u5c31\u53ef\u4ee5\u8868\u793a\u6210\uff1a</p> \\[\\frac{n!}{a!\\times b!\\times c! \\times d!}\\] <p>\u6211\u5011\u53ef\u4ee5\u7528\u53d6 \\(\\log\\) \u7684\u65b9\u6cd5\u4f86\u4f30\u8a08\u300c\u5927\u6982\u300d\u7684\u7b54\u6848\uff0c\u540c\u6642\u4e5f\u7528 \\(C^n_k\\pmod{10^9+7}\\) \u7684\u65b9\u6cd5\u7b97\u51fa\u300c\u7cbe\u78ba\u300d\u7684\u7b54\u6848\u3002\\(\\log\\) \u7684\u65b9\u6cd5\u662f\u56e0\u70ba \\(\\frac{n!}{a!\\times b!\\times c! \\times d!}=\\log n!-\\log a!-\\log b! - \\log c! - \\log d!\\)\u3002\u53ef\u4ee5\u5148\u9810\u8655\u88e1 \\(\\log n!=\\sum_{i=1}^n \\log i\\)\uff0c\u56e0\u70ba\u6700\u5f8c\u7684\u7b54\u6848 \\(\\le 10^9\\)\uff0c\u4f9d\u7167\u6a21\u9006\u5143\u7684\u6b63\u78ba\u6027\uff0c\u5c07 \\(\\frac{n!}{a!\\times b!\\times c! \\times d!}\\) \u76f4\u63a5\u7b97\u51fa\u4f86\u518d \\(\\pmod{10^9+7}\\) \u8ddf \\(\\frac{n!}{a!\\times b!\\times c! \\times d!}\\) \u5229\u7528\u7d44\u5408\u6578 + \u6a21\u9006\u5143\u7684\u65b9\u6cd5\u7b97\u51fa\u4f86\u662f\u76f8\u540c\u7684\u3002</p> <p>\u4ee5\u4e0b\u6211\u5011\u7d66\u51fa\u5177\u9ad4\u7684\u4f8b\u5b50\uff0c\u4ee5\u4e0b\u5716\u4f86\u8aaa\uff0c\u7576\u6211\u5011\u63db\u9078\u53e6\u4e00\u500b\u6578\u7684\u6642\u5019\uff1a</p> <p> </p> <p>\\(\\log\\) \u7684\u8a08\u7b97\u5c07\u6703\u9700\u8981\u52a0\u4e0a: \\(-\\log(a-1)! + \\log a! - \\log (b-1)! + \\log b!\\)</p> <p>\\(C^n_k\\pmod{10^9+7}\\) \u7684\u8a08\u7b97\u6703\u9700\u8981\u4e58\u4e0a: \\(\\times b \\times \\text{inv}(a)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst double mxLog = 9;\nconst int INF = 1e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\nconst long double EPS = 1e-8;\n\nint n, k;\nint d[maxn];\ndouble preLog[maxn];  // preLog[i] = log(i!)\nint prei[maxn], pinv[maxn], pref[maxn];\n\nvoid build() {\n    preLog[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        preLog[i] = preLog[i - 1] + log10(i);\n    }\n\n    prei[0] = prei[1] = pinv[0] = pinv[1] = pref[0] = pref[1] = 1;\n    for (int i = 2; i &lt; maxn; i++) {\n        pref[i] = pref[i - 1] * i % M;\n        pinv[i] = (M - (M / i) * pinv[M % i] % M) % M;\n        prei[i] = prei[i - 1] * pinv[i] % M;\n    }\n}\n\nvector&lt;int&gt; work(int _n, int _k, const int _d[]) {\n    n = _n;\n    k = _k;\n    k--;\n    for (int i = 1; i &lt;= n; i++) {\n        d[i] = _d[i];\n        d[i]--;\n    }\n\n    build();\n    vector&lt;int&gt; ans;\n    for (int t = n - 2; t &gt;= 1; t--) {\n        int f, flag = false;\n        for (int i = 1; i &lt;= n; i++) {\n            if (d[i]) {\n                f = i;\n                break;\n            }\n        }\n        double big = preLog[t - 1];\n        int small = pref[t - 1];\n\n        for (int i = 1; i &lt;= n; i++) {\n            if (i == f) {\n                big = big - preLog[d[i] - 1];\n                small = (small * prei[d[i] - 1]) % M;\n            } else if (d[i]) {\n                big = big - preLog[d[i]];\n                small = (small * prei[d[i]]) % M;\n            }\n        }\n        int val;\n        if (big - mxLog &gt; EPS) {\n            val = INF;\n        } else {\n            val = small;\n        }\n        for (int i = 1; i &lt;= n; i++) {\n            if (d[i]) {\n                if (i != f) {\n                    big += preLog[d[f] - 1] + preLog[d[i]];\n                    big -= preLog[d[f]] + preLog[d[i] - 1];\n                    small = (((small * pinv[d[f]]) % M) * d[i]) % M;\n                    if (big - mxLog &gt; EPS) {\n                        val = INF;\n                    } else {\n                        val = small;\n                    }\n                    f = i;\n                }\n                if (k &gt;= val) {\n                    k -= val;\n                } else {\n                    ans.pb(i);\n                    d[i]--;\n                    flag = true;\n                    break;\n                }\n            }\n        }\n        if (flag == false) {\n            return {-1};\n        }\n    }\n    return ans;\n}\n\nsigned main() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    int d[1005];\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; d[i];\n    vector&lt;int&gt; ans = work(n, k, d);\n    for (auto ele : ans) cout &lt;&lt; ele &lt;&lt; '\\n';\n}\n</code></pre> 2023 TOI \u6a21\u64ec\u8cfd\u6c7a\u8cfd pB. TOI \u4e5f\u6703\u51fa\u5b57\u4e32\u984c\uff1f <p>\u7d66 n \u500b\u9ede \\(\\dfrac{n(n-1)}{2}\\) \u689d\u908a\u7684 DAG\uff0c\u6eff\u8db3\u4efb\u610f \\(1\\le i&lt; j\\le n\\) \u90fd\u5b58\u5728 \\(i\\) \u5230 \\(j\\) \u7684\u6709\u5411\u908a\u3002\u6bcf\u500b\u9ede\u90fd\u662f\u4e00\u500b\u5b57\u5143\u3002\u6709 \\(q\\) \u7b46\u8a62\u554f\u5982\u4e0b\uff1a</p> <ul> <li>\\(\\text{query}(s, t):\\) \u8f38\u51fa \\(s\\) \u5230 \\(t\\) \u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u8def\u5f91\uff08\u8def\u5f91\u4e0a\u6240\u6709\u5b57\u5143\u6309\u7167\u9806\u5e8f\u62fc\u8d77\u4f86\u7684\u5b57\u4e32\u5b57\u5178\u5e8f\u6700\u5c0f\uff09</li> </ul> <p>\\(2\\le n\\le 800\\)</p> \u601d\u8def <p>\u3010subtask\u3011</p> <p>\u6211\u5011\u8981\u53bb\u9032\u884c\u8f49\u79fb\uff0c\u4f46\u8f49\u79fb\u8981\u6709\u6b63\u78ba\u7684\u9806\u5e8f\u3002\u4ee4 \\(s_1, s_2\\) \u662f\u5b57\u4e32\uff0c\\(c\\) \u662f\u5b57\u5143\uff0c\\(s_1\\) \u7684\u5b57\u5178\u5e8f\u6bd4 \\(s_2\\) \u5c0f\u4e0d\u4ee3\u8868\\(s_1+c&lt;s_2+c\\)\u3002\u4f8b\u5982\u8aaa \\(s_1=\\)a,\\(s_2=\\)aa,\\(c=\\)c\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5f97\u5230\u4e00\u500b\u5f15\u7406\uff1a\u9ede x \u5230\u9ede y \u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u8def\u5f91\u4e00\u5b9a\u662f x \u8d70\u6070\u4e00\u689d\u908a\u81f3\u67d0\u500b\u9ede i\uff0c\u518d\u5f9e\u9ede i \u8d70\u5b57\u5178\u5e8f\u6700\u5c0f\u8def\u81f3\u9ede y\uff08\u5982\u679c\u6539\u6210\u300c\u9ede x \u5230\u9ede y \u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u8def\u5f91\u4e00\u5b9a\u662f x \u8d70\u5b57\u5178\u5e8f\u6700\u5c0f\u8def\u5230\u67d0\u500b\u9ede i\uff0c\u518d\u5f9e\u9ede i \u8d70\u6070\u4e00\u689d\u908a\u81f3 y\u300d\u4f9d\u7167\u4e0a\u9762\u63d0\u5230\u7684\u6027\u8cea\uff0c\u5c31\u6703\u767c\u73fe\u662f\u932f\u7684\uff09\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u4ee4 dp(i, j) \u4ee3\u8868\u9ede i \u81f3\u9ede j \u8def\u5f91\u4e0a\u5b57\u5178\u5e8f\u6700\u5c0f\u5b57\u4e32\uff0c\u6839\u64da\u5f15\u88e1\u53ef\u5217\u51fa\u8f49\u79fb\u5f0f\uff1a</p> \\[ dp(i, j) = \\min\\limits_{k=i+1}^j{s(i, k)+dp(k, j)} \\] <p>\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(n^4)\\)\u3002</p>"},{"location":"other/pigeonhole_principle/","title":"\u9d3f\u7c60\u539f\u7406","text":"2023 YTP p6. \u80d6\u80d6\u8c93\u7684\u6e1b\u80a5\u8a08\u756b (Weight_Loss_Plan) 2023 \u6210\u5927\u8cfd pF. \u52d5\u7269\u5712 <p>\u6709\u4e00\u500b\u7121\u9650\u9805\u7684\u5e8f\u5217 \\(s\\)\uff0c\u5176\u4e2d \\(s_i=12345\\ldots i\\)\u3002\u6709 \\(t\\) \u7b46\u67e5\u8a62\uff0c\u6bcf\u7b46\u67e5\u8a62\u7d66 \\(x\\)\uff0c\u554f\u662f\u5426\u5b58\u5728\u5169\u500b \\(i,j\\) \u6eff\u8db3 \\(s_i\\% x\\) == \\(s_j\\% x\\)</p> <p>\\(1\\le t\\le 10^6, 1\\le x\\le 10^6,\\sum x \\le 2\\times 10^6\\)</p> \u601d\u8def <p>\u6839\u64da\u9d3f\u7c60\u539f\u7406\uff0c\u53ea\u8981\u770b\u4efb\u610f x + 1 \u500b\u6771\u897f\uff0c\u4e00\u5b9a\u6703\u6709\u5169\u500b\u6771\u897f % x \u7684\u7d50\u679c\u662f\u76f8\u540c\u7684</p> <p>\u6240\u4ee5\u6211\u5011\u53ea\u8981\u5c07 s[1], ..., s[x + 1] \u7b97\u51fa\u4f86\u8f38\u51fa % x \u4e00\u6a23\u7684\u5169\u500b\u5373\u53ef</p> CF 961 D. Pair Of Lines <ul> <li>https://zh.wikipedia.org/zh-tw/%E9%B4%BF%E5%B7%A2%E5%8E%9F%E7%90%86</li> </ul>"},{"location":"other/practice/","title":"\u8a13\u7df4","text":"<ul> <li> <p>TOI \u6a21\u8003\u984c\u76ee\u6709\u4eba\u6eff\u5206\u7684\u984c\u76ee</p> <ul> <li>2022 * 6</li> <li>2021 * 2</li> <li>2020 * 2</li> </ul> </li> <li> <p>OI \u984c\u76ee</p> <ul> <li>JOI final round</li> <li>POI                                       <ul> <li>https://oichecklist.pythonanywhere.com/</li> <li>\u4e2d\u504f\u6613: \u901a\u904e\u4eba\u6578 100+</li> <li>\u4e2d\u504f\u96e3: \u901a\u904e\u4eba\u6578 50~100</li> <li>\u96e3\u984c: &lt;= 50</li> <li>\u4e00\u6b21\u6293\u4e94\u984c\u4f86\u6a21\u64ec</li> </ul> </li> <li>USACO</li> <li>BOI</li> </ul> </li> <li> <p>\u7df4\u901f\u5ea6 </p> <ul> <li>codeforces gym / div2 p1 p2 <ul> <li>3 \u661f or 2\u661f</li> <li>3hr \u53ef\u4ee5\u5beb 6 \u984c\u4ee5\u4e0a</li> <li>vir</li> </ul> </li> </ul> </li> <li> <p>\u4e3b\u984c</p> <ul> <li> <p>CF EDU suffix array \u4ee5\u5916</p> </li> <li> <p>Atcoder DP contest</p> </li> <li> <p>CSES</p> </li> </ul> </li> <li> <p>\u52a0\u5f37/\u8907\u7fd2\u4e3b\u984c</p> </li> <li> <p>virtual \u4e00\u5929\u4e00\u5834</p> <ul> <li>atcoder abc</li> <li>CF div 3 / edu</li> <li>JOI</li> <li>POI</li> </ul> </li> </ul>"},{"location":"other/swap/","title":"\u5e8f\u5217\u4ea4\u63db\u554f\u984c","text":"<p>\u5728 \\(n=20\\) \u7684\u9019\u7a2e\u5b50\u984c\u6642\uff0c\u6211\u5011\u53ef\u4ee5\u4f7f\u7528 bitmask dp\u3002\u4f8b\u5982 dp(mask, i) \u5b9a\u7fa9\u70ba\u5df2\u7d93\u653e\u5b8c\u4e86 mask \u9019\u500b\u96c6\u5408\u5167\u7684\u9019\u4e9b\u6578\u5b57\uff0c\u800c\u6211\u6700\u5f8c\u653e\u7684\u662f \\(a_i\\)\uff08\u624d\u80fd\u5f97\u77e5\u9806\u5e8f\uff09\u3002\u4f8b\u5982\u7576\u524d\u7684\u5e8f\u5217\u662f \\(a_1, a_2, a_3, a_4,a_5\\)\uff0c\u800c\u7576\u524d\u8f49\u79fb\u662f dp({1, 2, 4, 5}, 2) = dp({1, 4, 5}, 1) + 2\uff0c\u56e0\u70ba \\(a_4, a_5\\) \u4e00\u958b\u59cb\u5728  \\(a_2\\) \u7684\u5f8c\u9762\uff0c\u79fb\u5230\u524d\u9762\u6703\u7522\u751f\u8ca2\u737b\u3002</p>"},{"location":"other/swap/#toi-2019-p4","title":"TOI 2019 p4","text":"TOI 2019 p4. \u96f2\u9704\u98db\u8eca (rollercoaster) / CSES - Pyramid Array <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u554f\u81f3\u5c11 swap \u76f8\u9130\u7684\u5e7e\u6b21\u53ef\u4f7f\u9663\u5217\u5148\u905e\u589e\uff0c\u518d\u905e\u6e1b</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u6211\u5011\u8003\u616e 1\uff0c1 \u4e00\u5b9a\u53ea\u80fd\u653e\u5728\u6700\u5de6\u6216\u6700\u53f3\uff0c\u770b\u54ea\u908a\u6bd4\u8f03\u8fd1\u5c31\u653e\u90a3\u908a\uff0c\u7136\u5f8c\u5c31\u53ef\u4ee5\u79fb\u9664 1\uff0c\u8b8a\u5b50\u554f\u984c</p> <p>\u5be6\u4f5c\u4e0a\u6211\u5011\u9700\u8981\u4e00\u500b data structure \u53ef\u4ee5\u7b97:</p> <ul> <li> <p>\u5de6\u908a\u6709\u5e7e\u500b &gt; i</p> </li> <li> <p>\u53f3\u908a\u6709\u5e7e\u500b &gt; i</p> </li> </ul> <p>\u53ef\u4ee5\u4f7f\u7528 BIT\uff0c\u8907\u96dc\u5ea6 O(n log n)</p>"},{"location":"other/swap/#cf-split-sort","title":"CF Split Sort","text":"CF 1863 B. Split Sort <p>\u7d66\u4e00\u500b \\(1\\sim n\\) \u7684 permutation\uff0c\u8f38\u51fa\u6700\u5c11\u64cd\u4f5c\u4f7f permutation \u8b8a \\((1,2,\\ldots ,n)\\)</p> <ul> <li>\u9078\u4e00\u500b \\(x\\)\uff0c\u628a \\(\\le x\\) \u7684\u5728\u9806\u5e8f\u4e0d\u8b8a\u4e0b\u62c9\u5230\u524d\u9762\uff0c\u518d\u628a \\(&gt;x\\) \u7684\u5728\u9806\u5e8f\u4e0d\u8b8a\u4e0b\u62c9\u5230\u5f8c\u9762</li> </ul> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u4e00\u500b\u76f4\u89ba\u7684\u60f3\u6cd5\u5c31\u662f\u5f9e 1 -&gt; n \u770b\u4e0a\u4f86\uff0c\u82e5\u51fa\u73fe\u9006\u5e8f\u7684\u8a71\u7b54\u6848\u5c31\u8981 +1\u3002\u4f8b\u5982 1, 2, 3 \u90fd ok\uff0c\u5230 4 \u7684\u6642\u5019\u767c\u73fe\u5f80\u5de6\u8d70\u4e86\uff0c\u90a3\u6211\u5011\u52e2\u5fc5\u8981\u82b1\u4e00\u6b21\u64cd\u4f5c\u5c07 4 \u5f04\u5230 3 \u7684\u53f3\u908a\u53bb\u3002</p> <p>\u4e4b\u524d\u60f3\u7684\u601d\u8def :</p> <p>\u8003\u616e\u54ea\u500b\u6642\u5019\u8981\u5207 x\u3002\u5728 sorted \u7684 permutation \u4e2d\uff0c</p> <p>\u5148\u8003\u616e 1\uff0c\u82e5 1 \u4e0d\u662f\u5728\u6700\u524d\u9762\uff0c\u90a3\u6211\u5011\u6709\u5169\u7a2e\u9078\u64c7 :</p> <ul> <li>\u82b1\u4e00\u6b21\u64cd\u4f5c\u4f7f 1 \u79fb\u52d5\u5230\u7b2c\u4e00\u683c</li> <li>\u8b93\u4ee5\u5f8c\u7684\u6578\u5b57\u5e36\u6211\u5230\u7b2c\u4e00\u683c<ul> <li>\u8003\u616e\u5f9e x \u5207\uff0c\u90a3\u52e2\u5fc5 pos[1] \u8981\u5c0f\u65bc pos[2], ..., pos[x] \u624d\u80fd\u88ab\u5e36\u98db</li> <li>\u986f\u7136\u7576 x \u8d8a\u5927\u7684\u6642\u5019\u8d8a\u96e3\u7b26\u5408\uff0c\u6240\u4ee5\u6211\u5011\u5176\u5be6\u53ea\u8981\u8003\u616e x \u6700\u5c0f\uff0c\u4e5f\u5c31\u662f x = 2 \u7684\u6642\u5019</li> <li>iff pos[1] &lt; pos[2]</li> </ul> </li> </ul> <p>\u7576\u6211\u5011\u9078\u64c7\u5b8c\u5f8c\uff0c\u5373\u53ef\u5c07 1 \u79fb\u9664\uff0c\u8b8a\u6210\u5b50\u554f\u984c</p> <p>\u7e3d\u7d50\u4e0b\u4f86\uff0c\u6211\u5011\u5176\u5be6\u53ea\u8981\u770b pos[i]&gt;pos[i+1] \u7684\u6578\u91cf\u5373\u53ef</p> <p>\u8a73\u7d30\u53ef\u53c3\u8003 : https://www.youtube.com/watch?v=IhMnux8RfQw</p>"},{"location":"other/swap/#csa-swap-pairing","title":"CSA Swap Pairing","text":"CS Academy - Swap Pairing <p>\u7d66\u4f60\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6bcf\u7a2e\u6578\u5b57\u6070\u51fa\u73fe\u5169\u6b21\uff0c\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5 swap \u76f8\u9130\u7684\uff0c\u554f\u6700\u5c11\u64cd\u4f5c\u6b21\u6578\u4f7f\u540c\u7a2e\u6578\u5b57\u90fd\u76f8\u9130</p> <p>\\(n\\le 10^5,n\\) \u70ba\u5076\u6578 \\(, 0\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u8003\u616e n = 4 \u53ea\u6703\u6709\u9019\u5e7e\u7a2e case :</p> <ul> <li> <p>aabb</p> </li> <li> <p>abab</p> </li> <li> <p>abba</p> </li> </ul> <p>\u9019\u555f\u767c\u4e86\u6211\u5011\u53ef\u4ee5\u628a\u76f8\u540c\u7684\u5b57\u6bcd\u7684\u982d\u3001\u770b\uff0c\u770b\u6210\u662f\u4e00\u500b interval\uff0c\u554f\u984c\u5c31\u8b8a\u6210\u8981 interval \u8207 interval \u5006\u5006\u4e4b\u9593\u7684\u8ca2\u737b\uff0c\u4f8b\u5982 abcbca\uff0c\u90a3\u9ebc interval a \u5c0d b \u7684\u9806\u5e8f abba\uff0c\u9700\u8981 swap \u5169\u6b21\u624d\u80fd\u4f7f\u76f8\u540c\u7684\u76f8\u9130\uff0c\u6240\u4ee5\u8ca2\u737b\u70ba 2\uff0ca \u5c0d c \u7684\u9806\u5e8f\u662f acca\uff0c\u8ca2\u737b\u4e5f\u662f 2\uff0cb \u5c0d c \u7684\u9806\u5e8f\u662f bcbc\uff0c\u56e0\u70ba\u53ea\u8981 swap \u4e00\u6b21\u5c31\u53ef\u4f7f\u76f8\u540c\u7684\u76f8\u9130\uff0c\u6240\u4ee5\u8ca2\u737b\u70ba 1\u3002\u7b54\u6848\u5c31\u662f\u8ca2\u737b\u52a0\u7e3d\u8d77\u4f86: 2 + 2 + 1 = 5\u3002\u9019\u500b\u60f3\u6cd5\u5176\u5be6\u6709\u9ede\u985e\u4f3c\u6bd4\u8f03\u6392\u5e8f</p> <p>\u6700\u5f8c\uff0c\u53ef\u4ee5\u7528 BIT \u4e4b\u985e\u7684\u4f86\u8a08\u7b97 interval \u4e4b\u9593\u7684\u8ca2\u737b\uff0cO(n log n)</p> <p>\u8003\u616e\u8981\u4f7f\u7b2c\u4e00\u500b\u6578\u5b57\u8207\u8ddf\u4ed6\u76f8\u540c\u7684\u6578\u5b57\u8981\u76f8\u9130\uff0c\u5c07\u6bd4\u8f03\u5f8c\u9762\u7684\u90a3\u500b\u4e00\u8def swap \u5230\u7b2c\u4e8c\u500b\u4f4d\u7f6e\u4e00\u5b9a\u4e0d\u6703\u6bd4\u8f03\u5dee\uff0c\u56e0\u70ba\u82e5\u4ed6\u5011\u5169\u500b\u90fd swap \u5230\u4e2d\u9593\u53bb\uff0c\u90a3\u7b49\u7b49\u5176\u4ed6\u4eba\u7d93\u904e\u4ed6\u5011\u6642\u9084\u6703\u82b1\u66f4\u591a cost</p> <p>\u6240\u4ee5\u6211\u5011\u5c07\u7b2c\u4e00\u500b\u6578\u5b57\u505a\u5b8c\u5f8c\uff0c\u5c31\u53ef\u4ee5\u522a\u6389\u4ed6\u5011\u8b8a\u5b50\u554f\u984c\u3002\u53ef\u4f7f\u7528 BIT \u8a08\u7b97 cost</p>"},{"location":"other/swap/#iii-pe","title":"\u9644\u4e2d\u6a21\u7af6III pE","text":"2021 \u9644\u4e2d\u6a21\u7af6 III pE. HNO3 \u8207\u97f3\u6a02\u904a\u6232 (Game) <p>\u7d66\u5169\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 a, b\uff0c\u5176\u4e2d a \u70ba 1...n \u7684 permutation\uff0c\u800c b \u4e5f\u662f 1...n \u7684 permutation \u4f46\u53ef\u80fd\u5176\u4e2d\u4e00\u4e9b\u9805\u6703\u8b8a\u6210 0\u3002\u6bcf\u6b21\u53ef\u4ee5\u4ea4\u63db\u5e8f\u5217\u4e2d\u76f8\u9130\u7684\u5169\u9805\uff0c\u6700\u5c11\u5e7e\u6b21\u64cd\u4f5c\u80fd\u4f7f\u6240\u6709 \\(b_i\\neq 0\\) \u7684\u9805\u90fd\u6eff\u8db3 \\(a_i=b_i\\)</p> \u601d\u8def <p>\u8003\u616e b \u6c92\u6709 0 \u7684 case\uff0c\u6211\u5011\u53ef\u91cd\u65b0\u7de8\u865f\u8b93 b = [1, 2, ..., n]\uff0c\u554f\u984c\u5c31\u8b8a\u9006\u5e8f\u6578\u5c0d</p> <p>\u5047\u5982\u73fe\u5728 b \u6709\u4e00\u9805\u662f 0\uff0c\u6211\u5011\u662f\u53ef\u4ee5\u76f4\u63a5\u78ba\u5b9a\u90a3\u9805\u8981\u662f\u4ec0\u9ebc\uff0c\u7136\u5f8c\u5957\u7528\u4e0a\u9762\u7684\u4f5c\u6cd5</p> <p>\u5047\u5982\u73fe\u5728 b \u6709\u5169\u9805\u662f 0\uff0c\u53ef\u4ee5\u679a\u8209\u4e00\u500b\u653e\u524d\u9762\u7684\uff0c\u4e00\u500b\u653e\u5f8c\u9762\u7684\uff0c\u7136\u5f8c\u5957\u7528\u4e0a\u9762\u7684\u4f5c\u6cd5\u3002\u4f46\u89c0\u5bdf\u5230\u5176\u5be6\u4e0d\u6703\u767c\u751f\u5728 a \u662f\u524d\u3001\u5f8c\uff0c\u5728 b \u8b8a\u5f8c\u3001\u524d\uff0c\u82e5\u767c\u751f\u4ee3\u8868\u4ed6\u5011\u5169\u500b\u4e92\u76f8 swap \u4e86\uff0c\u5c07\u9019\u500b\u64cd\u4f5c\u522a\u6389\u53ef\u4ee5\u5f97\u5230\u66f4\u4f73\u89e3</p> <p>\u6240\u4ee5\u6b78\u7d0d\u4e00\u4e0b\uff0c\u6bcf\u6b21\u4ea4\u63db\u6642\uff0c\u4ea4\u63db\u7684\u5169\u500b\u5c0d\u8c61\u61c9\u8a72\u81f3\u5c11\u4e00\u500b\u8981\u662f b \u88e1\u9762\u51fa\u73fe\u7684\u5143\u7d20\uff0c\u4e0d\u7136\u628a\u9019\u500b\u64cd\u4f5c\u62d4\u6389\u4f9d\u820a\u662f\u4e00\u500b\u5408\u6cd5\u89e3\u3002\u6240\u4ee5\u5728\u6700\u4f73\u89e3\u7684\u60c5\u6cc1\u4e0b\u4e0d\u6703\u6709\u4ea4\u63db\u4e0d\u5728  b \u88e1\u7684\u5169\u500b\u5143\u7d20\u7684\u60c5\u5f62\uff0c\u5269\u4e0b b \u88e1\u6c92\u6709\u7684\u5143\u7d20\u61c9\u8a72\u4f9d\u7167\u539f\u9806\u5e8f\u586b\u5165\uff0c\u4e4b\u5f8c\u5c31\u5957\u4e0a\u9762\u7684\u4f5c\u6cd5</p>"},{"location":"other/swap/#cses-sorting-methods","title":"CSES Sorting Methods","text":"CSES - Sorting Methods <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4ee5\u4e0b\u6709 4 \u7a2e\u64cd\u4f5c\uff0c\u554f\u55ae\u7368\u4f7f\u7528\u6bcf\u4e00\u7a2e\u53ef\u8b93\u9663\u5217\u5c0f\u5230\u5927 sort \u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6578:</p> <ul> <li> <p>swap \u76f8\u9130\u7684\u5169\u500b\u5143\u7d20</p> </li> <li> <p>swap \u4efb\u610f\u5169\u500b\u5143\u7d20</p> </li> <li> <p>\u522a\u6389\u4e00\u500b\u5143\u7d20\uff0c\u518d\u628a\u5b83\u63d2\u5165\u5230\u53e6\u5916\u7684\u4f4d\u7f6e</p> </li> <li> <p>\u522a\u6389\u4e00\u500b\u5143\u7d20\uff0c\u518d\u628a\u5b83\u63d2\u5165\u5230\u9663\u5217\u7684\u6700\u524d\u9762</p> </li> </ul> <p>\\(n\\le 2\\times 10^5\\)</p> \u601d\u8def <p>sort1</p> <p>ans = \u9006\u5e8f\u6578\u5c0d</p> <p>sort2</p> <p>\u5efa\u908a i \u2192 a[i]\uff0c\u7b54\u6848\u70ba n - cycle \u6578\u91cf</p> <p>sort 3</p> <p>n - LIS</p> <p>sort4</p> <p>\u3010\u89c0\u5bdf\u3011: \u5982\u679c \\(x\\) \u52d5\uff0c\u90a3\u5c0f\u65bc \\(x\\) \u7684\u6578\u5b57\u5168\u90e8\u90fd\u8981\u52d5\uff08\u56e0\u70ba \\(x\\) \u5df2\u7d93\u5230\u6700\u524d\u9762\u4e86\uff0c\u5f8c\u9762\u6bd4\u5979\u5c0f\u7684\u6578\u5b57\u90fd\u9700\u79fb\u5230\u4ed6\u524d\u9762\u624d\u53ef\u4ee5\uff09</p> <p>\u5f9e \\(n\\) \u627e\u4e0b\u4f86\u770b\u4ed6\u5011\u7684\u9806\u5e8f\u662f\u5426\u5f9e \\(n\\) \u5f80\u5de6\u770b\u904e\u53bb\u905e\u6e1b\uff0c\u7b54\u6848\u70ba n - len</p>"},{"location":"other/swap/#joi-2019","title":"JOI 2019","text":"JOI 2019 p3 .\u6709\u8da3\u7684\u5bb6\u5ead\u83dc\u56ed 3 <p>\u7d66\u5b9a\u9577\u5ea6\u70ba n \u4e00\u500b\u9663\u5217\u5305\u542b R, W, G \u9019\u4e09\u7a2e\u5b57\u5143\uff0c\u6bcf\u6b21\u53ef\u4ee5 swap \u76f8\u9130\u7684\u5143\u7d20\uff0c\u6c42\u4f7f\u5f97\u4e00\u6a23\u7684\u5b57\u5143\u4e0d\u76f8\u9130\u7684\u6700\u5c11\u4ea4\u63db\u6b21\u6578</p> <p>\\(n\\le 400\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u767c\u73fe\uff0c\u540c\u4e00\u500b\u5b57\u5143\u4e4b\u9593\u4e0d\u6703\u6709\u8ca2\u737b\uff0c\u56e0\u70ba\u4ed6\u5011\u4e0d\u6703\u4e92\u76f8\u4ea4\u63db\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u53ea\u5b58\u7576\u524d\u6bcf\u500b\u5b57\u5143\u6240\u653e\u7684\u6578\u91cf\u5373\u53ef\u3002dp(R, G, W) \u4ee3\u8868R \u76ee\u524d\u653e\u7684\u6578\u91cf, G \u76ee\u524d\u653e\u7684\u6578\u91cf, W \u76ee\u524d\u653e\u7684\u6578\u91cf\uff0c\u8f49\u79fb\u7684\u8a71\u5c31\u679a\u8209\u6700\u5f8c\u4e00\u500b\u653e\u54ea\u7a2e\u5b57\u5143\u5c31\u597d</p> \\[\\texttt{dp(R,G,W)}=\\begin{cases} \\texttt{dp(R-1,G,W) + cost} \\\\ \\texttt{dp(R,G-1,W) + cost} \\\\ \\texttt{dp(R,G,W-1) + cost} \\end{cases}\\] <p>\u81f3\u65bc cost \u6211\u5011\u5c31\u9810\u8655\u7406 query(c, i, j) \u4ee3\u8868\u524d j \u500b\u7a2e\u985e\u70ba c \u7684\u5b57\u5143\u6709\u591a\u5c11\u500b\u5728 index i \u5f8c\u9762\u3002\u4f8b\u5982\u76ee\u524d\u653e\u7684\u5b57\u5143\u662f R\uff0c\u4ed6\u539f\u672c\u5728\u9663\u5217\u88e1\u7684\u4f4d\u7f6e\u662f idx\uff0c\u7576\u524d\u72c0\u614b\u662f dp(i, j, k)\uff0ccost \u5c31\u6703\u662f query(G, j, idx) + query(W, k, idx)\u3002\u81f3\u65bc\u6211\u5011\u8981\u600e\u9ebc\u9810\u8655\u7406\uff0c\u6211\u5011\u53ea\u9700\u8981\u5b58 sum(c, i) \u4ee3\u8868\u524d i \u4f4d\u6709\u5e7e\u500b\u5b57\u5143 c \u5373\u53ef\uff0c\u5c0d\u65bc\u5b57\u5143 c \u7684\u8ca2\u737b\u5373\u662f\u5728 query \u6642\u56de\u50b3 max(0, j - sum(c, i)) \u5c31\u53ef\u4ee5\u5f97\u5230\u3002</p>"},{"location":"other/swap/#uscao-dance-mooves","title":"USCAO Dance Mooves","text":"USACO 2021 January 3. Dance Mooves <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a=[1, 2, \\ldots ,n]\\)\u3002\u7d66 \\(k\\) \u5c0d\u6307\u4ee4\uff0c\u5f62\u5f0f\u70ba \\((x_i,y_i)\\)\uff0c\u8868\u793a swap\\((a_{x_i},a_{y_i})\\)\u3002\u7b2c \\(i\\) \u5206\u9418\u9700\u8981\u57f7\u884c\u7b2c \\(i\\pmod{k}\\) \u500b\u52d5\u4f5c\uff0c\u554f \\(m\\) \u5206\u9418\u5f8c\uff0c\u6bcf\u500b\u6578\u5b57\u5206\u5225\u7d93\u904e\u5e7e\u500b\u4e0d\u540c\u7684 index\u3002</p> <p>\\(2\\le n\\le 10^5, 1\\le k\\le 2\\times 10^5, 1\\le m\\le 10^{18}\\)</p> \u601d\u8def <p>\u4ee4 \\(s_i\\) \u70ba \\(i\\) \u5728\u7d93\u904e \\(k\\) \u8f2a\u6703\u8d70\u904e\u7684 unique index\uff0c\\(p_i\\) \u70ba \\(k\\) \u8f2a\u5f8c\u6703\u5230\u54ea\u500b index\u3002\u6bcf \\(k\\) \u8f2a\u4e00\u500b\u5faa\u74b0\uff0c\u6211\u5011\u8003\u616e\u5efa\u5716\uff0c\u908a\u70ba \\(i\\rightarrow p_i\\)\uff0c\u56e0\u70ba in<sub>i</sub> \u548c out<sub>i</sub> \u90fd\u662f 1\uff0c\u6240\u4ee5\u6703\u5f62\u6210\u591a\u500b cycle\u3002\u4ee4 \\(m=k\\times d+r\\)\uff0c\u5047\u8a2d\u67d0\u500b\u74b0\u9577\u5ea6\u70ba \\(L\\)\uff0c\u82e5 \\(L&lt;d\\) \u5247\u74b0\u4e0a\u7684\u6bcf\u500b\u9ede\u7684\u7b54\u6848\u5c31\u662f\u74b0\u4e0a\u6240\u6709 \\(s_i\\) \u7684 union\uff0c\u53cd\u4e4b\u5c0d\u65bc\u67d0\u500b\u9ede \\(i\\)\uff0c\u53ea\u6703\u8d70\u5230\u4ee5\u4ed6\u524d\u9762\u7684 \\(d\\) \u500b\uff0c\u4e5f\u5c31\u662f \\(s_i,s_{p_i},s_{p_i^2},..,s_{p_i^{d-1}}\\) \u7684 union\uff08\u5176\u4e2d \\(p_i^x\\) \u70ba \\(\\underbrace{p[p[p[p...}_{x\u6b21}[i]]]]\\)\uff09\u3002\u56e0\u70ba \\(\\sum s_i\\) \u6700\u591a\u53ea\u6703\u662f \\(2k+n\\)\uff08\\(n\\) \u4e00\u958b\u59cb\u6240\u5728\u7684 index\uff0c\\(2k\\) \u6bcf\u6b21 swap \u6703 update \u5169\u500b\u65b0\u7684\uff09\uff0c\u6240\u4ee5\u5c0d \\(L&lt;d\\) \u6211\u5011\u76f4\u63a5\u66b4\u529b\u7684\u5c07\u74b0\u4e0a\u7684 \\(s_i\\) \u52a0\u5165 ; \u5c0d\u65bc \\(L \\ge d\\) \u6211\u5011\u4f7f\u7528 sliding window \u7dad\u8b77\uff0c\u9019\u6a23\u6bcf\u500b \\(s_i\\) \u90fd\u53ea\u6703\u52a0\u5165\u4e00\u6b21\u548c\u522a\u6389\u4e00\u6b21\uff0c\u7e3d\u8907\u96dc\u5ea6 \\(O(n+k)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\n\nint N, K;\nll M;\nint A[200001], B[200001];          // input\nint P[100001];                     // as described in analysis\nint from[100001];                  // from[i] = where the cow in position i originated from\nvector&lt;pair&lt;int, int&gt;&gt; S[100001];  // as described in analysis, stores {pos, time}\nint cnt[100001];                   // array to keep track of uniquePos\nint uniquePos;                     // # of unique reachable positions\n\n// adds in all reachable positions from S_node where time&lt;=bar\nvoid add(int node, int bar) {\n    for (auto x : S[node]) {\n        if (x.second &gt; bar) return;\n        if (cnt[x.first] == 0)\n            uniquePos++;\n        cnt[x.first]++;\n    }\n}\n\n// removes all reachable positions from S_node where time&lt;=bar\nvoid remove(int node, int bar) {\n    for (auto x : S[node]) {\n        if (x.second &gt; bar) return;\n        if (cnt[x.first] == 1)\n            uniquePos--;\n        cnt[x.first]--;\n    }\n}\n\nvector&lt;int&gt; nodes;  // stores nodes currently in cycle\nbool vis[100001];\n\nvoid dfs(int node) {\n    vis[node] = true;\n    nodes.push_back(node);\n    if (!vis[P[node]])\n        dfs(P[node]);\n}\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; K &gt;&gt; M;\n    for (int i = 0; i &lt; K; i++)\n        cin &gt;&gt; A[i] &gt;&gt; B[i];\n    // initialize from and S\n    for (int i = 1; i &lt;= N; i++) {\n        from[i] = i;\n        S[i].push_back({i, 0});\n    }\n    // simulate the first K swaps, keeping track of where each position can reach\n    for (int i = 0; i &lt; K; i++) {\n        S[from[A[i]]].push_back({B[i], i + 1});\n        S[from[B[i]]].push_back({A[i], i + 1});\n        swap(from[A[i]], from[B[i]]);\n    }\n    // compute array P after first K swaps\n    for (int i = 1; i &lt;= N; i++)\n        P[from[i]] = i;\n    int ans[100001];\n    // run a DFS on each cycle\n    for (int i = 1; i &lt;= N; i++)\n        if (!vis[i]) {\n            dfs(i);\n            ll D = M / K;   // as described in the analysis\n            int R = M % K;  // as described in the analysis\n            //\"special case\" if the whole cycle is included\n            if (D &gt;= (int)nodes.size()) {\n                D = nodes.size();\n                R = 0;\n            }\n            int j = D - 1;\n            // initialize our sliding window [0,j]\n            for (int k = 0; k &lt;= j; k++)\n                add(nodes[k], K);\n            // we slide our window [i,j], adding and removing as we go\n            for (int i = 0; i &lt; nodes.size(); i++) {\n                int newJ = (j + 1) % (int)nodes.size();\n                // account for the extra R swaps\n                add(nodes[newJ], R);\n                // store answer for current sliding window\n                ans[nodes[i]] = uniquePos;\n                // undo the extra R swaps\n                remove(nodes[newJ], R);\n                // undo the left endpoint of sliding window\n                remove(nodes[i], K);\n                // add new right endpoint of sliding window\n                add(nodes[newJ], K);\n                j = newJ;\n            }\n            // reset everything from this cycle\n            for (int k = 0; k &lt;= D - 1; k++)\n                remove(nodes[k], K);\n            nodes.clear();\n        }\n    for (int i = 1; i &lt;= N; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; endl;\n    return 0;\n}\n</code></pre> USACO 2020 Open Exercise G <p>\u6c42\u6240\u6709 \\(k\\) \u7684\u548c\uff0c\u6eff\u8db3\u81f3\u5c11\u5b58\u5728\u4e00\u500b \\(1\\ldots n\\) \u7684 permutation \u9700\u8981 \\(k\\) \u90e8\u624d\u80fd\u56de\u5230\u539f\u672c\u7684 permutation</p> <p>\\(n\\le 10^4\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u6703\u767c\u6703\u662f\u4e00\u4e9b\u74b0\u7684\u7e3d\u548c\u8981\u662f n\uff0c\u554f\u984c\u5c31\u8b8a\u6210\u6c42\u4e00\u4e9b\u6578\u5b57\u52a0\u8d77\u4f86\u8981\u662f n\uff0c\u9019\u4e9b\u6578\u5b57\u7684 distinct lcm \u7e3d\u548c\u5c31\u662f\u7b54\u6848\u3002</p> <p>\u7528 dp[i][j] \u4ee3\u8868\u7e3d\u5408\u70ba i\uff0c\u9078\u7b2c 1~j \u500b\u8cea\u6578\u80fd\u6e4a\u51fa\u4f86\u7684\u4e58\u7a4d\u7e3d\u548c\uff0c\u8f49\u79fb\u985e\u4f3c\u80cc\u5305\uff0c\u4e0d\u540c\u7684\u662f\u9700\u8981\u679a\u8209\u7b2c j \u500b\u8cea\u6578\u7528\u4e86\u5e7e\u6b21\u3002\u8907\u96dc\u5ea6 O(n * pi(n) * log n) </p> code(from \u5b98\u89e3) <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int MAXP = 1234;\nconst int MAXN = 10005;\n\nLL res[MAXP][MAXN];  // result for permutations of length n restricted to using the first p primes\n\nint n; LL m;\n\nLL mul(LL x, LL y) {\n    return (x * y) % m;\n}\n\nLL add(LL x, LL y) {\n    x += y;\n    if (x &gt;= m) x -= m;\n    return x;\n}\n\nLL sub(LL x, LL y) {\n    x -= y;\n    if (x &lt; 0) x += m;\n    return x;\n}\n\nint main() {\n    freopen(\"exercise.in\",\"r\",stdin);\n    freopen(\"exercise.out\",\"w\",stdout);\n    cin &gt;&gt; n &gt;&gt; m;\n\n    vector&lt;int&gt; composite(n+1);\n    vector&lt;int&gt; primes;\n\n    for (int i = 2; i &lt;= n; i++) {\n        if (!composite[i]) {\n            primes.push_back(i);\n            for (int j = 2*i; j &lt;= n; j += i) {\n                composite[j] = 1;\n            }\n        }\n    }\n\n    if (primes.size() == 0) {\n        cout &lt;&lt; \"1\\n\";\n        return 0;\n    }\n\n    for (int j = 0; j &lt;= n; j++) res[0][j] = 1;  // identities\n\n    for (int i = 1; i &lt;= primes.size(); i++) {\n        for (int j = 0; j &lt;= n; j++) {\n            res[i][j] = res[i-1][j];\n\n            int pp = primes[i-1];\n            while (pp &lt;= j) {\n                res[i][j] = add(res[i][j], mul(pp, res[i-1][j-pp]));\n                pp *= primes[i-1];\n            }\n        }\n    }\n\n    cout &lt;&lt; res[primes.size()][n] &lt;&lt; \"\\n\";\n}\n</code></pre> JOI 2021 Final \u96c6\u5408\u5199\u771f <p>\u7d66\u4e00\u500b \\(1\\ldots n\\) \u7684 permutation \\(a\\)\uff0c\u6bcf\u6b21\u53ef\u4ee5 swap \u76f8\u9130\u9805\uff0c\u554f\u6700\u5c11\u5e7e\u6b21\u64cd\u4f5c\u53ef\u6eff\u8db3:</p> <ul> <li>\u5c0d\u65bc\u4efb\u610f \\(i\\in[i,n-1]\\) \u90fd\u6709 \\(a_i&lt;a_{i+1}+2\\)</li> </ul> <p>\\(3\\le n\\le 5000\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u767c\u73fe\u6700\u5f8c\u7684\u5e8f\u5217\u4e00\u5b9a\u53ef\u4ee5\u5206\u6210\u82e5\u5e72\u6bb5\u9023\u7e8c\u905e\u6e1b\u7684\u5b50\u5e8f\u5217\uff0c\u800c\u4e14\u524d\u9762\u7684\u5b50\u5e8f\u5217\u8207\u5f8c\u9762\u5b50\u5e8f\u5217\u662f\u5f9e\u5c0f\u5230\u5927\u7684\uff0c\u4f8b\u5982 \\([3,2,1,6,5,4,9,8,7]\\)</p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u4ee4 \\(dp(i,\\ell)=\\) \u7531 \\(1\\ldots i\\) \u7d44\u6210\u7684\u5408\u6cd5\u5e8f\u5217\uff0c\u6700\u5f8c\u4e00\u6bb5\u9577\u5ea6\u70ba \\(\\ell\\) \u7684\u6700\u5c0f swap \u6b21\u6578\u3002\u5e8f\u5217\u5927\u6982\u5c31\u662f\u9019\u6a23:</p> \\[ 1\\ldots i-\\ell,\\space i,\\space i-1\\ldots i-\\ell + 1 \\] <p>\u8003\u616e \\(i\\) \u5c0d\u5e8f\u5217\u7d66\u51fa\u7684\u8ca2\u737b\uff0c\u6211\u5011\u5148\u5217\u51fa\u8f49\u79fb\u5f0f \\(dp(i,\\ell)=dp(i-1,\\ell-1)+\\text{cost}\\)\uff0c\u4e5f\u5c31\u662f\u5c07 \\(i\\) \u63d2\u5165\u5728\u4e2d\u9593\uff0c\u90a3\u9ebc \\(i\\) \u7684\u8ca2\u737b\u5c31\u662f:</p> <ul> <li> <p>\u539f\u5e8f\u5217 \\(i\\) \u5f8c\u9762\u6709\u591a\u5c11\u500b \\(\\le i-\\ell\\)</p> </li> <li> <p>\u52a0\u4e0a \\(i\\) \u524d\u9762\u6709\u591a\u5c11\u500b \\(\\in [i-\\ell + 1, i-1]\\)</p> </li> </ul> <p>\u9019\u53ef\u4ee5\u5c07 \\((i,a_i)\\) \u6253\u5728\u4e8c\u7dad\u5e73\u9762\u4e0a\uff0c\u7528\u4e8c\u7dad\u524d\u7db4\u548c\u9810\u8655\u7406\u5f97\u5230\uff0c\u8907\u96dc\u5ea6 \\(O(n^2)\\)</p> <p>https://drive.google.com/file/d/1WB9Hnx3itjsBQO0Qk06e1Iszt7jNzhVF/view</p>"},{"location":"other/tips/","title":"c++\u8a9e\u6cd5\u6280\u5de7","text":""},{"location":"other/tips/#_1","title":"\u5411\u4e0a/\u4e0b\u53d6\u6574","text":"code <pre><code>ll ifloor(ll a, ll b){\n    if(b &lt; 0) a *= -1, b *= -1;\n    if(a &lt; 0) return (a - b + 1) / b;\n    else return a / b;\n}\n\nll iceil(ll a, ll b){\n    if(b &lt; 0) a *= -1, b *= -1;\n    if(a &gt; 0) return (a + b - 1) / b;\n    else return a / b;\n}\n</code></pre>"},{"location":"other/tips/#lambda-function","title":"lambda function","text":""},{"location":"other/tips/#void","title":"void","text":"<p>The return type of the lambda function is explicitly set to <code>void</code> using the <code>-&gt; void</code> syntax, indicating that it doesn't return any value.</p> code <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    // Lambda function with auto return type explicitly set to void to print the sum of x and y.\n    auto printSum = [&amp;](int a, int b) -&gt; void {\n        int sum = a + b;\n        std::cout &lt;&lt; \"Sum: \" &lt;&lt; sum &lt;&lt; std::endl;\n    };\n\n    printSum(x, y); // Output: Sum: 30\n\n    return 0;\n}\n</code></pre>"},{"location":"other/tips/#function","title":"function","text":"<p>\u56de\u50b3 bool\uff0cinput \u4e00\u500b</p> code <pre><code>function&lt;bool(int, int, int)&gt; check = [&amp;](int a, int b, int c) {\n    return (a + b) &gt; c;\n};\n</code></pre> <p>\u6216\u8005\u5beb\u6210\u9019\u6a23\u4e5f\u53ef\u4ee5</p> code <pre><code>auto check = [&amp;](int a, int b, int c) {\n    return (a + b) &gt; c;\n};\n</code></pre>"},{"location":"other/tips/#vector","title":"\u4e8c\u7dad vector \u6e05\u7a7a","text":"code <pre><code>struct Graph {\n    vector&lt;vector&lt;int&gt;&gt; G;\n\n    void clear() {\n        vector&lt;vector&lt;int&gt;&gt;(G.size(), vector&lt;int&gt;()).swap(G);\n    }\n};\n</code></pre>"},{"location":"other/tips/#_2","title":"\u51fd\u5f0f\u4e92\u76f8\u547c\u53eb","text":"code <pre><code>#include &lt;iostream&gt;\n\n// \u51fd\u6570f\u7684\u58f0\u660e\nvoid f(int x);\n\nvoid g(int y);\n\nint main() {\n    g(5);\n    return 0;\n}\n\nvoid f(int x) {\n    std::cout &lt;&lt; \"Function f with parameter: \" &lt;&lt; x &lt;&lt; std::endl;\n}\n\nvoid g(int y) {\n    std::cout &lt;&lt; \"Function g with parameter: \" &lt;&lt; y &lt;&lt; std::endl;\n    f(y + 1);\n}\n</code></pre>"},{"location":"other/tips/#getline","title":"getline","text":"<p>\u5047\u5982\u8aaa\u6211\u9700\u8981\u8f38\u5165\u5f88\u591a\u542b\u6709\u7a7a\u683c\u7684\u5b57\u4e32\uff0c\u5b57\u4e32\u8207\u5b57\u4e32\u9593\u7528\u63db\u884c\u4f86\u5206\u9694\uff0c\u5728\u6bcf\u500b\u5b57\u4e32\u8207\u5b57\u4e32\u9593\uff0c\u6211\u53c8\u8981\u8f38\u5165\u4e00\u500b\u6b63\u6574\u6578\u3002\u5728\u8655\u7406\u63db\u884c\u7b26\u865f\u6642\uff0cstd::getline() \u6703\u5c07\u63db\u884c\u7b26\u865f\u7559\u5728\u8f38\u5165\u7de9\u885d\u5340\u4e2d\uff0c\u56e0\u70ba\u5b83\u662f\u5b57\u4e32\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u7dca\u63a5\u8457\u4f7f\u7528 std::cin &gt;&gt; number \u8b80\u53d6\u6574\u6578\uff0c\u90a3\u9ebc\u8f38\u5165\u7de9\u885d\u5340\u4e2d\u7684\u63db\u884c\u7b26\u865f\u5c07\u88ab\u8b80\u53d6\u5230 number \u4e2d\uff0c\u9019\u53ef\u80fd\u5c0e\u81f4\u4e0d\u6b63\u78ba\u7684\u7d50\u679c\uff0c\u6240\u4ee5\u9700\u8981\u7528 cin.ignore() \u4f86\u6e05\u7a7a\u7de9\u885d\u5340\u3002</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n    std::string line;\n    int number;\n\n    while (std::getline(std::cin, line)) {\n        std::cout &lt;&lt; \"You entered: \" &lt;&lt; line &lt;&lt; std::endl;\n\n        // \u5728\u6bcf\u4e2a\u5b57\u4e32\u4e4b\u540e\uff0c\u6e05\u7406\u8f93\u5165\u7f13\u51b2\u533a\uff0c\u4ee5\u8bfb\u53d6\u6574\u6570\n        std::cout &lt;&lt; \"Enter a positive integer: \";\n        std::cin &gt;&gt; number;\n\n        // \u6e05\u7406\u8f93\u5165\u7f13\u51b2\u533a\uff0c\u4ee5\u4fbf\u4e0b\u4e00\u6b21\u5faa\u73af\n        std::cin.ignore();\n\n        std::cout &lt;&lt; \"You entered integer: \" &lt;&lt; number &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"other/images/ioic_201/","title":"201 . \u7368\u4e00\u7121\u4e8c\u7684\u5340\u9593\u548c(\u310f\u3122\u02cb)","text":""},{"location":"other/images/ioic_201/#description","title":"Description","text":"<p>\u7d66\u5b9a\u6b63\u6574\u6578 \\(N\\)\uff0c\u5224\u65b7\u662f\u5426\u5b58\u5728\u9577\u5ea6\u70ba \\(N\\) \u7684\u5e8f\u5217 \\(\\left[a_1, a_2, \\ldots, a_N\\right] \\, (0 \\leq a_i &lt; 2^ {30})\\) \u4f7f\u5f97\u4efb\u610f\u975e\u7a7a\u5340\u9593 \\(\\left[a_l, a_{l + 1}, \\ldots, a_r\\right] \\, (1 \\leq l \\leq r \\leq N)\\) \u7684\u4f4d\u5143\u548c(\u310f\u3122\u02cb)\u548c(\u310f\u311c\u02ca) (bitwise AND sum) \u662f\u7368\u4e00\u7121\u4e8c\u7684\u3002\u5982\u679c\u6709\uff0c\u8acb\u69cb\u9020\u4efb\u610f\u6eff\u8db3\u9019\u500b\u689d\u4ef6\u7684\u5e8f\u5217\u3002</p> <p>\u63db\u53e5\u8a71\u8aaa\uff0c\u96c6\u5408</p> \\[ S = \\left\\lbrace a_l \\, \\&amp; \\, a_{l + 1} \\, \\&amp; \\cdots \\, \\&amp; \\, a_r \\, \\mid \\, l, r \\in \\mathbb{N}, 1 \\leq l \\leq r \\leq N\\right\\rbrace \\] <p>\u7684\u5927\u5c0f\u5fc5\u9808\u662f \\(\\displaystyle \\binom{N + 1}{2}\\)\u3002</p>"},{"location":"other/images/ioic_201/#input-format","title":"Input Format","text":"<p>\u6bcf\u4efd\u6e2c\u8a66\u6a94\u6848\u7684\u7b2c\u4e00\u884c\uff08\u4e5f\u662f\u552f\u4e00\u4e00\u884c\uff09\u6703\u5305\u542b\u6070\u4e00\u500b\u6574\u6578 \\(N\\)\uff0c\u4ee3\u8868\u9700\u8981\u69cb\u9020\u7684\u5e8f\u5217\u9577\u5ea6\u3002</p> <ul> <li>\\(1\\le N \\le 5000\\)</li> </ul>"},{"location":"other/images/ioic_201/#output-format","title":"Output Format","text":"<p>\u5c0d\u65bc\u6bcf\u7b46\u6e2c\u8a66\u8cc7\u6599\uff0c\u5982\u679c\u53ef\u4ee5\u69cb\u9020\u51fa\u6eff\u8db3\u689d\u4ef6\u7684\u5e8f\u5217\uff0c\u7b2c\u4e00\u884c\u8acb\u8f38\u51fa \"Yes\"\uff08\u4e0d\u542b\u5f15\u865f\uff09\uff1b\u53cd\u4e4b\u8f38\u51fa\"No\"\uff08\u4e0d\u542b\u5f15\u865f\uff09\u3002</p> <p>\u5982\u679c\u7b2c\u4e00\u884c\u7684\u8f38\u51fa\u662f\u70ba \"Yes\"\uff0c\u8acb\u8f38\u51fa\u7b2c\u4e8c\u884c \\(a_1, a_2, \\ldots, a_N\\) \u4ee3\u8868\u4f60\u6240\u69cb\u9020\u51fa\u4f86\u7684\u5e8f\u5217\u3002\u5169\u5169\u6574\u6578\u4e4b\u9593\u4ee5\u534a\u5f62\u7a7a\u767d\u5206\u958b\u3002</p>"},{"location":"other/images/ioic_201/#sample-input-1","title":"Sample Input 1","text":"<pre><code>1\n</code></pre>"},{"location":"other/images/ioic_201/#sample-output-1","title":"Sample Output 1","text":"<pre><code>Yes\n80000000\n</code></pre>"},{"location":"other/images/ioic_201/#sample-input-2","title":"Sample Input 2","text":"<pre><code>3\n</code></pre>"},{"location":"other/images/ioic_201/#sample-output-2","title":"Sample Output 2","text":"<pre><code>Yes\n525277394 749578766 471847610\n</code></pre>"},{"location":"other/images/ioic_201/#subtasks","title":"Subtasks","text":"No. Testdata Range Constraints Score 1 0~1 \u7bc4\u4f8b\u6e2c\u8cc7 0 2 0~25 \u7121\u7279\u5225\u9650\u5236 100"},{"location":"other/images/ioic_201/#testdata-and-limits","title":"Testdata and Limits","text":"No. Time Limit (ms) Memory Limit (VSS, KiB) Output Limit (KiB) Subtasks 0 1000 262144 65536 1 2 1 1000 262144 65536 1 2 2 1000 262144 65536 2 3 1000 262144 65536 2 4 1000 262144 65536 2 5 1000 262144 65536 2 6 1000 262144 65536 2 7 1000 262144 65536 2 8 1000 262144 65536 2 9 1000 262144 65536 2 10 1000 262144 65536 2 11 1000 262144 65536 2 12 1000 262144 65536 2 13 1000 262144 65536 2 14 1000 262144 65536 2 15 1000 262144 65536 2 16 1000 262144 65536 2 17 1000 262144 65536 2 18 1000 262144 65536 2 19 1000 262144 65536 2 20 1000 262144 65536 2 21 1000 262144 65536 2 22 1000 262144 65536 2 23 1000 262144 65536 2 24 1000 262144 65536 2 25 1000 262144 65536 2"},{"location":"other/images/ioic_301/","title":"301 . SOS","text":""},{"location":"other/images/ioic_301/#description","title":"Description","text":"<p>SOS\uff08\u6469\u65af\u96fb\u78bc\uff1a\u00b7\u00b7\u00b7---\u00b7\u00b7\u00b7\uff09\u662f\u76ee\u524d\u570b\u969b\u901a\u7528\u7684\u6469\u65af\u96fb\u78bc\u6c42\u6551\u8a0a\u865f\u3002 \u7b2c\u4e00\u6b21\u4f5c\u70ba\u4e00\u7a2e\u6a19\u6e96\u88ab\u63a1\u7528\u662f\u57281905\u5e744\u67081\u65e5\u7531\u5fb7\u570b\u653f\u5e9c\u898f\u5b9a\u7684\u95dc\u65bc\u7121\u7dda\u96fb\u7684\u7ba1\u7406\u689d\u4f8b\u4e2d\uff0c\u4e26\u65bc1906\u5e7411\u67083\u65e5\u6210\u70ba\u570b\u969b\u6a19\u6e96\uff08\u4e4b\u524d\u570b\u969b\u5e38\u7528CQD\u6c42\u6551\u8a0a\u865f\uff0c\u4f46\u4e26\u672a\u6210\u70ba\u6a19\u6e96\uff09\u3002\u57281908\u5e747\u67081\u65e5\u5f8c\u88ab\u5ee3\u6cdb\u63a1\u7528\u3002</p> <p>\u4e4b\u6240\u4ee5\u5236\u8a02\u65b0\u9047\u96e3\u8a0a\u865f\u70baSOS\uff0c\u662f\u56e0\u70ba\u7576\u6642\u7684\u6297\u5e72\u64fe\u6280\u8853\u5f88\u5dee\uff0c\u4e4b\u524d\u5e38\u7528\u7684CQD\u8a0a\u865f\uff0c\u7531\u65bc\u50b3\u9001\u78bc\u9577\uff0c\u800c\u4e14\u96fb\u78bc\u7684\u7b26\u865f\u4e0d\u4e00\u81f4\uff0c\u800cS\u8207O\u662f\u6469\u65af\u96fb\u78bc\u4e2d\u5c11\u6709\u7684\u9023\u7e8c\u78bc\u800c\u4e14\u5c0d\u64cd\u4f5c\u54e1\u4f86\u8aaa\u8f03\u6613\u4f7f\u7528\u3002\u800cSOS\u5728\u4e4b\u5f8c\u4e5f\u6210\u70ba\u4e00\u500b\u6613\u8a18\u3001\u5be6\u7528\u7684\u6c42\u6551\u65b9\u5f0f\u3002</p> <p>\u6709\u8a18\u9304\u7684\u9996\u6b21\u4f7f\u7528SOS\u6c42\u6551\u8a0a\u865f\u7684\u6642\u9593\u662f\u57281909\u5e748\u670811\u65e5\uff0c\u7576\u6642\u6c7d\u8239\u963f\u62c9\u5e15\u970d\u865f\uff08S.S. Arapahoe\uff09\u99db\u81f3\u5317\u5361\u7f85\u4f86\u7d0d\u5dde\u7684\u54c8\u7279\u62c9\u65af\u89d2\u5f8c\u71c3\u6cb9\u6b86\u76e1\uff0c\u767c\u51fa\u6551\u63f436\u5c0f\u6642\u5f8c\u88ab\u6551[1]\u3002</p> <p>\u5176\u4e2d\u4e00\u6b21\u8f03\u77e5\u540d\u7684\u5229\u7528SOS\u6c42\u6551\u8a0a\u865f\u5c31\u662f\u57281912\u5e744\u670814\u65e5\u665a\u4e0a\u82f1\u570b\u90f5\u8f2a\u9435\u9054\u5c3c\u865f\u5c07\u5728\u5317\u5927\u897f\u6d0b\u6c89\u6c92\u6642\u3002\u7576\u6642\u82f1\u570b\u4eba\u591a\u6578\u662f\u5229\u7528CQD\u6c42\u6551\u8a0a\u865f\uff0c\u4e0d\u904e\u7576\u665a\u4e5f\u7528\u4e86\u65b0\u7684SOS\u6c42\u6551\u8a0a\u865f\uff0c\u5e0c\u671b\u6709\u90f5\u8f2a\u4f86\u62ef\u6551\u4ed6\u5011\u3002\u4e0d\u904e\u8a72\u6c42\u6551\u8a0a\u865f\u76f4\u5230\u7b2c\u4e8c\u5929\u65e9\u4e0a\u624d\u88ab\u52a0\u5dde\u4eba\u865f\u6536\u5230\uff0c\u56e0\u70ba\u52a0\u5dde\u4eba\u865f\u7684\u96fb\u5831\u54e1\u95dc\u4e86\u96fb\u5831\u6a5f\u4e0b\u73ed\u7761\u89ba\u53bb\u4e86\u3002\u800c\u9435\u9054\u5c3c\u865f\u7684\u7121\u7dda\u96fb\u9996\u5e2d\u5b98\u54e1\u5091\u514b\u00b7\u83f2\u5229\u666e\u8d77\u521d\u4e00\u76f4\u5728\u767c\u9001\u50b3\u7d71\u7684CQD\u9047\u96e3\u8a0a\u865f\uff0c\u76f4\u5230\u4e0b\u7d1a\u7121\u7dda\u96fb\u64cd\u4f5c\u54e1\u54c8\u7f85\u5fb7\u00b7\u5e03\u840a\u5fb7\u5efa\u8b70\u4ed6\uff1a\u300c\u767c\u9001SOS\u5427\uff0c\u9019\u662f\u65b0\u7684\u547c\u53eb\u8a0a\u865f\uff0c\u9019\u4e5f\u53ef\u80fd\u662f\u4f60\u6700\u5f8c\u7684\u6a5f\u6703\u4f86\u767c\u9001\u5b83\u4e86\uff01\u300d\u7136\u5f8c\u83f2\u5229\u666e\u624d\u5728\u50b3\u7d71\u7684CQD\u6c42\u6551\u8a0a\u865f\u4e2d\u593e\u96dcSOS\u8a0a\u865f\u3002</p> <p>\u7531\u65bc\u73fe\u4ee3\u7121\u7dda\u96fb\u901a\u8a0a\u6280\u8853\u7684\u767c\u5c55\uff0c\u8239\u8236\u8207\u822a\u7a7a\u5668\u8d8a\u4f86\u8d8a\u5c11\u4f7f\u7528\u6469\u65af\u96fb\u78bc\u901a\u8a0a\uff0c\u56e0\u6b64\u9664\u4e86\u696d\u9918\u7121\u7dda\u96fb\u5916\uff0cSOS\u5df2\u9010\u6f38\u505c\u7528\uff0c\u6539\u4ee5\u570b\u969b\u6d77\u4e8b\u885b\u661f\u96fb\u5b50\u901a\u4fe1\u88dd\u7f6e\u7684\u5168\u7403\u6d77\u4e0a\u9047\u96aa\u53ca\u5b89\u5168\u7cfb\u7d71\uff08GMDSS\uff09\u4ee3\u66ff\u3002</p> <p>-\u51fa\u81ea\u7dad\u57fa\u767e\u79d1</p> <p>\u4ee5\u4e0a\u662f SOS \u7684\u4ecb\u7d39\uff0c\u4f46\u662f\u8ddf\u672c\u984c\u6c92\u6709\u4efb\u4f55\u95dc\u806f\u3002</p> <p>\u6709\u4e00\u500b\u795e\u5947\u7684\u51fd\u6578 \\(f\\)\uff0c\u5b9a\u7fa9\u57df\u662f \\(0\\) \u5230 \\(n-1\\) \u7684\u6574\u6578\u3002 \u5c0d\u65bc\u4e00\u500b\u975e\u8ca0\u6574\u6578 \\(x\\)\uff0c\u5b9a\u7fa9</p> \\[ f(x) = a_x + \\sum _ {0 \\leq y &lt; x \\ , \\ x \\ AND \\ y = y} \\left( \\bigoplus _ {0 \\leq z \\ , \\ y \\ AND \\ z = z} f(z) \\right) \\] <p>\u5176\u4e2d\u5c0d\u65bc\u4e00\u500b\u591a\u91cd\u96c6\u5408 \\(S\\)\uff0c\\(\\bigoplus_{x \\in S} S\\) \u4ee3\u8868\u6240\u6709\u6578\u5b57\u7684\u4f4d\u5143\u7570\u6216 (xor) \u548c\u3002 \\(a_x\\) \u662f\u4e00\u500b\u7d66\u5b9a\u7684\u6578\u503c\uff0c\\(x \\ AND \\ y\\) \u4ee3\u8868 \\(x\\) \u8ddf \\(y\\) \u5169\u500b\u6578\u5b57\u7684\u4f4d\u5143 AND\u3002\u8f38\u51fa \\(f(n-1)\\) \u6a21 \\(2^{30}\\) \u7684\u6578\u503c\u3002</p>"},{"location":"other/images/ioic_301/#input-format","title":"Input Format","text":"<p>\u7b2c\u4e00\u884c\u6709\u4e00\u500b\u6578\u5b57 \\(n\\) \u7b2c\u4e8c\u884c\u6709 \\(n\\) \u500b\u6578\u5b57 \\(a_0, a_1, \\cdots, a_{n-1}\\) \u4fdd\u8b49 \\(1 \\leq n \\leq 2 ^  {20}, 0 \\leq a_i &lt; 2^ {30}\\)</p>"},{"location":"other/images/ioic_301/#output-format","title":"Output Format","text":"<p>\u8f38\u51fa\u4e00\u884c\uff0c\u70ba \\(f(n-1)\\) \u6a21 \\(2^{30}\\) \u7684\u6578\u503c\u3002</p>"},{"location":"other/images/ioic_301/#sample-input-1","title":"Sample Input 1","text":"<pre><code>4\n2 1 3 2\n</code></pre>"},{"location":"other/images/ioic_301/#sample-output-1","title":"Sample Output 1","text":"<pre><code>12\n</code></pre>"},{"location":"other/images/ioic_301/#subtasks","title":"Subtasks","text":"No. Testdata Range Constraints Score 1 0 \u7bc4\u4f8b\u6e2c\u8cc7 0 2 0~10 \\(n \\le 2^{10}\\) 25 3 11~25 \u7121\u5176\u4ed6\u9650\u5236 75"},{"location":"other/images/ioic_301/#testdata-and-limits","title":"Testdata and Limits","text":"No. Time Limit (ms) Memory Limit (VSS, KiB) Output Limit (KiB) Subtasks 0 1500 524288 65536 1 2 1 1500 524288 65536 2 2 1500 524288 65536 2 3 1500 524288 65536 2 4 1500 524288 65536 2 5 1500 524288 65536 2 6 1500 524288 65536 2 7 1500 524288 65536 2 8 1500 524288 65536 2 9 1500 524288 65536 2 10 1500 524288 65536 2 11 1500 524288 65536 3 12 1500 524288 65536 3 13 1500 524288 65536 3 14 1500 524288 65536 3 15 1500 524288 65536 3 16 1500 524288 65536 3 17 1500 524288 65536 3 18 1500 524288 65536 3 19 1500 524288 65536 3 20 1500 524288 65536 3 21 1500 524288 65536 3 22 1500 524288 65536 3 23 1500 524288 65536 3 24 1500 524288 65536 3 25 1500 524288 65536 3"},{"location":"other/images/ioic_305/","title":"305 . \u62ec\u865f\u570b","text":""},{"location":"other/images/ioic_305/#description","title":"Description","text":"<p>\u62ec\u865f\u570b\u662f\u4e00\u500b\u5947\u602a\u7684\u570b\u5bb6\uff0c\u90a3\u88e1\u7684\u4eba\u6c11\u975e\u5e38\u559c\u6b61\u5de6\u5c0f\u62ec\u865f \\(\\texttt{(}\\) \u4ee5\u53ca\u53f3\u5c0f\u62ec\u865f \\(\\texttt{)}\\)\uff0c\u56e0\u6b64\u5169\u500b\u62ec\u865f\u570b\u7684\u4eba\u6c11\u5f88\u5e38\u4f7f\u7528\u62ec\u865f\u8a9e\u4f5c\u70ba\u6e9d\u901a\u7684\u65b9\u5f0f\u3002\u8209\u4f8b\u4f86\u8aaa\uff1a</p> <p>\u300c\\(\\texttt{))(()()}\\)\u300d</p> <p>\u300c\\(\\texttt{)()(()()()}\\)\u300d</p> <p>\u4e0a\u8ff0\u5448\u73fe\u4e86\u5169\u500b\u4eba\u7684\u5c0d\u8a71\uff0c\u5176\u4e2d\u4e00\u500b\u4eba\u5728\u819c\u62dc\uff0c\u53e6\u4e00\u500b\u4eba\u5728\u88dd\u5f31\u3002</p> <p>\u5728\u90a3\u88e1\u7684\u7af6\u7a0b\u9078\u624b\u4e5f\u559c\u6b61\u4f7f\u7528\u62ec\u865f\u8a9e\u4f86\u8868\u793a\u4e00\u9053\u984c\u76ee\uff0c\u50cf\u662f\uff1a</p> <p>\u300c\\(\\texttt{)()))(()())))(()())))()()()))()()))()((()))()))))((())}\\)\u300d</p> <p>\u7d93\u7531\u7ffb\u8b6f\u5f8c\uff0c\u9019\u9053\u984c\u76ee\u7684\u610f\u601d\u662f\uff1a</p> <p>\u300c\u7d66\u5b9a\u4e00\u500b\u7531 \\(\\texttt{()}\\) \u7d44\u6210\u7684\u5b57\u4e32\uff0c\u8acb\u554f\u5b83\u6240\u6709\u5b50\u5b57\u4e32\u7684\u6700\u9577\u5408\u6cd5\u62ec\u865f\u5b50\u5e8f\u5217\u9577\u5ea6\u7e3d\u548c\u70ba\u4f55\uff1f\u300d</p> <p>\u4f60\u4e0d\u60f3\u8f38\u7d66\u62ec\u865f\u570b\u7684\u7af6\u7a0b\u9078\u624b\uff0c\u56e0\u6b64\u8acb\u60f3\u8fa6\u6cd5\u89e3\u6c7a\u9019\u500b\u554f\u984c\u3002</p> <p>\u4e00\u500b\u62ec\u865f\u5b57\u4e32\u70ba\u5408\u6cd5\u62ec\u865f\u82e5\u5b83\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6\uff1a</p> <ul> <li> <p>\u8a72\u5b57\u4e32\u7684 \\(\\texttt{(}\\) \u8207 \\(\\texttt{)}\\) \u51fa\u73fe\u6b21\u6578\u76f8\u540c</p> </li> <li> <p>\u5c0d\u65bc\u8a72\u5b57\u4e32\u7684\u4efb\u610f\u524d\u7db4\uff0c\u5176 \\(\\texttt{(}\\) \u7684\u6578\u91cf\u7686\u4e0d\u5c0f\u65bc \\(\\texttt{)}\\)</p> </li> </ul> <p>\u4e00\u500b\u62ec\u865f\u5b57\u4e32 \\(s_1s_2, \\ldots, s_N\\) \u7684\u6700\u9577\u5408\u6cd5\u62ec\u865f\u5b50\u5e8f\u5217\u70ba\u6700\u9577\u7684\u5e8f\u5217 \\(a_1 &lt; a_2 &lt; \\ldots &lt; a_K\\) \u4f7f \\(s_{a_1}s_{a_2}, \\ldots, s_{a_K}\\) \u662f\u4e00\u500b\u5408\u6cd5\u62ec\u865f\u3002</p> <p>\u4e00\u500b\u9577\u5ea6\u70ba \\(N\\) \u7684\u5b57\u4e32\u6709 \\(\\binom{N + 1}{2}\\) \u500b\u5b50\u5b57\u4e32\uff0c\u5c0d\u65bc\u4efb\u610f \\(1 \\leq l \\leq r \\leq N\\)\uff0c\\(s_ls_{l + 1}, \\ldots, s_r\\) \u7686\u70ba\u5b57\u4e32 \\(s\\) \u7684\u5b50\u5b57\u4e32\u3002</p>"},{"location":"other/images/ioic_305/#input-format","title":"Input Format","text":"<p>\u8f38\u5165\u7b2c\u4e00\u884c\u6709\u4e00\u500b\u6574\u6578 \\(N\\)\uff0c\u4ee3\u8868\u62ec\u865f\u5b57\u4e32\u7684\u9577\u5ea6\u3002</p> <p>\u8f38\u5165\u7b2c\u4e8c\u884c\u6709\u4e00\u500b\u7531 \\(\\texttt{(}\\) \u8207 \\(\\texttt{)}\\) \u7d44\u6210\u7684\u5b57\u4e32 \\(S\\)\u3002</p> <ul> <li> <p>\\(1 \\leq N \\leq 2 \\times 10^ 5\\)</p> </li> <li> <p>\\(|S| = N\\)</p> </li> <li> <p>\\(S_i \\in \\lbrace\\texttt{(}, \\texttt{)}\\rbrace\\)</p> </li> </ul>"},{"location":"other/images/ioic_305/#output-format","title":"Output Format","text":"<p>\u8acb\u8f38\u51fa\u4e00\u884c\uff0c\u4e0a\u9762\u6709\u4e00\u500b\u6578\u5b57\u4ee3\u8868\u7b54\u6848\u3002</p>"},{"location":"other/images/ioic_305/#sample-input-1","title":"Sample Input 1","text":"<pre><code>4\n()()\n</code></pre>"},{"location":"other/images/ioic_305/#sample-output-1","title":"Sample Output 1","text":"<pre><code>12\n</code></pre>"},{"location":"other/images/ioic_305/#sample-input-2","title":"Sample Input 2","text":"<pre><code>8\n)))(((((\n</code></pre>"},{"location":"other/images/ioic_305/#sample-output-2","title":"Sample Output 2","text":"<pre><code>0\n</code></pre>"},{"location":"other/images/ioic_305/#sample-input-3","title":"Sample Input 3","text":"<pre><code>7\n)(()))(\n</code></pre>"},{"location":"other/images/ioic_305/#sample-output-3","title":"Sample Output 3","text":"<pre><code>36\n</code></pre>"},{"location":"other/images/ioic_305/#hints","title":"Hints","text":"<p>\u4ee4 \\(f(l,r)\\) \u70ba \\(S_lS_{l + 1}, \\ldots ,S_r\\) \u7684\u6700\u9577\u5408\u6cd5\u62ec\u865f\u5b50\u5e8f\u5217\u9577\u5ea6\uff0c\u4ee5\u4e0b\u70ba\u7bc4\u4f8b\u6e2c\u8cc7\u4e00\u4e2d\u6240\u6709\u53ef\u80fd\u7684\u51fd\u6578\u503c\uff1a</p> <ul> <li> <p>\\(f(1,1)=0\\)</p> </li> <li> <p>\\(f(2,2)=0\\)</p> </li> <li> <p>\\(f(3,3)=0\\)</p> </li> <li> <p>\\(f(4,4)=0\\)</p> </li> <li> <p>\\(f(1,2)=2\\)</p> </li> <li> <p>\\(f(2,3)=0\\)</p> </li> <li> <p>\\(f(3,4)=2\\)</p> </li> <li> <p>\\(f(1,3)=2\\)</p> </li> <li> <p>\\(f(2,4)=2\\)</p> </li> <li> <p>\\(f(1,4)=4\\)</p> </li> </ul> <p>\u800c\u7b54\u6848\u70ba\u6240\u6709\u6578\u503c\u52a0\u7e3d\uff0c\u4e5f\u5c31\u662f \\(12\\)\u3002</p>"},{"location":"other/images/ioic_305/#subtasks","title":"Subtasks","text":"No. Testdata Range Constraints Score 1 0~2 \u7bc4\u4f8b\u6e2c\u8cc7 0 2 3~35 \\(N \\le 2000\\) 40 3 3~75 \u7121\u5176\u4ed6\u9650\u5236 60"},{"location":"other/images/ioic_305/#testdata-and-limits","title":"Testdata and Limits","text":"No. Time Limit (ms) Memory Limit (VSS, KiB) Output Limit (KiB) Subtasks 0 1000 524288 65536 1 1 1000 524288 65536 1 2 1000 524288 65536 1 3 1000 524288 65536 2 3 4 1000 524288 65536 2 3 5 1000 524288 65536 2 3 6 1000 524288 65536 2 3 7 1000 524288 65536 2 3 8 1000 524288 65536 2 3 9 1000 524288 65536 2 3 10 1000 524288 65536 2 3 11 1000 524288 65536 2 3 12 1000 524288 65536 2 3 13 1000 524288 65536 2 3 14 1000 524288 65536 2 3 15 1000 524288 65536 2 3 16 1000 524288 65536 2 3 17 1000 524288 65536 2 3 18 1000 524288 65536 2 3 19 1000 524288 65536 2 3 20 1000 524288 65536 2 3 21 1000 524288 65536 2 3 22 1000 524288 65536 2 3 23 1000 524288 65536 2 3 24 1000 524288 65536 2 3 25 1000 524288 65536 2 3 26 1000 524288 65536 2 3 27 1000 524288 65536 2 3 28 1000 524288 65536 2 3 29 1000 524288 65536 2 3 30 1000 524288 65536 2 3 31 1000 524288 65536 2 3 32 1000 524288 65536 2 3 33 1000 524288 65536 2 3 34 1000 524288 65536 2 3 35 1000 524288 65536 2 3 36 1000 524288 65536 3 37 1000 524288 65536 3 38 1000 524288 65536 3 39 1000 524288 65536 3 40 1000 524288 65536 3 41 1000 524288 65536 3 42 1000 524288 65536 3 43 1000 524288 65536 3 44 1000 524288 65536 3 45 1000 524288 65536 3 46 1000 524288 65536 3 47 1000 524288 65536 3 48 1000 524288 65536 3 49 1000 524288 65536 3 50 1000 524288 65536 3 51 1000 524288 65536 3 52 1000 524288 65536 3 53 1000 524288 65536 3 54 1000 524288 65536 3 55 1000 524288 65536 3 56 1000 524288 65536 3 57 1000 524288 65536 3 58 1000 524288 65536 3 59 1000 524288 65536 3 60 1000 524288 65536 3 61 1000 524288 65536 3 62 1000 524288 65536 3 63 1000 524288 65536 3 64 1000 524288 65536 3 65 1000 524288 65536 3 66 1000 524288 65536 3 67 1000 524288 65536 3 68 1000 524288 65536 3 69 1000 524288 65536 3 70 1000 524288 65536 3 71 1000 524288 65536 3 72 1000 524288 65536 3 73 1000 524288 65536 3 74 1000 524288 65536 3 75 1000 524288 65536 3"},{"location":"problem/construct/","title":"\u69cb\u9020\u984c","text":"Atcoder arc163 C. Harmonic Mean <p>\\(T\\) \u7b46\u8a62\u554f\uff0c\u6bcf\u6b21\u8f38\u5165 \\(N\\)\uff0c\u5c0d\u65bc\u6bcf\u6b21\u8a62\u554f\uff0c\u69cb\u9020\u51fa \\(A=(A_1,A_2,\\ldots ,A_N)\\)\uff0c\u4e26\u7b26\u5408\u4ee5\u4e0b\u689d\u4ef6 :</p> <ul> <li> <p>\\(\\displaystyle \\sum\\limits_{i=1}^{N}\\frac{1}{A_i}=1\\)</p> </li> <li> <p>\u5168\u90e8\u90fd\u4e0d\u76f8\u540c</p> </li> <li> <p>\\(1\\le A_i \\le 10^9(1\\le i\\le N)\\)</p> </li> </ul> <p>\\(1\\le T\\le 500,1\\le N\\le 500\\)</p> \u601d\u8def <p>\\(\\Rightarrow\\) \u570b\u4e2d\u5c0f\u6578\u7af6\u5e38\u7528\u624b\u6cd5</p> <p>\\(\\begin{cases}\\displaystyle 1-\\frac{1}{2}+\\frac{1}{2}-\\frac{1}{3}+ \\ldots + \\frac{1}{N-1}-\\frac{1}{N}+\\frac{1}{N}=1 \\\\ \\displaystyle \\frac{1}{i-1}-\\frac{1}{i}=\\frac{1}{(i-1)\\times(i)}\\end{cases}\\)</p> <p>\\(\\displaystyle \\frac{1}{1\\times2}+\\frac{1}{2\\times3}+\\ldots +\\frac{1}{(N-1\\times N)}+\\frac{1}{N}=1\\)</p> <p>\u4f46\u82e5 \\(\\displaystyle \\frac{1}{N}=\\frac{1}{(i-1)\\times i}\\) \u9019\u6a23\u5c31\u6703\u8207\u524d\u9762\u7684\u6578\u5b57\u6709\u91cd\u8907 ex : </p> <p>\\(\\displaystyle \\frac{1}{1\\times2}+\\frac{1}{2\\times3}+\\frac{1}{3\\times4}+\\frac{1}{4\\times5}+\\frac{1}{5\\times6}+\\frac{1}{6}\\)</p> <p>\u89e3\u6c7a\u65b9\u6cd5 :</p> <p>\u8003\u616e\u5230 \\(2,6,12,\\ldots\\) \u5dee\u8ddd\u6210\u905e\u589e\uff0c\u6240\u4ee5\u82e5 \\(\\displaystyle \\frac{1}{N}=\\frac{1}{(i-1)\\times i}\\)\uff0c\\(\\displaystyle \\frac{1}{N-1}\\) \u5fc5\u6703\u5408\u6cd5\uff0c\u6240\u4ee5\u5148\u8a2d\u5b9a \\(\\displaystyle \\frac{1}{1\\times2}+\\frac{1}{2\\times3}\\ldots \\frac{1}{(N-2)\\times (N-1)}+\\frac{1}{N-1}+x=1\\)</p> <p>\u5c07\u524d\u534a\u90e8\u548c \\(x\\) \u770b\u6210\u5169\u90e8\u5206\uff0c\u82e5\u524d\u5f8c\u5404 \\(\\displaystyle \\frac{1}{2}\\) \u5c31\u6703\u5408\u6cd5\u3002</p> code <pre><code>#pragma GCC optimize(\"Ofast,no-stack-protector\")\n#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\nusing namespace std;\n\nconst int MAXN=2e5+10,INF=1e18;\nint t,n;\n\nsigned main(){\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    cin&gt;&gt;t;\n    while(t--){\n        cin&gt;&gt;n;\n        if(n==2) cout&lt;&lt;\"No\\n\";\n        else{\n            cout&lt;&lt;\"Yes\\n\";\n            int x=sqrt(n);\n            if(n==x*(x+1)){\n                for(int i=1;i&lt;n-1;i++) cout&lt;&lt;i*(i+1)*2&lt;&lt;\" \";\n                cout&lt;&lt;(n-1)*2&lt;&lt;\" \";\n                cout&lt;&lt;2&lt;&lt;\"\\n\";\n            }\n            else{\n                for(int i=1;i&lt;n;i++) cout&lt;&lt;i*(i+1)&lt;&lt;\" \";\n                cout&lt;&lt;n&lt;&lt;\"\\n\";\n            }\n        }\n    }\n}\n</code></pre> 2022 TOI pD. 2022 <p>\u7d66\u4f60\u5169\u500b\u6b63\u6574\u6578 \\(x, y\\)\uff0c\u5b9a\u7fa9\u4e00\u500b\u300c\u597d\u7684\u6578\u5b57\u300d\uff1a</p> <ul> <li> <p>\u53ea\u7531 \\(0\\) \u548c \\(2\\) \u7d44\u6210\uff0c\u6070\u6709 \\(x\\) \u500b \\(0\\) \u548c \\(y\\) \u500b \\(2\\)</p> </li> <li> <p>\u662f \\(22\\) \u7684\u500d\u6578</p> </li> <li> <p>\u53ef\u4ee5\u6709 leading zeroes</p> </li> </ul> <p>\u8acb\u554f\u7b2c\u4e8c\u5927\u548c\u7b2c\u4e8c\u5c0f\u7684\u300c\u597d\u7684\u6578\u5b57\u300d\uff1f</p> <p>\\(x,y \\le 100000\\)</p> 2024 TOI \u6a21\u64ec\u8cfd \u6e2c\u8a66 pE. \u5b64\u7368\u7684\u5409\u59c6 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 a\uff0c\u5c07\u5176 reorder \u4f7f \\(\\min \\limits_{i=2\\ldots n} \\{ a_i - a_{i - 1}\\}\\) \u76e1\u91cf\u5927\u3002\u8f38\u51fa reorder \u5f8c\u7684 a\u3002</p> <p>\\(n\\le 2\\times 10^5, -10^9\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u6253\u8868\u89c0\u5bdf\u3002</p> <p>\u3010subtask 1 - n \u662f\u5076\u6578\u3011:</p> <p>\u5047\u8a2d \\(a_1, \\ldots ,a_n\\) \u5df2\u7d93\u6392\u5e8f\u597d\uff0c\u90a3\u7b54\u6848\u5c31\u662f \\(a_{\\frac{n}{2}+1}, a_1,a_{\\frac{n}{2}+2}, a_2,a_{\\frac{n}{2}+3}, a_3,\\ldots,a_n,a_{n/2}\\)\u3002\u4e5f\u5c31\u662f\u6bcf\u4e00\u9805\u8ddf\u4ed6\u5f8c\u9762 n/2 \u7684\u90a3\u4e00\u9805\u4e00\u7d44\u3002</p> <p>\u4e4b\u6240\u4ee5\u6703\u60f3\u5230\u8981\u9019\u6a23\u69cb\u9020\uff0c\u662f\u56e0\u70ba\u6211\u5011\u6703\u60f3\u8981\u8b93\u5728\u91cd\u65b0\u6392\u5217\u5f8c\u7684\u76f8\u9130\u5169\u500b\u6578\u5b57\uff0c\u5728\u539f\u4f86\u6392\u5e8f\u597d\u7684\u6578\u5217\u88e1\u8ddd\u96e2\u6700\u8fd1\u7684\u90a3\u5169\u500b\u76e1\u53ef\u80fd\u9060\uff0c\u800c\u9019\u6a23\u69cb\u9020\u5c31\u80fd\u4f7f\u5f97\u6b64\u91cd\u65b0\u6392\u5217\u88e1\u76f8\u9130\u5169\u500b\u6578\u5b57\u5728\u6392\u5e8f\u597d\u7684\u6578\u5217\u88e1\u7de8\u865f\u5dee\u81f3\u5c11\u90fd\u9054\u5230 n/2\u3002</p> <p>\u53c3\u8003: https://hackmd.io/@aacp/aatoi2024_pre</p> 2024 TOI \u6a21\u64ec\u8cfd I pA. \u6309\u8b9a\u6578\u8207\u8ffd\u8e64\u6578\u7684\u795e\u79d8\u6311\u6230 <p>\u7d66 \\(x,y\\)\uff0c\u554f \\(x\\) \u6700\u5c11\u8981\u52a0\u591a\u5c11\u624d\u80fd\u8b8a\u6210 \\(y\\) \u7684\u91cd\u6392\u5217</p> <p>\\(x,y\\) \u4f4d\u6578\u76f8\u540c\uff0c\u4e14\u4f4d\u6578\u90fd \\(\\le 10^6\\)</p> \u601d\u8def <p>\u3010\u66b4\u529b\u7684 O(n^2)\u3011</p> <p>\u4ee4\u7b54\u6848\u70ba \\(a\\)\u3002\u56e0\u70ba\u8981\u4f7f \\(a\\) \u7a0d\u5fae\u6bd4 \\(x\\) \u5927\uff0c\u6240\u4ee5\u6211\u5011\u6703\u60f3\u8aaa\u6709\u6c92\u6709\u8fa6\u6cd5\u8b93 \\(a\\) \u8ddf \\(x\\) \u7684\u524d\u7db4\u76e1\u91cf\u4e00\u6a23\uff0c\u6240\u4ee5\u6211\u5011\u5f9e\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u958b\u59cb\u679a\u8209\uff0c\u770b \\(a\\) \u7684\u524d \\(i\\) \u4f4d\u80fd\u5426\u8ddf \\(x\\) \u7684\u524d \\(i\\) \u4f4d\u76f8\u540c\uff0c\u6211\u5011\u53ef\u4ee5\u8b93 \\(y\\) \u88e1\u9762\u9084\u6c92\u6709\u586b\u4e0a\u53bb\u7684\u6578\u5b57\u5927\u5230\u5c0f\u4f9d\u5e8f\u586b\u5728 \\(a\\) \u7684\u5f8c\u9762\uff0c\u770b\u80fd\u5426\u4f7f \\(a &gt; x\\)\uff0c\u6240\u4ee5\u9019\u500b\u6aa2\u67e5\u662f \\(O(n)\\) \u7684\uff0c\u56e0\u70ba\u9084\u8981\u679a\u8209\u4f4d\u6578\uff0c\u6240\u4ee5\u7e3d\u6642\u9593\u8907\u96dc\u5ea6\u662f \\(O(n^2)\\)\u3002</p> <p>\u3010\u8caa\u5fc3 O(n)\u3011</p> <p>\u8003\u616e\u8caa\u5fc3\uff0c\u6211\u5011\u5f9e\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u958b\u59cb\u679a\u8209\uff0c\u770b \\(a[i]\\) \u662f\u5426\u80fd\u586b\u4e00\u500b\u5927\u65bc\u7b49\u65bc \\(x[i]\\) \u7684\u6578\uff0c\u53ef\u4ee5\u7684\u8a71\u5c31\u586b\u9032\u53bb\uff0c\u7136\u5f8c\u6211\u5011\u518d\u6aa2\u67e5 \\(a[i]\\) \u662f\u5426\u80fd\u586b\u4e00\u500b\u5927\u65bc \\(x[i]\\) \u7684\u6578\uff0c\u5982\u679c\u53ef\u4ee5\u7684\u8a71\u518d\u505a\u500b\u6a19\u8a18\uff0c\u7e7c\u7e8c\u6aa2\u67e5\u4e00\u4e0b\u4f4d\uff0c\u82e5\u6211\u5011\u767c\u73fe\u6c92\u8fa6\u6cd5\u586b\u6642\uff0c\u6211\u5011\u5c31\u53bb\u627e\u6700\u8fd1\u7684\u6a19\u8a18\uff0c\u56de\u5230\u90a3\u500b\u6642\u4ee3\uff0c\u5f8c\u9762\u7684\u6309\u7167 Greedy \u586b\u5c31\u597d\u3002</p> <p>\u3010\u8caa\u5fc3\u53e6\u89e3 O(n)\u3011</p> <p>\u8003\u616e\u8caa\u5fc3\uff0c\u6211\u5011\u5f9e\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u958b\u59cb\u679a\u8209\uff0cprefix \u53ef\u4ee5\u4e00\u6a23\u5c31\u8981\u76e1\u91cf\u5148\u8b93 prefix \u4e00\u6a23\uff0c\u7576 prefix \u4e0d\u80fd\u4e00\u6a23\u7684\u6642\u5019\uff0cgreedy \u627e\u6bd4 prefix \u5927\u7684\u6700\u5c0f\u6578\u5b57\uff0c\u73fe\u5728\u7684\u91cd\u9ede\u5c31\u662f\u6aa2\u67e5\u5c0d\u65bc\u4e00\u500b prefix\uff0c\u5f8c\u9762\u9084\u6709\u6c92\u6709\u8fa6\u6cd5\u586b\uff0c\u5176\u5be6\u6211\u5011\u53ea\u8981\u53bb\u7d00\u9304\u6bcf\u500b index \u5f8c\u9762\u6709\u5e7e\u500b\u8ddf\u4ed6\u4e00\u6a23\u4e14\u9023\u7e8c\u7684\u4e00\u6bb5\uff0c\u6211\u5011\u5c31\u80fd\u53bb\u6bd4\u8f03 a \u8ddf x \u5982\u679c\u6700\u5927\u7684\u6578\u5b57\u4e00\u6a23\uff0c\u800c\u4e14\u5728 x \u7684\u7b2c\u4e00\u4f4d\uff0c\u90a3\u5c31\u67e5\u8868\u770b x \u7684\u9019\u4e00\u6bb5\u5230\u5e95\u6709\u5e7e\u500b\u6700\u5927\u7684\u6578\u5b57\uff0c\u5982\u679c x \u6bd4\u8f03\u591a\uff0c\u90a3\u62b1\u6b49 a \u76ee\u524d\u9019\u4f4d\u5c31\u53ea\u80fd\u586b\u6bd4 x \u9019\u4f4d\u5927\u7684\u6700\u5c0f\u6578\u5b57\uff0c\u7136\u5f8c\u5f8c\u9762\u5c0f\u5230\u5927\u586b\uff1b\u5982\u679c a \u6bd4\u8f03\u591a\uff0c\u90a3\u5c31 prefix \u5c31\u56fa\u5b9a\u4e86\uff0c\u53ef\u4ee5\u5f80\u4e0b\u4e00\u4f4d\u770b\uff1b\u5982\u679c\u6578\u91cf\u4e00\u6a23\uff0c\u90a3\u5c31\u770b x \u6700\u5927\u7684\u6578\u5b57\u90a3\u4e00\u6bb5\u5f8c\u9762\u63a5\u7684\u662f\u4ec0\u9ebc\u6578\u5b57\uff0c\u5982\u679c\u9084\u662f\u8ddf a \u6392\u9664\u6700\u5927\u6578\u5b57\u4ee5\u5916\u7684\u6700\u5927\u6578\u5b57\u4e00\u6a23\uff0c\u90a3\u5c31\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u7e7c\u7e8c\u6aa2\u67e5\uff0c\u76f4\u5230\u6bd4\u8f03\u51fa\u4f86\u70ba\u6b62\u3002</p> <p>\u3010\u8caa\u5fc3\u53e6\u89e3 O(n)\u3011</p> <p>\u4f46\u5982\u679c\u6211\u5011\u8003\u616e\u5f9e\u5f8c\u9762\u679a\u8209\u56de\u4f86\uff0c\u4e5f\u5c31\u662f\u5148\u5047\u8a2d \\(a=x\\)\uff0c\u7136\u5f8c\u5f9e\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u770b\uff0c\u5982\u679c \\(y\\) \u662f\u6c92\u6709\u8fa6\u6cd5\u8ca0\u8377\u7576\u524d \\(a\\) \u88e1\u9762\u7684\u6578\u5b57\uff0c\u90a3\u5c31\u628a \\(a\\) \u7684\u6700\u4f4e\u4f4d\u62d4\u6389\uff0c\u76f4\u5230 \\(y\\) \u6709\u8fa6\u6cd5\u8ca0\u8377\uff0c\u518d\u4f86\uff0c\u6211\u5011\u770b\u662f\u5426\u80fd\u5f9e \\(y\\) \u88e1\u9762\u9084\u6c92\u653e\u7684\u6578\u5b57\u6311\u51fa\u4e00\u500b\u6bd4 \\(x[i]\\) \u5927\u7684\u6578\u5b57\uff0c\u5982\u679c\u6709\u8fa6\u6cd5\uff0c\u6211\u5011\u5c31\u9078\u6700\u5c0f\u7684\u90a3\u500b\uff0c\u63a5\u5728 \\(a\\) \u7684\u5c3e\u7aef\uff0c\u7136\u5f8c\u4e4b\u5f8c\u7684\u90e8\u5206\u56e0\u70ba\u524d\u7db4\u5df2\u7d93\u6bd4 \\(x\\) \u5927\u4e86\u6240\u4ee5\u53ef\u4ee5\u96a8\u4fbf\u586b\uff0c\u4f46\u53c8\u8981\u6700\u5c0f\u5316\u6240\u4ee5\u6211\u5011\u9078\u64c7\u5c0f\u5230\u5927\u586b\u3002\u4e5f\u5c31\u662f\u6211\u5011 \\(a\\) \u7684\u7d44\u6210\u5c31\u6703\u662f\u300c\\(x\\) \u7684\u524d\u7db4\u300d+\u300c\u6bd4 \\(x[i]\\) \u5927\u7684\u6578\u5b57\u300d+\u300c\\(y\\) \u5269\u4e0b\u7684\u5c0f\u5230\u5927\u586b\u300d\u3002</p> <p>\u4f8b\u5982 \\(x=1198,y=1197\\)\uff0c\u6703\u4f9d\u5e8f\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ul> <li> <p>\\(a=1198\\)\uff0c\u767c\u73fe \\(y\\) \u662f\u6c92\u6709\u8fa6\u6cd5\u8ca0\u8377\uff0c\u62d4\u6389\u6700\u5f8c\u4e00\u4f4d</p> </li> <li> <p>\\(a=119\\space \\_\\)\uff0c\\(y\\) \u6709\u8fa6\u6cd5\u8ca0\u8377\uff0c\\(y\\) \u5269\u4e0b\u7684\u6578\u5b57\u6709 \\(\\{7\\}\\)\uff0c\u4f46\u6c92\u6709\u5927\u65bc \\(8\\) \u7684\u6240\u4ee5\u4e0d\u80fd\u586b</p> </li> <li> <p>\\(a=11\\space \\_\\space \\_\\)\uff0c\\(y\\) \u6709\u8fa6\u6cd5\u8ca0\u8377\uff0c\\(y\\) \u5269\u4e0b\u7684\u6578\u5b57\u6709 \\(\\{7,9 \\}\\)\uff0c\u4f46\u6c92\u6709\u5927\u65bc \\(9\\) \u7684\u6240\u4ee5\u4e0d\u80fd\u586b</p> </li> <li> <p>\\(a=1\\space \\_\\space \\_\\space \\_\\)\uff0c\\(y\\) \u6709\u8fa6\u6cd5\u8ca0\u8377\uff0c\\(y\\) \u5269\u4e0b\u7684\u6578\u5b57\u6709 \\(\\{1,7,9 \\}\\)\uff0c \u5927\u65bc \\(1\\) \u6700\u5c0f\u7684\u662f \\(7\\)\uff0c\u6240\u4ee5\u53ef\u4ee5\u586b\uff0c\u6211\u5011\u5148\u5c07 \\(7\\) \u586b\u4e0b\u53bb\u8b8a \\(a=17\\space \\_\\space \\_\\)\uff0c\u518d\u5c07 \\(y\\) \u5269\u4e0b\u7684\u6578\u5b57\u5c0f\u5230\u5927\u586b\uff0c\u6240\u4ee5 \\(a=1719\\)</p> </li> </ul> 2024 TOI \u6a21\u64ec\u8cfd I pB. \u932f\u8aa4\u7684\u6b63\u78ba\u7b54\u6848 <p>\u7d66\u4e00\u500b\u6b63\u6574\u6578 x\uff0c\u69cb\u9020\u4e00\u500b\u7531 <code>o</code> \u8ddf <code>x</code> \u69cb\u6210\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u4e32\uff0c\u6eff\u8db3\u9019\u500b\u5b57\u4e32\u505a\u722c\u6a13\u68af\u554f\u984c\u7684\u65b9\u6848\u6578\u70ba x</p> <p>\\(2\\le x\\le 10^{18}\\)</p> \u601d\u8def <p>\u5148\u8003\u616e\u7d66\u5b9a\u5b57\u4e32\uff0c\u5982\u679c\u5feb\u901f\u7684\u7b97\u722c\u6a13\u68af\u554f\u984c\u7684\u7b54\u6848\u3002key observation \u662f\u4e00\u65e6\u6211\u5011\u7684\u6a13\u68af\u51fa\u73fe\u4e00\u968e\u4e0d\u80fd\u8d70\u7684\u60c5\u6cc1\uff0c\u65b9\u6848\u6578\u5c31\u662f\u5de6\u908a\u7684\u65b9\u6848\u6578 * \u53f3\u908a\u7684\u65b9\u6848\u6578\u3002\u4e5f\u80fd\u89c0\u5bdf\u5230\u6bcf\u4e00\u500b\u5340\u584a\u7684\u65b9\u6848\u6578\u90fd\u662f\u8cbb\u5f0f\u6578\u5217\u7684\u4e00\u9805\u3002</p> <p> \u65b9\u6cd5\u6578\u70ba 5 * 2 = 10 </p> <p>\u6240\u4ee5\u6211\u5011\u80fd\u60f3\u5230 x \u9019\u500b\u65b9\u6848\u6578\u4e00\u5b9a\u662f\u7531\u82e5\u5e72\u500b\u8cbb\u5f0f\u6578\u5217\u7684\u9805\u76f8\u4e58\u5f97\u5230\u7684\uff0c\u53ea\u662f\u6211\u5011\u8981\u600e\u9ebc\u8b93\u5b57\u5178\u5e8f\u6700\u5c0f\u5462? \u9996\u5148\u6211\u5011\u6709\u4e00\u500b\u8caa\u5fc3\u7684\u60f3\u6cd5\u5c31\u662f\u5f9e\u5927\u5230\u5c0f\u679a\u8209\u8cbb\u5f0f\u6578\u5217\u7684\u9805\uff0c\u7136\u5f8c\u80fd\u5c07 x \u6574\u9664\u5c31\u8b93 x \u9664\u4e0a\u90a3\u500b\u6578\u5b57\uff0c\u4e26\u5c07\u5c0d\u61c9\u6578\u91cf\u7684\u5708\u5708 push back \u5230\u7b54\u6848\u7684\u5e8f\u5217\uff0c\u4f46\u9019\u6a23\u505a\u53ef\u80fd\u6703\u9047\u5230\u9664\u4e0d\u4e0b\u53bb\u7684\u60c5\u6cc1\uff0c\u4f8b\u5982\u8aaa 1008\uff0c\u8cbb\u5f0f\u6578\u5217 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\uff0c\u5148\u628a 1008 / 144 \u5f8c\u5f97 7\uff0c7 \u5c31\u9664\u4e0d\u4e0b\u53bb\u6240\u4ee5\u6703\u5224\u5b9a\u7121\u89e3\u3002\u4f46\u5be6\u969b\u4e0a 1008 = 21 * 8 * 3 * 2 \u662f\u6709\u89e3\u7684\u3002\u9019\u662f\u56e0\u70ba\u8caa\u5fc3\u6cd5\u5247\u6703\u8b93\u5927\u7684\u9805\u628a\u597d\u7684\u56e0\u6578\u90fd\u5438\u8d70\uff0c\u5c07\u8cbb\u5f0f\u6578\u5217\u88e1\u4e0d\u5b58\u5728\u7684\u56e0\u6578\u7559\u4e0b\u4f86\uff0c\u8b93 x \u9664\u4e0d\u4e0b\u53bb\u3002</p> <p>\u7531\u65bc x \u7684\u56e0\u6578\u6700\u591a\u4e5f\u624d sqrt(x) = 10^5 \u7a2e\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u66b4\u529b\u7684\u53bb\u905e\u8ff4\uff0c\u6bcf\u6b21\u5f9e\u5927\u5230\u5c0f\u679a\u8209\u8cbb\u5f0f\u6578\u5217\u7684\u9805\uff0c\u5982\u679c\u80fd\u6574\u9664\u5c31\u7e7c\u7e8c\u905e\u8ff4\u4e0b\u53bb\uff0c\u82e5\u767c\u73fe\u4e0d\u53ef\u884c\u5247\u56de\u6eaf\uff0c\u5f80\u4e0b\u9078\u66f4\u5c0f\u7684\u9805\u4f86\u9664\uff0c\u7136\u5f8c\u7e7c\u7e8c\u905e\u8ff4\u3002\u7528\u5716\u8ad6\u7684\u89c0\u9ede\u4f86\u8aaa\uff0c\u53ef\u4ee5\u60f3\u6210\u6bcf\u500b\u6578\u5b57\u90fd\u662f\u4e00\u500b\u7bc0\u9ede\uff0c\u4ed6\u76f8\u9130\u7684\u9ede\u90fd\u662f\u9664\u4e0a\u8cbb\u5f0f\u6578\u5217\u88e1\u9762\u7684\u9805\u80fd\u6574\u9664\u624d\u806f\u7684\uff0c\u5982\u679c\u6709\u4e00\u689d path \u80fd\u8d70\u5230 1 \u5c31 ok \u4e86\u3002</p> <p> </p>"},{"location":"problem/interactive/","title":"\u4e92\u52d5\u984c","text":"CF 1867 E2. Salyg1n and Array (hard version) <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u76ee\u6a19\u662f\u8f38\u51fa \\(a_1\\oplus \\ldots \\oplus a_n\\)\u3002\u7d66 \\(k\\)\uff0c\u4f60\u53ef\u4ee5\u505a\u4ee5\u4e0b\u67e5\u8a62\u81f3\u591a 57 \u6b21 :</p> <ul> <li>\\(\\text{query}(i):\\) \u554f \\(a_i \\oplus a_{i + 1} \\oplus \\ldots \\oplus a_{i + k - 1}\\) \u662f\u591a\u5c11\uff0c\u554f\u4e86\u4e4b\u5f8c\uff0c\u9019\u500b\u5340\u9593\u5167\u7684\u5143\u7d20\u5c31\u6703\u88ab reverse</li> </ul> <p>\\(n,k\\le 2500,n,k\\) \u7686\u70ba\u5076\u6578</p> \u601d\u8def <p>\u82e5 n % k == 0\uff0c\u90a3\u6211\u5011\u53ef\u4ee5\u6bcf\u6b21\u5f9e\u5de6\u5230\u53f3\u4f9d\u5e8f\u8a62\u554f\u9577\u5ea6\u70ba k \u7684\u5340\u9593\u5373\u53ef\u3002\u82e5 n % k != 0\uff0c\u4ee3\u8868\u6211\u5011\u5de6\u5230\u53f3\u4f9d\u5e8f\u8a62\u554f\u9577\u5ea6\u70ba k \u7684\u5340\u9593\u5f8c\u6703\u5269\u4e0b\u4e00\u6bb5\uff0c\u6211\u5011\u7684\u76ee\u6a19\u5c31\u662f\u5c07\u9019\u6bb5\u7684\u503c\u7b97\u51fa\u4f86\u3002\u53ef\u4ee5\u767c\u73fe\u82e5\u6211\u5011\u4ee5\u5269\u4e0b\u5340\u9593\u7684\u4e00\u534a\u505a\u70ba query \u7684\u7d50\u5c3e query \u4e00\u6b21\uff0c\u5728\u4ee5 n \u4f5c\u70ba\u7d50\u5c3e query \u4e00\u6b21\uff0c\u4e2d\u9593\u591a\u9918\u7684\u8ca2\u737b\u6703\u525b\u597d\u6d88\u9664</p> <p> </p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nint query(int i) {\n    cout &lt;&lt; \"? \" &lt;&lt; i &lt;&lt; endl;\n    int res;\n    cin &gt;&gt; res;\n    return res;\n}\n\nvoid solve() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n\n    int ans = 0, now = 1;\n    while (now + k - 1 &lt;= n) {\n        int res = query(now);\n        ans ^= res;\n        now += k;\n    }\n\n    if (now &lt; n) {\n        int tmp = (n - now + 1) / 2;\n        int res1 = query(now + tmp - k);\n        ans ^= res1;\n        int res2 = query(now + tmp + tmp - k);\n        ans ^= res2;\n    }\n\n    cout &lt;&lt; \"! \" &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nsigned main() {\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n} \n</code></pre> CF 1918 E. ace5 and Task Order <p>\u6709\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684 \\(1\\sim n\\) \u7684 permutation \u4ee5\u53ca\u4e00\u500b\u4ecb\u65bc \\(1\\) \u548c \\(n\\) \u4e4b\u9593\u7684\u6b63\u6574\u6578\\(x\\)\u3002\u76ee\u6a19\u662f\u8981\u53bb\u78ba\u5b9a\u9019\u500b permutation\u3002\u53ef\u4ee5\u901a\u904e <code>? i</code> \u9032\u884c\u8a62\u554f\uff0c\u8fd4\u56de\u503c\u6709\u4e09\u7a2e\uff1a</p> <ul> <li> <p><code>&lt;</code>\uff1a\u8868\u793a \\(a_i&lt;x\\)\uff0c\u8a72\u6b21\u8a62\u554f\u5f8c\uff0c\\(x\\leftarrow x-1\\)</p> </li> <li> <p><code>&gt;</code>\uff1a\u8868\u793a \\(a_i&gt;x\\)\uff0c\u8a72\u6b21\u8a62\u554f\u5f8c\uff0c\\(x\\leftarrow x+1\\)</p> </li> <li> <p><code>=</code>\uff1a\u8868\u793a \\(a_i=x\\)</p> </li> </ul> <p>\\(n\\leq 2000,\\) \u8a62\u554f\u6b21\u6578 \\(\\le 40n\\)</p> \u601d\u8def <p>\u9996\u5148\uff0c\u5c0d\u65bc\u4e00\u500b\u6709 \\(O(n^2)\\) \u6b21\u67e5\u8a62\u7684\u554f\u984c\uff0c\u89e3\u7b54\u5f88\u660e\u986f\uff1a\u5c0d\u65bc\u6bcf\u500b\u4f4d\u7f6e i\uff0c\u6301\u7e8c\u67e5\u8a62\u76f4\u5230\u8fd4\u56de\u7b49\u65bc\uff0c\u7136\u5f8c\u901a\u904e\u5927\u5c0f\u95dc\u4fc2\u76f4\u63a5\u5c0d\u9019 n \u500b\u6578\u9032\u884c\u6392\u5e8f\uff0c\u5f9e\u800c\u7372\u5f97\u7b54\u6848\u3002</p> <p>\u65e2\u7136\u6392\u5e8f\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\uff0c\u6211\u5011\u8003\u616e\u90a3\u4e9b \\(O(n \\log n)\\) \u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u6bd4\u5982\u501f\u9452\u5feb\u901f\u6392\u5e8f\u7684\u601d\u8def\u3002</p> <p>\u4f46\u6211\u5011\u767c\u73fe\u5728\u7121\u6cd5\u78ba\u5b9a x \u662f\u591a\u5c11\u500b\u60c5\u6cc1\u4e0b\uff0c\u6211\u5011\u4ec0\u9ebc\u90fd\u5f88\u96e3\u505a\u3002\u6240\u4ee5\u9996\u5148\u6211\u5011\u5fc5\u9808\u53bb\u80fd\u6709\u6b0a\u529b\u63a7\u5236 x\uff0c\u800c\u6700\u597d\u7684\u8fa6\u6cd5\u5c31\u662f\u77e5\u9053 1 \u9084\u6709 n \u5728\u54ea\u88e1\uff0c\u4e00\u822c\u984c\u76ee\u5728\u5206\u6790\u6642\u4e5f\u5f88\u5e38\u5f9e\u6700\u5c0f\u548c\u6700\u5927\u958b\u59cb\u627e\u3002</p> <p>\u5177\u9ad4\u4f86\u8b1b\uff0c\u6211\u5011\u53ea\u8981\u6383\u4e00\u904d 1 ~ n\uff0c\u5c0d\u65bc\u6bcf\u500b\u4f4d\u7f6e\uff0c\u5982\u679c\u8a62\u554f\u8fd4\u56de &lt; \u5c31\u7e7c\u7e8c\u67e5\u76f4\u5230\u4e0d\u662f &lt; \u70ba\u6b62\uff0c\u5426\u5247\u76f4\u63a5\u4e0d\u7ba1\u3002\u986f\u7136\u9019\u6a23\u6700\u591a\u67e5\u8a62 O(n) \u6b21\uff08\u56e0\u70ba x \u6700\u591a\u589e\u5927 n \u6b21\uff09\uff0c\u4e26\u4e14\u5728 x = 1 \u7684\u5730\u65b9\u4e00\u5b9a\u53ef\u4ee5\u53d6\u5230 x = 1\u3002\u6211\u5011\u53ea\u8981\u770b x \u5728\u54ea\u88e1\u53d6\u5230\u6700\u5c0f\u503c\u5373\u53ef\u3002\u627e x = n \u540c\u7406\u3002</p> <p>\u518d\u4f86\uff0c\u6211\u5011\u501f\u9451\u5feb\u901f\u6392\u5e8f\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u5c0d\u503c\u57df\u9032\u884c\u5206\u6cbb\u3002\u5728\u63a7\u5236 x \u7684\u503c\u4e0d\u8b8a\u7684\u60c5\u6cc1\u4e0b\uff0c\u6211\u5011\u9700\u8981\u67e5\u8a62\u82e5\u5e72\u500b\u4f4d\u7f6e\u7684\u7b54\u6848\uff0c\u5f9e\u800c\u5c07\u9019\u4e9b\u4f4d\u7f6e\u5206\u6210\u5169\u7d44\uff1a\u300c\u5927\u65bc x\u300d \u548c \u300c\u5c0f\u65bc x \u300d\u7684\u5169\u7d44\uff08\u7b49\u65bc x \u7684\u4f4d\u7f6e\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7b54\u6848\uff09\u3002\u905e\u8ff4\u4e0b\u53bb\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002\u8907\u96dc\u5ea6 O(n log n)\u3002</p> <p>\u53c3\u8003: https://www.luogu.com.cn/blog/wosile/solution-cf1918e</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint p1, pn;\nint ans[2005];\nint query(int x) {\n    cout &lt;&lt; \"? \" &lt;&lt; x &lt;&lt; endl;\n    cout.flush();\n    string s;\n    cin &gt;&gt; s;\n    if (s[0] == '=') return 0;\n    if (s[0] == '&lt;') return -1;\n    if (s[0] == '&gt;') return 1;\n    return 0114507537;\n}\nint cur;\nvoid solve(int l, int r, vector&lt;int&gt;&amp; v) {\n    // v \u662f\u503c\u5728 [l,r] \u4e2d\u7684\u4e0b\u6807\u96c6\u5408\n    if (l &gt; r) return;\n    if (l == r) {\n        ans[v[0]] = l;\n        return;\n    }\n    int mid = (l + r) / 2;\n    while (cur &gt; mid) {\n        query(p1);\n        cur--;\n    }\n    while (cur &lt; mid) {\n        query(pn);\n        cur++;\n    }\n    vector&lt;int&gt; vl, vr;\n    vl.clear();\n    vr.clear();\n    // \u5206\u6210 [l,mid-1] \u548c [mid+1,r]\n    for (int x : v) {\n        int tmp = query(x);\n        if (tmp == 0) ans[x] = mid;\n        if (tmp == -1) {\n            vl.push_back(x);\n            query(pn);\n        }\n        if (tmp == 1) {\n            vr.push_back(x);\n            query(p1);\n        }\n    }\n    solve(l, mid - 1, vl);\n    solve(mid + 1, r, vr);\n}\nint main() {\n    int T;\n    cin &gt;&gt; T;\n    while (T--) {\n        int n;\n        cin &gt;&gt; n;\n        // find 1&amp;n\n        p1 = pn = 1;\n        int md = 0x3f3f3f3f, d = 0;\n        for (int i = 1; i &lt;= n; i++) {\n            int tmp = query(i);\n            d += tmp;\n            while (tmp == -1) {\n                tmp = query(i);\n                d += tmp;\n            }\n            if (d &lt; md) p1 = i, md = d;\n        }\n        md = -0x3f3f3f3f, d = 0;\n        for (int i = 1; i &lt;= n; i++) {\n            int tmp = query(i);\n            d += tmp;\n            while (tmp == 1) {\n                tmp = query(i);\n                d += tmp;\n            }\n            if (d &gt; md) pn = i, md = d;\n        }\n        ans[p1] = 1, ans[pn] = n;\n\n        vector&lt;int&gt; tmp;\n        tmp.clear();\n        for (int i = 1; i &lt;= n; i++)\n            if (i != p1 &amp;&amp; i != pn) tmp.push_back(i);\n        int val = query(pn);\n        while (val == 1) val = query(pn);\n        cur = n;\n        solve(2, n - 1, tmp);\n        cout &lt;&lt; \"! \";\n        for (int i = 1; i &lt;= n; i++) cout &lt;&lt; ans[i] &lt;&lt; ' ';\n        cout &lt;&lt; endl;\n        cout.flush();\n    }\n    return 0;\n    // quod erat demonstrandum\n}\n</code></pre>"},{"location":"problem/problem/","title":"\u96dc\u984c","text":"TIOJ  2221 . \u8db3\u7403\u5834 <p>\u7d66 \\(n\\) \u500b\u4e8c\u7dad\u5ea7\u6a19\u9ede\uff0c\u554f\u80fd\u7d44\u6210\u591a\u5c11\u500b\u77e9\u5f62</p> <p>\\(1\\le n\\le 1000,0\\le x_i, y_i \\le 10^9\\)</p> \u601d\u8def <p>\u77e9\u5f62\u7531\u300c\u5c0d\u89d2\u7dda\u9577\u5ea6\u300d\u548c\u300c\u4e2d\u5fc3\u5ea7\u6a19\u300d\u6c7a\u5b9a\u3002\u6240\u4ee5\u6211\u5011\u679a\u8209 \\(i,j\\)\uff0c\u5c07 pair(i \u8ddf j \u7684\u8ddd\u96e2, i \u8ddf j \u7684\u4e2d\u9ede)++\uff0c\u6700\u5f8c\u5c0d\u65bc\u6bcf\u500b distinct pair \u7684\u65b9\u6cd5\u6578\u5c31\u662f \\(C^k_2\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define StarBurstStream ios_base::sync_with_stdio(false); cin.tie(0);\n#define mp(a, b) make_pair(a, b)\n#define F first\n#define S second\nusing namespace std;\ntypedef long long ll;\nusing pll = pair&lt;ll, ll&gt;;\n\nll dis(pll a, pll b){\n    ll x = a.F - b.F;\n    ll y = a.S - b.S;\n    return x * x + y * y;\n}\n\npll operator+(pll a, pll b){\n    return mp(a.F + b.F, a.S + b.S);\n}\n\nint main(){\n    StarBurstStream\n\n    int n;\n    cin &gt;&gt; n;\n\n    vector&lt;pll&gt; p(n);\n    for(int i = 0; i &lt; n; i++){\n        cin &gt;&gt; p[i].F &gt;&gt; p[i].S;\n    }\n\n    map&lt;pair&lt;pll, ll&gt;, ll&gt; cnt;\n\n    for(int i = 0; i &lt; n; i++){\n        for(int j = i + 1; j &lt; n; j++){\n            cnt[mp(p[i] + p[j], dis(p[i], p[j]))]++;\n        }\n    }\n\n    ll ans = 0;\n    for(auto i : cnt){\n        ans += i.S * (i.S - 1) / 2;\n    }\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n\n    return 0;\n}\n</code></pre> Atcoder abc218 D. Rectangles <p>\u7d66 \\(n\\) \u500b\u4e8c\u7dad\u5ea7\u6a19\u9ede\uff0c\u554f\u80fd\u7d44\u6210\u591a\u5c11\u500b\u77e9\u5f62\u6eff\u8db3\u8a72\u77e9\u5f62\u5e73\u884c \\(x\\) \u8ef8\u548c \\(y\\) \u8ef8</p> <p>\\(4\\le n\\le 2000,0\\le x_i,y_i\\le 10^9\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u4e00\u984c\u7684\u5dee\u5225\u662f\u6211\u5011\u5728\u679a\u8209 i, j \u6642\u9700\u8981\u56fa\u5b9a\u4e00\u500b\u7dad\u5ea6\uff0c\u7136\u5f8c\u53bb\u505a\u4e00\u6a23\u7684\u4e8b\u60c5</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nstruct Node {\n    int x, y;\n};\n\nconst int N = 2005;\nint n;\nNode a[N];\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i].x &gt;&gt; a[i].y;\n    }\n    map&lt;pii, int&gt; mp;\n    int ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i + 1; j &lt; n; j++) {\n            if (a[i].y == a[j].y) {\n                int len = abs(a[j].x - a[i].x);\n                int point = (a[i].x + a[j].x);\n                mp[{len, point}]++;\n            }\n        }\n    }\n    int ans = 0;\n    for (auto it : mp) {\n        ans += it.S * (it.S - 1) / 2;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n} \n</code></pre> 2016 \u5168\u570b\u8cfd p3. \u6846\u67b6\u5340\u9593 <p>\u7d66\u4e00\u500b \\(1 \\ldots n\\) \u7684 permutation \\(p\\)\uff0c\u554f\u6709\u5e7e\u500b \\((i,j)\\) \u6eff\u8db3 \\(i\\) \u5728 \\(p\\) \u5167\u8207 \\(j\\) \u5728 \\(p\\) \u5167\u7684\u4f4d\u7f6e\u6240\u5f62\u6210\u7684\u5340\u9593\u5167\uff0c\u6578\u5b57\u96c6\u5408\u6070\u597d\u662f \\(\\{ i,\\ldots ,j \\}\\)</p> <p>\\(n\\le 5000\\)</p> \u601d\u8def <p>\u679a\u8209 i, j\uff0c\u770b pos[i], ..., pos[j] \u7684 min \u662f\u5426\u70ba pos[i] \u4e14 max \u662f\u5426\u70ba pos[j]</p> 2022 \u5168\u570b\u8cfd pD. \u6587\u5b57\u7de8\u8f2f\u5668 (editor) <p>\u6709\u4e00\u500b\u7531 \\(\\texttt{+}, \\texttt{[}, \\texttt{]}, \\texttt{x}\\) \u7d44\u6210\u5408\u6cd5\u5e8f\u5217\uff0c\u6b64\u6642\u5c07\u5176\u4e2d\u4e00\u500b \\(\\texttt{+}\\) \u6539\u6210 \\(\\texttt{|}\\)\uff0c\u4e26\u5c07\u6240\u6709 \\(\\texttt{[}, \\texttt{]}\\) \u63db\u6210 \\(\\texttt{|}\\)\u3002\u7d66\u4f60\u9019\u500b\u6539\u5b8c\u7684\u5e8f\u5217 \\(s\\)\uff0c\u8f38\u51fa\u4efb\u610f\u4e00\u500b\u539f\u4f86\u7684\u5408\u6cd5\u5e8f\u5217\u3002</p> <p>\\(|s| \\le 10^6\\)</p> \u601d\u8def <p>\u5169\u500b \\(\\texttt{x}\\) \u4e2d\u4e00\u5b9a\u8981\u6709 \\(\\texttt{+}\\)\uff0c\u770b\u54ea\u5169\u500b \\(\\texttt{x}\\) \u4e4b\u9593\u6c92\u6709 \\(\\texttt{+}\\)\uff0cGreedy \u7684\u653e\u5373\u53ef</p> \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd 2022 pI. \u5b50\u96c6\u5408\u548c (SOS) <p>\u4ee4\u51fd\u6578 \\(f(S)=S\\times \\prod\\limits_{x\\in S}x\\)\uff0c\u554f \\(\\sum\\limits_{S\\subseteq A} f(S)\\)</p> <p>\\(1\\le n\\le 10^6, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u4ee4 \\(G(S)=\\prod \\limits_{x\\in S} x,\\space F(S) =|S| \\times \\prod \\limits_{x\\in S} x\\)</p> <p>\u5247</p> <p>\\(\\begin{align}F(S \\cup \\{t \\}) &amp;= (|S|+1)\\times \\left(\\prod \\limits_{x\\in S} x \\right)\\times t \\\\ &amp;= F(S) \\times t+G(S)\\times t\\end{align}\\)</p> <p>\\(G(S \\cup \\{ t\\})=G(S)\\times t\\)</p> <p>\u5047\u8a2d\u6211\u5011\u5df2\u77e5 \\(\\sum \\limits_{S \\subseteq A}F(S)\\) \u548c \\(\\sum \\limits_{S \\subseteq A}G(S)\\)\uff0c\u5247\u6211\u5011\u53ef\u5c07\u65b0\u7684 \\(F=\\) \u6c92\u6709 \\(t\\) + \u6709 \\(t\\) </p> <p>\\(\\begin{align}\\sum \\limits_{S \\subseteq (A + \\{t \\})}F(S) &amp;= \\sum \\limits_{S \\subseteq A}F(S)+\\sum \\limits_{S \\subseteq A}F(S+\\{ t \\}) \\\\ &amp;= \\sum \\limits_{S \\subseteq A}F(S)+\\left(\\sum \\limits_{S \\subseteq A}F(S) \\right)\\times t +  \\left(\\sum \\limits_{S \\subseteq A}G(S) \\right)\\times t\\end{align}\\)</p> <p>\\(\\sum \\limits_{S \\subseteq (A + \\{t \\})}G(S)=\\sum \\limits_{S \\subseteq A}G(S)+\\left(\\sum \\limits_{S \\subseteq A}G(S) \\right)\\times t\\)</p> <p>\u53c3\u8003\u81ea : https://hackmd.io/@victor26/Bkc_YXpdo</p> <p>\u89c0\u5bdf\u5230\u53ef\u80fd\u8ddf \\((a_1 + 1)(a_2 + 1)(a_3 + 1) \\ldots (a_n + 1)\\) \u6709\u95dc</p> <p>\u7b54\u6848\u70ba </p> \\[a_1(a_2 + 1)(a_3 + 1) \\ldots (a_n + 1)+a_2(a_1 + 1)(a_3 + 1) \\ldots (a_n + 1) + a_n(a_1 + 1)(a_2 + 1) \\ldots (a_{n-1} + 1)\\] <p>\u9810\u8655\u7406 \\((a_1+1)(a_2+1)(a_3+1)...(a_n+1)\\) \u5373\u53ef</p> CF 1886 D. Monocarp and the Set <p>\u554f\u7b26\u5408\u689d\u4ef6\u7684 \\(1\\ldots n\\) \u7684 permutation \\(p\\) \u6709\u5e7e\u500b\u3002\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\((n-1)\\) \u7684\u5e8f\u5217 \\(s\\)\uff0c\\(s_i\\) \u7684\u610f\u7fa9\u5982\u4e0b :</p> <ul> <li> <p>\u82e5 \\(s_i=\\) <code>&gt;</code>\uff0c\u5247 \\(p_i\\) \u662f\u524d\u7db4\u7684 max</p> </li> <li> <p>\u82e5 \\(s_i=\\) <code>&lt;</code>\uff0c\u5247 \\(p_i\\) \u662f\u524d\u7db4\u7684 min</p> </li> <li> <p>\u82e5 \\(s_i=\\) <code>?</code>\uff0c\u5247 \\(p_i\\) \u5169\u8005\u7686\u4e0d\u662f</p> </li> </ul> <p>\u73fe\u5728\u6709 \\(q\\) \u7b46\u5c0d \\(s\\) \u7684\u55ae\u9ede\u4fee\u6539\uff0c\u6bcf\u6b21\u4fee\u6539\u5b8c\u8f38\u51fa\u7b54\u6848\u662f\u591a\u5c11</p> <p>\\(2\\le n\\le 3\\times 10^5, 1\\le m\\le 3\\times 10^5\\)</p> \u601d\u8def <p>\u8003\u616e\u5217\u51fa \\(p_0,\\ldots ,p_{n-1}\\) \u7684\u5927\u5c0f\u95dc\u4fc2\uff0c\u4f8b\u5982 \\([2,1,5,3,4]\\) \u7684\u5927\u5c0f\u95dc\u4fc2\u70ba \\(p_1&lt;p_0&lt;p_3&lt;p_4&lt;p_2\\)\u3002</p> <ul> <li> <p>\u82e5\u7576\u524d\u52a0\u5165\u4e00\u500b <code>&gt;</code> \uff0c\u4ed6\u53ea\u80fd\u653e\u5728\u5927\u5c0f\u95dc\u4fc2\u7684\u6700\u5f8c\u9762\u3002</p> </li> <li> <p>\u82e5\u7576\u524d\u52a0\u5165\u4e00\u500b <code>&lt;</code>\uff0c\u4ed6\u53ea\u80fd\u653e\u5728\u5927\u5c0f\u95dc\u4fc2\u7684\u6700\u524d\u9762\u3002</p> </li> <li> <p>\u82e5\u7576\u524d\u52a0\u5165\u4e00\u500b <code>?</code>\uff0c\u4ed6\u53ef\u4ee5\u653e\u5728\u5927\u5c0f\u95dc\u4fc2\u7684\u4e2d\u9593\u3002</p> </li> </ul> <p>\u6240\u4ee5\u5be6\u969b\u4e0a\u6574\u9ad4\u7684\u8b8a\u52d5\u662f\u7531 <code>?</code> \u6c7a\u5b9a\u7684\uff0c\u56e0\u6b64\uff0c\u7e3d\u53ef\u80fd\u6027\u662f\u6240\u6709 \\((i-1)\\) \u7684\u4e58\u7a4d\uff0c\u5176\u4e2d \\(s_i\\) == <code>?</code>\uff081-based\uff09</p> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\\(s=\\) <code>&lt;?&gt;?</code></p> <ul> <li> <p>\\(s_1=\\) <code>&lt;</code> \u5247 \\(p_1&lt;p_0\\)</p> </li> <li> <p>\\(s_2=\\) <code>?</code> \u5247 \\(p_2\\) \u53ea\u80fd\u63d2\u5165\u5728 \\(p_1,p_0\\) \u4e4b\u9593\uff0c\u6240\u4ee5 \\(p_1&lt;p_2&lt;p_0\\)</p> </li> <li> <p>\\(s_3=\\) <code>&gt;</code> \u5247 \\(p_1&lt;p_2&lt;p_0&lt;p_3\\)</p> </li> <li> <p>\\(s_4=\\) <code>?</code> \u5247 \\(p_4\\) \u53ef\u4ee5\u63d2\u5165\u5728\u4e2d\u9593 \\(3\\) \u500b\u7a7a\u9699\u4e2d</p> </li> </ul> <p>\u6240\u4ee5\u7b54\u6848\u70ba \\((2-1)\\times (4-1)=3\\)</p> 2021 \u9644\u4e2d\u6a21\u7af6 III pF. \u6b61\u6a02\u8036\u8a95\u57ce (Christmas) <p>\u6709 \\(n\\) \u689d\u71c8\u98fe\uff0c\u4e00\u958b\u59cb\u4e0a\u9762\u90fd\u6c92\u71c8\u6ce1\uff0c\u71c8\u6ce1\u6709 \\(m\\) \u7a2e\u984f\u8272\uff0c\u6709\u4ee5\u4e0b \\(q\\) \u6b21\u64cd\u4f5c:</p> <ol> <li> <p>\u5c07\u6307\u5b9a\u984f\u8272\u7684\u71c8\u6ce1\u52a0\u5230\u6307\u5b9a\u71c8\u98fe\u7684\u5c3e\u7aef</p> </li> <li> <p>\u79fb\u9664\u67d0\u689d\u71c8\u98fe\u7684\u6700\u5f8c\u4e00\u500b\u71c8\u6ce1</p> </li> <li> <p>\u628a\u67d0\u689d\u71c8\u98fe\u8b8a\u6210\u8ddf\u53e6\u4e00\u689d\u4e00\u6a21\u4e00\u6a23</p> </li> <li> <p>\u554f\u67d0\u689d\u71c8\u98fe\u7684\u67d0\u500b\u71c8\u6ce1\u662f\u4ec0\u9ebc\u984f\u8272</p> </li> </ol> <p>\\(n,q\\le 2\\times 10^5, m\\le 10^9\\)</p> \u601d\u8def <p>\u628a\u67d0\u689d\u71c8\u98fe\u8907\u88fd\u5f8c\uff0c\u5404\u81ea\u53ef\u4ee5\u518d\u5ef6\u4f38 \u21d2 \u985e\u4f3c Tree \u7684\u7d50\u69cb</p> <p>\u7528 1. 2. 3. \u64cd\u4f5c\u8b80\u9032\u4f86\u5f8c\u5efa\u7acb\u5b8c tree \u5f8c\uff0c\u5efa lca\uff0c\u5c0d\u65bc 4. O(log n) \u56de\u7b54</p> CF 1644 E. Expand the Path <p>\u6709\u4e00\u500b n * n \u7684 Grid\uff0c\u7d66\u4e00\u500b\u5b57\u4e32 s\uff0c\u5305\u542b D, R\uff0c\u4ee3\u8868\u7576\u524d\u884c\u8d70\u7684\u8def\u5f91\u3002\u53ef\u4efb\u610f\u6b21\u7684\u5c07 s \u7684\u67d0\u4e00\u9805\u8907\u88fd\uff0c\u4f46 s \u4e0d\u80fd\u8d85\u754c\uff0c\u554f\u80fd\u8d70\u5230\u7684 distinct \u683c\u5b50\u6578\u91cf</p> <p>\\(n\\le 10^8, |s| \\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u3010\u5957\u8def\u3011: \u5c0d\u65bc\u6bcf\u4e00\u500b s \u7684\u8d70\u904e\u7684\u4f4d\u7f6e\uff0c\u8a08\u7b97\u5c0d\u5168\u5c40\u7684\u8ca2\u737b</p> <p>\u9996\u5148\uff0c\u6211\u5011\u6309\u7167\u7d66\u5b9a\u7684\u64cd\u4f5c\u5e8f\u5217\u57f7\u884c\uff0c\u5230\u9054\u76ee\u6a19\u683c\u5b50 (x, y)\u3002\u7136\u5f8c\uff0c\u8a08\u7b97\u5728\u8a72\u4f4d\u7f6e\u6700\u591a\u53ef\u4ee5\u5411\u6a6b\u5411\u6216\u7e31\u5411\u79fb\u52d5\u591a\u5c11\u683c\uff0c\u4ee5\u9054\u5230\u76ee\u6a19\u4f4d\u7f6e (n, m)\u3002\u8a2d\u9700\u8981\u5411\u53f3\u79fb\u52d5 x \u683c\uff0c\u5411\u4e0b\u79fb\u52d5 y \u683c\u3002</p> <p>\u5728\u63a5\u4e0b\u4f86\u7684\u5206\u6790\u4e2d\uff0c\u70ba\u65b9\u4fbf\u8d77\u898b\uff0c\u6211\u5011\u5c07\u683c\u5b50\u8207\u683c\u5b50\u4e4b\u9593\u7684\u64cd\u4f5c\u8f49\u5316\u70ba\u683c\u5b50\u5167\u90e8\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u7576\u524d\u5728 (1, 1)\uff0c\u9700\u8981\u5411\u53f3\u79fb\u52d5\uff0c\u5247\u6211\u5011\u5c07\u8a72\u683c\u5b50\u6a19\u8a18\u70ba\u53f3\u79fb\u3002\u7576\u7136\uff0c\u9019\u6a23\u505a\u53ef\u80fd\u6703\u6f0f\u6389\u4e00\u500b\u683c\u5b50\uff0c\u4f46\u5f8c\u9762\u6703\u9032\u884c\u88dc\u5145\u3002</p> <p>\u8003\u616e\u8a08\u7b97\u7b54\u6848\u3002\u5c0d\u65bc\u6bcf\u500b\u683c\u5b50\uff0c\u6211\u5011\u6700\u591a\u53ef\u4ee5\u5411\u76f8\u5c0d\u65b9\u5411\uff08\u4f8b\u5982\uff0c\u5982\u679c\u683c\u5b50\u662f\u5411\u53f3\u7684\uff0c\u5247\u8003\u616e\u5411\u4e0b\u79fb\u52d5\uff09\u79fb\u52d5 x \u6216 y \u683c\u3002\u7531\u65bc\u79fb\u52d5\u4e00\u5b9a\u662f\u5411\u53f3\u6216\u5411\u4e0b\u7684\uff0c\u64f4\u5c55\u904e\u7a0b\u4e0d\u6703\u8d85\u51fa\u908a\u754c\u6216\u8207\u5176\u4ed6\u683c\u5b50\u91cd\u758a\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u76f4\u63a5\u5c07\u9019\u4e9b\u8ca2\u737b\u6dfb\u52a0\u5230\u7b54\u6848\u4e2d\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709\u5728\u7b2c\u4e00\u6b21\u8f49\u5411\u53ca\u4ee5\u5f8c\u624d\u80fd\u57f7\u884c\u9019\u6a23\u7684\u64cd\u4f5c\uff08\u56e0\u70ba\u6c92\u6709\u8fa6\u6cd5\u8907\u88fd\u53e6\u4e00\u7a2e\u65b9\u5411\u7684\u64cd\u4f5c\uff09\u3002</p> <p>\u7136\u5f8c\uff0c\u8003\u616e\u6700\u5f8c\u4e00\u500b\u683c\u5b50\u3002\u4e0d\u96e3\u767c\u73fe\uff0c\u5f9e\u53f3\u4e0b\u89d2\u958b\u59cb\u7684 n * m \u500b\u683c\u5b50\u90fd\u53ef\u4ee5\u5230\u9054\uff0c\u6211\u5011\u76f4\u63a5\u5c07\u5176\u6dfb\u52a0\u5230\u7b54\u6848\u4e2d\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nconst int N = 2e5 + 5;\nchar s[N];\nint n, ans;\n\nvoid work() {\n    bool flag = 1;\n    cin &gt;&gt; n &gt;&gt; s + 1;\n    int x = 1, y = 1;\n    for (int i = 1; s[i]; i++) {\n        if (s[i] == 'R') {\n            x++;\n        } else {\n            y++;\n        }\n        if (s[i] != s[i - 1] &amp;&amp; i != 1) flag = 0;\n    }\n    if (flag == 1) {\n        cout &lt;&lt; n &lt;&lt; '\\n';\n        return;\n    }\n    x = n - x, y = n - y;\n    int i = 2;\n    ans = 1;\n    while (s[i] == s[i - 1]) {\n        ans++;\n        i++;\n    }\n    for (i; s[i]; i++) {\n        ans++;\n        if (s[i] == 'R') {\n            ans += y;\n        } else {\n            ans += x;\n        }\n        if (s[i + 1] == 0) ans += (x + 1) * (y + 1);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nint main() {\n    int t;\n    cin &gt;&gt; t;\n    while (t--) work();\n}\n</code></pre> CF 1644 D. Cross Coloring <p>\u7d66\u4e00\u500b n * m \u7684 grid\uff0c\u6bcf\u683c\u6700\u521d\u90fd\u662f\u767d\u8272\u7684\u3002\u6709 q \u7b46\u64cd\u4f5c:</p> <ul> <li>color\\((x_i, y_i):\\) \u9078\u64c7 k \u7a2e\u975e\u767d\u8272\u7684\u984f\u8272\u7684\u5176\u4e2d\u4e00\u7a2e\uff0c\u7136\u5f8c\u5c07 row \\(x_i\\) \u8207 \\(y_i\\) \u5857\u8272</li> </ul> <p>\u554f\u6574\u5f35 grid \u6709\u5e7e\u7a2e\u5857\u8272\u65b9\u6848\u6578</p> <p>\\(n,m,k,q\\le 2\\times 10^5\\)</p> \u601d\u8def <p>\u5982\u679c\u5012\u8457\u8003\u616e\uff0c\u984c\u76ee\u5c31\u8b8a\u6210: \u6bcf\u6b21\u9078\u4e00\u884c\u4e00\u5217\uff0c\u7136\u5f8c\u67d3\u6210\u4e00\u500b\u984f\u8272\uff0c\u5f8c\u67d3\u7684\u8272\u4e0d\u6703\u8986\u84cb\u539f\u4f86\u67d3\u5f97\u984f\u8272\u3002</p> <p>\u90a3\u9ebc\u7576\u4e00\u6b21\u64cd\u4f5c\u6703\u6c92\u6709\u8ca2\u737b\uff0c\u7576\u4e14\u50c5\u7576 row \u8ddf column \u90fd\u88ab\u5b8c\u5168\u8986\u84cb\uff0c\u5426\u5247\uff0c\u7b54\u6848\u5c31\u9700\u8981\u4e58\u4e0a k\u3002</p> <p>\u540c\u6642\u6211\u5011\u9084\u9700\u8981\u8003\u616e\u4e00\u7a2e\u60c5\u6cc1\uff0c\u7576\u6709 n \u884c\u5168\u90e8\u88ab\u8986\u84cb\u6642\uff0c\u5be6\u969b\u4e0a\u76f8\u7576\u65bc m \u5217\u5168\u90e8\u88ab\u8986\u84cb\u4e86\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002\u6b64\u5f8c\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5c07\u8b8a\u70ba\u7121\u6548\u64cd\u4f5c\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int MAXN = 2e5 + 5;\nconst int mod = 998244353;\nbool row[MAXN], col[MAXN];\nint x[MAXN], y[MAXN];\n\nint fpow(int a, int b) {\n    int res = 1;\n    while (b) {\n        if (b &amp; 1) res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\n\nint main() {\n    int t;\n    cin &gt;&gt; t;\n    while (t--) {\n        memset(row, 0, sizeof(row));\n        memset(col, 0, sizeof(col));\n        int n, m, k, q;\n        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; q;\n        for (int i = 1; i &lt;= q; i++) {\n            cin &gt;&gt; x[i] &gt;&gt; y[i];\n        }\n        int cnt = 0, crow = 0, ccol = 0;\n        for (int i = q; i &gt;= 1; i--) {\n            bool ok = 0;\n            if (crow &lt; n &amp;&amp; ccol &lt; m &amp;&amp; !row[x[i]]) {\n                row[x[i]] = 1, crow++, ok = 1;\n            }\n            if (crow &lt; n &amp;&amp; ccol &lt; m &amp;&amp; !col[y[i]]) {\n                col[y[i]] = 1, ccol++, ok = 1;\n            }\n            if (ok) cnt++;\n        }\n        cout &lt;&lt; fpow(k, cnt) &lt;&lt; '\\n';\n    }\n}\n</code></pre> CF 1928 D. Lonely Mountain Dungeons <p>\u6709 \\(n\\) \u985e\u4eba\uff0c\u7b2c \\(i\\) \u985e\u4eba\u6709 \\(c_i\\) \u500b\u3002\u4f60\u9700\u8981 \\(x\\cdot(k-1)\\) \u7684\u4ee3\u50f9\u628a\u4ed6\u5011\u5206\u6210 \\(k\\) \u7d44\u3002\u5728\u4e00\u7a2e\u5206\u7d44\u4e0b\uff0c\u6bcf\u5169\u500b\u540c\u985e\u7684\u4eba\u88ab\u5206\u5230\u4e0d\u540c\u7684\u7d44\uff0c\u6703\u7522\u751f \\(b\\) \u7684\u8ca2\u737b\u3002\u554f\u6700\u5927\u6536\u76ca\u3002</p> <p>\\(n\\leq 2\\times 10^5, 1\\leq c_i \\leq 2\\times 10^5, b\\leq 10^6, x\\leq 10^9, \\sum c_i \\leq 2\\times 10^5\\)</p> \u601d\u8def <p>\u8a2d f(n, m) \u662f\u5c07 n \u500b\u540c\u7a2e\u65cf\u7684\u4eba\u653e\u5230 m \u7d44\u4e2d\u53ef\u4ee5\u7372\u5f97\u7684\u8ca2\u737b\u3002\u53ef\u4ee5\u767c\u73fe\u5728\u540c\u7d44\u7684\u4eba\u4e0d\u80fd\u4e92\u76f8\u7522\u751f\u8ca2\u737b\uff0c\u6240\u4ee5\u76e1\u53ef\u80fd\u5e73\u5747\u5206\u914d\u662f\u6700\u512a\u7684\u3002\u8a2d p = (n / m), q = n % m\uff0c\u5247\u6709 m - q \u7684\u968a\u4f0d\u6709 p \u4eba\uff0cq \u500b\u968a\u4f0d\u6709 p + 1 \u4eba\uff0c\u6240\u4ee5\u8ca2\u737b\u662f</p> \\[ f(n, m)  =\\dfrac{n(n+1)}{2}-(m-q)\\times\\dfrac{p(p+1)}{2}-q\\times\\dfrac{(p+1)(p+2)}{2} \\] <p>\u4e00\u7a2e\u60f3\u6cd5\u662f\u56e0\u70ba \\(\\sum c_i \\le 2\\times 10^5\\)\uff0c\u6240\u4ee5 distinct \u7684 \\(c_i\\) \u7e3d\u5171\u4e5f\u5c31 \\(\\sqrt{2\\times 10^5}\\) \u7a2e\uff0c\u6240\u4ee5\u6211\u5011\u679a\u8209\u5206\u6210\u5e7e\u7d44\uff0c\u7136\u5f8c\u679a\u8209\u6bcf\u7a2e\u7a2e\u65cf\u7684\u4eba\uff0c \u5c07\u4ed6\u5011\u7684 f(n, m) \u7b97\u9032\u53bb\u7b54\u6848\uff0c\u6700\u5f8c\u53d6 max \u5c31\u597d\uff0c\u8907\u96dc\u5ea6 \\(O(n \\sqrt{\\sum c_i})\\)\u3002</p> <p>\u53e6\u4e00\u7a2e\u60f3\u6cd5\u662f\u5c0d\u65bc\u4e00\u500b\u7a2e\u65cf\uff0c\u76f4\u63a5\u679a\u8209 \\(m=1\\ldots c_i\\) \u4ee3\u8868\u8981\u5206\u6210 \\(m\\) \u7d44\u80fd\u7522\u751f\u7684\u8ca2\u737b\uff0c\u5229\u7528\u524d\u7db4\u548c\u55ae\u9ede\u52a0\u503c\u7684\u60f3\u6cd5\uff0c\u5c0d\u65bc \\(m=1\\ldots c_i\\) \u6211\u5011\u5c31\u76f4\u63a5\u5957\u4e0a\u9762 f(n, m) \u5206\u5225\u8a08\u7b97\u5c31\u597d\uff0c\u800c \\(m&gt;c_i\\) \u5c31\u76f8\u7576\u65bc f(c[i], c[i])\uff0c\u8907\u96dc\u5ea6 \\(O(\\sum c_i)\\)\u3002</p> <p>\u53c3\u8003\u81ea: https://www.cnblogs.com/int-R/p/18013982/CF1928D</p>"},{"location":"search/binary_search/","title":"\u4e8c\u5206\u641c","text":""},{"location":"search/binary_search/#jumping","title":"Jumping \u5beb\u6cd5","text":"<p>\u7d00\u9304\u76ee\u524d\u4f4d\u7f6e pos \u8207\u8df3\u8e8d\u8ddd\u96e2 jump\uff0c\u53ea\u8981\u4e0d\u6eff\u8db3\u689d\u4ef6\u5c31\u5f80\u524d\u8df3\uff0cjump \u6bcf\u6b21\u6e1b\u534a</p> code <pre><code>// \u627e\u5230\u7b2c\u4e00\u500b\u6bd4 key \u5927\u7684\u5143\u7d20\u7684 index \nvoid find(int key) {\n    if (a[0] &gt;= key) {\n        return 0;\n    }\n    int pos = 0;\n    for (int jump = n / 2; jump; jump &gt;&gt;= 1) {\n        while (pos + jump &lt; n &amp;&amp; a[pos + jump] &lt; key) {\n            pos += jump;\n        }\n    }\n    return pos + 1;\n}\n</code></pre>"},{"location":"search/binary_search/#k","title":"\u7b2c k \u5c0f","text":"<p>\u4ee4 k \u70ba 0-base\uff0c\u6211\u5011\u90fd\u662f\u53bb\u627e\u6700\u5927\u7684 threshold t \u6eff\u8db3\u300c\u5c0f\u65bc\u300d t \u7684\u500b\u6578 &lt;= k</p> CF EDU A. K-th Number in the Union of Segments <p>\u6709\u4e00\u500b multiset\uff0c\\(n\\) \u6b21 insert \\(l_i,\\ldots ,r_i\\) \u9032\u53bb\uff0c\u554f multiset \u7b2c \\(k\\) \u5c0f\u7684\u6578\u5b57\uff08\\(k\\) \u70ba 0-base\uff09\u3000</p> <p>\\(n\\le 50,0\\le k\\le 2\\times 10^9,-2\\cdot 10^9 \\le l_i \\le r_i \\le 2\\cdot 10^9\\)</p> code <pre><code>#pragma GCC optimize(\"O3,unroll-loops\")\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\n\n#include &lt;bits/stdc++.h&gt;\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\n\nstruct Interval {\n    int l, r;\n};\n\nint n, k;\nvector&lt;Interval&gt; intervals;\n\nbool check(ll t) {\n    ll cnt = 0;\n    for (auto &amp;[l, r] : intervals) {\n        if (t &gt; r) {\n            cnt += r - l + 1;\n        } else if (t &gt; l) {\n            cnt += (ll)t - l;\n        }\n    }\n\n    return cnt &lt;= k;\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 0; i &lt; n; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        intervals.pb({l, r});\n    }\n\n    ll l = -3e9, r = 3e9;\n    // \u627e\u5230\u6700\u5927\u7684 x \u6eff\u8db3\u5c0f\u65bc x \u7684\u500b\u6578 &lt;= k\n    while (r - l &gt; 1) {\n        ll mid = (l + r) / 2;\n        if (check(mid)) l = mid;\n        else r = mid;\n    }\n    cout &lt;&lt; l &lt;&lt; '\\n';\n} \n</code></pre> CF EDU C. K-th Sum <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u5169\u500b\u9663\u5217 \\(a,b\\)\uff0c\u554f\u5c07\u6240\u6709 \\((i,j)\\) \u7684 \\(a_i+b_j\\) \u5217\u51fa\u4f86\u5f8c\u7b2c \\(k\\) \u5c0f\u662f\u591a\u5c11</p> <p>\\(n\\le 10^5,1\\le k\\le n^2\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, k;\nint a[maxn], b[maxn];\n\nbool check(int x) {\n    // \u6c42 &lt; x \u7684\u6578\u5b57\u6709\u5e7e\u500b\n    int cnt = 0;\n    int j = n;\n    for (int i = 1; i &lt;= n; i++) {\n        while (1 &lt;= j &amp;&amp; a[i] + b[j] &gt;= x) {\n            j--;\n        }\n        cnt += j;\n    }\n\n    return cnt &lt;= k;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    k--;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; b[i];\n    }\n    sort(a + 1, a + n + 1); sort(b + 1, b + n + 1);\n    // \u627e\u5230\u6700\u5927\u7684 x \u6eff\u8db3\u5c0f\u65bc x \u7684\u500b\u6578 &lt;= k\n\n    int l = 1, r = 1e11;\n    while (r - l &gt; 1) {\n        int mid = (l + r) / 2;\n        if (check(mid)) l = mid;\n        else r = mid;\n    }\n    cout &lt;&lt; l &lt;&lt; '\\n';\n} \n</code></pre> TIOJ 1208 . \u7b2cK\u5927\u9023\u7e8c\u548c <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1 ,\\ldots ,a_n\\)\uff0c\u8f38\u51fa\u6240\u6709 subarray sum \u4e2d\u7b2c \\(k\\) \u5927\u7684</p> <p>\\(n\\le 2\\times 10^4 , 1\\le k \\le \\frac{n(n+1)}{2}\\)</p> \u601d\u8def <p>\u4e8c\u5206\u641c\u6700\u5c0f\u7684 x \u6eff\u8db3\u300c\u5927\u65bc x \u7684 subarray sum \u500b\u6578 &lt;= k\u300d\uff0c\u4f46\u8981\u6ce8\u610f\u6703\u6709 (l + r) / 2 \u53ef\u80fd\u6703\u662f\u8ca0\u7684\uff0c\u6240\u4ee5\u5fc5\u9808 mid = l + (r - l) / 2</p> <p>\u4e5f\u53ef\u4ee5\u628a\u554f\u984c\u8f49\u63db\u6210\u7b2c k \u5c0f\uff0c\u5f8c\u4e8c\u5206\u641c\u6700\u5927\u7684 x \u6eff\u8db3\u300c\u5c0f\u65bc x \u7684 subarray sum \u500b\u6578 &lt;= k\u300d</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#include &lt;bits/extc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define mk make_pair&lt;int, int&gt;\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntemplate &lt;typename T&gt;\nusing rank_set = tree&lt;T, null_type, std::less&lt;T&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;;\n\nconst int maxn = 2e5 + 5;\nint n, k;\nint a[maxn], pre[maxn];\n\nbool check(int x) {\n    rank_set&lt;pii&gt; st;\n    // pre[i] - pre[j] &gt; x\n    // pre[i] - x &gt; pre[j]\n    int cnt = 0;\n    for (int i = 0; i &lt;= n; i++) {\n        cnt += st.order_of_key(mk(pre[i] - x + 1, 0));\n        st.insert({pre[i], i + 1});\n    }\n    return cnt &lt;= k;\n}\n\nvoid solve() {\n    k--;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        pre[i] = pre[i - 1] + a[i];\n    }\n    int l = -2e9, r = 2e9;\n    while (r - l &gt; 1) {\n        int mid = (l + r) / 2;\n\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n    cout &lt;&lt; l &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    while (cin &gt;&gt; n &gt;&gt; k) {\n        if(n == 0 &amp;&amp; k == 0) break;\n        solve();\n    }\n}\n</code></pre> 2023 TOI \u521d\u9078 pB. \u88c1\u54e1\u98a8\u66b4 (storm) <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u6709\u4ee5\u4e0b\u5169\u7a2e\u5718\u968a:</p> <ul> <li> <p>\u6709 \\(n\\) \u500b\u5718\u968a\uff0c\u7b2c \\(i\\) \u500b\u5718\u968a\u6b0a\u91cd\u70ba \\(a_i\\)</p> </li> <li> <p>\u6709 \\(\\binom{n}{2}\\) \u500b\u5718\u968a\uff0c\u6311\u9078 \\(i,j\\) \u7684\u5718\u968a\u6b0a\u91cd\u70ba \\(\\frac{a_i+a_j}{2}\\)</p> </li> </ul> <p>\u5408\u8d77\u4f86\u5171\u6709 \\(\\frac{n(n+1)}{2}\\) \u500b\u5718\u968a\uff0c\u554f\u6b0a\u91cd\u7b2c \\(k\\) \u5927\u7684\u662f\u591a\u5c11\uff0c\u8f38\u51fa\u5206\u6578</p> <p>\\(n\\le 2\\times 10^5,k\\le \\frac{n(n+1)}{2},|a_i|\\le 10^9\\)</p> \u601d\u8def <p>\u5148\u5c07\u6240\u6709 \\(a_i\\) \u8b8a\u6210 \\(2a_i\\)\uff0c\u6211\u5011\u4e8c\u5206\u641c\u6700\u5927\u7684 \\(x\\) \u4f7f \\(\\ge x\\) \u7684\u5718\u968a\u6578\u91cf\u6070\u70ba \\(k\\)\uff0c\u9019\u6a23\u9078\u5169\u500b\u7684\u5c31\u80fd\u7528\u96d9\u6307\u91dd\u89e3\u6c7a\uff0c\u6700\u5f8c\u8f38\u51fa\u7b54\u6848\u518d\u770b x \u9664 2 \u662f\u5426\u53ef\u6574\u9664\u5373\u53ef</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\n#define int long long\n\nusing namespace std;\n\nint n, k;\nvector&lt;int&gt; a;\n\nint cal(int val) {\n    int ans = 0;\n    for (int i = 0, j = n; i &lt; n; i++) {\n        if (2 * a[i] &gt; val) break;\n        while (j &gt; i &amp;&amp; a[j - 1] + a[i] &gt; val) j--;\n        ans += j - i;\n    }\n    return ans;\n}\n\n// \u627e\u7b2c k \u5c0f\u7684 a[i] + a[j], \u5176\u4e2d i &lt;= j\n// \u82e5\u7b2c k \u5c0f\u7684\u7b54\u6848\u662f m, \u6703\u6eff\u8db3 cal(m-1) &lt; k &amp;&amp; cal(m) &gt;= k\nint solve() {\n    sort(a.begin(), a.end());\n\n    int l = 2 * a[0], r = 2 * a[n - 1];\n    while (l != r) {\n        int mid = l + (r - l) / 2;\n        if (cal(mid) &gt;= k) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return r;\n}\n\nsigned main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    cin &gt;&gt; n &gt;&gt; k;\n    k = n * (n + 1) / 2 - k + 1;  // \u6539\u6210\u627e\u7b2c k \u5c0f\n\n    a = vector&lt;int&gt;(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n\n    int ans = solve();\n\n    if (ans % 2 == 0) {\n        cout &lt;&lt; ans / 2 &lt;&lt; '\\n' &lt;&lt; 1 &lt;&lt; '\\n';\n    } else {\n        cout &lt;&lt; ans &lt;&lt; '\\n' &lt;&lt; 2 &lt;&lt; '\\n';\n    }\n    return 0;\n}\n</code></pre> 2023 \u5168\u570b\u8cfd\u6a21\u64ec\u8cfd pG. \u5403\u5348\u9910 (lunch) <p>\u7d66\u5169\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a,b\\)\uff0c\u5c07\u5169\u5169\u5206\u6210\u4e00\u7d44\uff0c\u5b9a\u7fa9 cost \u70ba\u6bcf\u7d44\u7684 \\(\\max(a_i, a_j) + \\max(b_i, b_j)\\) \u53d6 max\uff0c\u554f cost \u6700\u5c0f\u662f\u591a\u5c11</p> <p>\\(2\\le n\\le 10^5, 1\\le a_i, b_i \\le 10^8\\)</p> \u601d\u8def <p>\u6211\u5011\u5148\u56fa\u5b9a\u4e00\u500b\u7dad\u5ea6\uff0c\u4f7f\u5176\u5177\u6709\u55ae\u8abf\u6027\uff0c\u9019\u6a23\u5c31\u53ea\u8981\u8457\u91cd\u65bc\u8655\u7406\u53e6\u4e00\u500b\u7dad\u5ea6\u3002\u4e8c\u5206\u641c\u5f8c\uff0c\u6211\u5011\u5148\u5c07 \\(a\\) \u5927\u5230\u5c0f sort\uff0c\u5047\u8a2d\u76ee\u524d\u4e8c\u5206\u641c\u7684 threshold \u70ba \\(t\\)\uff0c\u5247 i \u53ef\u4ee5\u914d\u7684\u5c31\u662f\u7b26\u5408 \\(b_j\\le t - a_i\\)\uff0c\u90a3\u9019\u6642\u5019\u6211\u5011\u5c31\u8981\u4f86\u601d\u8003\u8981\u600e\u9ebc\u53d6\u6700\u597d\uff0c\u6211\u5011\u767c\u73fe \\(t-a_i\\) \u53ea\u6703\u55ae\u8abf\u905e\u589e\uff0c\u6240\u4ee5\u80fd\u53d6\u7684 \\(b_j\\) \u4e4b\u5f8c\u53ea\u6703\u8d8a\u4f86\u8d8a\u591a\uff0c\u90a3\u9ebc\u9019\u6642\u6211\u5011\u5c31\u6311 \\(b_j\\le t - a_i\\) \u4e2d \\(a_j\\) \u6700\u5927\u7684\uff0c\u56e0\u70ba\u9019\u6642\u6211\u5011\u624d\u80fd\u6709\u6548\u7684\u4f7f\u7528 \\(a_i\\) \u4f86\u8986\u84cb \\(a_j\\) \u7684\u8ca2\u737b\u3002</p> \u6cd5\u91cc\u897f\u6578\u5217 CS Academy - Farey Sequence <p>\u7d66 \\(n\\)\uff0c\u5e8f\u5217 \\(F_n\\) \u8209\u4f8b\u4f86\u8aaa\u5982\u4e0b :</p> <ul> <li> <p>\\(F_3\\) = 2/3, 1/2, 1/3</p> </li> <li> <p>\\(F_4\\) = 3/4, 2/3, 1/2, 1/3, 1/4</p> </li> <li> <p>\\(F_5\\)= 4/5, 3/4, 2/3, 3/5, 1/2, 2/5, 1/3, 1/4, 1/5</p> </li> </ul> <p>\u554f \\(F_n\\) \u7684\u5c0f\u5230\u5927 sort \u597d\u5f8c\u7684\u7b2c \\(k\\) \u9805 </p> \u601d\u8def <p>\u898b\u6b64\u8655</p>"},{"location":"search/binary_search/#_1","title":"\u5206\u6578\u898f\u5283","text":"USACO 2018 OPEN Talent Show G <p>\u7d66 n \u500b\u7269\u54c1\uff0c\u6bcf\u500b\u7269\u54c1\u6709\u91cd\u91cf w[i] \u548c\u50f9\u503c v[i]\uff0c\u9078\u4e00\u4e9b\u7269\u54c1\u4f7f\u5f97\u91cd\u91cf\u548c\u81f3\u5c11\u70ba W\uff0c\u4e14\u50f9\u503c\u548c\u8207\u91cd\u91cf\u548c\u7684\u6bd4\u503c\u8d8a\u5927\u8d8a\u597d\uff0c\u554f\u9019\u500b\u6bd4\u503c</p> <p>\\(n\\le 250, 1\\le W\\le 1000, 1\\le w_i\\le 10^6, 1\\le t_i\\le 10^3\\)</p> \u601d\u8def <p>\u301001 \u5206\u6578\u898f\u5283\u3011</p> <p>\\(\\begin{align}&amp;\\frac{\\sum v_i}{\\sum w_i} \\ge t \\\\ \\Rightarrow &amp;\\sum v_i - t \\cdot \\sum w_i\\ge 0 \\\\ \\Rightarrow &amp;\\sum (v_i - t \\cdot w_i)\\ge 0 \\end{align}\\)</p> <p>\u53bb\u4e8c\u5206 threshold t \u5f8c\uff0c\u6211\u5011\u53ea\u8981\u505a\u4e00\u500b\u80cc\u5305 dp\uff0c\u4f7f\u5f97 \\((v_i - t \\cdot w_i)\\) \u7576\u4f5c\u50f9\u503c\uff0c\\(w_i\\) \u4f5c\u70ba\u91cd\u91cf\uff0c\u770b dp[W] \u662f\u5426\u5927\u65bc\u7b49\u65bc 0 \u5373\u53ef\uff08\u628a\u91cd\u91cf\u5927\u65bc W \u7684\u90fd\u8a18\u9304\u5728 dp[W]\uff09\u3002</p> <pre><code>bool check(double t) {\n    for (int i = 1; i &lt;= n; i++) {\n        c[i] = (double)v[i] - t * w[i];\n    }\n    for (int i = 1; i &lt;= W; i++) {\n        dp[i] = -INF;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = W; j &gt;= 0; j--) {\n            int new_j = min(j + w[i], W);\n            dp[new_j] = max(dp[new_j], dp[j] + c[i]);\n        }\n    }\n    return dp[W] &gt;= 0;\n}\n</code></pre> <p>\u3010\u53e6\u89e3\u3011</p> <p>\u4e00\u7a2e\u6bd4\u8f03\u66b4\u529b\u7684\u601d\u60f3\uff1a\u6211\u5011\u76f4\u63a5\u505a\u80cc\u5305\uff0c\\(dp_{i,j}\\) \u8868\u793a\u524d \\(i\\) \u500b\u5976\u725b\u7e3d\u91cd\u91cf\u70ba \\(j\\) \u4e0b\u6700\u5927\u50f9\u503c\u3002\u6642\u9593\u8907\u96dc\u5ea6\u74f6\u9838\u662f\u4ec0\u9ebc\uff1f\u6211\u5011\u767c\u73fe\u7e3d\u91cd\u91cf\u548c\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5\u80cc\u5305\u5f88\u6162\u3002</p> <p>\u6709\u4e00\u500b\u5b9a\u7406\uff0c\u4fd7\u8a71\u53eb\u7cd6\u6c34\u5b9a\u7406\uff0c\u5c31\u662f \\(\\max(\\dfrac{a}{b}, \\dfrac{c}{d}) \\geq \\dfrac{a+c}{b+d}\\)\u3002\u9019\u7d66\u4e86\u6211\u5011\u4ec0\u9ebc\u555f\u767c\u5462\uff1f\u6211\u5011\u767c\u73fe\u52a0\u4e0a\u4e00\u500b\u7269\u54c1\u53ea\u6703\u8b93\u6bd4\u503c\u8b8a\u7684\u66f4\u5c0f\u3002</p> <p>\u6240\u4ee5\u8aaa\u6211\u5011\u5728\u8655\u7406\u80cc\u5305\u6642\uff0c\u52a0\u5230\u6eff\u8db3\u91cd\u91cf\u9650\u5236\u689d\u4ef6\u7684\u6642\u5019\u5c31\u505c\u6b62\u7d50\u7b97\u3002\u6bd4\u5982\uff0c\u7576\u524d\u91cd\u91cf\u70ba \\(x\\) \u7684\u7269\u54c1\u5617\u8a66\u7528 dp(i - 1, j) \u66f4\u65b0 dp(i, j + x) \u6642\uff0c\u767c\u73fe \\(j+x\\geq W\\)\uff0c\u90a3\u9ebc\u6211\u5011\u5c31\u76f4\u63a5\u7d50\u7b97\u9019\u7a2e\u53ef\u80fd\uff0c\u66f4\u65b0\u7b54\u6848\u3002</p> <p>\u6ce8\u610f\u6211\u5011\u9700\u8981\u6392\u5e8f\u628a\u6bd4\u8f03\u8f15\u7684\u7269\u54c1\u653e\u5728\u524d\u9762\uff0c\u4e0d\u7136\u91cd\u91cf\u5927\u7269\u54c1\u7d50\u7b97\u4e86\uff0c\u6211\u5011\u6703\u6c92\u8003\u616e\u5230\u4e00\u4e9b\u91cd\u91cf\u5c0f\u7684\u7269\u54c1\u7684\u586b\u5145\u7a7a\u9593\uff0c\u4f8b\u5982 \\(\\dfrac{1}{3}\\) \u8ddf \\(\\dfrac{1}{7}\\)\uff0c\u5047\u8a2d\u91cd\u91cf\u81f3\u5c11\u8981\u662f 7\uff0c\u90a3\u9ebc\u5982\u679c\u5148\u8f49\u79fb \\(\\dfrac{1}{7}\\)\uff0c\u6211\u5011 \\(\\dfrac{1}{3}\\) \u5c31\u7121\u5f9e\u8f49\u79fb\u4e86\uff08\u56e0\u70ba \\(\\dfrac{1}{7}\\) \u5c31\u76f4\u63a5\u8f49\u79fb\u5230\u754c\u5916\u4e86\uff0c\\(\\dfrac{1}{3}\\) \u6c92\u8fa6\u6cd5\u5f9e\u754c\u5916\u518d\u7e7c\u7e8c\u8f49\u79fb\uff0c\u53ea\u80fd\u5f9e\u754c\u5167\uff09\uff0c\u4f46\u82e5\u6211\u5011\u5148\u8b93\u8f15\u7684 \\(\\dfrac{1}{3}\\) \u5148\u8f49\u79fb\uff0c\u56e0\u70ba\u9084\u5728\u91cd\u91cf\u9650\u5236\u5167\uff0c\u6240\u4ee5 \\(\\dfrac{1}{7}\\) \u53ef\u4ee5\u76f4\u63a5\u518d\u5f9e \\(\\dfrac{1}{3}\\) \u5f80\u5f8c\u8f49\u79fb\u3002\u611f\u6027\u7406\u89e3\u5c31\u662f\u91cd\u91cf\u5927\u7684\u5148\u8f49\u79fb\u6703\u4e00\u4e0b\u5c31\u5230\u754c\u5916\uff0c\u4f7f\u5f97\u91cd\u91cf\u5c0f\u7684\u6839\u672c\u5c31\u653e\u4e0d\u9032\u4f86\u3002\u6642\u9593\u8907\u96dc\u5ea6\u70ba \\(O(nm)\\)\u3002</p>"},{"location":"search/binary_search/#_2","title":"\u96d9\u5c64\u4e8c\u5206\u641c","text":"Google Code Jam 2020 Round2 P1. Incremental House of Pancakes <p>\u6709\u5169\u5806\u9b06\u9905\uff0c\u5176\u4e2d\u5206\u5225\u6709 \\(L\\) \u548c \\(R\\) \u7247\uff0c\u7b2c \\(i\\) \u500b\u4eba\u60f3\u5f9e\u8f03\u591a\u7684\u90a3\u5806\u62ff\u8d70 \\(i\\) \u7247\u9b06\u9905\uff0c\u82e5\u5169\u5806\u9b06\u9905\u6578\u91cf\u7686\u4e0d\u8db3 \\(i\\) \u7247\uff0c\u5247\u9b06\u9905\u5e97\u6703\u7d50\u675f\u71df\u696d\u3002\u554f\u6709\u5e7e\u500b\u4eba\u80fd\u62ff\u5230\u9b06\u9905</p> <p>\\(1\\le L, R\\le 10^{18}\\)</p> JOI 2014 Final \u5e74\u8f6e\u86cb\u7cd5 <p>\u6709\u4e00\u500b\u74b0\u5f62\u86cb\u7cd5\uff0c\u5171\u5207\u6210 \\(n\\) \u584a\uff0c\u7b2c \\(i\\) \u584a\u5927\u5c0f \\(a_i\\)\u3002\u5c07\u74b0\u5f62\u86cb\u7cd5\u5206\u6210\u4e09\u500b\u5340\u584a\uff0c\u554f\u9019\u4e09\u500b\u5340\u584a\u5206\u5225\u7684\u5927\u5c0f\u7e3d\u548c\u6700\u5c0f\u503c\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(3\\le n\\le 10^5, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u5148\u4e8c\u5206 threshold t\uff0c\u7136\u5f8c\u5728 check(t) \u6642\uff0c\u679a\u8209\u6bcf\u500b i\uff0c\u7576\u4f5c\u5176\u4e2d\u4e00\u689d\u5206\u5272\u7dda\uff0c\u7528 lower_bound \u627e\u5230\u4e0b\u500b\u5206\u754c\u7dda j\uff0c\u518d\u6839\u64da j \u4f86\u7528 lower_bound \u627e\u5230\u4e0b\u500b\u5206\u754c\u7dda k\uff0c\u6eff\u8db3  sum[i, j] &lt;= t \u548c sum[j + 1, k] &lt;= t\u3002</p> <p>\u4f46\u6211\u5011\u5176\u5be6\u53ef\u4ee5\u7528\u55ae\u8abf\u6027\u505a\u5230 O(n) check\u3002\u4e00\u6a23\u662f\u679a\u8209\u5206\u754c\u7dda i\uff0c\u518d\u7528\u5169\u500b\u6307\u91dd l, r \u7dad\u8b77\u6eff\u8db3 sum[l, i] &lt;= t \u548c sum[i + 1, r] &lt;= t\uff0c\u5176\u4e2d l \u70ba i \u5de6\u908a\u6eff\u8db3\u689d\u4ef6\u7684\u6700\u5927 index\uff0cr \u70ba\u6eff\u8db3\u689d\u4ef6\u7684\u6700\u5c0f index\uff0c\u56e0\u70ba l, r \u90fd\u55ae\u8abf\u905e\u589e\uff0c\u6240\u4ee5\u4f7f\u7528 two pointer \u7dad\u8b77\u5373\u53ef\u3002</p> <p>\u9019\u6a23\u5c31\u53ef\u4ee5\u5728 \\(O(n\\log \\sum a_i)\\) \u6216 \\(O(n \\log^2 \\sum a_i)\\) \u7684\u6642\u9593\u8907\u96dc\u5ea6\u5167\u89e3\u6c7a\u8a72\u554f\u984c\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\n\nll n, sum;\nint a[100005];\n\nbool check(ll t) {\n    int l = 0, r = 0;\n    ll sum_l = 0, sum_r = 0;\n    for (int i = 0; i &lt; n; ++i) {\n        sum_l += a[i]; // sum[l, i]\n        sum_r -= a[i]; // sum[i + 1, r]\n        while (l &lt;= i &amp;&amp; sum_l - a[l] &gt;= t) {\n            sum_l -= a[l];\n            l++;\n        }\n        while (r &lt;= n - 1 &amp;&amp; sum_r &lt; t) {\n            sum_r += a[r];\n            r++;\n        }\n        if (sum_r &lt; t) return 0;\n        if (sum_l &gt;= t &amp;&amp; sum - sum_l - sum_r &gt;= t) return 1;\n    }\n    return 0;\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; a[i];\n        sum += a[i];\n    }\n    ll l = 0, r = sum;\n    while (r - l &gt; 1) {\n        ll mid = l + r &gt;&gt; 1;\n        if (check(mid)) {\n            l = mid;\n        } else {\n            r = mid;\n        }\n    }\n    cout &lt;&lt; l &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"search/binary_search/#_3","title":"\u984c\u76ee","text":"CF 1853 C. Ntarsis' Set <p>\u7d66\u4e00\u500b\u5305\u542b \\(1,2,\\ldots ,10^{1000}\\) \u6240\u6709\u6578\u5b57\u7684 Set \\(S\\)\uff0c\u6bcf\u5929\u5f9e \\(S\\) \u540c\u6642\u79fb\u9664\u7b2c \\(a_1,a_2,\\ldots ,a_n\\) \u500b\u6578\u5b57\uff0c\u554f \\(k\\) \u5929\u4e4b\u5f8c \\(S\\) \u4e2d\u6700\u5c0f\u7684\u6578\u5b57\u662f\u591a\u5c11</p> <p>\\(n,k\\le 2\\times 10^5,1\\le a_i \\le 10^9,a_1&lt;a_2&lt;\\ldots &lt; a_n\\)</p> hint <p>\u4ee4 \\(a_i\\le x &lt; a_{i+1}\\)\uff0c\u904e\u4e86\u4e00\u5929\u4e4b\u5f8c\uff0c\u5c0f\u65bc\u7b49\u65bc \\(x\\) \u7684\u6578\u5b57\u5c31\u6703\u5269\u4e0b \\(x-i\\) \u500b</p> \u601d\u8def <p>\u89c0\u5bdf :</p> <ul> <li> <p>\u4ee4\u7b54\u6848\u70ba ans\uff0c\u5728 ans \u4e4b\u524d\u7684\u6578\u5b57\u4e00\u5b9a\u90fd\u6703\u88ab\u79fb\u9664</p> </li> <li> <p>\u4ee4 \\(a_i\\le x &lt; a_{i+1}\\)\uff0c\u7576\u904e\u4e86\u4e00\u5929\u4e4b\u5f8c\uff0c\u5c0f\u65bc\u7b49\u65bc \\(x\\) \u7684\u6578\u5b57\u6703\u88ab\u79fb\u9664 \\(i\\) \u500b\uff0c\u4e5f\u5c31\u662f\u5c0f\u65bc\u7b49\u65bc \\(x\\) \u7684\u6578\u5b57\u5c31\u6703\u5269\u4e0b \\(x-i\\) \u500b\uff0c\u7136\u5f8c\u6211\u5011\u518d\u53bb\u627e \\(a_j\\le x - i &lt; a_{j+1}\\)\uff0c\u904e\u4e86\u4e00\u5929\u5f8c\uff0c\u5c0f\u65bc\u7b49\u65bc \\(x\\) \u7684\u6578\u5b57\u5c31\u6703\u5269\u4e0b \\(x-i-j\\) \u500b\uff0c\u4ee5\u6b64\u985e\u63a8</p> </li> </ul> <p> \\(a=[1,3,4],k=3,x=8\\) </p> <p>\u4e8c\u5206\u641c\u6700\u5f8c\u4e00\u500b\u5728\u300c\u79fb\u9664\u5340\u6bb5\u300d\u7684\u6578\u5b57\uff0c\u53bb check : mid \u4e4b\u524d\u7684\u6578\u5b57\u5728\u7d93\u904e \\(k\\) \u5929\u7684\u79fb\u9664\u5f8c\u5269\u4e0b\u5e7e\u500b </p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef double ld;\ntypedef pair&lt;ll, ll&gt; pll;\ntypedef pair&lt;int, int&gt; pii;\n#define F first\n#define S second\n#define all(x) x.begin(), x.end()\n#define MP(x, y) make_pair(x, y)\n\nconst int maxn = 2e5 + 10;\n\nint T = 1, n, k, a[maxn];\n\nbool check(ll x) {\n    ll tmp = x;\n    int ptr = n;\n\n    for (int i = 1; i &lt;= k; i++) {\n        while (ptr &amp;&amp; a[ptr] &gt; x) {\n            ptr--;\n        }\n\n        x -= ptr;\n    }\n\n    return (x == 0);\n}\n\nint main() {\n    cin &gt;&gt; T;\n\n    while (T--) {\n        cin &gt;&gt; n &gt;&gt; k;\n\n        for (int i = 1; i &lt;= n; i++) {\n            cin &gt;&gt; a[i];\n        }\n\n        ll l = 0, r = 1e18;\n        while (r - l &gt; 1) {\n            ll mid = (l + r) &gt;&gt; 1;\n\n            if (check(mid)) l = mid;\n            else r = mid;\n        }\n\n        cout &lt;&lt; r &lt;&lt; '\\n';\n    }\n}\n</code></pre> USACO 2017 DEC Greedy Gift Takers P <p>\u6709 \\(n\\) \u982d\u725b\u6392\u6210\u4e00\u6392\uff0c\u7de8\u865f\u5f9e 1 \u5230 n\uff0c\u6bcf\u6b21\u968a\u9996\u7684\u725b\u6703\u62ff\u5230\u79ae\u7269\uff0c\u5047\u8a2d\u4ed6\u662f\u7de8\u865f\u7b2c \\(i\\) \u982d\u725b\uff0c\u5247\u62ff\u4e86\u79ae\u7269\u5f8c\u6703\u88ab\u653e\u5230\u5012\u6578\u7b2c \\(c_i\\) \u7684\u4f4d\u7f6e\uff080-base\uff09\uff0c\u554f\u6709\u5e7e\u982d\u725b\u7576\u62ff\u4e0d\u5230\u79ae\u7269</p> <p>\\(n\\le 10^5, 0\\le c_i\\le n - 1\\)</p> \u601d\u8def <p>\u6211\u5011\u5148\u8003\u616e\u4ec0\u9ebc\u6a23\u7684\u725b\u62ff\u4e0d\u5230\u79ae\u7269\u3002\u62ff\u4e0d\u5230\u79ae\u7269\u4ee3\u8868\u5b83\u524d\u9762\u6240\u6709\u7684\u725b\u5f62\u6210\u4e86\u4e00\u500b\u5faa\u74b0\uff08\u9019\u908a\u8aaa\u7684\u5faa\u74b0\u4e0d\u4e00\u5b9a\u662f\u771f\u6b63\u7684\u74b0\uff0c\u53ef\u80fd\u5c31\u53ea\u662f\u67d0\u5e7e\u9805\u5728\u5faa\u74b0\u800c\u4ee5\uff0c\u4e0d\u904e\u9019\u4e0d\u5f71\u97ff\u6211\u5011\u7684\u505a\u6cd5\uff09\uff0c\u5c07\u5b83\u64cb\u4f4f\u4e86\u3002\u800c\u4ed6\u5f8c\u9762\u7684\u725b\u4e5f\u4e0d\u53ef\u80fd\u5f97\u5230\uff0c\u56e0\u70ba\u76f8\u5c0d\u9806\u5e8f\u4e0d\u8b8a\u3002\u6240\u4ee5\u9019\u7d66\u4e86\u6211\u5011\u4e8c\u5206\u7684\u689d\u4ef6\uff0c\u6211\u5011\u53ef\u4ee5\u53bb\u4e8c\u5206\u5faa\u74b0\u5340\u6bb5\u7684\u6700\u672b\u7aef t\uff0c\u770b t \u662f\u5426\u4e5f\u662f\u5faa\u74b0\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u5982\u679c\u4e00\u500b\u725b\u662f\u6709\u6a5f\u6703\u62ff\u5230\u79ae\u7269\u7684\uff0c\u90a3\u4ee3\u8868\u524d\u9762\u7684\u725b\u5728\u4e00\u6b21\u53c8\u4e00\u6b21\u7684\u5faa\u74b0\u4e2d\u6703\u628a\u4e00\u982d\u982d\u7684\u725b\u5f80 t \u5f8c\u9762\u4e1f\uff0c\u6700\u5f8c\u8b93 t \u8dd1\u5230\u6700\u524d\u9762\u3002\u800c\u6700\u5bb9\u6613\u5be6\u73fe\u8b93\u300c\u672c\u4f86\u5728 t \u524d\u9762\u7684\u725b\u90fd\u8dd1\u5230\u4ed6\u5f8c\u9762\u300d\u7684\u8fa6\u6cd5\uff0c\u5c31\u662f\u8b93 t \u524d\u9762\u7684\u725b\u6309\u7167 \\(c_i\\) \u5c0f\u5230\u5927\u63d2\u5165\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u9019\u7a2e\u65b9\u6cd5\u4f86\u8caa\u5fc3\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u8b93 t \u524d\u9762\u7684\u725b\u6309\u7167 \\(c_i\\) \u5c0f\u5230\u5927\u63d2\u5165\uff0c\u5982\u679c\u662f\u63d2\u5165\u5230 t \u5f8c\u9762\uff0c\u90a3 t \u5c31\u53ef\u4ee5\u5f80\u524d\u9032\u4e00\u683c\uff0c\u4e5f\u5c31\u662f t--\uff0c\u4f46\u5982\u679c\u63d2\u5165\u5230\u4e86 t \u7684\u524d\u9762\uff0c\u90a3\u9ebc t \u5c31\u4e0d\u53ef\u80fd\u7372\u5f97\u79ae\u7269\u4e86\u3002\u6700\u5f8c\uff0c\u5982\u679c\u6240\u6709\u725b\u90fd\u63d2\u5165\u5230\u4e86 t \u7684\u4f4d\u7f6e\u4e4b\u5f8c\uff0c\u8868\u793a\u6b64\u725b t \u80fd\u62ff\u5230\u79ae\u7269\u3002</p> <p> </p> <p>\u56e0\u70ba\u984c\u76ee\u7d66\u51fa\u7684\u4f4d\u7f6e\u662f\u5f9e\u5f8c\u5f80\u524d\u6578\u7684\uff0c\u6240\u4ee5\u4ee3\u78bc\u7684\u4f4d\u7f6e\u90fd\u662f\u4ee5\u5f9e\u6700\u5f8c\u4e00\u500b\u5411\u524d\u7684\u82e5\u5e72\u500b\u7684\u5f62\u5f0f\u8868\u793a\u3002</p> <p>\u4ee4 a[i] = n - c[i]\u3002\u5047\u8a2d\u6709\u67d0\u4e00\u9805\u5728\u6700\u5f8c\u7d93\u904e\u7121\u9650\u6b21\u7684\u5faa\u74b0\u5f8c\uff0c\u4ed6\u505c\u7559\u5728\u7b2c k \u500b\uff0c\u4ee3\u8868\u4ed6\u524d\u9762\u7684\u6771\u897f\u7684\u4e0d\u6703\u8df3\u8d85\u904e k\uff0c\u4e5f\u5c31\u662f\u8aaa\u5c0d\u65bc\u524d\u9762\u7684\u6578\u91cf k - 1 \u7684\u9019\u4e9b\u6771\u897f\uff0c\u4ed6\u5011\u7684 a[i] \u90fd\u662f &lt;= k - 1\u3002</p> <p>\u6240\u4ee5\u9019\u500b\u5206\u6790\u80fd\u5f15\u9818\u6211\u5011\u5230\u4e00\u500b greedy \u7684\u4f5c\u6cd5\uff1a\u5982\u679c a[i] &lt;= k \u7684\u725b\u591a\u65bc k \u500b\uff0c\u5247\u9019k \u500b\u725b\u5c31\u6703\u4e00\u76f4\u5361\u5728\u9019\u524d k \u500b\u4f4d\u7f6e\u3002\u6211\u5011\u53ef\u4ee5\u5148\u4e8c\u5206\u5206\u754c\u7dda t\uff0c\u679a\u8209 k = [1, t)\uff0c\u770b\u5faa\u74b0\u5340\u6bb5 a[i] &lt;= k \u7684\u725b\u662f\u5426\u591a\u65bc k \u500b\uff0c\u5982\u679c\u591a\u65bc\uff0c\u8b49\u660e\u4e8c\u5206\u7b54\u6848\u5927\u4e86\uff0c\u9700\u8981\u7e2e\u5c0f\u6709\u5340\u9593\uff0c\u53cd\u4e4b\u5247\u7e2e\u5c0f\u5de6\u5340\u9593\uff0c\u76f4\u5230\u627e\u5230\u7b54\u6848\u4f4d\u7f6e\u70ba\u6b62\u3002</p> code1 <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5 + 5;\nint a[N], b[N], n;\n\nbool check(int t) {\n    // \u5faa\u74b0\u5340\u9593 [1, t)\n    for (int i = 1; i &lt; t; i++) {\n        b[i] = a[i];\n    }\n    sort(b + 1, b + t);\n    int pos = n - now;\n    for (int i = 1; i &lt; t; i++) {\n        if (b[i] &gt; pos) return 0;\n        pos++;\n    }\n    return 1;\n}\n\nsigned main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    int l = 1, r = n;\n    while (l &lt;= r) {\n        int mid = (l + r) / 2;\n        if (check(mid)) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    cout &lt;&lt; n - r &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> code2 <pre><code>#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 100010;\nint a[N];\nint n;\n\nbool check(int t) {\n    int s[N] = {0}, sum = 0;\n    for (int i = 1; i &lt; t; i++) {\n        s[a[i]]++;\n    }\n    for (int i = 1; i &lt; t; i++) {\n        sum += s[i];\n        if (sum &gt;= i) return true;\n    }\n    return false;\n}\n\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i], a[i] = n - a[i];\n    int l = 0, r = n;\n    while (l &lt; r) {\n        int mid = l + r &gt;&gt; 1;\n        if (check(mid))\n            r = mid;\n        else\n            l = mid + 1;\n    }\n    cout &lt;&lt; n - r + 1 &lt;&lt; endl;\n}\n</code></pre> CF 1856 C. To Become Max <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a\\)\uff0c\u4f60\u80fd\u505a\u4ee5\u4e0b\u64cd\u4f5c\u81f3\u591a \\(k\\) \u6b21\uff0c\u4e26\u8f38\u51fa \\(\\max(a_1, a_2, \\ldots a_n)\\) \u6700\u5927\u80fd\u5230\u591a\u5c11 :</p> <ul> <li>\u9078\u4e00\u500b index \\(i\\) \u6eff\u8db3 \\(1\\le i \\le n - 1\\) \u4e14 \\(a_{i}\\le a_{i+1}\\)\uff0c\u5c07 \\(a_i\\) \u52a0 \\(1\\)</li> </ul> <p>\\(2\\le n\\le 1000,1\\le k\\le 10^8,1\\le a_i \\le 10^8\\)</p> \u601d\u8def <p>\u8003\u616e\u4e8c\u5206\u641c \\(x\\)\uff0c\u6aa2\u67e5\u662f\u5426\u80fd\u4f7f \\(\\max(a_1,\\ldots, a_n) \\ge x\\)\u3002\u5c0d\u65bc\u4e00\u500b\u6700\u5927\u503c \\(x\\)\uff0c\u82e5\u6b64\u6700\u5927\u503c\u662f \\(a_i=x\\)\uff0c\u53ef\u4ee5\u89c0\u5bdf\u5230\u5f8c\u9762\u6703\u6709\u4e00\u6bb5\u9023\u7e8c\u905e\u6e1b\u5e8f\u5217\uff0c\u4e14\u6070\u597d\u662f\u4ee5 \\(1\\) \u6700\u70ba\u5dee\u5728\u905e\u6e1b\uff0c\u56e0\u70ba \\(a_i\\) \u8981\u662f \\(x\\)\uff0c\\(a_{i+1}\\) \u5c31\u5fc5\u9808\u9054\u5230 \\(x-1\\)\uff0c\\(a_{i+2}\\) \u5c31\u5fc5\u9808\u9054\u5230 \\(x-2\\)\uff0c\u4ee5\u6b64\u985e\u63a8\uff0c\u4e5f\u6709\u53ef\u80fd\u5230\u67d0\u500b \\(a_{i+}\\) \u4ed6\u672c\u8eab\u5c31\u5df2\u7d93\u5927\u65bc\u7b49\u65bc\u8981\u9054\u5230\u7684 threshold\uff0c\u90a3\u9805\u5373\u70ba\u905e\u6e1b\u5e8f\u5217\u7684\u7d42\u6b62\u8655\u3002</p> <p>\u6240\u4ee5\u6211\u5011\u5728\u6aa2\u67e5\u7684\u6642\u5019\u53ea\u9700\u679a\u8209\u6bcf\u4e00\u9805\u4f5c\u70ba\u6700\u5927\u503c\uff0c\u7136\u5f8c\u770b \\(k\\) \u662f\u5426\u80fd\u5920\u61c9\u4ed8\u8981\u5c07 \\(a_i=x\\) \u7684\u6210\u672c\u5373\u53ef\uff08\u8a73\u898b\u4ee3\u78bc\uff09\u3000</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nint n, k;\nint a[maxn];\n\nbool check(int x) {\n    for (int i = 0; i &lt; n; i++) {\n        int t = x, cnt = 0;\n        for (int j = i; j &lt; n; j++) {\n            if (a[j] &gt;= t) {\n                return true;\n            }\n            cnt += (t - a[j]);\n            if (cnt &gt; k) {\n                break;\n            }\n            t--;\n        }\n    }\n    return false;\n}\n\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    int mx = *max_element(a, a + n);\n\n    int l = mx, r = mx + k + 1;\n    while (r - l &gt; 1) {\n        int mid = (l + r) / 2;\n        if (check(mid)) l = mid;\n        else r = mid;\n    }\n    cout &lt;&lt; l &lt;&lt; '\\n';\n}\n\nsigned main() {\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n} \n</code></pre> 2021 \u9644\u4e2d\u6a21\u7af6 II pD. \u8abf\u8272\u76e4 (Palette) <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a_1 ,\\ldots ,a_n\\)\uff0c\u6709 \\(q\\) \u7b46\u8a62\u554f\u5982\u4e0b :</p> <ul> <li>\\(\\text{query}(l,r):\\) \u554f \\(a_l \\sim a_r\\) \u88e1\u6709\u5e7e\u500b subarray \u6eff\u8db3\u6700\u5927\u6700\u5c0f\u5dee \\(\\le k\\)</li> </ul> <p>\\(n,k\\le 10^6,c_i\\le 10^6,q\\le 10^6\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u6bcf\u500b i \u5b9a\u7fa9 last[i] = \u5f9e i \u958b\u59cb\u6700\u5927\u53ef\u4ee5\u5230\u54ea\u500b index \u6eff\u8db3\u5340\u9593 max - min &lt;= k</p> <p>\u9019\u53ef\u4ee5\u7528 two pointer + sparse table \u9810\u8655\u7406</p> <p>\u7136\u5f8c\u5c0d\u65bc query(l, r) \u5c31\u53ef\u4ee5\u4e8c\u5206\u641c\u6700\u5927\u7684\u5206\u754c\u9ede t\uff0c\u6eff\u8db3\u524d\u9762\u7684 last[i] \u90fd &lt;= r\uff0c\u5f8c\u9762\u7684\u90fd &gt; r\u3002\u524d\u9762\u7684\u53ef\u4ee5\u5c0d\u65bc last[ ] \u7dad\u8b77 prefix sum\uff0c\u5f8c\u9762\u7528\u6578\u5b78\u89e3 O(1) \u7b97\u5373\u53ef</p> LOJ #2086. \u300cNOI2016\u300d\u533a\u95f4 <p>\u7d66 \\(n\\) \u500b interval \\([l_i,r_i]\\)\uff0c\u9078 \\(m\\) \u500b interval\uff0c\u4f7f\u5f97\u81f3\u5c11\u6709\u4e00\u500b point \u88ab\u9019 \\(m\\) \u500b interval \u90fd\u8986\u84cb\u5230\u3002\u554f\u9078\u51fa\u4f86\u7684\u6700\u5927 interval \u9577\u5ea6 - \u6700\u5c0f interval \u9577\u5ea6\u6700\u5c0f\u53ef\u4ee5\u662f\u591a\u5c11\uff0c\u6216\u7121\u89e3\u3002</p> <p>\\(n\\le 5\\times 10^5, m\\le 2\\times 10^5, 0\\le l_i\\le r_i\\le 10^9\\)</p> \u601d\u8def <p>\u5c07 interval \u6309\u7167\u9577\u5ea6\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9019\u6a23\u6211\u5011\u5c31\u53ef\u4ee5\u4f7f\u7528 two pointer \u5c0d\u65bc\u6bcf\u500b l\uff0c\u627e\u51fa\u6700\u5c11\u5230\u54ea\u500b r\uff0c\u9078 l, ..., r \u7684\u9019\u4e9b interval \u662f\u5408\u6cd5\u7684\uff0c\u53ef\u4ee5\u7528\u7dda\u6bb5\u6a39\u6aa2\u67e5\u3002</p> 2021 \u5168\u570b\u8cfd pH. \u5929\u7afa\u9f20\u904a\u884c <p>\u6709 \\(n\\) \u96bb\u5929\u7afa\u9f20\uff0c\u7b2c \\(i\\) \u96bb\u7684\u9ad8\u5ea6\u662f \\(h_i\\)\u3002\u4f60\u8981\u9078 \\(p\\) \u7d44\u5404 \\(k\\) \u96bb\uff0c\u7136\u5f8c\u628a\u6bcf\u4e00\u7d44\u7684\u5929\u7afa\u9f20\u6392\u6210\u4e00\u500b\u74b0\uff0c\u4f7f\u5f97\u5169\u5169\u76f8\u9130\u7684\u5929\u7afa\u9f20\u9ad8\u5ea6\u5dee\u7684\u6700\u5927\u503c\u76e1\u91cf\u5c0f\u3002</p> <p>\\(1\\le n\\le 10^6,1\\le h_i\\le 10^9\\)</p> subtask subtask 1subtask 2subtask 3subtask 4 <p>\\(k=n,n\\le 10,p=1\\)</p> <p>\\(k=n,n\\le 10^5,p=1\\)</p> <p>\\(p=1\\)</p> <p>\u7121\u984d\u5916\u9650\u5236</p> \u601d\u8def <p>\u986f\u7136\u7531\u5c0f\u5230\u5927 sort \u597d\u6703\u4f7f\u74b0\u7684\u982d\u8ddf\u5c3e\u7684\u9ad8\u5ea6\u5dee\u6700\u5927\u3002\u6211\u5011\u5148\u66b4\u529b\u505a subtask 1\uff0c\u4f8b\u5982 :</p> \\[ [1,2,3,4,5,6,7,8] \\to [1, 3, 5, 7, 8, 6, 4, 2] \\] <p>\u6703\u89c0\u5bdf\u5230\u7b54\u6848\u5c31\u662f \\(\\max \\{ h_i \u2212 h_{i\u22122} \\}\\)\u3002\u5c0d\u65bc subtask 3 \\(p=1\\)\uff0c\u986f\u7136\u9078\u9023\u7e8c\u7684 \\(k\\) \u500b\u4e00\u5b9a\u6700\u597d\uff0c\u53ef\u7528 sliding window \u7dad\u8b77\u7b54\u6848\u3002\u5c0d\u65bc\u6eff\u5206\u89e3\uff0c\u6211\u5011\u53bb\u4e8c\u5206 threshold \\(t\\)\uff0c\u6aa2\u67e5\u6700\u524d\u9762\u7684 \\(ans \\le t\\) \u7684\u5340\u9593\u662f\u5426\u6709 \\(p\\) \u500b\u5373\u53ef\uff0c\u8907\u96dc\u5ea6 \\(O(n \\log C)\\)</p> 2021 TOI pB. \u6383\u5730\u6a5f\u5668\u4eba 30% <p>\\(n\\) \u9593\u6559\u5ba4\uff0c\u4e00\u958b\u59cb\u4f60\u5728\u7b2c\u4e00\u9593\uff0c\u7d66\u4f60 \\(T\\) \u5206\u9418\u7684\u6253\u6383\u6642\u9593\u6bcf\u9593\u6559\u5ba4\u7b2c\u4e00\u5206\u9418\u53ef\u4ee5\u5438\u5230 \\(s[i]\\) \u7684\u7070\u5875\uff0c\u6bcf\u5206\u9418\u905e\u6e1b \\(d[i]\\) \u500b\u7070\u5875\uff0c\u5f9e\u7b2c \\(i\\) \u9593\u6559\u5ba4\u79fb\u52d5\u5230\u7b2c \\(i+1\\) \u9593\u6559\u5ba4\u82b1 \\(t[i]\\) \u7684\u6642\u9593\uff0c\u554f\u9019 \\(T\\) \u5206\u9418\u6700\u591a\u53ef\u4ee5\u6383\u5230\u591a\u5c11\u7070\u5875</p> <p>\\(n\\le 1000, m\\le 10^9,0\\le t[i], d[i] \\le 10^9, 1\\le s[i] \\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u5148\u679a\u8209\u6383\u5230\u54ea\u9593\u6559\u5ba4\uff0c\u5c07\u4e2d\u9593\u63db\u6559\u5ba4\u7684\u6642\u9593\u6263\u6389\uff0c\\(k=T-t_1-t_2-..t_{e}\\)\u3002\u4f9d\u7167 greedy \u7684\u60f3\u6cd5\uff0c\u6211\u5011\u4e00\u5b9a\u662f\u6bcf\u6b21\u62ff\u6700\u5927\u7684\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u53bb\u4e8c\u5206\u4e00\u500b threshold \\(x\\) \u6eff\u8db3\u6700\u5c0f\u53ef\u4ee5\u6383\u5230 \\(x\\) \u500b\u7070\u5875\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define pii pair&lt;int, int&gt;\nusing namespace std;\n\nconst int INF = 9e18;\nconst int maxn = 1e3 + 5;\nint s[maxn], d[maxn], t[maxn];\nint n, m;\n\nint check (int idx, int x, int k) {\n    int res = 0;\n    for (int i = 1; i &lt;= idx; i++) {\n        if (d[i] == 0) {\n            if (s[i] &gt;= x) return true;\n            // \u4ee3\u8868\u6709\u7121\u9650\u500b a_x \u6216 b_x \u90a3 (\u7121\u9650)\u4e00\u5b9a\u5927\u65bc k\n            continue;\n        }\n        if (s[i] &gt;= x) {\n            res += (s[i] - x) / d[i] + 1;\n        }\n    }\n    return res &gt;= k; \n}\n\nint get_ans(int idx, int x, int k) {\n    int res = 0;\n    int x_cnt = 0; // \u6070\u7b49\u65bc x \u7684\u6709\u5e7e\u500b\n    int greater_cnt = 0; // &gt; x \u7684\u6709\u5e7e\u500b\n    for (int i = 1; i &lt;= idx; i++) {\n        if (s[i] &gt; x) {\n            int mx = s[i];\n            int mn = s[i] - (s[i] - x) / d[i] * d[i];\n            int tmp = (s[i] - x) / d[i];\n            if (mn == x) {\n                mn += d[i];\n                x_cnt++;\n            }\n            int c = (mx-mn) / d[i] + 1;\n            res += (mx+mn) * c / 2LL;\n            greater_cnt += c;\n        }\n        if (s[i] == x) {\n            if (d[i] != 0) x_cnt++;\n            else x_cnt = INF;\n        }\n    }\n    res += min(x_cnt, k - greater_cnt) * x;\n    // \u771f\u6b63\u53ef\u53d6\u7b49\u65bcx \u7684\u91cf = min(\u7b49\u65bc x \u7684, \u5168 - \u5927\u65bc x \u7684)\n    return res;\n}   \n\nvoid init() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt; n; i++) {\n        cin &gt;&gt; t[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; s[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; d[i];\n    }\n}\n\nvoid work () {\n    int ans = 0;\n    int k = m;\n    for (int i = 1; i &lt;= n; i++) {\n        k -= t[i - 1];\n        if (k &lt; 0) continue;\n        // bin search x: min dust per minute\n        int l = 0, r = 2e9;\n        while (l &lt; r - 1) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (check(i, mid, k)) {\n                l = mid;\n            } else { // \u6642\u9593\u9084\u6709\u5269, mid \u4e0d\u53ef\u80fd\u662f\u7b54\u6848\n                r = mid;\n            }\n        } \n        ans = max(ans, get_ans(i, l, k));\n    }\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n\nsigned main () {\n    init();\n    work();\n}\n</code></pre> CS Academy - K Inversions <p>\u7d66 \\(n,k\\)\uff0c\u6c42 \\(1\\ldots n\\) \u7684 permutation \u6eff\u8db3\u6070\u6709 \\(k\\) \u500b\u9006\u5e8f\u6578\u5c0d\uff0c\u8f38\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684</p> <p>\\(2\\le n\\le 10^5, 0\\le k\\le \\frac{n(n+1)}{2}\\)</p> \u601d\u8def <p>\u9996\u5148\u8003\u616e\u958b\u982d\u8981\u653e\u54ea\u500b\u6578\u5b57\uff0c\u53ef\u4ee5\u4e8c\u5206\u641c\u6700\u5c0f\u53ef\u4ee5\u653e\u54ea\u500b\u6578\u5b57\uff0c\u7136\u5f8c\u5c07\u9019\u683c\u522a\u6389\u5c31\u8b8a\u5b50\u554f\u984c\u4e86</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#include &lt;bits/extc++.h&gt;\nusing namespace __gnu_pbds;\nusing namespace std;\n\n#define ll long long\ntypedef tree&lt;int, null_type, less&lt;int&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; ordered_set;\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    ll n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    ordered_set st;\n    for (int i = 1; i &lt;= n; i++) st.insert(i);\n    vector&lt;int&gt; ans;\n    for (ll i = n - 1; i &gt;= 0; i--) {\n        int l = 0, r = st.size() - 1;\n        while (l != r) {\n            int mid = (l + r) / 2;\n            if (mid + i * (i - 1) / 2 &gt;= k) r = mid;\n            else l = mid + 1;\n        }\n        ans.push_back(*st.find_by_order(l));\n        k -= l;\n        st.erase(st.find_by_order(l));\n    }\n    for (auto &amp;i : ans) cout &lt;&lt; i &lt;&lt; ' ';\n}\n</code></pre> 2021 \u5168\u570b\u8cfd pD. \u6c7d\u8eca\u4e0d\u518d\u7e5e\u5708\u5708 <p>\u7d66\u4e00\u5f35 \\(n\\) \u9ede \\(m\\) \u908a\u7684\u6709\u5411\u5716\uff0c\u53cd\u8f49\u7b2c \\(i\\) \u689d\u908a\u81f3\u5c11\u8981\u64c1\u6709\u6b0a\u9650 \\(c_i\\)\u3002\u554f\u81f3\u5c11\u8981\u6709\u591a\u5c11\u6b0a\u9650\u624d\u80fd\u8b93\u6574\u5f35\u5716\u6c92\u6709\u74b0 ? \u4e26\u8f38\u51fa\u53cd\u8f49\u65b9\u6848\u3002</p> <p>\\(n\\le 10^5, m\\le 10^5, 1\\le c_i\\le 10^9\\)</p> \u601d\u8def <p>\u4e8c\u5206\u641c\u6b0a\u9650\uff0c\u5728 check \u7684\u6642\u5019\u53ea\u8003\u616e\u6b0a\u9650 &gt; t \u6240\u5f62\u6210\u7684\u5716\u662f\u5426\u6709\u74b0\uff08\u53ef\u4ee5\u7528\u62d3\u6a38\u6392\u5e8f\u6aa2\u67e5\uff09\uff0c\u56e0\u70ba\u5176\u4ed6\u908a\u4e00\u5b9a\u53ef\u4ee5\u6309\u7167\u62d3\u6a38\u9806\u5e8f\u6bd4\u8f03\u5c0f\u7684\u6307\u5411\u6bd4\u8f03\u5927\u7684\u3002</p> \u5168\u570b\u8cfd 2019 \u53f2\u8482\u82ac\u8207\u7375\u4eba / LeetCode 363. Max Sum of Rectangle No Larger Than K <p>\u7d66\u4f60\u4e00\u500b \\(n\\times m\\) \u7684 Matrix\uff0c\u627e\u51fa\u4e26\u50b3\u56de\u77e9\u5f62\u5340\u57df\u7684\u4e0d\u8d85\u904e \\(k\\) \u7684\u6700\u5927\u6578\u503c\u548c</p> <p>\\(1\\le n,m \\le 100, -100\\le a_{i,j}\\le 100, -10^5 \\le k\\le 10^5\\)</p> \u601d\u8def <p>\u679a\u8209 row \\(l,r\\)\uff0c\u5c07\u4ed6\u58d3\u6210\u4e00\u7dad\u7684\u554f\u984c\u3002\u9019\u6a23\u5c31\u53ef\u4ee5\u7528\u524d\u7db4\u548c + \u4e8c\u5206\u641c\uff08\u5728 set \u5167 lower bound\uff09\u89e3\u6c7a</p> TIOJ  1669 . \u5f81\u6230\u5929\u9f8d\u570b <p>\u7d66\u4e00\u500b \\(n\\times m\\) \u7684 grid\uff0cgrid \u4e0a\u7684\u6578\u5b57\u53ea\u6703\u662f \\(-1,0,1\\)\uff0c\u9078\u4e00\u500b\u77e9\u5f62\u5340\u57df\u6eff\u8db3\u5340\u57df\u5167\u7684\u6578\u5b57\u7e3d\u548c \\(\\ge k\\)\uff0c\u554f\u9019\u500b\u77e9\u5f62\u5340\u57df\u7684\u9762\u7a4d\u6700\u5c11\u53ef\u4ee5\u662f\u591a\u5c11</p> <p>\\(1\\le n,m \\le 500, 0\\le k\\le 2.5\\times 10^5\\)</p> \u601d\u8def <p>\u4e00\u6a23\u679a\u8209 row \\(l,r\\)\uff0c\u5c07\u4ed6\u58d3\u6210\u4e00\u7dad\u7684\u554f\u984c\uff0c\u6211\u5011\u7576\u7136\u53ef\u4ee5\u53bb\u4e8c\u5206\u641c\uff0c\u4f46\u662f\u6703 TLE\u3002\u5176\u5be6\u5c31\u662f\u9019\u984c\uff0c\u5177\u9ad4\u505a\u6cd5\u53ef\u53c3\u8003\u9019\u7bc7\u984c\u89e3\u3002\u89c0\u5bdf\u5230\u82e5\u4e00\u500b\u9ede \\(i\\) \u7684 prefix sum \u82e5\u6bd4 \\(i-1\\) \u7684 prefix sum \u9084\u5c0f\uff0c\u90a3\u5c0d\u65bc\u5f8c\u9762\u7684\u80af\u5b9a\u9078 \\(i\\) \u6bd4\u8f03\u597d\u3002\u9084\u6709\uff0c\u5c0d\u65bc\u4e00\u500b \\(i\\) \u82e5\u5df2\u7d93\u80fd\u8ddf \\(j\\) \u914d\uff0c\u90a3 \\(j\\) \u4e4b\u5f8c\u90fd\u4e0d\u7528\u8003\u616e\u4e86\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u55ae\u8abf\u968a\u5217\u7dad\u8b77\uff0c\u5c07\u5df2\u7d93\u80fd\u914d\u5730\u7d66 pop \u6389</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define F first\n#define S second\nusing namespace std;\n\nint a[505][505];\n\nsigned main() {\n    int n, m, K;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; K;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            char c;\n            cin &gt;&gt; c;\n            if (c == '+') {\n                a[i][j] += 1;\n            } else if (c == '-') {\n                a[i][j] -= 1;\n            }\n            a[i][j] += a[i - 1][j];\n        }\n    }\n    int mn = 2e9;\n    for (int lx = 1; lx &lt;= n; lx++) {\n        for (int rx = lx; rx &lt;= n; rx++) {\n            vector&lt;int&gt; s(m + 1);\n            deque&lt;pair&lt;int, int&gt;&gt; dq;\n            dq.push_back({0, 0});\n            for (int i = 1; i &lt;= m; i++) s[i] = s[i - 1] + (a[rx][i] - a[lx - 1][i]);\n            for (int i = 1; i &lt;= m; i++) {\n                while (!dq.empty() &amp;&amp; s[i] - dq.front().F &gt;= K) {\n                    mn = min(mn, (i - dq.front().S) * (rx - lx + 1));\n                    dq.pop_front();\n                }\n                while (!dq.empty() &amp;&amp; dq.back().F &gt;= s[i]) {\n                    dq.pop_back();\n                }\n                dq.push_back({s[i], i});\n            }\n        }\n    }\n    if (mn == 2e9) {\n        cout &lt;&lt; -1 &lt;&lt; \"\\n\";\n    } else {\n        cout &lt;&lt; mn &lt;&lt; \"\\n\";\n    }\n}\n</code></pre> 2024 TOI \u6a21\u64ec\u8cfd I pD. \u2f69\u677f\u64e6\u6578\u91cf <p>\u7d66\u4e00\u500b \\(n\\times m\\) \u7684 Grid\uff0c\u6bcf\u683c \\(a_{i,j}\\) \u53ea\u6703\u662f 0 \u6216 1\u3002\u4e00\u958b\u59cb\u9019\u500b Grid \u6bcf\u683c\u90fd\u662f 1\uff0c\u6709\u4e00\u500b\u77e9\u5f62\u677f\u64e6\u53ef\u4ee5\u7528\u4efb\u610f\u6b21\uff0c\u6bcf\u6b21\u5c07\u4e00\u500b\u5177\u77e9\u5f62\u5340\u57df\u90fd\u8b8a 0\uff0c\u554f\u6709\u5e7e\u7a2e\u77e9\u5f62\u677f\u64e6\u80fd\u64e6\u51fa\u7576\u524d\u7684 Grid</p> <p>\\(1\\le n, m\\le 500\\)</p> \u601d\u8def <p>\u8ddf\u4e0a\u9762\u7684\u984c\u76ee\u76f8\u540c\uff0c\u6211\u5011\u8003\u616e\u679a\u8209\u677f\u64e6\u7684\u5176\u4e2d\u4e00\u7dad\uff08\u9577\uff09\uff0c\u5c07\u53e6\u5916\u4e00\u7dad\uff08\u5bec\uff09\u4f7f\u7528\u4e8c\u5206\u641c\u770b\u6709\u5e7e\u7a2e\u7b26\u5408\uff0c\u6aa2\u67e5\u7684\u90e8\u5206\u5c31\u7528 O(nm) \u679a\u8209\u6bcf\u4e00\u683c\uff0c\u770b\u5df2\u9019\u683c\u70ba\u5de6\u4e0a\u89d2\u662f\u5426\u53ef\u4ee5\u64e6\uff0c\u5982\u679c\u53ef\u4ee5\u5c31\u64e6\uff0c\u6700\u5f8c\u770b\u64e6\u904e\u7684\u5730\u65b9\u662f\u5426\u90fd\u662f\u76ee\u524d 0 \u7684\u5730\u65b9\uff0c\u9019\u53ef\u4ee5\u7528\u4e8c\u7dad\u524d\u7db4\u548c\uff0c\u4e8c\u7dad\u5dee\u5206\u505a\u5230\u3002\u6240\u4ee5\u9019\u6a23\u505a\u7684\u6642\u9593\u662f \\(O(n^2 \\times m \\times \\log m)\\)\uff0c\u53ef\u4ee5\u901a\u904e n = 200\u3002</p> <p>\u8003\u616e\u512a\u5316\uff0c\u6211\u5011\u89c0\u5bdf\u5230\u5982\u679c\u6211\u5011\u5f9e\u5927\u5230\u5c0f\u679a\u8209\u9577\u7684\u8a71\uff0c\u5728\u4e0d\u540c\u9577\u4e4b\u9593\uff0c\u5bec\u5177\u6709\u55ae\u8abf\u6027\uff0c\u4f8b\u5982\u4e0b\u5716</p> <p> </p> <p>\u6211\u5011\u4f9d\u5e8f\u679a\u8209 (5, 1) \u770b\u53ef\u4e0d\u53ef\u4ee5\uff0c\u5047\u8a2d ok\uff0c(5, 2) \u770b\u53ef\u4e0d\u53ef\u4ee5\uff0c\u5047\u8a2d ok\uff0c(5, 3) \u770b\u53ef\u4e0d\u53ef\u4ee5\uff0c\u5047\u8a2d\u4e0d ok \u4e86\uff0c\u90a3\u6211\u5011\u5c31\u61c9\u8a72\u8981\u8df3\u53bb\u6aa2\u67e5\u9577\u70ba 4 \u7684\uff0c\u6b64\u6642\u6211\u5011\u4e0d\u7528\u5f9e (4, 1) \u958b\u59cb\u770b\uff0c\u56e0\u70ba (5, 1) \u5df2\u7d93\u78ba\u5b9a ok\uff0c(4, 1) \u7576\u7136\u4e5f\u53ef\u4ee5\uff0c(4, 2) \u540c\u7406\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u9700\u8981\u5f9e (4, 3) \u770b\u4e0b\u53bb\u5373\u53ef\uff0c\u6703\u767c\u73fe\u8aaa\u9019\u6a23\u6211\u5011\u628a\u4e8c\u5206\u641c\u62ff\u6389\u5f8c\uff0c\u4f7f\u7528\u55ae\u8abf\u6027\u679a\u8209\u525b\u597d\u662f O(n + m)\uff0c\u6240\u4ee5\u7e3d\u6642\u9593\u8907\u96dc\u5ea6\u5dee\u4e0d\u591a\u662f O(n^3)\uff0c\u53ef\u4ee5\u901a\u904e n = 500\u3002</p> JOI 2017 Final JOIOI \u738b\u56fd <p>\u7d66\u4e00\u5f35 \\(n\\times m\\) \u7684 Grid\uff0c\u6c42\u8b93 \\(a_{i,j}\\) \u7528\u4ee5\u4e0b\u689d\u4ef6\u5206\u5169\u7d44\uff0c\u540c\u7d44\u5167\u7684\u6700\u5927\u5dee max \u8d77\u4f86\u6700\u5c0f\u662f\u591a\u5c11</p> <ul> <li> <p>\u540c\u4e00\u7d44\u5fc5\u9808\u9023\u901a</p> </li> <li> <p>\u55ae\u7368\u6bcf\u500b row \u6216 col \u770b\u4e0b\u53bb\u540c\u7d44\u7684\u662f\u9023\u5728\u4e00\u8d77\u7684</p> </li> </ul> <p>\\(2\\le n, m\\le 2000, a_{i, j} \\le 10^9\\)</p> \u601d\u8def <p>\u6700\u5c0f\u5316\u6700\u5927\u503c \\(\\rightarrow\\) \u4e8c\u5206\u641c\u7b54\u6848</p> <p>\u8981\u8b93 max \u8ddf min \u76e1\u91cf\u5728\u4e0d\u540c\u7d44\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5148\u5047\u8a2d max \u8ddf min \u662f\u5728\u4e0d\u540c\u7d44\uff0c\u6700\u5f8c\u7b54\u6848\u518d\u8ddf max - min \u53d6 min \u5373\u53ef\u3002</p> <p> </p> <p>\u767c\u73fe\u5982\u4e0a\u5716\u540c\u7d44\u4e00\u5b9a\u662f\u96a8\u8457 col \u905e\u589e\uff0c\u4e0d\u662f\u905e\u589e\u628a\u5b83\u65cb\u8f49\u5230\u67d0\u500b\u89d2\u5ea6\u4e00\u5b9a\u4e5f\u662f col \u905e\u589e\u7684\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u76f4\u63a5\u5047\u8a2d max \u5728\u9760\u5de6\u7684\u7d44\uff0cmin \u5728\u9760\u53f3\u7684\u7d44\uff08\u5982\u7b2c 2 \u5f35\u5716\u7684 case\uff09\uff0c\u7136\u5f8c\u5c31\u53ef\u4ee5 Greedy \u7684\u9078\u7d05\u8272\u7684\uff0c\u5269\u4e0b\u5c31\u662f\u85cd\u8272\u7684\uff0c\u81f3\u65bc\u600e\u9ebc Greedy\uff0c\u540c\u4e00\u500b row \u53ea\u8981\u4e0d\u8d85\u904e threshold \u80fd\u9078\u591a\u5c11\u5c31\u9078\u591a\u5c11\uff0c\u4e5f\u8981\u5224\u65b7\u4e0d\u80fd\u9078\u8d85\u904e\u4e0a\u4e00\u500b row \u7684\u9078\u7684\u9577\u5ea6\uff0c\u898b\u4ee3\u78bc</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int MAXN = 2e3 + 5;\nint n, m, mx, mn;\nint a[MAXN][MAXN];\nint g[MAXN][MAXN];\n\nvoid rotate() {\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            g[j][n - i + 1] = a[i][j];\n        }\n    }\n    swap(n, m);\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            a[i][j] = g[i][j];\n        }\n    }\n}\n\nbool check(int x) {\n    int lim = m + 1;\n    for (int i = 1; i &lt;= n; i++) {\n        int r = 0;\n        for (int j = 1; j &lt;= min(lim, m); j++) {\n            if (mx - x &lt;= a[i][j]) {\n                r = max(r, j);\n            } else {\n                break;\n            }\n        }\n        lim = r;\n        for (int j = r + 1; j &lt;= m; j++) {\n            if (a[i][j] - x &gt; mn) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint search() {\n    int l = 0, r = 2e9 + 5;\n    while (l &lt; r) {\n        int mid = (l + r) &gt;&gt; 1;\n        if (check(mid)) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return r;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    mx = -INF, mn = INF;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            cin &gt;&gt; a[i][j];\n            mx = max(mx, a[i][j]);\n            mn = min(mn, a[i][j]);\n        }\n    }\n\n    int ans = INF;\n    ans = min(ans, search());\n    rotate();\n    ans = min(ans, search());\n    rotate();\n    ans = min(ans, search());\n    rotate();\n    ans = min(ans, search());\n\n    ans = min(mx - mn, ans);\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n</code></pre> \u9762\u8a66\u984c - \u6bd2\u85e5\u67e5\u627e <p>1000 \u500b\u74f6\u5b50\u4e2d\u6709\u4e00\u74f6\u6bd2\u85e5\uff0c\u4e00\u96bb\u8001\u9f20\u5403\u5230\u6bd2\u85e5\u4e00\u5468\u4e4b\u5167\u6703\u6b7b\uff0c\u5982\u679c\u8981\u5728\u4e00\u5468\u4e4b\u5167\u6aa2\u6e2c\u51fa\u6709\u6bd2\u85e5\u7684\u4e00\u74f6\uff0c\u554f\u81f3\u5c11\u9700\u8981\u5e7e\u96bb\u8001\u9f20\uff1f</p> <p>\uff08\u5fae\u8edf\u7d93\u5178\u9762\u8a66\u984c\uff09</p> \u601d\u8def <p>\u628a\u74f6\u5b50\u5f9e 0 \u5230 999 \u4f9d\u5e8f\u7de8\u865f\uff0c\u7136\u5f8c\u5168\u90e8\u8f49\u63db\u70ba 10 \u4f4d\u5143\u4e8c\u9032\u4f4d\u6578\u3002\u8b93\u7b2c\u4e00\u96bb\u8001\u9f20\u559d\u6389\u6240\u6709\u4e8c\u9032\u5236\u6578\u53f3\u8d77\u7b2c\u4e00\u4f4d\u662f 1 \u7684\u74f6\u5b50\uff0c\u8b93\u7b2c\u4e8c\u96bb\u8001\u9f20\u559d\u6389\u6240\u6709\u4e8c\u9032\u5236\u6578\u53f3\u8d77\u7b2c\u4e8c\u4f4d\u662f 1 \u7684\u74f6\u5b50\uff0c\u4ee5\u6b64\u985e\u63a8\u3002\u4e00\u661f\u671f\u5f8c\uff0c\u5982\u679c\u7b2c\u4e00\u96bb\u8001\u9f20\u6b7b\u4e86\uff0c\u5c31\u77e5\u9053\u6bd2\u85e5\u74f6\u5b50\u7684\u4e8c\u9032\u5236\u7de8\u865f\u4e2d\uff0c\u53f3\u8d77\u7b2c\u4e00\u4f4d\u662f 1 \uff1b\u5982\u679c\u7b2c\u4e8c\u96bb\u8001\u9f20\u6c92\u6b7b\uff0c\u5c31\u77e5\u9053\u6bd2\u85e5\u74f6\u5b50\u7684\u4e8c\u9032\u5236\u7de8\u865f\u4e2d\uff0c\u53f3\u8d77\u7b2c\u4e8c\u4f4d\u662f0 \u22ef\u22ef\u6bcf\u96bb\u8001\u9f20\u7684\u6b7b\u6d3b\u90fd\u80fd\u78ba\u5b9a\u51fa 10 \u4f4d\u4e8c\u9032\u5236\u6578\u7684\u5176\u4e2d\u4e00\u4f4d\uff0c\u7531\u6b64\u4fbf\u53ef\u77e5\u9053\u6bd2\u85e5\u74f6\u7684\u7de8\u865f\u4e86\u3002</p> <p>\u6bd4\u5982\u7b2c 1, 5, 6, 8\u8001\u9f20\u6b7b\u4ea1\uff0c\u5176\u4ed6\u6c92\u6b7b\uff0c\u4e8c\u9032\u4f4d\u662f 0010110001\uff0c\u5247\u4ee3\u8868\u7b2c 177 \u74f6\u6c34\u6709\u6bd2\u3002</p> 2020 \u5168\u570b\u8cfd pG. \u77e9\u9663\u76f8\u4e58 <p>\u7d66\u5169\u500b \\(n\\times n\\) \u7684\u77e9\u9663 \\(A\\) \u8207 \\(B\\)\uff0c\u5df2\u77e5 \\(C=A\\times B\\) \u6700\u591a\u53ea\u6709 \\(2n\\) \u500b\u975e\u96f6\u9805\uff0c\u6c42 \\(C\\)</p> <p>\\(n\\le 2800\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u4e00\u500b\u5340\u9593 [l, r]\uff0c\u82e5 A[i] * sum(B[l...r]) \u2260 0\uff0c\u5247\u6bd2\u85e5\u5728 [l, r] \u4e2d\u3002\u5176\u4e2d sum(B[l...r]) \u53ef\u4ee5\u9760\u9810\u8655\u7406\u524d\u7db4\u548c\u5feb\u901f\u6c42\u51fa\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u505a O(log n) \u6b21\u5167\u7a4d\u6975\u53ef</p> USACO 2011 MAR Brownie Slicing G <p>\u6709\u4e00\u500b \\(n \\times m\\) \u7684\u77e9\u9663\uff0c\u6bcf\u4e00\u500b\u9ede\u6709\u4e00\u500b\u9ede\u6b0a \\(a_{i,j}\\)\u3002\u8981\u6c42\u5c07\u9019\u500b\u77e9\u9663\u5148\u6c34\u5e73\u5207 \\(r\\) \u5200\uff0c\u518d\u5c07\u6bcf\u4e00\u584a\u5b50\u77e9\u5f62\u5782\u76f4\u5207\u6210 \\(c\\) \u5200\u3002\u76ee\u6a19\u6700\u5927\u5316\u6240\u6709\u5b50\u77e9\u5f62\u7e3d\u548c\u7684\u6700\u5c0f\u503c\uff0c\u4e26\u8f38\u51fa\u3002</p> <p>\\(1\\le r, c\\le 500, a_{i,j}\\le 4000\\)</p> \u601d\u8def <p>\u6211\u5011\u8003\u616e\u4e8c\u5206\u6bcf\u584a\u7684\u7e3d\u548c\u6700\u5c0f\u503c t\u3002\u81f3\u65bc\u5982\u4f55 check(t)\uff0c\u4e5f\u5c31\u662f\u770b\u6bcf\u584a\u7e3d\u548c\u662f\u5426\u90fd\u80fd &gt;= t\uff0c\u6211\u5011\u679a\u8209 row\uff0c\u5c0d\u65bc\u7576\u524d column \u89e3\u6c7a\u4e00\u7dad\u7684\u554f\u984c\uff0c\u4e5f\u5c31\u662f\u770b\u7576\u524d i \u9019\u500b column \u5230\u4e0a\u500b\u5207\u9ede j column\uff0c\u82e5 sum(i, j) &gt;= t \u90a3\u5c31\u5207\u4e00\u5200\u3002\u82e5\u6b64\u6642\u5207\u7684\u5200\u6578\u9084\u662f\u6bd4 c \u5c0f\u90a3\u6211\u5011\u5c31\u518d\u5ef6\u4f38\u4e00\u500b row \u7e7c\u7e8c\u89e3\u6c7a\u525b\u525b\u7684\u4e00\u7dad\u554f\u984c\u3002</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, m, r, c, ans, s[505][505];\n\nbool check(int x) {\n    int row_cnt = 0, now = 0;                                              \n    for (int i = 1; i &lt;= n; i++) {                                    \n        int col_cnt = 0, lst = 0;                                                     \n        for (int j = 1; j &lt;= m; j++) {\n            if (s[i][j] - s[i][lst] - s[now][j] + s[now][lst] &gt;= x) {  \n                col_cnt++;\n                lst = j;\n            }\n        }                     \n\n        if (col_cnt &gt;= c) {\n            row_cnt++;\n            now = i;\n        }\n    }\n    return row_cnt &gt;= r;\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; r &gt;&gt; c;\n    for (int i = 1; i &lt;= n; ++i) {\n        for (int j = 1, x; j &lt;= m; ++j) {\n            cin &gt;&gt; x;\n            s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + x;\n        }\n    }\n    int l = 0, r = s[n][m]; \n    while (r - l &gt; 1) {\n        int mid = l + (r - l) / 2;\n        if (check(mid)) {\n            l = mid;\n        } else {\n            r = mid;\n        }\n    }\n    cout &lt;&lt; l &lt;&lt; endl;\n    return 0;\n}\n</code></pre> CF 1918 D. Blocking Elements <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(a\\) \u7684\u5e8f\u5217\uff0c\u4f60\u9700\u8981\u522a\u9664\u4e00\u4e9b\u6578\uff0c\u4f7f\u6578\u7d44\u88ab\u5206\u70ba\u82e5\u5e72\u6bb5\uff0c\u8a2d\u9019\u4e9b\u6bb5\u7684\u548c\u7684\u6700\u5927\u503c\u70ba \\(x\\)\uff0c\u522a\u9664\u7684\u6578\u7684\u548c\u70ba \\(y\\)\u3002\u554f \\(\\max(x,y)\\) \u7684\u6700\u5c0f\u503c\u3002</p> <p>\\(\\sum n \\le 10^5, 1\\le a_i \\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u4f7f\u7528\u4e8c\u5206\uff0c\u5047\u8a2d\u7576\u524d\u5df2\u7d93\u78ba\u5b9a\u7b54\u6848\u4e0d\u8d85\u904e \\(t\\)\uff0c\u90a3\u9ebc\u6709\uff1a</p> <ol> <li>\u5169\u500b\u9ede\u9593\u7684\u6700\u5927\u9593\u9694\u4e0d\u8d85\u904e \\(t\\)\u3002</li> <li>\u9ede\u6b0a\u4e4b\u548c\u4e0d\u8d85\u904e \\(t\\)\u3002</li> </ol> <p>\u56e0\u70ba\u525b\u597d\u90fd\u662f\u5169\u500b\u9ede\u4e4b\u9593\u7684\u8f49\u79fb\uff0c\u6211\u5011\u4e0d\u59a8\u8003\u616e dp\uff0c\u4ee4 dp[i] \u8868\u793a\u9078\u7b2c i \u500b\u6578\u4f5c\u70ba\u65b7\u9ede\u6642\uff0c\u524d i \u500b\u6578\u6700\u5c0f\u7684\u65b7\u9ede\u548c\u3002\u6211\u5011\u53ef\u4ee5\u5217\u51fa\u8f49\u79fb\u5f0f</p> \\[dp_i = \\min_{s_{i-1} - s_{j} \\leq x}\\{dp_{j}\\} + a_i\\] <p>\u5176\u4e2d \\(s\\) \u70ba\u524d\u7db4\u548c\u6578\u7d44\u3002\u8f49\u79fb\u5340\u9593\u7684\u5de6\u53f3\u7aef\u9ede\u90fd\u55ae\u589e\uff0c\u4e5f\u5c31\u985e\u4f3c\u6211\u5011\u7684 sliding window\uff0c\u6240\u4ee5\u53ef\u4ee5\u55ae\u8abf\u968a\u5217\u512a\u5316\u3002</p> <p>\u5728\u4ee3\u78bc check \u51fd\u6578\u7684 \\(dp_{n+1}\\) \u5373\u70ba\u7b54\u6848\uff0c\u82e5 \\(dp_{n+1} \\leq x\\)\uff0c\u5247\u8868\u793a\u7b54\u6848\u53ef\u4ee5 \\(\\leq \\max\\)\uff0c\u56e0\u70ba\u6211\u5011\u6700\u5f8c\u4e00\u6bb5\u4e8b\u5be6\u4e0a\u53ef\u4ee5\u770b\u6210\u662f\u5207\u5728 n + 1\uff0c\u6240\u4ee5\u70ba\u4e86\u65b9\u4fbf\uff0c\u5728\u5be6\u4f5c\u4e0a\u6211\u5011\u65b0\u589e\u4e86 a[n + 1] = 0\u3002\u6642\u9593\u8907\u96dc\u5ea6 \\(O(n\\log C)\\)\u3002</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#define int long long\nusing namespace std;\n\nint n, a[100010], dp[100010], ps[100010];\n\nbool check(int t) {\n    deque&lt;int&gt; dq;\n    dq.push_back(0);\n    for (int i = 1; i &lt;= n + 1; i++) {\n        while (ps[i - 1] - ps[dq.front()] &gt; t) {\n            dq.pop_front();\n        }\n        dp[i] = dp[dq.front()] + a[i];\n        while (dq.size() &amp;&amp; dp[dq.back()] &gt; dp[i]) {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n    }\n    return dp[n + 1] &lt;= t;\n}\n\nsigned main() {\n    int test;\n    cin &gt;&gt; test;\n    while (test--) {\n        cin &gt;&gt; n;\n        for (int i = 1; i &lt;= n; i++) {\n            cin &gt;&gt; a[i];\n        }\n        a[n + 1] = 0;\n        for (int i = 1; i &lt;= n + 1; i++) {\n            ps[i] = ps[i - 1] + a[i];\n        }\n        int l = 1, r = 1e18;\n        while (l != r) {\n            int mid = (l + r) / 2;\n            if (check(mid)) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        cout &lt;&lt; l &lt;&lt; endl;\n    }\n}\n</code></pre> CF 1923 D. Slimes <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5408\u4f75\u76f8\u9130\u7684\u6578\u5b57\uff0c\u4e14\u8981\u6eff\u8db3\u5169\u6578\u4e0d\u76f8\u7b49\uff0c\u554f\u5c0d\u65bc \\(1\\le i\\le n\\)\uff0c\\(a_i\\) \u6700\u5feb\u5e7e\u6b21\u64cd\u4f5c\u5c31\u6703\u88ab\u5408\u4f75</p> <p>\\(n\\le 3\\times 10^5, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u4e00\u500b a[i]\uff0c\u5de6\u908a/\u53f3\u908a\u80fd\u5408\u4f75\u4ed6\u7684\u5340\u9593\u9700\u8981\u6eff\u8db3\uff1a</p> <ul> <li> <p>\u7e3d\u548c\u8981\u6bd4 a[i] \u5927\u3002</p> </li> <li> <p>\u5340\u9593\u88e1\u9762\u7684\u6578\u4e0d\u662f\u90fd\u76f8\u7b49\u7684\u3002</p> </li> </ul> <p>\u6240\u4ee5\u6211\u5011\u4f7f\u7528\u4e8c\u5206\u641c\u67e5\u627e\u5373\u53ef\u3002</p> TIOJ 1598. \u5e0c\u723e\u4f2f\u7279\u7684\u623f\u5ba2 <p>\u6709\u7121\u9650\u591a\u500b\u4eba\uff0c\u76ee\u524d\u6709 n \u500b\u4eba\u6709\u9b06\u9905\uff0c\u7b2c i \u500b\u4eba\u6709 a[i] \u7684\u9b06\u9905\uff0c\u6bcf\u5206\u9418\u53ef\u5c07\u4e00\u584a\u9b06\u9905\u5403\u6389\uff0c\u6216\u5206\u7d66\u53e6\u4e00\u500b\u4eba\u3002\u7e3d\u5171\u6700\u591a\u53ea\u80fd\u5206 m \u6b21\uff0c\u554f\u6700\u5c11\u5e7e\u5206\u9418\u53ef\u5403\u5b8c</p> <p>\\(n \\le 10^5, m, a_i \\le 10^6\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u53bb\u4e8c\u5206\u641c\u5403\u7684\u6642\u9593 t\uff0c\u7136\u5f8c\u770b\u770b\u6bcf\u4e00\u9805\u662f\u5426\u80fd\u5728 t \u9019\u500b\u6642\u9593\u5167\u5403\u5b8c\u3002\u5c0d\u65bc\u6aa2\u67e5\u7684\u90e8\u5206\uff0c\u6211\u5011\u767c\u73fe\u5206\u9b06\u9905\u7684\u904e\u7a0b\u6709\u9ede\u50cf\u970d\u592b\u66fc\u7de8\u78bc\u7684\u611f\u89ba\uff08\u6bcf\u6b21\u4e00\u500b node \u90fd\u5c07\u81ea\u5df1\u62c6\u6210\u5169\u534a\uff09\uff0c\u53ef\u4ee5\u770b\u6210\u4e00\u9846 Full Binary Tree\uff0c\u5176\u4e2d\u6bcf\u500b internal node \u90fd\u4ee3\u8868\u8457\u4e00\u6b21\u5206\u914d\u3002</p> <p>\u5c0d\u61c9\u5230\u525b\u525b\u7684\u689d\u4ef6\uff0cFull Binary Tree \u7684\u8449\u7bc0\u9ede\u4e0a\u9762\u7684\u6578\u5b57\u61c9\u8a72\u8981\u5c0f\u65bc t \u6e1b\u6389\u8449\u7bc0\u9ede\u7684\u6df1\u5ea6\uff0c\u800c\u6bcf\u4e00\u9805 a[i] \u7684 Full Binary Tree \u7684 internal node \u7684\u6578\u91cf\u7e3d\u548c\u8981 &lt;= m\u3002\u6211\u5011\u767c\u73fe\u7121\u6cd5\u78ba\u5b9a internal node \u7684\u6578\u91cf\u8981\u662f\u591a\u5c11\u6bd4\u8f03\u597d\uff0c\u4f46\u6211\u5011\u53c8\u5e0c\u671b\u5728\u5408\u6cd5\u7684\u60c5\u6cc1\u4e0b\u8d8a\u5c11\u8d8a\u597d\uff0c\u65bc\u662f\u6211\u5011\u53ef\u4ee5\u8a66\u8457\u518d\u505a\u4e00\u500b\u4e8c\u5206\u641c\u5206\u5e7e\u6b21\uff0c\u5047\u8a2d\u4e8c\u5206\u641c\u5230\u4e86 k\uff0c\u5c31\u8b8a\u6210\u8aaa\u8981\u5224\u65b7\u5206 k \u6b21\u7684\u6642\u5019\u80fd\u4e0d\u80fd\u5728 t \u7684\u6642\u9593\u5167\u5403\u5b8c\uff0c\u90a3\u6211\u5011\u53ef\u4ee5\u4f7f\u6211\u5011\u7684 Full Binary Tree \u7684\u8449\u7bc0\u9ede\u4e0a\u9762\u7684\u6578\u5b57\u76e1\u91cf\u5927\uff0c\u518d\u770b\u770b\u9019\u4e9b\u8449\u7bc0\u9ede\u7684\u6b0a\u503c\u7e3d\u548c\u662f\u5426\u5927\u65bc\u7b49\u65bc a[i]\u3002\u56e0\u70ba\u6df1\u5ea6\u95dc\u4fc2\u5230\u8449\u7bc0\u9ede\u4e0a\u9762\u7684\u6578\u5b57\uff0c\u6240\u4ee5\u6211\u5011\u76e1\u91cf\u8b93 Full Binary Tree \u7684\u6df1\u5ea6\u8d8a\u5c0f\u8d8a\u597d\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5148\u586b\u51fa\u4e00\u500b Perfect Binary Tree\uff08\u4ee3\u8868\u8457 internal node\uff0c\u7136\u5f8c\u8981\u4f7f\u5f97\u9ede\u7684\u6578\u91cf &lt;= k\uff09\uff0c\u4e0b\u9762\u53ef\u80fd\u9084\u6703\u6709\u4e0d\u5b8c\u6574\u7684\u4e00\u5c64\uff08\u4e5f\u662f internal node\uff09\uff0c\u7136\u5f8c\u586b\u5b8c\u5f8c\u9019\u4e9b\u9ede\u4e0b\u9762\u80fd\u9023\u7684\u5730\u65b9\u6211\u5011\u90fd\u7576\u4f5c\u662f\u8449\u7bc0\u9ede\u3002\u518d\u770b\u770b\u6240\u6709\u8449\u7bc0\u9ede\u4ed6\u5011\u6700\u5927\u7684\u6b0a\u503c\u7e3d\u548c\u662f\u5426 &gt;= a[i] \u5373\u53ef\u3002</p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\n\nint n, m;\nint a[1000010];\n\nint cal(int k, int t) {\n    int dep = -1, sz = 0;\n    while (sz + (1ll &lt;&lt; (dep + 1)) &lt;= k) {\n        dep++;\n        sz += 1ll &lt;&lt; dep;\n    }\n    int extra_internal = k - sz;\n    int extra_leaf = (1ll &lt;&lt; (dep + 1)) - extra_internal;\n    return extra_internal * 2 * (t - (dep + 2)) + extra_leaf * (t - (dep + 1));\n}\n\nbool check(int t) {\n    int cnt = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (a[i] &gt; t) {\n            int l = 1, r = t;\n            while (l != r) {\n                int mid = (l + r) / 2;\n                if (cal(mid, t) &gt;= a[i]) {\n                    r = mid;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            cnt += l;\n        }\n    }\n    return cnt &lt;= m;\n}\n\nsigned main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    int l = 0, r = 1000000;\n    while (l != r) {\n        int mid = (l + r) / 2;\n        if (check(mid)) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    cout &lt;&lt; l &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"search/binary_search/#_4","title":"\u7d30\u7bc0","text":"<ul> <li> <p>check(x) \u7684 x \u592a\u5927\u7684\u6642\u5019\uff0c\u6709\u4e9b\u60c5\u6cc1\u6703\u9020\u6210 cnt overflow</p> </li> <li> <p>\u8a18\u5f97\u9700\u8981\u958b double \u7684\u6642\u5019\uff0cl, r, mid, check(x) \u90fd\u8981\u7528 double\uff0c\u4e0d\u80fd\u6709\u4e00\u4e9b\u662f int \u6709\u4e00\u4e9b\u53c8\u662f double</p> </li> <li> <p>\u6ce8\u610f l, r \u4e00\u958b\u59cb\u7684\u6709\u6c92\u6709\u9084\u84cb\u7b54\u6848\u7684\u5de6\u754c\u53f3\u754c</p> </li> <li> <p>while(l &lt; r) \u9084\u662f while(r - l &gt; 1)</p> </li> <li> <p>TLE \u6709\u53ef\u80fd\u662f\u4e8c\u5206\u641c\u58de\u6389\u5c0e\u81f4, \u53ef\u80fd\u4e00\u958b\u59cb\u63a8\u5c0e\u6642\u6709\u8aa4</p> <ul> <li>\u7576 (l + r) / 2 \u662f\u8ca0\u7684\u6642\u5019\uff0c\u53ef\u80fd\u6703\u51fa\u554f\u984c<sup>1</sup></li> </ul> </li> </ul>"},{"location":"search/binary_search/#_5","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>https://drive.google.com/file/d/1xxn2H5HSd5hl0573RWoKgJ_YdG3kNIu_/view</li> </ul> <ol> <li> <p>\u898b\u6b64\u8655\u6b64\u8655 \u21a9</p> </li> </ol>"},{"location":"search/fracturing_search/","title":"Fracturing Search","text":""},{"location":"search/fracturing_search/#_1","title":"\u6982\u5ff5","text":"<p>Fracturing search \u4e3b\u8981\u662f\u63a2\u8a0e\u4e00\u4e9b\u300c\u524d k \u512a\u89e3\u7684\u554f\u984c\u300d\u3002\u4e0b\u9762\u7684\u5167\u5bb9\u4e3b\u8981\u7ffb\u8b6f\u81ea USACO Guide</p> USACO Guide Problem <p>\u7d66\u4e00\u500b\u6709\u5411\u6a39\uff0c\u7b2c i \u500b node \u6709\u6b0a\u503c v[i]\u3002\u5982\u679c i \u4e26\u975e root \u7684\u8a71\u5247\u6709\u7236\u89aa p[i] \u6eff\u8db3 \\(v_{p_i}\\le v_i\\)\u3002\u6bcf\u500b node \u6700\u591a\u53ea\u6709 d \u500b\u5c0f\u5b69\uff0c\u554f\u6a39\u4e2d\u7b2c k \u5c0f\u7684 v[i]</p> <p>\u65b9\u6cd51\uff1a\u4f7f\u7528\u4e00\u500b priority queue\uff0c\u6700\u521d\u53ea\u5305\u542b root\u3002\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u5f9e pq \u4e2d\u53d6\u51fa\u5177\u6709\u6700\u5c0f\u503c\u7684\u7bc0\u9ede\uff0c\u7136\u5f8c\u5c07\u5176\u6240\u6709\u5b50\u7bc0\u9ede push \u9032\u53bb\uff0c\u53d6\u51fa k \u500b\u503c\u4e4b\u5f8c\u5c31\u7d50\u675f\u3002\u5728 pq \u4e2d\u63d2\u5165\u4e86 O(k * d) \u500b\u7bc0\u9ede\uff0c\u6240\u4ee5\u9019\u500b\u65b9\u6cd5\u7684\u6642\u9593\u8907\u96dc\u5ea6\u662f \\(O(kd \\log(kd))\\)\u3002\u6709\u9ede\u985e\u4f3c dijkstra \u7684\u60f3\u6cd5\u3002</p> <p>\u65b9\u6cd52\uff1a\u5047\u8a2d\u6211\u5011\u77e5\u9053\u7b2c k \u5c0f\u7684\u503c\u662f\u5728\u7bc4\u570d [0, C]\uff0c\u90a3\u9ebc\u5c0d\u65bc\u4efb\u610f \\(x\\in [0, C]\\)\uff0c\u6211\u5011\u53ef\u4ee5\u5728 O(kd) \u7684\u6642\u9593\u5167\u6aa2\u67e5\u6a39\u4e2d\u5c0f\u65bc\u6216\u7b49\u65bc x \u7684\u503c\u662f\u5426\u5c11\u65bc k \u500b\uff0c\u9019\u53ef\u4ee5\u900f\u904e dfs \u5be6\u73fe\uff0c\u4e00\u65e6\u627e\u5230 k \u500b\u503c\uff0c\u5c31\u4e2d\u76f4\u63a5 return\u3002\u9019\u500b\u65b9\u6cd5\u7684\u6642\u9593\u8907\u96dc\u5ea6\u662f \\(O(kd \\log(C))\\)\u3002</p>"},{"location":"search/fracturing_search/#_2","title":"\u984c\u76ee","text":"POI 2016 Korale <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u554f\u7b2c k \u5c0f\u7684\u65b9\u6848\u50f9\u503c\u7e3d\u548c\uff0c\u4ee5\u53ca\u65b9\u6848\u7684\u96c6\u5408\uff0c\u5982\u679c\u50f9\u503c\u7e3d\u548c\u76f8\u540c\u7684\u4ee5 index \u4e32\u8d77\u4f86\u7684\u5b57\u5178\u5e8f\u5c0f\u5230\u5927\u6392\u5e8f</p> <p>\\(n\\le 10^6, 1\\le k\\le 10^6, 1\\le a_i\\le 10^9\\)</p> \u601d\u8def <p>\u9019\u985e\u578b\u984c\u76ee\u7684\u95dc\u9375\u5b57\u662fFracturing Search\u3002</p> <p>\u3010\u554f\u984c\u4e00: \u65b9\u6848\u7684\u50f9\u503c\u7e3d\u548c\u3011</p> <p>\u6ce8\u610f\u5230 \\(k \\le 10^6\\)\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u66b4\u529b\u7684\u5efa\u7acb\u65b9\u6848\uff0c\u56e0\u70ba\u6211\u5011\u76ee\u524d\u4e0d\u8655\u7406\u5b57\u5178\u5e8f\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u5c07 a \u5c0f\u5230\u5927 sort(\u6211\u53eb\u505a b)\u3002\u9019\u6642\u5019\u6709\u5169\u7a2e\u505a\u6cd5:</p> <p>\u4f5c\u6cd51 \u5c0f\u6839\u5806:</p> <p>\u4ee5 (sum, i) \u8868\u793a\u524d i \u500b\u6578\u4e2d\uff0c\u9078\u51fa\u82e5\u5e72\u6578(\u5fc5\u9078\u7b2ci\u500b\u6578)\uff0c\u4e14\u50f9\u503c\u548c\u70ba sum\u3002\u6211\u5011\u53ef\u4ee5\u5229\u7528 heap \u4e0d\u65b7\u5730\u53d6\u51fa\u6700\u5c0f\u503c\uff0c\u4e26\u628a </p> <ul> <li>(sum + a[i + 1], i + 1)</li> <li>(sum + a[i + 1] - a[i], i + 1)</li> </ul> <p>\u52a0\u5165\u5230 heap \u4e2d\uff0c\u9019\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u5c07\u6240\u6709\u60c5\u6cc1\u4e0d\u91cd\u4e0d\u6f0f\u904d\u6b77\u4e14\u5177\u6709\u55ae\u8abf\u6027\u3002\u56e0\u70ba\u53d6\u5230 k \u500b\u5143\u7d20\u5f8c\u5c31\u6703\u505c\u6b62\uff0c\u6240\u4ee5\u8907\u96dc\u5ea6\u70ba \\(O(k \\log n)\\)\u3002</p> <p>\u4f5c\u6cd52 \u503c\u57df\u4e8c\u5206\u641c:</p> <p>\u6211\u5011\u66b4\u529b\u7684\u53bb\u905e\u8ff4\u679a\u8209\u5404\u7a2e\u65b9\u6848\uff0c\u53d6\u7684\u6642\u5019\u5f9e\u91cd\u91cf\u6700\u5c0f\u7684\u958b\u59cb\u8003\u616e\u8981\u4e0d\u8981\u53d6\uff0c\u7576\u65b9\u6848\u6709 k \u500b\u7684\u6642\u5019\u5c31\u505c\u4e0b\u4f86\u3002\u8907\u96dc\u5ea6\u70ba \\(O(k \\log C)\\)\u3002</p> <pre><code>void dfs(int now, int sum) {\n    cnt++;\n    if (cnt &gt;= k) return;\n    for (int i = now; i &lt;= n; i++) {\n        if (b[i] &lt;= sum) {\n            dfs(i + 1, sum - b[i]);\n            if (cnt &gt; k) return;\n        } else {\n            break;\n        }       \n    }\n}\n\nbool check(int x) {\n    cnt = 0;\n    dfs(1, x);\n    return cnt &gt;= k;\n}\n\nint l = 0, r = total_sum;\nwhile (l + 1 &lt; r) {\n    int mid = (l + r) / 2;\n    if (check(mid)) {\n        r = mid;\n    } else {\n        l = mid;\n    }\n}\n</code></pre> <p>\u3010\u554f\u984c\u4e8c: \u65b9\u6848\u7684\u96c6\u5408\u3011</p> <p>\u8ddf\u4e0a\u9762\u985e\u4f3c\uff0c\u53ea\u662f\u6211\u5011\u76ee\u524d\u662f\u7528 a \u9019\u500b\u672a\u6392\u5e8f\u7684\u9663\u5217\u9032\u884c\u905e\u8ff4\u679a\u8209\uff0c\u4f46\u8981\u600e\u9ebc\u4fdd\u8b49\u6bcf\u6b21\u7684\u65b9\u6848\u90fd\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u5462? \u5047\u8a2d\u6211\u5011\u76ee\u524d\u679a\u8209\u5b8c [1, i]\uff0c\u50f9\u503c\u5269\u9918 sum\uff0c\u6211\u5011\u8981\u5f80\u4e0b\u4e00\u6b65\u62d3\u5c55\u6642\u6211\u5011\u5c31\u9078\u64c7 i \u53f3\u908a\u7b2c\u4e00\u500b\u6bd4 sum \u5c0f\u7684\u5143\u7d20\u52a0\u5165\u7576\u524d\u7684\u96c6\u5408\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u4fdd\u8b49\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8907\u96dc\u5ea6\u70ba \\(O(k \\log n)\\)</p> <pre><code>void cnt_ans(int now, int sum) {\n    if (!sum) {\n        cnt--;\n        if (!cnt) {\n            for (int i = 1; i &lt;= top; i++) {\n                cout &lt;&lt; stk[i] &lt;&lt; '\\n';\n            }\n            exit(0);\n        }\n        return;\n    }\n    for (int i = now + 1; i &lt;= n; i++) {\n        i = seg.query(1, n, 1, i, sum);  // query i \u53f3\u908a\u7b2c\u4e00\u500b\u6bd4 sum \u5c0f\u7684\u5143\u7d20\n        if (!i) return; // i \u53f3\u908a\u4e0d\u5b58\u5728\u6bd4 sum \u5c0f\u7684\n        stk[++top] = i; // \u7d00\u9304\u7b54\u6848\n        cnt_ans(i, sum - a[i]);\n        top--;\n    }\n}\n</code></pre> USACO 2016 DEC Robotic Cow Herd P <p>\u7d66\u4f60 n \u500b\u5e8f\u5217\uff0c\u7b2c i \u500b\u5e8f\u5217\u9577\u5ea6 m[i]\uff0c\u5728\u6bcf\u500b\u5e8f\u5217\u4e2d\u9078\u64c7\u4e00\u500b\u6578\uff0ccost \u70ba\u5143\u7d20\u4e4b\u548c\uff0c\u554f\u7b2c k \u5c0f\u7684 cost \u70ba\u4f55</p> <p>\\(n, k\\le 10^5, m_i\\le 10\\)</p> \u601d\u8def <p>\u5148\u628a\u6bcf\u500b\u5e8f\u5217 sort \u597d\uff0c\u521d\u59cb\u72c0\u614b\u5c31\u662f\u5927\u5bb6\u7684\u7b2c\u4e00\u9805\u7e3d\u548c\u3002\u6211\u5011\u7684\u60f3\u6cd5\u662f\u4e00\u76f4\u5f9e 1...n \u5411\u5f8c\u4f9d\u500b\u5e8f\u5217\u4e00\u500b\u5e8f\u5217\u8003\u616e\uff0c\u7136\u5f8c\u53ea\u8a18\u9304\u6700\u5f8c\u4e00\u500b\u5e8f\u5217\u7684\u72c0\u614b\u3002\u8003\u616e\u7576\u524d\u7684\u72c0\u614b (sum, i, j) \u70ba\u5728\u7b2c i \u500b\u5e8f\u5217\uff0c\u76ee\u524d\u9078\u5230\u7b2c j \u5c0f\u7684\u5143\u7d20\uff0c\u548c\u70ba sum\uff0c\u8f49\u79fb\u5982\u4e0b:</p> <ul> <li> <p>\u7b2c i \u500b\u5e8f\u5217\u6539\u6210\u9078\u7b2c j + 1 \u5c0f\u7684\u5143\u7d20</p> </li> <li> <p>\u5f80\u5f8c\u9762\u4e00\u500b\u5e8f\u5217\u8003\u616e\u4e86\uff0c\u7b2c i + 1 \u500b\u5e8f\u5217\u9078\u7b2c 2 \u5c0f\u7684\u5143\u7d20</p> </li> <li> <p>\u82e5 j = 2\uff0c\u5c07\u7b2c i \u500b\u5e8f\u5217\u6539\u6210\u9078\u7b2c 1 \u5c0f\u7684\u5143\u7d20\uff0c\u5c07\u7b2c i + 1 \u500b\u5e8f\u5217\u9078\u7b2c 2 \u5c0f\u7684\u5143\u7d20</p> </li> </ul> <p>\u70ba\u4ec0\u9ebc\u9700\u8981\u7b2c\u4e09\u7a2e\u8f49\u79fb\u5462? \u56e0\u70ba\u4e00\u65e6\u8f49\u79fb\u5230 i \u4e86\uff0ci \u5c31\u6c92\u8fa6\u6cd5\u56de\u5230\u9078\u7b2c 1 \u5c0f\u7684\u5143\u7d20\u7684\u6642\u5019\u3002\u521d\u59cb\u72c0\u614b\u5c31\u662f (\u6bcf\u500b\u5e8f\u5217\u7684\u7b2c 1 \u9805\u7e3d\u548c + a[1][2], 1, 2)\u3002</p> <p>\u6ce8\u610f\u5230\u7b2c\u4e09\u7a2e\u72c0\u614b\u53ef\u80fd\u6703\u51fa\u73fe\u8ca0\u4ee3\u50f9\u7684\u8f49\u79fb\uff0c(a[i+1][2] - a[i+1][1]) - (a[i][2] - a[i][1]) &lt; 0\uff0c\u60f3\u60f3\u770b dijkstra \u662f\u4e0d\u5141\u8a31\u8ca0\u908a\u7684\uff0c\u9019\u908a\u7684\u9053\u7406\u4e5f\u4e00\u6a23\uff0c\u6240\u4ee5\u6211\u5011\u5fc5\u9808\u6309\u7167 a[i][2] - a[i][1] \u5347\u5e8f\u6392\u5e8f\u5373\u53ef</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 1e5 + 10;\nint n, k, m[N];\nll ans;\narray&lt;int, 20&gt; p[N];\nbool cmp(array&lt;int, 20&gt; a, array&lt;int, 20&gt; b) {\n    return a[2] - a[1] &lt; b[2] - b[1];\n}\n\nstruct node {\n    ll val;\n    int x, y;\n};\nbool operator&lt;(node x, node y) {\n    return x.val &gt; y.val;\n}\npriority_queue&lt;node&gt; pq;\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        p[i].fill(1e9 + 1);\n        cin &gt;&gt; m[i];\n        for (int j = 1; j &lt;= m[i]; j++)\n            cin &gt;&gt; p[i][j];\n        sort(p[i].data() + 1, p[i].data() + m[i] + 1);\n        ans += p[i][1];\n    }\n    sort(p + 1, p + n + 1, cmp);\n    pq.push({ans - p[1][1] + p[1][2], 1, 2});\n    for (int i = 2; i &lt;= k; i++) {\n        int x = pq.top().x, y = pq.top().y;\n        ll val = pq.top().val;\n        pq.pop();            \n        ans += val;        \n        pq.push({val - p[x][y] + p[x][y + 1], x, y + 1});          \n        if (x == n) continue;                           \n        pq.push({val - p[x + 1][1] + p[x + 1][2], x + 1, 2});   \n        if (y == 2) pq.push({val - p[x + 1][1] + p[x + 1][2] - p[x][2] + p[x][1], x + 1, 2}); \n    }\n    cout &lt;&lt; ans;\n}\n</code></pre> 2024 TOI \u6a21\u64ec\u8cfd\u7b2c\u4e8c\u5834 pE. \u2f1c\u53cc\u53d2\u53d5\u2f00\u500b\u2f26\u96c6\u554f\u984c <p>\u7d66\u4e00\u500b multiset \\(a_1, \\ldots ,a_n\\)\uff0c\u4f60\u9700\u8981\u5f9e\u4e2d\u9078\u64c7\u4e00\u4e9b\u6578\u69cb\u6210\u5b50\u96c6\uff0c\u4f46\u9078\u53d6\u7684\u500b\u6578\u8981\u5728 \\([l,r]\\) \u4e4b\u9593\u3002\u554f\u524d \\(k\\) \u5927\u7684\u5b50\u96c6\u548c</p> <p>\\(n \\leq 2 \\times 10^5, l, r \\leq 10^9, a_i \\leq 10^9\\)</p> \u601d\u8def <p>\u3010subtask: l = r\u3011</p> <p>\u56e0\u70ba\u6709\u6578\u91cf\u7684\u9650\u5236\uff0c\u6211\u5011\u6c92\u8fa6\u6cd5\u7528\u4e0a\u9762 POI \u90a3\u984c\u7684\u72c0\u614b\u53bb\u505a\u8f49\u79fb\uff0c\u56e0\u70ba\u6211\u5011\u6c92\u8fa6\u6cd5\u5b9a\u7fa9\u4e00\u500b\u597d\u7684\u300c\u521d\u59cb\u72c0\u614b\u300d\u3002\u4f8b\u5982\u8aaa\u521d\u59cb\u72c0\u614b\u70ba a \u5927\u5230\u5c0f\u6392\u5e8f\u904e\u7684\u524d l \u500b\uff0c\u6211\u5011\u53bb\u505a\u8f49\u79fb\u7684\u8a71\uff0c\u53ea\u6709\u8fa6\u6cd5\u6539\u52d5\u5230\u6709\u9078\u7684\u6700\u5f8c\u4e00\u500b\u5269\u9918\u7684\u72c0\u614b\u662f\u6e4a\u4e0d\u51fa\u4f86\u7684\u3002\u6240\u4ee5\u6211\u5011\u8981\u60f3\u8fa6\u6cd5\u4f86\u5b9a\u7fa9\u4e00\u500b\u72c0\u614b\uff0c\u6211\u5011\u767c\u73fe\u4e00\u7a2e\u9078\u6cd5\u8f49\u79fb\u5230\u53e6\u4e00\u7a2e\u9078\u6cd5\uff0c\u7b49\u50f9\u65bc\u653e\u68c4\u7576\u524d\u9078\u64c7\u7684\u4e00\u500b\u7269\u54c1\uff0c\u7136\u5f8c\u9078\u64c7\u5b83\u5f8c\u9762\u7684\u4e00\u500b\u7269\u54c1\u3002\u9019\u6a23\u53ef\u4ee5\u5f97\u5230\u4e00\u500b\u66f4\u5dee\u7684\u72c0\u614b\u3002\u986f\u7136\u82e5\u5c07\u6bcf\u500b\u6709\u9078\u7684\u4f4d\u7f6e\u90fd\u7d00\u9304\u72c0\u614b\u6703\u9054\u5230 O(n)\uff0c\u6240\u4ee5\u6211\u5011\u8a66\u8457\u89c0\u5bdf\u4e00\u4e9b\u6027\u8cea\uff0c\u5148\u8b93 a \u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5047\u8a2d\u6211\u5011\u521d\u59cb\u72c0\u614b\u662f\u9078\u524d l \u500b\uff0c\u6211\u5011\u4e0b\u4e00\u500b\u72c0\u614b\u4e00\u5b9a\u662f\u5c07\u6700\u5f8c\u4e00\u500b\u6709\u9078\u7684\u5f80\u5f8c\u79fb\u52d5\u4e00\u683c\u8f03\u4f73\u3002</p> <p> </p> <p>\u4e0d\u904e\u4ee5\u4e0a\u5716\u4f86\u770b\uff0c\u6211\u5011\u767c\u73fe\u5230\u4e86\u7b2c\u4e09\u6392\u6211\u5011\u53ef\u4ee5\u5c07\u6700\u5f8c\u4e00\u500b\u6709\u9078\u7684\u5f80\u5f8c\u62c9\u4e00\u683c\uff0c\u6216\u662f\u628a\u5012\u6578\u7b2c\u4e8c\u500b\u6709\u9078\u7684\uff0c\u5f80\u5f8c\u62c9\u4e00\u683c\u3002\u6240\u4ee5\u6211\u5011\u5f97\u5230\u4e86\u4e00\u500b\u505a\u6cd5\uff0c\u5f9e\u6709\u9078\u7684\u672b\u7aef\u958b\u59cb\u5c07\u4ed6\u5011\u5f80\u5f8c\u62c9\uff0c\u56fa\u5b9a\u4e86\u4e00\u500b\u4e4b\u5f8c\uff0c\u518d\u53bb\u62c9\u6709\u9078\u7684\u672b\u7aef\u7684\u5012\u6578\u7b2c\u4e8c\u500b\uff0c\u5c07\u5176\u62c9\u5230\u56fa\u5b9a\u7684\u4f4d\u7f6e\uff0c\u518d\u53bb\u62c9\u6709\u9078\u7684\u672b\u7aef\u7684\u5012\u6578\u7b2c\u4e09\u500b\uff0c\u5c07\u5176\u62c9\u5230\u56fa\u5b9a\u7684\u4f4d\u7f6e...\u3002\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u4e09\u7a2e\u8b8a\u6578\u4f86\u5b9a\u7fa9\u4e00\u500b\u72c0\u614b\uff1a\u76ee\u524d\u9084\u6c92\u79fb\u52d5\u7684\u7dca\u5bc6\u524d\u7db4\u3001\u76ee\u524d\u5728\u79fb\u52d5\u7684\u90a3\u683c\u3002\u4e0d\u904e\u6211\u5011\u76ee\u524d\u5728\u79fb\u52d5\u7684\u90a3\u683c\u662f\u4e0d\u80fd\u8d85\u904e\u4ed6\u5f8c\u9762\u5df2\u7d93\u56fa\u5b9a\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5fc5\u9808\u518d\u591a\u7d00\u9304\u4ed6\u5f8c\u9762\u6709\u9078\u7684\u90a3\u683c\u7684 index\u3002\\((x, y, z,sum)\\) \u4f86\u8868\u793a\u7576\u524d\u72c0\u614b\uff0c\u5176\u4e2d\uff1a</p> <ul> <li> <p>\\(x\\) \u8868\u793a\u7dca\u5bc6\u524d\u7db4\u7684\u672b\u7aef</p> </li> <li> <p>\\(y\\) \u8868\u793a\u7576\u524d\u518d\u79fb\u52d5\u7684\u90a3\u683c</p> </li> <li> <p>\\(z\\) \u8868\u793a \\(y\\) \u5f8c\u9762\u7b2c\u4e00\u500b\u9078\u64c7\u7684\u7269\u54c1</p> </li> <li> <p>\\(sum\\) \u8868\u793a\u6211\u5011\u7576\u524d\u72c0\u614b\u7684\u6b0a\u503c\u548c</p> </li> </ul> <p> </p> <p>\u8f49\u79fb\u5c31\u662f\u5c07\u7576\u524d\u7684 y \u5f80\u5f8c\u79fb\u52d5\u4e00\u683c\uff0c\u6216\u662f\u8003\u616e\u5f9e\u7dca\u5bc6\u524d\u7db4\u7684\u672b\u7aef\u4ed6\u5f80\u5f8c\u958b\u59cb\u632a\u52d5\uff08\u4e5f\u5c31\u662f x\uff09\u3002</p> \\[ (x, y, z, sum) \\rightarrow \\begin{cases} (x, y+1, z, sum-a_{y}+a_{y+1}) \\\\ (x-1, x + 1, y, sum) \\end{cases} \\] <p>\u767c\u73fe\u7b2c\u4e8c\u7a2e\u72c0\u614b\u672c\u4f86\u61c9\u8a72\u8981\u662f \\((x-1, x, y, sum)\\)\uff0c\u4e0d\u904e\u9019\u8ddf\u539f\u672c\u7684\u72c0\u614b\u662f\u4e00\u6a21\u4e00\u6a23\u7684\uff0c\u6240\u4ee5\u6211\u5011\u5f80\u5f8c\u9078\u4e00\u683c\u8b8a\u6210 \\((x-1, x + 1, y, sum)\\) \u5c31\u597d\u3002\u6700\u5f8c\u521d\u59cb\u72c0\u614b\u7684\u90e8\u5206\uff0c\u5c31\u662f \\((l-1, l, n+1, 0)\\)\u3002</p> <p>\u3010subtask: full\u3011</p> <p>\u6211\u5011\u5176\u5be6\u53ea\u8981\u6539\u52d5\u521d\u59cb\u72c0\u614b\u7684\u90e8\u5206\uff0c\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u5c0d\u65bc \\(i\\in [l, r]\\)\uff0c\u5c07 \\((i-1, i, n+1, 0)\\) \u90fd push \u9032\u53bb priority queue \u505a\u70ba\u521d\u59cb\u72c0\u614b\u5373\u53ef\u3002</p>"},{"location":"search/fracturing_search/#_3","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>https://www.luogu.com.cn/blog/Junko-Youmu/shopping-plans</li> </ul>"},{"location":"search/randomize_algo/","title":"Randomize algo","text":"<p>Majority Voting -  https://codeforces.com/blog/entry/89880</p>"},{"location":"search/tenary_search/","title":"Tenary search","text":"CS Academy Growing Trees <p>\u7d66\u4e00\u68f5 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u5728\u7b2c \\(k\\) \u5929\u7684\u6642\u5019\u7b2c \\(i\\) \u689d\u908a\u7684\u6b0a\u91cd\u662f \\(C_i + k \\times A_i\\)\uff0c\u6c42\u5728\u7b2c \\([0, D]\\) \u5929\u5167\uff0c\u4ec0\u9ebc\u6642\u5019\u6703\u6709\u6700\u77ed\u7684\u6a39\u76f4\u5f91</p> <p>\\(n\\le 2.5 \\times 10^5,0\\le D\\le 10^6\\)</p> \u601d\u8def <p>\u89c0\u5bdf\u5230 \\(C_i + k \\times A_i\\) \u6703\u662f\u4e00\u500b\u5cf0\u51fd\u6578\uff0c\u53ef\u4ee5\u4e09\u5206\u641c\u6975\u503c</p> <ul> <li>\u51f8\u51fd\u6578\uff0c\u51f9\u51fd\u6578\uff0c\u5b9a\u7fa9</li> <li>https://codeforces.com/problemset?tags=ternary%20search</li> <li>201B. Guess That Car!</li> <li>578C. Weakness and Poorness</li> <li>1716C. Robot in a Hallway</li> <li>1265B2. Send Boxes to Alice (Hard Version)</li> </ul>"},{"location":"search/two_pointer/","title":"\u96d9\u6307\u91dd","text":"CSES - Sum of Two Values <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4ee5\u53ca\u6578\u5b57 x\uff0c\u554f\u9019 n \u500b\u6578\u5b57\u4e2d\u54ea\u5169\u500b\u6578\u5b57\u548c\u70ba x\uff0c\u8f38\u51fa\u4efb\u4f55\u4e00\u7d44\u89e3</p> <p>\\(n\\le 2\\times 10^5, 1\\le x,a_i\\le 10^9\\)</p> \u601d\u8def <p>\u6392\u5e8f\u5f8c\u4f7f\u7528\u96d9\u6307\u91dd</p> code <pre><code>void solve() {\n    vector&lt;pair&lt;int, int&gt;&gt; v;\n    int n, x;\n    cin &gt;&gt; n &gt;&gt; x;\n    for (int i = 1; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        v.push_back({x, i});\n    }\n    sort(v.begin(), v.end());\n    int l = 0, r = n - 1;\n    while (r &gt; l) {\n        if (v[l].first + v[r].first &gt; x) {\n            r--;\n        } else if (v[l].first + v[r].first &lt; x) {\n            l++;\n        } else {\n            cout &lt;&lt; v[l].S &lt;&lt; ' ' &lt;&lt; v[r].S &lt;&lt; endl;\n            exit(0);\n        }\n    }\n    cout &lt;&lt; \"IMPOSSIBLE\\n\";\n}\n</code></pre> CSES - Sum of Three Values <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4ee5\u53ca\u6578\u5b57 x\uff0c\u554f\u9019 n \u500b\u6578\u5b57\u4e2d\u54ea\u4e09\u500b\u6578\u5b57\u548c\u70ba x\uff0c\u8f38\u51fa\u4efb\u4f55\u4e00\u7d44\u89e3</p> <p>\\(n\\le 5000, 1\\le x, a_i\\le 10^9\\)</p> \u601d\u8def <p>\u679a\u8209\u7b2c\u4e00\u9805\uff0c\u5f8c\u7e8c\u5957\u7528 Sum of Two Values</p> Sum of Two values \u8b8a\u5316 <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u4ee5\u53ca\u6578\u5b57 x\uff0c\u554f\u6709\u5e7e\u7d44 (i, j) \u4f7f \\(a_i+a_j=x\\)</p> <p>\\(n\\le 2\\times 10^5, 1\\le x, a_i\\le 10^9\\)</p> \u601d\u8def <p>\u958b\u4e00\u500b\u6876 cnt[ ] \u7d00\u9304\u6bcf\u7a2e\u6578\u5b57\u51fa\u73fe\u7684\u6b21\u6578\uff0c\u7136\u5f8c\u6211\u5011\u5c31\u53ef\u4ee5\u5c07 a[ ] sort\uff0c\u4e26\u4f7f\u7528 unique \u53bb\u9664\u91cd\u8907\u7684\u5143\u7d20\uff0c\u7136\u5f8c\u7528\u96d9\u6307\u91dd\uff08\u679a\u8209 l\uff0cr \u6703\u55ae\u8abf\u905e\u6e1b\uff09</p> code <pre><code>int j = n - 1;\nfor (int i = 0; i &lt; n; i++) {\n    while (i &lt; j &amp;&amp; a[i] + a[j] &gt;= x) {\n        if (a[i] + a[j] == x) {\n            ans += cnt[i] * cnt[j];\n        }\n        j--;\n    }\n}\n</code></pre> USACO 2021 December Contest, Silver Problem 2. Connecting Two Barns <p>\u7d66 \\(n\\) \u9ede \\(m\\) \u908a\uff0c\u9ede\u908a\u865f \\(1\\ldots n\\)\uff0c\u53ef\u4ee5\u984d\u5916\u5efa\u6700\u591a\u5169\u689d\u908a\uff0c\u5728\u9ede \\(i,j\\) \u4e4b\u9593\u5efa\u908a\u82b1\u8cbb \\((i-j)^2\\)\uff0c\u554f\u6700\u5c0f\u82b1\u8cbb\u4f7f\u9ede \\(1\\) \u8ddf\u9ede \\(n\\) \u9023\u901a</p> <p>\\(n,m\\le 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc 1 \u548c n \u6709\u5169\u7a2e\u60c5\u6cc1:</p> <ol> <li>\u5728\u540c\u4e00\u500b\u9023\u901a\u584a\u88e1\u3002</li> <li>\u5728\u5169\u500b\u4e0d\u540c\u7684\u9023\u901a\u584a\u88e1\u3002</li> </ol> <p>\u63a5\u4e0b\u4f86\u7528 f[i] \u4f86\u8868\u793a i  \u6240\u5728\u7684\u9023\u901a\u584a\u7684\u4ee3\u8868\u9ede\u3002\u5c0d\u65bc\u60c5\u6cc1 1\uff0c\u5f88\u660e\u986f\u4e0d\u9700\u8981\u9023\u4efb\u4f55\u4e00\u908a\uff0c\u6240\u4ee5\u82b1\u8cbb\u70ba 0\u3002\u5c0d\u65bc\u60c5\u6cc1 2\uff0c\u4e00\u5b9a\u662f\u4e00\u500b\u5728 f[1]\uff0c\u9023\u5230\u4e2d\u9593\u7684\u9023\u901a\u584a f[i]\uff0c\u518d\u5f9e f[i] \u9023\u5230 f[n]\u3002\u6211\u5011\u53bb\u9810\u8655\u7406 f[1] \u5230 f[i] \u7684\u6700\u8fd1\u8ddd\u96e2\uff0c\u5b58\u5728 cost1[f[i]]\uff0c\u4e5f\u53bb\u53bb\u9810\u8655\u7406 f[i] \u5230 f[n] \u7684\u6700\u8fd1\u8ddd\u96e2\uff0c\u5b58\u5728 costn[f[i]]\u3002\u6700\u5f8c\u7684\u7b54\u6848\u5c31\u662f cost1[i] + costn[n] \u53d6\u6700\u5c0f\u503c\u3002\u81f3\u65bc\u8981\u600e\u9ebc\u9810\u8655\u7406\u6709\u5169\u7a2e\u65b9\u6cd5\uff0c\u7b2c\u4e00\u7a2e\u662f\u4e8c\u5206\uff0c\u4e5f\u5c31\u662f\u5047\u8a2d\u8981\u7b97 f[i] \u5230 f[j] \u7684\u6700\u5c0f\u8ddd\u96e2\uff0c\u5148\u679a\u8209 f[i] \u5167\u7684\u9ede\uff0c\u5047\u8a2d\u53eb k\uff0c\u6211\u5011\u5c31\u5728 f[j] \u5167\u4e8c\u5206\u7b2c\u4e00\u500b\u6bd4 k \u5927\u7684\u6578\u5b57\u8207\u7b2c\u4e00\u500b\u6bd4 k \u5c0f\u7684\u6578\u5b57\uff0c\u53d6 min \u5373\u53ef\u3002\u7b2c\u4e8c\u7a2e\u65b9\u6cd5\u662f two pointer\uff0c\u6211\u5011\u53bb\u679a\u8209\u4e00\u500b\u9ede i\uff0c\u5c0d\u65bc\u9019\u500b i \u4e00\u5b9a\u662f\u60f3\u8981\u9078\u6578\u503c\u8d8a\u63a5\u8fd1\u81ea\u5df1\u7684\u9ede\u8d8a\u597d\uff0c\u5047\u8a2d\u73fe\u5728\u662f\u770b\u5230 f[1] \u7684\u8ddd\u96e2\uff0c\u5c31\u662f\u7528 two pointer \u7dad\u8b77\u5728 f[1] \u7b2c\u4e00\u500b\u6bd4 i \u5927\u7684\u6578\u5b57\u8207\u7b2c\u4e00\u500b\u6bd4 i \u5c0f\u7684\u6578\u5b57\uff08\u898b\u4ee3\u78bc line 54 ~ 72\uff09\uff0c\u6700\u5f8c\u628a\u9019\u500b\u66f4\u65b0\u5728 cost1[f[i]] \u5373\u53ef\u3002</p> <p>\u8b1b\u4e0d\u6e05\u695a\u53ef\u4ee5\u53c3\u8003\u5b98\u65b9\u8a73\u89e3</p> code(from usaco) <pre><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;numeric&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nvoid dfs(const vector&lt;vector&lt;int&gt;&gt; &amp;G, vector&lt;int&gt; &amp;cc, const int u, const int id) {\n    for (int v : G[u]) {\n        if (cc[v] != id) {\n            cc[v] = id;\n            dfs(G, cc, v, id);\n        }\n    }\n}\n\nvoid solve() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; G(n);\n    for (int i = 0; i &lt; m; i++) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        a--;\n        b--;\n        G[a].push_back(b);\n        G[b].push_back(a);\n    }\n\n    vector&lt;int&gt; cc(n);\n    iota(cc.begin(), cc.end(), 0);\n    for (int i = 0; i &lt; n; i++) {\n        if (cc[i] == i) {\n            dfs(G, cc, i, i);\n        }\n    }\n\n    if (cc[0] == cc[n - 1]) {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n\n    vector&lt;vector&lt;int&gt;&gt; st(n);\n    for (int i = 0; i &lt; n; i++) {\n        st[cc[i]].push_back(i);\n    }\n\n    long long ans = 1e18;\n    vector&lt;long long&gt; cost1(n, 1e9);\n    vector&lt;long long&gt; costn(n, 1e9);\n    int idx1 = 0;\n    int idxn = 0;\n    for (int i = 0; i &lt; n; i++) {\n        while (idx1 &lt; st[cc[0]].size()) {\n            cost1[cc[i]] = min(cost1[cc[i]], (long long)abs(i - st[cc[0]][idx1]));\n            if (st[cc[0]][idx1] &lt; i) {\n                idx1++;\n            } else {\n                break;\n            }\n        }\n        if (idx1) idx1--;\n\n        while (idxn &lt; st[cc[n - 1]].size()) {\n            costn[cc[i]] = min(costn[cc[i]], (long long)abs(i - st[cc[n - 1]][idxn]));\n            if (st[cc[n - 1]][idxn] &lt; i) {\n                idxn++;\n            } else {\n                break;\n            }\n        }\n        if (idxn) idxn--;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        ans = min(ans, cost1[i] * cost1[i] + costn[i] * costn[i]);\n    }\n\n    cout &lt;&lt; ans &lt;&lt; \"\\n\";\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    int t;\n    cin &gt;&gt; t;\n\n    for (int i = 0; i &lt; t; i++) {\n        solve();\n    }\n\n    return 0;\n}\n</code></pre> USACO 2013 JAN Cow Lineup G <p>\u6709 n \u982d\u725b\u6392\u6210\u4e00\u5217\uff0c\u5176\u4e2d\u7b2c i \u500b\u7684\u54c1\u7a2e\u662f a[i]\u3002\u53ea\u80fd\u522a\u6389\u81f3\u591a k \u7a2e\u54c1\u7a2e\u7684\u60c5\u6cc1\u4e0b\uff0c\u554f\u54c1\u7a2e\u76f8\u540c\u7684\u9023\u7e8c\u6bb5\u7684\u6700\u5927\u9577\u5ea6</p> <p>\\(n\\le 10^5, a_i \\le 10^9\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u628a\u984c\u76ee\u770b\u6210: \u5c0d\u65bc\u6bcf\u500b\u6709 k + 1 \u7a2e\u54c1\u7a2e\u7684 subarray\uff0c\u554f\u540c\u7a2e\u7a2e\u985e\u6700\u591a\u53ef\u4ee5\u662f\u591a\u5c11\u3002</p> <p>\u6700\u66b4\u529b\u7684\u60f3\u6cd5\u5c31\u662f\u679a\u8209\u53f3\u754c r\uff0c\u7136\u5f8c\u66b4\u529b\u7684\u627e\u5230 l \u4f7f [l, r] \u6070\u6709 k + 1 \u7a2e\u54c1\u7a2e\uff0c\u7528 r \u7684\u54c1\u7a2e\u4f86\u66f4\u65b0\u7b54\u6848\u3002\u4f46\u6211\u5011\u53ef\u4ee5\u767c\u73fe\uff0c\u9019\u7a2e subarray \u5177\u6709\u55ae\u8abf\u6027\uff0c\u6211\u5011\u53ef\u4ee5\u7528 two pointer \u7dad\u8b77\uff0c\u8a73\u898b\u4ee3\u78bc\u3002</p> code <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\nconst int N = 100005;\n\nint a[N];\n\nint main() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n\n    for (int i = 1; i &lt;= n; ++i) {\n        cin &gt;&gt; a[i];\n    }\n\n    map&lt;int, int&gt; mp;\n    int ans = 0;\n    int l = 1;\n    for (int r = 1; r &lt;= n; ++r) {\n        ++mp[a[r]];\n\n        while (mp.size() &gt; k + 1) {\n            --mp[a[l]];\n            if (mp[a[l]] == 0) {\n                mp.erase(a[l]);\n            }\n            ++l;\n        }\n\n        ans = max(ans, mp[a[r]]);\n    }\n\n    cout &lt;&lt; ans;\n}\n</code></pre> USACO 2019 FEB Sleepy Cow Herding S <p>\u4e00\u7dad\u6578\u7dda\u4e0a\u6709 n \u982d\u725b\uff0c\u6bcf\u6b21\u53ea\u80fd\u632a\u52d5 edge point\uff08\u6700\u53f3\u908a\u6216\u6700\u5de6\u908a\uff09\u7684\u725b\u5230\u4efb\u610f\u4f4d\u7f6e\uff0c\u4e0d\u904e\u4e0d\u80fd\u4f7f\u4ed6\u79fb\u52d5\u5f8c\u9084\u662f\u5728 edge point\uff0c\u554f\u8b93\u9019\u4e9b\u725b\u5b8c\u5168\u76f8\u9130\u7684\u6700\u5c11\u548c\u6700\u591a\u632a\u52d5\u6b21\u6578\u3002</p> <p>\\(n\\le 10^5\\)</p> \u601d\u8def <p>\u5c0d\u65bc\u7b2c\u4e00\u500b\u554f\u984c\u6c42\u6700\u5c0f\u64cd\u4f5c\u6b21\u6578\uff0c\u7531\u65bc\u6bcf\u4e00\u6b65\u64cd\u4f5c\u90fd\u5728\u4f54\u9818\u7a7a\u4f4d\uff0c\u800c\u6700\u7d42\u72c0\u614b\u70ba\u4e00\u6bb5\u5305\u542b\u9023\u7e8c \\(n\\) \u500b\u4f4d\u7f6e\u7684\u5340\u9593\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f9e\u7d50\u679c\u51fa\u767c\uff0c\u7528 two pointer\uff0c\u679a\u8209\u9019\u500b\u6700\u7d42\u5340\u9593\u7684\u5de6\u7aef\u9ede \\(a_i\\)\uff0c\u627e\u5230\u53f3\u7aef\u9ede\u9577\u5ea6 \\(a_j\\)\uff0c\u4f7f \\(a_j-a_i+1\\le n\\)\uff0c\u9019\u6bb5\u5340\u9593\u7684\u7b54\u6848\u5c31\u6703\u662f n - \u5340\u9593\u5167\u7684\u725b\u7684\u6578\u91cf\uff08\u5c07\u5916\u9762\u7684\u725b\u90fd\u79fb\u9032\u4f86\u9019\u500b\u5340\u9593\u5167\uff09\uff0c\u5373 n - (i - j + 1)\u3002\u53ef\u4ee5\u770b\u4e00\u4e0b\u4e0b\u5716\u7684\u79fb\u52d5\u65b9\u5f0f\u3002</p> <p> </p> <p>\u56e0\u70ba\u6211\u5011 edge point \u79fb\u52d5\u904e\u53bb\u4e4b\u6240\u4ee5\u5408\u6cd5\u662f\u56e0\u70ba\u6211\u5011\u80fd\u627e\u5230\u4e2d\u9593\u7684\u7a7a\u683c\uff0c\u6216\u8005\u662f\u53e6\u4e00\u7aef\u4e5f\u6709 edge point\uff0c\u53ef\u4ee5\u8b93\u725b\u5b89\u5fc3\u7684\u904e\u53bb\u53e6\u4e00\u7aef edge point \u7684\u65c1\u908a\u3002\u5982\u679c\u5169\u8005\u90fd\u6c92\u6709\uff0c\u5c31\u6703\u662f\u4ee5\u4e0b\u5169\u7a2e\u7279\u6b8a\u60c5\u6cc1\u3002\u5982\u679c\u524d \\(n-1\\) \u500b\u4f4d\u7f6e\u7dca\u9130\uff0c\u800c\u6700\u5f8c\u4e00\u500b\u4f4d\u7f6e\u96e2\u5012\u6578\u7b2c\u4e8c\u500b\u4f4d\u7f6e\u8ddd\u96e2\u5927\u65bc \\(2\\)\uff0c\u6bd4\u5982 \\(1,2,3,4,7\\)\uff0c\u7b54\u6848\u61c9\u70ba \\(2\\)\u3002\u540c\u7406\uff0c\u5982\u679c\u5f8c \\(n-1\\) \u500b\u4f4d\u7f6e\u7dca\u9130\uff0c\u800c\u7b2c\u4e00\u500b\u4f4d\u7f6e\u96e2\u7b2c\u4e8c\u500b\u4f4d\u7f6e\u8ddd\u96e2\u5927\u65bc \\(2\\)\uff0c\u7b54\u6848\u4e5f\u61c9\u70ba \\(2\\)\u3002</p> <p> </p> <p>\u56e0\u70ba\u4e0d\u80fd\u5f9e edge point \u9084\u5230 edge point \uff0c\u6240\u4ee5\u6703\u6bd4\u8f03\u985e\u4f3c\u4e00\u500b\u5340\u9593\u4e00\u76f4\u5728\u7e2e\u5c0f\uff08\u4e00\u500b\u5927\u7684\u5340\u9593\u7e2e\u5c0f\u6210\u70ba\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5340\u9593\uff09\u3002\u7531\u65bc\u8981\u8b93\u79fb\u52d5\u6b21\u6578\u8d8a\u5927\u8d8a\u597d\uff0c\u6240\u4ee5\u6211\u5011\u8981\u76e1\u91cf\u6162\u6162\u79fb\u52d5\uff0c\u800c\u6536\u650f\u7684\u5340\u9593\u4e00\u5b9a\u662f\u8d8a\u5927\u8d8a\u597d\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u671d\u6700\u5de6\u908a\u6162\u6162\u6536\u650f\u904e\u53bb\uff0c\u6216\u662f\u671d\u6700\u53f3\u908a\u6162\u6162\u6536\u650f\u904e\u53bb\u3002\u5047\u5982\u73fe\u5728\u662f\u671d\u6700\u5de6\u908a\u6162\u6162\u6536\u650f\u904e\u53bb\uff0c\u6211\u5011\u4e00\u958b\u59cb\u5148\u5c07\u7b2c n \u982d\u725b\u79fb\u52d5\u5230\u5340\u9593 [a[1], a[n - 1]] \u7684\u6700\u53f3\u908a\u7684\u7a7a\u683c\uff0c\u9019\u6a23\u624d\u4e0d\u6703\u8b93\u4ed6\u6210\u70ba edge point\uff0c\u7136\u5f8c\u518d\u4f86\u6211\u5011\u5c31\u53ea\u8981\u8a08\u7b97 [a[1], a[n - 1]] \u5167\u7a7a\u683c\u7684\u6578\u91cf\uff0c\u5c31\u53ef\u4ee5\u5f97\u77e5\u63a5\u4e0b\u4f86\u7684\u64cd\u4f5c\u6b21\u6578\u3002\u5047\u5982\u5340\u9593\u662f [l, r]\uff08\u5728\u9019\u908a l = a[1], r = a[n - 1]\uff09\uff0c\u7b54\u6848\u4e5f\u5c31\u662f\u5340\u9593\u9577\u5ea6 - \u5340\u9593\u5167\u7684\u725b\u7684\u6578\u91cf + \u4e00\u958b\u59cb\u7b2c n \u982d\u725b\u79fb\u904e\u53bb\u7684\u4e00\u6b21\u64cd\u4f5c = (r - l + 1) - n + 1\u3002\u540c\u7406\u671d\u6700\u53f3\u908a\u6162\u6162\u6536\u650f\u904e\u53bb\u5c31\u662f l = a[2], r = a[n]\u3002</p> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, a[100005], ans, ans2;\n\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    sort(a + 1, a + n + 1);\n    if ((a[n - 1] - a[1] == n - 2 &amp;&amp; a[n] - a[n - 1] &gt; 2) || (a[n] - a[2] == n - 2 &amp;&amp; a[2] - a[1] &gt; 2)) {\n        ans = 2;  // \u7279\u5224\n    } else {\n        int j = 1, res = 0;\n        for (int i = 1; i &lt;= n; i++) {\n            while (j &lt; n &amp;&amp; a[j + 1] - a[i] + 1 &lt;= n) {\n                j++;\n            }\n            res = max(res, j - i + 1);\n        }\n        ans = n - res;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    cout &lt;&lt; max(a[n - 1] - a[1], a[n] - a[2]) - n + 2 &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre> \u81ea\u7de8\u984c <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5e8f\u5217\uff0c\u7b2c \\(i\\) \u9805\u6709\u5169\u500b\u6578\u503c \\((a_i,b_i)\\)\u3002\u554f\u6709\u5e7e\u7d44 \\((i,j)\\) \u6eff\u8db3 \\(a_i+b_j\\le t\\)\uff0c\u6ce8\u610f \\((i,j)\\) \u8ddf \\((j,i)\\) \u662f\u540c\u4e00\u7a2e\u65b9\u6848\u3002</p> <p>\\(n\\le 10^5,1\\le a_i,b_i,t\\le 10^9\\)</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u5148\u7b97\u51fa\u4f86\u5168\u90e8\u7684\u65b9\u6cd5\u6578\uff08\u5305\u542b \\((i,j),(j,i)\\) \u90fd\u7b97\u9032\u53bb\uff09\uff0c\u7136\u5f8c\u518d\u6263\u6389\u540c\u6642\u6eff\u8db3 \\(a_i+b_j\\le t,a_j+b_i\\le t\\) \u7684\u65b9\u6848\u3002\u9019\u7a2e\u65b9\u6cd5\u6578\u90fd\u53ef\u4ee5\u900f\u904e\u4e0b\u9762\u7684\u65b9\u6cd5\u7b97\u51fa\u4f86\u3002\u6211\u5011\u53ef\u4ee5\u5c07\u5f0f\u5b50\u79fb\u5411\u5beb\u6210 \\(b_j\\le t-a_i\\)\uff0c\u6211\u5011\u8b93 \\(a_i\\) \u5f9e\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9019\u6a23\u5408\u6cd5\u7684 \\(b_j\\) \u6703\u8d8a\u4f86\u8d8a\u5c11\u3002\u6211\u5011\u5c07 \\(b_j\\) \u6392\u5e8f\u597d\u5f8c\u653e\u5728\u4e00\u500b\u9663\u5217\uff0c\u6211\u5011\u679a\u8209 \\(i\\)\uff0c\u56e0\u70ba\u5177\u6709\u55ae\u8abf\u6027\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u6162\u6162\u62d3\u5c55\u6eff\u8db3 \\(b_j\\le t-a_i\\) \u7684\u5f8c\u7db4\u5340\u9593\uff0c\u76f8\u7576\u65bc\u8b93\u4e00\u500b\u6383\u63cf\u7dda\u5f9e\u53f3\u908a\u5f80\u5de6\u6383\u904e\u4f86\uff0c\u5728\u9019\u88e1\u5c31\u53ef\u4ee5\u7dad\u8b77\u5168\u90e8\u7684\u65b9\u6cd5\u6578\uff08\u5c0d\u65bc\u6bcf\u500b i\uff0cans += j\uff09\u3002\u73fe\u5728\u7684\u554f\u984c\u5c31\u8b8a\u6210\u8aaa\u8981\u600e\u9ebc\u770b\u6eff\u8db3 \\(b_j\\le t-a_i\\) \u7684\u9019\u4e9b \\(b_j\\)\uff0c\u6eff\u8db3 \\(b_i\\le t - a_j\\) \u7684\u6709\u5e7e\u500b\u3002\u6211\u5011\u7dad\u8b77\u4e00\u500b\u8cc7\u6599\u7d50\u69cb DS\uff0c\u5047\u8a2d\u76ee\u524d\u8dd1\u904e\u7684 \\(i\\) \u7684 \\(b_i\\) \u90fd\u5df2\u7d93\u52a0\u5165 DS\uff0c\u90a3\u6bcf\u6383\u904e\u4e00\u500b \\(b_j\\) \u8981\u5728 DS \u5167\u770b\u7684\u5c31\u662f\u6709\u5e7e\u500b \\(b_i\\le t - a_j\\)\u3002\u6ce8\u610f\u5230\u9019\u6a23\u4e5f\u6703\u91cd\u8907\u8a08\u7b97\uff0c\u4e0d\u904e\u6211\u5011\u53ea\u8981\u6263\u6389 \\(a_i + b_i \\le t\\) \u7684\u9019\u7a2e\u60c5\u6cc1\u5f8c\uff0c\u5c31\u53ef\u4ee5\u5c07\u65b9\u6cd5\u6578\u9664 2 \u5373\u53ef\u3002\u6240\u4ee5\u6700\u5f8c\u7b54\u6848\u5c31\u662f\u300c\u5168\u90e8\u7684\u6cd5\u6578\u300d - \u300c\u91cd\u8907\u7684\u65b9\u6cd5\u6578\uff08\u6263\u6389 a[i] + b[i] &lt;= t\uff09 / 2 \u300d\u3002\u9019\u88e1\u7d66\u51fa\u4e00\u500b\u4f8b\u5b50\u3002</p> <p> </p> code <pre><code>#include &lt;bits/extc++.h&gt;\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing namespace __gnu_pbds;\ntemplate &lt;typename T&gt;\nusing rank_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;\n\nstruct DS {\n    rank_set&lt;int&gt; st;\n    void insert(int x) {\n        st.insert(x);\n    }\n    int query(int x) {\n        return st.order_of_key(x + 1);\n    }\n};\n\nstruct Node {\n    int a, b;\n};\n\nbool cmp_a(Node x, Node y) {\n    return x.a &lt; y.a;\n}\n\nbool cmp_b(Node x, Node y) {\n    return x.b &lt; y.b;\n}\n\nconst int MAXN = 1e5 + 5;\nNode va[MAXN], vb[MAXN];\n\nsigned main() {\n    int n, t;\n    cin &gt;&gt; n &gt;&gt; t;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; va[i].a;\n        vb[i].a = va[i].a;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; va[i].b;\n        vb[i].b = va[i].b;\n    }\n    DS ds;\n    sort(va + 1, va + n + 1, cmp_a);\n    sort(vb + 1, vb + n + 1, cmp_b);\n    int j = n, ans1 = 0, ans2 = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        // \u679a\u8209 i, \u7dad\u8b77\u6383\u63cf\u7dda\u4f7f b[j] &lt;= t - a[i]\n        while (1 &lt;= j &amp;&amp; vb[j].b &gt; t - va[i].a) {\n            // \u91cd\u8907\u7684\u65b9\u6cd5\u6578\u8a08\u7b97\n            ans2 += ds.query(t - vb[j].a);\n            j--;\n        }\n        ans1 += j; // \u5168\u90e8\u7684\u65b9\u6cd5\u6578\n        ds.insert(va[i].b);\n    }\n    // \u6700\u5f8c\u9084\u6bcf\u8dd1\u5230\u7684 j \u4e5f\u8981\u8a18\u5f97\u7d50\u7b97\n    while (1 &lt;= j) {\n        // \u91cd\u8907\u7684\u65b9\u6cd5\u6578\u8a08\u7b97\n        ans2 += ds.query(t - vb[j].a);\n        j--;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        if (va[i].a + va[i].b &lt;= t) {\n            ans2--;\n        }\n    }\n    cout &lt;&lt; ans1 - (ans2 / 2) &lt;&lt; '\\n';\n}\n\n/*\n3 5\n2 3 4\n2 1 3\n*/\n</code></pre>"},{"location":"search/images/CS%20Academy%20-%20Farey%20Sequence%20%E9%A1%8C%E8%A7%A3/","title":"CS Academy - Farey Sequence \u984c\u89e3","text":""},{"location":"search/images/CS%20Academy%20-%20Farey%20Sequence%20%E9%A1%8C%E8%A7%A3/#_1","title":"\u4f5c\u6cd5","text":"<p>\u8003\u616e\u5c0f\u6578\u9ede\u4e8c\u5206\u641c\uff0c\u6211\u5011\u53bb\u4e8c\u5206\u641c\u5230\u525b\u597d\u6709 \\(k\\) \u500b\u6bd4 \\(x\\) \u5c0f\uff08\u6700\u5c0f\u7684 \\(x\\) \u6eff\u8db3 \\(\\le x\\) \u7684\u5206\u6578\u6070\u70ba \\(k\\) \uff09</p> <p>\u81f3\u65bc\u5982\u4f55\u6aa2\u67e5\uff0c\u5c0d\u65bc\u4e00\u500b\u56fa\u5b9a\u7684\u5206\u6bcd \\(j\\)\uff0c\u6709\u591a\u5c11\u500b\u5206\u5b50 \\(i\\) \u6703\u5c0f\u65bc \\(x\\) \u5462 ?  $$ \\displaystyle \\frac{i}{j}\\le x  \\Rightarrow i\\le \\lfloor x\\times j \\rfloor $$ \u7b54\u6848\u662f \\(\\displaystyle \\frac{1}{j}\\sim \\frac{\\lfloor x\\times j \\rfloor}{j}\\)\uff0c\u4e5f\u5c31\u662f \\(\\lfloor x\\times j \\rfloor\\) \u500b\uff0c\u4f46\u5982\u679c\u679a\u8209\u5206\u6bcd\uff0c\u90fd\u9019\u6a23\u6703\u7b97\u7684\u8a71\u6703\u7b97\u5230\u91cd\u8907\u7684\uff0c\u4f8b\u5982 \\(\\frac{2}{4}\\) \u6703\u5728\u5206\u6bcd\u70ba \\(2\\) \u8207 \\(4\\) \u5404\u88ab\u7b97\u904e\u4e00\u6b21\uff0c\u5f88\u660e\u986f\u5c31\u662f\u56e0\u6578\u7684\u554f\u984c\uff0c\u6240\u4ee5\u6211\u5011\u5217\u51fa $$ dp[j]=\\lfloor x\\times j \\rfloor - \\sum \\limits_{c\\mid j}dp[c] $$ \u5177\u9ad4\u5be6\u4f5c\u985e\u4f3c\u7be9\u6cd5\uff0c\u5982\u4e0b</p> <pre><code>int dp[N];\nbool check(double x) {\n    for (int i = 1; i &lt;= n; i++) {\n        dp[i] = 0;\n    }\n    int sum = 0;\n    for (int j = 2; j &lt;= n; j++) {\n        dp[i] += x * j;\n        for (int i = j + j; i &lt;= n; i += j) {\n            dp[i] -= dp[j];\n        }\n        sum += dp[j];\n    }\n    return sum &gt;= k;\n}\n</code></pre> <p>\u6700\u5f8c\uff0c\u8981\u8f38\u51fa\u5206\u6578\u7b54\u6848\u6642\uff0c\u627e\u6bd4 \\(x\\) \u5c0f\u88e1\u9762\u6700\u5927\u662f\u90a3\u500b\u5206\u6578\u3002\u9019\u53ef\u4ee5\u679a\u8209\u5206\u6bcd \\(j\\)\uff0c\u4ee5 \\(j\\) \u70ba\u5206\u6bcd\u7b2c\u4e00\u500b\u5c0f\u65bc\u7b49\u65bc \\(x\\) \u7684\u5206\u5b50\u5c31\u662f \\(\\lfloor x\\times j\\rfloor\\)\uff0c\u5c0d\u65bc\u6bcf\u500b\u5206\u6bcd\u7b97\u51fa\u4f86\u7684\u53d6 \\(i/j\\) \u6700\u5927\u7684\u5373\u53ef</p>"},{"location":"search/images/CS%20Academy%20-%20Farey%20Sequence%20%E9%A1%8C%E8%A7%A3/#_2","title":"\u53e6\u6cd5","text":"<p>\u53e6\u4e00\u7a2e\u60f3\u6cd5\u4e5f\u985e\u4f3c\uff0c\u6211\u5011\u89c0\u5bdf\u5230\uff0cFarey \u5e8f\u5217\u88e1\u9762\u76f8\u9130\u5169\u9805\u7684\u5dee\u5927\u65bc \\(\\frac{1}{n\\times n}\\)<sup>1</sup>\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5 \\(\\frac{1}{n\\times n}\\) \u70ba\u4e00\u55ae\u4f4d\u5c07\u5e8f\u5217\u9694\u958b\u3002</p> <p></p> <p>\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u53bb\u4e8c\u5206\u641c \\(x\\) \u6eff\u8db3\u5c0f\u65bc\u7b49\u65bc \\(\\frac{x}{n\\times n}\\) \u7684\u5206\u6578\u6070\u70ba \\(k\\) \u500b\uff0c\u6aa2\u67e5\u7684\u8a71\u4e00\u6a23\u63a8\u5012 $$ \\displaystyle \\frac{i}{j}\\le \\frac{x}{n\\times n}  \\Rightarrow i\\le \\lfloor \\frac{x}{n\\times n} \\times j \\rfloor $$ \u4e5f\u4e00\u6a23\u7528\u985e\u7be9\u6cd5\u5be6\u4f5c\uff0c\u6700\u5f8c\u8981\u8f38\u51fa\u7b54\u6848\u6642\uff0c\u627e \\(\\frac{i}{j}\\) \u6eff\u8db3 \\(\\frac{i}{j}\\) \u6070\u597d\u5728 \\(\\frac{x-1}{n\\times n}\\) \u8207 \\(\\frac{x}{n\\times n}\\) \u4e4b\u9593\u3002\u5be6\u4f5c\u4e0a\u4e00\u6a23\u679a\u8209\u5206\u6bcd \\(j\\)\uff0c\u770b\u4ee5\u5206\u6bcd\u70ba \\(j\\)\uff0c\u7b2c\u4e00\u500b\u5c0f\u65bc\u7b49\u65bc \\(\\frac{x}{n\\times n}\\) \u7684 \\(\\frac{i}{j}\\) \uff08\\(i=\\lfloor \\frac{x}{n\\times n} \\times j \\rfloor\\)\uff09\u662f\u5426\u4ecb\u65bc \\(\\frac{x-1}{n\\times n}\\) \u8207 \\(\\frac{x}{n\\times n}\\) \u4e4b\u9593\u3002</p> <ol> <li> <p>\u6839\u64da Farey \u5e8f\u5217\u7684\u6027\u8cea\uff0c\u76f8\u9130\u5169\u9805 \\(\\frac{q_1}{p_1},\\frac{q_2}{p_2}\\) \u7684\u5dee \\(=\\frac{1}{p_1\\times p_2}\\)\uff0c\u8b49\u660e\u898b Wiki \u21a9</p> </li> </ol>"},{"location":"search/images/%E4%BA%8C%E5%88%86%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C/","title":"\u4e8c\u5206\u5e38\u898b\u554f\u984c","text":""},{"location":"search/images/%E4%BA%8C%E5%88%86%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C/#l-r-2","title":"\u554f\u984c\u4e00: (l + r) / 2","text":"<p>\u4ee5\u4e0b code \u7576 (l + r) \u662f\u8ca0\u7684\u6642\u5019\u6703\u51fa\u554f\u984c\uff0c\u4f8b\u5982 l = -2, r = -1\uff0cmid \u6703\u662f (-3) / 2 = -1\uff0c\u53ef\u5be6\u969b\u4e0a\u8981\u662f -2\uff0c\u5047\u5982\u662f\u8dd1 <code>r = mid</code>\uff0c\u90a3 r \u5c31\u6c38\u9060\u4e0d\u6703\u6539\u8b8a\uff0c\u9020\u6210\u7121\u9650\u8ff4\u5708\uff08TLE\uff09</p> <pre><code>int l = -2e9, r = 2e9;\nwhile (l &lt; r) {\n    int mid = (l + r) / 2;\n    if (check(mid)) r = mid;\n    else l = mid + 1;\n}\n</code></pre> <p>\u5982\u4f55\u89e3\u6c7a: \u6211\u5011\u5c07 <code>mid = l + (r - l) / 2</code> \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u70ba <code>(r - l)</code> \u4e00\u5b9a\u662f\u975e\u8ca0\u7684</p> <pre><code>int l = -2e9, r = 2e9;\nwhile (l &lt; r) {\n    int mid = l + (r - l) / 2;\n    if (check(mid)) r = mid;\n    else l = mid + 1;\n}\n</code></pre>"},{"location":"search/images/%E4%BA%8C%E5%88%86%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C/#r-mid-1","title":"\u554f\u984c\u4e8c: r = mid - 1","text":"<p>\u4ee5\u4e0b\u9019\u500b\u4ee3\u78bc\u6703\u9677\u5165\u6b7b\u5faa\u74b0\uff0c\u6bd4\u5982 l = 2, r = 3 \u6642\uff0cmid = 2\uff0c\u6b64\u6642\u82e5 check(2) = true\uff0c\u6703\u4e0d\u65b7\u5730\u57f7\u884c l = mid \u9019\u884c\u3002\u9019\u662f\u56e0\u70ba\u7576 l + r \u70ba\u5947\u6578\u6642\uff0c\u6211\u5011 mid \u6703\u81ea\u52d5\u5f80\u5de6\u9760\u3002</p> <pre><code>while (l != r) {\n    int mid = (l + r) / 2;\n    if (check(mid)) {\n        l = mid;\n    } else {\n        r = mid - 1;\n    }\n}\n</code></pre> <p>\u89e3\u6c7a\u7684\u8fa6\u6cd5\u6709\u5169\u7a2e\u7b2c\u4e00\u7a2e\u662f\u8b93 mid \u81ea\u52d5\u5f80\u53f3\u9760\uff0c\u4e5f\u5c31\u662f (l + r + 1) / 2\u3002\u7b2c\u4e8c\u7a2e\u662f\u6539\u6210 [l, r) \u7684\u5beb\u6cd5\uff0c\u56e0\u70ba r \u8ddf l \u4e0d\u53ef\u80fd\u6703\u5dee 1\uff0c\u9664\u975e\u662f\u627e\u5230\u7b54\u6848\u4e86\uff0c\u6240\u4ee5\u4e5f\u5c31\u4e0d\u6703\u6709\u4e0a\u8ff0\u554f\u984c\u3002\u4e5f\u5c31\u662f\u50cf\u4e0b\u9762\u9019\u6a23</p> <pre><code>while (r - l &gt; 1) {\n    int mid = (l + r) / 2;\n    if (check(mid)) {\n        l = mid;\n    } else {\n        r = mid;\n    }\n}\n</code></pre>"},{"location":"string/hashing/","title":"Hash","text":""},{"location":"string/hashing/#_1","title":"\u5167\u5efa\u5b57\u4e32","text":"<p>S(l, r) : \u8868\u793a\u5b57 S[l], S[l+1], ..., S[r] \u9019\u500b\u9023\u7e8c\u5340\u9593\u5f62\u6210\u7684\u5b57\u4e32\uff0c\u5728 C++ \u4e2d\u53ef\u4ee5\u5beb\u6210 </p> <pre><code>S.substr(l, r - l + 1)\n</code></pre>"},{"location":"string/hashing/#rolling-hash","title":"rolling hash","text":"<p>String hashing \u662f\u4e00\u7a2e\u80fd\u8b93\u6211\u5011\u6709\u6548\u7387\u7684\u6aa2\u67e5\u5169\u500b\u662f\u76f8\u7b49\u7684\u6280\u5de7\uff0c\u4ed6\u7684\u60f3\u6cd5\u662f\u6bd4\u8f03\u5b57\u4e32\u7684 hash value\uff0c\u800c\u975e\u76f4\u63a5\u6bd4\u8f03\u4ed6\u5011\u5404\u81ea\u7684\u5b57\u5143\u3002</p> <p>\u4e00\u500b string \u7684 hash value \u662f\u5f9e\u8a72\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u8a08\u7b97\u800c\u5f97\u7684\u6578\u5b57\u3002\u5982\u679c\u5169\u500b string \u76f8\u540c\uff0c\u5b83\u5011\u7684hash value  \u4e5f\u6703\u76f8\u540c\uff0c\u9019\u4f7f\u5f97\u6211\u5011\u53ef\u4ee5\u5229\u7528\u5b83\u5011\u7684 hash value \u4f86\u6bd4\u8f03\u5169\u500b string\u3002</p> <p>\u5be6\u73fe string hashing \u7684\u4e00\u7a2e\u5e38\u898b\u65b9\u5f0f\u662f polynomial hashing\uff0c\u4ee3\u8868\u5047\u5982\u73fe\u5728\u6709\u4e00\u500b\u9577\u5ea6\u70ba n \u5b57\u4e32 s\uff0c\u5176 hash value \u70ba\uff1a</p>  s[0] * x<sup>0</sup> + s[1] * x<sup>1</sup> + s[2] * x<sup>2</sup> + ... + s[n-1] * x<sup>n-1</sup> <p>\u8209\u4f8b\u4f86\u8aaa\uff0c\u5047\u8a2d s = abcababc\uff0c\u5247 hash value \u5982\u4e0b\u5efa\u7acb:</p> <p></p> <p>\u4f8b\u5982\u8981\u5224\u65b7 S(0, 2) == S(5, 7) \u53ef\u4ee5\u5beb\u6210 (h[0]+h[1]+h[2]) == (h[5]+h[6]+h[7]) / x<sup>5</sup>\u3002\u4e5f\u5c31\u662f\u4e58\u4e0a x<sup>5</sup> \u7684\u6a21\u9006\u5143\u3002x \u96a8\u610f\u5e36\u5165\u4e00\u500b\u6bd4\u5b57\u6bcd\u6578\u91cf\u9084\u5927\u7684\u6578\u5b57\uff08\u4f8b\u5982\u5b57\u6bcd = A...Z\uff0c\u90a3 x \u81f3\u5c11\u9700\u8981 26\uff09</p> <p>\u6240\u4ee5\u5728\u5be6\u4f5c\u4e0a\uff0c\u6211\u5011\u9084\u8981\u53bb\u5efa\u7acb  inv[i] = 1 / x<sup>i</sup>\uff0c\u8a73\u898b\u4ee5\u4e0b\u4ee3\u78bc</p> code <pre><code>struct Hash {\n    static const int M = 998244353;\n    static const int X = 131;\n    vector&lt;int&gt; x;\n    vector&lt;int&gt; h;\n    vector&lt;int&gt; pre;\n    vector&lt;int&gt; inv;\n    int n;\n\n    Hash(string &amp;s) : {\n        n = s.size();\n        x = vector&lt;int&gt;(n);\n        h = vector&lt;int&gt;(n);\n        pre = vector&lt;int&gt;(n);\n        inv = vector&lt;int&gt;(n);\n        x[0] = 1;\n        for (int i = 0; i &lt; n; i++) {\n            if (i) x[i] = (x[i - 1] * X) % M;\n            inv[i] = fastpow(x[i], M - 2);\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            h[i] = ((s[i] - '0' + 1) * x[i]) % M;\n\n            if (i == 0) {\n                pre[i] = h[i];\n            } else {\n                pre[i] = (pre[i - 1] + h[i]) % M;\n            }\n        }\n    }\n\n    int query(int l, int r) {\n        if (l == 0) return pre[r];\n        return ((pre[r] - pre[l - 1] + M) % M * inv[l]) % M;\n    }\n\n   private:\n    int fastpow(int a, int b) {\n        int ret = 1;\n        while (b != 0) {\n            if (b &amp; 1) ret = ret * a % M;\n            a = (a * a) % M;\n\n            b &gt;&gt;= 1;\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"string/hashing/#_2","title":"\u5224\u65b7\u5169\u500b\u5b57\u4e32\u5b57\u5178\u5e8f","text":"\u554f\u984c <p>\u8f38\u5165\u4e00\u500b\u9577\u5ea6 n \u7684\u5b57\u4e32 S\uff0c\u63a5\u8457\u6709 q \u6b21\u8a62\u554f\uff0c\u6bcf\u6b21\u8a62\u554f S \u4e2d\u5169\u500b\u5b50\u5b57\u4e32 S(l<sub>1</sub>, r<sub>1</sub>) \u548c S(l<sub>2</sub>, r<sub>2</sub>) \u7684\u5b57\u5178\u5e8f\u54ea\u500b\u6bd4\u8f03\u5c0f</p> \u601d\u8def <p>\u4e8c\u5206\u641c\u7b2c\u4e00\u500b S(l<sub>1</sub>, l<sub>1</sub> + i) \u8207 S(l<sub>2</sub>, l<sub>2</sub> + i) \u4e0d\u4e00\u6a23\u7684\u5730\u65b9\uff0c\u7528 rolling hash \u6aa2\u67e5</p> CSES - Minimal Rotation <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5b57\u4e32 S\uff0c\u554f S \u7684\u54ea\u4e00\u500b rotation \u7684\u5b57\u5178\u5e8f\u6700\u5c0f</p> \u601d\u8def <p>\u679a\u8209\u958b\u982d\uff0c\u5c0d\u65bc\u7576\u524d\u6700\u4f73\u89e3\u8207\u7576\u524d\u679a\u8209\u5230\u7684\u958b\u982d\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u6bd4\u8f03</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Hash {\n    static const int M = 998244353;\n    static const int X = 131;\n    vector&lt;int&gt; H;\n    vector&lt;int&gt; h;\n    vector&lt;int&gt; pre;\n    vector&lt;int&gt; inv;\n    int n;\n\n    Hash(string &amp;s) {\n        n = s.size ();\n        H.resize(n);\n        h.resize(n);\n        pre.resize(n);\n        inv.resize(n);\n\n        H[0] = 1;\n        for (int i = 0; i &lt; n; i++) {\n            if (i) H[i] = (H[i - 1] * X) % M;\n            inv[i] = fastpow (H[i], M - 2);\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            h[i] = ((s[i] - '0' + 1) * H[i]) % M;\n\n            if (i == 0) pre[i] = h[i];\n            else pre[i] = (pre[i - 1] + h[i]) % M;\n        }\n    }\n\n    int query(int l, int r) {\n        if (l == 0) return pre[r];\n        return ((pre[r] - pre[l - 1] + M) % M * inv[l]) % M;\n    }\n\nprivate:\n    int fastpow(int a, int b) {\n        int ret = 1;\n        while (b != 0) {\n            if (b &amp; 1) ret = ret * a % M;\n            a = (a * a) % M;\n\n            b &gt;&gt;= 1;\n        }\n        return ret;\n    }\n}; \n\nsigned main() {\n    string s;\n    cin &gt;&gt; s;\n    int n = s.size();\n    s = s + s;\n    Hash S(s);\n\n    int ansL = 0;\n    for (int i = 1; i &lt; n; i++) {\n        // [i, i + n - 1]\n        int l = 0, r = n + 1;\n        while (r - l &gt; 1) {\n            int mid = (l + r) / 2;\n            if (S.query(i, i + mid - 1) == S.query(ansL, ansL + mid - 1)) {\n                l = mid;\n            } else {\n                r = mid;\n            }\n        }\n        if (l == n) continue;\n        if (s[i + l] &lt; s[ansL + l]) {\n            ansL = i;\n        }\n    }\n    cout &lt;&lt; s.substr(ansL, n) &lt;&lt; '\\n';\n} \n</code></pre>"},{"location":"string/hashing/#_3","title":"\u5931\u6557\u6a5f\u7387\u5206\u6790","text":"<p>\u5b57\u4e32\u984c\u76ee\u5728\u5206\u6790\u7684\u6642\u5019\uff0c\u4e00\u822c\u4f86\u8aaa\u6703\u5c07\u5931\u6557\u6a5f\u7387\u7576\u6210 1 / P\u3002<sup>1</sup></p> <p>\u8981\u6539\u5584\u5931\u6557\u6a5f\u7387\u7684\u8a71\u53ef\u4ee5 :</p> <ol> <li> <p>\u52a0\u5927 \\(P\\)</p> </li> <li> <p>\u7528\u5169\u500b \\(P_1,P_2\\)</p> </li> </ol>"},{"location":"string/hashing/#_4","title":"\u4f8b\u984c","text":"CSES - String Matching <p>\u7d66\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u5b57\u4e32 \\(S\\) \u548c\u4e00\u500b\u9577\u5ea6 \\(m\\) \u7684\u5b57\u4e32 \\(T\\)\uff0c\u554f \\(T\\) \u5728 \\(S\\) \u5167\u51fa\u73fe\u5e7e\u6b21</p> <p>\\(n,m\\le 10^6\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Hash {\n    static const int M = 998244353;\n    static const int X = 131;\n    vector&lt;int&gt; H;\n    vector&lt;int&gt; h;\n    vector&lt;int&gt; pre;\n    vector&lt;int&gt; inv;\n    int n;\n\n    Hash(string &amp;s) {\n        n = s.size ();\n        H.resize(n);\n        h.resize(n);\n        pre.resize(n);\n        inv.resize(n);\n\n        H[0] = 1;\n        for (int i = 0; i &lt; n; i++) {\n            if (i) H[i] = (H[i - 1] * X) % M;\n            inv[i] = fastpow (H[i], M - 2);\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            h[i] = ((s[i] - '0' + 1) * H[i]) % M;\n\n            if (i == 0) pre[i] = h[i];\n            else pre[i] = (pre[i - 1] + h[i]) % M;\n        }\n    }\n\n    int query(int l, int r) {\n        if (l == 0) return pre[r];\n        return ((pre[r] - pre[l - 1] + M) % M * inv[l]) % M;\n    }\n\nprivate:\n    int fastpow(int a, int b) {\n        int ret = 1;\n        while (b != 0) {\n            if (b &amp; 1) ret = ret * a % M;\n            a = (a * a) % M;\n\n            b &gt;&gt;= 1;\n        }\n        return ret;\n    }\n}; \n\nsigned main() {\n    string s, t;\n    cin &gt;&gt; s &gt;&gt; t;\n    Hash S(s), T(t);\n\n    int cnt = 0;\n    for (int i = 0; i &lt; (int)s.size (); i++) {\n        if (S.query (i, i + t.size () - 1) == T.query (0, t.size () - 1)) cnt++;\n    }\n    cout &lt;&lt; cnt &lt;&lt; '\\n';\n} \n</code></pre> CSES - Finding Borders <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5b57\u4e32 S\uff0c\u8f38\u51fa S \u4e2d\u6240\u6709\u7684\u524d\u7db4\u548c\u5f8c\u7db4\u76f8\u7b49\u5b57\u4e32\u7684\u9577\u5ea6</p> <p>\\(n\\le 10^6\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Hash {\n    static const int M = 998244353;\n    static const int X = 131;\n    vector&lt;int&gt; H;\n    vector&lt;int&gt; h;\n    vector&lt;int&gt; pre;\n    vector&lt;int&gt; inv;\n    int n;\n\n    Hash(string &amp;s) {\n        n = s.size ();\n        H.resize(n);\n        h.resize(n);\n        pre.resize(n);\n        inv.resize(n);\n\n        H[0] = 1;\n        for (int i = 0; i &lt; n; i++) {\n            if (i) H[i] = (H[i - 1] * X) % M;\n            inv[i] = fastpow (H[i], M - 2);\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            h[i] = ((s[i] - '0' + 1) * H[i]) % M;\n\n            if (i == 0) pre[i] = h[i];\n            else pre[i] = (pre[i - 1] + h[i]) % M;\n        }\n    }\n\n    int query(int l, int r) {\n        if (l == 0) return pre[r];\n        return ((pre[r] - pre[l - 1] + M) % M * inv[l]) % M;\n    }\n\nprivate:\n    int fastpow(int a, int b) {\n        int ret = 1;\n        while (b != 0) {\n            if (b &amp; 1) ret = ret * a % M;\n            a = (a * a) % M;\n\n            b &gt;&gt;= 1;\n        }\n        return ret;\n    }\n}; \n\nsigned main() {\n    string s;\n    cin &gt;&gt; s;\n    Hash S(s);\n    int n = s.size();\n\n    for (int i = 1; i &lt; n; i++) {\n        // [0, i - 1]\n        // [n - i, n - 1]\n        int l1 = 0, r1 = i - 1;\n        int l2 = n - i, r2 = n - 1;\n        //if (l2 &lt;= r1) break;\n        if (S.query(l1, r1) == S.query(l2, r2)) {\n            cout &lt;&lt; i &lt;&lt; ' ';\n        }\n    }\n} \n</code></pre> CSES - Finding Periods <p>\u7d66\u9577\u5ea6 \\(n\\) \u7684\u5b57\u4e32 S\uff0c\u8f38\u51fa\u5b50\u5b57\u4e32\u7684\u6240\u6709\u91cd\u8907\u9031\u671f</p> <p>\\(n\\le 10^6\\)</p> \u601d\u8def <p>\u3010\u5f15\u7406\u3011: \u5b57\u4e32\u5f80\u53f3 shift d \u683c\u662f\u76f8\u540c\u7684\uff0c\u8868\u793a\u5b57\u4e32\u6709\u9031\u671f d</p> <p> </p> <p>\u56e0\u70ba\u82e5 shift d \u683c\u662f\u76f8\u540c\u7684\uff0c\u4ee3\u8868\u5b58\u5728\u5982\u4e0a\u5716\u9019\u7a2e\u5c0d\u61c9\u95dc\u4fc2</p> <p>\u6240\u4ee5\u6211\u5011\u5c31\u53ef\u4ee5\u7528 rolling hash \u4f86\u5224\u65b7\u3002\u53e6\u5916\u4e00\u7a2e\u65b9\u6cd5\u662f\u89c0\u5bdf\u5230\u9019\u5176\u5be6\u5c31\u662f\u5728\u770b\u4e00\u6bb5 prefix \u662f\u5426\u7b49\u65bc suffix\uff0c\u4e5f\u5c31\u662f kmp \u5728\u505a\u7684\u4e8b\u60c5\uff0c\u679a\u8209\u6240\u6709\u5171\u540c\u524d\u5f8c\u7db4\u9577\u5ea6 d\uff0c\u5c0d\u61c9\u5230\u9031\u671f n - d</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nstruct Hash {\n    static const int M = 998244353;\n    static const int X = 131;\n    vector&lt;int&gt; H;\n    vector&lt;int&gt; h;\n    vector&lt;int&gt; pre;\n    vector&lt;int&gt; inv;\n    int n;\n\n    Hash(string &amp;s) {\n        n = s.size ();\n        H.resize(n);\n        h.resize(n);\n        pre.resize(n);\n        inv.resize(n);\n\n        H[0] = 1;\n        for (int i = 0; i &lt; n; i++) {\n            if (i) H[i] = (H[i - 1] * X) % M;\n            inv[i] = fastpow (H[i], M - 2);\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            h[i] = ((s[i] - '0' + 1) * H[i]) % M;\n\n            if (i == 0) pre[i] = h[i];\n            else pre[i] = (pre[i - 1] + h[i]) % M;\n        }\n    }\n\n    int query(int l, int r) {\n        if (l == 0) return pre[r];\n        return ((pre[r] - pre[l - 1] + M) % M * inv[l]) % M;\n    }\n\nprivate:\n    int fastpow(int a, int b) {\n        int ret = 1;\n        while (b != 0) {\n            if (b &amp; 1) ret = ret * a % M;\n            a = (a * a) % M;\n\n            b &gt;&gt;= 1;\n        }\n        return ret;\n    }\n}; \n\nsigned main() {\n    string s;\n    cin &gt;&gt; s;\n    Hash S(s);\n    int n = s.size();\n\n    for (int i = 1; i &lt;= n; i++) {\n        int fg = 1;\n        for (int j = i; j &lt; n; j += i) {\n            // [j, j + i - 1]\n            int len = min(i, (n - 1) - j + 1);\n            if (S.query(0, len - 1) != S.query(j, j + len - 1)) {\n                fg = 0;\n                break;\n            }\n        }\n        if (fg) cout &lt;&lt; i &lt;&lt; '\\n';\n    }\n} \n</code></pre> CSES - Longest Palindrome <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba n \u7684\u5b57\u4e32 S\uff0c\u554f\u6700\u9577\u8ff4\u6587\u5b50\u5b57\u4e32</p> <p>\\(n\\le 10^6\\)</p> \u601d\u8def <p>\u53ef\u4ee5\u89c0\u5bdf\u5230\u5c0d\u65bc\u6bcf\u4e00\u500b\u5b57\u4e32\u4e2d\u9ede\uff0c\u5ef6\u4f38\u51fa\u53bb\u7684\u9577\u5ea6\u662f\u4e0d\u662f\u8ff4\u6587\u6709\u55ae\u8abf\u6027\u8cea\u3002\u5be6\u4f5c\u4e0a\uff0c\u5c0d\u65bc\u6bcf\u4e00\u500b\u5b57\u4e32\u4e2d\u9ede \\(O(\\log n)\\) \u641c\u5c0b\u6700\u9577\u8ff4\u6587\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u5171 \\(O(n\\log n)\\)</p> <p>\u3010\u7d30\u7bc0\u3011 : \u82e5\u4f7f\u7528\u4e0a\u9762\u7684\u6a21\u677f\u6703 TLE\uff0c\u9700\u8981\u5c07 H[ ] \u8207 inv[ ] \u62c9\u51fa\u4f86\u5efa</p> <p>\u3010\u8a3b\u3011 : \u9019\u984c\u53ef\u4ee5\u4f7f\u7528 Manacher's Algorithm \u505a\u5230 \\(O(n)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\nconst int X = 131;\n\nint H[maxn], inv[maxn];\n\nstruct hah {\n    int n;\n    vector&lt;int&gt; pre;\n    vector&lt;int&gt; h;\n\n    void build(string &amp;s) {\n        n = s.size();\n        pre.resize(n);\n        h.resize(n);\n\n        for (int i = 0; i &lt; n; i++) {\n            h[i] = H[i] * (s[i] - 'a' + 1) % M;\n            int tmp = H[i] * (s[i] - 'a' + 1);\n            if (i)\n                pre[i] = (pre[i - 1] + h[i]) % M;\n            else\n                pre[i] = h[i] % M;\n        }\n    }\n\n    int query(int l, int r) {\n        if (l == 0) return pre[r];\n        return (((pre[r] - pre[l - 1]) % M + M) % M) * inv[l] % M;\n    }\n};\n\nint fastpow(int a, int b) {\n    int ret = 1;\n    while (b != 0) {\n        if (b &amp; 1) ret = ret * a % M;\n        a = (a * a) % M;\n\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nstring s, t;\nint n;\nhah *Hs = new hah();\nhah *Ht = new hah();\n\nvoid init() {\n    cin &gt;&gt; s;\n    reverse(ALL(s));\n    t = s;\n    reverse(ALL(s));\n    n = s.size();\n    H[0] = 1;\n    for (int i = 1; i &lt; n; i++) {\n        H[i] = H[i - 1] * X % M;\n        inv[i] = fastpow(H[i], M - 2);\n    }\n}\n\nbool check(int l, int r) {\n    if (l &lt; 0) return 0;\n    if (r &gt; n - 1) return 0;\n    if (l &gt; r) return 0;\n\n    return Hs-&gt;query(l, r) == Ht-&gt;query(n - r - 1, n - l - 1);\n}\n\nvoid solve() {\n    Hs-&gt;build(s);\n    Ht-&gt;build(t);\n\n    int ans = 0, L = 0;\n    // ODD\n    for (int i = 0; i &lt; n; i++) {\n        int l = 0, r = n;\n\n        while (l &lt; r - 1) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (check(i - mid, i + mid))\n                l = mid;\n            else\n                r = mid;\n        }\n        if (2 * l + 1 &gt; ans) {\n            ans = 2 * l + 1;\n            L = i - l;\n        }\n    }\n\n    // EVEN\n    for (int i = 0; i &lt; n - 1; i++) {\n        int l = 0, r = n;\n\n        while (l &lt; r - 1) {\n            int mid = (l + r) &gt;&gt; 1;\n            if (check(i - mid + 1, i + mid))\n                l = mid;\n            else\n                r = mid;\n        }\n        if (2 * l &gt; ans) {\n            ans = 2 * l;\n            L = i - l + 1;\n        }\n    }\n    cout &lt;&lt; s.substr(L, ans) &lt;&lt; \"\\n\";\n}\n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    // cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n}\n</code></pre> 2018 \u5168\u570b\u8cfd p6. \u4e32\u806f\u91cd\u8907 <p>\u7d66\u4e00\u500b\u5b57\u4e32 S\uff0c\u627e\u51fa\u9023\u7e8c\u91cd\u8907\u51fa\u73fe\u5b50\u5b57\u4e32\u4e2d\u91cd\u8907\u6700\u591a\u6b21\u7684\uff0c\u8f38\u51fa\u9577\u5ea6\u6700\u9577\u4e14\u5b57\u5178\u5e8f\u6700\u5c0f\u7684</p> <p>\\(|S| \\le 10^4\\)</p> \u601d\u8def <p>\u4ee4 dp(L, i) = \u4ee5 i \u7d50\u5c3e\uff0cL \u70ba\u5faa\u74b0\uff0c\u91cd\u8907\u6700\u591a\u5e7e\u6b21</p> <p>dp(L, i) = max{</p> <ul> <li> <p>1</p> </li> <li> <p>dp(L, i - L) + 1 if S(i-2L+1 ~ i-L) = S(i-L+1, i)</p> </li> </ul> <p>\u7528 rolling hash O(1) \u5224\u65b7\uff0c\u6642\u9593\u8907\u96dc\u5ea6\u70ba O(n^2)</p>"},{"location":"string/hashing/#_5","title":"\u76f8\u95dc\u4e3b\u984c","text":"<ul> <li> <p>\u6a39\u540c\u69cb</p> </li> <li> <p>\u5c07\u72c0\u614b\u5229\u7528 hash \u58d3\u7e2e</p> </li> </ul> <ol> <li> <p>\u8a73\u898b \u5b57\u4e32\u5931\u6557\u6a5f\u7387\u5206\u6790 \u21a9</p> </li> </ol>"},{"location":"string/kmp/","title":"KMP","text":""},{"location":"string/kmp/#_1","title":"\u5f15\u5165","text":"\u554f\u984c <p>\u5b9a\u7fa9 input string s[1 ~ n] (1-base)</p> <p>\u4ee4 f[i] : s[1~i] \u7684 \u300c\u6b21\u9577\u300d\u5171\u540c\u524d\u5f8c\u7db4\u9577\u5ea6</p>"},{"location":"string/kmp/#1","title":"\u6027\u8cea1","text":"<p>s[1~i] \u7684\u6240\u6709\u5171\u540c\u524d\u5f8c\u7db4\u9577\u5ea6 :</p> <ul> <li> <p>\u6700\u9577 i</p> </li> <li> <p>\u7b2c 2 \u9577 f[i]</p> </li> <li> <p>\u7b2c 3 \u9577 f[f[i]]</p> </li> <li> <p>\u7b2c 4 \u9577 f[f[f[i]]]</p> </li> <li> <p>\u2026</p> </li> </ul>"},{"location":"string/kmp/#2","title":"\u6027\u8cea2","text":"<p>f[i] - 1 \u4e00\u5b9a\u662f s[1 ~ (i-1)] \u7684\u4e00\u500b\u5171\u540c\u524d\u5f8c\u7db4\u9577\u5ea6\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u6700\u9577</p> <p>\u21d2 \u60f3\u8981\u627e f[i] : \u5f9e s[1~(i-1)] \u5171\u540c\u524d\u5f8c\u7db4\u53bb\u627e</p> <p></p>"},{"location":"string/kmp/#_2","title":"\u5be6\u4f5c","text":"code <pre><code>vector&lt;int&gt; kmp(string s) {  // 1-based string\n    int n = s.size();\n    vector&lt;int&gt; f(n, -1);\n    for (int i = 1; i &lt; n; i++) {\n        int w = f[i - 1];\n        while (w &gt;= 0 &amp;&amp; s[w + 1] != s[i]) {\n            w = f[w];\n        }\n        f[i] = w + 1;\n    }\n    return f;\n}\n</code></pre>"},{"location":"string/kmp/#_3","title":"\u4f8b\u984c","text":"CSES - String Matching <p>\u7d66\u4e00\u500b\u9577\u5ea6 \\(n\\) \u7684\u5b57\u4e32 \\(S\\) \u548c\u4e00\u500b\u9577\u5ea6 \\(m\\) \u7684\u5b57\u4e32 \\(T\\)\uff0c\u554f \\(T\\) \u5728 \\(S\\) \u5167\u51fa\u73fe\u5e7e\u6b21</p> <p>\\(n,m\\le 10^6\\)</p> \u601d\u8def <ul> <li>new_str = target + \"$\" + str</li> <li>f = build_f(new_str), \u770b\u5e7e\u500b f[i] = target.size()</li> </ul>"},{"location":"string/kmp/#fail-link-dp","title":"fail link dp","text":"CF 432 D. Prefixes and Suffixes <p>\u7d66\u4e00\u500b\u5b57\u4e32 s\uff0c\u554f\u5c0d\u65bc\u6bcf\u500b s \u7684\u5171\u540c\u524d\u5f8c\u7db4\uff0c\u5728 s \u51fa\u73fe\u5e7e\u6b21</p> <p>\\(1\\le |s| \\le 10^5\\)</p> \u601d\u8def <p>\u6839\u64da\u6027\u8cea 2\uff0c\u4e5f\u5c31\u662f\u7576 f(i) \u51fa\u73fe\u6642\uff0cf(f(i)) \u4e5f\u6703\u51fa\u73fe\uff0c\u6211\u5011\u53ef\u4ee5\u63a8\u5f97\u4e00\u500b dp \u8f49\u79fb :</p> <pre><code>for (int i = n ~ 1)\n    cnt[i]++;\n    cnt[f[i]] += cnt[i]\n</code></pre> CF 955 D. Scissors <p>\u7d66\u4e00\u500b\u5b57\u4e32 s\uff0c\u4f60\u53ef\u4ee5\u62ff\u5169\u6bb5 s \u4e2d\u9577\u5ea6\u70ba k \u7684 substring\uff0c\u518d\u5c07\u4ed6\u5011\u5169\u500b\u62fc\u8d77\u4f86\u3002\u554f\u6709\u6c92\u6709\u53ef\u80fd\u4f7f\u88e1\u9762\u5305\u542b substring t\uff0c\u82e5\u6709\u53ef\u80fd\u8f38\u51fa\u5169\u6bb5\u5206\u5225\u7684\u958b\u982d index</p> <p>\\(2\\le |t| \\le 2\\times k\\le |s|\\le 5\\times 10^5\\)</p> \u601d\u8def <p>\u4ee4 pre[i]: t[1:i] \u9996\u6b21\u51fa\u73fe\u4f4d\u7f6e\uff0c\u5b58\u7d50\u5c3e\u4f4d\u7f6e\uff0csuf[i]: t[i:m] \u6700\u5f8c\u51fa\u73fe\u4f4d\u7f6e\uff0c\u5b58\u958b\u982d\u4f4d\u7f6e\uff0c\u6211\u5011\u5c31\u53ea\u8981\u679a\u8209 i\uff0c\u770b\u662f\u5426\u7b26\u5408 pre[i] &lt; suf[i] \u5373\u53ef</p> <p>\u81f3\u65bc pre, suf \u8981\u600e\u9ebc\u5efa\u7acb\u5462 ? \u6211\u5011\u53ef\u4ee5\u5229\u7528 kmp \u770b s \u7684\u6bcf\u4e00\u9805\u8207 t \u7684\u6b21\u9577\u5171\u540c\u524d\u5f8c\u7db4\uff0c\u7136\u5f8c\u518d\u7528 fail link dp \u8f49\u79fb\u3002\u6216\u662f\u4e5f\u53ef\u4ee5\u7528 rolling hash + two pointer</p> code <pre><code>#include &lt;algorithm&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nconst int INF = 1e9;\n\nvector&lt;int&gt; kmp(string s) {  // 1-based string\n    int n = s.size();\n    vector&lt;int&gt; f(n, -1);\n    for (int i = 1; i &lt; n; i++) {\n        int w = f[i - 1];\n        while (w &gt;= 0 &amp;&amp; s[w + 1] != s[i]) {\n            w = f[w];\n        }\n        f[i] = w + 1;\n    }\n    return f;\n}\n\nvector&lt;int&gt; make_pre(int k, string s, string t) {\n    int n = s.size();\n    int m = t.size();\n\n    auto f = kmp(\"$\" + t + \"$\" + s);              // $aaaa$baabaab\n                                                  //\n    if (*max_element(f.begin(), f.end()) &gt;= m) {  // \u4e0d\u7528\u5206\u5169\u6bb5\u5c31\u662f\u597d\u7684\n\n        cout &lt;&lt; \"Yes\" &lt;&lt; '\\n';\n        int pos = max_element(f.begin(), f.end()) - f.begin();\n        pos -= m + 1;\n        pos = max(pos, 2 * k);\n        cout &lt;&lt; pos - 2 * k + 1 &lt;&lt; ' ' &lt;&lt; pos - k + 1 &lt;&lt; '\\n';\n\n        exit(0);\n    }\n\n    vector&lt;int&gt; pre(m + 1, INF);  // pre[i]: t[1:m] \u7b2c\u4e00\u6b21\u51fa\u73fe\u4f4d\u7f6e\n    for (int i = m + 1 + k; i &lt; n + m + 2; i++) {\n        int len = f[i];\n        pre[len] = min(pre[len], i - m - 1);\n    }\n\n    // fail link dp\n    // \u9577\u5ea6i \u7684\u4f4d\u7f6e\u51fa\u73fe\u7684\u5730\u65b9\uff0c\u4e5f\u540c\u6642\u6703\u6709\u9577\u5ea6 f[i] \u51fa\u73fe\n    for (int i = m; i &gt;= 1; i--) {\n        int j = f[i];\n        pre[j] = min(pre[j], pre[i]);\n    }\n    return pre;\n}\n\nint main() {\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n\n    int n, m, k;\n    string s;\n    string t;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    cin &gt;&gt; s &gt;&gt; t;\n\n    string rs(s.rbegin(), s.rend());\n    string rt(t.rbegin(), t.rend());\n\n    auto pre = make_pre(k, s, t);  // pre[i]: t[1:i] \u9996\u6b21\u51fa\u73fe\u4f4d\u7f6e\uff0c\u5b58\u7d50\u5c3e\u4f4d\u7f6e\n    auto suf = make_pre(k, rs, rt);  // suf[i]: t[i:m] \u6700\u5f8c\u51fa\u73fe\u4f4d\u7f6e\uff0c\u5b58\u958b\u982d\u4f4d\u7f6e\n    reverse(suf.begin(), suf.end());\n    for (int i = 0; i &lt;= m; i++) {\n        suf[i] = n + 1 - suf[i];\n    }\n\n    /*\n    cout &lt;&lt; s &lt;&lt; '\\n';\n    cout &lt;&lt; t &lt;&lt; '\\n';\n    for (int i = 0; i &lt;= m; i++) {\n        cout &lt;&lt; pre[i] &lt;&lt; '\\t' &lt;&lt; suf[i] &lt;&lt; '\\n';\n    }\n    */\n\n    bool good = false;\n    for (int i = 0; i &lt;= m; i++) {\n        if (i &lt;= k &amp;&amp; m - i &lt;= k &amp;&amp; pre[i] &lt; suf[i]) {\n            cout &lt;&lt; \"Yes\" &lt;&lt; '\\n';\n            cout &lt;&lt; pre[i] - k + 1 &lt;&lt; ' ' &lt;&lt; suf[i] &lt;&lt; '\\n';\n            /*\n            cout &lt;&lt; s.substr(pre[i] - k, k) &lt;&lt; ' ' &lt;&lt; s.substr(suf[i] - 1, k)\n                 &lt;&lt; '\\n';\n            */\n            good = true;\n            break;\n        }\n    }\n    if (good == false) {\n        cout &lt;&lt; \"No\" &lt;&lt; '\\n';\n    }\n    return 0;\n}\n</code></pre>"},{"location":"string/kmp/#kmpdp","title":"kmp+dp","text":"<p>\u5229\u7528 dp(i, j)\uff0c\u4ee3\u8868\u5c0d\u65bc s[1, i]\uff0c\u6b21\u9577\u5171\u540c\u524d\u5f8c\u7db4\u70ba t[1, j]\u3002</p> <p>\u8f49\u79fb\u7684\u90e8\u5206 dp(i + 1, k) = dp(i, j) + ...\uff0c\u5176\u4e2d k \u5c31\u662f s[1, i+1] \u7684\u6b21\u9577\u5171\u540c\u524d\u5f8c\u7db4\u6703\u662f t[1, k]\u3002\u9019\u90e8\u5206\u53ef\u4ee5\u5229\u7528 kmp \u9810\u8655\u7406 t \u7684\u5931\u6557\u51fd\u6578\uff0c\u8f49\u79fb\u904e\u7a0b\u76f4\u63a5\u5f9e w = j \u53bb\u627e\u6b21\u9577\u5171\u540c\u524d\u5f8c\u7db4\uff08\u8a73\u898b CSES - Required Substring \u7684\u4ee3\u78bc\uff09</p> <p></p> CSES - Required Substring <p>\u7d66\u4e00\u500b\u9577\u5ea6 \\(m\\) \u7684\u5b57\u4e32 t\uff0c\u554f\u6709\u5e7e\u500b\u9577\u5ea6\u70ba \\(n\\) \u7684\u5b57\u4e32 s \u5305\u542b substring t</p> <p>\\(1\\le n\\le 100,1\\le m\\le 100,\\) s, t \u7531\u5b57\u6bcd A\u2013Z \u7d44\u6210</p> \u601d\u8def <ul> <li> <p>dp(i, j) = s[1, i] \u7684\u6700\u9577\u5339\u914d\u70ba t[1, j] \u7684\u65b9\u6848\u6578</p> </li> <li> <p>dp(i + 1, k) += dp(i, j) \u5176\u4e2d t[1, k] \u70ba s[1, i] + c \u5f8c\u7684\u6700\u9577\u5339\u914d</p> <ul> <li>dp(*, m) \u4e0d\u80fd\u62ff\u4f86\u8f49\u79fb</li> </ul> </li> <li> <p>\u7b54\u6848\u70ba total - dp(n, 0~(m - 1))</p> </li> </ul> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nconst int INF = 2e18;\nconst int M = 1e9 + 7;\n\nint fpow(int a, int b) {\n    int ret = 1;\n    a %= M;\n    while (b != 0) {\n        if (b &amp; 1) ret = (ret * a) % M;\n        a = (a * a) % M;\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nvector&lt;int&gt; kmp(string s) { \n    int n = s.size();\n    vector&lt;int&gt; f(n, -1);\n    for (int i = 1; i &lt; n; i++) {\n        int w = f[i - 1];\n        while (w &gt;= 0 &amp;&amp; s[w + 1] != s[i]) {\n            w = f[w];\n        }\n        f[i] = w + 1;\n    }\n    return f;\n}\n\nsigned main() {\n    int n;\n    cin &gt;&gt; n;\n    string t;\n    cin &gt;&gt; t;\n    int m = t.size();\n    t = \"$\" + t;\n\n    vector&lt;int&gt; f = kmp(t);\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(n + 1, 0));\n    dp[0][0] = 1;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            for (int k = 0; k &lt; 26; k++) {\n                int w = j;\n                while (w &gt;= 0 &amp;&amp; t[w + 1] != ('A' + k)) w = f[w];\n                w += 1;\n                dp[i + 1][w] = (dp[i + 1][w] + dp[i][j]) % M;\n            }\n        } \n    }\n    int sum = 0;\n    for (int j = 0; j &lt; m; j++) {\n        sum = (sum + dp[n][j]) % M;\n    }\n    // total - fail\n    cout &lt;&lt; (fpow(26, n) - sum + M) % M &lt;&lt; endl;\n} \n</code></pre> 2015 \u5317\u5e02\u8cfd pD. \u731c\u8b0e\u904a\u6232 (Guess) <p>\u7d66\u5b57\u4e32 s \u8ddf t\uff0c\u554f\u6700\u5c11\u8981\u522a\u5e7e\u500b s \u4e2d\u7684\u5b57\u5143\uff0c\u8b93 t \u4e0d\u662f s \u7684 substring</p> <p>\\(|s| \\le 100,|t| \\le 1000,\\) s, t \u7531\u5b57\u5143 A \u8207 B \u7d44\u6210</p> \u601d\u8def <ul> <li> <p>dp(i, j) = \u628a s[1, i] \u522a\u6389\u4e00\u4e9b\u5b57\u5143\u8b8a\u6210 s'\uff0c\u4e14 s' \u8207 t \u7684\u6b21\u5927\u5171\u540c\u524d\u5f8c\u7db4\u70ba t[1, j]</p> <ul> <li>\u56e0\u70ba\u4e0d\u80fd\u5339\u914d\u5230 t[1, m]\uff0c\u6240\u4ee5 dp(*, m) \u4e0d\u62ff\u53bb\u8f49\u79fb</li> </ul> </li> <li> <p>\u522a s[i + 1] :</p> <ul> <li>dp(i + 1, j) \u2190 min( dp(i, j) + 1)</li> </ul> </li> <li> <p>\u4e0d\u522a s[i + 1] :</p> <ul> <li>dp(i + 1, k) \u2190 dp(i, j)</li> <li>k \u70ba t \u8207 s[1, i+1] \u7684\u6b21\u9577\u5171\u540c\u524d\u5f8c\u7db4\u9577\u5ea6<ul> <li>\u53ef\u5f9e w = j \u8f49\u79fb</li> </ul> </li> </ul> </li> <li> <p>\u8907\u96dc\u5ea6 O(nm<sup>2</sup>)</p> </li> </ul> <p> </p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int INF = 2e18;\n\nvector&lt;int&gt; KMP(string s) { // 1-based string\n    int n = s.size() - 1;\n    vector&lt;int&gt; F(n + 1, -1);\n\n    for (int i = 1; i &lt;= n; i++) {\n        int w = F[i - 1];\n        while (w &gt;= 0 &amp;&amp; s[w + 1] != s[i]) w = F[w];\n\n        F[i] = w + 1;\n    }\n    return F;\n}\n\nsigned main() {\n    string s, t;\n    cin &gt;&gt; t &gt;&gt; s;\n\n    int n = s.size();\n    int m = t.size();\n    t = \"$\" + t;\n    s = \"$\" + s;\n    vector&lt;int&gt; f = KMP(t);\n\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(m + 1, INF));\n    dp[0][0] = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + 1);\n            int w = j;\n            while (w &gt;= 0 &amp;&amp; t[w + 1] != s[i + 1]) w = f[w];\n            w += 1;\n            dp[i + 1][w] = min(dp[i + 1][w], dp[i][j]);\n        }\n    }\n    cout &lt;&lt; *min_element(dp[n].begin(), dp[n].begin() + m) &lt;&lt; '\\n';\n} \n</code></pre> CF 1303 E. Erase Subsequences <p>\u7d66 s, t\uff0c\u81f3\u591a\u80fd\u5f9e s \u4e2d\u9078\u51fa\u5169\u500b subsequence\uff0c\u554f\u662f\u5426\u80fd\u7d44\u6210 t</p> <p>\\(|t| \\le |s| \\le 400\\)</p> \u601d\u8def <p>\u6211\u5011\u5f88\u660e\u986f\u53ef\u4ee5\u60f3\u51fa\u4f86\u4e00\u6b65\uff1a\u679a\u8209 t \u5728\u54ea\u88e1\u62c6\u958b\uff0c\u7136\u5f8c\u5c07 t \u8f49\u5316\u70ba t1 + t2\uff0c\u518d\u5224\u65b7 s \u4e2d\u80fd\u4e0d\u80fd\u62c6\u51fa t1, t2 \u5c31\u597d\u4e86\u3002 \u90a3\u9ebc\u554f\u984c\u8f49\u5316\u70ba\u4e86 s \u4e2d\u80fd\u4e0d\u80fd\u62c6\u51fa\u4f86\u7684\u554f\u984c\u4e86\u3002\u767c\u73fe\u53ef\u80fd\u9700\u8981 dp \u89e3\u3002</p> <p>\u5f88\u986f\u7136\u7684\u72c0\u614b\u662f: dp(i, j, k) \u8868\u793a s \u7684\u524d i \u4f4d\u80fd\u4e0d\u80fd\u62c6\u51fa t1 \u7684\u524d j \u4f4d\u548c t2 \u7684\u524d k \u4f4d\uff0c\u56e0\u70ba\u72c0\u614b\u91cf\u904e\u5927\u6211\u5011\u5c31\u8003\u616e\u512a\u5316\u9019\u500b\u72c0\u614b\uff0cdp(i, j) \u8868\u793a s \u7684\u524d i \u4f4d\u62c6\u51fa t1 \u7684\u524d j \u4f4d\uff0c\u6700\u591a\u518d\u62c6\u51fa t2 \u7684\u524d\u591a\u5c11\u4f4d\u3002</p> <ul> <li> <p>\u7576 s[i + 1] = t1[j + 1] \u6642\uff0cdp(i, j) \u2192 dp(i + 1, j + 1)</p> </li> <li> <p>\u7576 s[i + 1] = t2[dp(i, j) + 1] \u6642\uff0cdp(i, j) + 1 \u2192 dp(i + 1, j)</p> </li> <li> <p>\u4efb\u4f55\u60c5\u6cc1\u4e0b\uff0cdp(i, j) \u2192 dp(i + 1, j)</p> </li> </ul> <p>\u8907\u96dc\u5ea6 O(n) * O(n ^ 2) = O(n ^ 3)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int MAXN = 805;\nint dp[MAXN][MAXN];\n\nbool check(string s, string t1, string t2) {\n    memset(dp, -1, sizeof(dp));\n    dp[0][0] = 0;\n    s = \"$\" + s;\n    t1 = \"$\" + t1;\n    t2 = \"$\" + t2;\n    for (int i = 0; i &lt; s.size(); i++) {\n        for (int j = 0; j &lt; t1.size(); j++) {\n            if (dp[i][j] == -1) continue;\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j]);\n            if (s[i + 1] == t1[j + 1]) dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j]);\n            if (s[i + 1] == t2[dp[i][j] + 1]) dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + 1);\n        }\n    }\n    if (dp[s.size() - 1][t1.size() - 1] == t2.size() - 1) {\n        return true;\n    }\n    return false;\n}\n\nbool solve(string s, string t) {\n    for (int i = 0; i &lt;= t.size(); i++) {\n        string t1, t2;\n        for (int j = 0; j &lt; i; j++) {\n            t1 = t1 + t[j];\n        }\n        for (int j = i; j &lt; t.size(); j++) {\n            t2 = t2 + t[j];\n        }\n        if (check(s, t1, t2)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    while (n--) {\n        string s, t;\n        cin &gt;&gt; s &gt;&gt; t;\n        if (solve(s, t)) {\n            printf(\"YES\\n\");\n        } else {\n            printf(\"NO\\n\");\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"string/kmp/#_4","title":"\u8cc7\u6599","text":"<ul> <li>https://hackmd.io/@penguin71630/stringprob</li> </ul>"},{"location":"string/trie/","title":"Trie","text":""},{"location":"string/trie/#_1","title":"\u6a21\u677f","text":"code <pre><code>struct Node {\n    Node *ch[26];\n    int idx = 0;\n};\n\nvoid add (Node* rt, string s, int idx) {\n    for (int i = 0; i &lt; s.size(); i++) {\n        int c = s[i] - 'a';\n        if (rt-&gt;ch[c] == nullptr) {\n            rt-&gt;ch[c] = new node();\n        }\n        rt = rt-&gt;ch[c];\n    } \n    rt-&gt;idx = idx;\n}\n</code></pre>"},{"location":"string/trie/#_2","title":"\u4f8b\u984c","text":"CSES - Word Combinations <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u5b57\u4e32 \\(S\\) \u53ca \\(k\\) \u500b\u5b57\u4e32 \\(T_i\\)\uff0c\u554f\u6709\u591a\u5c11\u7a2e\u7d44\u5408\u53ef\u4ee5\u7d44\u51fa\u76ee\u6a19\u5b57\u4e32\u53ef\uff08\u91cd\u8907\u4f7f\u7528\uff09</p> <p>\\(n\\le 5000,k\\le 10^5,\\sum |T_i| \\le 10^6\\)</p> \u601d\u8def <p>\u4f7f\u7528\u52d5\u614b\u898f\u5283 : </p> <ul> <li> <p>\u72c0\u614b \\(dp(i) =\\) \u8981\u7d44\u5408\u51fa \\(S(1, i)\\) \u7684\u65b9\u6cd5\u6578</p> </li> <li> <p>\u8f49\u79fb \\(dp(i) = \\sum dp(i - |T_j|)\\) \u82e5 \\(T_j = S(i - |T_j| + 1, i)\\)</p> </li> </ul> <p>\u5982\u4f55\u5feb\u901f\u5224\u65b7 \\(T_j\\) \u548c \\(S(i - |T_j| + 1, i)\\) \u662f\u5426\u76f8\u7b49 ? \u4f7f\u7528 Trie \u5e6b\u52a9\u8f49\u79fb\u3002\u5148\u5efa\u51fa\u6bcf\u500b \\(T_i\\) \u53cd\u5411\u5b57\u4e32\u7684 Trie\uff0c\u8f49\u79fb\u904e\u7a0b\u6309\u7167 \\(S\\) \u8d70\u8a2a Trie\uff0c\u82e5\u9047\u5230\u55ae\u5b57\u5247\u8f49\u79fb\u3002\u6642\u9593\u8907\u96dc\u5ea6 : \u72c0\u614b\u6578 \\(O(n)\\)\uff0c\u8f49\u79fb\u70ba \\(O(n)\\)\uff0c\u5171 \\(O(n^2)\\)</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define lowbit(x) (x &amp; (-x))\n#define IO ios::sync_with_stdio(0);cin.tie(0);\n#define pii pair&lt;int, int&gt;\n#define mk make_pair\n#define pb push_back\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int maxn = 1e6 + 5;\nconst int M = 1e9 + 7;\nint dp[maxn];\n\nstruct node {\n    node *ch[26];\n    int idx = 0;\n};\n\nvoid add (node *rt, string s, int idx) {\n    for (int i = 0; i &lt; s.size(); i++) {\n        int c = s[i] - 'a';\n        if (rt -&gt; ch[c] == nullptr) {\n            rt -&gt; ch[c] = new node();\n        }\n        rt = rt -&gt; ch[c];\n    } \n    rt -&gt; idx = idx;\n}\n\nvoid solve (node *rt, int idx, string str) {\n    for (int i = idx; i &gt;= 1; i--) {\n        rt = rt -&gt; ch[str[i - 1] - 'a'];  \n        if (rt == nullptr) break;\n        if (rt -&gt; idx) {\n            dp[idx] += dp[i - 1];\n            dp[idx] %= M;\n        }\n    }\n}\n\nsigned main () {\n    string str;\n    int n;\n    cin &gt;&gt; str;\n    cin &gt;&gt; n;\n    vector&lt;string&gt; s(n + 1);\n    node *rt = new node();\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; s[i];\n        reverse(s[i].begin(), s[i].end());\n        add(rt, s[i], i);\n    }\n    dp[0] = 1;\n    for (int i = 1; i &lt;= str.size(); i++) {\n        solve(rt, i, str);\n    }\n    cout &lt;&lt; dp[str.size()] &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"string/trie/#0-1-trie","title":"0-1 Trie","text":"<p>\u5c07\u6578\u5b57\u8f49\u6210\u4e8c\u9032\u4f4d\uff0c\u7576\u6210\u5b57\u4e32\u6253\u5230 Trie \u4e0a\u9762</p> <p></p>"},{"location":"string/trie/#_3","title":"\u6700\u5927\u7570\u6216\u6578\u5c0d","text":"LOJ #10050. \u300c\u4e00\u672c\u901a 2.3 \u4f8b 2\u300dThe XOR Largest Pair <p>\u7d66 \\(N\\) \u500b\u6578\u5b57 \\(a_i\\)\uff0c\u627e\u51fa\u5176\u4e2d\u5169\u500b\u6578\u5b57\u4f7f\u5f97\u5169\u6578 xor \u6578\u503c\u6700\u5927</p> <p>\\(1\\le N\\le 10^5,0\\le A_i &lt; 2^{31}\\)</p> \u601d\u8def <p>\u5c07 \\(a\\) \u6253\u5230 01 Trie \u4e0a\uff0c\u5c0d\u65bc\u6bcf\u500b\u6578\u5b57\u5f9e root Greedy \u7684\u8d70\u4e0b\u53bb</p> \u8b8a\u5316\u984c K-th Maximum XOR of Two Numbers in an Array <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a\\)\uff0c\u554f\u5169\u500b\u5143\u7d20 xor \u8d77\u4f86\uff0c\u7b2c \\(k\\) \u5927\u662f\u591a\u5c11</p> <p>\\(n\\le 10^5\\)</p> \u60f3\u6cd5 <ul> <li> <p>\u4e8c\u5206\u641c \\(O(\\log C)\\)</p> </li> <li> <p>\u7528 \\(\\texttt{Trie}\\) \u6aa2\u67e5 \\(O(n\\log C)\\) </p> <ul> <li>\u5c0d\u65bc\u6bcf\u500b \\(a_i\\) \u627e \\(a_i \\oplus a_j \\le x\\) \u7684 \\(a_j\\) \u6709\u5e7e\u500b</li> <li>\u6bcf\u6b21\u5728 \\(\\texttt{Trie}\\) \u4e0a \\(\\texttt{find }O(\\log C)\\) (\u6df1\u5ea6)</li> <li>\u6709 \\(n\\) \u500b \\(a_i\\) \u6240\u4ee5\u624d\u662f \\(O(n\\log C)\\)</li> <li>\\(\\Rightarrow O(n\\log^2 C)\\)</li> </ul> </li> </ul>"},{"location":"string/trie/#_4","title":"\u6700\u5927\u7570\u6216\u8def\u5f91","text":"LOJ #10056. \u300c\u4e00\u672c\u901a 2.3 \u7ec3\u4e60 5\u300dThe XOR-longest Path <p>\u7d66\u5b9a\u4e00\u68f5 n \u500b\u9ede\u7684\u5e36\u6b0a\u6a39\uff0c\u6c42\u6a39\u4e0a\u6700\u9577\u7684\u7570\u6216\u548c\u8def\u5f91\u3002</p> <p>\\(1\\le n\\le 10^5, 0\\le w &lt; 2^{31}\\)</p> \u601d\u8def <p>\\(f(u,v)=f(rt,u)\\oplus f(rt,v)\\)</p> <p>\u554f\u984c\u5c31\u8f49\u6210\u6311\u5169\u500b\u6578\u8d77\u4f86\u6700\u5927\u7684</p> \u8b8a\u5316\u984c CF 1055 F. Tree and Xor <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u6a39\uff0c\u8a2d \\(f(u,v)\\) \u70ba \\(u\\) \u5230 \\(v\\) \u7684\u908a\u6b0a\u7570\u6216\u548c\uff0c\u554f\u5c0d\u65bc\u6240\u6709\u7684 \\(f(u,v)\\) \u7b2c \\(k\\) \u5927\u662f\u591a\u5c11</p> <p>\\(n\\le 2\\times 10^5\\)</p> \u60f3\u6cd5 <ul> <li>k-th Xor path problem</li> <li>\\(f(u,v)=f(rt,u)\\oplus f(rt,v)\\)</li> <li>\u554f\u984c\u5c31\u8f49\u6210\u6311\u5169\u500b XOR \u8d77\u4f86\u7b2c \\(k\\) \u5927</li> </ul>"},{"location":"string/trie/#_5","title":"\u7fd2\u984c","text":"CSES - Maximum Xor Subarray <p>\u7d66\u9577\u5ea6\u70ba \\(n\\) \u7684\u9663\u5217 \\(a\\)\uff0c\u6700\u5927 xor \u8d77\u4f86\u7684 Subrray \u662f\u591a\u5c11</p> <p>\\(n\\le 2\\times 10^5,0\\le x_i\\le 10^9\\)</p> \u60f3\u6cd5 <p>S[i, j] = S[j] ^ S[i - 1]\uff0c\u5c31\u8b8a\u6210\u4e0a\u9762\u6700\u5927\u7570\u6216\u6578\u5c0d\u7684\u554f\u984c\u4e86</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\nusing PQ = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;;\n\nconst int INF = 2e18;\nconst int maxn = 3e5 + 5;\nconst int M = 1e9 + 7;\n\nstruct node {\n    node *ch[2];\n\n    vector&lt;int&gt; con (int x) {\n        vector&lt;int&gt; res;\n        for (int i = 0; i &lt;= 30; i++) {\n            if (x &amp; (1 &lt;&lt; i)) res.pb (1);\n            else res.pb (0);\n        }\n        return res;\n    }\n\n    void add (int x, node *rt) {\n        vector&lt;int&gt; res = con (x);\n        int n = res.size ();\n\n        for (int i = n - 1; i &gt;= 0; i--) {\n            if (rt -&gt; ch[res[i]] == nullptr) rt -&gt; ch[res[i]] = new node ();\n            rt = rt -&gt; ch[res[i]];\n        }\n    }\n\n    int find (int x, node *rt) {\n        vector&lt;int&gt; res = con (x);\n        int n = res.size();\n\n        int ret = 0;\n        for (int i = n - 1; i &gt;= 0; i--) {\n            if (rt -&gt; ch[res[i] ^ 1] == nullptr) rt = rt -&gt; ch[res[i]], ret += (res[i] &lt;&lt; i);\n            else rt = rt -&gt; ch[res[i] ^ 1], ret += ((res[i] ^ 1) &lt;&lt; i);\n        }\n        return ret;\n    }\n};\n\nint n;\nint a[maxn], pre[maxn];\n\nvoid init () {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n}\n\nvoid solve () {\n    node *rt = new node ();\n\n    int res = 0;\n    rt -&gt; add (0, rt);\n    for(int i = 1; i &lt;= n; i++) {\n        pre[i] = pre[i - 1] ^ a[i];\n        int ret = rt -&gt; find (pre[i], rt) ^ pre[i];\n        res = max (res, ret);\n        rt -&gt; add (pre[i], rt);\n    }\n\n    cout &lt;&lt; res &lt;&lt; \"\\n\";\n} \n\nsigned main() {\n    // ios::sync_with_stdio(0);\n    // cin.tie(0);\n    int t = 1;\n    //cin &gt;&gt; t;\n    while (t--) {\n        init();\n        solve();\n    }\n} \n</code></pre> 2023 IOIC 308 . \u6578\u5b57\u904a\u6232 <p>\u7d66\u5b9a \\(a_1, a_2, \\ldots, a_{2N}\\)\uff0cAlice \u53ef\u4ee5\u5c07\u9019\u500b\u6578\u5217\u4efb\u610f\u6392\u5217\uff0c\u4e4b\u5f8c Bob \u8981\u505a\u6700\u5c11\u6b21\u64cd\u4f5c\u4f7f\u5f97 \\(a_{i} = a_{i+N}\\) \u5c0d\u6240\u6709 \\(i\\) \u5f9e \\(1\\) \u5230 \\(N\\) \u90fd\u6210\u7acb\uff0cBob \u6bcf\u6b21\u53ef\u4ee5\u9032\u884c\u7684\u64cd\u4f5c\u70ba\u9078\u64c7\u4e00\u500b\u8db3\u6a19 \\(i\\)\uff0c\u5c07 \\(a_i\\) \u6539\u6210 \\(\\lfloor \\frac{a_i}{2} \\rfloor,2a_i\\) \u6216 \\(2a_i+1\\)\u3002Alice \u60f3\u8b93 Bob \u9700\u8981\u7684\u64cd\u4f5c\u6b21\u6578\u76e1\u91cf\u591a\uff0c\u90a3\u6700\u591a\u53ef\u4ee5\u662f\u591a\u5c11\uff1f</p> <p>Alice \u6703\u9032\u884c \\(Q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fd\u6703\u9078\u64c7\u6578\u5217\u7684\u67d0\u500b\u6578\u4fee\u6539\u6210\u65b0\u7684\u6578\u5b57\uff0c\u8f38\u51fa\u4fee\u6539\u5f8c\u6574\u500b\u9663\u5217\u7684\u7b54\u6848\u662f\u591a\u5c11\u3002</p> <p>\\(N,Q\\le 10^5,1\\le a_i\\le 10^6\\)</p> CF 1864 E. Guess Game <p>\u7d66\u4e00\u500b\u9663\u5217 \\(a_1,\\ldots ,a_n\\)\uff0c\u9078\u96a8\u610f\u5169\u500b\u6578 i, j\uff0c\u4ee4 a = a[i], b = a[j]</p> <p>a \u548c b \u6703\u8f2a\u6d41\u8aaa\u51fa\u4e00\u4e9b\u4ee5\u4e0b\u8a0a\u606f\uff0c\u4ed6\u5011\u662f\u53ef\u4ee5\u807d\u5230\u5c0d\u65b9\u8a0a\u606f\u7684\uff0c\u4e00\u958b\u59cb\u4ed6\u5011\u53ea\u77e5\u9053 a | b \u662f\u591a\u5c11\uff0c\u4ed6\u5011\u7684\u76ee\u6a19\u662f\u78ba\u5b9a a, b \u7684\u95dc\u4fc2\u662f \\(a &lt; b, a &gt; b, a=b\\) \u54ea\u7a2e</p> <ul> <li> <p>\u8aaa : \u300cI don't know\u300d</p> </li> <li> <p>\u6216\u8aaa : \u300cI know, \u7b54\u6848\u662f \\(a &lt; b, a &gt; b, a=b\\)\u300d\uff0c\u8aaa\u5b8c\u5f8c\u904a\u6232\u5373\u7d50\u675f</p> </li> </ul> <p>a \u548c b \u90fd play optimally\uff0c\u554f\u8aaa\u8a71\u6b21\u6578\u7684\u671f\u671b\u503c\u662f\u591a\u5c11</p> <p>\\(1\\le n\\le 2\\times 10^5,0\\le a_i\\le 2^{30}\\)</p> \u601d\u8def <p>\u5148\u89c0\u5bdf\u503c\u57df\u7bc4\u570d\u53ea\u6709 [0, 1] \u7684 case\uff0ca \u70ba\u5148\u624b</p> <ul> <li> <p>\u82e5\u7576\u524d a = 0, b = 0\uff0c\u56e0\u70ba a|b \u7684\u9019\u4f4d\u5c31\u662f 0\uff0c\u4ed6\u5011\u6703\u76f4\u63a5\u5ffd\u8996</p> <ul> <li>\u8aaa\u8a71\u6b21\u6578 += 0</li> </ul> </li> <li> <p>\u82e5\u7576\u524d a = 0, b = 1\uff0c\u56e0\u70ba a|b \u7684\u9019\u4f4d\u5c31\u662f 1\uff0ca \u53ef\u4ee5\u76f4\u63a5\u8f38\u51fa \\(a&lt;b\\)</p> <ul> <li>\u8aaa\u8a71\u6b21\u6578 += 1</li> </ul> </li> <li> <p>\u82e5\u7576\u524d a = 1, b = 0\uff0c\u56e0\u70ba a|b \u7684\u9019\u4f4d\u5c31\u662f 1\uff0c\u4e0d\u78ba\u5b9a b \u662f 0 \u6216 1\uff0ca \u6703\u8aaa idk\uff0c\u8f2a\u5230 b \u6642\u4ed6\u5c31\u77e5\u9053 \\(b&gt;a\\)</p> <ul> <li>\u8aaa\u8a71\u6b21\u6578 += 2</li> </ul> </li> <li> <p>\u82e5\u7576\u524d a = 1, b = 1\uff0c\u56e0\u70ba a|b \u7684\u9019\u4f4d\u5c31\u662f 1\uff0ca \u6703\u8aaa idk\uff0c\u8f2a\u5230 b \u5c31\u77e5\u9053 a \u662f 1\uff08\u82e5\u5f8c\u9762\u9084\u6709\u4f4d\u6578\u5247\u8b8a\u5b50\u554f\u984c\uff09</p> <ul> <li>\u8aaa\u8a71\u6b21\u6578 += 1</li> </ul> </li> </ul> <p>\u8ddf\u5e73\u5e38\u4e00\u6a23\uff0c\u8d8a\u9ad8\u4f4d\u8d8a\u512a\u5148\uff0c\u6211\u5011\u8003\u616e\u96a8\u610f\u5169\u500b\u6578 a, b\uff0c\u5f9e i = lgC \u2026 0</p> <ul> <li> <p>\u82e5 a[i] = b[i] = 0 \u8df3\u904e</p> </li> <li> <p>\u82e5 a[i] = b[i] = 1, cnt +=1, \u4ea4\u63db\u5148\u5f8c\u624b</p> <ul> <li>a: idk, b: \u77e5\u9053 a[i] = 1 \u4e86, \u76f4\u63a5\u53bb\u6bd4\u8f03 i + 1</li> </ul> </li> <li> <p>\u82e5 a[i] = 0 \u21d2 ans = cnt ; \u82e5 b[i] = 0 \u21d2 ans = cnt + 1\uff0c\u7136\u5f8c\u904a\u6232\u5c31\u505c\u6b62\u4e86</p> </li> </ul> <p>\u8a18\u5f97\u5224\u7576 a = b \u6642\uff0c\u4ed6\u5011\u6703\u8aaa\u8a71\u7684\u6b21\u6578\u6070\u597d\u662f 1-bit \u7684\u6578\u91cf +1</p> <p>\u4f7f\u7528 01 Trie \u679a\u8209 a[i]\uff0c\u8003\u616e\u8ddf\u9664\u4e86 a[i] \u4ee5\u5916\u7684 a[j] \u7684\u8ca2\u737b</p> <p>\u6bd4\u8f03\u8a73\u7d30\u53ef\u4ee5\u53c3\u8003 : https://www.bilibili.com/video/BV1Bp4y1P7u6/?p=5</p> code <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int long long\n#define pii pair&lt;int, int&gt;\n#define pb push_back\n#define mk make_pair\n#define F first\n#define S second\n#define ALL(x) x.begin(), x.end()\n\nusing namespace std;\n\nconst int M = 998244353;\nint ans, cnt, now;\n\nstruct Node {\n    Node *lc = nullptr;\n    Node *rc = nullptr;\n    int sz = 0;\n\n    void pull() {\n        sz = 0;\n        if (lc) sz += lc-&gt;sz;\n        if (rc) sz += rc-&gt;sz;\n    }\n};\n\nvoid add(Node *root, int x, int i) {\n    if (i == -1) {\n        root-&gt;sz++;\n        return;\n    }\n    if (x &amp; (1 &lt;&lt; i)) {\n        if (root-&gt;rc == nullptr) {\n            root-&gt;rc = new Node();\n        }\n        add(root-&gt;rc, x, i - 1);\n        root-&gt;pull();\n    } else {\n        if (root-&gt;lc == nullptr) {\n            root-&gt;lc = new Node();\n        }\n        add(root-&gt;lc, x, i - 1);\n        root-&gt;pull();\n    }\n}\n\nvoid query(Node *root, int x, int i) {\n    if (i == -1) {\n        ans = (ans + root-&gt;sz * (cnt + 1)) % M;\n        return;\n    }\n    if (x &amp; (1 &lt;&lt; i)) { // me = 1, other = 0\n        if (root-&gt;lc) {\n            if (now) {\n                ans = (ans + (cnt + 2) * root-&gt;lc-&gt;sz % M) % M;\n            } else {\n                ans = (ans + (cnt + 1) * root-&gt;lc-&gt;sz % M) % M;\n            }\n        } \n        cnt++;\n        now ^= 1;\n        query(root-&gt;rc, x, i - 1);\n    } else { // me = 0, other = 1\n        if (root-&gt;rc) {\n            if (now) {\n                ans = (ans + (cnt + 1) * root-&gt;rc-&gt;sz % M) % M;\n            } else {\n                ans = (ans + (cnt + 2) * root-&gt;rc-&gt;sz % M) % M;\n            }\n        }  \n        query(root-&gt;lc, x, i - 1);\n    }\n}\n\nint fpow(int a, int b) {\n    int ret = 1;\n    a %= M;\n    while (b != 0) {\n        if (b &amp; 1) ret = (ret * a) % M;\n        a = (a * a) % M;\n        b &gt;&gt;= 1;\n    }\n    return ret;\n}\n\nvoid solve() {\n    ans = 0;\n    int n;\n    cin &gt;&gt; n;\n\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    Node *root = new Node();\n    for (int i = 0; i &lt; n; i++) {\n        add(root, a[i], 29);\n    }\n    for (int i = 0; i &lt; n; i++) {\n        cnt = 0;\n        now = 1;\n        query(root, a[i], 29);\n    }\n    cout &lt;&lt; (ans * fpow(n * n, M - 2)) % M &lt;&lt; '\\n';\n}\n\nsigned main() {\n    int t = 1;\n    cin &gt;&gt; t;\n    while (t--) {\n        solve();\n    }\n} \n</code></pre> USACO 2019 Dec. Gold p1. Cow Land <p>\u7d66\u4e00\u9846 \\(n\\) \u500b\u9ede\u7684\u6a39\uff0c\u8ce6\u4e88\u6bcf\u500b Node \\(a_i\\)\uff0c\\(q\\) \u7b46\u8a62\u554f</p> <ul> <li> <p>\\(\\text{modify}(i,x):\\) \u628a \\(a_i = x\\)</p> </li> <li> <p>\\(\\text{query}(u,v):\\) \u554f\u628a \\(u \\rightarrow v\\) \u7684 path \u4e0a\u7684 \\(a_i\\) xor \u8d77\u4f86\u662f\u591a\u5c11</p> </li> </ul> <p>\\(2\\le n\\le 10^5,1\\le q\\le 10^5,0\\le a_i\\le 10^9\\)</p> \u89e3\u6790 <ul> <li> <p>\u76f8\u95dc\u7684\u554f\u984c(\u4e0d\u662f Trie)</p> </li> <li> <p>\\(f(u,v)=f(u,rt) \\oplus f(v,rt)\\)</p> </li> <li> <p>\u554f\u984c\u5c31\u8f49\u6210\u4e86 CSES path queries I</p> </li> <li> <p>\u7528 euler technique \u89e3\u6c7a</p> </li> </ul> CF 1895 D. XOR Construction <p>\u7d66\u4e00\u500b\u9577\u5ea6\u70ba \\(n - 1\\) \u7684\u5e8f\u5217 \\(a_1, \\ldots ,a_n\\)\uff0c\u69cb\u9020\u4e00\u500b \\(0\\ldots (n - 1)\\) \u7684 permutation \\(b_1, \\ldots ,b_n\\)\uff0c\u5c0d\u65bc\u6240\u6709 \\(1\\le i\\le n - 1\\) \u6eff\u8db3 \\(b_i\\oplus b_{i+1}=a_i\\)</p> <p>\\(2\\le n\\le 2\\times 10^5\\)</p> hint <p>\u7576 b[1] \u6c7a\u5b9a\u5f8c\uff0cb[2], ..., b[n] \u5c31\u53ef\u4ee5\u88ab\u63a8\u51fa\u4f86</p> \u601d\u8def <p>\u6211\u5011\u53ef\u4ee5\u770b\u5230\u6578\u7d44 b \u7684\u7b2c\u4e00\u500b\u5143\u7d20\u6c7a\u5b9a\u4e86\u6240\u6709\u5176\u4ed6\u503c\uff0c\u5373 b[i + 1] = b[1] \u2295 a[1] \u2295 \u22ef \u2295 a[i]\u3002</p> <p>\u679a\u8209\u6240\u6709 b[1] \u53ef\u80fd\u7684\u503c\uff0c\u5c0d\u65bc\u6bcf\u500b b[1] \u7684\u503c\uff0c\u6211\u5011\u9700\u8981\u6aa2\u67e5\u5b83\u662f\u5426\u7522\u751f\u5408\u6cd5\u7684 permutation\uff08\u5373\u6240\u6709 b[i] &lt; n\uff09\u3002\u70ba\u4e86\u6709\u6548\u7387\u5730\u6aa2\u67e5\uff0c\u6211\u5011\u958b\u4e00\u500b\u9663\u5217 c\uff0c\u5176\u4e2d c[i] \u662f a \u7684\u524d i \u500b\u5143\u7d20\u7684 xor\uff08\u5373 c[i] = a[1] \u2295 a[2] \u2295 \u22ef \u2295 a[i]\uff0c\u5176\u4e2d c[0] = 0\uff09\u3002\u6211\u5011\u53ef\u4ee5\u770b\u5230 b[i + 1] = b[1] \u2295 c[i]\u3002\u6211\u5011\u5c07\u6240\u6709 c[i] \u7684\u503c\u5b58\u5728\u4e00\u500b trie\u3002\u8981\u6aa2\u67e5 b[1] \u662f\u5426\u751f\u6210\u4e86\u6240\u6709\u5143\u7d20\u90fd\u5c0f\u65bc n \u7684\u6578\u7d44\uff0c\u6211\u5011\u53ef\u4ee5\u5728 trie \u4e0a\u627e\u5230 b[1] \u2295 c[i] \u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u5c0f\u65bc n\uff0c\u90a3\u9ebc\u5c31\u662f\u4e00\u500b\u5408\u6cd5\u7684 permutation\u3002</p> <p>\u6211\u5011\u5be6\u969b\u4e0a\u4e0d\u9700\u8981\u6aa2\u67e5\u6700\u5c0f\u503c\u662f\u5426\u70ba 0\uff0c\u4ee5\u53ca\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u4e0d\u540c\uff1a\u56e0\u70ba\u4fdd\u8b49\u5b58\u4e00\u7d44\u89e3\uff0c\u56e0\u6b64\u6240\u6709\u503c 0, c[1], c[2], c[3], \u22ef, c[n-1] \u90fd\u6703\u5169\u5169\u4e0d\u540c\uff0c\u6240\u4ee5\u7121\u8ad6\u9078\u64c7\u54ea\u500b b[1]\uff0c\u6240\u6709 b[i] \u4e5f\u90fd\u5c07\u5169\u5169\u4e0d\u540c\uff0c\u90a3\u9ebc\u65e2\u7136\u6700\u5927\u503c\u90fd\u5c0f\u65bc n \u4e86\uff0c\u4e00\u5b9a\u5c31\u6703\u662f {0, ..., n - 1} \u9019\u500b\u96c6\u5408</p>"},{"location":"string/images/%E5%AD%97%E4%B8%B2%E5%A4%B1%E6%95%97%E6%A9%9F%E7%8E%87%E5%88%86%E6%9E%90/","title":"\u5b57\u4e32\u5931\u6557\u6a5f\u7387\u5206\u6790","text":""},{"location":"string/images/%E5%AD%97%E4%B8%B2%E5%A4%B1%E6%95%97%E6%A9%9F%E7%8E%87%E5%88%86%E6%9E%90/#n-p","title":"\u5931\u6557\u6a5f\u7387\u6703\u5c0f\u65bc\u7b49\u65bc n / P","text":"<p>\u7576 Hash \u78b0\u649e\u767c\u751f\u6642\uff0c\u6703\u5c07\u4e0d\u540c\u7684\u5b57\u4e32\u5224\u65b7\u6210\u76f8\u540c\uff0c\u6a5f\u7387\u4e0a\u9650\u70ba n / P\u3002</p> <p>\u628a\u5b57\u4e32\u7576\u6210\u4e00\u500b\u591a\u9805\u5f0f \\(a_0 x^0 + a_1 x^1 + a_2 x^2 + \\dots a_{n-1} x^{n-1} \\pmod{P}\\)</p> <p>\u5169\u500b\u9577\u5ea6 n \u7684\u5b57\u4e32 a, b \u76f8\u7b49\u8868\u793a\u5169\u500b\u591a\u9805\u5f0f a - b = 0\u3002\u591a\u9805\u5f0f a - b \u6700\u591a\u6703\u6709 n \u500b\u6839<sup>1</sup> \u21d2 \u5931\u6557\u6a5f\u7387\u6703\u5c0f\u65bc\u7b49\u65bc n / P</p> <p>\u66f4\u8a73\u7d30\u53ef\u898b : https://codeforces.com/blog/entry/60442</p>"},{"location":"string/images/%E5%AD%97%E4%B8%B2%E5%A4%B1%E6%95%97%E6%A9%9F%E7%8E%87%E5%88%86%E6%9E%90/#1-p","title":"\u5b57\u4e32\u984c\u76ee\u5206\u6790\u4e00\u822c\u7576\u6210 1 / P","text":"<p>\u4e0a\u9762\u5206\u6790\u8aaa n / P \u5176\u5be6\u662f\u9ad8\u4f30\u5f88\u591a\u7684\uff0c\u56e0\u70ba\u9084\u9700\u8981\u591a\u9805\u5f0f\u6070\u597d\u6709 n \u500b\u6839\u3002\u5728\u4e00\u822c\u7684\u60c5\u6cc1\u4e0b\uff0c\u6703\u5c07\u4e0d\u540c\u7684\u5b57\u4e32\u5224\u65b7\u6210\u76f8\u540c\u7684\u6a5f\u7387\u662f 1 / P\u3002</p> <p>\u4ee4 \\(P_s(x),P_t(x)\\) \u662f \\(s,t\\) \u591a\u9805\u5f0f\u5e36\u5165 \\(x\\) \u7684 hash value\u3002\u6211\u5011\u5047\u8a2d \\(P\\) \u5f88\u5927\uff0c\u4f7f \\(P_s(x),P_t(x)\\) \u4ee5 \\(x \\in \\mathbb{Z}\\) \u4ee3\u5165\u90fd\u662f\u4ecb\u65bc \\([0,P-1]\\) \u7684 uniform random number<sup>2</sup>\u3002</p> <p>\u82e5 \\(s=t\\) :</p> <ul> <li>\\(\\forall x\\in \\mathbb{Z}\\space \\space P_s(x)=P_t(x)\\)</li> </ul> <p>\u82e5 \\(s\\neq t\\) :</p> <ul> <li>\\(\\frac{P-1}{P}\\) \u5927\u591a\u6578 \\(P_s(x)\\neq P_t(x),x\\in \\mathbb{Z}\\)</li> <li>\\(\\frac{1}{P}\\) \u5c11\u6578 \\(P_s(x)= P_t(x),x\\in \\mathbb{Z}\\)</li> </ul>"},{"location":"string/images/%E5%AD%97%E4%B8%B2%E5%A4%B1%E6%95%97%E6%A9%9F%E7%8E%87%E5%88%86%E6%9E%90/#n-n-p","title":"n \u6b21\u6bd4\u8f03\u932f\u8aa4\u6a5f\u7387 &lt;= n / P","text":"<p>\u6bcf\u6b21\u6bd4\u8f03\u5169\u500b\u5b57\u4e32 s, t \u662f\u5426\u76f8\u540c\uff0c\u9032\u884c n \u6b21\uff0c\u6703\u81f3\u5c11\u51fa\u73fe\u4e00\u6b21\u932f\u8aa4\u7684\u6a5f\u7387 &lt;= n / P\u3002</p> <p>\u4f8b\u5982\u6211\u5011\u6bd4\u8f03 3 \u6b21\uff0c\u4e00\u6b21\u7684\u5931\u6557\u6a5f\u7387\u70ba 1 / P\u3002\u6211\u5011\u5c07\u5716\u756b\u51fa\u4f86 :</p> <p></p> <ol> <li> <p>\u610f\u5373\u5e36 n \u500b\u4e0d\u540c\u7684 x \u9032\u53bb\uff0c a-b \u90fd = 0\uff0c\u8a73\u898b Polynomial Identity Testing \u21a9</p> </li> <li> <p>\u53c3\u8003 https://stackoverflow.com/a/62439419\u00a0\u21a9</p> </li> </ol>"}]}